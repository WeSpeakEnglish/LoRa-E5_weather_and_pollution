
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ff0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e4c  08013128  08013128  00023128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08013f74  08013f74  00023f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801404c  0801404c  00030124  2**0
                  CONTENTS
  5 .ARM          00000008  0801404c  0801404c  0002404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08014054  08014054  00030124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08014054  08014054  00024054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801405c  0801405c  0002405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  08014060  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f0c  20000124  08014184  00030124  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002030  08014184  00032030  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003014e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005ec2d  00000000  00000000  00030191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d600  00000000  00000000  0008edbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001d1b6  00000000  00000000  0009c3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f50  00000000  00000000  000b9578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002d0b  00000000  00000000  000bc4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029dfe  00000000  00000000  000bf1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00056496  00000000  00000000  000e8fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d2e26  00000000  00000000  0013f467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000085e0  00000000  00000000  00212290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  0021a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000124 	.word	0x20000124
 8000154:	00000000 	.word	0x00000000
 8000158:	08013110 	.word	0x08013110

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000128 	.word	0x20000128
 8000174:	08013110 	.word	0x08013110

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001088:	b500      	push	{lr}
 800108a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108c:	2300      	movs	r3, #0
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001094:	481a      	ldr	r0, [pc, #104]	; (8001100 <MX_ADC_Init+0x78>)
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <MX_ADC_Init+0x7c>)
 8001098:	6002      	str	r2, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800109e:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a2:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a4:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a6:	2204      	movs	r2, #4
 80010a8:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010aa:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010ac:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80010ae:	2201      	movs	r2, #1
 80010b0:	7682      	strb	r2, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80010b2:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010bc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c4:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80010c6:	2207      	movs	r2, #7
 80010c8:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80010ca:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80010cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010d0:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010d2:	f001 fd81 	bl	8002bd8 <HAL_ADC_Init>
 80010d6:	b960      	cbnz	r0, 80010f2 <MX_ADC_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_ADC_Init+0x80>)
 80010da:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010dc:	2300      	movs	r3, #0
 80010de:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010e0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e2:	a901      	add	r1, sp, #4
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC_Init+0x78>)
 80010e6:	f001 fef1 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80010ea:	b928      	cbnz	r0, 80010f8 <MX_ADC_Init+0x70>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010ec:	b005      	add	sp, #20
 80010ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f2:	f000 fda5 	bl	8001c40 <Error_Handler>
 80010f6:	e7ef      	b.n	80010d8 <MX_ADC_Init+0x50>
    Error_Handler();
 80010f8:	f000 fda2 	bl	8001c40 <Error_Handler>
}
 80010fc:	e7f6      	b.n	80010ec <MX_ADC_Init+0x64>
 80010fe:	bf00      	nop
 8001100:	20000140 	.word	0x20000140
 8001104:	40012400 	.word	0x40012400
 8001108:	0c000008 	.word	0x0c000008

0800110c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800110c:	b500      	push	{lr}
 800110e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	2300      	movs	r3, #0
 8001112:	9303      	str	r3, [sp, #12]
 8001114:	9304      	str	r3, [sp, #16]
 8001116:	9305      	str	r3, [sp, #20]
 8001118:	9306      	str	r3, [sp, #24]
 800111a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 800111c:	6802      	ldr	r2, [r0, #0]
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_ADC_MspInit+0x58>)
 8001120:	429a      	cmp	r2, r3
 8001122:	d002      	beq.n	800112a <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001124:	b009      	add	sp, #36	; 0x24
 8001126:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001134:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001138:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800113c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800113e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001142:	f042 0202 	orr.w	r2, r2, #2
 8001146:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001150:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001152:	2310      	movs	r3, #16
 8001154:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	a903      	add	r1, sp, #12
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <HAL_ADC_MspInit+0x5c>)
 800115e:	f002 fe5f 	bl	8003e20 <HAL_GPIO_Init>
}
 8001162:	e7df      	b.n	8001124 <HAL_ADC_MspInit+0x18>
 8001164:	40012400 	.word	0x40012400
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800116c:	b508      	push	{r3, lr}

  if(adcHandle->Instance==ADC)
 800116e:	6802      	ldr	r2, [r0, #0]
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_ADC_MspDeInit+0x24>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d000      	beq.n	8001178 <HAL_ADC_MspDeInit+0xc>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001176:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800117e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001182:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001184:	2110      	movs	r1, #16
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <HAL_ADC_MspDeInit+0x28>)
 8001188:	f002 ff12 	bl	8003fb0 <HAL_GPIO_DeInit>
}
 800118c:	e7f3      	b.n	8001176 <HAL_ADC_MspDeInit+0xa>
 800118e:	bf00      	nop
 8001190:	40012400 	.word	0x40012400
 8001194:	48000400 	.word	0x48000400

08001198 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001198:	b530      	push	{r4, r5, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	2300      	movs	r3, #0
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80011a6:	f7ff ff6f 	bl	8001088 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <ADC_ReadChannels+0x6c>)
 80011ac:	f002 f95e 	bl	800346c <HAL_ADCEx_Calibration_Start>
 80011b0:	b9f8      	cbnz	r0, 80011f2 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80011b2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80011b8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ba:	a901      	add	r1, sp, #4
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <ADC_ReadChannels+0x6c>)
 80011be:	f001 fe85 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80011c2:	b9c8      	cbnz	r0, 80011f8 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <ADC_ReadChannels+0x6c>)
 80011c6:	f002 f84f 	bl	8003268 <HAL_ADC_Start>
 80011ca:	b9c0      	cbnz	r0, 80011fe <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80011cc:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <ADC_ReadChannels+0x6c>)
 80011ce:	f04f 31ff 	mov.w	r1, #4294967295
 80011d2:	4620      	mov	r0, r4
 80011d4:	f001 fe18 	bl	8002e08 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80011d8:	4620      	mov	r0, r4
 80011da:	f002 f927 	bl	800342c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80011de:	4620      	mov	r0, r4
 80011e0:	f001 fe71 	bl	8002ec6 <HAL_ADC_GetValue>
 80011e4:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f002 f8c0 	bl	800336c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80011ec:	4628      	mov	r0, r5
 80011ee:	b005      	add	sp, #20
 80011f0:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011f2:	f000 fd25 	bl	8001c40 <Error_Handler>
 80011f6:	e7dc      	b.n	80011b2 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80011f8:	f000 fd22 	bl	8001c40 <Error_Handler>
 80011fc:	e7e2      	b.n	80011c4 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80011fe:	f000 fd1f 	bl	8001c40 <Error_Handler>
 8001202:	e7e3      	b.n	80011cc <ADC_ReadChannels+0x34>
 8001204:	20000140 	.word	0x20000140

08001208 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001208:	4b01      	ldr	r3, [pc, #4]	; (8001210 <SYS_InitMeasurement+0x8>)
 800120a:	4a02      	ldr	r2, [pc, #8]	; (8001214 <SYS_InitMeasurement+0xc>)
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	4770      	bx	lr
 8001210:	20000140 	.word	0x20000140
 8001214:	40012400 	.word	0x40012400

08001218 <SYS_GetBatteryLevel>:
{
 8001218:	b508      	push	{r3, lr}
   return ADC_ReadChannels(ADC_CHANNEL_3);
 800121a:	4802      	ldr	r0, [pc, #8]	; (8001224 <SYS_GetBatteryLevel+0xc>)
 800121c:	f7ff ffbc 	bl	8001198 <ADC_ReadChannels>
}
 8001220:	b280      	uxth	r0, r0
 8001222:	bd08      	pop	{r3, pc}
 8001224:	0c000008 	.word	0x0c000008

08001228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001228:	b500      	push	{lr}
 800122a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001232:	f042 0204 	orr.w	r2, r2, #4
 8001236:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800123a:	f002 0204 	and.w	r2, r2, #4
 800123e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001240:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001242:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001252:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	200b      	movs	r0, #11
 800125a:	f002 f9bb 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800125e:	200b      	movs	r0, #11
 8001260:	f002 f9ee 	bl	8003640 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	4611      	mov	r1, r2
 8001268:	200c      	movs	r0, #12
 800126a:	f002 f9b3 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800126e:	200c      	movs	r0, #12
 8001270:	f002 f9e6 	bl	8003640 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	4611      	mov	r1, r2
 8001278:	203d      	movs	r0, #61	; 0x3d
 800127a:	f002 f9ab 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800127e:	203d      	movs	r0, #61	; 0x3d
 8001280:	f002 f9de 	bl	8003640 <HAL_NVIC_EnableIRQ>

}
 8001284:	b003      	add	sp, #12
 8001286:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800128c <FLASH_IF_INT_Clear_Error>:
  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800128c:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800128e:	f002 fcdb 	bl	8003c48 <HAL_FLASH_Unlock>
 8001292:	b978      	cbnz	r0, 80012b4 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <FLASH_IF_INT_Clear_Error+0x30>)
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80012a2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80012a4:	f002 fce4 	bl	8003c70 <HAL_FLASH_Lock>
    {
      ret_status = FLASH_IF_OK;
 80012a8:	2800      	cmp	r0, #0
 80012aa:	bf14      	ite	ne
 80012ac:	f06f 0004 	mvnne.w	r0, #4
 80012b0:	2000      	moveq	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80012b2:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80012b4:	f06f 0004 	mvn.w	r0, #4
 80012b8:	e7fb      	b.n	80012b2 <FLASH_IF_INT_Clear_Error+0x26>
 80012ba:	bf00      	nop
 80012bc:	58004000 	.word	0x58004000

080012c0 <FLASH_IF_INT_Erase>:
{
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d038      	beq.n	800133e <FLASH_IF_INT_Erase+0x7e>
 80012cc:	460c      	mov	r4, r1
 80012ce:	4606      	mov	r6, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80012d0:	f7ff ffdc 	bl	800128c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80012d4:	4605      	mov	r5, r0
 80012d6:	b110      	cbz	r0, 80012de <FLASH_IF_INT_Erase+0x1e>
}
 80012d8:	4628      	mov	r0, r5
 80012da:	b004      	add	sp, #16
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012de:	f002 fcb3 	bl	8003c48 <HAL_FLASH_Unlock>
 80012e2:	bb78      	cbnz	r0, 8001344 <FLASH_IF_INT_Erase+0x84>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80012e4:	2302      	movs	r3, #2
 80012e6:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80012e8:	f106 4378 	add.w	r3, r6, #4160749568	; 0xf8000000
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <FLASH_IF_INT_Erase+0x8c>)
 80012ee:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <FLASH_IF_INT_Erase+0x90>)
 80012f4:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80012f8:	fbb3 fcf1 	udiv	ip, r3, r1
 80012fc:	fb01 331c 	mls	r3, r1, ip, r3
 8001300:	0adb      	lsrs	r3, r3, #11
 8001302:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001304:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 8001308:	3c01      	subs	r4, #1
 800130a:	4434      	add	r4, r6
 800130c:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001310:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 8001314:	fbb4 f1f2 	udiv	r1, r4, r2
 8001318:	fb02 4411 	mls	r4, r2, r1, r4
 800131c:	ebc3 23d4 	rsb	r3, r3, r4, lsr #11
 8001320:	3301      	adds	r3, #1
 8001322:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001324:	a903      	add	r1, sp, #12
 8001326:	4668      	mov	r0, sp
 8001328:	f002 fd28 	bl	8003d7c <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 800132c:	b120      	cbz	r0, 8001338 <FLASH_IF_INT_Erase+0x78>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800132e:	2802      	cmp	r0, #2
 8001330:	bf0c      	ite	eq
 8001332:	2501      	moveq	r5, #1
 8001334:	f06f 0501 	mvnne.w	r5, #1
      HAL_FLASH_Lock();
 8001338:	f002 fc9a 	bl	8003c70 <HAL_FLASH_Lock>
 800133c:	e7cc      	b.n	80012d8 <FLASH_IF_INT_Erase+0x18>
    return FLASH_IF_PARAM_ERROR;
 800133e:	f06f 0505 	mvn.w	r5, #5
 8001342:	e7c9      	b.n	80012d8 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001344:	f06f 0504 	mvn.w	r5, #4
 8001348:	e7c6      	b.n	80012d8 <FLASH_IF_INT_Erase+0x18>
 800134a:	bf00      	nop
 800134c:	1fff7000 	.word	0x1fff7000
 8001350:	03fffc00 	.word	0x03fffc00

08001354 <FLASH_IF_Write>:
{
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	b089      	sub	sp, #36	; 0x24
 800135a:	9204      	str	r2, [sp, #16]
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800135c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001360:	d362      	bcc.n	8001428 <FLASH_IF_Write+0xd4>
 8001362:	4681      	mov	r9, r0
 8001364:	460c      	mov	r4, r1
 8001366:	4611      	mov	r1, r2
 8001368:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <FLASH_IF_Write+0x1d0>)
 800136a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <FLASH_IF_Write+0x1d4>)
 8001370:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001374:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001378:	3b01      	subs	r3, #1
 800137a:	4298      	cmp	r0, r3
 800137c:	d858      	bhi.n	8001430 <FLASH_IF_Write+0xdc>
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800137e:	2800      	cmp	r0, #0
 8001380:	d05a      	beq.n	8001438 <FLASH_IF_Write+0xe4>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d05c      	beq.n	8001440 <FLASH_IF_Write+0xec>
 8001386:	ea40 0301 	orr.w	r3, r0, r1
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800138a:	f013 0307 	ands.w	r3, r3, #7
 800138e:	9306      	str	r3, [sp, #24]
 8001390:	d15a      	bne.n	8001448 <FLASH_IF_Write+0xf4>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001392:	f7ff ff7b 	bl	800128c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001396:	9005      	str	r0, [sp, #20]
 8001398:	b118      	cbz	r0, 80013a2 <FLASH_IF_Write+0x4e>
}
 800139a:	9805      	ldr	r0, [sp, #20]
 800139c:	b009      	add	sp, #36	; 0x24
 800139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80013a2:	f002 fc51 	bl	8003c48 <HAL_FLASH_Unlock>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d152      	bne.n	8001450 <FLASH_IF_Write+0xfc>
      start_page_index = PAGE_INDEX(uDest);
 80013aa:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <FLASH_IF_Write+0x1d0>)
 80013ac:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80013b0:	495d      	ldr	r1, [pc, #372]	; (8001528 <FLASH_IF_Write+0x1d4>)
 80013b2:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80013b6:	f109 4278 	add.w	r2, r9, #4160749568	; 0xf8000000
 80013ba:	fbb2 f3f1 	udiv	r3, r2, r1
 80013be:	fb01 2213 	mls	r2, r1, r3, r2
 80013c2:	0ad3      	lsrs	r3, r2, #11
 80013c4:	9303      	str	r3, [sp, #12]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80013c6:	9b04      	ldr	r3, [sp, #16]
 80013c8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80013cc:	3b01      	subs	r3, #1
 80013ce:	444b      	add	r3, r9
 80013d0:	fbb3 f0f1 	udiv	r0, r3, r1
 80013d4:	fb01 3310 	mls	r3, r1, r0, r3
 80013d8:	0adb      	lsrs	r3, r3, #11
 80013da:	9307      	str	r3, [sp, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	eba3 22d2 	sub.w	r2, r3, r2, lsr #11
      if (number_pages > 1)
 80013e2:	2a01      	cmp	r2, #1
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80013e4:	bf86      	itte	hi
 80013e6:	f3c9 080a 	ubfxhi	r8, r9, #0, #11
 80013ea:	f5c8 6800 	rsbhi	r8, r8, #2048	; 0x800
  uint32_t length = uLength;
 80013ee:	f8dd 8010 	ldrls.w	r8, [sp, #16]
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80013f2:	9a03      	ldr	r2, [sp, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d20c      	bcs.n	8001412 <FLASH_IF_Write+0xbe>
  uint32_t uSource = (uint32_t)pSource;
 80013f8:	9402      	str	r4, [sp, #8]
 80013fa:	f8cd 9004 	str.w	r9, [sp, #4]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013fe:	f04f 0b01 	mov.w	fp, #1
 8001402:	e077      	b.n	80014f4 <FLASH_IF_Write+0x1a0>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001404:	f06f 0301 	mvn.w	r3, #1
 8001408:	9305      	str	r3, [sp, #20]
 800140a:	e002      	b.n	8001412 <FLASH_IF_Write+0xbe>
 800140c:	f06f 0303 	mvn.w	r3, #3
 8001410:	9305      	str	r3, [sp, #20]
      HAL_FLASH_Lock();
 8001412:	f002 fc2d 	bl	8003c70 <HAL_FLASH_Lock>
 8001416:	e7c0      	b.n	800139a <FLASH_IF_Write+0x46>
 8001418:	f06f 0303 	mvn.w	r3, #3
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	e7f8      	b.n	8001412 <FLASH_IF_Write+0xbe>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001420:	f06f 0305 	mvn.w	r3, #5
 8001424:	9305      	str	r3, [sp, #20]
 8001426:	e7f4      	b.n	8001412 <FLASH_IF_Write+0xbe>
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9305      	str	r3, [sp, #20]
 800142e:	e7b4      	b.n	800139a <FLASH_IF_Write+0x46>
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	9305      	str	r3, [sp, #20]
 8001436:	e7b0      	b.n	800139a <FLASH_IF_Write+0x46>
    return FLASH_IF_PARAM_ERROR;
 8001438:	f06f 0305 	mvn.w	r3, #5
 800143c:	9305      	str	r3, [sp, #20]
 800143e:	e7ac      	b.n	800139a <FLASH_IF_Write+0x46>
 8001440:	f06f 0305 	mvn.w	r3, #5
 8001444:	9305      	str	r3, [sp, #20]
 8001446:	e7a8      	b.n	800139a <FLASH_IF_Write+0x46>
 8001448:	f06f 0305 	mvn.w	r3, #5
 800144c:	9305      	str	r3, [sp, #20]
 800144e:	e7a4      	b.n	800139a <FLASH_IF_Write+0x46>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001450:	f06f 0304 	mvn.w	r3, #4
 8001454:	9305      	str	r3, [sp, #20]
  return ret_status;
 8001456:	e7a0      	b.n	800139a <FLASH_IF_Write+0x46>
          if (pAllocatedBuffer == NULL)
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <FLASH_IF_Write+0x1d8>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	2800      	cmp	r0, #0
 800145e:	d0df      	beq.n	8001420 <FLASH_IF_Write+0xcc>
 8001460:	9b03      	ldr	r3, [sp, #12]
 8001462:	02dc      	lsls	r4, r3, #11
 8001464:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001468:	4625      	mov	r5, r4
  if ((pDestination == NULL) || (pSource == NULL))
 800146a:	b124      	cbz	r4, 8001476 <FLASH_IF_Write+0x122>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800146c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001470:	4621      	mov	r1, r4
 8001472:	f010 feab 	bl	80121cc <UTIL_MEM_cpy_8>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001476:	9b01      	ldr	r3, [sp, #4]
 8001478:	f3c3 000a 	ubfx	r0, r3, #0, #11
 800147c:	4e2b      	ldr	r6, [pc, #172]	; (800152c <FLASH_IF_Write+0x1d8>)
 800147e:	6833      	ldr	r3, [r6, #0]
 8001480:	fa1f f288 	uxth.w	r2, r8
 8001484:	9902      	ldr	r1, [sp, #8]
 8001486:	4418      	add	r0, r3
 8001488:	f010 fea0 	bl	80121cc <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4628      	mov	r0, r5
 8001492:	f7ff ff15 	bl	80012c0 <FLASH_IF_INT_Erase>
 8001496:	2800      	cmp	r0, #0
 8001498:	d1b4      	bne.n	8001404 <FLASH_IF_Write+0xb0>
          current_source = (uint32_t)pAllocatedBuffer;
 800149a:	6837      	ldr	r7, [r6, #0]
          current_length = FLASH_PAGE_SIZE;
 800149c:	f44f 6a00 	mov.w	sl, #2048	; 0x800
 80014a0:	9d06      	ldr	r5, [sp, #24]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80014a2:	197e      	adds	r6, r7, r5
 80014a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80014a8:	4621      	mov	r1, r4
 80014aa:	4658      	mov	r0, fp
 80014ac:	f002 fc22 	bl	8003cf4 <HAL_FLASH_Program>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d1ab      	bne.n	800140c <FLASH_IF_Write+0xb8>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	6862      	ldr	r2, [r4, #4]
 80014b8:	5979      	ldr	r1, [r7, r5]
 80014ba:	6873      	ldr	r3, [r6, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	bf08      	it	eq
 80014c0:	4288      	cmpeq	r0, r1
 80014c2:	d1a9      	bne.n	8001418 <FLASH_IF_Write+0xc4>
            current_dest = current_dest + 8U;
 80014c4:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80014c6:	3508      	adds	r5, #8
 80014c8:	4555      	cmp	r5, sl
 80014ca:	d3ea      	bcc.n	80014a2 <FLASH_IF_Write+0x14e>
        uDest += length;
 80014cc:	9b01      	ldr	r3, [sp, #4]
 80014ce:	4443      	add	r3, r8
 80014d0:	9301      	str	r3, [sp, #4]
        uSource += length;
 80014d2:	9b02      	ldr	r3, [sp, #8]
 80014d4:	4443      	add	r3, r8
 80014d6:	9302      	str	r3, [sp, #8]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80014d8:	9b04      	ldr	r3, [sp, #16]
 80014da:	eba3 0808 	sub.w	r8, r3, r8
 80014de:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
 80014e2:	bf28      	it	cs
 80014e4:	f44f 6800 	movcs.w	r8, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80014e8:	9a03      	ldr	r2, [sp, #12]
 80014ea:	1c53      	adds	r3, r2, #1
 80014ec:	9907      	ldr	r1, [sp, #28]
 80014ee:	4291      	cmp	r1, r2
 80014f0:	d08f      	beq.n	8001412 <FLASH_IF_Write+0xbe>
 80014f2:	9303      	str	r3, [sp, #12]
  for (index = 0; index < uLength; index += 8)
 80014f4:	f1b8 0f00 	cmp.w	r8, #0
 80014f8:	d0e8      	beq.n	80014cc <FLASH_IF_Write+0x178>
 80014fa:	f1a9 0208 	sub.w	r2, r9, #8
    if (*(uint64_t *)pStart != UINT64_MAX)
 80014fe:	4613      	mov	r3, r2
 8001500:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8001504:	6851      	ldr	r1, [r2, #4]
 8001506:	f1b1 3fff 	cmp.w	r1, #4294967295
 800150a:	bf08      	it	eq
 800150c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
 8001510:	d1a2      	bne.n	8001458 <FLASH_IF_Write+0x104>
  for (index = 0; index < uLength; index += 8)
 8001512:	3310      	adds	r3, #16
 8001514:	eba3 0309 	sub.w	r3, r3, r9
 8001518:	4543      	cmp	r3, r8
 800151a:	d3f0      	bcc.n	80014fe <FLASH_IF_Write+0x1aa>
 800151c:	46c2      	mov	sl, r8
 800151e:	9f02      	ldr	r7, [sp, #8]
 8001520:	9c01      	ldr	r4, [sp, #4]
 8001522:	e7bd      	b.n	80014a0 <FLASH_IF_Write+0x14c>
 8001524:	1fff7000 	.word	0x1fff7000
 8001528:	03fffc00 	.word	0x03fffc00
 800152c:	200001a4 	.word	0x200001a4

08001530 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001530:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001534:	d312      	bcc.n	800155c <FLASH_IF_Read+0x2c>
{
 8001536:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <FLASH_IF_Read+0x44>)
 800153a:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <FLASH_IF_Read+0x48>)
 8001540:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001544:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001548:	3b01      	subs	r3, #1
 800154a:	4299      	cmp	r1, r3
 800154c:	d809      	bhi.n	8001562 <FLASH_IF_Read+0x32>
  if ((pDestination == NULL) || (pSource == NULL))
 800154e:	b158      	cbz	r0, 8001568 <FLASH_IF_Read+0x38>
 8001550:	b169      	cbz	r1, 800156e <FLASH_IF_Read+0x3e>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001552:	b292      	uxth	r2, r2
 8001554:	f010 fe3a 	bl	80121cc <UTIL_MEM_cpy_8>
  return ret_status;
 8001558:	2000      	movs	r0, #0
}
 800155a:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001560:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
 8001566:	e7f8      	b.n	800155a <FLASH_IF_Read+0x2a>
    return FLASH_IF_PARAM_ERROR;
 8001568:	f06f 0005 	mvn.w	r0, #5
 800156c:	e7f5      	b.n	800155a <FLASH_IF_Read+0x2a>
 800156e:	f06f 0005 	mvn.w	r0, #5
 8001572:	e7f2      	b.n	800155a <FLASH_IF_Read+0x2a>
 8001574:	1fff7000 	.word	0x1fff7000
 8001578:	03fffc00 	.word	0x03fffc00

0800157c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800157c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001580:	d30e      	bcc.n	80015a0 <FLASH_IF_Erase+0x24>
{
 8001582:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <FLASH_IF_Erase+0x30>)
 8001586:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <FLASH_IF_Erase+0x34>)
 800158c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001590:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001594:	3b01      	subs	r3, #1
 8001596:	4298      	cmp	r0, r3
 8001598:	d805      	bhi.n	80015a6 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800159a:	f7ff fe91 	bl	80012c0 <FLASH_IF_INT_Erase>
}
 800159e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015a4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a6:	f04f 30ff 	mov.w	r0, #4294967295
 80015aa:	e7f8      	b.n	800159e <FLASH_IF_Erase+0x22>
 80015ac:	1fff7000 	.word	0x1fff7000
 80015b0:	03fffc00 	.word	0x03fffc00

080015b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	2400      	movs	r4, #0
 80015ba:	9403      	str	r4, [sp, #12]
 80015bc:	9404      	str	r4, [sp, #16]
 80015be:	9405      	str	r4, [sp, #20]
 80015c0:	9406      	str	r4, [sp, #24]
 80015c2:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d2:	f002 0201 	and.w	r2, r2, #1
 80015d6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015d8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015dc:	f042 0202 	orr.w	r2, r2, #2
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e4:	f002 0202 	and.w	r2, r2, #2
 80015e8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015ea:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ee:	f042 0204 	orr.w	r2, r2, #4
 80015f2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80015fc:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 80015fe:	4e1f      	ldr	r6, [pc, #124]	; (800167c <MX_GPIO_Init+0xc8>)
 8001600:	4622      	mov	r2, r4
 8001602:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001606:	4630      	mov	r0, r6
 8001608:	f002 fd50 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2120      	movs	r1, #32
 8001610:	4630      	mov	r0, r6
 8001612:	f002 fd4b 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001616:	4622      	mov	r2, r4
 8001618:	f240 2131 	movw	r1, #561	; 0x231
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f002 fd44 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|LED2_Pin;
 8001624:	2328      	movs	r3, #40	; 0x28
 8001626:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2501      	movs	r5, #1
 800162a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2703      	movs	r7, #3
 8001630:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	a903      	add	r1, sp, #12
 8001634:	4630      	mov	r0, r6
 8001636:	f002 fbf3 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 800163a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	a903      	add	r1, sp, #12
 8001648:	4630      	mov	r0, r6
 800164a:	f002 fbe9 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800164e:	2331      	movs	r3, #49	; 0x31
 8001650:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	a903      	add	r1, sp, #12
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f002 fbdf 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001666:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800166e:	a903      	add	r1, sp, #12
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f002 fbd4 	bl	8003e20 <HAL_GPIO_Init>

}
 8001678:	b009      	add	sp, #36	; 0x24
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167c:	48000400 	.word	0x48000400

08001680 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001680:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <MX_I2C2_Init+0x4c>)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C2_Init+0x50>)
 8001686:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00300F37;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_I2C2_Init+0x54>)
 800168a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001690:	2201      	movs	r2, #1
 8001692:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001696:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001698:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800169e:	f002 fecf 	bl	8004440 <HAL_I2C_Init>
 80016a2:	b950      	cbnz	r0, 80016ba <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <MX_I2C2_Init+0x4c>)
 80016a8:	f003 fcbe 	bl	8005028 <HAL_I2CEx_ConfigAnalogFilter>
 80016ac:	b940      	cbnz	r0, 80016c0 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_I2C2_Init+0x4c>)
 80016b2:	f003 fce7 	bl	8005084 <HAL_I2CEx_ConfigDigitalFilter>
 80016b6:	b930      	cbnz	r0, 80016c6 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016ba:	f000 fac1 	bl	8001c40 <Error_Handler>
 80016be:	e7f1      	b.n	80016a4 <MX_I2C2_Init+0x24>
    Error_Handler();
 80016c0:	f000 fabe 	bl	8001c40 <Error_Handler>
 80016c4:	e7f3      	b.n	80016ae <MX_I2C2_Init+0x2e>
    Error_Handler();
 80016c6:	f000 fabb 	bl	8001c40 <Error_Handler>
}
 80016ca:	e7f5      	b.n	80016b8 <MX_I2C2_Init+0x38>
 80016cc:	200001a8 	.word	0x200001a8
 80016d0:	40005800 	.word	0x40005800
 80016d4:	00300f37 	.word	0x00300f37

080016d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016dc:	b096      	sub	sp, #88	; 0x58
 80016de:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2100      	movs	r1, #0
 80016e2:	9111      	str	r1, [sp, #68]	; 0x44
 80016e4:	9112      	str	r1, [sp, #72]	; 0x48
 80016e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80016e8:	9114      	str	r1, [sp, #80]	; 0x50
 80016ea:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	2238      	movs	r2, #56	; 0x38
 80016ee:	a803      	add	r0, sp, #12
 80016f0:	f011 fbfa 	bl	8012ee8 <memset>
  if(i2cHandle->Instance==I2C2)
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_I2C_MspInit+0xd4>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d002      	beq.n	8001702 <HAL_I2C_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016fc:	b016      	add	sp, #88	; 0x58
 80016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001706:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800170a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170c:	a803      	add	r0, sp, #12
 800170e:	f004 fdb5 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 8001712:	2800      	cmp	r0, #0
 8001714:	d147      	bne.n	80017a6 <HAL_I2C_MspInit+0xce>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001716:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800171a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001722:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800172a:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800172c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001734:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800173c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173e:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8001742:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2712      	movs	r7, #18
 8001748:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2501      	movs	r5, #1
 800174c:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800174e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001750:	2604      	movs	r6, #4
 8001752:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	a911      	add	r1, sp, #68	; 0x44
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f002 fb61 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800175e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001764:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001766:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001768:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	a911      	add	r1, sp, #68	; 0x44
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_I2C_MspInit+0xd8>)
 800176e:	f002 fb57 	bl	8003e20 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001778:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800177a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800177c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001780:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001782:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	4611      	mov	r1, r2
 8001788:	2020      	movs	r0, #32
 800178a:	f001 ff23 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800178e:	2020      	movs	r0, #32
 8001790:	f001 ff56 	bl	8003640 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	4611      	mov	r1, r2
 8001798:	2021      	movs	r0, #33	; 0x21
 800179a:	f001 ff1b 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800179e:	2021      	movs	r0, #33	; 0x21
 80017a0:	f001 ff4e 	bl	8003640 <HAL_NVIC_EnableIRQ>
}
 80017a4:	e7aa      	b.n	80016fc <HAL_I2C_MspInit+0x24>
      Error_Handler();
 80017a6:	f000 fa4b 	bl	8001c40 <Error_Handler>
 80017aa:	e7b4      	b.n	8001716 <HAL_I2C_MspInit+0x3e>
 80017ac:	40005800 	.word	0x40005800
 80017b0:	48000400 	.word	0x48000400

080017b4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80017b4:	b508      	push	{r3, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <MX_LPTIM1_Init+0x30>)
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_LPTIM1_Init+0x34>)
 80017ba:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017bc:	2300      	movs	r3, #0
 80017be:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80017c0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80017c4:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80017cc:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80017ce:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80017d0:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80017d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80017d4:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80017d6:	f003 fe79 	bl	80054cc <HAL_LPTIM_Init>
 80017da:	b900      	cbnz	r0, 80017de <MX_LPTIM1_Init+0x2a>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80017dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017de:	f000 fa2f 	bl	8001c40 <Error_Handler>
}
 80017e2:	e7fb      	b.n	80017dc <MX_LPTIM1_Init+0x28>
 80017e4:	200001fc 	.word	0x200001fc
 80017e8:	40007c00 	.word	0x40007c00

080017ec <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80017ec:	b510      	push	{r4, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f2:	2238      	movs	r2, #56	; 0x38
 80017f4:	2100      	movs	r1, #0
 80017f6:	a802      	add	r0, sp, #8
 80017f8:	f011 fb76 	bl	8012ee8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_LPTIM_MspInit+0x60>)
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_LPTIM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001804:	b010      	add	sp, #64	; 0x40
 8001806:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800180e:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8001812:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001814:	a802      	add	r0, sp, #8
 8001816:	f004 fd31 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 800181a:	b998      	cbnz	r0, 8001844 <HAL_LPTIM_MspInit+0x58>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001826:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800182e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001830:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	4611      	mov	r1, r2
 8001836:	2027      	movs	r0, #39	; 0x27
 8001838:	f001 fecc 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800183c:	2027      	movs	r0, #39	; 0x27
 800183e:	f001 feff 	bl	8003640 <HAL_NVIC_EnableIRQ>
}
 8001842:	e7df      	b.n	8001804 <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 8001844:	f000 f9fc 	bl	8001c40 <Error_Handler>
 8001848:	e7e8      	b.n	800181c <HAL_LPTIM_MspInit+0x30>
 800184a:	bf00      	nop
 800184c:	40007c00 	.word	0x40007c00

08001850 <EnablePM_sens>:
  }
}

/* USER CODE BEGIN 4 */

void EnablePM_sens(void){
 8001850:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f002 fc26 	bl	80040ac <HAL_GPIO_WritePin>
}
 8001860:	bd08      	pop	{r3, pc}

08001862 <DisablePM_sens>:

void DisablePM_sens(void){
 8001862:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f002 fc1d 	bl	80040ac <HAL_GPIO_WritePin>
}
 8001872:	bd08      	pop	{r3, pc}

08001874 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001874:	b530      	push	{r4, r5, lr}
 8001876:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001878:	4d20      	ldr	r5, [pc, #128]	; (80018fc <MeasurePM_sens+0x88>)
 800187a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800187e:	9402      	str	r4, [sp, #8]
 8001880:	230c      	movs	r3, #12
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MeasurePM_sens+0x8c>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	2200      	movs	r2, #0
 800188c:	2166      	movs	r1, #102	; 0x66
 800188e:	4628      	mov	r0, r5
 8001890:	f002 ffbc 	bl	800480c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x26, 1, &pmSensStatus, 1, 1000);
 8001894:	9402      	str	r4, [sp, #8]
 8001896:	2301      	movs	r3, #1
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	4c1a      	ldr	r4, [pc, #104]	; (8001904 <MeasurePM_sens+0x90>)
 800189c:	9400      	str	r4, [sp, #0]
 800189e:	2226      	movs	r2, #38	; 0x26
 80018a0:	2166      	movs	r1, #102	; 0x66
 80018a2:	4628      	mov	r0, r5
 80018a4:	f002 ffb2 	bl	800480c <HAL_I2C_Mem_Read>
 if(!pmSensStatus){
 80018a8:	7823      	ldrb	r3, [r4, #0]
 80018aa:	bb23      	cbnz	r3, 80018f6 <MeasurePM_sens+0x82>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MeasurePM_sens+0x8c>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	785c      	ldrb	r4, [r3, #1]
 80018b2:	7898      	ldrb	r0, [r3, #2]
 80018b4:	78d9      	ldrb	r1, [r3, #3]
 80018b6:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 80018ba:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80018be:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80018c2:	4911      	ldr	r1, [pc, #68]	; (8001908 <MeasurePM_sens+0x94>)
 80018c4:	600a      	str	r2, [r1, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 80018c6:	791a      	ldrb	r2, [r3, #4]
 80018c8:	795c      	ldrb	r4, [r3, #5]
 80018ca:	7998      	ldrb	r0, [r3, #6]
 80018cc:	79d9      	ldrb	r1, [r3, #7]
 80018ce:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 80018d2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80018d6:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80018da:	490c      	ldr	r1, [pc, #48]	; (800190c <MeasurePM_sens+0x98>)
 80018dc:	600a      	str	r2, [r1, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 80018de:	7a1a      	ldrb	r2, [r3, #8]
 80018e0:	7a5c      	ldrb	r4, [r3, #9]
 80018e2:	7a98      	ldrb	r0, [r3, #10]
 80018e4:	7ad9      	ldrb	r1, [r3, #11]
 80018e6:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 80018ea:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 80018ee:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <MeasurePM_sens+0x9c>)
 80018f4:	6013      	str	r3, [r2, #0]
 }
}
 80018f6:	b005      	add	sp, #20
 80018f8:	bd30      	pop	{r4, r5, pc}
 80018fa:	bf00      	nop
 80018fc:	200001a8 	.word	0x200001a8
 8001900:	20000238 	.word	0x20000238
 8001904:	20000268 	.word	0x20000268
 8001908:	20000248 	.word	0x20000248
 800190c:	20000250 	.word	0x20000250
 8001910:	2000024c 	.word	0x2000024c
 8001914:	00000000 	.word	0x00000000

08001918 <MeasureTempHum>:
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE);
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE, &RxLen, 1000);
	OzonePPB = ZE27_parsePPB(aRXBufferUser);
}

void MeasureTempHum(void){
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	b082      	sub	sp, #8

    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 800191c:	4c2a      	ldr	r4, [pc, #168]	; (80019c8 <MeasureTempHum+0xb0>)
 800191e:	4d2b      	ldr	r5, [pc, #172]	; (80019cc <MeasureTempHum+0xb4>)
 8001920:	2664      	movs	r6, #100	; 0x64
 8001922:	9600      	str	r6, [sp, #0]
 8001924:	2306      	movs	r3, #6
 8001926:	4622      	mov	r2, r4
 8001928:	2188      	movs	r1, #136	; 0x88
 800192a:	4628      	mov	r0, r5
 800192c:	f002 fea8 	bl	8004680 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001930:	7823      	ldrb	r3, [r4, #0]
 8001932:	7860      	ldrb	r0, [r4, #1]
 8001934:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001938:	b280      	uxth	r0, r0
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MeasureTempHum+0xb8>)
 800193c:	8018      	strh	r0, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800193e:	78e3      	ldrb	r3, [r4, #3]
 8001940:	7924      	ldrb	r4, [r4, #4]
 8001942:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001946:	b2a4      	uxth	r4, r4
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MeasureTempHum+0xbc>)
 800194a:	801c      	strh	r4, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 800194c:	f7ff f9a0 	bl	8000c90 <__aeabi_ui2f>
 8001950:	f7fe fd7e 	bl	8000450 <__aeabi_f2d>
 8001954:	a318      	add	r3, pc, #96	; (adr r3, 80019b8 <MeasureTempHum+0xa0>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fdd1 	bl	8000500 <__aeabi_dmul>
 800195e:	a318      	add	r3, pc, #96	; (adr r3, 80019c0 <MeasureTempHum+0xa8>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fef6 	bl	8000754 <__aeabi_ddiv>
 8001968:	2200      	movs	r2, #0
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <MeasureTempHum+0xc0>)
 800196c:	f7fe fc10 	bl	8000190 <__aeabi_dsub>
 8001970:	f7ff f888 	bl	8000a84 <__aeabi_d2f>
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MeasureTempHum+0xc4>)
 8001976:	6018      	str	r0, [r3, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff f989 	bl	8000c90 <__aeabi_ui2f>
 800197e:	f7fe fd67 	bl	8000450 <__aeabi_f2d>
 8001982:	2200      	movs	r2, #0
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MeasureTempHum+0xc8>)
 8001986:	f7fe fdbb 	bl	8000500 <__aeabi_dmul>
 800198a:	a30d      	add	r3, pc, #52	; (adr r3, 80019c0 <MeasureTempHum+0xa8>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fee0 	bl	8000754 <__aeabi_ddiv>
 8001994:	2200      	movs	r2, #0
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MeasureTempHum+0xcc>)
 8001998:	f7fe fbfa 	bl	8000190 <__aeabi_dsub>
 800199c:	f7ff f872 	bl	8000a84 <__aeabi_d2f>
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MeasureTempHum+0xd0>)
 80019a2:	6018      	str	r0, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80019a4:	9600      	str	r6, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	4a10      	ldr	r2, [pc, #64]	; (80019ec <MeasureTempHum+0xd4>)
 80019aa:	2188      	movs	r1, #136	; 0x88
 80019ac:	4628      	mov	r0, r5
 80019ae:	f002 fda1 	bl	80044f4 <HAL_I2C_Master_Transmit>
}
 80019b2:	b002      	add	sp, #8
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop
 80019b8:	00000000 	.word	0x00000000
 80019bc:	4065e000 	.word	0x4065e000
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40efffe0 	.word	0x40efffe0
 80019c8:	20000254 	.word	0x20000254
 80019cc:	200001a8 	.word	0x200001a8
 80019d0:	20000270 	.word	0x20000270
 80019d4:	20000272 	.word	0x20000272
 80019d8:	40468000 	.word	0x40468000
 80019dc:	2000026c 	.word	0x2000026c
 80019e0:	405f4000 	.word	0x405f4000
 80019e4:	40180000 	.word	0x40180000
 80019e8:	20000264 	.word	0x20000264
 80019ec:	08013179 	.word	0x08013179

080019f0 <SystemClock_Config>:
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f4:	2248      	movs	r2, #72	; 0x48
 80019f6:	2100      	movs	r1, #0
 80019f8:	a808      	add	r0, sp, #32
 80019fa:	f011 fa75 	bl	8012ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fe:	2400      	movs	r4, #0
 8001a00:	9402      	str	r4, [sp, #8]
 8001a02:	9403      	str	r4, [sp, #12]
 8001a04:	9404      	str	r4, [sp, #16]
 8001a06:	9405      	str	r4, [sp, #20]
 8001a08:	9406      	str	r4, [sp, #24]
 8001a0a:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a0c:	f003 fe36 	bl	800567c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a18:	f023 0318 	bic.w	r3, r3, #24
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a42:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a44:	2381      	movs	r3, #129	; 0x81
 8001a46:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4e:	2340      	movs	r3, #64	; 0x40
 8001a50:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001a52:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a54:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a56:	a808      	add	r0, sp, #32
 8001a58:	f003 ffb0 	bl	80059bc <HAL_RCC_OscConfig>
 8001a5c:	b978      	cbnz	r0, 8001a7e <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a5e:	234f      	movs	r3, #79	; 0x4f
 8001a60:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a62:	2302      	movs	r3, #2
 8001a64:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a6e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a70:	2101      	movs	r1, #1
 8001a72:	a802      	add	r0, sp, #8
 8001a74:	f004 face 	bl	8006014 <HAL_RCC_ClockConfig>
 8001a78:	b918      	cbnz	r0, 8001a82 <SystemClock_Config+0x92>
}
 8001a7a:	b01a      	add	sp, #104	; 0x68
 8001a7c:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <SystemClock_Config+0x90>
 8001a82:	b672      	cpsid	i
 8001a84:	e7fe      	b.n	8001a84 <SystemClock_Config+0x94>
	...

08001a88 <main>:
{
 8001a88:	b508      	push	{r3, lr}
  HAL_Init();
 8001a8a:	f001 f857 	bl	8002b3c <HAL_Init>
  SystemClock_Config();
 8001a8e:	f7ff ffaf 	bl	80019f0 <SystemClock_Config>
  MX_GPIO_Init();
 8001a92:	f7ff fd8f 	bl	80015b4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001a96:	f006 fd8f 	bl	80085b8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001a9a:	f000 fdb9 	bl	8002610 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001a9e:	f7ff fdef 	bl	8001680 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001aa2:	f000 f9ef 	bl	8001e84 <MX_SPI2_Init>
  MX_LPTIM1_Init();
 8001aa6:	f7ff fe85 	bl	80017b4 <MX_LPTIM1_Init>
  F1_QueueIni(); // init Function queue
 8001aaa:	f000 f8cd 	bl	8001c48 <F1_QueueIni>
  F2_QueueIni();
 8001aae:	f000 f91b 	bl	8001ce8 <F2_QueueIni>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f002 faf6 	bl	80040ac <HAL_GPIO_WritePin>
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1,  256, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <main+0x58>)
 8001ac8:	f003 fd78 	bl	80055bc <HAL_LPTIM_TimeOut_Start_IT>
    MX_LoRaWAN_Process();
 8001acc:	f006 fd7a 	bl	80085c4 <MX_LoRaWAN_Process>
    F1_pull()();
 8001ad0:	f000 f8ec 	bl	8001cac <F1_pull>
 8001ad4:	4780      	blx	r0
    F2_pull()();
 8001ad6:	f000 f939 	bl	8001d4c <F2_pull>
 8001ada:	4780      	blx	r0
  while (1)
 8001adc:	e7f6      	b.n	8001acc <main+0x44>
 8001ade:	bf00      	nop
 8001ae0:	200001fc 	.word	0x200001fc

08001ae4 <HAL_LPTIM_CompareMatchCallback>:
   if (hlptim == &hlptim1)
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_LPTIM_CompareMatchCallback+0x130>)
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	d000      	beq.n	8001aec <HAL_LPTIM_CompareMatchCallback+0x8>
 8001aea:	4770      	bx	lr
{
 8001aec:	b510      	push	{r4, lr}
      switch(counter){
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_LPTIM_CompareMatchCallback+0x134>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f240 325b 	movw	r2, #859	; 0x35b
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d070      	beq.n	8001bdc <HAL_LPTIM_CompareMatchCallback+0xf8>
 8001afa:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001afe:	da1c      	bge.n	8001b3a <HAL_LPTIM_CompareMatchCallback+0x56>
 8001b00:	2b23      	cmp	r3, #35	; 0x23
 8001b02:	d05f      	beq.n	8001bc4 <HAL_LPTIM_CompareMatchCallback+0xe0>
 8001b04:	2b28      	cmp	r3, #40	; 0x28
 8001b06:	d10f      	bne.n	8001b28 <HAL_LPTIM_CompareMatchCallback+0x44>
    	  if(firstStart){
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_LPTIM_CompareMatchCallback+0x138>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b303      	cbz	r3, 8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    		  F2_push(MeasureTempHum);
 8001b0e:	4844      	ldr	r0, [pc, #272]	; (8001c20 <HAL_LPTIM_CompareMatchCallback+0x13c>)
 8001b10:	f000 f8f4 	bl	8001cfc <F2_push>
    		  F1_push(MeasurePM_sens);
 8001b14:	4843      	ldr	r0, [pc, #268]	; (8001c24 <HAL_LPTIM_CompareMatchCallback+0x140>)
 8001b16:	f000 f8a1 	bl	8001c5c <F1_push>
    		  F1_push(DisablePM_sens);
 8001b1a:	4843      	ldr	r0, [pc, #268]	; (8001c28 <HAL_LPTIM_CompareMatchCallback+0x144>)
 8001b1c:	f000 f89e 	bl	8001c5c <F1_push>
    		  firstStart = 0;
 8001b20:	4b3e      	ldr	r3, [pc, #248]	; (8001c1c <HAL_LPTIM_CompareMatchCallback+0x138>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e013      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
      switch(counter){
 8001b28:	2b0a      	cmp	r3, #10
 8001b2a:	d111      	bne.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  if(firstStart)
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_LPTIM_CompareMatchCallback+0x138>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b173      	cbz	r3, 8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    		  F1_push(EnablePM_sens);
 8001b32:	483e      	ldr	r0, [pc, #248]	; (8001c2c <HAL_LPTIM_CompareMatchCallback+0x148>)
 8001b34:	f000 f892 	bl	8001c5c <F1_push>
 8001b38:	e00a      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
      switch(counter){
 8001b3a:	f240 3281 	movw	r2, #897	; 0x381
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d054      	beq.n	8001bec <HAL_LPTIM_CompareMatchCallback+0x108>
 8001b42:	f240 3283 	movw	r2, #899	; 0x383
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d130      	bne.n	8001bac <HAL_LPTIM_CompareMatchCallback+0xc8>
    	  F1_push(DisablePM_sens);
 8001b4a:	4837      	ldr	r0, [pc, #220]	; (8001c28 <HAL_LPTIM_CompareMatchCallback+0x144>)
 8001b4c:	f000 f886 	bl	8001c5c <F1_push>
      counter++;
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_LPTIM_CompareMatchCallback+0x134>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	3201      	adds	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
      if(counter % 20 == 8)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);///DBG
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4935      	ldr	r1, [pc, #212]	; (8001c30 <HAL_LPTIM_CompareMatchCallback+0x14c>)
 8001b5c:	fb81 3102 	smull	r3, r1, r1, r2
 8001b60:	17d3      	asrs	r3, r2, #31
 8001b62:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8001b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b6a:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
 8001b6e:	2a08      	cmp	r2, #8
 8001b70:	d044      	beq.n	8001bfc <HAL_LPTIM_CompareMatchCallback+0x118>
      if(counter % 20 == 9)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);///DBG
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_LPTIM_CompareMatchCallback+0x134>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	492e      	ldr	r1, [pc, #184]	; (8001c30 <HAL_LPTIM_CompareMatchCallback+0x14c>)
 8001b78:	fb81 3102 	smull	r3, r1, r1, r2
 8001b7c:	17d3      	asrs	r3, r2, #31
 8001b7e:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8001b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b86:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
 8001b8a:	2a09      	cmp	r2, #9
 8001b8c:	d03c      	beq.n	8001c08 <HAL_LPTIM_CompareMatchCallback+0x124>
      counter %= 900;
 8001b8e:	4822      	ldr	r0, [pc, #136]	; (8001c18 <HAL_LPTIM_CompareMatchCallback+0x134>)
 8001b90:	6801      	ldr	r1, [r0, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8001b94:	fb82 3201 	smull	r3, r2, r2, r1
 8001b98:	440a      	add	r2, r1
 8001b9a:	17cb      	asrs	r3, r1, #31
 8001b9c:	ebc3 2362 	rsb	r3, r3, r2, asr #9
 8001ba0:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001ba4:	fb02 1313 	mls	r3, r2, r3, r1
 8001ba8:	6003      	str	r3, [r0, #0]
}
 8001baa:	bd10      	pop	{r4, pc}
      switch(counter){
 8001bac:	f240 327f 	movw	r2, #895	; 0x37f
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d1cd      	bne.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  if(extBattery > batTH)
 8001bb4:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_LPTIM_CompareMatchCallback+0x154>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b57      	cmp	r3, #87	; 0x57
 8001bba:	d9c9      	bls.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  F2_push(MeasureTempHum);
 8001bbc:	4818      	ldr	r0, [pc, #96]	; (8001c20 <HAL_LPTIM_CompareMatchCallback+0x13c>)
 8001bbe:	f000 f89d 	bl	8001cfc <F2_push>
 8001bc2:	e7c5      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  if(firstStart){
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_LPTIM_CompareMatchCallback+0x138>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0c1      	beq.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    		  F1_push(MeasureTempHum);
 8001bcc:	4c14      	ldr	r4, [pc, #80]	; (8001c20 <HAL_LPTIM_CompareMatchCallback+0x13c>)
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f000 f844 	bl	8001c5c <F1_push>
    		  F2_push(MeasureTempHum);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f000 f891 	bl	8001cfc <F2_push>
 8001bda:	e7b9      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  if(extBattery > batTH)
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_LPTIM_CompareMatchCallback+0x154>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b57      	cmp	r3, #87	; 0x57
 8001be2:	d9b5      	bls.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    		  F1_push(EnablePM_sens);
 8001be4:	4811      	ldr	r0, [pc, #68]	; (8001c2c <HAL_LPTIM_CompareMatchCallback+0x148>)
 8001be6:	f000 f839 	bl	8001c5c <F1_push>
 8001bea:	e7b1      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  if(extBattery > batTH)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_LPTIM_CompareMatchCallback+0x154>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b57      	cmp	r3, #87	; 0x57
 8001bf2:	d9ad      	bls.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
    	  F2_push(MeasurePM_sens);
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <HAL_LPTIM_CompareMatchCallback+0x140>)
 8001bf6:	f000 f881 	bl	8001cfc <F2_push>
 8001bfa:	e7a9      	b.n	8001b50 <HAL_LPTIM_CompareMatchCallback+0x6c>
      if(counter % 20 == 8)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);///DBG
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2120      	movs	r1, #32
 8001c00:	480e      	ldr	r0, [pc, #56]	; (8001c3c <HAL_LPTIM_CompareMatchCallback+0x158>)
 8001c02:	f002 fa53 	bl	80040ac <HAL_GPIO_WritePin>
 8001c06:	e7b4      	b.n	8001b72 <HAL_LPTIM_CompareMatchCallback+0x8e>
      if(counter % 20 == 9)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);///DBG
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <HAL_LPTIM_CompareMatchCallback+0x158>)
 8001c0e:	f002 fa4d 	bl	80040ac <HAL_GPIO_WritePin>
 8001c12:	e7bc      	b.n	8001b8e <HAL_LPTIM_CompareMatchCallback+0xaa>
 8001c14:	200001fc 	.word	0x200001fc
 8001c18:	2000025c 	.word	0x2000025c
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	08001919 	.word	0x08001919
 8001c24:	08001875 	.word	0x08001875
 8001c28:	08001863 	.word	0x08001863
 8001c2c:	08001851 	.word	0x08001851
 8001c30:	66666667 	.word	0x66666667
 8001c34:	91a2b3c5 	.word	0x91a2b3c5
 8001c38:	20000260 	.word	0x20000260
 8001c3c:	48000400 	.word	0x48000400

08001c40 <Error_Handler>:
 8001c40:	b672      	cpsid	i
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <Error_Handler+0x2>

08001c44 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001c44:	4770      	bx	lr

08001c46 <SimpleF2>:
 // ------ 8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----

 volatile int F2_last; // number of last element of fast-speed queue
 int F2_first; // number of first element of fast-speed queue

 void SimpleF2(){;};
 8001c46:	4770      	bx	lr

08001c48 <F1_QueueIni>:
  F1_last = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4a02      	ldr	r2, [pc, #8]	; (8001c54 <F1_QueueIni+0xc>)
 8001c4c:	6013      	str	r3, [r2, #0]
  F1_first = 0;
 8001c4e:	4a02      	ldr	r2, [pc, #8]	; (8001c58 <F1_QueueIni+0x10>)
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	4770      	bx	lr
 8001c54:	200002b8 	.word	0x200002b8
 8001c58:	200002b4 	.word	0x200002b4

08001c5c <F1_push>:
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <F1_push+0x44>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	425a      	negs	r2, r3
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	f002 020f 	and.w	r2, r2, #15
 8001c6c:	bf58      	it	pl
 8001c6e:	4253      	negpl	r3, r2
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <F1_push+0x48>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d011      	beq.n	8001c9c <F1_push+0x40>
  F1_Queue[F1_last++] = pointerQ;
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <F1_push+0x44>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	1c59      	adds	r1, r3, #1
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <F1_push+0x4c>)
 8001c82:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	4259      	negs	r1, r3
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	f001 010f 	and.w	r1, r1, #15
 8001c92:	bf58      	it	pl
 8001c94:	424b      	negpl	r3, r1
 8001c96:	6013      	str	r3, [r2, #0]
  return 0;
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4770      	bx	lr
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001c9c:	2001      	movs	r0, #1
}
 8001c9e:	4770      	bx	lr
 8001ca0:	200002b8 	.word	0x200002b8
 8001ca4:	200002b4 	.word	0x200002b4
 8001ca8:	20000274 	.word	0x20000274

08001cac <F1_pull>:
  if (F1_last == F1_first)return SimpleF1;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <F1_pull+0x2c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <F1_pull+0x30>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d00d      	beq.n	8001cd4 <F1_pull+0x28>
  pullVar = F1_Queue[F1_first++];
 8001cb8:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <F1_pull+0x34>)
 8001cba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cbe:	3301      	adds	r3, #1
  F1_first%=Q_SIZE_FAST;
 8001cc0:	425a      	negs	r2, r3
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	f002 020f 	and.w	r2, r2, #15
 8001cca:	bf58      	it	pl
 8001ccc:	4253      	negpl	r3, r2
 8001cce:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <F1_pull+0x30>)
 8001cd0:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001cd2:	4770      	bx	lr
  if (F1_last == F1_first)return SimpleF1;
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <F1_pull+0x38>)
}
 8001cd6:	4770      	bx	lr
 8001cd8:	200002b8 	.word	0x200002b8
 8001cdc:	200002b4 	.word	0x200002b4
 8001ce0:	20000274 	.word	0x20000274
 8001ce4:	08001c45 	.word	0x08001c45

08001ce8 <F2_QueueIni>:

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
   F2_last = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4a02      	ldr	r2, [pc, #8]	; (8001cf4 <F2_QueueIni+0xc>)
 8001cec:	6013      	str	r3, [r2, #0]
   F2_first = 0;
 8001cee:	4a02      	ldr	r2, [pc, #8]	; (8001cf8 <F2_QueueIni+0x10>)
 8001cf0:	6013      	str	r3, [r2, #0]
 }
 8001cf2:	4770      	bx	lr
 8001cf4:	20000300 	.word	0x20000300
 8001cf8:	200002fc 	.word	0x200002fc

08001cfc <F2_push>:

 int F2_push(void (*pointerQ)(void) ){ // push element from the queue
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <F2_push+0x44>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	f002 020f 	and.w	r2, r2, #15
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <F2_push+0x48>)
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d011      	beq.n	8001d3c <F2_push+0x40>
   F2_Queue[F2_last++] = pointerQ;
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <F2_push+0x44>)
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	1c59      	adds	r1, r3, #1
 8001d1e:	6011      	str	r1, [r2, #0]
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <F2_push+0x4c>)
 8001d22:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   F2_last%=Q_SIZE_FAST;
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	4259      	negs	r1, r3
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	f001 010f 	and.w	r1, r1, #15
 8001d32:	bf58      	it	pl
 8001d34:	424b      	negpl	r3, r1
 8001d36:	6013      	str	r3, [r2, #0]
   return 0;
 8001d38:	2000      	movs	r0, #0
 8001d3a:	4770      	bx	lr
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8001d3c:	2001      	movs	r0, #1
 }
 8001d3e:	4770      	bx	lr
 8001d40:	20000300 	.word	0x20000300
 8001d44:	200002fc 	.word	0x200002fc
 8001d48:	200002bc 	.word	0x200002bc

08001d4c <F2_pull>:

 void (*F2_pull(void))(void){ // pull element from the queue
   void (*pullVar)(void);
   if (F2_last == F2_first)return SimpleF2;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <F2_pull+0x2c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <F2_pull+0x30>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d00d      	beq.n	8001d74 <F2_pull+0x28>
   pullVar = F2_Queue[F2_first++];
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <F2_pull+0x34>)
 8001d5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d5e:	3301      	adds	r3, #1
   F2_first%=Q_SIZE_FAST;
 8001d60:	425a      	negs	r2, r3
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	f002 020f 	and.w	r2, r2, #15
 8001d6a:	bf58      	it	pl
 8001d6c:	4253      	negpl	r3, r2
 8001d6e:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <F2_pull+0x30>)
 8001d70:	6013      	str	r3, [r2, #0]
   return pullVar;
 8001d72:	4770      	bx	lr
   if (F2_last == F2_first)return SimpleF2;
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <F2_pull+0x38>)
 }
 8001d76:	4770      	bx	lr
 8001d78:	20000300 	.word	0x20000300
 8001d7c:	200002fc 	.word	0x200002fc
 8001d80:	200002bc 	.word	0x200002bc
 8001d84:	08001c47 	.word	0x08001c47

08001d88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d88:	b500      	push	{lr}
 8001d8a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001d8c:	222c      	movs	r2, #44	; 0x2c
 8001d8e:	2100      	movs	r1, #0
 8001d90:	a801      	add	r0, sp, #4
 8001d92:	f011 f8a9 	bl	8012ee8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d96:	4819      	ldr	r0, [pc, #100]	; (8001dfc <MX_RTC_Init+0x74>)
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_RTC_Init+0x78>)
 8001d9a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001da4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001da6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001dae:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001db6:	f004 fc69 	bl	800668c <HAL_RTC_Init>
 8001dba:	b9a8      	cbnz	r0, 8001de8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_RTC_Init+0x74>)
 8001dbe:	f004 fdb9 	bl	8006934 <HAL_RTCEx_SetSSRU_IT>
 8001dc2:	b9a0      	cbnz	r0, 8001dee <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001dc8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dca:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001dcc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dd0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001dd8:	a901      	add	r1, sp, #4
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <MX_RTC_Init+0x74>)
 8001ddc:	f004 fcbe 	bl	800675c <HAL_RTC_SetAlarm_IT>
 8001de0:	b940      	cbnz	r0, 8001df4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001de2:	b00d      	add	sp, #52	; 0x34
 8001de4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001de8:	f7ff ff2a 	bl	8001c40 <Error_Handler>
 8001dec:	e7e6      	b.n	8001dbc <MX_RTC_Init+0x34>
    Error_Handler();
 8001dee:	f7ff ff27 	bl	8001c40 <Error_Handler>
 8001df2:	e7e7      	b.n	8001dc4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001df4:	f7ff ff24 	bl	8001c40 <Error_Handler>
}
 8001df8:	e7f3      	b.n	8001de2 <MX_RTC_Init+0x5a>
 8001dfa:	bf00      	nop
 8001dfc:	20000304 	.word	0x20000304
 8001e00:	40002800 	.word	0x40002800

08001e04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	b090      	sub	sp, #64	; 0x40
 8001e08:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e0a:	2238      	movs	r2, #56	; 0x38
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a802      	add	r0, sp, #8
 8001e10:	f011 f86a 	bl	8012ee8 <memset>
  if(rtcHandle->Instance==RTC)
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RTC_MspInit+0x7c>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e1c:	b010      	add	sp, #64	; 0x40
 8001e1e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2c:	a802      	add	r0, sp, #8
 8001e2e:	f004 fa25 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	bb08      	cbnz	r0, 8001e78 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	4611      	mov	r1, r2
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f001 fbba 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001e60:	2002      	movs	r0, #2
 8001e62:	f001 fbed 	bl	8003640 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	4611      	mov	r1, r2
 8001e6a:	202a      	movs	r0, #42	; 0x2a
 8001e6c:	f001 fbb2 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e70:	202a      	movs	r0, #42	; 0x2a
 8001e72:	f001 fbe5 	bl	8003640 <HAL_NVIC_EnableIRQ>
}
 8001e76:	e7d1      	b.n	8001e1c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001e78:	f7ff fee2 	bl	8001c40 <Error_Handler>
 8001e7c:	e7da      	b.n	8001e34 <HAL_RTC_MspInit+0x30>
 8001e7e:	bf00      	nop
 8001e80:	40002800 	.word	0x40002800

08001e84 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e86:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <MX_SPI2_Init+0x44>)
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_SPI2_Init+0x48>)
 8001e8a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e90:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e92:	2300      	movs	r3, #0
 8001e94:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e9a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ea6:	2218      	movs	r2, #24
 8001ea8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eaa:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eac:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eb4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eba:	f004 fd8a 	bl	80069d2 <HAL_SPI_Init>
 8001ebe:	b900      	cbnz	r0, 8001ec2 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ec0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ec2:	f7ff febd 	bl	8001c40 <Error_Handler>
}
 8001ec6:	e7fb      	b.n	8001ec0 <MX_SPI2_Init+0x3c>
 8001ec8:	2000033c 	.word	0x2000033c
 8001ecc:	40003800 	.word	0x40003800

08001ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	b096      	sub	sp, #88	; 0x58
 8001ed4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	9111      	str	r1, [sp, #68]	; 0x44
 8001eda:	9112      	str	r1, [sp, #72]	; 0x48
 8001edc:	9113      	str	r1, [sp, #76]	; 0x4c
 8001ede:	9114      	str	r1, [sp, #80]	; 0x50
 8001ee0:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee2:	2238      	movs	r2, #56	; 0x38
 8001ee4:	a803      	add	r0, sp, #12
 8001ee6:	f010 ffff 	bl	8012ee8 <memset>
  if(spiHandle->Instance==SPI2)
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_SPI_MspInit+0xb0>)
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_SPI_MspInit+0x26>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ef2:	b016      	add	sp, #88	; 0x58
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efe:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f00:	a803      	add	r0, sp, #12
 8001f02:	f004 f9bb 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d137      	bne.n	8001f7a <HAL_SPI_MspInit+0xaa>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f14:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f18:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f1c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001f1e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f22:	f042 0202 	orr.w	r2, r2, #2
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f2a:	f002 0202 	and.w	r2, r2, #2
 8001f2e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001f30:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001f42:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001f44:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f48:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2602      	movs	r6, #2
 8001f4c:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2400      	movs	r4, #0
 8001f50:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f54:	2505      	movs	r5, #5
 8001f56:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	a911      	add	r1, sp, #68	; 0x44
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <HAL_SPI_MspInit+0xb4>)
 8001f5c:	f001 ff60 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f64:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f6c:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	a911      	add	r1, sp, #68	; 0x44
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 ff54 	bl	8003e20 <HAL_GPIO_Init>
}
 8001f78:	e7bb      	b.n	8001ef2 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8001f7a:	f7ff fe61 	bl	8001c40 <Error_Handler>
 8001f7e:	e7c4      	b.n	8001f0a <HAL_SPI_MspInit+0x3a>
 8001f80:	40003800 	.word	0x40003800
 8001f84:	48000400 	.word	0x48000400

08001f88 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001f88:	4770      	bx	lr

08001f8a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001f8a:	4770      	bx	lr

08001f8c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001f8e:	f000 fdeb 	bl	8002b68 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001f92:	2001      	movs	r0, #1
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <PWR_EnterStopMode+0x14>)
 8001f96:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f9a:	f003 fbdb 	bl	8005754 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001f9e:	bd08      	pop	{r3, pc}
 8001fa0:	58000400 	.word	0x58000400

08001fa4 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001fa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001fa6:	f000 fde6 	bl	8002b76 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001faa:	bd08      	pop	{r3, pc}

08001fac <PWR_ExitStopMode>:
{
 8001fac:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001fae:	f000 fde2 	bl	8002b76 <HAL_ResumeTick>
  vcom_Resume();
 8001fb2:	f000 fce1 	bl	8002978 <vcom_Resume>
}
 8001fb6:	bd08      	pop	{r3, pc}

08001fb8 <PWR_EnterSleepMode>:
{
 8001fb8:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001fba:	f000 fdd5 	bl	8002b68 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f003 fb63 	bl	800568c <HAL_PWR_EnterSLEEPMode>
}
 8001fc6:	bd08      	pop	{r3, pc}

08001fc8 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc8:	4770      	bx	lr

08001fca <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <NMI_Handler>

08001fcc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <HardFault_Handler>

08001fce <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <MemManage_Handler>

08001fd0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <BusFault_Handler>

08001fd2 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <UsageFault_Handler>

08001fd4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd6:	4770      	bx	lr

08001fd8 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd8:	4770      	bx	lr

08001fda <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fda:	4770      	bx	lr

08001fdc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001fde:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001fe0:	f004 fcd4 	bl	800698c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001fe4:	bd08      	pop	{r3, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000304 	.word	0x20000304

08001fec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fee:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA1_Channel1_IRQHandler+0xc>)
 8001ff0:	f001 fd40 	bl	8003a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000438 	.word	0x20000438

08001ffc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA1_Channel2_IRQHandler+0xc>)
 8002000:	f001 fd38 	bl	8003a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002004:	bd08      	pop	{r3, pc}
 8002006:	bf00      	nop
 8002008:	200003d8 	.word	0x200003d8

0800200c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800200c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800200e:	4802      	ldr	r0, [pc, #8]	; (8002018 <I2C2_EV_IRQHandler+0xc>)
 8002010:	f002 fcfe 	bl	8004a10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002014:	bd08      	pop	{r3, pc}
 8002016:	bf00      	nop
 8002018:	200001a8 	.word	0x200001a8

0800201c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800201c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <I2C2_ER_IRQHandler+0xc>)
 8002020:	f002 ffb2 	bl	8004f88 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002024:	bd08      	pop	{r3, pc}
 8002026:	bf00      	nop
 8002028:	200001a8 	.word	0x200001a8

0800202c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800202c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <USART1_IRQHandler+0xc>)
 8002030:	f005 f9c6 	bl	80073c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002034:	bd08      	pop	{r3, pc}
 8002036:	bf00      	nop
 8002038:	20000498 	.word	0x20000498

0800203c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800203c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <USART2_IRQHandler+0xc>)
 8002040:	f005 f9be 	bl	80073c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002044:	bd08      	pop	{r3, pc}
 8002046:	bf00      	nop
 8002048:	2000052c 	.word	0x2000052c

0800204c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800204c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800204e:	4802      	ldr	r0, [pc, #8]	; (8002058 <LPTIM1_IRQHandler+0xc>)
 8002050:	f003 f868 	bl	8005124 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002054:	bd08      	pop	{r3, pc}
 8002056:	bf00      	nop
 8002058:	200001fc 	.word	0x200001fc

0800205c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800205c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800205e:	4802      	ldr	r0, [pc, #8]	; (8002068 <RTC_Alarm_IRQHandler+0xc>)
 8002060:	f004 fa88 	bl	8006574 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002064:	bd08      	pop	{r3, pc}
 8002066:	bf00      	nop
 8002068:	20000304 	.word	0x20000304

0800206c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800206c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800206e:	4802      	ldr	r0, [pc, #8]	; (8002078 <SUBGHZ_Radio_IRQHandler+0xc>)
 8002070:	f004 ffc0 	bl	8006ff4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002074:	bd08      	pop	{r3, pc}
 8002076:	bf00      	nop
 8002078:	200003a0 	.word	0x200003a0

0800207c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800207c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 800207e:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMAMUX1_OVR_IRQHandler+0xc>)
 8002080:	f001 fd99 	bl	8003bb6 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002084:	bd08      	pop	{r3, pc}
 8002086:	bf00      	nop
 8002088:	200003d8 	.word	0x200003d8

0800208c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800208c:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_SUBGHZ_Init+0x18>)
 8002090:	2308      	movs	r3, #8
 8002092:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002094:	f004 fd40 	bl	8006b18 <HAL_SUBGHZ_Init>
 8002098:	b900      	cbnz	r0, 800209c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800209a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800209c:	f7ff fdd0 	bl	8001c40 <Error_Handler>
}
 80020a0:	e7fb      	b.n	800209a <MX_SUBGHZ_Init+0xe>
 80020a2:	bf00      	nop
 80020a4:	200003a0 	.word	0x200003a0

080020a8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80020a8:	b500      	push	{lr}
 80020aa:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80020b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	4611      	mov	r1, r2
 80020c6:	2032      	movs	r0, #50	; 0x32
 80020c8:	f001 fa84 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80020cc:	2032      	movs	r0, #50	; 0x32
 80020ce:	f001 fab7 	bl	8003640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80020d2:	b003      	add	sp, #12
 80020d4:	f85d fb04 	ldr.w	pc, [sp], #4

080020d8 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80020d8:	b40c      	push	{r2, r3}
 80020da:	b500      	push	{lr}
 80020dc:	b083      	sub	sp, #12
 80020de:	ab04      	add	r3, sp, #16
 80020e0:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80020e4:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80020e6:	f010 f971 	bl	80123cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80020ea:	b003      	add	sp, #12
 80020ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80020f0:	b002      	add	sp, #8
 80020f2:	4770      	bx	lr

080020f4 <TimestampNow>:
{
 80020f4:	b530      	push	{r4, r5, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	4604      	mov	r4, r0
 80020fa:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80020fc:	a802      	add	r0, sp, #8
 80020fe:	f010 f8db 	bl	80122b8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002102:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <TimestampNow+0x2c>)
 800210c:	2110      	movs	r1, #16
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff ffe2 	bl	80020d8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002114:	4620      	mov	r0, r4
 8002116:	f7fe f82f 	bl	8000178 <strlen>
 800211a:	8028      	strh	r0, [r5, #0]
}
 800211c:	b005      	add	sp, #20
 800211e:	bd30      	pop	{r4, r5, pc}
 8002120:	08013194 	.word	0x08013194

08002124 <SystemApp_Init>:
{
 8002124:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	6893      	ldr	r3, [r2, #8]
 800212c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002130:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8002132:	f010 fbdd 	bl	80128f0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002136:	2401      	movs	r4, #1
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <SystemApp_Init+0x4c>)
 800213a:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 800213c:	f000 f8c2 	bl	80022c4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8002140:	f010 fdaa 	bl	8012c98 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <SystemApp_Init+0x50>)
 8002146:	f010 fdc1 	bl	8012ccc <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <SystemApp_Init+0x54>)
 800214c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002150:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002152:	2002      	movs	r0, #2
 8002154:	f010 fdc0 	bl	8012cd8 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002158:	f7ff f856 	bl	8001208 <SYS_InitMeasurement>
  EnvSensors_Init();
 800215c:	f000 f8da 	bl	8002314 <EnvSensors_Init>
  UTIL_LPM_Init();
 8002160:	f00f ffda 	bl	8012118 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002164:	4621      	mov	r1, r4
 8002166:	4620      	mov	r0, r4
 8002168:	f00f fff6 	bl	8012158 <UTIL_LPM_SetOffMode>
}
 800216c:	bd10      	pop	{r4, pc}
 800216e:	bf00      	nop
 8002170:	200003ac 	.word	0x200003ac
 8002174:	080020f5 	.word	0x080020f5
 8002178:	58004000 	.word	0x58004000

0800217c <UTIL_SEQ_Idle>:
{
 800217c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800217e:	f010 f801 	bl	8012184 <UTIL_LPM_EnterLowPower>
}
 8002182:	bd08      	pop	{r3, pc}

08002184 <GetBatteryLevel>:
{
 8002184:	b538      	push	{r3, r4, r5, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002186:	f7ff f847 	bl	8001218 <SYS_GetBatteryLevel>
  batteryLevelmVA[count++] = (uint16_t) SYS_GetBatteryLevel();
 800218a:	4c0c      	ldr	r4, [pc, #48]	; (80021bc <GetBatteryLevel+0x38>)
 800218c:	8825      	ldrh	r5, [r4, #0]
 800218e:	1c6b      	adds	r3, r5, #1
 8002190:	8023      	strh	r3, [r4, #0]
 8002192:	f7ff f841 	bl	8001218 <SYS_GetBatteryLevel>
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <GetBatteryLevel+0x3c>)
 8002198:	f821 0015 	strh.w	r0, [r1, r5, lsl #1]
  count %= AVERAGEL;
 800219c:	8823      	ldrh	r3, [r4, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	8023      	strh	r3, [r4, #0]
  for(int i=0; i< AVERAGEL; i++)
 80021a4:	1e8b      	subs	r3, r1, #2
 80021a6:	311e      	adds	r1, #30
  batteryLevelmV = 0;
 80021a8:	2000      	movs	r0, #0
  batteryLevelmV += batteryLevelmVA[i];
 80021aa:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80021ae:	4410      	add	r0, r2
 80021b0:	b280      	uxth	r0, r0
  for(int i=0; i< AVERAGEL; i++)
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d1f9      	bne.n	80021aa <GetBatteryLevel+0x26>
}
 80021b6:	0a00      	lsrs	r0, r0, #8
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
 80021ba:	bf00      	nop
 80021bc:	200003d0 	.word	0x200003d0
 80021c0:	200003b0 	.word	0x200003b0

080021c4 <GetTemperatureLevel>:
{
 80021c4:	b500      	push	{lr}
 80021c6:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80021c8:	4668      	mov	r0, sp
 80021ca:	f000 f88d 	bl	80022e8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80021ce:	9801      	ldr	r0, [sp, #4]
 80021d0:	f7fe fdb6 	bl	8000d40 <__aeabi_f2iz>
}
 80021d4:	b200      	sxth	r0, r0
 80021d6:	b007      	add	sp, #28
 80021d8:	f85d fb04 	ldr.w	pc, [sp], #4

080021dc <GetUniqueId>:
{
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <GetUniqueId+0x6c>)
 80021e2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d015      	beq.n	8002218 <GetUniqueId+0x3c>
    id[7] = val & 0xFF;
 80021ec:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80021ee:	0a1a      	lsrs	r2, r3, #8
 80021f0:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80021f2:	0c1a      	lsrs	r2, r3, #16
 80021f4:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80021f6:	0e1b      	lsrs	r3, r3, #24
 80021f8:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <GetUniqueId+0x6c>)
    id[3] = val & 0xFF;
 80021fc:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 8002200:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002202:	f8d3 0584 	ldr.w	r0, [r3, #1412]	; 0x584
    id[2] = val & 0xFF;
 8002206:	f3c0 2207 	ubfx	r2, r0, #8, #8
    id[1] = (val >> 8) & 0xFF;
 800220a:	f3c0 4307 	ubfx	r3, r0, #16, #8
    id[0] = (val >> 16) & 0xFF;
 800220e:	0e00      	lsrs	r0, r0, #24
    id[2] = (ID_2_val) >> 16;
 8002210:	70a2      	strb	r2, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8002212:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8002214:	7020      	strb	r0, [r4, #0]
}
 8002216:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002218:	f000 fcb4 	bl	8002b84 <HAL_GetUIDw0>
 800221c:	4605      	mov	r5, r0
 800221e:	f000 fcbd 	bl	8002b9c <HAL_GetUIDw2>
 8002222:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002224:	f000 fcb4 	bl	8002b90 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8002228:	0e2b      	lsrs	r3, r5, #24
 800222a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800222c:	0c2b      	lsrs	r3, r5, #16
 800222e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8002230:	0a2b      	lsrs	r3, r5, #8
 8002232:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8002234:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8002236:	0e03      	lsrs	r3, r0, #24
 8002238:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800223a:	f3c0 4207 	ubfx	r2, r0, #16, #8
    id[1] = (ID_2_val) >> 8;
 800223e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    id[0] = (ID_2_val);
 8002242:	b2c0      	uxtb	r0, r0
 8002244:	e7e4      	b.n	8002210 <GetUniqueId+0x34>
 8002246:	bf00      	nop
 8002248:	1fff7000 	.word	0x1fff7000

0800224c <GetDevAddr>:
{
 800224c:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <GetDevAddr+0x2c>)
 8002250:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8002254:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225a:	d000      	beq.n	800225e <GetDevAddr+0x12>
}
 800225c:	bd38      	pop	{r3, r4, r5, pc}
 800225e:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002260:	f000 fc90 	bl	8002b84 <HAL_GetUIDw0>
 8002264:	4605      	mov	r5, r0
 8002266:	f000 fc93 	bl	8002b90 <HAL_GetUIDw1>
 800226a:	4045      	eors	r5, r0
 800226c:	f000 fc96 	bl	8002b9c <HAL_GetUIDw2>
 8002270:	4045      	eors	r5, r0
 8002272:	6025      	str	r5, [r4, #0]
}
 8002274:	e7f2      	b.n	800225c <GetDevAddr+0x10>
 8002276:	bf00      	nop
 8002278:	1fff7000 	.word	0x1fff7000

0800227c <UTIL_ADV_TRACE_PreSendHook>:
{
 800227c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800227e:	2101      	movs	r1, #1
 8002280:	2002      	movs	r0, #2
 8002282:	f00f ff53 	bl	801212c <UTIL_LPM_SetStopMode>
}
 8002286:	bd08      	pop	{r3, pc}

08002288 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002288:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800228a:	2100      	movs	r1, #0
 800228c:	2002      	movs	r0, #2
 800228e:	f00f ff4d 	bl	801212c <UTIL_LPM_SetStopMode>
}
 8002292:	bd08      	pop	{r3, pc}

08002294 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002294:	2000      	movs	r0, #0
 8002296:	4770      	bx	lr

08002298 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002298:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_GetTick+0x14>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b90b      	cbnz	r3, 80022a4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80022a0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80022a2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80022a4:	f000 f864 	bl	8002370 <TIMER_IF_GetTimerValue>
 80022a8:	e7fb      	b.n	80022a2 <HAL_GetTick+0xa>
 80022aa:	bf00      	nop
 80022ac:	200003ac 	.word	0x200003ac

080022b0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80022b0:	b500      	push	{lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80022b6:	9801      	ldr	r0, [sp, #4]
 80022b8:	f000 f936 	bl	8002528 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80022bc:	b003      	add	sp, #12
 80022be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080022c4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80022c4:	b508      	push	{r3, lr}
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <DBG_Init+0x20>)
 80022c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80022d4:	f000 fc68 	bl	8002ba8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80022d8:	f000 fc6e 	bl	8002bb8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80022dc:	f000 fc74 	bl	8002bc8 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80022e0:	bd08      	pop	{r3, pc}
 80022e2:	bf00      	nop
 80022e4:	58000800 	.word	0x58000800

080022e8 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <EnvSensors_Read+0x18>)
 80022ea:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <EnvSensors_Read+0x1c>)
 80022ee:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <EnvSensors_Read+0x20>)
 80022f2:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <EnvSensors_Read+0x24>)
 80022f6:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <EnvSensors_Read+0x28>)
 80022fa:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	4770      	bx	lr
 8002300:	42480000 	.word	0x42480000
 8002304:	41900000 	.word	0x41900000
 8002308:	447a0000 	.word	0x447a0000
 800230c:	003e090d 	.word	0x003e090d
 8002310:	000503ab 	.word	0x000503ab

08002314 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002314:	2000      	movs	r0, #0
 8002316:	4770      	bx	lr

08002318 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002318:	4770      	bx	lr
	...

0800231c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <TIMER_IF_SetTimerContext+0x1c>)
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002322:	4282      	cmp	r2, r0
 8002324:	d003      	beq.n	800232e <TIMER_IF_SetTimerContext+0x12>
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	6898      	ldr	r0, [r3, #8]
 800232a:	4282      	cmp	r2, r0
 800232c:	d1fb      	bne.n	8002326 <TIMER_IF_SetTimerContext+0xa>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800232e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <TIMER_IF_SetTimerContext+0x20>)
 8002332:	6018      	str	r0, [r3, #0]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40002800 	.word	0x40002800
 800233c:	200003d4 	.word	0x200003d4

08002340 <TIMER_IF_GetTimerContext>:
}
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <TIMER_IF_GetTimerContext+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200003d4 	.word	0x200003d4

0800234c <TIMER_IF_GetTimerElapsedTime>:
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002352:	4282      	cmp	r2, r0
 8002354:	d003      	beq.n	800235e <TIMER_IF_GetTimerElapsedTime+0x12>
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	6898      	ldr	r0, [r3, #8]
 800235a:	4282      	cmp	r2, r0
 800235c:	d1fb      	bne.n	8002356 <TIMER_IF_GetTimerElapsedTime+0xa>
  return UINT32_MAX - ssr;
 800235e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	1ac0      	subs	r0, r0, r3
 8002366:	4770      	bx	lr
 8002368:	40002800 	.word	0x40002800
 800236c:	200003d4 	.word	0x200003d4

08002370 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <TIMER_IF_GetTimerValue+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b153      	cbz	r3, 800238c <TIMER_IF_GetTimerValue+0x1c>
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <TIMER_IF_GetTimerValue+0x24>)
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800237c:	4282      	cmp	r2, r0
 800237e:	d003      	beq.n	8002388 <TIMER_IF_GetTimerValue+0x18>
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	6898      	ldr	r0, [r3, #8]
 8002384:	4282      	cmp	r2, r0
 8002386:	d1fb      	bne.n	8002380 <TIMER_IF_GetTimerValue+0x10>
  return UINT32_MAX - ssr;
 8002388:	43c0      	mvns	r0, r0
 800238a:	4770      	bx	lr
  uint32_t ret = 0;
 800238c:	2000      	movs	r0, #0
}
 800238e:	4770      	bx	lr
 8002390:	200003d2 	.word	0x200003d2
 8002394:	40002800 	.word	0x40002800

08002398 <TIMER_IF_GetMinimumTimeout>:
}
 8002398:	2003      	movs	r0, #3
 800239a:	4770      	bx	lr

0800239c <TIMER_IF_Convert_ms2Tick>:
{
 800239c:	b508      	push	{r3, lr}
 800239e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80023a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023a4:	2300      	movs	r3, #0
 80023a6:	0280      	lsls	r0, r0, #10
 80023a8:	0d89      	lsrs	r1, r1, #22
 80023aa:	f7fe fcef 	bl	8000d8c <__aeabi_uldivmod>
}
 80023ae:	bd08      	pop	{r3, pc}

080023b0 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80023b0:	0ec2      	lsrs	r2, r0, #27
 80023b2:	0143      	lsls	r3, r0, #5
 80023b4:	1a1b      	subs	r3, r3, r0
 80023b6:	f162 0200 	sbc.w	r2, r2, #0
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	181b      	adds	r3, r3, r0
 80023c4:	f142 0000 	adc.w	r0, r2, #0
 80023c8:	00c0      	lsls	r0, r0, #3
 80023ca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80023ce:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80023d2:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80023d6:	4770      	bx	lr

080023d8 <TIMER_IF_StopTimer>:
{
 80023d8:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <TIMER_IF_StopTimer+0x20>)
 80023dc:	2201      	movs	r2, #1
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023e0:	4c06      	ldr	r4, [pc, #24]	; (80023fc <TIMER_IF_StopTimer+0x24>)
 80023e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e6:	4620      	mov	r0, r4
 80023e8:	f004 f884 	bl	80064f4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	6323      	str	r3, [r4, #48]	; 0x30
}
 80023f2:	2000      	movs	r0, #0
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	bf00      	nop
 80023f8:	40002800 	.word	0x40002800
 80023fc:	20000304 	.word	0x20000304

08002400 <TIMER_IF_Init>:
{
 8002400:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <TIMER_IF_Init+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b10b      	cbz	r3, 800240c <TIMER_IF_Init+0xc>
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800240c:	4c0e      	ldr	r4, [pc, #56]	; (8002448 <TIMER_IF_Init+0x48>)
 800240e:	f04f 35ff 	mov.w	r5, #4294967295
 8002412:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8002414:	f7ff fcb8 	bl	8001d88 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002418:	f7ff ffde 	bl	80023d8 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800241c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002420:	4620      	mov	r0, r4
 8002422:	f004 f867 	bl	80064f4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002426:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002428:	4620      	mov	r0, r4
 800242a:	f004 fa63 	bl	80068f4 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800242e:	2200      	movs	r2, #0
 8002430:	2102      	movs	r1, #2
 8002432:	4620      	mov	r0, r4
 8002434:	f004 fabf 	bl	80069b6 <HAL_RTCEx_BKUPWrite>
    TIMER_IF_SetTimerContext();
 8002438:	f7ff ff70 	bl	800231c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <TIMER_IF_Init+0x44>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e7e1      	b.n	8002408 <TIMER_IF_Init+0x8>
 8002444:	200003d2 	.word	0x200003d2
 8002448:	20000304 	.word	0x20000304

0800244c <TIMER_IF_BkUp_Write_Seconds>:
{
 800244c:	b508      	push	{r3, lr}
 800244e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002450:	2100      	movs	r1, #0
 8002452:	4802      	ldr	r0, [pc, #8]	; (800245c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002454:	f004 faaf 	bl	80069b6 <HAL_RTCEx_BKUPWrite>
}
 8002458:	bd08      	pop	{r3, pc}
 800245a:	bf00      	nop
 800245c:	20000304 	.word	0x20000304

08002460 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002460:	b508      	push	{r3, lr}
 8002462:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002464:	2101      	movs	r1, #1
 8002466:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002468:	f004 faa5 	bl	80069b6 <HAL_RTCEx_BKUPWrite>
}
 800246c:	bd08      	pop	{r3, pc}
 800246e:	bf00      	nop
 8002470:	20000304 	.word	0x20000304

08002474 <TIMER_IF_StartTimer>:
{
 8002474:	b510      	push	{r4, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800247a:	222c      	movs	r2, #44	; 0x2c
 800247c:	2100      	movs	r1, #0
 800247e:	a801      	add	r0, sp, #4
 8002480:	f010 fd32 	bl	8012ee8 <memset>
  TIMER_IF_StopTimer();
 8002484:	f7ff ffa8 	bl	80023d8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <TIMER_IF_StartTimer+0x48>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800248e:	2300      	movs	r3, #0
 8002490:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002492:	43e4      	mvns	r4, r4
 8002494:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002496:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002498:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800249c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800249e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024a4:	2201      	movs	r2, #1
 80024a6:	a901      	add	r1, sp, #4
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <TIMER_IF_StartTimer+0x4c>)
 80024aa:	f004 f957 	bl	800675c <HAL_RTC_SetAlarm_IT>
 80024ae:	b910      	cbnz	r0, 80024b6 <TIMER_IF_StartTimer+0x42>
}
 80024b0:	2000      	movs	r0, #0
 80024b2:	b00c      	add	sp, #48	; 0x30
 80024b4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80024b6:	f7ff fbc3 	bl	8001c40 <Error_Handler>
 80024ba:	e7f9      	b.n	80024b0 <TIMER_IF_StartTimer+0x3c>
 80024bc:	200003d4 	.word	0x200003d4
 80024c0:	20000304 	.word	0x20000304

080024c4 <TIMER_IF_BkUp_Read_Seconds>:
{
 80024c4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80024c6:	2100      	movs	r1, #0
 80024c8:	4801      	ldr	r0, [pc, #4]	; (80024d0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80024ca:	f004 fa7b 	bl	80069c4 <HAL_RTCEx_BKUPRead>
}
 80024ce:	bd08      	pop	{r3, pc}
 80024d0:	20000304 	.word	0x20000304

080024d4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80024d4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80024d6:	2101      	movs	r1, #1
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80024da:	f004 fa73 	bl	80069c4 <HAL_RTCEx_BKUPRead>
}
 80024de:	bd08      	pop	{r3, pc}
 80024e0:	20000304 	.word	0x20000304

080024e4 <TIMER_IF_GetTime>:
{
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4605      	mov	r5, r0
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <TIMER_IF_GetTime+0x3c>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024ee:	42a2      	cmp	r2, r4
 80024f0:	d003      	beq.n	80024fa <TIMER_IF_GetTime+0x16>
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	689c      	ldr	r4, [r3, #8]
 80024f6:	42a2      	cmp	r2, r4
 80024f8:	d1fb      	bne.n	80024f2 <TIMER_IF_GetTime+0xe>
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80024fa:	2102      	movs	r1, #2
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <TIMER_IF_GetTime+0x40>)
 80024fe:	f004 fa61 	bl	80069c4 <HAL_RTCEx_BKUPRead>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002502:	43e4      	mvns	r4, r4
  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002504:	f3c4 0209 	ubfx	r2, r4, #0, #10
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002508:	0153      	lsls	r3, r2, #5
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	189b      	adds	r3, r3, r2
 8002510:	f3c3 13d5 	ubfx	r3, r3, #7, #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002514:	802b      	strh	r3, [r5, #0]
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002516:	0aa4      	lsrs	r4, r4, #10
}
 8002518:	ea44 5080 	orr.w	r0, r4, r0, lsl #22
 800251c:	bd38      	pop	{r3, r4, r5, pc}
 800251e:	bf00      	nop
 8002520:	40002800 	.word	0x40002800
 8002524:	20000304 	.word	0x20000304

08002528 <TIMER_IF_DelayMs>:
{
 8002528:	b508      	push	{r3, lr}
 800252a:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800252c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002530:	2300      	movs	r3, #0
 8002532:	0280      	lsls	r0, r0, #10
 8002534:	0d89      	lsrs	r1, r1, #22
 8002536:	f7fe fc29 	bl	8000d8c <__aeabi_uldivmod>
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <TIMER_IF_DelayMs+0x4c>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002540:	429a      	cmp	r2, r3
 8002542:	d004      	beq.n	800254e <TIMER_IF_DelayMs+0x26>
 8002544:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <TIMER_IF_DelayMs+0x4c>)
 8002546:	6891      	ldr	r1, [r2, #8]
 8002548:	6893      	ldr	r3, [r2, #8]
 800254a:	4299      	cmp	r1, r3
 800254c:	d1fb      	bne.n	8002546 <TIMER_IF_DelayMs+0x1e>
  return UINT32_MAX - ssr;
 800254e:	ea6f 0c03 	mvn.w	ip, r3
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <TIMER_IF_DelayMs+0x4c>)
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002554:	e000      	b.n	8002558 <TIMER_IF_DelayMs+0x30>
    __NOP();
 8002556:	bf00      	nop
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	6891      	ldr	r1, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800255c:	4299      	cmp	r1, r3
 800255e:	d003      	beq.n	8002568 <TIMER_IF_DelayMs+0x40>
 8002560:	6891      	ldr	r1, [r2, #8]
 8002562:	6893      	ldr	r3, [r2, #8]
 8002564:	4299      	cmp	r1, r3
 8002566:	d1fb      	bne.n	8002560 <TIMER_IF_DelayMs+0x38>
  return UINT32_MAX - ssr;
 8002568:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800256a:	eba3 030c 	sub.w	r3, r3, ip
 800256e:	4283      	cmp	r3, r0
 8002570:	d3f1      	bcc.n	8002556 <TIMER_IF_DelayMs+0x2e>
}
 8002572:	bd08      	pop	{r3, pc}
 8002574:	40002800 	.word	0x40002800

08002578 <HAL_RTC_AlarmAEventCallback>:
{
 8002578:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800257a:	f010 fae7 	bl	8012b4c <UTIL_TIMER_IRQ_Handler>
}
 800257e:	bd08      	pop	{r3, pc}

08002580 <HAL_RTCEx_SSRUEventCallback>:
{
 8002580:	b510      	push	{r4, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002582:	4c05      	ldr	r4, [pc, #20]	; (8002598 <HAL_RTCEx_SSRUEventCallback+0x18>)
 8002584:	2102      	movs	r1, #2
 8002586:	4620      	mov	r0, r4
 8002588:	f004 fa1c 	bl	80069c4 <HAL_RTCEx_BKUPRead>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800258c:	1c42      	adds	r2, r0, #1
 800258e:	2102      	movs	r1, #2
 8002590:	4620      	mov	r0, r4
 8002592:	f004 fa10 	bl	80069b6 <HAL_RTCEx_BKUPWrite>
}
 8002596:	bd10      	pop	{r4, pc}
 8002598:	20000304 	.word	0x20000304

0800259c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800259c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800259e:	481a      	ldr	r0, [pc, #104]	; (8002608 <MX_USART1_UART_Init+0x6c>)
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_USART1_UART_Init+0x70>)
 80025a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80025a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025a8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	2300      	movs	r3, #0
 80025ac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b2:	220c      	movs	r2, #12
 80025b4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025bc:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	6282      	str	r2, [r0, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80025c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025c6:	6442      	str	r2, [r0, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80025c8:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ca:	f005 fdec 	bl	80081a6 <HAL_UART_Init>
 80025ce:	b970      	cbnz	r0, 80025ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d0:	2100      	movs	r1, #0
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <MX_USART1_UART_Init+0x6c>)
 80025d4:	f005 ffa6 	bl	8008524 <HAL_UARTEx_SetTxFifoThreshold>
 80025d8:	b960      	cbnz	r0, 80025f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025da:	2100      	movs	r1, #0
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <MX_USART1_UART_Init+0x6c>)
 80025de:	f005 ffc6 	bl	800856e <HAL_UARTEx_SetRxFifoThreshold>
 80025e2:	b950      	cbnz	r0, 80025fa <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <MX_USART1_UART_Init+0x6c>)
 80025e6:	f005 ff5a 	bl	800849e <HAL_UARTEx_EnableFifoMode>
 80025ea:	b948      	cbnz	r0, 8002600 <MX_USART1_UART_Init+0x64>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80025ee:	f7ff fb27 	bl	8001c40 <Error_Handler>
 80025f2:	e7ed      	b.n	80025d0 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80025f4:	f7ff fb24 	bl	8001c40 <Error_Handler>
 80025f8:	e7ef      	b.n	80025da <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80025fa:	f7ff fb21 	bl	8001c40 <Error_Handler>
 80025fe:	e7f1      	b.n	80025e4 <MX_USART1_UART_Init+0x48>
    Error_Handler();
 8002600:	f7ff fb1e 	bl	8001c40 <Error_Handler>
}
 8002604:	e7f2      	b.n	80025ec <MX_USART1_UART_Init+0x50>
 8002606:	bf00      	nop
 8002608:	20000498 	.word	0x20000498
 800260c:	40013800 	.word	0x40013800

08002610 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002610:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002612:	4818      	ldr	r0, [pc, #96]	; (8002674 <MX_USART2_UART_Init+0x64>)
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_USART2_UART_Init+0x68>)
 8002616:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002618:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800261c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	2300      	movs	r3, #0
 8002620:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002622:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002624:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002626:	220c      	movs	r2, #12
 8002628:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800262c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002630:	61c2      	str	r2, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002632:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002634:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002636:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002638:	f005 fdb5 	bl	80081a6 <HAL_UART_Init>
 800263c:	b970      	cbnz	r0, 800265c <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <MX_USART2_UART_Init+0x64>)
 8002642:	f005 ff6f 	bl	8008524 <HAL_UARTEx_SetTxFifoThreshold>
 8002646:	b960      	cbnz	r0, 8002662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	480a      	ldr	r0, [pc, #40]	; (8002674 <MX_USART2_UART_Init+0x64>)
 800264c:	f005 ff8f 	bl	800856e <HAL_UARTEx_SetRxFifoThreshold>
 8002650:	b950      	cbnz	r0, 8002668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <MX_USART2_UART_Init+0x64>)
 8002654:	f005 ff47 	bl	80084e6 <HAL_UARTEx_DisableFifoMode>
 8002658:	b948      	cbnz	r0, 800266e <MX_USART2_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800265a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800265c:	f7ff faf0 	bl	8001c40 <Error_Handler>
 8002660:	e7ed      	b.n	800263e <MX_USART2_UART_Init+0x2e>
    Error_Handler();
 8002662:	f7ff faed 	bl	8001c40 <Error_Handler>
 8002666:	e7ef      	b.n	8002648 <MX_USART2_UART_Init+0x38>
    Error_Handler();
 8002668:	f7ff faea 	bl	8001c40 <Error_Handler>
 800266c:	e7f1      	b.n	8002652 <MX_USART2_UART_Init+0x42>
    Error_Handler();
 800266e:	f7ff fae7 	bl	8001c40 <Error_Handler>
}
 8002672:	e7f2      	b.n	800265a <MX_USART2_UART_Init+0x4a>
 8002674:	2000052c 	.word	0x2000052c
 8002678:	40004400 	.word	0x40004400

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800267c:	b510      	push	{r4, lr}
 800267e:	b09c      	sub	sp, #112	; 0x70
 8002680:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002682:	2100      	movs	r1, #0
 8002684:	9117      	str	r1, [sp, #92]	; 0x5c
 8002686:	9118      	str	r1, [sp, #96]	; 0x60
 8002688:	9119      	str	r1, [sp, #100]	; 0x64
 800268a:	911a      	str	r1, [sp, #104]	; 0x68
 800268c:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800268e:	9113      	str	r1, [sp, #76]	; 0x4c
 8002690:	9114      	str	r1, [sp, #80]	; 0x50
 8002692:	9115      	str	r1, [sp, #84]	; 0x54
 8002694:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002696:	2238      	movs	r2, #56	; 0x38
 8002698:	a805      	add	r0, sp, #20
 800269a:	f010 fc25 	bl	8012ee8 <memset>
  if(uartHandle->Instance==USART1)
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	4a63      	ldr	r2, [pc, #396]	; (8002830 <HAL_UART_MspInit+0x1b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d005      	beq.n	80026b2 <HAL_UART_MspInit+0x36>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80026a6:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_UART_MspInit+0x1b8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	f000 8089 	beq.w	80027c0 <HAL_UART_MspInit+0x144>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ae:	b01c      	add	sp, #112	; 0x70
 80026b0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80026ba:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026bc:	a805      	add	r0, sp, #20
 80026be:	f003 fddd 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d170      	bne.n	80027a8 <HAL_UART_MspInit+0x12c>
  SET_BIT(RCC->APB2ENR, Periphs);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026d4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026d8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80026da:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026de:	f042 0202 	orr.w	r2, r2, #2
 80026e2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80026ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80026ee:	23c0      	movs	r3, #192	; 0xc0
 80026f0:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80026fa:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026fc:	2307      	movs	r3, #7
 80026fe:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	a917      	add	r1, sp, #92	; 0x5c
 8002702:	484d      	ldr	r0, [pc, #308]	; (8002838 <HAL_UART_MspInit+0x1bc>)
 8002704:	f001 fb8c 	bl	8003e20 <HAL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002708:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_UART_MspInit+0x1c0>)
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002718:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800271a:	4849      	ldr	r0, [pc, #292]	; (8002840 <HAL_UART_MspInit+0x1c4>)
 800271c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002720:	3308      	adds	r3, #8
 8002722:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002724:	2312      	movs	r3, #18
 8002726:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	2310      	movs	r3, #16
 800272a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002734:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002736:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002738:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800273c:	f000 fff8 	bl	8003730 <HAL_DMA_Init>
 8002740:	2800      	cmp	r0, #0
 8002742:	d134      	bne.n	80027ae <HAL_UART_MspInit+0x132>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002744:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_UART_MspInit+0x1c4>)
 8002746:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002748:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800274a:	483e      	ldr	r0, [pc, #248]	; (8002844 <HAL_UART_MspInit+0x1c8>)
 800274c:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_UART_MspInit+0x1cc>)
 800274e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002750:	2311      	movs	r3, #17
 8002752:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002754:	2300      	movs	r3, #0
 8002756:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002758:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275e:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002760:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002762:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002764:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002766:	f000 ffe3 	bl	8003730 <HAL_DMA_Init>
 800276a:	bb18      	cbnz	r0, 80027b4 <HAL_UART_MspInit+0x138>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800276c:	2300      	movs	r3, #0
 800276e:	9313      	str	r3, [sp, #76]	; 0x4c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002770:	9314      	str	r3, [sp, #80]	; 0x50
    pSyncConfig.SyncEnable = DISABLE;
 8002772:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    pSyncConfig.EventEnable = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    pSyncConfig.RequestNumber = 1;
 800277c:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800277e:	a913      	add	r1, sp, #76	; 0x4c
 8002780:	4830      	ldr	r0, [pc, #192]	; (8002844 <HAL_UART_MspInit+0x1c8>)
 8002782:	f001 f9ea 	bl	8003b5a <HAL_DMAEx_ConfigMuxSync>
 8002786:	b9c0      	cbnz	r0, 80027ba <HAL_UART_MspInit+0x13e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_UART_MspInit+0x1c8>)
 800278a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800278e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2102      	movs	r1, #2
 8002794:	2024      	movs	r0, #36	; 0x24
 8002796:	f000 ff1d 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800279a:	2024      	movs	r0, #36	; 0x24
 800279c:	f000 ff50 	bl	8003640 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027a0:	200c      	movs	r0, #12
 80027a2:	f000 ff4d 	bl	8003640 <HAL_NVIC_EnableIRQ>
 80027a6:	e782      	b.n	80026ae <HAL_UART_MspInit+0x32>
      Error_Handler();
 80027a8:	f7ff fa4a 	bl	8001c40 <Error_Handler>
 80027ac:	e78b      	b.n	80026c6 <HAL_UART_MspInit+0x4a>
      Error_Handler();
 80027ae:	f7ff fa47 	bl	8001c40 <Error_Handler>
 80027b2:	e7c7      	b.n	8002744 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80027b4:	f7ff fa44 	bl	8001c40 <Error_Handler>
 80027b8:	e7d8      	b.n	800276c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80027ba:	f7ff fa41 	bl	8001c40 <Error_Handler>
 80027be:	e7e3      	b.n	8002788 <HAL_UART_MspInit+0x10c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027c0:	2302      	movs	r3, #2
 80027c2:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027c4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80027c8:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ca:	a805      	add	r0, sp, #20
 80027cc:	f003 fd56 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	bb50      	cbnz	r0, 8002828 <HAL_UART_MspInit+0x1ac>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80027e4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80027e6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80027f8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80027fa:	230c      	movs	r3, #12
 80027fc:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002802:	2301      	movs	r3, #1
 8002804:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002806:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002808:	2307      	movs	r3, #7
 800280a:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	a917      	add	r1, sp, #92	; 0x5c
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002812:	f001 fb05 	bl	8003e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	4611      	mov	r1, r2
 800281a:	2025      	movs	r0, #37	; 0x25
 800281c:	f000 feda 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002820:	2025      	movs	r0, #37	; 0x25
 8002822:	f000 ff0d 	bl	8003640 <HAL_NVIC_EnableIRQ>
}
 8002826:	e742      	b.n	80026ae <HAL_UART_MspInit+0x32>
      Error_Handler();
 8002828:	f7ff fa0a 	bl	8001c40 <Error_Handler>
 800282c:	e7d1      	b.n	80027d2 <HAL_UART_MspInit+0x156>
 800282e:	bf00      	nop
 8002830:	40013800 	.word	0x40013800
 8002834:	40004400 	.word	0x40004400
 8002838:	48000400 	.word	0x48000400
 800283c:	40010000 	.word	0x40010000
 8002840:	20000438 	.word	0x20000438
 8002844:	200003d8 	.word	0x200003d8
 8002848:	4002001c 	.word	0x4002001c

0800284c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800284c:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_UART_MspDeInit+0x5c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <HAL_UART_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_UART_MspDeInit+0x60>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d016      	beq.n	800288a <HAL_UART_MspDeInit+0x3e>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800285c:	bd10      	pop	{r4, pc}
 800285e:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002864:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286a:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800286c:	21c0      	movs	r1, #192	; 0xc0
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <HAL_UART_MspDeInit+0x64>)
 8002870:	f001 fb9e 	bl	8003fb0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002874:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002876:	f000 ffd7 	bl	8003828 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800287a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800287e:	f000 ffd3 	bl	8003828 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002882:	2024      	movs	r0, #36	; 0x24
 8002884:	f000 feea 	bl	800365c <HAL_NVIC_DisableIRQ>
 8002888:	e7e8      	b.n	800285c <HAL_UART_MspDeInit+0x10>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002896:	210c      	movs	r1, #12
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f001 fb88 	bl	8003fb0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80028a0:	2025      	movs	r0, #37	; 0x25
 80028a2:	f000 fedb 	bl	800365c <HAL_NVIC_DisableIRQ>
}
 80028a6:	e7d9      	b.n	800285c <HAL_UART_MspDeInit+0x10>
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40004400 	.word	0x40004400
 80028b0:	48000400 	.word	0x48000400

080028b4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80028b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <vcom_Init+0x20>)
 80028b8:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80028ba:	f7fe fcb5 	bl	8001228 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80028be:	f7ff fe6d 	bl	800259c <MX_USART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <vcom_Init+0x24>)
 80028c4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80028c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80028d0:	2000      	movs	r0, #0
 80028d2:	bd08      	pop	{r3, pc}
 80028d4:	200005c4 	.word	0x200005c4
 80028d8:	58000800 	.word	0x58000800

080028dc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80028dc:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80028ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <vcom_DeInit+0x28>)
 80028f4:	f7ff ffaa 	bl	800284c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80028f8:	200f      	movs	r0, #15
 80028fa:	f000 feaf 	bl	800365c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80028fe:	2000      	movs	r0, #0
 8002900:	bd08      	pop	{r3, pc}
 8002902:	bf00      	nop
 8002904:	20000498 	.word	0x20000498

08002908 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002908:	b508      	push	{r3, lr}
 800290a:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800290c:	4601      	mov	r1, r0
 800290e:	4802      	ldr	r0, [pc, #8]	; (8002918 <vcom_Trace_DMA+0x10>)
 8002910:	f004 fca4 	bl	800725c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002914:	2000      	movs	r0, #0
 8002916:	bd08      	pop	{r3, pc}
 8002918:	20000498 	.word	0x20000498

0800291c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800291c:	b510      	push	{r4, lr}
 800291e:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <vcom_ReceiveInit+0x50>)
 8002922:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002928:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800292a:	4c11      	ldr	r4, [pc, #68]	; (8002970 <vcom_ReceiveInit+0x54>)
 800292c:	ab02      	add	r3, sp, #8
 800292e:	e913 0006 	ldmdb	r3, {r1, r2}
 8002932:	4620      	mov	r0, r4
 8002934:	f005 fd4f 	bl	80083d6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002940:	d1fb      	bne.n	800293a <vcom_ReceiveInit+0x1e>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002948:	d0fb      	beq.n	8002942 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002950:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002952:	4c07      	ldr	r4, [pc, #28]	; (8002970 <vcom_ReceiveInit+0x54>)
 8002954:	4620      	mov	r0, r4
 8002956:	f005 fd8b 	bl	8008470 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800295a:	2201      	movs	r2, #1
 800295c:	4905      	ldr	r1, [pc, #20]	; (8002974 <vcom_ReceiveInit+0x58>)
 800295e:	4620      	mov	r0, r4
 8002960:	f005 fcea 	bl	8008338 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002964:	2000      	movs	r0, #0
 8002966:	b002      	add	sp, #8
 8002968:	bd10      	pop	{r4, pc}
 800296a:	bf00      	nop
 800296c:	200005c0 	.word	0x200005c0
 8002970:	20000498 	.word	0x20000498
 8002974:	200005c8 	.word	0x200005c8

08002978 <vcom_Resume>:

void vcom_Resume(void)
{
 8002978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <vcom_Resume+0x20>)
 800297c:	f005 fc13 	bl	80081a6 <HAL_UART_Init>
 8002980:	b920      	cbnz	r0, 800298c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002982:	4806      	ldr	r0, [pc, #24]	; (800299c <vcom_Resume+0x24>)
 8002984:	f000 fed4 	bl	8003730 <HAL_DMA_Init>
 8002988:	b918      	cbnz	r0, 8002992 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800298a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800298c:	f7ff f958 	bl	8001c40 <Error_Handler>
 8002990:	e7f7      	b.n	8002982 <vcom_Resume+0xa>
    Error_Handler();
 8002992:	f7ff f955 	bl	8001c40 <Error_Handler>
}
 8002996:	e7f8      	b.n	800298a <vcom_Resume+0x12>
 8002998:	20000498 	.word	0x20000498
 800299c:	20000438 	.word	0x20000438

080029a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80029a2:	6802      	ldr	r2, [r0, #0]
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_UART_TxCpltCallback+0x18>)
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d000      	beq.n	80029ac <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80029aa:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_UART_TxCpltCallback+0x1c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2000      	movs	r0, #0
 80029b2:	4798      	blx	r3
}
 80029b4:	e7f9      	b.n	80029aa <HAL_UART_TxCpltCallback+0xa>
 80029b6:	bf00      	nop
 80029b8:	40013800 	.word	0x40013800
 80029bc:	200005c4 	.word	0x200005c4

080029c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80029c4:	6802      	ldr	r2, [r0, #0]
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_UART_RxCpltCallback+0x3c>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d004      	beq.n	80029d6 <HAL_UART_RxCpltCallback+0x16>
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_UART_RxCpltCallback+0x40>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d00f      	beq.n	80029f4 <HAL_UART_RxCpltCallback+0x34>




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80029d4:	bd10      	pop	{r4, pc}
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_UART_RxCpltCallback+0x44>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b12b      	cbz	r3, 80029e8 <HAL_UART_RxCpltCallback+0x28>
 80029dc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80029e0:	b912      	cbnz	r2, 80029e8 <HAL_UART_RxCpltCallback+0x28>
      RxCpltCallback(&charRx, 1, 0);
 80029e2:	2101      	movs	r1, #1
 80029e4:	4808      	ldr	r0, [pc, #32]	; (8002a08 <HAL_UART_RxCpltCallback+0x48>)
 80029e6:	4798      	blx	r3
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80029e8:	2201      	movs	r2, #1
 80029ea:	4907      	ldr	r1, [pc, #28]	; (8002a08 <HAL_UART_RxCpltCallback+0x48>)
 80029ec:	4620      	mov	r0, r4
 80029ee:	f005 fca3 	bl	8008338 <HAL_UART_Receive_IT>
 80029f2:	e7eb      	b.n	80029cc <HAL_UART_RxCpltCallback+0xc>
    	  UART2_SET = 1;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_UART_RxCpltCallback+0x4c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	e7eb      	b.n	80029d4 <HAL_UART_RxCpltCallback+0x14>
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40004400 	.word	0x40004400
 8002a04:	200005c0 	.word	0x200005c0
 8002a08:	200005c8 	.word	0x200005c8
 8002a0c:	20000008 	.word	0x20000008

08002a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a14:	f7ff fc80 	bl	8002318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <LoopForever+0xe>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	; (8002a5c <LoopForever+0x16>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a3e:	f010 fa5b 	bl	8012ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a42:	f7ff f821 	bl	8001a88 <main>

08002a46 <LoopForever>:

LoopForever:
    b LoopForever
 8002a46:	e7fe      	b.n	8002a46 <LoopForever>
  ldr   r0, =_estack
 8002a48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002a54:	08014060 	.word	0x08014060
  ldr r2, =_sbss
 8002a58:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8002a5c:	20002030 	.word	0x20002030

08002a60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>

08002a62 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002a62:	b570      	push	{r4, r5, r6, lr}
 8002a64:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a66:	2400      	movs	r4, #0
 8002a68:	9403      	str	r4, [sp, #12]
 8002a6a:	9405      	str	r4, [sp, #20]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002a6c:	2510      	movs	r5, #16
 8002a6e:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002a78:	a901      	add	r1, sp, #4
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7e:	f001 f9cf 	bl	8003e20 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002a82:	2620      	movs	r6, #32
 8002a84:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002a86:	a901      	add	r1, sp, #4
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f001 f9c8 	bl	8003e20 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a90:	4622      	mov	r2, r4
 8002a92:	4631      	mov	r1, r6
 8002a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a98:	f001 fb08 	bl	80040ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa4:	f001 fb02 	bl	80040ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd70      	pop	{r4, r5, r6, pc}

08002aae <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002aae:	b508      	push	{r3, lr}
  switch (Config)
 8002ab0:	2803      	cmp	r0, #3
 8002ab2:	d80f      	bhi.n	8002ad4 <BSP_RADIO_ConfigRFSwitch+0x26>
 8002ab4:	e8df f000 	tbb	[pc, r0]
 8002ab8:	2a1d1002 	.word	0x2a1d1002
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2110      	movs	r1, #16
 8002ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac4:	f001 faf2 	bl	80040ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2120      	movs	r1, #32
 8002acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad0:	f001 faec 	bl	80040ac <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2110      	movs	r1, #16
 8002adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae0:	f001 fae4 	bl	80040ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aec:	f001 fade 	bl	80040ac <HAL_GPIO_WritePin>
      break;
 8002af0:	e7f0      	b.n	8002ad4 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002af2:	2201      	movs	r2, #1
 8002af4:	2110      	movs	r1, #16
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afa:	f001 fad7 	bl	80040ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002afe:	2201      	movs	r2, #1
 8002b00:	2120      	movs	r1, #32
 8002b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b06:	f001 fad1 	bl	80040ac <HAL_GPIO_WritePin>
      break;
 8002b0a:	e7e3      	b.n	8002ad4 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f001 faca 	bl	80040ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b20:	f001 fac4 	bl	80040ac <HAL_GPIO_WritePin>
      break;
 8002b24:	e7d6      	b.n	8002ad4 <BSP_RADIO_ConfigRFSwitch+0x26>

08002b26 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8002b26:	2002      	movs	r0, #2
 8002b28:	4770      	bx	lr

08002b2a <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	4770      	bx	lr

08002b2e <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002b2e:	2001      	movs	r0, #1
 8002b30:	4770      	bx	lr

08002b32 <BSP_RADIO_GetRFOMaxPowerConfig>:
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002b32:	2800      	cmp	r0, #0
  }

  return ret;
}
 8002b34:	bf0c      	ite	eq
 8002b36:	200f      	moveq	r0, #15
 8002b38:	2016      	movne	r0, #22
 8002b3a:	4770      	bx	lr

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3e:	2003      	movs	r0, #3
 8002b40:	f000 fd36 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b44:	f002 ff2a 	bl	800599c <HAL_RCC_GetHCLKFreq>
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_Init+0x28>)
 8002b4a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b4c:	200f      	movs	r0, #15
 8002b4e:	f7ff fba1 	bl	8002294 <HAL_InitTick>
 8002b52:	b110      	cbz	r0, 8002b5a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b54:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002b56:	4620      	mov	r0, r4
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	4604      	mov	r4, r0
    HAL_MspInit();
 8002b5c:	f7ff fa34 	bl	8001fc8 <HAL_MspInit>
 8002b60:	e7f9      	b.n	8002b56 <HAL_Init+0x1a>
 8002b62:	bf00      	nop
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b68:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002b6c:	6913      	ldr	r3, [r2, #16]
 8002b6e:	f023 0302 	bic.w	r3, r3, #2
 8002b72:	6113      	str	r3, [r2, #16]
}
 8002b74:	4770      	bx	lr

08002b76 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b76:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002b7a:	6913      	ldr	r3, [r2, #16]
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6113      	str	r3, [r2, #16]
}
 8002b82:	4770      	bx	lr

08002b84 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <HAL_GetUIDw0+0x8>)
 8002b86:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002b8a:	4770      	bx	lr
 8002b8c:	1fff7000 	.word	0x1fff7000

08002b90 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002b90:	4b01      	ldr	r3, [pc, #4]	; (8002b98 <HAL_GetUIDw1+0x8>)
 8002b92:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002b96:	4770      	bx	lr
 8002b98:	1fff7000 	.word	0x1fff7000

08002b9c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002b9c:	4b01      	ldr	r3, [pc, #4]	; (8002ba4 <HAL_GetUIDw2+0x8>)
 8002b9e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002ba2:	4770      	bx	lr
 8002ba4:	1fff7000 	.word	0x1fff7000

08002ba8 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ba8:	4a02      	ldr	r2, [pc, #8]	; (8002bb4 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002baa:	6853      	ldr	r3, [r2, #4]
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002bb2:	4770      	bx	lr
 8002bb4:	e0042000 	.word	0xe0042000

08002bb8 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002bb8:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002bba:	6853      	ldr	r3, [r2, #4]
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002bc2:	4770      	bx	lr
 8002bc4:	e0042000 	.word	0xe0042000

08002bc8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bc8:	4a02      	ldr	r2, [pc, #8]	; (8002bd4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002bca:	6853      	ldr	r3, [r2, #4]
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002bd2:	4770      	bx	lr
 8002bd4:	e0042000 	.word	0xe0042000

08002bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f000 8106 	beq.w	8002df2 <HAL_ADC_Init+0x21a>
 8002be6:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80bf 	beq.w	8002d6e <HAL_ADC_Init+0x196>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf2:	6893      	ldr	r3, [r2, #8]
 8002bf4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bf8:	d119      	bne.n	8002c2e <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8002bfa:	6893      	ldr	r3, [r2, #8]
 8002bfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c00:	f023 0317 	bic.w	r3, r3, #23
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_ADC_Init+0x220>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <HAL_ADC_Init+0x224>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	3301      	adds	r3, #1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c1e:	9b01      	ldr	r3, [sp, #4]
 8002c20:	b12b      	cbz	r3, 8002c2e <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8002c22:	9b01      	ldr	r3, [sp, #4]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c28:	9b01      	ldr	r3, [sp, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f9      	bne.n	8002c22 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c2e:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c30:	688b      	ldr	r3, [r1, #8]
 8002c32:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c36:	f040 80a1 	bne.w	8002d7c <HAL_ADC_Init+0x1a4>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c3c:	f043 0310 	orr.w	r3, r3, #16
 8002c40:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c4a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4c:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	f002 0204 	and.w	r2, r2, #4
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f040 80c3 	bne.w	8002de4 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c6a:	688b      	ldr	r3, [r1, #8]
 8002c6c:	f013 0f01 	tst.w	r3, #1
 8002c70:	d153      	bne.n	8002d1a <HAL_ADC_Init+0x142>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c72:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c76:	3b00      	subs	r3, #0
 8002c78:	bf18      	it	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	ea4f 3e03 	mov.w	lr, r3, lsl #12
 8002c80:	68a3      	ldr	r3, [r4, #8]
 8002c82:	68e2      	ldr	r2, [r4, #12]
 8002c84:	4313      	orrs	r3, r2
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c86:	7e22      	ldrb	r2, [r4, #24]
 8002c88:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c8c:	7e62      	ldrb	r2, [r4, #25]
 8002c8e:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 8002c92:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c96:	6922      	ldr	r2, [r4, #16]
 8002c98:	2a00      	cmp	r2, #0
 8002c9a:	bfb4      	ite	lt
 8002c9c:	f022 4200 	biclt.w	r2, r2, #2147483648	; 0x80000000
 8002ca0:	f44f 1200 	movge.w	r2, #2097152	; 0x200000
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ca4:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ca8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8002cac:	ea43 030e 	orr.w	r3, r3, lr
 8002cb0:	4313      	orrs	r3, r2

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002cb6:	2a01      	cmp	r2, #1
 8002cb8:	d062      	beq.n	8002d80 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cbc:	b122      	cbz	r2, 8002cc8 <HAL_ADC_Init+0xf0>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002cbe:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 8002cc2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002cc4:	432a      	orrs	r2, r5
 8002cc6:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002cc8:	68ca      	ldr	r2, [r1, #12]
 8002cca:	f422 32fe 	bic.w	r2, r2, #130048	; 0x1fc00
 8002cce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	60ca      	str	r2, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cd6:	6863      	ldr	r3, [r4, #4]
 8002cd8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002cdc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002cde:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ce0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002ce4:	2901      	cmp	r1, #1
 8002ce6:	d058      	beq.n	8002d9a <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	690d      	ldr	r5, [r1, #16]
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_ADC_Init+0x228>)
 8002cee:	402b      	ands	r3, r5
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cfa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002cfe:	d00c      	beq.n	8002d1a <HAL_ADC_Init+0x142>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d04:	d009      	beq.n	8002d1a <HAL_ADC_Init+0x142>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002d06:	493f      	ldr	r1, [pc, #252]	; (8002e04 <HAL_ADC_Init+0x22c>)
 8002d08:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002d0c:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002d10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d1a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002d1c:	6953      	ldr	r3, [r2, #20]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	6953      	ldr	r3, [r2, #20]
 8002d2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002d36:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d137      	bne.n	8002dae <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002d42:	f063 030f 	orn	r3, r3, #15
 8002d46:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d48:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d03d      	beq.n	8002dd2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d58:	f023 0312 	bic.w	r3, r3, #18
 8002d5c:	f043 0310 	orr.w	r3, r3, #16
 8002d60:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	e03f      	b.n	8002dee <HAL_ADC_Init+0x216>
    HAL_ADC_MspInit(hadc);
 8002d6e:	f7fe f9cd 	bl	800110c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d72:	2300      	movs	r3, #0
 8002d74:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002d76:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002d7a:	e739      	b.n	8002bf0 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	e765      	b.n	8002c4c <HAL_ADC_Init+0x74>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d80:	b916      	cbnz	r6, 8002d88 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	e798      	b.n	8002cba <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d88:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002d98:	e78f      	b.n	8002cba <HAL_ADC_Init+0xe2>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002d9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d9c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002d9e:	4329      	orrs	r1, r5
 8002da0:	430a      	orrs	r2, r1
 8002da2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002da4:	430a      	orrs	r2, r1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	e79c      	b.n	8002ce8 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db2:	d1c9      	bne.n	8002d48 <HAL_ADC_Init+0x170>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002db4:	6821      	ldr	r1, [r4, #0]
 8002db6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002db8:	69e3      	ldr	r3, [r4, #28]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f003 031c 	and.w	r3, r3, #28
 8002dc2:	f06f 020f 	mvn.w	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	628b      	str	r3, [r1, #40]	; 0x28
 8002dd0:	e7ba      	b.n	8002d48 <HAL_ADC_Init+0x170>
      ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002de2:	e004      	b.n	8002dee <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002de6:	f043 0310 	orr.w	r3, r3, #16
 8002dea:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002dee:	b002      	add	sp, #8
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002df2:	2001      	movs	r0, #1
 8002df4:	e7fb      	b.n	8002dee <HAL_ADC_Init+0x216>
 8002df6:	bf00      	nop
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	1ffffc02 	.word	0x1ffffc02
 8002e04:	40012000 	.word	0x40012000

08002e08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e0e:	6945      	ldr	r5, [r0, #20]
 8002e10:	2d08      	cmp	r5, #8
 8002e12:	d005      	beq.n	8002e20 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f013 0f01 	tst.w	r3, #1
 8002e1c:	d11e      	bne.n	8002e5c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002e1e:	2504      	movs	r5, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e20:	f7ff fa3a 	bl	8002298 <HAL_GetTick>
 8002e24:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e26:	6832      	ldr	r2, [r6, #0]
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	422b      	tst	r3, r5
 8002e2c:	d11c      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002e32:	d0f9      	beq.n	8002e28 <HAL_ADC_PollForConversion+0x20>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e34:	f7ff fa30 	bl	8002298 <HAL_GetTick>
 8002e38:	1bc3      	subs	r3, r0, r7
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	d801      	bhi.n	8002e42 <HAL_ADC_PollForConversion+0x3a>
 8002e3e:	2c00      	cmp	r4, #0
 8002e40:	d1f1      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e42:	6833      	ldr	r3, [r6, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	422b      	tst	r3, r5
 8002e48:	d1ed      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e4a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	65b3      	str	r3, [r6, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002e52:	2300      	movs	r3, #0
 8002e54:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
 8002e5a:	e028      	b.n	8002eae <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002e5e:	f043 0320 	orr.w	r3, r3, #32
 8002e62:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e022      	b.n	8002eae <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e68:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	65b3      	str	r3, [r6, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e70:	68d3      	ldr	r3, [r2, #12]
 8002e72:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002e76:	d115      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e78:	7eb3      	ldrb	r3, [r6, #26]
 8002e7a:	b99b      	cbnz	r3, 8002ea4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	f013 0f08 	tst.w	r3, #8
 8002e82:	d00f      	beq.n	8002ea4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e84:	6893      	ldr	r3, [r2, #8]
 8002e86:	f013 0f04 	tst.w	r3, #4
 8002e8a:	d111      	bne.n	8002eb0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e8c:	6853      	ldr	r3, [r2, #4]
 8002e8e:	f023 030c 	bic.w	r3, r3, #12
 8002e92:	6053      	str	r3, [r2, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e94:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	65b3      	str	r3, [r6, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ea4:	7e30      	ldrb	r0, [r6, #24]
 8002ea6:	b960      	cbnz	r0, 8002ec2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ea8:	6833      	ldr	r3, [r6, #0]
 8002eaa:	220c      	movs	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002eb2:	f043 0320 	orr.w	r3, r3, #32
 8002eb6:	65b3      	str	r3, [r6, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	65f3      	str	r3, [r6, #92]	; 0x5c
 8002ec0:	e7f0      	b.n	8002ea4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e7f3      	b.n	8002eae <HAL_ADC_PollForConversion+0xa6>

08002ec6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ec6:	6803      	ldr	r3, [r0, #0]
 8002ec8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ecc:	b470      	push	{r4, r5, r6}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ed6:	6900      	ldr	r0, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002ed8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002edc:	2a01      	cmp	r2, #1
 8002ede:	f000 8103 	beq.w	80030e8 <HAL_ADC_ConfigChannel+0x21c>
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	6894      	ldr	r4, [r2, #8]
 8002eec:	f014 0f04 	tst.w	r4, #4
 8002ef0:	d00a      	beq.n	8002f08 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef4:	f042 0220 	orr.w	r2, r2, #32
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002efa:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002f02:	b003      	add	sp, #12
 8002f04:	bc70      	pop	{r4, r5, r6}
 8002f06:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f08:	684c      	ldr	r4, [r1, #4]
 8002f0a:	2c02      	cmp	r4, #2
 8002f0c:	f000 809b 	beq.w	8003046 <HAL_ADC_ConfigChannel+0x17a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f10:	f020 0004 	bic.w	r0, r0, #4
 8002f14:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8002f18:	d025      	beq.n	8002f66 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f1a:	f004 041f 	and.w	r4, r4, #31
 8002f1e:	250f      	movs	r5, #15
 8002f20:	40a5      	lsls	r5, r4
 8002f22:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002f24:	ea20 0505 	bic.w	r5, r0, r5
 8002f28:	6808      	ldr	r0, [r1, #0]
 8002f2a:	f3c0 0611 	ubfx	r6, r0, #0, #18
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	d132      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0xcc>
 8002f32:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002f36:	40a0      	lsls	r0, r4
 8002f38:	4328      	orrs	r0, r5
 8002f3a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002f3c:	684c      	ldr	r4, [r1, #4]
 8002f3e:	08a0      	lsrs	r0, r4, #2
 8002f40:	3001      	adds	r0, #1
 8002f42:	69dd      	ldr	r5, [r3, #28]
 8002f44:	42a8      	cmp	r0, r5
 8002f46:	d814      	bhi.n	8002f72 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->CHSELR,
 8002f48:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8002f4a:	f004 041f 	and.w	r4, r4, #31
 8002f4e:	6808      	ldr	r0, [r1, #0]
 8002f50:	f3c0 6083 	ubfx	r0, r0, #26, #4
 8002f54:	40a0      	lsls	r0, r4
 8002f56:	260f      	movs	r6, #15
 8002f58:	fa06 f404 	lsl.w	r4, r6, r4
 8002f5c:	ea25 0404 	bic.w	r4, r5, r4
 8002f60:	4320      	orrs	r0, r4
 8002f62:	6290      	str	r0, [r2, #40]	; 0x28
}
 8002f64:	e005      	b.n	8002f72 <HAL_ADC_ConfigChannel+0xa6>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f66:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002f68:	6808      	ldr	r0, [r1, #0]
 8002f6a:	f3c0 0011 	ubfx	r0, r0, #0, #18
 8002f6e:	4320      	orrs	r0, r4
 8002f70:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f72:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 8002f74:	6960      	ldr	r0, [r4, #20]
 8002f76:	680d      	ldr	r5, [r1, #0]
 8002f78:	688a      	ldr	r2, [r1, #8]
 8002f7a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002f7e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f86:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002f8a:	4302      	orrs	r2, r0
 8002f8c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f8e:	680a      	ldr	r2, [r1, #0]
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	db06      	blt.n	8002fa2 <HAL_ADC_ConfigChannel+0xd6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7b1      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	fa90 f0a0 	rbit	r0, r0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002f9c:	fab0 f080 	clz	r0, r0
 8002fa0:	e7c9      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x6a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fa2:	4952      	ldr	r1, [pc, #328]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 8002fa4:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
 8002fa8:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fac:	4850      	ldr	r0, [pc, #320]	; (80030f0 <HAL_ADC_ConfigChannel+0x224>)
 8002fae:	4282      	cmp	r2, r0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x114>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fb2:	4850      	ldr	r0, [pc, #320]	; (80030f4 <HAL_ADC_ConfigChannel+0x228>)
 8002fb4:	4282      	cmp	r2, r0
 8002fb6:	d037      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x15c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002fb8:	484f      	ldr	r0, [pc, #316]	; (80030f8 <HAL_ADC_ConfigChannel+0x22c>)
 8002fba:	4282      	cmp	r2, r0
 8002fbc:	f040 8090 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x214>
 8002fc0:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002fc4:	f040 808e 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x218>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc8:	4948      	ldr	r1, [pc, #288]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 8002fca:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002fce:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002fd2:	4322      	orrs	r2, r4
 8002fd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002fd8:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	e78d      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fe0:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002fe4:	d176      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x208>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fe6:	4941      	ldr	r1, [pc, #260]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 8002fe8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002fec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002ff0:	4322      	orrs	r2, r4
 8002ff2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ff6:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ffa:	4a40      	ldr	r2, [pc, #256]	; (80030fc <HAL_ADC_ConfigChannel+0x230>)
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	0992      	lsrs	r2, r2, #6
 8003000:	493f      	ldr	r1, [pc, #252]	; (8003100 <HAL_ADC_ConfigChannel+0x234>)
 8003002:	fba1 1202 	umull	r1, r2, r1, r2
 8003006:	0992      	lsrs	r2, r2, #6
 8003008:	3201      	adds	r2, #1
 800300a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003012:	9a01      	ldr	r2, [sp, #4]
 8003014:	2a00      	cmp	r2, #0
 8003016:	d05f      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x20c>
            wait_loop_index--;
 8003018:	9a01      	ldr	r2, [sp, #4]
 800301a:	3a01      	subs	r2, #1
 800301c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800301e:	9a01      	ldr	r2, [sp, #4]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d1f9      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x14c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2000      	movs	r0, #0
 8003026:	e769      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003028:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800302c:	d156      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x210>
 800302e:	492f      	ldr	r1, [pc, #188]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 8003030:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003034:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003038:	4322      	orrs	r2, r4
 800303a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800303e:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003042:	2000      	movs	r0, #0
}
 8003044:	e75a      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003046:	f020 0004 	bic.w	r0, r0, #4
 800304a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0x18e>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003050:	680a      	ldr	r2, [r1, #0]
 8003052:	2a00      	cmp	r2, #0
 8003054:	db09      	blt.n	800306a <HAL_ADC_ConfigChannel+0x19e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003056:	2000      	movs	r0, #0
 8003058:	e750      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800305a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800305c:	680c      	ldr	r4, [r1, #0]
 800305e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003062:	ea20 0004 	bic.w	r0, r0, r4
 8003066:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003068:	e7f2      	b.n	8003050 <HAL_ADC_ConfigChannel+0x184>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800306a:	4920      	ldr	r1, [pc, #128]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 800306c:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003070:	481f      	ldr	r0, [pc, #124]	; (80030f0 <HAL_ADC_ConfigChannel+0x224>)
 8003072:	4282      	cmp	r2, r0
 8003074:	d007      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x1ba>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003076:	481f      	ldr	r0, [pc, #124]	; (80030f4 <HAL_ADC_ConfigChannel+0x228>)
 8003078:	4282      	cmp	r2, r0
 800307a:	d013      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0x1d8>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800307c:	481e      	ldr	r0, [pc, #120]	; (80030f8 <HAL_ADC_ConfigChannel+0x22c>)
 800307e:	4282      	cmp	r2, r0
 8003080:	d01c      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x1f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003082:	2000      	movs	r0, #0
 8003084:	e73a      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003086:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800308a:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800308e:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003092:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
 8003096:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800309a:	4311      	orrs	r1, r2
 800309c:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	e72b      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030a4:	4c11      	ldr	r4, [pc, #68]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 80030a6:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030aa:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
 80030ae:	f020 71e0 	bic.w	r1, r0, #29360128	; 0x1c00000
 80030b2:	430a      	orrs	r2, r1
 80030b4:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b8:	2000      	movs	r0, #0
}
 80030ba:	e71f      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030bc:	4c0b      	ldr	r4, [pc, #44]	; (80030ec <HAL_ADC_ConfigChannel+0x220>)
 80030be:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c2:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
 80030c6:	f020 71e0 	bic.w	r1, r0, #29360128	; 0x1c00000
 80030ca:	430a      	orrs	r2, r1
 80030cc:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2000      	movs	r0, #0
}
 80030d2:	e713      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
 80030d4:	2000      	movs	r0, #0
 80030d6:	e711      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
 80030d8:	2000      	movs	r0, #0
 80030da:	e70f      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
 80030dc:	2000      	movs	r0, #0
 80030de:	e70d      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
 80030e0:	2000      	movs	r0, #0
 80030e2:	e70b      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
 80030e4:	2000      	movs	r0, #0
 80030e6:	e709      	b.n	8002efc <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80030e8:	2002      	movs	r0, #2
 80030ea:	e70a      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x36>
 80030ec:	40012000 	.word	0x40012000
 80030f0:	b0001000 	.word	0xb0001000
 80030f4:	b8004000 	.word	0xb8004000
 80030f8:	b4002000 	.word	0xb4002000
 80030fc:	20000004 	.word	0x20000004
 8003100:	053e2d63 	.word	0x053e2d63

08003104 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003106:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	f012 0f04 	tst.w	r2, #4
 800310e:	d031      	beq.n	8003174 <ADC_ConversionStop+0x70>
 8003110:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	f012 0f02 	tst.w	r2, #2
 8003118:	d107      	bne.n	800312a <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003120:	f022 0217 	bic.w	r2, r2, #23
 8003124:	f042 0210 	orr.w	r2, r2, #16
 8003128:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800312a:	f7ff f8b5 	bl	8002298 <HAL_GetTick>
 800312e:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f013 0f04 	tst.w	r3, #4
 8003138:	d106      	bne.n	8003148 <ADC_ConversionStop+0x44>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800313a:	2000      	movs	r0, #0
 800313c:	e01b      	b.n	8003176 <ADC_ConversionStop+0x72>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f013 0f04 	tst.w	r3, #4
 8003146:	d013      	beq.n	8003170 <ADC_ConversionStop+0x6c>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003148:	f7ff f8a6 	bl	8002298 <HAL_GetTick>
 800314c:	1b43      	subs	r3, r0, r5
 800314e:	2b02      	cmp	r3, #2
 8003150:	d9f5      	bls.n	800313e <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f013 0f04 	tst.w	r3, #4
 800315a:	d0f0      	beq.n	800313e <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800315e:	f043 0310 	orr.w	r3, r3, #16
 8003162:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800316c:	2001      	movs	r0, #1
 800316e:	e002      	b.n	8003176 <ADC_ConversionStop+0x72>
  return HAL_OK;
 8003170:	2000      	movs	r0, #0
 8003172:	e000      	b.n	8003176 <ADC_ConversionStop+0x72>
 8003174:	2000      	movs	r0, #0
}
 8003176:	bd38      	pop	{r3, r4, r5, pc}

08003178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003178:	b530      	push	{r4, r5, lr}
 800317a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003180:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f012 0f01 	tst.w	r2, #1
 8003188:	d163      	bne.n	8003252 <ADC_Enable+0xda>
 800318a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	4a32      	ldr	r2, [pc, #200]	; (8003258 <ADC_Enable+0xe0>)
 8003190:	4211      	tst	r1, r2
 8003192:	d123      	bne.n	80031dc <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800319a:	f022 0217 	bic.w	r2, r2, #23
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <ADC_Enable+0xe4>)
 80031a6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80031aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80031ae:	d010      	beq.n	80031d2 <ADC_Enable+0x5a>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <ADC_Enable+0xe8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <ADC_Enable+0xec>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80031c0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80031c2:	9b01      	ldr	r3, [sp, #4]
 80031c4:	b12b      	cbz	r3, 80031d2 <ADC_Enable+0x5a>
      {
        wait_loop_index--;
 80031c6:	9b01      	ldr	r3, [sp, #4]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80031cc:	9b01      	ldr	r3, [sp, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <ADC_Enable+0x4e>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80031d2:	7e63      	ldrb	r3, [r4, #25]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10b      	bne.n	80031f0 <ADC_Enable+0x78>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	e03b      	b.n	8003254 <ADC_Enable+0xdc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031de:	f043 0310 	orr.w	r3, r3, #16
 80031e2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
 80031ee:	e031      	b.n	8003254 <ADC_Enable+0xdc>
      tickstart = HAL_GetTick();
 80031f0:	f7ff f852 	bl	8002298 <HAL_GetTick>
 80031f4:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f012 0f01 	tst.w	r2, #1
 80031fe:	d006      	beq.n	800320e <ADC_Enable+0x96>
  return HAL_OK;
 8003200:	2000      	movs	r0, #0
 8003202:	e027      	b.n	8003254 <ADC_Enable+0xdc>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f012 0f01 	tst.w	r2, #1
 800320c:	d11f      	bne.n	800324e <ADC_Enable+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	f012 0f01 	tst.w	r2, #1
 8003214:	d107      	bne.n	8003226 <ADC_Enable+0xae>
  MODIFY_REG(ADCx->CR,
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800321c:	f022 0217 	bic.w	r2, r2, #23
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003226:	f7ff f837 	bl	8002298 <HAL_GetTick>
 800322a:	1b40      	subs	r0, r0, r5
 800322c:	2802      	cmp	r0, #2
 800322e:	d9e9      	bls.n	8003204 <ADC_Enable+0x8c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f013 0f01 	tst.w	r3, #1
 8003238:	d1e4      	bne.n	8003204 <ADC_Enable+0x8c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800324a:	2001      	movs	r0, #1
 800324c:	e002      	b.n	8003254 <ADC_Enable+0xdc>
  return HAL_OK;
 800324e:	2000      	movs	r0, #0
 8003250:	e000      	b.n	8003254 <ADC_Enable+0xdc>
 8003252:	2000      	movs	r0, #0
}
 8003254:	b003      	add	sp, #12
 8003256:	bd30      	pop	{r4, r5, pc}
 8003258:	80000017 	.word	0x80000017
 800325c:	40012000 	.word	0x40012000
 8003260:	20000004 	.word	0x20000004
 8003264:	053e2d63 	.word	0x053e2d63

08003268 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003268:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f013 0f04 	tst.w	r3, #4
 8003270:	d128      	bne.n	80032c4 <HAL_ADC_Start+0x5c>
{
 8003272:	b510      	push	{r4, lr}
 8003274:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003276:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800327a:	2b01      	cmp	r3, #1
 800327c:	d024      	beq.n	80032c8 <HAL_ADC_Start+0x60>
 800327e:	2301      	movs	r3, #1
 8003280:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003284:	f7ff ff78 	bl	8003178 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003288:	b9c0      	cbnz	r0, 80032bc <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800328a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800328c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800329a:	2300      	movs	r3, #0
 800329c:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	211c      	movs	r1, #28
 80032a2:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80032a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032a8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80032aa:	6893      	ldr	r3, [r2, #8]
 80032ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032b0:	f023 0317 	bic.w	r3, r3, #23
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6093      	str	r3, [r2, #8]
}
 80032ba:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80032bc:	2300      	movs	r3, #0
 80032be:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80032c2:	e7fa      	b.n	80032ba <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80032c4:	2002      	movs	r0, #2
}
 80032c6:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80032c8:	2002      	movs	r0, #2
 80032ca:	e7f6      	b.n	80032ba <HAL_ADC_Start+0x52>

080032cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032ce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032d0:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	f012 0f01 	tst.w	r2, #1
 80032d8:	d043      	beq.n	8003362 <ADC_Disable+0x96>
 80032da:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80032dc:	f011 0f02 	tst.w	r1, #2
 80032e0:	d141      	bne.n	8003366 <ADC_Disable+0x9a>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	f002 0205 	and.w	r2, r2, #5
 80032e8:	2a01      	cmp	r2, #1
 80032ea:	d009      	beq.n	8003300 <ADC_Disable+0x34>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6583      	str	r3, [r0, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	65c3      	str	r3, [r0, #92]	; 0x5c

      return HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
 80032fe:	e031      	b.n	8003364 <ADC_Disable+0x98>
  MODIFY_REG(ADCx->CR,
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003306:	f022 0217 	bic.w	r2, r2, #23
 800330a:	f042 0202 	orr.w	r2, r2, #2
 800330e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003310:	6803      	ldr	r3, [r0, #0]
 8003312:	2203      	movs	r2, #3
 8003314:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003316:	f7fe ffbf 	bl	8002298 <HAL_GetTick>
 800331a:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f013 0f01 	tst.w	r3, #1
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003324:	bf08      	it	eq
 8003326:	2000      	moveq	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003328:	d105      	bne.n	8003336 <ADC_Disable+0x6a>
 800332a:	e01b      	b.n	8003364 <ADC_Disable+0x98>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f013 0f01 	tst.w	r3, #1
 8003334:	d013      	beq.n	800335e <ADC_Disable+0x92>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003336:	f7fe ffaf 	bl	8002298 <HAL_GetTick>
 800333a:	1b40      	subs	r0, r0, r5
 800333c:	2802      	cmp	r0, #2
 800333e:	d9f5      	bls.n	800332c <ADC_Disable+0x60>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f013 0f01 	tst.w	r3, #1
 8003348:	d0f0      	beq.n	800332c <ADC_Disable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800334c:	f043 0310 	orr.w	r3, r3, #16
 8003350:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
 800335c:	e002      	b.n	8003364 <ADC_Disable+0x98>
  return HAL_OK;
 800335e:	2000      	movs	r0, #0
 8003360:	e000      	b.n	8003364 <ADC_Disable+0x98>
 8003362:	2000      	movs	r0, #0
}
 8003364:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003366:	2000      	movs	r0, #0
 8003368:	e7fc      	b.n	8003364 <ADC_Disable+0x98>
	...

0800336c <HAL_ADC_DeInit>:
{
 800336c:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800336e:	2800      	cmp	r0, #0
 8003370:	d056      	beq.n	8003420 <HAL_ADC_DeInit+0xb4>
 8003372:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003374:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800337c:	f7ff fec2 	bl	8003104 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003380:	4606      	mov	r6, r0
 8003382:	2800      	cmp	r0, #0
 8003384:	d03d      	beq.n	8003402 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	6853      	ldr	r3, [r2, #4]
 800338a:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f240 329f 	movw	r2, #927	; 0x39f
 800339a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	68d1      	ldr	r1, [r2, #12]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_ADC_DeInit+0xb8>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	6913      	ldr	r3, [r2, #16]
 80033aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033ae:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	6953      	ldr	r3, [r2, #20]
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	6a13      	ldr	r3, [r2, #32]
 80033be:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80033c2:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80033c8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80033cc:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80033d2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80033d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033dc:	2500      	movs	r5, #0
 80033de:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80033e0:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_ADC_DeInit+0xbc>)
 80033e2:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80033e6:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80033ea:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7fd febc 	bl	800116c <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80033f4:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80033f6:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80033f8:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80033fa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80033fe:	4630      	mov	r0, r6
 8003400:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff62 	bl	80032cc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003408:	4606      	mov	r6, r0
 800340a:	b908      	cbnz	r0, 8003410 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 800340c:	2301      	movs	r3, #1
 800340e:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003410:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003412:	6893      	ldr	r3, [r2, #8]
 8003414:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003418:	f023 0317 	bic.w	r3, r3, #23
 800341c:	6093      	str	r3, [r2, #8]
}
 800341e:	e7b2      	b.n	8003386 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003420:	2601      	movs	r6, #1
 8003422:	e7ec      	b.n	80033fe <HAL_ADC_DeInit+0x92>
 8003424:	833e0200 	.word	0x833e0200
 8003428:	40012000 	.word	0x40012000

0800342c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800342c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003430:	2b01      	cmp	r3, #1
 8003432:	d019      	beq.n	8003468 <HAL_ADC_Stop+0x3c>
{
 8003434:	b510      	push	{r4, lr}
 8003436:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003438:	2301      	movs	r3, #1
 800343a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800343e:	f7ff fe61 	bl	8003104 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003442:	b118      	cbz	r0, 800344c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003444:	2300      	movs	r3, #0
 8003446:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800344a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800344c:	4620      	mov	r0, r4
 800344e:	f7ff ff3d 	bl	80032cc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003452:	2800      	cmp	r0, #0
 8003454:	d1f6      	bne.n	8003444 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	65a3      	str	r3, [r4, #88]	; 0x58
 8003466:	e7ed      	b.n	8003444 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003468:	2002      	movs	r0, #2
}
 800346a:	4770      	bx	lr

0800346c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003470:	2300      	movs	r3, #0
 8003472:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003474:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003478:	2b01      	cmp	r3, #1
 800347a:	f000 8097 	beq.w	80035ac <HAL_ADCEx_Calibration_Start+0x140>
 800347e:	4604      	mov	r4, r0
 8003480:	2301      	movs	r3, #1
 8003482:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003486:	f7ff ff21 	bl	80032cc <ADC_Disable>
 800348a:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	f012 0201 	ands.w	r2, r2, #1
 8003494:	d009      	beq.n	80034aa <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800349e:	2300      	movs	r3, #0
 80034a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80034a4:	4628      	mov	r0, r5
 80034a6:	b003      	add	sp, #12
 80034a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80034aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034ac:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80034b0:	f041 0102 	orr.w	r1, r1, #2
 80034b4:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80034b6:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80034be:	f021 0103 	bic.w	r1, r1, #3
 80034c2:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80034c4:	4610      	mov	r0, r2
      LL_ADC_StartCalibration(hadc->Instance);
 80034c6:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034c8:	688b      	ldr	r3, [r1, #8]
 80034ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	f023 0317 	bic.w	r3, r3, #23
 80034d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d6:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034d8:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034da:	688b      	ldr	r3, [r1, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db39      	blt.n	8003554 <HAL_ADCEx_Calibration_Start+0xe8>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80034e0:	f8d1 30b4 	ldr.w	r3, [r1, #180]	; 0xb4
 80034e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80034e8:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80034ea:	3201      	adds	r2, #1
 80034ec:	2a08      	cmp	r2, #8
 80034ee:	d1ea      	bne.n	80034c6 <HAL_ADCEx_Calibration_Start+0x5a>
  MODIFY_REG(ADCx->CR,
 80034f0:	688b      	ldr	r3, [r1, #8]
 80034f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f6:	f023 0317 	bic.w	r3, r3, #23
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003500:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003502:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8003506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800350a:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800350e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003512:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003514:	6893      	ldr	r3, [r2, #8]
 8003516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800351a:	f023 0317 	bic.w	r3, r3, #23
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003524:	f7fe feb8 	bl	8002298 <HAL_GetTick>
 8003528:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800352a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	f012 0f01 	tst.w	r2, #1
 8003532:	d130      	bne.n	8003596 <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003534:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003536:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 800353a:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 800353e:	0436      	lsls	r6, r6, #16
 8003540:	0c36      	lsrs	r6, r6, #16
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003542:	4316      	orrs	r6, r2
 8003544:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	65a3      	str	r3, [r4, #88]	; 0x58
 8003552:	e7a4      	b.n	800349e <HAL_ADCEx_Calibration_Start+0x32>
        wait_loop_index++;
 8003554:	9b01      	ldr	r3, [sp, #4]
 8003556:	3301      	adds	r3, #1
 8003558:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003560:	d3bb      	bcc.n	80034da <HAL_ADCEx_Calibration_Start+0x6e>
          ADC_STATE_CLR_SET(hadc->State,
 8003562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003564:	f023 0312 	bic.w	r3, r3, #18
 8003568:	f043 0310 	orr.w	r3, r3, #16
 800356c:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 800356e:	2300      	movs	r3, #0
 8003570:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003574:	2501      	movs	r5, #1
 8003576:	e795      	b.n	80034a4 <HAL_ADCEx_Calibration_Start+0x38>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f013 0f01 	tst.w	r3, #1
 8003580:	d00e      	beq.n	80035a0 <HAL_ADCEx_Calibration_Start+0x134>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003584:	f043 0310 	orr.w	r3, r3, #16
 8003588:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003592:	2501      	movs	r5, #1
 8003594:	e786      	b.n	80034a4 <HAL_ADCEx_Calibration_Start+0x38>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003596:	f7fe fe7f 	bl	8002298 <HAL_GetTick>
 800359a:	1bc3      	subs	r3, r0, r7
 800359c:	2b02      	cmp	r3, #2
 800359e:	d8eb      	bhi.n	8003578 <HAL_ADCEx_Calibration_Start+0x10c>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	f012 0f01 	tst.w	r2, #1
 80035a8:	d1f5      	bne.n	8003596 <HAL_ADCEx_Calibration_Start+0x12a>
 80035aa:	e7c3      	b.n	8003534 <HAL_ADCEx_Calibration_Start+0xc8>
  __HAL_LOCK(hadc);
 80035ac:	2502      	movs	r5, #2
 80035ae:	e779      	b.n	80034a4 <HAL_ADCEx_Calibration_Start+0x38>

080035b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4907      	ldr	r1, [pc, #28]	; (80035d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	0203      	lsls	r3, r0, #8
 80035b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035be:	0412      	lsls	r2, r2, #16
 80035c0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_NVIC_SetPriority+0x64>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035de:	f1c3 0c07 	rsb	ip, r3, #7
 80035e2:	f1bc 0f04 	cmp.w	ip, #4
 80035e6:	bf28      	it	cs
 80035e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ec:	f103 0e04 	add.w	lr, r3, #4
 80035f0:	f1be 0f06 	cmp.w	lr, #6
 80035f4:	bf8c      	ite	hi
 80035f6:	3b03      	subhi	r3, #3
 80035f8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fa:	f04f 3eff 	mov.w	lr, #4294967295
 80035fe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003602:	ea21 010c 	bic.w	r1, r1, ip
 8003606:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003608:	fa0e fe03 	lsl.w	lr, lr, r3
 800360c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003612:	2800      	cmp	r0, #0
 8003614:	db09      	blt.n	800362a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	0109      	lsls	r1, r1, #4
 8003618:	b2c9      	uxtb	r1, r1
 800361a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800361e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003622:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003626:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	f000 000f 	and.w	r0, r0, #15
 800362e:	0109      	lsls	r1, r1, #4
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	4b02      	ldr	r3, [pc, #8]	; (800363c <HAL_NVIC_SetPriority+0x68>)
 8003634:	5419      	strb	r1, [r3, r0]
 8003636:	e7f6      	b.n	8003626 <HAL_NVIC_SetPriority+0x52>
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	e000ed14 	.word	0xe000ed14

08003640 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003640:	2800      	cmp	r0, #0
 8003642:	db07      	blt.n	8003654 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003644:	0941      	lsrs	r1, r0, #5
 8003646:	f000 001f 	and.w	r0, r0, #31
 800364a:	2301      	movs	r3, #1
 800364c:	4083      	lsls	r3, r0
 800364e:	4a02      	ldr	r2, [pc, #8]	; (8003658 <HAL_NVIC_EnableIRQ+0x18>)
 8003650:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e100 	.word	0xe000e100

0800365c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800365c:	2800      	cmp	r0, #0
 800365e:	db0c      	blt.n	800367a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003660:	0943      	lsrs	r3, r0, #5
 8003662:	f000 001f 	and.w	r0, r0, #31
 8003666:	2201      	movs	r2, #1
 8003668:	4082      	lsls	r2, r0
 800366a:	3320      	adds	r3, #32
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_NVIC_DisableIRQ+0x20>)
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003672:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003676:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003682:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003684:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003688:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800368c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800368e:	b124      	cbz	r4, 800369a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003690:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003692:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003696:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800369a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800369c:	f004 0c1c 	and.w	ip, r4, #28
 80036a0:	2401      	movs	r4, #1
 80036a2:	fa04 f40c 	lsl.w	r4, r4, ip
 80036a6:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80036aa:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036ae:	6804      	ldr	r4, [r0, #0]
 80036b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b2:	6883      	ldr	r3, [r0, #8]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d005      	beq.n	80036c4 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80036b8:	6803      	ldr	r3, [r0, #0]
 80036ba:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80036bc:	6803      	ldr	r3, [r0, #0]
 80036be:	60da      	str	r2, [r3, #12]
  }
}
 80036c0:	bc10      	pop	{r4}
 80036c2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80036c4:	6803      	ldr	r3, [r0, #0]
 80036c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80036c8:	6803      	ldr	r3, [r0, #0]
 80036ca:	60d9      	str	r1, [r3, #12]
 80036cc:	e7f8      	b.n	80036c0 <DMA_SetConfig+0x40>
	...

080036d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036d0:	6803      	ldr	r3, [r0, #0]
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d816      	bhi.n	8003706 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80036d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80036da:	f022 0203 	bic.w	r2, r2, #3
 80036de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80036e2:	f502 3202 	add.w	r2, r2, #133120	; 0x20800

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3b08      	subs	r3, #8
 80036ea:	490e      	ldr	r1, [pc, #56]	; (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80036ec:	fba1 1303 	umull	r1, r3, r1, r3
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	6482      	str	r2, [r0, #72]	; 0x48
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036f4:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80036f6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2201      	movs	r2, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003704:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003706:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003708:	f022 0103 	bic.w	r1, r2, #3
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800370e:	440a      	add	r2, r1
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b08      	subs	r3, #8
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003716:	fba1 1303 	umull	r1, r3, r1, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	3307      	adds	r3, #7
 800371e:	e7e8      	b.n	80036f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x22>
 8003720:	40020407 	.word	0x40020407
 8003724:	cccccccd 	.word	0xcccccccd
 8003728:	40020880 	.word	0x40020880
 800372c:	4002081c 	.word	0x4002081c

08003730 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003730:	2800      	cmp	r0, #0
 8003732:	d066      	beq.n	8003802 <HAL_DMA_Init+0xd2>
{
 8003734:	b510      	push	{r4, lr}
 8003736:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_DMA_Init+0xd8>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d844      	bhi.n	80037ca <HAL_DMA_Init+0x9a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_DMA_Init+0xdc>)
 8003742:	4413      	add	r3, r2
 8003744:	4932      	ldr	r1, [pc, #200]	; (8003810 <HAL_DMA_Init+0xe0>)
 8003746:	fba1 1303 	umull	r1, r3, r1, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800374e:	4931      	ldr	r1, [pc, #196]	; (8003814 <HAL_DMA_Init+0xe4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003750:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003752:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003764:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	68e0      	ldr	r0, [r4, #12]
 800376e:	4303      	orrs	r3, r0
 8003770:	6920      	ldr	r0, [r4, #16]
 8003772:	4303      	orrs	r3, r0
 8003774:	6960      	ldr	r0, [r4, #20]
 8003776:	4303      	orrs	r3, r0
 8003778:	69a0      	ldr	r0, [r4, #24]
 800377a:	4303      	orrs	r3, r0
 800377c:	69e0      	ldr	r0, [r4, #28]
 800377e:	4303      	orrs	r3, r0
 8003780:	6a20      	ldr	r0, [r4, #32]
 8003782:	4303      	orrs	r3, r0
 8003784:	430b      	orrs	r3, r1
 8003786:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff ffa1 	bl	80036d0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003794:	bf04      	itt	eq
 8003796:	2300      	moveq	r3, #0
 8003798:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800379a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037a8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037aa:	6863      	ldr	r3, [r4, #4]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	2a03      	cmp	r2, #3
 80037b0:	d914      	bls.n	80037dc <HAL_DMA_Init+0xac>
    hdma->DMAmuxRequestGen = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80037b6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	2000      	movs	r0, #0
 80037bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	2301      	movs	r3, #1
 80037c0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80037c4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80037c8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_DMA_Init+0xe8>)
 80037cc:	4413      	add	r3, r2
 80037ce:	4910      	ldr	r1, [pc, #64]	; (8003810 <HAL_DMA_Init+0xe0>)
 80037d0:	fba1 1303 	umull	r1, r3, r1, r3
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4910      	ldr	r1, [pc, #64]	; (800381c <HAL_DMA_Init+0xec>)
 80037da:	e7b9      	b.n	8003750 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <HAL_DMA_Init+0xf0>)
 80037e2:	441a      	add	r2, r3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_DMA_Init+0xf4>)
 80037ea:	65a1      	str	r1, [r4, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037ec:	3b01      	subs	r3, #1
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	e7db      	b.n	80037ba <HAL_DMA_Init+0x8a>
    return HAL_ERROR;
 8003802:	2001      	movs	r0, #1
}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40020407 	.word	0x40020407
 800380c:	bffdfff8 	.word	0xbffdfff8
 8003810:	cccccccd 	.word	0xcccccccd
 8003814:	40020000 	.word	0x40020000
 8003818:	bffdfbf8 	.word	0xbffdfbf8
 800381c:	40020400 	.word	0x40020400
 8003820:	1000823f 	.word	0x1000823f
 8003824:	40020940 	.word	0x40020940

08003828 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003828:	2800      	cmp	r0, #0
 800382a:	d051      	beq.n	80038d0 <HAL_DMA_DeInit+0xa8>
{
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003830:	6802      	ldr	r2, [r0, #0]
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800383a:	6802      	ldr	r2, [r0, #0]
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_DMA_DeInit+0xac>)
 800383e:	429a      	cmp	r2, r3
 8003840:	d82c      	bhi.n	800389c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_DMA_DeInit+0xb0>)
 8003844:	4413      	add	r3, r2
 8003846:	4925      	ldr	r1, [pc, #148]	; (80038dc <HAL_DMA_DeInit+0xb4>)
 8003848:	fba1 1303 	umull	r1, r3, r1, r3
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003850:	4923      	ldr	r1, [pc, #140]	; (80038e0 <HAL_DMA_DeInit+0xb8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003852:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003854:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003856:	2500      	movs	r5, #0
 8003858:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800385a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800385c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800385e:	f003 021c 	and.w	r2, r3, #28
 8003862:	2301      	movs	r3, #1
 8003864:	4093      	lsls	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff ff31 	bl	80036d0 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800386e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003870:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003872:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003874:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003876:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	2a03      	cmp	r2, #3
 800387e:	d916      	bls.n	80038ae <HAL_DMA_DeInit+0x86>
  hdma->DMAmuxRequestGen = NULL;
 8003880:	2000      	movs	r0, #0
 8003882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003884:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003886:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003888:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800388a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800388c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800388e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003892:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003896:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800389a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_DMA_DeInit+0xbc>)
 800389e:	4413      	add	r3, r2
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_DMA_DeInit+0xb4>)
 80038a2:	fba1 1303 	umull	r1, r3, r1, r3
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	490f      	ldr	r1, [pc, #60]	; (80038e8 <HAL_DMA_DeInit+0xc0>)
 80038ac:	e7d1      	b.n	8003852 <HAL_DMA_DeInit+0x2a>
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_DMA_DeInit+0xc4>)
 80038b4:	441a      	add	r2, r3
 80038b6:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038b8:	490d      	ldr	r1, [pc, #52]	; (80038f0 <HAL_DMA_DeInit+0xc8>)
 80038ba:	65a1      	str	r1, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038bc:	3b01      	subs	r3, #1
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038c6:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e7d7      	b.n	8003880 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
}
 80038d2:	4770      	bx	lr
 80038d4:	40020407 	.word	0x40020407
 80038d8:	bffdfff8 	.word	0xbffdfff8
 80038dc:	cccccccd 	.word	0xcccccccd
 80038e0:	40020000 	.word	0x40020000
 80038e4:	bffdfbf8 	.word	0xbffdfbf8
 80038e8:	40020400 	.word	0x40020400
 80038ec:	1000823f 	.word	0x1000823f
 80038f0:	40020940 	.word	0x40020940

080038f4 <HAL_DMA_Start_IT>:
{
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80038f8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80038fc:	2801      	cmp	r0, #1
 80038fe:	d043      	beq.n	8003988 <HAL_DMA_Start_IT+0x94>
 8003900:	2001      	movs	r0, #1
 8003902:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003906:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800390a:	b2c0      	uxtb	r0, r0
 800390c:	2801      	cmp	r0, #1
 800390e:	d006      	beq.n	800391e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003914:	2300      	movs	r3, #0
 8003916:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800391a:	2001      	movs	r0, #1
}
 800391c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800391e:	2002      	movs	r0, #2
 8003920:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003924:	2000      	movs	r0, #0
 8003926:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003928:	6825      	ldr	r5, [r4, #0]
 800392a:	6828      	ldr	r0, [r5, #0]
 800392c:	f020 0001 	bic.w	r0, r0, #1
 8003930:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff fea4 	bl	8003680 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003938:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800393a:	b1d3      	cbz	r3, 8003972 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393c:	6822      	ldr	r2, [r4, #0]
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	f043 030e 	orr.w	r3, r3, #14
 8003944:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003946:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800394e:	d003      	beq.n	8003958 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003956:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003958:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800395a:	b11b      	cbz	r3, 8003964 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003962:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e7d4      	b.n	800391c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f023 0304 	bic.w	r3, r3, #4
 800397a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f043 030a 	orr.w	r3, r3, #10
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e7de      	b.n	8003946 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003988:	2002      	movs	r0, #2
 800398a:	e7c7      	b.n	800391c <HAL_DMA_Start_IT+0x28>

0800398c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800398c:	4603      	mov	r3, r0
 800398e:	2800      	cmp	r0, #0
 8003990:	d034      	beq.n	80039fc <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003992:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	2a02      	cmp	r2, #2
 800399a:	d006      	beq.n	80039aa <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	2204      	movs	r2, #4
 800399e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80039a0:	2200      	movs	r2, #0
 80039a2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
 80039a8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039aa:	6801      	ldr	r1, [r0, #0]
 80039ac:	680a      	ldr	r2, [r1, #0]
 80039ae:	f022 020e 	bic.w	r2, r2, #14
 80039b2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039b4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80039b6:	680a      	ldr	r2, [r1, #0]
 80039b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039bc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80039be:	6801      	ldr	r1, [r0, #0]
 80039c0:	680a      	ldr	r2, [r1, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80039ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039cc:	f002 011c 	and.w	r1, r2, #28
 80039d0:	2201      	movs	r2, #1
 80039d2:	408a      	lsls	r2, r1
 80039d4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039da:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80039dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039de:	b132      	cbz	r2, 80039ee <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80039e6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80039ec:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80039fa:	4770      	bx	lr
    return HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
}
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_Abort_IT>:
{
 8003a00:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a02:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003a10:	2001      	movs	r0, #1
}
 8003a12:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a14:	6802      	ldr	r2, [r0, #0]
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	f023 030e 	bic.w	r3, r3, #14
 8003a1c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	6802      	ldr	r2, [r0, #0]
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a28:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a36:	f003 021c 	and.w	r2, r3, #28
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003a42:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003a44:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003a46:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a48:	b133      	cbz	r3, 8003a58 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a50:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a52:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a54:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003a56:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003a64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a66:	b113      	cbz	r3, 8003a6e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003a68:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e7d1      	b.n	8003a12 <HAL_DMA_Abort_IT+0x12>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e7cf      	b.n	8003a12 <HAL_DMA_Abort_IT+0x12>
	...

08003a74 <HAL_DMA_IRQHandler>:
{
 8003a74:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a78:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003a7a:	6804      	ldr	r4, [r0, #0]
 8003a7c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a80:	f003 031c 	and.w	r3, r3, #28
 8003a84:	2204      	movs	r2, #4
 8003a86:	409a      	lsls	r2, r3
 8003a88:	420a      	tst	r2, r1
 8003a8a:	d015      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x44>
 8003a8c:	f015 0f04 	tst.w	r5, #4
 8003a90:	d012      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	f013 0f20 	tst.w	r3, #32
 8003a98:	d103      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	f023 0304 	bic.w	r3, r3, #4
 8003aa0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003aa2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003aa4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003aa6:	f003 021c 	and.w	r2, r3, #28
 8003aaa:	2304      	movs	r3, #4
 8003aac:	4093      	lsls	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003ab0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ab2:	b103      	cbz	r3, 8003ab6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003ab4:	4798      	blx	r3
}
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ab8:	2202      	movs	r2, #2
 8003aba:	409a      	lsls	r2, r3
 8003abc:	420a      	tst	r2, r1
 8003abe:	d023      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x94>
 8003ac0:	f015 0f02 	tst.w	r5, #2
 8003ac4:	d020      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x94>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	f013 0f20 	tst.w	r3, #32
 8003acc:	d106      	bne.n	8003adc <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_DMA_IRQHandler+0xd4>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	f04f 0302 	mov.w	r3, #2
 8003aec:	fa03 f302 	lsl.w	r3, r3, r2
 8003af0:	bf8c      	ite	hi
 8003af2:	4a16      	ldrhi	r2, [pc, #88]	; (8003b4c <HAL_DMA_IRQHandler+0xd8>)
 8003af4:	4a16      	ldrls	r2, [pc, #88]	; (8003b50 <HAL_DMA_IRQHandler+0xdc>)
 8003af6:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003af8:	2300      	movs	r3, #0
 8003afa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003afe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0d8      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003b04:	4798      	blx	r3
 8003b06:	e7d6      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b08:	2208      	movs	r2, #8
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	420b      	tst	r3, r1
 8003b10:	d0d1      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
 8003b12:	f015 0f08 	tst.w	r5, #8
 8003b16:	d0ce      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f023 030e 	bic.w	r3, r3, #14
 8003b1e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003b22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b24:	f003 031c 	and.w	r3, r3, #28
 8003b28:	2201      	movs	r2, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b30:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003b32:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003b36:	2300      	movs	r3, #0
 8003b38:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003b3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0b9      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003b42:	4798      	blx	r3
  return;
 8003b44:	e7b7      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x42>
 8003b46:	bf00      	nop
 8003b48:	40020080 	.word	0x40020080
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020000 	.word	0x40020000

08003b54 <HAL_DMA_GetState>:
  return hdma->State;
 8003b54:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8003b58:	4770      	bx	lr

08003b5a <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003b5a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d122      	bne.n	8003baa <HAL_DMAEx_ConfigMuxSync+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003b64:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMAEx_ConfigMuxSync+0x58>
{
 8003b6c:	b430      	push	{r4, r5}
    __HAL_LOCK(hdma);
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003b74:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	68cb      	ldr	r3, [r1, #12]
 8003b7a:	f103 3cff 	add.w	ip, r3, #4294967295
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	684d      	ldr	r5, [r1, #4]
 8003b82:	432b      	orrs	r3, r5
 8003b84:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
 8003b88:	f891 c008 	ldrb.w	ip, [r1, #8]
 8003b8c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003b90:	7a49      	ldrb	r1, [r1, #9]
 8003b92:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	6023      	str	r3, [r4, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 8003ba4:	4618      	mov	r0, r3
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
 8003ba6:	bc30      	pop	{r4, r5}
 8003ba8:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
 8003bb0:	4770      	bx	lr
    __HAL_LOCK(hdma);
 8003bb2:	2002      	movs	r0, #2
}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003bba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003bc0:	421a      	tst	r2, r3
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bc4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003bd0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003bd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003bd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bda:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bde:	b103      	cbz	r3, 8003be2 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003be0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003be2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003be4:	b19b      	cbz	r3, 8003c0e <HAL_DMAEx_MUX_IRQHandler+0x58>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003be6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003be8:	6811      	ldr	r1, [r2, #0]
 8003bea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bec:	4211      	tst	r1, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMAEx_MUX_IRQHandler+0x58>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bfa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bfc:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003bfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c04:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c08:	b10b      	cbz	r3, 8003c0e <HAL_DMAEx_MUX_IRQHandler+0x58>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4798      	blx	r3
      }
    }
  }
}
 8003c0e:	bd10      	pop	{r4, pc}

08003c10 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8003c10:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8003c12:	460b      	mov	r3, r1

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003c14:	4c0b      	ldr	r4, [pc, #44]	; (8003c44 <FLASH_Program_Fast+0x34>)
 8003c16:	6962      	ldr	r2, [r4, #20]
 8003c18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c1c:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1e:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003c22:	b672      	cpsid	i
 8003c24:	f501 7c80 	add.w	ip, r1, #256	; 0x100
 8003c28:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8003c2e:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8003c30:	4563      	cmp	r3, ip
 8003c32:	d1fa      	bne.n	8003c2a <FLASH_Program_Fast+0x1a>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003c34:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <FLASH_Program_Fast+0x34>)
 8003c36:	6913      	ldr	r3, [r2, #16]
 8003c38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c3c:	d1fb      	bne.n	8003c36 <FLASH_Program_Fast+0x26>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	f38e 8810 	msr	PRIMASK, lr
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003c42:	bd10      	pop	{r4, pc}
 8003c44:	58004000 	.word	0x58004000

08003c48 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_FLASH_Unlock+0x20>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db01      	blt.n	8003c54 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2000      	movs	r0, #0
}
 8003c52:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_FLASH_Unlock+0x20>)
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <HAL_FLASH_Unlock+0x24>)
 8003c58:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c5a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003c5e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c60:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	0fc0      	lsrs	r0, r0, #31
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	58004000 	.word	0x58004000
 8003c6c:	45670123 	.word	0x45670123

08003c70 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_FLASH_Lock+0x14>)
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c78:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003c7a:	6958      	ldr	r0, [r3, #20]
}
 8003c7c:	43c0      	mvns	r0, r0
 8003c7e:	0fc0      	lsrs	r0, r0, #31
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	58004000 	.word	0x58004000

08003c88 <FLASH_WaitForLastOperation>:
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003c8c:	f7fe fb04 	bl	8002298 <HAL_GetTick>
 8003c90:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003c92:	4e16      	ldr	r6, [pc, #88]	; (8003cec <FLASH_WaitForLastOperation+0x64>)
 8003c94:	6933      	ldr	r3, [r6, #16]
 8003c96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c9a:	d006      	beq.n	8003caa <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c9c:	f7fe fafc 	bl	8002298 <HAL_GetTick>
 8003ca0:	1b00      	subs	r0, r0, r4
 8003ca2:	42a8      	cmp	r0, r5
 8003ca4:	d3f6      	bcc.n	8003c94 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8003ca6:	2003      	movs	r0, #3
}
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
  error = FLASH->SR;
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <FLASH_WaitForLastOperation+0x64>)
 8003cac:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003cae:	f013 0f01 	tst.w	r3, #1
 8003cb2:	d002      	beq.n	8003cba <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <FLASH_WaitForLastOperation+0x64>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003cba:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d10b      	bne.n	8003cda <FLASH_WaitForLastOperation+0x52>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003cc2:	4e0a      	ldr	r6, [pc, #40]	; (8003cec <FLASH_WaitForLastOperation+0x64>)
 8003cc4:	6933      	ldr	r3, [r6, #16]
 8003cc6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003cca:	d00c      	beq.n	8003ce6 <FLASH_WaitForLastOperation+0x5e>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003ccc:	f7fe fae4 	bl	8002298 <HAL_GetTick>
 8003cd0:	1b00      	subs	r0, r0, r4
 8003cd2:	42a8      	cmp	r0, r5
 8003cd4:	d3f6      	bcc.n	8003cc4 <FLASH_WaitForLastOperation+0x3c>
      return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e7e6      	b.n	8003ca8 <FLASH_WaitForLastOperation+0x20>
  __HAL_FLASH_CLEAR_FLAG(error);
 8003cda:	4a04      	ldr	r2, [pc, #16]	; (8003cec <FLASH_WaitForLastOperation+0x64>)
 8003cdc:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <FLASH_WaitForLastOperation+0x68>)
 8003ce0:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	e7e0      	b.n	8003ca8 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7de      	b.n	8003ca8 <FLASH_WaitForLastOperation+0x20>
 8003cea:	bf00      	nop
 8003cec:	58004000 	.word	0x58004000
 8003cf0:	200005cc 	.word	0x200005cc

08003cf4 <HAL_FLASH_Program>:
{
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_FLASH_Program+0x64>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d029      	beq.n	8003d54 <HAL_FLASH_Program+0x60>
 8003d00:	4604      	mov	r4, r0
 8003d02:	460d      	mov	r5, r1
 8003d04:	4616      	mov	r6, r2
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_FLASH_Program+0x64>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d14:	f7ff ffb8 	bl	8003c88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d18:	b970      	cbnz	r0, 8003d38 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003d1a:	2c01      	cmp	r4, #1
 8003d1c:	d010      	beq.n	8003d40 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4628      	mov	r0, r5
 8003d22:	f7ff ff75 	bl	8003c10 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d2a:	f7ff ffad 	bl	8003c88 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003d2e:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <HAL_FLASH_Program+0x68>)
 8003d30:	6953      	ldr	r3, [r2, #20]
 8003d32:	ea23 0304 	bic.w	r3, r3, r4
 8003d36:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_FLASH_Program+0x64>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
}
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <HAL_FLASH_Program+0x68>)
 8003d42:	6953      	ldr	r3, [r2, #20]
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8003d4a:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d4c:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003d50:	606f      	str	r7, [r5, #4]
}
 8003d52:	e7e8      	b.n	8003d26 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003d54:	2002      	movs	r0, #2
 8003d56:	e7f2      	b.n	8003d3e <HAL_FLASH_Program+0x4a>
 8003d58:	200005cc 	.word	0x200005cc
 8003d5c:	58004000 	.word	0x58004000

08003d60 <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <FLASH_PageErase+0x18>)
 8003d62:	6953      	ldr	r3, [r2, #20]
 8003d64:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003d68:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003d6c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003d70:	f040 0002 	orr.w	r0, r0, #2
 8003d74:	6150      	str	r0, [r2, #20]
#endif
}
 8003d76:	4770      	bx	lr
 8003d78:	58004000 	.word	0x58004000

08003d7c <HAL_FLASHEx_Erase>:
{
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_FLASHEx_Erase+0x9c>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d046      	beq.n	8003e14 <HAL_FLASHEx_Erase+0x98>
 8003d86:	4605      	mov	r5, r0
 8003d88:	460e      	mov	r6, r1
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_FLASHEx_Erase+0x9c>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d98:	f7ff ff76 	bl	8003c88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d133      	bne.n	8003e0a <HAL_FLASHEx_Erase+0x8e>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d018      	beq.n	8003dda <HAL_FLASHEx_Erase+0x5e>
      *PageError = 0xFFFFFFFFU;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003dae:	686c      	ldr	r4, [r5, #4]
 8003db0:	68ab      	ldr	r3, [r5, #8]
 8003db2:	4423      	add	r3, r4
 8003db4:	429c      	cmp	r4, r3
 8003db6:	d21e      	bcs.n	8003df6 <HAL_FLASHEx_Erase+0x7a>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003db8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
        FLASH_PageErase(index);
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7ff ffcf 	bl	8003d60 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7ff ff60 	bl	8003c88 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003dc8:	4601      	mov	r1, r0
 8003dca:	b998      	cbnz	r0, 8003df4 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003dcc:	3401      	adds	r4, #1
 8003dce:	686b      	ldr	r3, [r5, #4]
 8003dd0:	68aa      	ldr	r2, [r5, #8]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	d8f1      	bhi.n	8003dbc <HAL_FLASHEx_Erase+0x40>
 8003dd8:	e00d      	b.n	8003df6 <HAL_FLASHEx_Erase+0x7a>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003dda:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <HAL_FLASHEx_Erase+0xa0>)
 8003ddc:	6953      	ldr	r3, [r2, #20]
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dec:	f7ff ff4c 	bl	8003c88 <FLASH_WaitForLastOperation>
 8003df0:	4601      	mov	r1, r0
 8003df2:	e007      	b.n	8003e04 <HAL_FLASHEx_Erase+0x88>
          *PageError = index;
 8003df4:	6034      	str	r4, [r6, #0]
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_FLASHEx_Erase+0xa0>)
 8003df8:	6953      	ldr	r3, [r2, #20]
 8003dfa:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003dfe:	f023 0302 	bic.w	r3, r3, #2
 8003e02:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_FLASHEx_Erase+0xa0>)
 8003e06:	681a      	ldr	r2, [r3, #0]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003e08:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 8003e0a:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_FLASHEx_Erase+0x9c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
}
 8003e10:	4608      	mov	r0, r1
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003e14:	2102      	movs	r1, #2
 8003e16:	e7fb      	b.n	8003e10 <HAL_FLASHEx_Erase+0x94>
 8003e18:	200005cc 	.word	0x200005cc
 8003e1c:	58004000 	.word	0x58004000

08003e20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e20:	680b      	ldr	r3, [r1, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80bf 	beq.w	8003fa6 <HAL_GPIO_Init+0x186>
{
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8003e30:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e32:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e34:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003e38:	2607      	movs	r6, #7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e3a:	4c5b      	ldr	r4, [pc, #364]	; (8003fa8 <HAL_GPIO_Init+0x188>)
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e3c:	f04f 080f 	mov.w	r8, #15
 8003e40:	e04f      	b.n	8003ee2 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR;
 8003e42:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e44:	fa0e fa0c 	lsl.w	sl, lr, ip
 8003e48:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e4c:	68cb      	ldr	r3, [r1, #12]
 8003e4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003e52:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8003e56:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e58:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e5a:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e5e:	684b      	ldr	r3, [r1, #4]
 8003e60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e64:	4093      	lsls	r3, r2
 8003e66:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8003e68:	6043      	str	r3, [r0, #4]
 8003e6a:	e045      	b.n	8003ef8 <HAL_GPIO_Init+0xd8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e6c:	2700      	movs	r7, #0
 8003e6e:	fa07 f70b 	lsl.w	r7, r7, fp
 8003e72:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e76:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8003e78:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 8003e7a:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e7e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003e82:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003e86:	bf0c      	ite	eq
 8003e88:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8003e8a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8003e8e:	6023      	str	r3, [r4, #0]

        temp = EXTI->FTSR1;
 8003e90:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e92:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003e96:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003e9a:	bf0c      	ite	eq
 8003e9c:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8003e9e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8003ea2:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003ea4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003eac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003eb0:	bf0c      	ite	eq
 8003eb2:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8003eb4:	ea49 0303 	orrne.w	r3, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003eb8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003ebc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003ec4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003ec8:	bf0c      	ite	eq
 8003eca:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8003ecc:	ea49 0703 	orrne.w	r7, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003ed0:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ed4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed6:	680b      	ldr	r3, [r1, #0]
 8003ed8:	f10c 0c02 	add.w	ip, ip, #2
 8003edc:	fa33 f702 	lsrs.w	r7, r3, r2
 8003ee0:	d05f      	beq.n	8003fa2 <HAL_GPIO_Init+0x182>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ee2:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8003ee6:	ea17 0903 	ands.w	r9, r7, r3
 8003eea:	d0f3      	beq.n	8003ed4 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eec:	684b      	ldr	r3, [r1, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d9a4      	bls.n	8003e42 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef8:	684b      	ldr	r3, [r1, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d020      	beq.n	8003f44 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8003f02:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f04:	fa0e f30c 	lsl.w	r3, lr, ip
 8003f08:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0c:	688b      	ldr	r3, [r1, #8]
 8003f0e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f12:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8003f14:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f16:	684b      	ldr	r3, [r1, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d111      	bne.n	8003f44 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 8003f20:	08d7      	lsrs	r7, r2, #3
 8003f22:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003f26:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f28:	f002 0b07 	and.w	fp, r2, #7
 8003f2c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003f30:	fa08 fa0b 	lsl.w	sl, r8, fp
 8003f34:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f38:	690b      	ldr	r3, [r1, #16]
 8003f3a:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f3e:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8003f42:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8003f44:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f46:	fa0e f30c 	lsl.w	r3, lr, ip
 8003f4a:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f4e:	684b      	ldr	r3, [r1, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f58:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8003f5a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f5c:	684b      	ldr	r3, [r1, #4]
 8003f5e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003f62:	d0b7      	beq.n	8003ed4 <HAL_GPIO_Init+0xb4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f64:	f022 0303 	bic.w	r3, r2, #3
 8003f68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f6c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003f70:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003f72:	f002 0b03 	and.w	fp, r2, #3
 8003f76:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003f7a:	fa06 fa0b 	lsl.w	sl, r6, fp
 8003f7e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f82:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f86:	f43f af71 	beq.w	8003e6c <HAL_GPIO_Init+0x4c>
 8003f8a:	4f08      	ldr	r7, [pc, #32]	; (8003fac <HAL_GPIO_Init+0x18c>)
 8003f8c:	42b8      	cmp	r0, r7
 8003f8e:	d006      	beq.n	8003f9e <HAL_GPIO_Init+0x17e>
 8003f90:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003f94:	42b8      	cmp	r0, r7
 8003f96:	bf0c      	ite	eq
 8003f98:	2702      	moveq	r7, #2
 8003f9a:	2707      	movne	r7, #7
 8003f9c:	e767      	b.n	8003e6e <HAL_GPIO_Init+0x4e>
 8003f9e:	462f      	mov	r7, r5
 8003fa0:	e765      	b.n	8003e6e <HAL_GPIO_Init+0x4e>
  }
}
 8003fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa6:	4770      	bx	lr
 8003fa8:	58000800 	.word	0x58000800
 8003fac:	48000400 	.word	0x48000400

08003fb0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d075      	beq.n	80040a0 <HAL_GPIO_DeInit+0xf0>
{
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	468c      	mov	ip, r1
  uint32_t position = 0x00u;
 8003fba:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003fbc:	f04f 0801 	mov.w	r8, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003fc0:	f04f 0b07 	mov.w	fp, #7
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003fc4:	f04f 0a03 	mov.w	sl, #3
        EXTI->IMR1 &= ~(iocurrent);
 8003fc8:	4f36      	ldr	r7, [pc, #216]	; (80040a4 <HAL_GPIO_DeInit+0xf4>)
 8003fca:	e029      	b.n	8004020 <HAL_GPIO_DeInit+0x70>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003fcc:	f04f 0900 	mov.w	r9, #0
 8003fd0:	fa09 f404 	lsl.w	r4, r9, r4
 8003fd4:	42ac      	cmp	r4, r5
 8003fd6:	d048      	beq.n	800406a <HAL_GPIO_DeInit+0xba>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003fd8:	6804      	ldr	r4, [r0, #0]
 8003fda:	0059      	lsls	r1, r3, #1
 8003fdc:	fa0a f101 	lsl.w	r1, sl, r1
 8003fe0:	430c      	orrs	r4, r1
 8003fe2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003fe4:	08dd      	lsrs	r5, r3, #3
 8003fe6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003fea:	6a2e      	ldr	r6, [r5, #32]
 8003fec:	f003 0407 	and.w	r4, r3, #7
 8003ff0:	00a4      	lsls	r4, r4, #2
 8003ff2:	f04f 0e0f 	mov.w	lr, #15
 8003ff6:	fa0e f404 	lsl.w	r4, lr, r4
 8003ffa:	ea26 0404 	bic.w	r4, r6, r4
 8003ffe:	622c      	str	r4, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004000:	6884      	ldr	r4, [r0, #8]
 8004002:	ea24 0401 	bic.w	r4, r4, r1
 8004006:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004008:	6844      	ldr	r4, [r0, #4]
 800400a:	ea24 0202 	bic.w	r2, r4, r2
 800400e:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004010:	68c2      	ldr	r2, [r0, #12]
 8004012:	ea22 0201 	bic.w	r2, r2, r1
 8004016:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004018:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800401a:	fa3c f203 	lsrs.w	r2, ip, r3
 800401e:	d03d      	beq.n	800409c <HAL_GPIO_DeInit+0xec>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004020:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 8004024:	ea12 060c 	ands.w	r6, r2, ip
 8004028:	d0f6      	beq.n	8004018 <HAL_GPIO_DeInit+0x68>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800402a:	f023 0103 	bic.w	r1, r3, #3
 800402e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004032:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8004036:	688d      	ldr	r5, [r1, #8]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004038:	f003 0403 	and.w	r4, r3, #3
 800403c:	00a4      	lsls	r4, r4, #2
 800403e:	fa0b fe04 	lsl.w	lr, fp, r4
 8004042:	ea0e 0505 	and.w	r5, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004046:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800404a:	d0bf      	beq.n	8003fcc <HAL_GPIO_DeInit+0x1c>
 800404c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80040a8 <HAL_GPIO_DeInit+0xf8>
 8004050:	4548      	cmp	r0, r9
 8004052:	d008      	beq.n	8004066 <HAL_GPIO_DeInit+0xb6>
 8004054:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8004058:	4548      	cmp	r0, r9
 800405a:	bf0c      	ite	eq
 800405c:	f04f 0902 	moveq.w	r9, #2
 8004060:	f04f 0907 	movne.w	r9, #7
 8004064:	e7b4      	b.n	8003fd0 <HAL_GPIO_DeInit+0x20>
 8004066:	46c1      	mov	r9, r8
 8004068:	e7b2      	b.n	8003fd0 <HAL_GPIO_DeInit+0x20>
        EXTI->IMR1 &= ~(iocurrent);
 800406a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800406e:	ea24 0406 	bic.w	r4, r4, r6
 8004072:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004076:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800407a:	ea24 0406 	bic.w	r4, r4, r6
 800407e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004082:	683c      	ldr	r4, [r7, #0]
 8004084:	ea24 0406 	bic.w	r4, r4, r6
 8004088:	603c      	str	r4, [r7, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800408a:	687c      	ldr	r4, [r7, #4]
 800408c:	ea24 0406 	bic.w	r4, r4, r6
 8004090:	607c      	str	r4, [r7, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004092:	688c      	ldr	r4, [r1, #8]
 8004094:	ea24 040e 	bic.w	r4, r4, lr
 8004098:	608c      	str	r4, [r1, #8]
 800409a:	e79d      	b.n	8003fd8 <HAL_GPIO_DeInit+0x28>
  }
}
 800409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	58000800 	.word	0x58000800
 80040a8:	48000400 	.word	0x48000400

080040ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040ac:	b10a      	cbz	r2, 80040b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ae:	6181      	str	r1, [r0, #24]
 80040b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80040b4:	4770      	bx	lr

080040b6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040b6:	6803      	ldr	r3, [r0, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 80040be:	bf1c      	itt	ne
 80040c0:	2200      	movne	r2, #0
 80040c2:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c4:	6803      	ldr	r3, [r0, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	f012 0f01 	tst.w	r2, #1
 80040cc:	d103      	bne.n	80040d6 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	619a      	str	r2, [r3, #24]
  }
}
 80040d6:	4770      	bx	lr

080040d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040d8:	b430      	push	{r4, r5}
 80040da:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040dc:	6805      	ldr	r5, [r0, #0]
 80040de:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e0:	4323      	orrs	r3, r4
 80040e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80040ea:	430b      	orrs	r3, r1
 80040ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80040f0:	0d64      	lsrs	r4, r4, #21
 80040f2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80040f6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80040fa:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80040fe:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004102:	f044 0403 	orr.w	r4, r4, #3
 8004106:	ea20 0004 	bic.w	r0, r0, r4
 800410a:	4303      	orrs	r3, r0
 800410c:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800410e:	bc30      	pop	{r4, r5}
 8004110:	4770      	bx	lr

08004112 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004112:	f011 0f01 	tst.w	r1, #1
 8004116:	d021      	beq.n	800415c <I2C_Disable_IRQ+0x4a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004118:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800411c:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004120:	2b28      	cmp	r3, #40	; 0x28
 8004122:	bf0c      	ite	eq
 8004124:	2342      	moveq	r3, #66	; 0x42
 8004126:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004128:	f011 0f02 	tst.w	r1, #2
 800412c:	d009      	beq.n	8004142 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800412e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004132:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004136:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004138:	bf0c      	ite	eq
 800413a:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800413e:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004142:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004146:	d10b      	bne.n	8004160 <I2C_Disable_IRQ+0x4e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004148:	2910      	cmp	r1, #16
 800414a:	d110      	bne.n	800416e <I2C_Disable_IRQ+0x5c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800414c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004150:	6801      	ldr	r1, [r0, #0]
 8004152:	680a      	ldr	r2, [r1, #0]
 8004154:	ea22 0303 	bic.w	r3, r2, r3
 8004158:	600b      	str	r3, [r1, #0]
}
 800415a:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	e7e3      	b.n	8004128 <I2C_Disable_IRQ+0x16>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004160:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004164:	2940      	cmp	r1, #64	; 0x40
    tmpisr |= I2C_IT_TCI;
 8004166:	bf08      	it	eq
 8004168:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 800416c:	e7f0      	b.n	8004150 <I2C_Disable_IRQ+0x3e>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800416e:	2920      	cmp	r1, #32
 8004170:	d1f8      	bne.n	8004164 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_STOPI;
 8004172:	f043 0320 	orr.w	r3, r3, #32
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004176:	e7eb      	b.n	8004150 <I2C_Disable_IRQ+0x3e>

08004178 <I2C_IsErrorOccurred>:
{
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800417e:	6803      	ldr	r3, [r0, #0]
 8004180:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004182:	f016 0610 	ands.w	r6, r6, #16
 8004186:	d07d      	beq.n	8004284 <I2C_IsErrorOccurred+0x10c>
 8004188:	460d      	mov	r5, r1
 800418a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	2210      	movs	r2, #16
 800418e:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8004190:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	4637      	mov	r7, r6
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004194:	f04f 0a20 	mov.w	sl, #32
              status = HAL_ERROR;
 8004198:	f04f 0901 	mov.w	r9, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	6993      	ldr	r3, [r2, #24]
 80041a0:	f013 0f20 	tst.w	r3, #32
 80041a4:	d12f      	bne.n	8004206 <I2C_IsErrorOccurred+0x8e>
 80041a6:	bb8f      	cbnz	r7, 800420c <I2C_IsErrorOccurred+0x94>
      if (Timeout != HAL_MAX_DELAY)
 80041a8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041ac:	d0f7      	beq.n	800419e <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe f873 	bl	8002298 <HAL_GetTick>
 80041b2:	eba0 0008 	sub.w	r0, r0, r8
 80041b6:	42a8      	cmp	r0, r5
 80041b8:	d801      	bhi.n	80041be <I2C_IsErrorOccurred+0x46>
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	d1ee      	bne.n	800419c <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80041c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80041c6:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041c8:	6991      	ldr	r1, [r2, #24]
 80041ca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80041ce:	d004      	beq.n	80041da <I2C_IsErrorOccurred+0x62>
 80041d0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80041d4:	d101      	bne.n	80041da <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d10d      	bne.n	80041f6 <I2C_IsErrorOccurred+0x7e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f013 0f20 	tst.w	r3, #32
 80041e2:	d1db      	bne.n	800419c <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041e4:	f7fe f858 	bl	8002298 <HAL_GetTick>
 80041e8:	eba0 0008 	sub.w	r0, r0, r8
 80041ec:	2819      	cmp	r0, #25
 80041ee:	d9f4      	bls.n	80041da <I2C_IsErrorOccurred+0x62>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80041f0:	4656      	mov	r6, sl
              status = HAL_ERROR;
 80041f2:	464f      	mov	r7, r9
 80041f4:	e7d2      	b.n	800419c <I2C_IsErrorOccurred+0x24>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041f6:	6853      	ldr	r3, [r2, #4]
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80041fe:	f7fe f84b 	bl	8002298 <HAL_GetTick>
 8004202:	4680      	mov	r8, r0
 8004204:	e7e9      	b.n	80041da <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8004206:	b90f      	cbnz	r7, 800420c <I2C_IsErrorOccurred+0x94>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004208:	2320      	movs	r3, #32
 800420a:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800420c:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004210:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004216:	f413 7f80 	tst.w	r3, #256	; 0x100
 800421a:	d005      	beq.n	8004228 <I2C_IsErrorOccurred+0xb0>
    error_code |= HAL_I2C_ERROR_BERR;
 800421c:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004224:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004226:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004228:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800422c:	d02c      	beq.n	8004288 <I2C_IsErrorOccurred+0x110>
    error_code |= HAL_I2C_ERROR_OVR;
 800422e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004238:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800423a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800423e:	d005      	beq.n	800424c <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004240:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424a:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800424c:	4620      	mov	r0, r4
 800424e:	f7ff ff32 	bl	80040b6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6853      	ldr	r3, [r2, #4]
 8004256:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800425a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800425e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800426a:	4333      	orrs	r3, r6
 800426c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800426e:	2320      	movs	r3, #32
 8004270:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	2300      	movs	r3, #0
 8004276:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800427a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800427e:	2001      	movs	r0, #1
}
 8004280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2000      	movs	r0, #0
 8004286:	e7c4      	b.n	8004212 <I2C_IsErrorOccurred+0x9a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004288:	f413 7f00 	tst.w	r3, #512	; 0x200
 800428c:	d1d8      	bne.n	8004240 <I2C_IsErrorOccurred+0xc8>
  if (status != HAL_OK)
 800428e:	2800      	cmp	r0, #0
 8004290:	d0f6      	beq.n	8004280 <I2C_IsErrorOccurred+0x108>
 8004292:	e7db      	b.n	800424c <I2C_IsErrorOccurred+0xd4>

08004294 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	460d      	mov	r5, r1
 800429a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f013 0f02 	tst.w	r3, #2
 80042a4:	d11d      	bne.n	80042e2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	4632      	mov	r2, r6
 80042a8:	4629      	mov	r1, r5
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff ff64 	bl	8004178 <I2C_IsErrorOccurred>
 80042b0:	b9c8      	cbnz	r0, 80042e6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80042b6:	d0f1      	beq.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fd ffee 	bl	8002298 <HAL_GetTick>
 80042bc:	1b80      	subs	r0, r0, r6
 80042be:	42a8      	cmp	r0, r5
 80042c0:	d801      	bhi.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	d1ea      	bne.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	2320      	movs	r3, #32
 80042d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80042da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e000      	b.n	80042e4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80042e2:	2000      	movs	r0, #0
}
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80042e6:	2001      	movs	r0, #1
 80042e8:	e7fc      	b.n	80042e4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080042ea <I2C_WaitOnFlagUntilTimeout>:
{
 80042ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ee:	4680      	mov	r8, r0
 80042f0:	460f      	mov	r7, r1
 80042f2:	4616      	mov	r6, r2
 80042f4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	699c      	ldr	r4, [r3, #24]
 80042fc:	ea37 0404 	bics.w	r4, r7, r4
 8004300:	bf0c      	ite	eq
 8004302:	2401      	moveq	r4, #1
 8004304:	2400      	movne	r4, #0
 8004306:	42b4      	cmp	r4, r6
 8004308:	d11a      	bne.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800430a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800430e:	d0f4      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fd ffc2 	bl	8002298 <HAL_GetTick>
 8004314:	9b06      	ldr	r3, [sp, #24]
 8004316:	1ac0      	subs	r0, r0, r3
 8004318:	42a8      	cmp	r0, r5
 800431a:	d801      	bhi.n	8004320 <I2C_WaitOnFlagUntilTimeout+0x36>
 800431c:	2d00      	cmp	r5, #0
 800431e:	d1ea      	bne.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800432c:	2320      	movs	r3, #32
 800432e:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	2300      	movs	r3, #0
 8004334:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004338:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 800433c:	2001      	movs	r0, #1
 800433e:	e000      	b.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8004340:	2000      	movs	r0, #0
}
 8004342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004346 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004346:	b570      	push	{r4, r5, r6, lr}
 8004348:	4605      	mov	r5, r0
 800434a:	460c      	mov	r4, r1
 800434c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f013 0f20 	tst.w	r3, #32
 8004356:	d11a      	bne.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004358:	4632      	mov	r2, r6
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f7ff ff0b 	bl	8004178 <I2C_IsErrorOccurred>
 8004362:	b9b0      	cbnz	r0, 8004392 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fd ff98 	bl	8002298 <HAL_GetTick>
 8004368:	1b80      	subs	r0, r0, r6
 800436a:	42a0      	cmp	r0, r4
 800436c:	d801      	bhi.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800436e:	2c00      	cmp	r4, #0
 8004370:	d1ed      	bne.n	800434e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004372:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004374:	f043 0320 	orr.w	r3, r3, #32
 8004378:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800437a:	2320      	movs	r3, #32
 800437c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	2300      	movs	r3, #0
 8004382:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004386:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800438a:	2001      	movs	r0, #1
}
 800438c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800438e:	2000      	movs	r0, #0
 8004390:	e7fc      	b.n	800438c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004392:	2001      	movs	r0, #1
 8004394:	e7fa      	b.n	800438c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004396 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004396:	b570      	push	{r4, r5, r6, lr}
 8004398:	4604      	mov	r4, r0
 800439a:	460d      	mov	r5, r1
 800439c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f013 0f04 	tst.w	r3, #4
 80043a6:	d147      	bne.n	8004438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	4632      	mov	r2, r6
 80043aa:	4629      	mov	r1, r5
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff fee3 	bl	8004178 <I2C_IsErrorOccurred>
 80043b2:	4601      	mov	r1, r0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d141      	bne.n	800443c <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	f012 0f20 	tst.w	r2, #32
 80043c0:	d113      	bne.n	80043ea <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fd ff69 	bl	8002298 <HAL_GetTick>
 80043c6:	1b80      	subs	r0, r0, r6
 80043c8:	42a8      	cmp	r0, r5
 80043ca:	d801      	bhi.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	d1e6      	bne.n	800439e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	2320      	movs	r3, #32
 80043da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80043e4:	2101      	movs	r1, #1
}
 80043e6:	4608      	mov	r0, r1
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	f012 0f04 	tst.w	r2, #4
 80043f0:	d002      	beq.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80043f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	d1f6      	bne.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	f012 0f10 	tst.w	r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fe:	bf1d      	ittte	ne
 8004400:	2210      	movne	r2, #16
 8004402:	61da      	strne	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004404:	2304      	movne	r3, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004406:	2300      	moveq	r3, #0
 8004408:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004410:	6821      	ldr	r1, [r4, #0]
 8004412:	684b      	ldr	r3, [r1, #4]
 8004414:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004418:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800441c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004426:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	2300      	movs	r3, #0
 800442c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004430:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004434:	2101      	movs	r1, #1
 8004436:	e7d6      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8004438:	2100      	movs	r1, #0
 800443a:	e7d4      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 800443c:	2101      	movs	r1, #1
 800443e:	e7d2      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08004440 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004440:	2800      	cmp	r0, #0
 8004442:	d055      	beq.n	80044f0 <HAL_I2C_Init+0xb0>
{
 8004444:	b510      	push	{r4, lr}
 8004446:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004448:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800444c:	2b00      	cmp	r3, #0
 800444e:	d045      	beq.n	80044dc <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004450:	2324      	movs	r3, #36	; 0x24
 8004452:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004468:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	6893      	ldr	r3, [r2, #8]
 800446e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004472:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004474:	68e3      	ldr	r3, [r4, #12]
 8004476:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	68a3      	ldr	r3, [r4, #8]
 800447c:	bf0c      	ite	eq
 800447e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004482:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8004486:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004488:	68e3      	ldr	r3, [r4, #12]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d02b      	beq.n	80044e6 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	6853      	ldr	r3, [r2, #4]
 8004492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	68d3      	ldr	r3, [r2, #12]
 80044a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044a4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	6961      	ldr	r1, [r4, #20]
 80044ac:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ae:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044b4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	69e3      	ldr	r3, [r4, #28]
 80044ba:	6a21      	ldr	r1, [r4, #32]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ca:	2000      	movs	r0, #0
 80044cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	2320      	movs	r3, #32
 80044d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80044da:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80044dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80044e0:	f7fd f8fa 	bl	80016d8 <HAL_I2C_MspInit>
 80044e4:	e7b4      	b.n	8004450 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	e7ce      	b.n	800448e <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80044f0:	2001      	movs	r0, #1
}
 80044f2:	4770      	bx	lr

080044f4 <HAL_I2C_Master_Transmit>:
{
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	460f      	mov	r7, r1
 80044fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004502:	b2c9      	uxtb	r1, r1
 8004504:	2920      	cmp	r1, #32
 8004506:	f040 80ab 	bne.w	8004660 <HAL_I2C_Master_Transmit+0x16c>
 800450a:	4604      	mov	r4, r0
 800450c:	4690      	mov	r8, r2
 800450e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004510:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004514:	2b01      	cmp	r3, #1
 8004516:	f000 80a7 	beq.w	8004668 <HAL_I2C_Master_Transmit+0x174>
 800451a:	f04f 0a01 	mov.w	sl, #1
 800451e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004522:	f7fd feb9 	bl	8002298 <HAL_GetTick>
 8004526:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004528:	9000      	str	r0, [sp, #0]
 800452a:	2319      	movs	r3, #25
 800452c:	4652      	mov	r2, sl
 800452e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff fed9 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 8004538:	2800      	cmp	r0, #0
 800453a:	f040 8097 	bne.w	800466c <HAL_I2C_Master_Transmit+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800453e:	2321      	movs	r3, #33	; 0x21
 8004540:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004544:	2310      	movs	r3, #16
 8004546:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800454a:	2300      	movs	r3, #0
 800454c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800454e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004552:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004556:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2bff      	cmp	r3, #255	; 0xff
 800455e:	d914      	bls.n	800458a <HAL_I2C_Master_Transmit+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004560:	22ff      	movs	r2, #255	; 0xff
 8004562:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <HAL_I2C_Master_Transmit+0x188>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800456c:	4639      	mov	r1, r7
 800456e:	4620      	mov	r0, r4
 8004570:	f7ff fdb2 	bl	80040d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004574:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d055      	beq.n	8004628 <HAL_I2C_Master_Transmit+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457c:	f04f 0800 	mov.w	r8, #0
 8004580:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004584:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8004588:	e01b      	b.n	80045c2 <HAL_I2C_Master_Transmit+0xce>
      hi2c->XferSize = hi2c->XferCount;
 800458a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800458c:	b292      	uxth	r2, r2
 800458e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_I2C_Master_Transmit+0x188>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	4639      	mov	r1, r7
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff fd9b 	bl	80040d8 <I2C_TransferConfig>
 80045a2:	e7e7      	b.n	8004574 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80045a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045a6:	b292      	uxth	r2, r2
 80045a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045aa:	f8cd 8000 	str.w	r8, [sp]
 80045ae:	4653      	mov	r3, sl
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	4639      	mov	r1, r7
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff fd8f 	bl	80040d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d032      	beq.n	8004628 <HAL_I2C_Master_Transmit+0x134>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c2:	462a      	mov	r2, r5
 80045c4:	4631      	mov	r1, r6
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7ff fe64 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d14f      	bne.n	8004670 <HAL_I2C_Master_Transmit+0x17c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80045d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80045e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045f0:	b292      	uxth	r2, r2
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	d0e1      	beq.n	80045ba <HAL_I2C_Master_Transmit+0xc6>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1df      	bne.n	80045ba <HAL_I2C_Master_Transmit+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045fa:	9500      	str	r5, [sp, #0]
 80045fc:	4633      	mov	r3, r6
 80045fe:	4642      	mov	r2, r8
 8004600:	4649      	mov	r1, r9
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fe71 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 8004608:	bba0      	cbnz	r0, 8004674 <HAL_I2C_Master_Transmit+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800460a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2bff      	cmp	r3, #255	; 0xff
 8004610:	d9c8      	bls.n	80045a4 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004612:	22ff      	movs	r2, #255	; 0xff
 8004614:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004616:	f8cd 8000 	str.w	r8, [sp]
 800461a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800461e:	4639      	mov	r1, r7
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff fd59 	bl	80040d8 <I2C_TransferConfig>
 8004626:	e7c8      	b.n	80045ba <HAL_I2C_Master_Transmit+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004628:	462a      	mov	r2, r5
 800462a:	4631      	mov	r1, r6
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fe8a 	bl	8004346 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004632:	bb08      	cbnz	r0, 8004678 <HAL_I2C_Master_Transmit+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	2220      	movs	r2, #32
 8004638:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	684b      	ldr	r3, [r1, #4]
 800463e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004642:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004646:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004654:	2300      	movs	r3, #0
 8004656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800465a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800465e:	e000      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
    return HAL_BUSY;
 8004660:	2002      	movs	r0, #2
}
 8004662:	b002      	add	sp, #8
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004668:	2002      	movs	r0, #2
 800466a:	e7fa      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 800466c:	2001      	movs	r0, #1
 800466e:	e7f8      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
        return HAL_ERROR;
 8004670:	2001      	movs	r0, #1
 8004672:	e7f6      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
          return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
 8004676:	e7f4      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
      return HAL_ERROR;
 8004678:	2001      	movs	r0, #1
 800467a:	e7f2      	b.n	8004662 <HAL_I2C_Master_Transmit+0x16e>
 800467c:	80002000 	.word	0x80002000

08004680 <HAL_I2C_Master_Receive>:
{
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	460f      	mov	r7, r1
 8004688:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800468a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800468e:	b2c9      	uxtb	r1, r1
 8004690:	2920      	cmp	r1, #32
 8004692:	f040 80ab 	bne.w	80047ec <HAL_I2C_Master_Receive+0x16c>
 8004696:	4604      	mov	r4, r0
 8004698:	4690      	mov	r8, r2
 800469a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800469c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f000 80a7 	beq.w	80047f4 <HAL_I2C_Master_Receive+0x174>
 80046a6:	f04f 0a01 	mov.w	sl, #1
 80046aa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80046ae:	f7fd fdf3 	bl	8002298 <HAL_GetTick>
 80046b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b4:	9000      	str	r0, [sp, #0]
 80046b6:	2319      	movs	r3, #25
 80046b8:	4652      	mov	r2, sl
 80046ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff fe13 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	f040 8097 	bne.w	80047f8 <HAL_I2C_Master_Receive+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ca:	2322      	movs	r3, #34	; 0x22
 80046cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046d0:	2310      	movs	r3, #16
 80046d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80046da:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80046de:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046e2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2bff      	cmp	r3, #255	; 0xff
 80046ea:	d914      	bls.n	8004716 <HAL_I2C_Master_Receive+0x96>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ec:	22ff      	movs	r2, #255	; 0xff
 80046ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046f0:	4b45      	ldr	r3, [pc, #276]	; (8004808 <HAL_I2C_Master_Receive+0x188>)
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f8:	4639      	mov	r1, r7
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7ff fcec 	bl	80040d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004700:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d055      	beq.n	80047b4 <HAL_I2C_Master_Receive+0x134>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004708:	f04f 0800 	mov.w	r8, #0
 800470c:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004710:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8004714:	e01b      	b.n	800474e <HAL_I2C_Master_Receive+0xce>
      hi2c->XferSize = hi2c->XferCount;
 8004716:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004718:	b292      	uxth	r2, r2
 800471a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <HAL_I2C_Master_Receive+0x188>)
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4639      	mov	r1, r7
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff fcd5 	bl	80040d8 <I2C_TransferConfig>
 800472e:	e7e7      	b.n	8004700 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 8004730:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004732:	b292      	uxth	r2, r2
 8004734:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004736:	f8cd 8000 	str.w	r8, [sp]
 800473a:	4653      	mov	r3, sl
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	4639      	mov	r1, r7
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff fcc9 	bl	80040d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d032      	beq.n	80047b4 <HAL_I2C_Master_Receive+0x134>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474e:	462a      	mov	r2, r5
 8004750:	4631      	mov	r1, r6
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff fe1f 	bl	8004396 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004758:	2800      	cmp	r0, #0
 800475a:	d14f      	bne.n	80047fc <HAL_I2C_Master_Receive+0x17c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004762:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004766:	3301      	adds	r3, #1
 8004768:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800476a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800476c:	3b01      	subs	r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004772:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004774:	3a01      	subs	r2, #1
 8004776:	b292      	uxth	r2, r2
 8004778:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800477a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800477c:	b292      	uxth	r2, r2
 800477e:	2a00      	cmp	r2, #0
 8004780:	d0e1      	beq.n	8004746 <HAL_I2C_Master_Receive+0xc6>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1df      	bne.n	8004746 <HAL_I2C_Master_Receive+0xc6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004786:	9500      	str	r5, [sp, #0]
 8004788:	4633      	mov	r3, r6
 800478a:	4642      	mov	r2, r8
 800478c:	4649      	mov	r1, r9
 800478e:	4620      	mov	r0, r4
 8004790:	f7ff fdab 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 8004794:	bba0      	cbnz	r0, 8004800 <HAL_I2C_Master_Receive+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2bff      	cmp	r3, #255	; 0xff
 800479c:	d9c8      	bls.n	8004730 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800479e:	22ff      	movs	r2, #255	; 0xff
 80047a0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a2:	f8cd 8000 	str.w	r8, [sp]
 80047a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047aa:	4639      	mov	r1, r7
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff fc93 	bl	80040d8 <I2C_TransferConfig>
 80047b2:	e7c8      	b.n	8004746 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b4:	462a      	mov	r2, r5
 80047b6:	4631      	mov	r1, r6
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff fdc4 	bl	8004346 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047be:	bb08      	cbnz	r0, 8004804 <HAL_I2C_Master_Receive+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	2220      	movs	r2, #32
 80047c4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80047c6:	6821      	ldr	r1, [r4, #0]
 80047c8:	684b      	ldr	r3, [r1, #4]
 80047ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80047ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80047d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80047e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80047ea:	e000      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
    return HAL_BUSY;
 80047ec:	2002      	movs	r0, #2
}
 80047ee:	b002      	add	sp, #8
 80047f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80047f4:	2002      	movs	r0, #2
 80047f6:	e7fa      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 80047f8:	2001      	movs	r0, #1
 80047fa:	e7f8      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
        return HAL_ERROR;
 80047fc:	2001      	movs	r0, #1
 80047fe:	e7f6      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
          return HAL_ERROR;
 8004800:	2001      	movs	r0, #1
 8004802:	e7f4      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
      return HAL_ERROR;
 8004804:	2001      	movs	r0, #1
 8004806:	e7f2      	b.n	80047ee <HAL_I2C_Master_Receive+0x16e>
 8004808:	80002400 	.word	0x80002400

0800480c <HAL_I2C_Mem_Read>:
{
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	b083      	sub	sp, #12
 8004812:	460d      	mov	r5, r1
 8004814:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004818:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800481a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800481e:	b2c9      	uxtb	r1, r1
 8004820:	2920      	cmp	r1, #32
 8004822:	f040 80e4 	bne.w	80049ee <HAL_I2C_Mem_Read+0x1e2>
 8004826:	4604      	mov	r4, r0
 8004828:	4690      	mov	r8, r2
 800482a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800482c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800482e:	b1cb      	cbz	r3, 8004864 <HAL_I2C_Mem_Read+0x58>
 8004830:	f1ba 0f00 	cmp.w	sl, #0
 8004834:	d016      	beq.n	8004864 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004836:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	f000 80db 	beq.w	80049f6 <HAL_I2C_Mem_Read+0x1ea>
 8004840:	f04f 0b01 	mov.w	fp, #1
 8004844:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004848:	f7fd fd26 	bl	8002298 <HAL_GetTick>
 800484c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800484e:	9000      	str	r0, [sp, #0]
 8004850:	2319      	movs	r3, #25
 8004852:	465a      	mov	r2, fp
 8004854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004858:	4620      	mov	r0, r4
 800485a:	f7ff fd46 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 800485e:	b130      	cbz	r0, 800486e <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004860:	2001      	movs	r0, #1
 8004862:	e0c5      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004868:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	e0c0      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800486e:	2322      	movs	r3, #34	; 0x22
 8004870:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487a:	2300      	movs	r3, #0
 800487c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800487e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004880:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004882:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004886:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004888:	4a5f      	ldr	r2, [pc, #380]	; (8004a08 <HAL_I2C_Mem_Read+0x1fc>)
 800488a:	9200      	str	r2, [sp, #0]
 800488c:	fa5f f289 	uxtb.w	r2, r9
 8004890:	4629      	mov	r1, r5
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff fc20 	bl	80040d8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	4632      	mov	r2, r6
 800489a:	4639      	mov	r1, r7
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff fcf9 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	bb88      	cbnz	r0, 8004908 <HAL_I2C_Mem_Read+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048a4:	45d9      	cmp	r9, fp
 80048a6:	d120      	bne.n	80048ea <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	fa5f f288 	uxtb.w	r2, r8
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	9600      	str	r6, [sp, #0]
 80048b2:	463b      	mov	r3, r7
 80048b4:	2200      	movs	r2, #0
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7ff fd16 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048be:	bb18      	cbnz	r0, 8004908 <HAL_I2C_Mem_Read+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2bff      	cmp	r3, #255	; 0xff
 80048c6:	d924      	bls.n	8004912 <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048cc:	4b4f      	ldr	r3, [pc, #316]	; (8004a0c <HAL_I2C_Mem_Read+0x200>)
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d4:	4629      	mov	r1, r5
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff fbfe 	bl	80040d8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048dc:	f04f 0800 	mov.w	r8, #0
 80048e0:	f04f 0904 	mov.w	r9, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048e4:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80048e8:	e030      	b.n	800494c <HAL_I2C_Mem_Read+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	4632      	mov	r2, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff fccc 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 80048fc:	b920      	cbnz	r0, 8004908 <HAL_I2C_Mem_Read+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	fa5f f388 	uxtb.w	r3, r8
 8004904:	6293      	str	r3, [r2, #40]	; 0x28
 8004906:	e7d3      	b.n	80048b0 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 8004908:	2300      	movs	r3, #0
 800490a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800490e:	2001      	movs	r0, #1
 8004910:	e06e      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->XferSize = hi2c->XferCount;
 8004912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004914:	b292      	uxth	r2, r2
 8004916:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004918:	4b3c      	ldr	r3, [pc, #240]	; (8004a0c <HAL_I2C_Mem_Read+0x200>)
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	4629      	mov	r1, r5
 8004924:	4620      	mov	r0, r4
 8004926:	f7ff fbd7 	bl	80040d8 <I2C_TransferConfig>
 800492a:	e7d7      	b.n	80048dc <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = hi2c->XferCount;
 800492c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800492e:	b292      	uxth	r2, r2
 8004930:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004932:	f8cd 8000 	str.w	r8, [sp]
 8004936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff fbca 	bl	80040d8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d034      	beq.n	80049b6 <HAL_I2C_Mem_Read+0x1aa>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800494c:	9600      	str	r6, [sp, #0]
 800494e:	463b      	mov	r3, r7
 8004950:	4642      	mov	r2, r8
 8004952:	4649      	mov	r1, r9
 8004954:	4620      	mov	r0, r4
 8004956:	f7ff fcc8 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 800495a:	2800      	cmp	r0, #0
 800495c:	d14d      	bne.n	80049fa <HAL_I2C_Mem_Read+0x1ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004964:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004968:	3301      	adds	r3, #1
 800496a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800496c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004974:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004976:	3a01      	subs	r2, #1
 8004978:	b292      	uxth	r2, r2
 800497a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800497c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800497e:	b292      	uxth	r2, r2
 8004980:	2a00      	cmp	r2, #0
 8004982:	d0df      	beq.n	8004944 <HAL_I2C_Mem_Read+0x138>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1dd      	bne.n	8004944 <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004988:	9600      	str	r6, [sp, #0]
 800498a:	463b      	mov	r3, r7
 800498c:	4642      	mov	r2, r8
 800498e:	4651      	mov	r1, sl
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff fcaa 	bl	80042ea <I2C_WaitOnFlagUntilTimeout>
 8004996:	bb90      	cbnz	r0, 80049fe <HAL_I2C_Mem_Read+0x1f2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004998:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2bff      	cmp	r3, #255	; 0xff
 800499e:	d9c5      	bls.n	800492c <HAL_I2C_Mem_Read+0x120>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049a4:	f8cd 8000 	str.w	r8, [sp]
 80049a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ac:	4629      	mov	r1, r5
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fb92 	bl	80040d8 <I2C_TransferConfig>
 80049b4:	e7c6      	b.n	8004944 <HAL_I2C_Mem_Read+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	4632      	mov	r2, r6
 80049b8:	4639      	mov	r1, r7
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fcc3 	bl	8004346 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049c0:	b9f8      	cbnz	r0, 8004a02 <HAL_I2C_Mem_Read+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	2220      	movs	r2, #32
 80049c6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80049c8:	6821      	ldr	r1, [r4, #0]
 80049ca:	684b      	ldr	r3, [r1, #4]
 80049cc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80049d0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80049d4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049de:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80049e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80049ec:	e000      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
    return HAL_BUSY;
 80049ee:	2002      	movs	r0, #2
}
 80049f0:	b003      	add	sp, #12
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80049f6:	2002      	movs	r0, #2
 80049f8:	e7fa      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
        return HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
 80049fc:	e7f8      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
          return HAL_ERROR;
 80049fe:	2001      	movs	r0, #1
 8004a00:	e7f6      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
      return HAL_ERROR;
 8004a02:	2001      	movs	r0, #1
 8004a04:	e7f4      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1e4>
 8004a06:	bf00      	nop
 8004a08:	80002000 	.word	0x80002000
 8004a0c:	80002400 	.word	0x80002400

08004a10 <HAL_I2C_EV_IRQHandler>:
{
 8004a10:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a16:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004a18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a1a:	b103      	cbz	r3, 8004a1e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004a1c:	4798      	blx	r3
}
 8004a1e:	bd08      	pop	{r3, pc}

08004a20 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004a22:	4770      	bx	lr

08004a24 <I2C_ITSlaveSeqCplt>:
{
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a28:	6803      	ldr	r3, [r0, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a32:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004a36:	d00e      	beq.n	8004a56 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a3e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a40:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b29      	cmp	r3, #41	; 0x29
 8004a48:	d00d      	beq.n	8004a66 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b2a      	cmp	r3, #42	; 0x2a
 8004a52:	d018      	beq.n	8004a86 <I2C_ITSlaveSeqCplt+0x62>
}
 8004a54:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a56:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004a5a:	d0f1      	beq.n	8004a40 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e7ec      	b.n	8004a40 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a66:	2328      	movs	r3, #40	; 0x28
 8004a68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a6c:	2321      	movs	r3, #33	; 0x21
 8004a6e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a70:	2101      	movs	r1, #1
 8004a72:	4620      	mov	r0, r4
 8004a74:	f7ff fb4d 	bl	8004112 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7ff ffce 	bl	8004a20 <HAL_I2C_SlaveTxCpltCallback>
 8004a84:	e7e6      	b.n	8004a54 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a86:	2328      	movs	r3, #40	; 0x28
 8004a88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a8c:	2322      	movs	r3, #34	; 0x22
 8004a8e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a90:	2102      	movs	r1, #2
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fb3d 	bl	8004112 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff ffbf 	bl	8004a22 <HAL_I2C_SlaveRxCpltCallback>
}
 8004aa4:	e7d6      	b.n	8004a54 <I2C_ITSlaveSeqCplt+0x30>

08004aa6 <HAL_I2C_AddrCallback>:
}
 8004aa6:	4770      	bx	lr

08004aa8 <I2C_ITAddrCplt>:
{
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ab4:	2b28      	cmp	r3, #40	; 0x28
 8004ab6:	d006      	beq.n	8004ac6 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	2208      	movs	r2, #8
 8004abc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004ac6:	6803      	ldr	r3, [r0, #0]
 8004ac8:	699e      	ldr	r6, [r3, #24]
 8004aca:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	0c12      	lsrs	r2, r2, #16
 8004ad2:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ad6:	6899      	ldr	r1, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ad8:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ada:	68c2      	ldr	r2, [r0, #12]
 8004adc:	2a02      	cmp	r2, #2
 8004ade:	d125      	bne.n	8004b2c <I2C_ITAddrCplt+0x84>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ae0:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004ae4:	ea85 11d1 	eor.w	r1, r5, r1, lsr #7
 8004ae8:	f011 0f06 	tst.w	r1, #6
 8004aec:	d110      	bne.n	8004b10 <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 8004aee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004af0:	3101      	adds	r1, #1
 8004af2:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004af4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004af6:	2902      	cmp	r1, #2
 8004af8:	d1e4      	bne.n	8004ac4 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004afa:	2100      	movs	r1, #0
 8004afc:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004afe:	2008      	movs	r0, #8
 8004b00:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004b02:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b06:	4631      	mov	r1, r6
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ffcc 	bl	8004aa6 <HAL_I2C_AddrCallback>
 8004b0e:	e7d9      	b.n	8004ac4 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b14:	f7ff fafd 	bl	8004112 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b1e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8004b22:	4631      	mov	r1, r6
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff ffbe 	bl	8004aa6 <HAL_I2C_AddrCallback>
 8004b2a:	e7cb      	b.n	8004ac4 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b30:	f7ff faef 	bl	8004112 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b34:	2300      	movs	r3, #0
 8004b36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff ffb1 	bl	8004aa6 <HAL_I2C_AddrCallback>
 8004b44:	e7be      	b.n	8004ac4 <I2C_ITAddrCplt+0x1c>

08004b46 <HAL_I2C_ListenCpltCallback>:
}
 8004b46:	4770      	bx	lr

08004b48 <I2C_ITListenCplt>:
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b4c:	4b17      	ldr	r3, [pc, #92]	; (8004bac <I2C_ITListenCplt+0x64>)
 8004b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	2220      	movs	r2, #32
 8004b56:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b5e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b60:	f011 0f04 	tst.w	r1, #4
 8004b64:	d012      	beq.n	8004b8c <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b66:	6803      	ldr	r3, [r0, #0]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b70:	3301      	adds	r3, #1
 8004b72:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004b74:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004b76:	b14b      	cbz	r3, 8004b8c <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004b7c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff fabe 	bl	8004112 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	2210      	movs	r2, #16
 8004b9a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff ffcf 	bl	8004b46 <HAL_I2C_ListenCpltCallback>
}
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	bf00      	nop
 8004bac:	ffff0000 	.word	0xffff0000

08004bb0 <HAL_I2C_ErrorCallback>:
}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_I2C_AbortCpltCallback>:
}
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_TreatErrorCallback>:
{
 8004bb4:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b60      	cmp	r3, #96	; 0x60
 8004bbe:	d006      	beq.n	8004bce <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bc8:	f7ff fff2 	bl	8004bb0 <HAL_I2C_ErrorCallback>
}
 8004bcc:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	2320      	movs	r3, #32
 8004bd0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bdc:	f7ff ffe9 	bl	8004bb2 <HAL_I2C_AbortCpltCallback>
 8004be0:	e7f4      	b.n	8004bcc <I2C_TreatErrorCallback+0x18>
	...

08004be4 <I2C_ITError>:
{
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004be8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bec:	2200      	movs	r2, #0
 8004bee:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bf2:	483a      	ldr	r0, [pc, #232]	; (8004cdc <I2C_ITError+0xf8>)
 8004bf4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004bf6:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004bf8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004bfe:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d819      	bhi.n	8004c3a <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c06:	2103      	movs	r1, #3
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff fa82 	bl	8004112 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c0e:	2328      	movs	r3, #40	; 0x28
 8004c10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c14:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <I2C_ITError+0xfc>)
 8004c16:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c1c:	b11a      	cbz	r2, 8004c26 <I2C_ITError+0x42>
 8004c1e:	2b11      	cmp	r3, #17
 8004c20:	d01a      	beq.n	8004c58 <I2C_ITError+0x74>
 8004c22:	2b21      	cmp	r3, #33	; 0x21
 8004c24:	d018      	beq.n	8004c58 <I2C_ITError+0x74>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c28:	b11a      	cbz	r2, 8004c32 <I2C_ITError+0x4e>
 8004c2a:	2b12      	cmp	r3, #18
 8004c2c:	d035      	beq.n	8004c9a <I2C_ITError+0xb6>
 8004c2e:	2b22      	cmp	r3, #34	; 0x22
 8004c30:	d033      	beq.n	8004c9a <I2C_ITError+0xb6>
    I2C_TreatErrorCallback(hi2c);
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff ffbe 	bl	8004bb4 <I2C_TreatErrorCallback>
}
 8004c38:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c3a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff fa67 	bl	8004112 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c4c:	bf1c      	itt	ne
 8004c4e:	2320      	movne	r3, #32
 8004c50:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e7de      	b.n	8004c16 <I2C_ITError+0x32>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004c60:	d003      	beq.n	8004c6a <I2C_ITError+0x86>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c68:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c6c:	f7fe ff72 	bl	8003b54 <HAL_DMA_GetState>
 8004c70:	2801      	cmp	r0, #1
 8004c72:	d00e      	beq.n	8004c92 <I2C_ITError+0xae>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c76:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <I2C_ITError+0x100>)
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c80:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c82:	f7fe febd 	bl	8003a00 <HAL_DMA_Abort_IT>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d0d6      	beq.n	8004c38 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c8e:	4798      	blx	r3
 8004c90:	e7d2      	b.n	8004c38 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff ff8e 	bl	8004bb4 <I2C_TreatErrorCallback>
 8004c98:	e7ce      	b.n	8004c38 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ca2:	d003      	beq.n	8004cac <I2C_ITError+0xc8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004cae:	f7fe ff51 	bl	8003b54 <HAL_DMA_GetState>
 8004cb2:	2801      	cmp	r0, #1
 8004cb4:	d00e      	beq.n	8004cd4 <I2C_ITError+0xf0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <I2C_ITError+0x100>)
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004cc4:	f7fe fe9c 	bl	8003a00 <HAL_DMA_Abort_IT>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0b5      	beq.n	8004c38 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ccc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004cce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cd0:	4798      	blx	r3
 8004cd2:	e7b1      	b.n	8004c38 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff ff6d 	bl	8004bb4 <I2C_TreatErrorCallback>
 8004cda:	e7ad      	b.n	8004c38 <I2C_ITError+0x54>
 8004cdc:	ffff0000 	.word	0xffff0000
 8004ce0:	08004e45 	.word	0x08004e45
 8004ce4:	0800500f 	.word	0x0800500f

08004ce8 <I2C_ITSlaveCplt>:
{
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cee:	6802      	ldr	r2, [r0, #0]
 8004cf0:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cf2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cfa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8004cfe:	2b21      	cmp	r3, #33	; 0x21
 8004d00:	d008      	beq.n	8004d14 <I2C_ITSlaveCplt+0x2c>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d02:	2b22      	cmp	r3, #34	; 0x22
 8004d04:	d10c      	bne.n	8004d20 <I2C_ITSlaveCplt+0x38>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004d06:	f248 0102 	movw	r1, #32770	; 0x8002
 8004d0a:	f7ff fa02 	bl	8004112 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d0e:	2322      	movs	r3, #34	; 0x22
 8004d10:	6323      	str	r3, [r4, #48]	; 0x30
 8004d12:	e005      	b.n	8004d20 <I2C_ITSlaveCplt+0x38>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004d14:	f248 0101 	movw	r1, #32769	; 0x8001
 8004d18:	f7ff f9fb 	bl	8004112 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d1c:	2321      	movs	r3, #33	; 0x21
 8004d1e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	6853      	ldr	r3, [r2, #4]
 8004d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d28:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	6853      	ldr	r3, [r2, #4]
 8004d2e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004d32:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004d36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff f9b8 	bl	80040b6 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d46:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004d4a:	d03f      	beq.n	8004dcc <I2C_ITSlaveCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d54:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d58:	b11b      	cbz	r3, 8004d62 <I2C_ITSlaveCplt+0x7a>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d62:	f015 0f04 	tst.w	r5, #4
 8004d66:	d010      	beq.n	8004d8a <I2C_ITSlaveCplt+0xa2>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d68:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d76:	3301      	adds	r3, #1
 8004d78:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004d7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d7c:	b12b      	cbz	r3, 8004d8a <I2C_ITSlaveCplt+0xa2>
      hi2c->XferSize--;
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b11b      	cbz	r3, 8004d98 <I2C_ITSlaveCplt+0xb0>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d9e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004da0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004da2:	bb1b      	cbnz	r3, 8004dec <I2C_ITSlaveCplt+0x104>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004da6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004daa:	d12d      	bne.n	8004e08 <I2C_ITSlaveCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b22      	cmp	r3, #34	; 0x22
 8004db4:	d038      	beq.n	8004e28 <I2C_ITSlaveCplt+0x140>
    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	2320      	movs	r3, #32
 8004db8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7ff fe2b 	bl	8004a20 <HAL_I2C_SlaveTxCpltCallback>
}
 8004dca:	e02c      	b.n	8004e26 <I2C_ITSlaveCplt+0x13e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dcc:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004dd0:	d0c7      	beq.n	8004d62 <I2C_ITSlaveCplt+0x7a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	6813      	ldr	r3, [r2, #0]
 8004dd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dda:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0bf      	beq.n	8004d62 <I2C_ITSlaveCplt+0x7a>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004dea:	e7ba      	b.n	8004d62 <I2C_ITSlaveCplt+0x7a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff fef8 	bl	8004be4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004df4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b28      	cmp	r3, #40	; 0x28
 8004dfc:	d113      	bne.n	8004e26 <I2C_ITSlaveCplt+0x13e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7ff fea1 	bl	8004b48 <I2C_ITListenCplt>
 8004e06:	e00e      	b.n	8004e26 <I2C_ITSlaveCplt+0x13e>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7ff fe0b 	bl	8004a24 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <I2C_ITSlaveCplt+0x158>)
 8004e10:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	2320      	movs	r3, #32
 8004e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7ff fe90 	bl	8004b46 <HAL_I2C_ListenCpltCallback>
}
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fdf3 	bl	8004a22 <HAL_I2C_SlaveRxCpltCallback>
 8004e3c:	e7f3      	b.n	8004e26 <I2C_ITSlaveCplt+0x13e>
 8004e3e:	bf00      	nop
 8004e40:	ffff0000 	.word	0xffff0000

08004e44 <I2C_Slave_ISR_IT>:
{
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e46:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004e48:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f000 8099 	beq.w	8004f84 <I2C_Slave_ISR_IT+0x140>
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	4616      	mov	r6, r2
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e5e:	f011 0f20 	tst.w	r1, #32
 8004e62:	d002      	beq.n	8004e6a <I2C_Slave_ISR_IT+0x26>
 8004e64:	f012 0f20 	tst.w	r2, #32
 8004e68:	d119      	bne.n	8004e9e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004e6a:	f015 0f10 	tst.w	r5, #16
 8004e6e:	d03d      	beq.n	8004eec <I2C_Slave_ISR_IT+0xa8>
 8004e70:	f016 0f10 	tst.w	r6, #16
 8004e74:	d03a      	beq.n	8004eec <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 8004e76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	bb43      	cbnz	r3, 8004ece <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b28      	cmp	r3, #40	; 0x28
 8004e84:	d00e      	beq.n	8004ea4 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004e86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b29      	cmp	r3, #41	; 0x29
 8004e8e:	d011      	beq.n	8004eb4 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	2210      	movs	r2, #16
 8004e94:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004e9e:	f7ff ff23 	bl	8004ce8 <I2C_ITSlaveCplt>
 8004ea2:	e7e2      	b.n	8004e6a <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ea4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8004ea8:	d1ed      	bne.n	8004e86 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff fe4b 	bl	8004b48 <I2C_ITListenCplt>
 8004eb2:	e7f0      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eb4:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004eb8:	d0ea      	beq.n	8004e90 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff f8f8 	bl	80040b6 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fdac 	bl	8004a24 <I2C_ITSlaveSeqCplt>
 8004ecc:	e7e3      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ed6:	f043 0304 	orr.w	r3, r3, #4
 8004eda:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004edc:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8004ee0:	d1d9      	bne.n	8004e96 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ee2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fe7d 	bl	8004be4 <I2C_ITError>
 8004eea:	e7d4      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004eec:	f015 0f04 	tst.w	r5, #4
 8004ef0:	d01e      	beq.n	8004f30 <I2C_Slave_ISR_IT+0xec>
 8004ef2:	f016 0f04 	tst.w	r6, #4
 8004ef6:	d01b      	beq.n	8004f30 <I2C_Slave_ISR_IT+0xec>
    if (hi2c->XferCount > 0U)
 8004ef8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	b16b      	cbz	r3, 8004f1a <I2C_Slave_ISR_IT+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f04:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f08:	3301      	adds	r3, #1
 8004f0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004f0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8004f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1b9      	bne.n	8004e96 <I2C_Slave_ISR_IT+0x52>
 8004f22:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004f26:	d0b6      	beq.n	8004e96 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7ff fd7b 	bl	8004a24 <I2C_ITSlaveSeqCplt>
 8004f2e:	e7b2      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f30:	f015 0f08 	tst.w	r5, #8
 8004f34:	d002      	beq.n	8004f3c <I2C_Slave_ISR_IT+0xf8>
 8004f36:	f016 0f08 	tst.w	r6, #8
 8004f3a:	d117      	bne.n	8004f6c <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f3c:	f015 0f02 	tst.w	r5, #2
 8004f40:	d0a9      	beq.n	8004e96 <I2C_Slave_ISR_IT+0x52>
 8004f42:	f016 0f02 	tst.w	r6, #2
 8004f46:	d0a6      	beq.n	8004e96 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8004f48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	b19b      	cbz	r3, 8004f76 <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f58:	3301      	adds	r3, #1
 8004f5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004f64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	8523      	strh	r3, [r4, #40]	; 0x28
 8004f6a:	e794      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7ff fd9a 	bl	8004aa8 <I2C_ITAddrCplt>
 8004f74:	e78f      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004f76:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8004f7a:	d18c      	bne.n	8004e96 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7ff fd51 	bl	8004a24 <I2C_ITSlaveSeqCplt>
 8004f82:	e788      	b.n	8004e96 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8004f84:	2002      	movs	r0, #2
 8004f86:	e789      	b.n	8004e9c <I2C_Slave_ISR_IT+0x58>

08004f88 <HAL_I2C_ER_IRQHandler>:
{
 8004f88:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f8a:	6802      	ldr	r2, [r0, #0]
 8004f8c:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f8e:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f94:	d010      	beq.n	8004fb8 <HAL_I2C_ER_IRQHandler+0x30>
 8004f96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f9a:	d02e      	beq.n	8004ffa <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004f9c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004f9e:	f041 0101 	orr.w	r1, r1, #1
 8004fa2:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fa8:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004faa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004fae:	d109      	bne.n	8004fc4 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fb4:	d111      	bne.n	8004fda <HAL_I2C_ER_IRQHandler+0x52>
 8004fb6:	e018      	b.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fb8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004fbc:	d020      	beq.n	8005000 <HAL_I2C_ER_IRQHandler+0x78>
 8004fbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004fc2:	d012      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004fc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fc6:	f042 0208 	orr.w	r2, r2, #8
 8004fca:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fcc:	6802      	ldr	r2, [r0, #0]
 8004fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fd2:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004fd4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fd8:	d007      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004fda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fe2:	6803      	ldr	r3, [r0, #0]
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8004fea:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004fec:	f011 0f0b 	tst.w	r1, #11
 8004ff0:	d100      	bne.n	8004ff4 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8004ff2:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 8004ff4:	f7ff fdf6 	bl	8004be4 <I2C_ITError>
}
 8004ff8:	e7fb      	b.n	8004ff2 <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004ffa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ffe:	d1f4      	bne.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005000:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005004:	d0f1      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
 8005006:	f011 0f80 	tst.w	r1, #128	; 0x80
 800500a:	d0ee      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x62>
 800500c:	e7e5      	b.n	8004fda <HAL_I2C_ER_IRQHandler+0x52>

0800500e <I2C_DMAAbort>:
{
 800500e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005010:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005012:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005014:	b10b      	cbz	r3, 800501a <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005016:	2200      	movs	r2, #0
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800501a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800501c:	b10b      	cbz	r3, 8005022 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800501e:	2200      	movs	r2, #0
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005022:	f7ff fdc7 	bl	8004bb4 <I2C_TreatErrorCallback>
}
 8005026:	bd08      	pop	{r3, pc}

08005028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005028:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	2a20      	cmp	r2, #32
 8005032:	d123      	bne.n	800507c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005034:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005038:	2a01      	cmp	r2, #1
 800503a:	d021      	beq.n	8005080 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800503c:	2201      	movs	r2, #1
 800503e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005048:	6800      	ldr	r0, [r0, #0]
 800504a:	6802      	ldr	r2, [r0, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	6802      	ldr	r2, [r0, #0]
 8005056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800505a:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	6802      	ldr	r2, [r0, #0]
 8005060:	4311      	orrs	r1, r2
 8005062:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	680a      	ldr	r2, [r1, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	2220      	movs	r2, #32
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005074:	2000      	movs	r0, #0
 8005076:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800507a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800507c:	2002      	movs	r0, #2
 800507e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005080:	2002      	movs	r0, #2
  }
}
 8005082:	4770      	bx	lr

08005084 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005084:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	2a20      	cmp	r2, #32
 800508e:	d121      	bne.n	80050d4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005090:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005094:	2a01      	cmp	r2, #1
 8005096:	d01f      	beq.n	80050d8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005098:	2201      	movs	r2, #1
 800509a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800509e:	2224      	movs	r2, #36	; 0x24
 80050a0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050a4:	6800      	ldr	r0, [r0, #0]
 80050a6:	6802      	ldr	r2, [r0, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050b2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050ba:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	680a      	ldr	r2, [r1, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	2000      	movs	r0, #0
 80050ce:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80050d2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2002      	movs	r0, #2
 80050d6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80050d8:	2002      	movs	r0, #2
  }
}
 80050da:	4770      	bx	lr

080050dc <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <LPTIM_WaitForFlag+0x30>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <LPTIM_WaitForFlag+0x34>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0b9b      	lsrs	r3, r3, #14
 80050e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
  do
  {
    count--;
    if (count == 0UL)
 80050f0:	3b01      	subs	r3, #1
 80050f2:	d006      	beq.n	8005102 <LPTIM_WaitForFlag+0x26>
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80050f4:	6802      	ldr	r2, [r0, #0]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	ea31 0202 	bics.w	r2, r1, r2
 80050fc:	d1f8      	bne.n	80050f0 <LPTIM_WaitForFlag+0x14>
 80050fe:	2000      	movs	r0, #0

  return result;
}
 8005100:	4770      	bx	lr
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005102:	6803      	ldr	r3, [r0, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
      result = HAL_TIMEOUT;
 8005106:	2003      	movs	r0, #3
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20000004 	.word	0x20000004
 8005110:	d1b71759 	.word	0xd1b71759

08005114 <HAL_LPTIM_AutoReloadMatchCallback>:
}
 8005114:	4770      	bx	lr

08005116 <HAL_LPTIM_TriggerCallback>:
}
 8005116:	4770      	bx	lr

08005118 <HAL_LPTIM_CompareWriteCallback>:
}
 8005118:	4770      	bx	lr

0800511a <HAL_LPTIM_AutoReloadWriteCallback>:
}
 800511a:	4770      	bx	lr

0800511c <HAL_LPTIM_DirectionUpCallback>:
}
 800511c:	4770      	bx	lr

0800511e <HAL_LPTIM_DirectionDownCallback>:
}
 800511e:	4770      	bx	lr

08005120 <HAL_LPTIM_UpdateEventCallback>:
}
 8005120:	4770      	bx	lr

08005122 <HAL_LPTIM_RepCounterWriteCallback>:
}
 8005122:	4770      	bx	lr

08005124 <HAL_LPTIM_IRQHandler>:
{
 8005124:	b510      	push	{r4, lr}
 8005126:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005128:	6803      	ldr	r3, [r0, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f012 0f01 	tst.w	r2, #1
 8005130:	d003      	beq.n	800513a <HAL_LPTIM_IRQHandler+0x16>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	f012 0f01 	tst.w	r2, #1
 8005138:	d148      	bne.n	80051cc <HAL_LPTIM_IRQHandler+0xa8>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	f012 0f02 	tst.w	r2, #2
 8005142:	d003      	beq.n	800514c <HAL_LPTIM_IRQHandler+0x28>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	f012 0f02 	tst.w	r2, #2
 800514a:	d144      	bne.n	80051d6 <HAL_LPTIM_IRQHandler+0xb2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	f012 0f04 	tst.w	r2, #4
 8005154:	d003      	beq.n	800515e <HAL_LPTIM_IRQHandler+0x3a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	f012 0f04 	tst.w	r2, #4
 800515c:	d141      	bne.n	80051e2 <HAL_LPTIM_IRQHandler+0xbe>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f012 0f08 	tst.w	r2, #8
 8005166:	d003      	beq.n	8005170 <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	f012 0f08 	tst.w	r2, #8
 800516e:	d13e      	bne.n	80051ee <HAL_LPTIM_IRQHandler+0xca>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	f012 0f10 	tst.w	r2, #16
 8005178:	d003      	beq.n	8005182 <HAL_LPTIM_IRQHandler+0x5e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	f012 0f10 	tst.w	r2, #16
 8005180:	d13b      	bne.n	80051fa <HAL_LPTIM_IRQHandler+0xd6>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f012 0f20 	tst.w	r2, #32
 800518a:	d003      	beq.n	8005194 <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	f012 0f20 	tst.w	r2, #32
 8005192:	d138      	bne.n	8005206 <HAL_LPTIM_IRQHandler+0xe2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	f012 0f40 	tst.w	r2, #64	; 0x40
 800519c:	d003      	beq.n	80051a6 <HAL_LPTIM_IRQHandler+0x82>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051a4:	d135      	bne.n	8005212 <HAL_LPTIM_IRQHandler+0xee>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051ae:	d003      	beq.n	80051b8 <HAL_LPTIM_IRQHandler+0x94>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051b6:	d132      	bne.n	800521e <HAL_LPTIM_IRQHandler+0xfa>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80051c0:	d003      	beq.n	80051ca <HAL_LPTIM_IRQHandler+0xa6>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80051c8:	d12f      	bne.n	800522a <HAL_LPTIM_IRQHandler+0x106>
}
 80051ca:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80051cc:	2201      	movs	r2, #1
 80051ce:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80051d0:	f7fc fc88 	bl	8001ae4 <HAL_LPTIM_CompareMatchCallback>
 80051d4:	e7b1      	b.n	800513a <HAL_LPTIM_IRQHandler+0x16>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80051d6:	2202      	movs	r2, #2
 80051d8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff ff9a 	bl	8005114 <HAL_LPTIM_AutoReloadMatchCallback>
 80051e0:	e7b4      	b.n	800514c <HAL_LPTIM_IRQHandler+0x28>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80051e2:	2204      	movs	r2, #4
 80051e4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff ff95 	bl	8005116 <HAL_LPTIM_TriggerCallback>
 80051ec:	e7b7      	b.n	800515e <HAL_LPTIM_IRQHandler+0x3a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80051ee:	2208      	movs	r2, #8
 80051f0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff ff90 	bl	8005118 <HAL_LPTIM_CompareWriteCallback>
 80051f8:	e7ba      	b.n	8005170 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80051fa:	2210      	movs	r2, #16
 80051fc:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff ff8b 	bl	800511a <HAL_LPTIM_AutoReloadWriteCallback>
 8005204:	e7bd      	b.n	8005182 <HAL_LPTIM_IRQHandler+0x5e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005206:	2220      	movs	r2, #32
 8005208:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff ff86 	bl	800511c <HAL_LPTIM_DirectionUpCallback>
 8005210:	e7c0      	b.n	8005194 <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff ff81 	bl	800511e <HAL_LPTIM_DirectionDownCallback>
 800521c:	e7c3      	b.n	80051a6 <HAL_LPTIM_IRQHandler+0x82>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff ff7c 	bl	8005120 <HAL_LPTIM_UpdateEventCallback>
 8005228:	e7c6      	b.n	80051b8 <HAL_LPTIM_IRQHandler+0x94>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800522a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800522e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ff76 	bl	8005122 <HAL_LPTIM_RepCounterWriteCallback>
}
 8005236:	e7c8      	b.n	80051ca <HAL_LPTIM_IRQHandler+0xa6>

08005238 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	2301      	movs	r3, #1
 8005244:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005248:	6803      	ldr	r3, [r0, #0]
 800524a:	4a9e      	ldr	r2, [pc, #632]	; (80054c4 <LPTIM_Disable+0x28c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d076      	beq.n	800533e <LPTIM_Disable+0x106>
 8005250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005254:	4293      	cmp	r3, r2
 8005256:	f000 808e 	beq.w	8005376 <LPTIM_Disable+0x13e>
 800525a:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <LPTIM_Disable+0x4a>
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005262:	f8d3 9008 	ldr.w	r9, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8005266:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800526a:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 800526c:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 800526e:	f8d3 b020 	ldr.w	fp, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 8005272:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005276:	4994      	ldr	r1, [pc, #592]	; (80054c8 <LPTIM_Disable+0x290>)
 8005278:	428b      	cmp	r3, r1
 800527a:	f200 811d 	bhi.w	80054b8 <LPTIM_Disable+0x280>
 800527e:	2500      	movs	r5, #0
 8005280:	e01a      	b.n	80052b8 <LPTIM_Disable+0x80>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8005282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005286:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 800528a:	0c2d      	lsrs	r5, r5, #16
 800528c:	f005 050c 	and.w	r5, r5, #12
 8005290:	f445 2540 	orr.w	r5, r5, #786432	; 0xc0000
  tmpIER = hlptim->Instance->IER;
 8005294:	f8d3 9008 	ldr.w	r9, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8005298:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800529c:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 800529e:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 80052a0:	f8d3 b020 	ldr.w	fp, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 80052a4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80052a8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80052aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	638b      	str	r3, [r1, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80052b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80052b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b6:	638b      	str	r3, [r1, #56]	; 0x38
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	f040 80dc 	bne.w	8005476 <LPTIM_Disable+0x23e>
 80052be:	ea57 0308 	orrs.w	r3, r7, r8
 80052c2:	d02a      	beq.n	800531a <LPTIM_Disable+0xe2>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	497f      	ldr	r1, [pc, #508]	; (80054c4 <LPTIM_Disable+0x28c>)
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d070      	beq.n	80053ae <LPTIM_Disable+0x176>
 80052cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052d0:	428b      	cmp	r3, r1
 80052d2:	d075      	beq.n	80053c0 <LPTIM_Disable+0x188>
 80052d4:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 80052d8:	428b      	cmp	r3, r1
 80052da:	d10a      	bne.n	80052f2 <LPTIM_Disable+0xba>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80052e4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80052e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	f040 80cf 	bne.w	8005490 <LPTIM_Disable+0x258>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d16d      	bne.n	80053d2 <LPTIM_Disable+0x19a>
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    if (tmpRCR != 0UL)
 80052f6:	f1b8 0f00 	cmp.w	r8, #0
 80052fa:	d17e      	bne.n	80053fa <LPTIM_Disable+0x1c2>
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	4a71      	ldr	r2, [pc, #452]	; (80054c4 <LPTIM_Disable+0x28c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	f000 809e 	beq.w	8005442 <LPTIM_Disable+0x20a>
 8005306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800530a:	4293      	cmp	r3, r2
 800530c:	f000 80a6 	beq.w	800545c <LPTIM_Disable+0x224>
 8005310:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 8005314:	4293      	cmp	r3, r2
 8005316:	f000 8087 	beq.w	8005428 <LPTIM_Disable+0x1f0>
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	6913      	ldr	r3, [r2, #16]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f8c3 9008 	str.w	r9, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f8c3 a00c 	str.w	sl, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f8c3 b020 	str.w	fp, [r3, #32]
 8005336:	f386 8810 	msr	PRIMASK, r6

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800533a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800533e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005342:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8005346:	0c2d      	lsrs	r5, r5, #16
 8005348:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800534c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  tmpIER = hlptim->Instance->IER;
 8005350:	f8d3 9008 	ldr.w	r9, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8005354:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8005358:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 800535a:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 800535c:	f8d3 b020 	ldr.w	fp, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 8005360:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8005364:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005366:	f043 0320 	orr.w	r3, r3, #32
 800536a:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800536c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800536e:	f023 0320 	bic.w	r3, r3, #32
 8005372:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005374:	e7a0      	b.n	80052b8 <LPTIM_Disable+0x80>
 8005376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800537a:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 800537e:	0c2d      	lsrs	r5, r5, #16
 8005380:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8005384:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
  tmpIER = hlptim->Instance->IER;
 8005388:	f8d3 9008 	ldr.w	r9, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800538c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8005390:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 8005392:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 8005394:	f8d3 b020 	ldr.w	fp, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 8005398:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800539c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a2:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80053a4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80053a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053aa:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80053ac:	e784      	b.n	80052b8 <LPTIM_Disable+0x80>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053be:	e795      	b.n	80052ec <LPTIM_Disable+0xb4>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053d0:	e78c      	b.n	80052ec <LPTIM_Disable+0xb4>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	6913      	ldr	r3, [r2, #16]
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80053e0:	2110      	movs	r1, #16
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7ff fe7a 	bl	80050dc <LPTIM_WaitForFlag>
 80053e8:	2803      	cmp	r0, #3
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80053ea:	bf04      	itt	eq
 80053ec:	2303      	moveq	r3, #3
 80053ee:	f884 303a 	strbeq.w	r3, [r4, #58]	; 0x3a
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e77d      	b.n	80052f6 <LPTIM_Disable+0xbe>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	6913      	ldr	r3, [r2, #16]
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6113      	str	r3, [r2, #16]
      hlptim->Instance->RCR = tmpRCR;
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800540a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fe64 	bl	80050dc <LPTIM_WaitForFlag>
 8005414:	2803      	cmp	r0, #3
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005416:	bf04      	itt	eq
 8005418:	2303      	moveq	r3, #3
 800541a:	f884 303a 	strbeq.w	r3, [r4, #58]	; 0x3a
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e769      	b.n	80052fc <LPTIM_Disable+0xc4>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005430:	0c2a      	lsrs	r2, r5, #16
 8005432:	0412      	lsls	r2, r2, #16
 8005434:	ea23 0302 	bic.w	r3, r3, r2
 8005438:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005440:	e76b      	b.n	800531a <LPTIM_Disable+0xe2>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005446:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800544a:	0c2a      	lsrs	r2, r5, #16
 800544c:	0412      	lsls	r2, r2, #16
 800544e:	ea23 0302 	bic.w	r3, r3, r2
 8005452:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800545a:	e75e      	b.n	800531a <LPTIM_Disable+0xe2>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800545c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005460:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005464:	0c2a      	lsrs	r2, r5, #16
 8005466:	0412      	lsls	r2, r2, #16
 8005468:	ea23 0302 	bic.w	r3, r3, r2
 800546c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005474:	e751      	b.n	800531a <LPTIM_Disable+0xe2>
    switch ((uint32_t)hlptim->Instance)
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	4912      	ldr	r1, [pc, #72]	; (80054c4 <LPTIM_Disable+0x28c>)
 800547a:	428b      	cmp	r3, r1
 800547c:	d097      	beq.n	80053ae <LPTIM_Disable+0x176>
 800547e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005482:	428b      	cmp	r3, r1
 8005484:	d09c      	beq.n	80053c0 <LPTIM_Disable+0x188>
 8005486:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 800548a:	428b      	cmp	r3, r1
 800548c:	f43f af26 	beq.w	80052dc <LPTIM_Disable+0xa4>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005490:	6821      	ldr	r1, [r4, #0]
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800549e:	2108      	movs	r1, #8
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7ff fe1b 	bl	80050dc <LPTIM_WaitForFlag>
 80054a6:	2803      	cmp	r0, #3
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80054a8:	bf04      	itt	eq
 80054aa:	2303      	moveq	r3, #3
 80054ac:	f884 303a 	strbeq.w	r3, [r4, #58]	; 0x3a
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	2208      	movs	r2, #8
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	e71c      	b.n	80052f2 <LPTIM_Disable+0xba>
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80054b8:	b10a      	cbz	r2, 80054be <LPTIM_Disable+0x286>
 80054ba:	2500      	movs	r5, #0
 80054bc:	e7e8      	b.n	8005490 <LPTIM_Disable+0x258>
 80054be:	4615      	mov	r5, r2
 80054c0:	e6fd      	b.n	80052be <LPTIM_Disable+0x86>
 80054c2:	bf00      	nop
 80054c4:	40009400 	.word	0x40009400
 80054c8:	40009800 	.word	0x40009800

080054cc <HAL_LPTIM_Init>:
  if (hlptim == NULL)
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d06f      	beq.n	80055b0 <HAL_LPTIM_Init+0xe4>
{
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	4604      	mov	r4, r0
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80054d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d043      	beq.n	8005564 <HAL_LPTIM_Init+0x98>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80054dc:	2302      	movs	r3, #2
 80054de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  __HAL_LPTIM_ENABLE(hlptim);
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	6913      	ldr	r3, [r2, #16]
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054f2:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7ff fdee 	bl	80050dc <LPTIM_WaitForFlag>
 8005500:	2803      	cmp	r0, #3
 8005502:	d04e      	beq.n	80055a2 <HAL_LPTIM_Init+0xd6>
  __HAL_LPTIM_DISABLE(hlptim);
 8005504:	4620      	mov	r0, r4
 8005506:	f7ff fe97 	bl	8005238 <LPTIM_Disable>
  return hlptim->State;
 800550a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 800550e:	b2c0      	uxtb	r0, r0
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005510:	2803      	cmp	r0, #3
 8005512:	d046      	beq.n	80055a2 <HAL_LPTIM_Init+0xd6>
  tmpcfgr = hlptim->Instance->CFGR;
 8005514:	6825      	ldr	r5, [r4, #0]
 8005516:	68eb      	ldr	r3, [r5, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005518:	6861      	ldr	r1, [r4, #4]
 800551a:	2901      	cmp	r1, #1
 800551c:	d003      	beq.n	8005526 <HAL_LPTIM_Init+0x5a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800551e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005520:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005524:	d101      	bne.n	800552a <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005526:	f023 031e 	bic.w	r3, r3, #30
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800552a:	6962      	ldr	r2, [r4, #20]
 800552c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005530:	4282      	cmp	r2, r0
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005532:	bf1c      	itt	ne
 8005534:	f423 4360 	bicne.w	r3, r3, #57344	; 0xe000
 8005538:	f023 03c0 	bicne.w	r3, r3, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800553c:	481d      	ldr	r0, [pc, #116]	; (80055b4 <HAL_LPTIM_Init+0xe8>)
 800553e:	4018      	ands	r0, r3
              hlptim->Init.CounterSource);
 8005540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	430b      	orrs	r3, r1
              hlptim->Init.Clock.Prescaler |
 8005546:	6a27      	ldr	r7, [r4, #32]
 8005548:	433b      	orrs	r3, r7
              hlptim->Init.OutputPolarity  |
 800554a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800554c:	433b      	orrs	r3, r7
              hlptim->Init.UpdateMode      |
 800554e:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005550:	4303      	orrs	r3, r0
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005552:	b961      	cbnz	r1, 800556e <HAL_LPTIM_Init+0xa2>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005554:	69e1      	ldr	r1, [r4, #28]
 8005556:	6920      	ldr	r0, [r4, #16]
 8005558:	4301      	orrs	r1, r0
 800555a:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800555c:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8005560:	d10b      	bne.n	800557a <HAL_LPTIM_Init+0xae>
 8005562:	e006      	b.n	8005572 <HAL_LPTIM_Init+0xa6>
    hlptim->Lock = HAL_UNLOCKED;
 8005564:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_LPTIM_MspInit(hlptim);
 8005568:	f7fc f940 	bl	80017ec <HAL_LPTIM_MspInit>
 800556c:	e7b6      	b.n	80054dc <HAL_LPTIM_Init+0x10>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800556e:	2901      	cmp	r1, #1
 8005570:	d1f4      	bne.n	800555c <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005572:	68e1      	ldr	r1, [r4, #12]
 8005574:	6920      	ldr	r0, [r4, #16]
 8005576:	4301      	orrs	r1, r0
 8005578:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800557a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800557e:	428a      	cmp	r2, r1
 8005580:	d004      	beq.n	800558c <HAL_LPTIM_Init+0xc0>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005582:	69a1      	ldr	r1, [r4, #24]
 8005584:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 8005586:	69e1      	ldr	r1, [r4, #28]
 8005588:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800558a:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800558c:	60eb      	str	r3, [r5, #12]
  if (hlptim->Instance == LPTIM1)
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <HAL_LPTIM_Init+0xec>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d006      	beq.n	80055a4 <HAL_LPTIM_Init+0xd8>
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005598:	621a      	str	r2, [r3, #32]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800559a:	2301      	movs	r3, #1
 800559c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80055a0:	2000      	movs	r0, #0
}
 80055a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80055a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80055a8:	4313      	orrs	r3, r2
 80055aa:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <HAL_LPTIM_Init+0xec>)
 80055ac:	6213      	str	r3, [r2, #32]
 80055ae:	e7f4      	b.n	800559a <HAL_LPTIM_Init+0xce>
    return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
}
 80055b2:	4770      	bx	lr
 80055b4:	ff19f1fe 	.word	0xff19f1fe
 80055b8:	40007c00 	.word	0x40007c00

080055bc <HAL_LPTIM_TimeOut_Start_IT>:
{
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4604      	mov	r4, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4615      	mov	r5, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80055c4:	2202      	movs	r2, #2
 80055c6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80055ca:	6802      	ldr	r2, [r0, #0]
 80055cc:	4928      	ldr	r1, [pc, #160]	; (8005670 <HAL_LPTIM_TimeOut_Start_IT+0xb4>)
 80055ce:	428a      	cmp	r2, r1
 80055d0:	d045      	beq.n	800565e <HAL_LPTIM_TimeOut_Start_IT+0xa2>
 80055d2:	4928      	ldr	r1, [pc, #160]	; (8005674 <HAL_LPTIM_TimeOut_Start_IT+0xb8>)
 80055d4:	428a      	cmp	r2, r1
 80055d6:	4928      	ldr	r1, [pc, #160]	; (8005678 <HAL_LPTIM_TimeOut_Start_IT+0xbc>)
 80055d8:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80055dc:	bf0c      	ite	eq
 80055de:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80055e2:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 80055e6:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	68d1      	ldr	r1, [r2, #12]
 80055ee:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80055f2:	60d1      	str	r1, [r2, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	6911      	ldr	r1, [r2, #16]
 80055f8:	f041 0101 	orr.w	r1, r1, #1
 80055fc:	6111      	str	r1, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	2110      	movs	r1, #16
 8005602:	6051      	str	r1, [r2, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	6193      	str	r3, [r2, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005608:	4620      	mov	r0, r4
 800560a:	f7ff fd67 	bl	80050dc <LPTIM_WaitForFlag>
 800560e:	2803      	cmp	r0, #3
 8005610:	d024      	beq.n	800565c <HAL_LPTIM_TimeOut_Start_IT+0xa0>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	2108      	movs	r1, #8
 8005616:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	615d      	str	r5, [r3, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff fd5d 	bl	80050dc <LPTIM_WaitForFlag>
 8005622:	2803      	cmp	r0, #3
 8005624:	d01a      	beq.n	800565c <HAL_LPTIM_TimeOut_Start_IT+0xa0>
  __HAL_LPTIM_DISABLE(hlptim);
 8005626:	4620      	mov	r0, r4
 8005628:	f7ff fe06 	bl	8005238 <LPTIM_Disable>
  return hlptim->State;
 800562c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 8005630:	b2c0      	uxtb	r0, r0
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005632:	2803      	cmp	r0, #3
 8005634:	d012      	beq.n	800565c <HAL_LPTIM_TimeOut_Start_IT+0xa0>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	6893      	ldr	r3, [r2, #8]
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 8005640:	6822      	ldr	r2, [r4, #0]
 8005642:	6913      	ldr	r3, [r2, #16]
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	6913      	ldr	r3, [r2, #16]
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005654:	2301      	movs	r3, #1
 8005656:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800565a:	2000      	movs	r0, #0
}
 800565c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800565e:	4906      	ldr	r1, [pc, #24]	; (8005678 <HAL_LPTIM_TimeOut_Start_IT+0xbc>)
 8005660:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8005664:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005668:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800566c:	e7bd      	b.n	80055ea <HAL_LPTIM_TimeOut_Start_IT+0x2e>
 800566e:	bf00      	nop
 8005670:	40007c00 	.word	0x40007c00
 8005674:	40009400 	.word	0x40009400
 8005678:	58000800 	.word	0x58000800

0800567c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800567c:	4a02      	ldr	r2, [pc, #8]	; (8005688 <HAL_PWR_EnableBkUpAccess+0xc>)
 800567e:	6813      	ldr	r3, [r2, #0]
 8005680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	4770      	bx	lr
 8005688:	58000400 	.word	0x58000400

0800568c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800568c:	b510      	push	{r4, lr}
 800568e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005690:	b9a0      	cbnz	r0, 80056bc <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f413 7f00 	tst.w	r3, #512	; 0x200
 800569a:	d10a      	bne.n	80056b2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_PWR_EnterSLEEPMode+0x48>)
 800569e:	6913      	ldr	r3, [r2, #16]
 80056a0:	f023 0304 	bic.w	r3, r3, #4
 80056a4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80056a6:	2c01      	cmp	r4, #1
 80056a8:	d010      	beq.n	80056cc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056aa:	bf40      	sev
    __WFE();
 80056ac:	bf20      	wfe
    __WFE();
 80056ae:	bf20      	wfe
  }
}
 80056b0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056b2:	f000 f821 	bl	80056f8 <HAL_PWREx_DisableLowPowerRunMode>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_PWR_EnterSLEEPMode+0x10>
 80056ba:	e7f9      	b.n	80056b0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_PWR_EnterSLEEPMode+0x44>)
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80056c4:	d1ea      	bne.n	800569c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80056c6:	f000 f80f 	bl	80056e8 <HAL_PWREx_EnableLowPowerRunMode>
 80056ca:	e7e7      	b.n	800569c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80056cc:	bf30      	wfi
 80056ce:	e7ef      	b.n	80056b0 <HAL_PWR_EnterSLEEPMode+0x24>
 80056d0:	58000400 	.word	0x58000400
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <HAL_PWREx_GetVoltageRange+0xc>)
 80056da:	6818      	ldr	r0, [r3, #0]
}
 80056dc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	58000400 	.word	0x58000400

080056e8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80056e8:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f0:	6013      	str	r3, [r2, #0]
}
 80056f2:	4770      	bx	lr
 80056f4:	58000400 	.word	0x58000400

080056f8 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80056f8:	4912      	ldr	r1, [pc, #72]	; (8005744 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 80056fa:	680b      	ldr	r3, [r1, #0]
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005700:	600b      	str	r3, [r1, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	2332      	movs	r3, #50	; 0x32
 8005708:	fb03 f202 	mul.w	r2, r3, r2
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 800570e:	fba3 0302 	umull	r0, r3, r3, r2
 8005712:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005714:	6949      	ldr	r1, [r1, #20]
 8005716:	f411 7f00 	tst.w	r1, #512	; 0x200
 800571a:	d00a      	beq.n	8005732 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 800571c:	490c      	ldr	r1, [pc, #48]	; (8005750 <HAL_PWREx_DisableLowPowerRunMode+0x58>)
 800571e:	428a      	cmp	r2, r1
 8005720:	d907      	bls.n	8005732 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
  {
    wait_loop_index--;
 8005724:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005726:	694a      	ldr	r2, [r1, #20]
 8005728:	f412 7f00 	tst.w	r2, #512	; 0x200
 800572c:	d001      	beq.n	8005732 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f8      	bne.n	8005724 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8005734:	695b      	ldr	r3, [r3, #20]
  {
    return HAL_TIMEOUT;
 8005736:	f413 7f00 	tst.w	r3, #512	; 0x200
  }

  return HAL_OK;
}
 800573a:	bf0c      	ite	eq
 800573c:	2000      	moveq	r0, #0
 800573e:	2003      	movne	r0, #3
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	58000400 	.word	0x58000400
 8005748:	20000004 	.word	0x20000004
 800574c:	431bde83 	.word	0x431bde83
 8005750:	000f423f 	.word	0x000f423f

08005754 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005754:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	f023 0307 	bic.w	r3, r3, #7
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005764:	6913      	ldr	r3, [r2, #16]
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800576c:	2801      	cmp	r0, #1
 800576e:	d008      	beq.n	8005782 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005770:	bf40      	sev
    __WFE();
 8005772:	bf20      	wfe
    __WFE();
 8005774:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005776:	4a05      	ldr	r2, [pc, #20]	; (800578c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005778:	6913      	ldr	r3, [r2, #16]
 800577a:	f023 0304 	bic.w	r3, r3, #4
 800577e:	6113      	str	r3, [r2, #16]
}
 8005780:	4770      	bx	lr
    __WFI();
 8005782:	bf30      	wfi
 8005784:	e7f7      	b.n	8005776 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005786:	bf00      	nop
 8005788:	58000400 	.word	0x58000400
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	b084      	sub	sp, #16
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005798:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800579c:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	4a30      	ldr	r2, [pc, #192]	; (8005868 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 80057a6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80057aa:	4a30      	ldr	r2, [pc, #192]	; (800586c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80057ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b0:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057b4:	f7ff ff90 	bl	80056d8 <HAL_PWREx_GetVoltageRange>
 80057b8:	4605      	mov	r5, r0

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80057ba:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 80057bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057c0:	ab04      	add	r3, sp, #16
 80057c2:	e903 0007 	stmdb	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80057ca:	d027      	beq.n	800581c <RCC_SetFlashLatencyFromMSIRange+0x8c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80057cc:	4b29      	ldr	r3, [pc, #164]	; (8005874 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d33d      	bcc.n	800584e <RCC_SetFlashLatencyFromMSIRange+0xbe>
 80057d2:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 80057d6:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 80057da:	429c      	cmp	r4, r3
 80057dc:	d93e      	bls.n	800585c <RCC_SetFlashLatencyFromMSIRange+0xcc>
 80057de:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80057e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e6:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057e8:	bf98      	it	ls
 80057ea:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80057ec:	d930      	bls.n	8005850 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057ee:	2500      	movs	r5, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057f0:	4a21      	ldr	r2, [pc, #132]	; (8005878 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	432b      	orrs	r3, r5
 80057fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057fc:	f7fc fd4c 	bl	8002298 <HAL_GetTick>
 8005800:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005802:	4e1d      	ldr	r6, [pc, #116]	; (8005878 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	429d      	cmp	r5, r3
 800580c:	d028      	beq.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0xd0>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800580e:	f7fc fd43 	bl	8002298 <HAL_GetTick>
 8005812:	1b00      	subs	r0, r0, r4
 8005814:	2802      	cmp	r0, #2
 8005816:	d9f5      	bls.n	8005804 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
 8005818:	2003      	movs	r0, #3
 800581a:	e022      	b.n	8005862 <RCC_SetFlashLatencyFromMSIRange+0xd2>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <RCC_SetFlashLatencyFromMSIRange+0xec>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d90c      	bls.n	800583c <RCC_SetFlashLatencyFromMSIRange+0xac>
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xf0>)
 8005824:	429c      	cmp	r4, r3
 8005826:	d910      	bls.n	800584a <RCC_SetFlashLatencyFromMSIRange+0xba>
 8005828:	f503 0337 	add.w	r3, r3, #11993088	; 0xb70000
 800582c:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8005830:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005832:	bf98      	it	ls
 8005834:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005836:	d902      	bls.n	800583e <RCC_SetFlashLatencyFromMSIRange+0xae>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005838:	2500      	movs	r5, #0
 800583a:	e7d9      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800583c:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 800583e:	aa04      	add	r2, sp, #16
 8005840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005844:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 8005848:	e7d2      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800584a:	2301      	movs	r3, #1
 800584c:	e7f7      	b.n	800583e <RCC_SetFlashLatencyFromMSIRange+0xae>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800584e:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 8005850:	aa04      	add	r2, sp, #16
 8005852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005856:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 800585a:	e7c9      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800585c:	2301      	movs	r3, #1
 800585e:	e7f7      	b.n	8005850 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    }
  }
  return HAL_OK;
 8005860:	2000      	movs	r0, #0
}
 8005862:	b004      	add	sp, #16
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	bf00      	nop
 8005868:	08013200 	.word	0x08013200
 800586c:	080131a0 	.word	0x080131a0
 8005870:	08013128 	.word	0x08013128
 8005874:	006acfc0 	.word	0x006acfc0
 8005878:	58004000 	.word	0x58004000
 800587c:	0121eabf 	.word	0x0121eabf
 8005880:	0234933f 	.word	0x0234933f

08005884 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005888:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800588a:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800588c:	f013 030c 	ands.w	r3, r3, #12
 8005890:	d015      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x3a>
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x2c>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005896:	2b04      	cmp	r3, #4
 8005898:	d04a      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0xac>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800589a:	2b08      	cmp	r3, #8
 800589c:	d14b      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80058a8:	d048      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msifreq = 0U;
 80058aa:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80058ac:	4838      	ldr	r0, [pc, #224]	; (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058ae:	e02d      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058b0:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	d002      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x3a>
  uint32_t msifreq = 0U;
 80058b8:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80058ba:	4610      	mov	r0, r2
 80058bc:	e026      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	f012 0208 	ands.w	r2, r2, #8
 80058c8:	d00d      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0x62>
 80058ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	f012 0208 	ands.w	r2, r2, #8
 80058d4:	d126      	bne.n	8005924 <HAL_RCC_GetSysClockFreq+0xa0>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058da:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80058de:	492d      	ldr	r1, [pc, #180]	; (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 80058e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058e4:	e00e      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x80>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80058e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ea:	6809      	ldr	r1, [r1, #0]
 80058ec:	f011 0f08 	tst.w	r1, #8
 80058f0:	d114      	bne.n	800591c <HAL_RCC_GetSysClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80058fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80058fe:	4925      	ldr	r1, [pc, #148]	; (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 8005900:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      sysclockfreq = msifreq;
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf0c      	ite	eq
 8005908:	4610      	moveq	r0, r2
 800590a:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005916:	2b0c      	cmp	r3, #12
 8005918:	d012      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0xbc>
}
 800591a:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800591c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005920:	6809      	ldr	r1, [r1, #0]
 8005922:	e7ec      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x7a>
 8005924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005928:	6812      	ldr	r2, [r2, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800592a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800592e:	e7d6      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x5a>
  uint32_t msifreq = 0U;
 8005930:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005932:	4817      	ldr	r0, [pc, #92]	; (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005934:	e7ea      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t msifreq = 0U;
 8005936:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005938:	4610      	mov	r0, r2
 800593a:	e7e7      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
      sysclockfreq = HSE_VALUE;
 800593c:	4816      	ldr	r0, [pc, #88]	; (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 800593e:	e7e5      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800594a:	2b02      	cmp	r3, #2
 800594c:	d01d      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x106>
 800594e:	2b03      	cmp	r3, #3
 8005950:	d108      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	681b      	ldr	r3, [r3, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8005958:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800595c:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005960:	bf18      	it	ne
 8005962:	461a      	movne	r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800596a:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800596c:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800596e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005972:	fb02 f000 	mul.w	r0, r2, r0
 8005976:	f3c1 1202 	ubfx	r2, r1, #4, #3
 800597a:	3201      	adds	r2, #1
 800597c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	3301      	adds	r3, #1
 8005984:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005988:	e7c7      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x96>
        pllinputfreq = HSI_VALUE;
 800598a:	4a01      	ldr	r2, [pc, #4]	; (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 800598c:	e7ea      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xe0>
 800598e:	bf00      	nop
 8005990:	00f42400 	.word	0x00f42400
 8005994:	08013200 	.word	0x08013200
 8005998:	01e84800 	.word	0x01e84800

0800599c <HAL_RCC_GetHCLKFreq>:
{
 800599c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800599e:	f7ff ff71 	bl	8005884 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059ac:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80059ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80059b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80059b6:	bd08      	pop	{r3, pc}
 80059b8:	080131a0 	.word	0x080131a0

080059bc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80059bc:	2800      	cmp	r0, #0
 80059be:	f000 830b 	beq.w	8005fd8 <HAL_RCC_OscConfig+0x61c>
{
 80059c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	689d      	ldr	r5, [r3, #8]
 80059ce:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059d2:	68de      	ldr	r6, [r3, #12]
 80059d4:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059d8:	6803      	ldr	r3, [r0, #0]
 80059da:	f013 0f20 	tst.w	r3, #32
 80059de:	d02b      	beq.n	8005a38 <HAL_RCC_OscConfig+0x7c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	d067      	beq.n	8005ab4 <HAL_RCC_OscConfig+0xf8>
 80059e4:	2d0c      	cmp	r5, #12
 80059e6:	d063      	beq.n	8005ab0 <HAL_RCC_OscConfig+0xf4>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059e8:	6a23      	ldr	r3, [r4, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80bc 	beq.w	8005b68 <HAL_RCC_OscConfig+0x1ac>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80059f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80059fc:	f7fc fc4c 	bl	8002298 <HAL_GetTick>
 8005a00:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a02:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8005a06:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0a:	f013 0f02 	tst.w	r3, #2
 8005a0e:	f000 80a3 	beq.w	8005b58 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	f042 0208 	orr.w	r2, r2, #8
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a2e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005a32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a36:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	f013 0f01 	tst.w	r3, #1
 8005a3e:	f000 80b2 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x1ea>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a42:	2d08      	cmp	r5, #8
 8005a44:	f000 80ab 	beq.w	8005b9e <HAL_RCC_OscConfig+0x1e2>
 8005a48:	2d0c      	cmp	r5, #12
 8005a4a:	f000 80a5 	beq.w	8005b98 <HAL_RCC_OscConfig+0x1dc>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a58:	68a1      	ldr	r1, [r4, #8]
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	f000 80c1 	beq.w	8005bea <HAL_RCC_OscConfig+0x22e>
 8005a68:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005a6c:	f000 80c2 	beq.w	8005bf4 <HAL_RCC_OscConfig+0x238>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005a82:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80bf 	beq.w	8005c0a <HAL_RCC_OscConfig+0x24e>
        tickstart = HAL_GetTick();
 8005a8c:	f7fc fc04 	bl	8002298 <HAL_GetTick>
 8005a90:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a92:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8005a96:	f8d8 3000 	ldr.w	r3, [r8]
 8005a9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a9e:	f040 8082 	bne.w	8005ba6 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa2:	f7fc fbf9 	bl	8002298 <HAL_GetTick>
 8005aa6:	1bc0      	subs	r0, r0, r7
 8005aa8:	2864      	cmp	r0, #100	; 0x64
 8005aaa:	d9f4      	bls.n	8005a96 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8005aac:	2003      	movs	r0, #3
 8005aae:	e2a0      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ab0:	2e01      	cmp	r6, #1
 8005ab2:	d199      	bne.n	80059e8 <HAL_RCC_OscConfig+0x2c>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ab4:	6a23      	ldr	r3, [r4, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8290 	beq.w	8005fdc <HAL_RCC_OscConfig+0x620>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005abc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f013 0f08 	tst.w	r3, #8
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	bf12      	itee	ne
 8005ace:	681b      	ldrne	r3, [r3, #0]
 8005ad0:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8005ad4:	091b      	lsreq	r3, r3, #4
 8005ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ada:	4298      	cmp	r0, r3
 8005adc:	d922      	bls.n	8005b24 <HAL_RCC_OscConfig+0x168>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ade:	f7ff fe57 	bl	8005790 <RCC_SetFlashLatencyFromMSIRange>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f040 827c 	bne.w	8005fe0 <HAL_RCC_OscConfig+0x624>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f042 0208 	orr.w	r2, r2, #8
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005afa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b04:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005b08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b0c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b0e:	f7ff ff45 	bl	800599c <HAL_RCC_GetHCLKFreq>
 8005b12:	4bb6      	ldr	r3, [pc, #728]	; (8005dec <HAL_RCC_OscConfig+0x430>)
 8005b14:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005b16:	4bb6      	ldr	r3, [pc, #728]	; (8005df0 <HAL_RCC_OscConfig+0x434>)
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f7fc fbbb 	bl	8002294 <HAL_InitTick>
        if (status != HAL_OK)
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d08a      	beq.n	8005a38 <HAL_RCC_OscConfig+0x7c>
 8005b22:	e266      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005b36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b40:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b48:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b4c:	f7ff fe20 	bl	8005790 <RCC_SetFlashLatencyFromMSIRange>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0dc      	beq.n	8005b0e <HAL_RCC_OscConfig+0x152>
            return HAL_ERROR;
 8005b54:	2001      	movs	r0, #1
 8005b56:	e24c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b58:	f7fc fb9e 	bl	8002298 <HAL_GetTick>
 8005b5c:	1bc0      	subs	r0, r0, r7
 8005b5e:	2802      	cmp	r0, #2
 8005b60:	f67f af51 	bls.w	8005a06 <HAL_RCC_OscConfig+0x4a>
            return HAL_TIMEOUT;
 8005b64:	2003      	movs	r0, #3
 8005b66:	e244      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6c:	6813      	ldr	r3, [r2, #0]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b74:	f7fc fb90 	bl	8002298 <HAL_GetTick>
 8005b78:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b7a:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8005b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b82:	f013 0f02 	tst.w	r3, #2
 8005b86:	f43f af57 	beq.w	8005a38 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b8a:	f7fc fb85 	bl	8002298 <HAL_GetTick>
 8005b8e:	1bc0      	subs	r0, r0, r7
 8005b90:	2802      	cmp	r0, #2
 8005b92:	d9f4      	bls.n	8005b7e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005b94:	2003      	movs	r0, #3
 8005b96:	e22c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b98:	2e03      	cmp	r6, #3
 8005b9a:	f47f af58 	bne.w	8005a4e <HAL_RCC_OscConfig+0x92>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 821f 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x628>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f013 0f02 	tst.w	r3, #2
 8005bac:	d057      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005bae:	2d04      	cmp	r5, #4
 8005bb0:	d03e      	beq.n	8005c30 <HAL_RCC_OscConfig+0x274>
 8005bb2:	2d0c      	cmp	r5, #12
 8005bb4:	d03a      	beq.n	8005c2c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 808b 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bca:	f7fc fb65 	bl	8002298 <HAL_GetTick>
 8005bce:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005bd0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005bda:	d137      	bne.n	8005c4c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bdc:	f7fc fb5c 	bl	8002298 <HAL_GetTick>
 8005be0:	1b80      	subs	r0, r0, r6
 8005be2:	2802      	cmp	r0, #2
 8005be4:	d9f6      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005be6:	2003      	movs	r0, #3
 8005be8:	e203      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	e747      	b.n	8005a84 <HAL_RCC_OscConfig+0xc8>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005bfe:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	e73c      	b.n	8005a84 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8005c0a:	f7fc fb45 	bl	8002298 <HAL_GetTick>
 8005c0e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c10:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8005c14:	f8d8 3000 	ldr.w	r3, [r8]
 8005c18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c1c:	d0c3      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c1e:	f7fc fb3b 	bl	8002298 <HAL_GetTick>
 8005c22:	1bc0      	subs	r0, r0, r7
 8005c24:	2864      	cmp	r0, #100	; 0x64
 8005c26:	d9f5      	bls.n	8005c14 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005c28:	2003      	movs	r0, #3
 8005c2a:	e1e2      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c2c:	2e02      	cmp	r6, #2
 8005c2e:	d1c2      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x1fa>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 81d8 	beq.w	8005fe8 <HAL_RCC_OscConfig+0x62c>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3c:	6853      	ldr	r3, [r2, #4]
 8005c3e:	6961      	ldr	r1, [r4, #20]
 8005c40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c48:	6053      	str	r3, [r2, #4]
}
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x2a2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c50:	6853      	ldr	r3, [r2, #4]
 8005c52:	6961      	ldr	r1, [r4, #20]
 8005c54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c5c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f013 0f08 	tst.w	r3, #8
 8005c64:	d07e      	beq.n	8005d64 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c66:	69a3      	ldr	r3, [r4, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d062      	beq.n	8005d32 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005c74:	f003 0210 	and.w	r2, r3, #16
 8005c78:	69e1      	ldr	r1, [r4, #28]
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	d011      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c7e:	f003 0203 	and.w	r2, r3, #3
 8005c82:	2a02      	cmp	r2, #2
 8005c84:	f000 81b2 	beq.w	8005fec <HAL_RCC_OscConfig+0x630>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005c88:	f013 0f01 	tst.w	r3, #1
 8005c8c:	d138      	bne.n	8005d00 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c92:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	69e1      	ldr	r1, [r4, #28]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005cb2:	f7fc faf1 	bl	8002298 <HAL_GetTick>
 8005cb6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005cb8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cc0:	f013 0f02 	tst.w	r3, #2
 8005cc4:	d14e      	bne.n	8005d64 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc6:	f7fc fae7 	bl	8002298 <HAL_GetTick>
 8005cca:	1b80      	subs	r0, r0, r6
 8005ccc:	2811      	cmp	r0, #17
 8005cce:	d9f5      	bls.n	8005cbc <HAL_RCC_OscConfig+0x300>
          return HAL_TIMEOUT;
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	e18e      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd8:	6813      	ldr	r3, [r2, #0]
 8005cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cde:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fada 	bl	8002298 <HAL_GetTick>
 8005ce4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ce6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005cf0:	d0b5      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fc fad1 	bl	8002298 <HAL_GetTick>
 8005cf6:	1b80      	subs	r0, r0, r6
 8005cf8:	2802      	cmp	r0, #2
 8005cfa:	d9f6      	bls.n	8005cea <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8005cfc:	2003      	movs	r0, #3
 8005cfe:	e178      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d04:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005d10:	f7fc fac2 	bl	8002298 <HAL_GetTick>
 8005d14:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d16:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d1e:	f013 0f02 	tst.w	r3, #2
 8005d22:	d0b4      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fc fab8 	bl	8002298 <HAL_GetTick>
 8005d28:	1b80      	subs	r0, r0, r6
 8005d2a:	2811      	cmp	r0, #17
 8005d2c:	d9f5      	bls.n	8005d1a <HAL_RCC_OscConfig+0x35e>
              return HAL_TIMEOUT;
 8005d2e:	2003      	movs	r0, #3
 8005d30:	e15f      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d36:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005d42:	f7fc faa9 	bl	8002298 <HAL_GetTick>
 8005d46:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d48:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8005d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d50:	f013 0f02 	tst.w	r3, #2
 8005d54:	d006      	beq.n	8005d64 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d56:	f7fc fa9f 	bl	8002298 <HAL_GetTick>
 8005d5a:	1b80      	subs	r0, r0, r6
 8005d5c:	2811      	cmp	r0, #17
 8005d5e:	d9f5      	bls.n	8005d4c <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8005d60:	2003      	movs	r0, #3
 8005d62:	e146      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	f013 0f04 	tst.w	r3, #4
 8005d6a:	f000 80b2 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x516>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005d6e:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <HAL_RCC_OscConfig+0x438>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d76:	d110      	bne.n	8005d9a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005d78:	f7ff fc80 	bl	800567c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005d7c:	f7fc fa8c 	bl	8002298 <HAL_GetTick>
 8005d80:	4606      	mov	r6, r0
 8005d82:	4f1c      	ldr	r7, [pc, #112]	; (8005df4 <HAL_RCC_OscConfig+0x438>)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d8a:	d106      	bne.n	8005d9a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fc fa84 	bl	8002298 <HAL_GetTick>
 8005d90:	1b80      	subs	r0, r0, r6
 8005d92:	2802      	cmp	r0, #2
 8005d94:	d9f6      	bls.n	8005d84 <HAL_RCC_OscConfig+0x3c8>
          return HAL_TIMEOUT;
 8005d96:	2003      	movs	r0, #3
 8005d98:	e12b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d064      	beq.n	8005e6a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da4:	2b05      	cmp	r3, #5
 8005da6:	d107      	bne.n	8005db8 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005db8:	f7fc fa6e 	bl	8002298 <HAL_GetTick>
 8005dbc:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dce:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd0:	f241 3888 	movw	r8, #5000	; 0x1388
 8005dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dd8:	f013 0f02 	tst.w	r3, #2
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x43c>
 8005dde:	f7fc fa5b 	bl	8002298 <HAL_GetTick>
 8005de2:	1b80      	subs	r0, r0, r6
 8005de4:	4540      	cmp	r0, r8
 8005de6:	d9f5      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x418>
          return HAL_TIMEOUT;
 8005de8:	2003      	movs	r0, #3
 8005dea:	e102      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
 8005dec:	20000004 	.word	0x20000004
 8005df0:	2000000c 	.word	0x2000000c
 8005df4:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005df8:	68e3      	ldr	r3, [r4, #12]
 8005dfa:	f023 0304 	bic.w	r3, r3, #4
 8005dfe:	2b81      	cmp	r3, #129	; 0x81
 8005e00:	d019      	beq.n	8005e36 <HAL_RCC_OscConfig+0x47a>
        tickstart = HAL_GetTick();
 8005e02:	f7fc fa49 	bl	8002298 <HAL_GetTick>
 8005e06:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e18:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e22:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e26:	d054      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e28:	f7fc fa36 	bl	8002298 <HAL_GetTick>
 8005e2c:	1b80      	subs	r0, r0, r6
 8005e2e:	4540      	cmp	r0, r8
 8005e30:	d9f5      	bls.n	8005e1e <HAL_RCC_OscConfig+0x462>
            return HAL_TIMEOUT;
 8005e32:	2003      	movs	r0, #3
 8005e34:	e0dd      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        tickstart = HAL_GetTick();
 8005e36:	f7fc fa2f 	bl	8002298 <HAL_GetTick>
 8005e3a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e4c:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e56:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e5a:	d13a      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5c:	f7fc fa1c 	bl	8002298 <HAL_GetTick>
 8005e60:	1b80      	subs	r0, r0, r6
 8005e62:	4540      	cmp	r0, r8
 8005e64:	d9f5      	bls.n	8005e52 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005e66:	2003      	movs	r0, #3
 8005e68:	e0c3      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 8005e6a:	f7fc fa15 	bl	8002298 <HAL_GetTick>
 8005e6e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e80:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e8e:	d006      	beq.n	8005e9e <HAL_RCC_OscConfig+0x4e2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fc fa02 	bl	8002298 <HAL_GetTick>
 8005e94:	1b80      	subs	r0, r0, r6
 8005e96:	4540      	cmp	r0, r8
 8005e98:	d9f5      	bls.n	8005e86 <HAL_RCC_OscConfig+0x4ca>
          return HAL_TIMEOUT;
 8005e9a:	2003      	movs	r0, #3
 8005e9c:	e0a9      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 8005e9e:	f7fc f9fb 	bl	8002298 <HAL_GetTick>
 8005ea2:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb4:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f241 3888 	movw	r8, #5000	; 0x1388
 8005eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ebe:	f013 0f02 	tst.w	r3, #2
 8005ec2:	d006      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x516>
 8005ec4:	f7fc f9e8 	bl	8002298 <HAL_GetTick>
 8005ec8:	1b80      	subs	r0, r0, r6
 8005eca:	4540      	cmp	r0, r8
 8005ecc:	d9f5      	bls.n	8005eba <HAL_RCC_OscConfig+0x4fe>
          return HAL_TIMEOUT;
 8005ece:	2003      	movs	r0, #3
 8005ed0:	e08f      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 808b 	beq.w	8005ff0 <HAL_RCC_OscConfig+0x634>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eda:	2d0c      	cmp	r5, #12
 8005edc:	d060      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x5e4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d016      	beq.n	8005f10 <HAL_RCC_OscConfig+0x554>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005eee:	f7fc f9d3 	bl	8002298 <HAL_GetTick>
 8005ef2:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ef4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005efe:	d148      	bne.n	8005f92 <HAL_RCC_OscConfig+0x5d6>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f04:	68d1      	ldr	r1, [r2, #12]
 8005f06:	4b41      	ldr	r3, [pc, #260]	; (800600c <HAL_RCC_OscConfig+0x650>)
 8005f08:	400b      	ands	r3, r1
 8005f0a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e070      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f14:	6813      	ldr	r3, [r2, #0]
 8005f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f1c:	f7fc f9bc 	bl	8002298 <HAL_GetTick>
 8005f20:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f22:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8005f26:	6833      	ldr	r3, [r6, #0]
 8005f28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f2c:	d12a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f32:	68d0      	ldr	r0, [r2, #12]
 8005f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	4935      	ldr	r1, [pc, #212]	; (8006010 <HAL_RCC_OscConfig+0x654>)
 8005f3c:	4001      	ands	r1, r0
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f52:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f54:	6813      	ldr	r3, [r2, #0]
 8005f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f5c:	68d3      	ldr	r3, [r2, #12]
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005f64:	f7fc f998 	bl	8002298 <HAL_GetTick>
 8005f68:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f6a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005f6e:	682b      	ldr	r3, [r5, #0]
 8005f70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f74:	d13f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x63a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f76:	f7fc f98f 	bl	8002298 <HAL_GetTick>
 8005f7a:	1b00      	subs	r0, r0, r4
 8005f7c:	280a      	cmp	r0, #10
 8005f7e:	d9f6      	bls.n	8005f6e <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
 8005f80:	2003      	movs	r0, #3
 8005f82:	e036      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fc f988 	bl	8002298 <HAL_GetTick>
 8005f88:	1b40      	subs	r0, r0, r5
 8005f8a:	280a      	cmp	r0, #10
 8005f8c:	d9cb      	bls.n	8005f26 <HAL_RCC_OscConfig+0x56a>
            return HAL_TIMEOUT;
 8005f8e:	2003      	movs	r0, #3
 8005f90:	e02f      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f92:	f7fc f981 	bl	8002298 <HAL_GetTick>
 8005f96:	1b00      	subs	r0, r0, r4
 8005f98:	280a      	cmp	r0, #10
 8005f9a:	d9ad      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x53c>
            return HAL_TIMEOUT;
 8005f9c:	2003      	movs	r0, #3
 8005f9e:	e028      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d02a      	beq.n	8005ffa <HAL_RCC_OscConfig+0x63e>
        pll_config = RCC->PLLCFGR;
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa8:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005faa:	f003 0103 	and.w	r1, r3, #3
 8005fae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005fb0:	4291      	cmp	r1, r2
 8005fb2:	d124      	bne.n	8005ffe <HAL_RCC_OscConfig+0x642>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005fb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fba:	428a      	cmp	r2, r1
 8005fbc:	d121      	bne.n	8006002 <HAL_RCC_OscConfig+0x646>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005fbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fc4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005fc8:	d11d      	bne.n	8006006 <HAL_RCC_OscConfig+0x64a>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005fca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005fce:	6c60      	ldr	r0, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005fd0:	1a18      	subs	r0, r3, r0
 8005fd2:	bf18      	it	ne
 8005fd4:	2001      	movne	r0, #1
 8005fd6:	e00c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
 8005fd8:	2001      	movs	r0, #1
}
 8005fda:	4770      	bx	lr
        return HAL_ERROR;
 8005fdc:	2001      	movs	r0, #1
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
            return HAL_ERROR;
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e006      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 8005fec:	2001      	movs	r0, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8005ff0:	2000      	movs	r0, #0
}
 8005ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e7fb      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7f9      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7f7      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
 8006002:	2001      	movs	r0, #1
 8006004:	e7f5      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
 8006006:	2001      	movs	r0, #1
 8006008:	e7f3      	b.n	8005ff2 <HAL_RCC_OscConfig+0x636>
 800600a:	bf00      	nop
 800600c:	eefefffc 	.word	0xeefefffc
 8006010:	11c1808c 	.word	0x11c1808c

08006014 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006014:	2800      	cmp	r0, #0
 8006016:	f000 8106 	beq.w	8006226 <HAL_RCC_ClockConfig+0x212>
{
 800601a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601e:	460c      	mov	r4, r1
 8006020:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006022:	4b83      	ldr	r3, [pc, #524]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	428b      	cmp	r3, r1
 800602c:	d327      	bcc.n	800607e <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800602e:	682b      	ldr	r3, [r5, #0]
 8006030:	f013 0f02 	tst.w	r3, #2
 8006034:	d139      	bne.n	80060aa <HAL_RCC_ClockConfig+0x96>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800603c:	d14d      	bne.n	80060da <HAL_RCC_ClockConfig+0xc6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	f013 0f04 	tst.w	r3, #4
 8006044:	d165      	bne.n	8006112 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006046:	682b      	ldr	r3, [r5, #0]
 8006048:	f013 0f08 	tst.w	r3, #8
 800604c:	d179      	bne.n	8006142 <HAL_RCC_ClockConfig+0x12e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	f013 0f01 	tst.w	r3, #1
 8006054:	f000 80c1 	beq.w	80061da <HAL_RCC_ClockConfig+0x1c6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006058:	686b      	ldr	r3, [r5, #4]
 800605a:	2b02      	cmp	r3, #2
 800605c:	f000 808b 	beq.w	8006176 <HAL_RCC_ClockConfig+0x162>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006060:	2b03      	cmp	r3, #3
 8006062:	f000 8090 	beq.w	8006186 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 8095 	bne.w	8006196 <HAL_RCC_ClockConfig+0x182>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800606c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	f012 0f02 	tst.w	r2, #2
 8006076:	f040 8094 	bne.w	80061a2 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 800607a:	2001      	movs	r0, #1
 800607c:	e0d1      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4a6c      	ldr	r2, [pc, #432]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	f023 0307 	bic.w	r3, r3, #7
 8006086:	430b      	orrs	r3, r1
 8006088:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800608a:	f7fc f905 	bl	8002298 <HAL_GetTick>
 800608e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006090:	4f67      	ldr	r7, [pc, #412]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	42a3      	cmp	r3, r4
 800609a:	d0c8      	beq.n	800602e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800609c:	f7fc f8fc 	bl	8002298 <HAL_GetTick>
 80060a0:	1b80      	subs	r0, r0, r6
 80060a2:	2802      	cmp	r0, #2
 80060a4:	d9f5      	bls.n	8006092 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80060a6:	2003      	movs	r0, #3
 80060a8:	e0bb      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80060aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ae:	6893      	ldr	r3, [r2, #8]
 80060b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b4:	68a9      	ldr	r1, [r5, #8]
 80060b6:	430b      	orrs	r3, r1
 80060b8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80060ba:	f7fc f8ed 	bl	8002298 <HAL_GetTick>
 80060be:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80060c0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80060ca:	d1b4      	bne.n	8006036 <HAL_RCC_ClockConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060cc:	f7fc f8e4 	bl	8002298 <HAL_GetTick>
 80060d0:	1b80      	subs	r0, r0, r6
 80060d2:	2802      	cmp	r0, #2
 80060d4:	d9f6      	bls.n	80060c4 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 80060d6:	2003      	movs	r0, #3
 80060d8:	e0a3      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80060da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060de:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80060e2:	6969      	ldr	r1, [r5, #20]
 80060e4:	f023 030f 	bic.w	r3, r3, #15
 80060e8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80060ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80060f0:	f7fc f8d2 	bl	8002298 <HAL_GetTick>
 80060f4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80060f6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80060fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006102:	d19c      	bne.n	800603e <HAL_RCC_ClockConfig+0x2a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006104:	f7fc f8c8 	bl	8002298 <HAL_GetTick>
 8006108:	1b80      	subs	r0, r0, r6
 800610a:	2802      	cmp	r0, #2
 800610c:	d9f5      	bls.n	80060fa <HAL_RCC_ClockConfig+0xe6>
        return HAL_TIMEOUT;
 800610e:	2003      	movs	r0, #3
 8006110:	e087      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006116:	6893      	ldr	r3, [r2, #8]
 8006118:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800611c:	68e9      	ldr	r1, [r5, #12]
 800611e:	430b      	orrs	r3, r1
 8006120:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006122:	f7fc f8b9 	bl	8002298 <HAL_GetTick>
 8006126:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006128:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006132:	d188      	bne.n	8006046 <HAL_RCC_ClockConfig+0x32>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006134:	f7fc f8b0 	bl	8002298 <HAL_GetTick>
 8006138:	1b80      	subs	r0, r0, r6
 800613a:	2802      	cmp	r0, #2
 800613c:	d9f6      	bls.n	800612c <HAL_RCC_ClockConfig+0x118>
        return HAL_TIMEOUT;
 800613e:	2003      	movs	r0, #3
 8006140:	e06f      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006146:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006148:	6929      	ldr	r1, [r5, #16]
 800614a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800614e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006152:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006154:	f7fc f8a0 	bl	8002298 <HAL_GetTick>
 8006158:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800615a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006164:	f47f af73 	bne.w	800604e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006168:	f7fc f896 	bl	8002298 <HAL_GetTick>
 800616c:	1b80      	subs	r0, r0, r6
 800616e:	2802      	cmp	r0, #2
 8006170:	d9f5      	bls.n	800615e <HAL_RCC_ClockConfig+0x14a>
        return HAL_TIMEOUT;
 8006172:	2003      	movs	r0, #3
 8006174:	e055      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006180:	d10f      	bne.n	80061a2 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8006182:	2001      	movs	r0, #1
 8006184:	e04d      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006190:	d107      	bne.n	80061a2 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8006192:	2001      	movs	r0, #1
 8006194:	e045      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80061a0:	d043      	beq.n	800622a <HAL_RCC_ClockConfig+0x216>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80061a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a6:	688a      	ldr	r2, [r1, #8]
 80061a8:	f022 0203 	bic.w	r2, r2, #3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80061b0:	f7fc f872 	bl	8002298 <HAL_GetTick>
 80061b4:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ba:	f241 3888 	movw	r8, #5000	; 0x1388
 80061be:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c0:	686a      	ldr	r2, [r5, #4]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80061ca:	d006      	beq.n	80061da <HAL_RCC_ClockConfig+0x1c6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061cc:	f7fc f864 	bl	8002298 <HAL_GetTick>
 80061d0:	1b80      	subs	r0, r0, r6
 80061d2:	4540      	cmp	r0, r8
 80061d4:	d9f3      	bls.n	80061be <HAL_RCC_ClockConfig+0x1aa>
        return HAL_TIMEOUT;
 80061d6:	2003      	movs	r0, #3
 80061d8:	e023      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	d915      	bls.n	8006212 <HAL_RCC_ClockConfig+0x1fe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	4323      	orrs	r3, r4
 80061f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061f2:	f7fc f851 	bl	8002298 <HAL_GetTick>
 80061f6:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f8:	4e0d      	ldr	r6, [pc, #52]	; (8006230 <HAL_RCC_ClockConfig+0x21c>)
 80061fa:	6833      	ldr	r3, [r6, #0]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	42a3      	cmp	r3, r4
 8006202:	d006      	beq.n	8006212 <HAL_RCC_ClockConfig+0x1fe>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006204:	f7fc f848 	bl	8002298 <HAL_GetTick>
 8006208:	1b40      	subs	r0, r0, r5
 800620a:	2802      	cmp	r0, #2
 800620c:	d9f5      	bls.n	80061fa <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800620e:	2003      	movs	r0, #3
 8006210:	e007      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006212:	f7ff fbc3 	bl	800599c <HAL_RCC_GetHCLKFreq>
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <HAL_RCC_ClockConfig+0x220>)
 8006218:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <HAL_RCC_ClockConfig+0x224>)
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	f7fc f839 	bl	8002294 <HAL_InitTick>
}
 8006222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8006226:	2001      	movs	r0, #1
}
 8006228:	4770      	bx	lr
        return HAL_ERROR;
 800622a:	2001      	movs	r0, #1
 800622c:	e7f9      	b.n	8006222 <HAL_RCC_ClockConfig+0x20e>
 800622e:	bf00      	nop
 8006230:	58004000 	.word	0x58004000
 8006234:	20000004 	.word	0x20000004
 8006238:	2000000c 	.word	0x2000000c

0800623c <HAL_RCC_GetPCLK1Freq>:
{
 800623c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800623e:	f7ff fbad 	bl	800599c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800624c:	4a02      	ldr	r2, [pc, #8]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006252:	40d8      	lsrs	r0, r3
 8006254:	bd08      	pop	{r3, pc}
 8006256:	bf00      	nop
 8006258:	080131e0 	.word	0x080131e0

0800625c <HAL_RCC_GetPCLK2Freq>:
{
 800625c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800625e:	f7ff fb9d 	bl	800599c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800626c:	4a02      	ldr	r2, [pc, #8]	; (8006278 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800626e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006272:	40d8      	lsrs	r0, r3
 8006274:	bd08      	pop	{r3, pc}
 8006276:	bf00      	nop
 8006278:	080131e0 	.word	0x080131e0

0800627c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006286:	f040 80a5 	bne.w	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800628a:	2000      	movs	r0, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	f013 0f01 	tst.w	r3, #1
 8006292:	d00a      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006294:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800629e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80062a2:	b292      	uxth	r2, r2
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	f013 0f02 	tst.w	r3, #2
 80062b0:	d00a      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062b2:	68a2      	ldr	r2, [r4, #8]
 80062b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062bc:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80062c0:	b292      	uxth	r2, r2
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	f013 0f20 	tst.w	r3, #32
 80062ce:	d009      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80062d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062dc:	6921      	ldr	r1, [r4, #16]
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062ea:	d00c      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062ec:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062f6:	0c2a      	lsrs	r2, r5, #16
 80062f8:	0412      	lsls	r2, r2, #16
 80062fa:	ea23 0302 	bic.w	r3, r3, r2
 80062fe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800630c:	d00c      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800630e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006314:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006318:	0c2a      	lsrs	r2, r5, #16
 800631a:	0412      	lsls	r2, r2, #16
 800631c:	ea23 0302 	bic.w	r3, r3, r2
 8006320:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800632e:	d00c      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006330:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006336:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800633a:	0c2a      	lsrs	r2, r5, #16
 800633c:	0412      	lsls	r2, r2, #16
 800633e:	ea23 0302 	bic.w	r3, r3, r2
 8006342:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006350:	d151      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006358:	d15e      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006360:	d16b      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f013 0f10 	tst.w	r3, #16
 8006368:	d00d      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800636a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	68e1      	ldr	r1, [r4, #12]
 8006378:	430b      	orrs	r3, r1
 800637a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006384:	d06a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800638c:	d00f      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800638e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006392:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006396:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800639a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800639c:	430b      	orrs	r3, r1
 800639e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063a4:	b91b      	cbnz	r3, 80063ae <HAL_RCCEx_PeriphCLKConfig+0x132>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80063a6:	68d3      	ldr	r3, [r2, #12]
 80063a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80063b4:	d00d      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80063be:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80063c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80063c4:	430b      	orrs	r3, r1
 80063c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80063ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d0:	d049      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80063d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_PWR_EnableBkUpAccess();
 80063d4:	f7ff f952 	bl	800567c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80063d8:	f7fb ff5e 	bl	8002298 <HAL_GetTick>
 80063dc:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063de:	4e44      	ldr	r6, [pc, #272]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80063e0:	6833      	ldr	r3, [r6, #0]
 80063e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063e6:	d14f      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e8:	f7fb ff56 	bl	8002298 <HAL_GetTick>
 80063ec:	1b40      	subs	r0, r0, r5
 80063ee:	2802      	cmp	r0, #2
 80063f0:	d9f6      	bls.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
        ret = HAL_TIMEOUT;
 80063f2:	2003      	movs	r0, #3
 80063f4:	e74a      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x10>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80063f8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80063fc:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006400:	0919      	lsrs	r1, r3, #4
 8006402:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006406:	ea22 0201 	bic.w	r2, r2, r1
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8006416:	e79c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006418:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800641a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800641e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006422:	0919      	lsrs	r1, r3, #4
 8006424:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006428:	ea22 0201 	bic.w	r2, r2, r1
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8006438:	e78f      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800643a:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800643c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8006440:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006444:	0919      	lsrs	r1, r3, #4
 8006446:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800644a:	ea22 0201 	bic.w	r2, r2, r1
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800645a:	e782      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800645c:	68d3      	ldr	r3, [r2, #12]
 800645e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006462:	60d3      	str	r3, [r2, #12]
 8006464:	e78f      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006466:	68d3      	ldr	r3, [r2, #12]
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	60d3      	str	r3, [r2, #12]
  return status;
 800646e:	e7b0      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006474:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647e:	430b      	orrs	r3, r1
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006484:	2000      	movs	r0, #0
}
 8006486:	e701      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006494:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006496:	429a      	cmp	r2, r3
 8006498:	d0ea      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80064a2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80064aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80064b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80064be:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80064c2:	f011 0f02 	tst.w	r1, #2
 80064c6:	d0d3      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tickstart = HAL_GetTick();
 80064c8:	f7fb fee6 	bl	8002298 <HAL_GetTick>
 80064cc:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064ce:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d2:	f241 3788 	movw	r7, #5000	; 0x1388
 80064d6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80064da:	f013 0f02 	tst.w	r3, #2
 80064de:	d1c7      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80064e0:	f7fb feda 	bl	8002298 <HAL_GetTick>
 80064e4:	1b40      	subs	r0, r0, r5
 80064e6:	42b8      	cmp	r0, r7
 80064e8:	d9f5      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            ret = HAL_TIMEOUT;
 80064ea:	2003      	movs	r0, #3
 80064ec:	e6ce      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x10>
 80064ee:	bf00      	nop
 80064f0:	58000400 	.word	0x58000400

080064f4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80064f4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064f6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80064fa:	2a01      	cmp	r2, #1
 80064fc:	d035      	beq.n	800656a <HAL_RTC_DeactivateAlarm+0x76>
 80064fe:	2201      	movs	r2, #1
 8006500:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006504:	2202      	movs	r2, #2
 8006506:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <HAL_RTC_DeactivateAlarm+0x7c>)
 800650c:	20ca      	movs	r0, #202	; 0xca
 800650e:	6250      	str	r0, [r2, #36]	; 0x24
 8006510:	2053      	movs	r0, #83	; 0x53
 8006512:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006514:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006518:	d018      	beq.n	800654c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800651a:	4a15      	ldr	r2, [pc, #84]	; (8006570 <HAL_RTC_DeactivateAlarm+0x7c>)
 800651c:	6991      	ldr	r1, [r2, #24]
 800651e:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8006522:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006524:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006526:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800652a:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800652c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800652e:	f021 0102 	bic.w	r1, r1, #2
 8006532:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006534:	2102      	movs	r1, #2
 8006536:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006538:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <HAL_RTC_DeactivateAlarm+0x7c>)
 800653a:	21ff      	movs	r1, #255	; 0xff
 800653c:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800653e:	2201      	movs	r2, #1
 8006540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006544:	2000      	movs	r0, #0
 8006546:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 800654a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800654c:	6991      	ldr	r1, [r2, #24]
 800654e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8006552:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006554:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006556:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800655a:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800655c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800655e:	f021 0101 	bic.w	r1, r1, #1
 8006562:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006564:	2101      	movs	r1, #1
 8006566:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006568:	e7e6      	b.n	8006538 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800656a:	2002      	movs	r0, #2
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40002800 	.word	0x40002800

08006574 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800657a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800657c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800657e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006580:	f015 0f01 	tst.w	r5, #1
 8006584:	d106      	bne.n	8006594 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006586:	f015 0f02 	tst.w	r5, #2
 800658a:	d109      	bne.n	80065a0 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800658c:	2301      	movs	r3, #1
 800658e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006592:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006596:	2201      	movs	r2, #1
 8006598:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800659a:	f7fb ffed 	bl	8002578 <HAL_RTC_AlarmAEventCallback>
 800659e:	e7f2      	b.n	8006586 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80065a2:	2202      	movs	r2, #2
 80065a4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fa04 	bl	80069b4 <HAL_RTCEx_AlarmBEventCallback>
 80065ac:	e7ee      	b.n	800658c <HAL_RTC_AlarmIRQHandler+0x18>
 80065ae:	bf00      	nop
 80065b0:	40002800 	.word	0x40002800

080065b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80065b6:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <HAL_RTC_WaitForSynchro+0x30>)
 80065b8:	68d3      	ldr	r3, [r2, #12]
 80065ba:	f023 0320 	bic.w	r3, r3, #32
 80065be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80065c0:	f7fb fe6a 	bl	8002298 <HAL_GetTick>
 80065c4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <HAL_RTC_WaitForSynchro+0x30>)
 80065c8:	68eb      	ldr	r3, [r5, #12]
 80065ca:	f013 0f20 	tst.w	r3, #32
 80065ce:	d107      	bne.n	80065e0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065d0:	f7fb fe62 	bl	8002298 <HAL_GetTick>
 80065d4:	1b00      	subs	r0, r0, r4
 80065d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80065da:	d9f5      	bls.n	80065c8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80065dc:	2003      	movs	r0, #3
 80065de:	e000      	b.n	80065e2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80065e0:	2000      	movs	r0, #0
}
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	40002800 	.word	0x40002800

080065e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <RTC_EnterInitMode+0x54>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065f4:	d003      	beq.n	80065fe <RTC_EnterInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80065f8:	4620      	mov	r0, r4
 80065fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fe:	4607      	mov	r7, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006600:	4a0e      	ldr	r2, [pc, #56]	; (800663c <RTC_EnterInitMode+0x54>)
 8006602:	68d3      	ldr	r3, [r2, #12]
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800660a:	f7fb fe45 	bl	8002298 <HAL_GetTick>
 800660e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006610:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006612:	4e0a      	ldr	r6, [pc, #40]	; (800663c <RTC_EnterInitMode+0x54>)
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006614:	f04f 0803 	mov.w	r8, #3
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006618:	e008      	b.n	800662c <RTC_EnterInitMode+0x44>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800661a:	f7fb fe3d 	bl	8002298 <HAL_GetTick>
 800661e:	1b43      	subs	r3, r0, r5
 8006620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006624:	bf84      	itt	hi
 8006626:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 800662a:	4644      	movhi	r4, r8
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800662c:	68f3      	ldr	r3, [r6, #12]
 800662e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006632:	d1e1      	bne.n	80065f8 <RTC_EnterInitMode+0x10>
 8006634:	2c03      	cmp	r4, #3
 8006636:	d1f0      	bne.n	800661a <RTC_EnterInitMode+0x32>
 8006638:	e7de      	b.n	80065f8 <RTC_EnterInitMode+0x10>
 800663a:	bf00      	nop
 800663c:	40002800 	.word	0x40002800

08006640 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <RTC_ExitInitMode+0x48>)
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800664c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f013 0f20 	tst.w	r3, #32
 8006654:	d106      	bne.n	8006664 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006656:	f7ff ffad 	bl	80065b4 <HAL_RTC_WaitForSynchro>
 800665a:	b198      	cbz	r0, 8006684 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800665c:	2003      	movs	r0, #3
 800665e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006662:	e00f      	b.n	8006684 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006664:	4a08      	ldr	r2, [pc, #32]	; (8006688 <RTC_ExitInitMode+0x48>)
 8006666:	6993      	ldr	r3, [r2, #24]
 8006668:	f023 0320 	bic.w	r3, r3, #32
 800666c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800666e:	f7ff ffa1 	bl	80065b4 <HAL_RTC_WaitForSynchro>
 8006672:	b110      	cbz	r0, 800667a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006674:	2003      	movs	r0, #3
 8006676:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800667a:	4a03      	ldr	r2, [pc, #12]	; (8006688 <RTC_ExitInitMode+0x48>)
 800667c:	6993      	ldr	r3, [r2, #24]
 800667e:	f043 0320 	orr.w	r3, r3, #32
 8006682:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	40002800 	.word	0x40002800

0800668c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800668c:	2800      	cmp	r0, #0
 800668e:	d052      	beq.n	8006736 <HAL_RTC_Init+0xaa>
{
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006694:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006698:	b163      	cbz	r3, 80066b4 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800669a:	2302      	movs	r3, #2
 800669c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066a0:	4b26      	ldr	r3, [pc, #152]	; (800673c <HAL_RTC_Init+0xb0>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f013 0f10 	tst.w	r3, #16
 80066a8:	d009      	beq.n	80066be <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80066b0:	2000      	movs	r0, #0
}
 80066b2:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80066b4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80066b8:	f7fb fba4 	bl	8001e04 <HAL_RTC_MspInit>
 80066bc:	e7ed      	b.n	800669a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <HAL_RTC_Init+0xb0>)
 80066c0:	22ca      	movs	r2, #202	; 0xca
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24
 80066c4:	2253      	movs	r2, #83	; 0x53
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff8d 	bl	80065e8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80066ce:	b118      	cbz	r0, 80066d8 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <HAL_RTC_Init+0xb0>)
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24
  return status;
 80066d6:	e7ec      	b.n	80066b2 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <HAL_RTC_Init+0xb0>)
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80066e6:	6999      	ldr	r1, [r3, #24]
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	6920      	ldr	r0, [r4, #16]
 80066ec:	4302      	orrs	r2, r0
 80066ee:	430a      	orrs	r2, r1
 80066f0:	69a1      	ldr	r1, [r4, #24]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80066f6:	68a1      	ldr	r1, [r4, #8]
 80066f8:	68e2      	ldr	r2, [r4, #12]
 80066fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006700:	68d9      	ldr	r1, [r3, #12]
 8006702:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006706:	4302      	orrs	r2, r0
 8006708:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006710:	4620      	mov	r0, r4
 8006712:	f7ff ff95 	bl	8006640 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006716:	2800      	cmp	r0, #0
 8006718:	d1da      	bne.n	80066d0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_RTC_Init+0xb0>)
 800671c:	6991      	ldr	r1, [r2, #24]
 800671e:	6a23      	ldr	r3, [r4, #32]
 8006720:	69e0      	ldr	r0, [r4, #28]
 8006722:	4303      	orrs	r3, r0
 8006724:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8006728:	430b      	orrs	r3, r1
 800672a:	6961      	ldr	r1, [r4, #20]
 800672c:	430b      	orrs	r3, r1
 800672e:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006730:	23ff      	movs	r3, #255	; 0xff
 8006732:	6253      	str	r3, [r2, #36]	; 0x24
    if (status == HAL_OK)
 8006734:	e7b9      	b.n	80066aa <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006736:	2001      	movs	r0, #1
}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40002800 	.word	0x40002800

08006740 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006740:	2809      	cmp	r0, #9
 8006742:	d909      	bls.n	8006758 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8006744:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8006746:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006748:	380a      	subs	r0, #10
 800674a:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800674c:	2809      	cmp	r0, #9
 800674e:	d8fa      	bhi.n	8006746 <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006750:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006754:	b2c0      	uxtb	r0, r0
 8006756:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	e7f9      	b.n	8006750 <RTC_ByteToBcd2+0x10>

0800675c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800675c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006760:	2b01      	cmp	r3, #1
 8006762:	f000 8095 	beq.w	8006890 <HAL_RTC_SetAlarm_IT+0x134>
{
 8006766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676a:	4605      	mov	r5, r0
 800676c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800676e:	2301      	movs	r3, #1
 8006770:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006774:	2302      	movs	r3, #2
 8006776:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800677a:	4b5c      	ldr	r3, [pc, #368]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	f000 809b 	beq.w	80068c0 <HAL_RTC_SetAlarm_IT+0x164>
    if (Format == RTC_FORMAT_BIN)
 800678a:	2a00      	cmp	r2, #0
 800678c:	d154      	bne.n	8006838 <HAL_RTC_SetAlarm_IT+0xdc>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800678e:	4b57      	ldr	r3, [pc, #348]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f013 0f40 	tst.w	r3, #64	; 0x40
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006796:	bf04      	itt	eq
 8006798:	2300      	moveq	r3, #0
 800679a:	70cb      	strbeq	r3, [r1, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800679c:	7808      	ldrb	r0, [r1, #0]
 800679e:	f7ff ffcf 	bl	8006740 <RTC_ByteToBcd2>
 80067a2:	4607      	mov	r7, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067a4:	7860      	ldrb	r0, [r4, #1]
 80067a6:	f7ff ffcb 	bl	8006740 <RTC_ByteToBcd2>
 80067aa:	4606      	mov	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067ac:	78a0      	ldrb	r0, [r4, #2]
 80067ae:	f7ff ffc7 	bl	8006740 <RTC_ByteToBcd2>
 80067b2:	4680      	mov	r8, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067b4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80067b8:	f7ff ffc2 	bl	8006740 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	6a22      	ldr	r2, [r4, #32]
 80067c0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067c2:	78e2      	ldrb	r2, [r4, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067c4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80067c8:	ea43 0308 	orr.w	r3, r3, r8
 80067cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067d0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80067d4:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d8:	4b44      	ldr	r3, [pc, #272]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 80067da:	22ca      	movs	r2, #202	; 0xca
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
 80067de:	2253      	movs	r2, #83	; 0x53
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80067e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e8:	d054      	beq.n	8006894 <HAL_RTC_SetAlarm_IT+0x138>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80067ea:	4b40      	ldr	r3, [pc, #256]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80067f2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80067f4:	2202      	movs	r2, #2
 80067f6:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80067f8:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80067fa:	69a2      	ldr	r2, [r4, #24]
 80067fc:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	4b3a      	ldr	r3, [pc, #232]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 8006802:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006804:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006806:	f042 0202 	orr.w	r2, r2, #2
 800680a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006812:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006814:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <HAL_RTC_SetAlarm_IT+0x194>)
 8006816:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006822:	4b32      	ldr	r3, [pc, #200]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006828:	2301      	movs	r3, #1
 800682a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800682e:	2000      	movs	r0, #0
 8006830:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006838:	6948      	ldr	r0, [r1, #20]
 800683a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800683e:	d009      	beq.n	8006854 <HAL_RTC_SetAlarm_IT+0xf8>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006844:	d006      	beq.n	8006854 <HAL_RTC_SetAlarm_IT+0xf8>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 8006848:	6992      	ldr	r2, [r2, #24]
 800684a:	f012 0f40 	tst.w	r2, #64	; 0x40
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800684e:	bf04      	itt	eq
 8006850:	2200      	moveq	r2, #0
 8006852:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006854:	6a22      	ldr	r2, [r4, #32]
 8006856:	4310      	orrs	r0, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006858:	78a3      	ldrb	r3, [r4, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800685a:	4318      	orrs	r0, r3
 800685c:	7823      	ldrb	r3, [r4, #0]
 800685e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006862:	7863      	ldrb	r3, [r4, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006864:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006868:	78e3      	ldrb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800686a:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800686e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006872:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006876:	e7af      	b.n	80067d8 <HAL_RTC_SetAlarm_IT+0x7c>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006878:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006880:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006882:	2201      	movs	r2, #1
 8006884:	65da      	str	r2, [r3, #92]	; 0x5c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006886:	69a2      	ldr	r2, [r4, #24]
 8006888:	69e1      	ldr	r1, [r4, #28]
 800688a:	430a      	orrs	r2, r1
 800688c:	645a      	str	r2, [r3, #68]	; 0x44
 800688e:	e00b      	b.n	80068a8 <HAL_RTC_SetAlarm_IT+0x14c>
  __HAL_LOCK(hrtc);
 8006890:	2002      	movs	r0, #2
}
 8006892:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006894:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800689c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800689e:	2201      	movs	r2, #1
 80068a0:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80068a2:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80068a4:	69a2      	ldr	r2, [r4, #24]
 80068a6:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80068a8:	6862      	ldr	r2, [r4, #4]
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 80068ac:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068b6:	699a      	ldr	r2, [r3, #24]
 80068b8:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80068bc:	619a      	str	r2, [r3, #24]
 80068be:	e7a9      	b.n	8006814 <HAL_RTC_SetAlarm_IT+0xb8>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 80068c2:	22ca      	movs	r2, #202	; 0xca
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
 80068c6:	2253      	movs	r2, #83	; 0x53
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80068cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d0:	d0d2      	beq.n	8006878 <HAL_RTC_SetAlarm_IT+0x11c>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RTC_SetAlarm_IT+0x190>)
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80068da:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068dc:	2202      	movs	r2, #2
 80068de:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80068e0:	69a2      	ldr	r2, [r4, #24]
 80068e2:	69e1      	ldr	r1, [r4, #28]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80068e8:	e789      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0xa2>
 80068ea:	bf00      	nop
 80068ec:	40002800 	.word	0x40002800
 80068f0:	58000800 	.word	0x58000800

080068f4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d017      	beq.n	800692c <HAL_RTCEx_EnableBypassShadow+0x38>
 80068fc:	2101      	movs	r1, #1
 80068fe:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006902:	2302      	movs	r3, #2
 8006904:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800690a:	22ca      	movs	r2, #202	; 0xca
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
 800690e:	2253      	movs	r2, #83	; 0x53
 8006910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	f042 0220 	orr.w	r2, r2, #32
 8006918:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800691a:	22ff      	movs	r2, #255	; 0xff
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800691e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006922:	2300      	movs	r3, #0
 8006924:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006928:	4618      	mov	r0, r3
 800692a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800692c:	2002      	movs	r0, #2
}
 800692e:	4770      	bx	lr
 8006930:	40002800 	.word	0x40002800

08006934 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006934:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d020      	beq.n	800697e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800693c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800693e:	2101      	movs	r1, #1
 8006940:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006944:	2302      	movs	r3, #2
 8006946:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800694a:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800694c:	22ca      	movs	r2, #202	; 0xca
 800694e:	625a      	str	r2, [r3, #36]	; 0x24
 8006950:	2253      	movs	r2, #83	; 0x53
 8006952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800695a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800695c:	4c0a      	ldr	r4, [pc, #40]	; (8006988 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800695e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006966:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800696a:	22ff      	movs	r2, #255	; 0xff
 800696c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800696e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006972:	2300      	movs	r3, #0
 8006974:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006978:	4618      	mov	r0, r3
}
 800697a:	bc10      	pop	{r4}
 800697c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800697e:	2002      	movs	r0, #2
}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40002800 	.word	0x40002800
 8006988:	58000800 	.word	0x58000800

0800698c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800698c:	b510      	push	{r4, lr}
 800698e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006998:	d103      	bne.n	80069a2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800699a:	2301      	movs	r3, #1
 800699c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80069a0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80069a4:	2240      	movs	r2, #64	; 0x40
 80069a6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80069a8:	f7fb fdea 	bl	8002580 <HAL_RTCEx_SSRUEventCallback>
 80069ac:	e7f5      	b.n	800699a <HAL_RTCEx_SSRUIRQHandler+0xe>
 80069ae:	bf00      	nop
 80069b0:	40002800 	.word	0x40002800

080069b4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80069b4:	4770      	bx	lr

080069b6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80069b6:	0089      	lsls	r1, r1, #2
 80069b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80069bc:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80069c0:	600a      	str	r2, [r1, #0]
}
 80069c2:	4770      	bx	lr

080069c4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80069c4:	0089      	lsls	r1, r1, #2
 80069c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80069ca:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80069ce:	6808      	ldr	r0, [r1, #0]
}
 80069d0:	4770      	bx	lr

080069d2 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f000 808c 	beq.w	8006af0 <HAL_SPI_Init+0x11e>
{
 80069d8:	b510      	push	{r4, lr}
 80069da:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069de:	b933      	cbnz	r3, 80069ee <HAL_SPI_Init+0x1c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069e0:	6843      	ldr	r3, [r0, #4]
 80069e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e6:	d005      	beq.n	80069f4 <HAL_SPI_Init+0x22>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61c3      	str	r3, [r0, #28]
 80069ec:	e002      	b.n	80069f4 <HAL_SPI_Init+0x22>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069ee:	2300      	movs	r3, #0
 80069f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069f2:	6143      	str	r3, [r0, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d05b      	beq.n	8006ab4 <HAL_SPI_Init+0xe2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069fc:	2302      	movs	r3, #2
 80069fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	6813      	ldr	r3, [r2, #0]
 8006a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0a:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a0c:	68e3      	ldr	r3, [r4, #12]
 8006a0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a12:	bf8c      	ite	hi
 8006a14:	2100      	movhi	r1, #0
 8006a16:	2101      	movls	r1, #1
 8006a18:	0309      	lsls	r1, r1, #12
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a22:	bf1c      	itt	ne
 8006a24:	2300      	movne	r3, #0
 8006a26:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006a30:	68a0      	ldr	r0, [r4, #8]
 8006a32:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8006a36:	4303      	orrs	r3, r0
 8006a38:	6920      	ldr	r0, [r4, #16]
 8006a3a:	f000 0002 	and.w	r0, r0, #2
 8006a3e:	4303      	orrs	r3, r0
 8006a40:	6960      	ldr	r0, [r4, #20]
 8006a42:	f000 0001 	and.w	r0, r0, #1
 8006a46:	4303      	orrs	r3, r0
 8006a48:	69a0      	ldr	r0, [r4, #24]
 8006a4a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8006a4e:	4303      	orrs	r3, r0
 8006a50:	69e0      	ldr	r0, [r4, #28]
 8006a52:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8006a56:	4303      	orrs	r3, r0
 8006a58:	6a20      	ldr	r0, [r4, #32]
 8006a5a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8006a5e:	4303      	orrs	r3, r0
 8006a60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a62:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8006a66:	4303      	orrs	r3, r0
 8006a68:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a70:	d026      	beq.n	8006ac0 <HAL_SPI_Init+0xee>
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a7c:	f000 0008 	and.w	r0, r0, #8
 8006a80:	4303      	orrs	r3, r0
 8006a82:	68e0      	ldr	r0, [r4, #12]
 8006a84:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8006a88:	4303      	orrs	r3, r0
 8006a8a:	8b60      	ldrh	r0, [r4, #26]
 8006a8c:	f000 0004 	and.w	r0, r0, #4
 8006a90:	4303      	orrs	r3, r0
 8006a92:	430b      	orrs	r3, r1
 8006a94:	6053      	str	r3, [r2, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9c:	d024      	beq.n	8006ae8 <HAL_SPI_Init+0x116>
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	69d3      	ldr	r3, [r2, #28]
 8006aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa6:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8006ab2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006ab4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fb fa09 	bl	8001ed0 <HAL_SPI_MspInit>
 8006abe:	e79d      	b.n	80069fc <HAL_SPI_Init+0x2a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ac2:	b973      	cbnz	r3, 8006ae2 <HAL_SPI_Init+0x110>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ac4:	68e3      	ldr	r3, [r4, #12]
 8006ac6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aca:	d907      	bls.n	8006adc <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006acc:	2302      	movs	r3, #2
 8006ace:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e7ca      	b.n	8006a72 <HAL_SPI_Init+0xa0>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006adc:	2301      	movs	r3, #1
 8006ade:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006ae0:	e7c7      	b.n	8006a72 <HAL_SPI_Init+0xa0>
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d1c5      	bne.n	8006a72 <HAL_SPI_Init+0xa0>
 8006ae6:	e7f3      	b.n	8006ad0 <HAL_SPI_Init+0xfe>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006aec:	611a      	str	r2, [r3, #16]
 8006aee:	e7d6      	b.n	8006a9e <HAL_SPI_Init+0xcc>
    return HAL_ERROR;
 8006af0:	2001      	movs	r0, #1
}
 8006af2:	4770      	bx	lr

08006af4 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006af4:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <SUBGHZSPI_Init+0x20>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006afc:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006afe:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006b02:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006b04:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006b08:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	4770      	bx	lr
 8006b14:	58010000 	.word	0x58010000

08006b18 <HAL_SUBGHZ_Init>:
  if (hsubghz == NULL)
 8006b18:	b340      	cbz	r0, 8006b6c <HAL_SUBGHZ_Init+0x54>
{
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006b20:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006b22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b26:	b31b      	cbz	r3, 8006b70 <HAL_SUBGHZ_Init+0x58>
 8006b28:	2a03      	cmp	r2, #3
 8006b2a:	d05c      	beq.n	8006be6 <HAL_SUBGHZ_Init+0xce>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006b2c:	4b34      	ldr	r3, [pc, #208]	; (8006c00 <HAL_SUBGHZ_Init+0xe8>)
 8006b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b32:	619a      	str	r2, [r3, #24]
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	f7ff ffdd 	bl	8006af4 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006b3e:	2000      	movs	r0, #0
 8006b40:	60a0      	str	r0, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b42:	2301      	movs	r3, #1
 8006b44:	71a3      	strb	r3, [r4, #6]
}
 8006b46:	b002      	add	sp, #8
 8006b48:	bd10      	pop	{r4, pc}
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	60a0      	str	r0, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b4e:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <HAL_SUBGHZ_Init+0xe8>)
 8006b50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b62:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b68:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006b6a:	e7ea      	b.n	8006b42 <HAL_SUBGHZ_Init+0x2a>
    return status;
 8006b6c:	2001      	movs	r0, #1
}
 8006b6e:	4770      	bx	lr
    hsubghz->Lock = HAL_UNLOCKED;
 8006b70:	2300      	movs	r3, #0
 8006b72:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006b74:	f7fb fa98 	bl	80020a8 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006b78:	4a22      	ldr	r2, [pc, #136]	; (8006c04 <HAL_SUBGHZ_Init+0xec>)
 8006b7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006b86:	2302      	movs	r3, #2
 8006b88:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006b92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <HAL_SUBGHZ_Init+0xf0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ba2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ba6:	2264      	movs	r2, #100	; 0x64
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
      if (count == 0U)
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0c8      	beq.n	8006b4a <HAL_SUBGHZ_Init+0x32>
      count--;
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006bc2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006bc6:	d1f4      	bne.n	8006bb2 <HAL_SUBGHZ_Init+0x9a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HAL_SUBGHZ_Init+0xe8>)
 8006bca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bdc:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be2:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006be4:	e7a6      	b.n	8006b34 <HAL_SUBGHZ_Init+0x1c>
    hsubghz->Lock = HAL_UNLOCKED;
 8006be6:	2300      	movs	r3, #0
 8006be8:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006bea:	f7fb fa5d 	bl	80020a8 <HAL_SUBGHZ_MspInit>
 8006bee:	4a05      	ldr	r2, [pc, #20]	; (8006c04 <HAL_SUBGHZ_Init+0xec>)
 8006bf0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006bfc:	e796      	b.n	8006b2c <HAL_SUBGHZ_Init+0x14>
 8006bfe:	bf00      	nop
 8006c00:	58000400 	.word	0x58000400
 8006c04:	58000800 	.word	0x58000800
 8006c08:	20000004 	.word	0x20000004

08006c0c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c10:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <SUBGHZSPI_Transmit+0x74>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c18:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006c1c:	2264      	movs	r2, #100	; 0x64
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <SUBGHZSPI_Transmit+0x78>)
    if (count == 0U)
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	b143      	cbz	r3, 8006c3c <SUBGHZSPI_Transmit+0x30>
    count--;
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006c30:	6893      	ldr	r3, [r2, #8]
 8006c32:	f013 0f02 	tst.w	r3, #2
 8006c36:	d0f6      	beq.n	8006c26 <SUBGHZSPI_Transmit+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	2000      	movs	r0, #0
 8006c3a:	e002      	b.n	8006c42 <SUBGHZSPI_Transmit+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <SUBGHZSPI_Transmit+0x78>)
 8006c44:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c46:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <SUBGHZSPI_Transmit+0x74>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c4e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006c52:	2264      	movs	r2, #100	; 0x64
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <SUBGHZSPI_Transmit+0x78>)
    if (count == 0U)
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	b13b      	cbz	r3, 8006c70 <SUBGHZSPI_Transmit+0x64>
    count--;
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006c66:	6893      	ldr	r3, [r2, #8]
 8006c68:	f013 0f01 	tst.w	r3, #1
 8006c6c:	d0f6      	beq.n	8006c5c <SUBGHZSPI_Transmit+0x50>
 8006c6e:	e002      	b.n	8006c76 <SUBGHZSPI_Transmit+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c70:	2001      	movs	r0, #1
 8006c72:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006c76:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <SUBGHZSPI_Transmit+0x78>)
 8006c78:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006c7a:	b002      	add	sp, #8
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000004 	.word	0x20000004
 8006c84:	58010000 	.word	0x58010000

08006c88 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006c88:	b082      	sub	sp, #8
 8006c8a:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c8c:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <SUBGHZSPI_Receive+0x78>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c94:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006c98:	2264      	movs	r2, #100	; 0x64
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ca0:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <SUBGHZSPI_Receive+0x7c>)
    if (count == 0U)
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	b143      	cbz	r3, 8006cb8 <SUBGHZSPI_Receive+0x30>
    count--;
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006cac:	6893      	ldr	r3, [r2, #8]
 8006cae:	f013 0f02 	tst.w	r3, #2
 8006cb2:	d0f6      	beq.n	8006ca2 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e002      	b.n	8006cbe <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <SUBGHZSPI_Receive+0x7c>)
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	731a      	strb	r2, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <SUBGHZSPI_Receive+0x78>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ccc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006cd0:	2264      	movs	r2, #100	; 0x64
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <SUBGHZSPI_Receive+0x7c>)
    if (count == 0U)
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	b13b      	cbz	r3, 8006cee <SUBGHZSPI_Receive+0x66>
    count--;
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	f013 0f01 	tst.w	r3, #1
 8006cea:	d0f6      	beq.n	8006cda <SUBGHZSPI_Receive+0x52>
 8006cec:	e002      	b.n	8006cf4 <SUBGHZSPI_Receive+0x6c>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <SUBGHZSPI_Receive+0x7c>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006cfa:	b002      	add	sp, #8
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000004 	.word	0x20000004
 8006d04:	58010000 	.word	0x58010000

08006d08 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d08:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <SUBGHZ_WaitOnBusy+0x44>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d12:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006d16:	2264      	movs	r2, #100	; 0x64
 8006d18:	fb02 f303 	mul.w	r3, r2, r3
 8006d1c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006d1e:	490c      	ldr	r1, [pc, #48]	; (8006d50 <SUBGHZ_WaitOnBusy+0x48>)
 8006d20:	694b      	ldr	r3, [r1, #20]
 8006d22:	f3c3 0380 	ubfx	r3, r3, #2, #1
  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
 8006d26:	9a01      	ldr	r2, [sp, #4]
 8006d28:	b152      	cbz	r2, 8006d40 <SUBGHZ_WaitOnBusy+0x38>
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
      break;
    }
    count--;
 8006d2a:	9a01      	ldr	r2, [sp, #4]
 8006d2c:	3a01      	subs	r2, #1
 8006d2e:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d30:	694a      	ldr	r2, [r1, #20]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006d32:	f012 0f02 	tst.w	r2, #2
 8006d36:	d001      	beq.n	8006d3c <SUBGHZ_WaitOnBusy+0x34>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <SUBGHZ_WaitOnBusy+0x18>
  status = HAL_OK;
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e002      	b.n	8006d46 <SUBGHZ_WaitOnBusy+0x3e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006d40:	2302      	movs	r3, #2
 8006d42:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006d44:	2001      	movs	r0, #1

  return status;
}
 8006d46:	b002      	add	sp, #8
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000004 	.word	0x20000004
 8006d50:	58000400 	.word	0x58000400

08006d54 <SUBGHZ_CheckDeviceReady>:
{
 8006d54:	b500      	push	{lr}
 8006d56:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006d58:	7903      	ldrb	r3, [r0, #4]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d004      	beq.n	8006d68 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006d5e:	f7ff ffd3 	bl	8006d08 <SUBGHZ_WaitOnBusy>
}
 8006d62:	b003      	add	sp, #12
 8006d64:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d70:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006d74:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d76:	4a0b      	ldr	r2, [pc, #44]	; (8006da4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006d78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006d84:	9b01      	ldr	r3, [sp, #4]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f9      	bne.n	8006d84 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d90:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <SUBGHZ_CheckDeviceReady+0x50>)
 8006d92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d9e:	e7de      	b.n	8006d5e <SUBGHZ_CheckDeviceReady+0xa>
 8006da0:	20000004 	.word	0x20000004
 8006da4:	58000400 	.word	0x58000400

08006da8 <HAL_SUBGHZ_WriteRegisters>:
{
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dac:	7980      	ldrb	r0, [r0, #6]
 8006dae:	b2c0      	uxtb	r0, r0
 8006db0:	2801      	cmp	r0, #1
 8006db2:	d13e      	bne.n	8006e32 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006db4:	460d      	mov	r5, r1
 8006db6:	4617      	mov	r7, r2
 8006db8:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006dba:	7963      	ldrb	r3, [r4, #5]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d03a      	beq.n	8006e36 <HAL_SUBGHZ_WriteRegisters+0x8e>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	7163      	strb	r3, [r4, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	71a3      	strb	r3, [r4, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff ffc3 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dce:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <HAL_SUBGHZ_WriteRegisters+0x94>)
 8006dd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006ddc:	210d      	movs	r1, #13
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff ff14 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006de4:	0a29      	lsrs	r1, r5, #8
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff ff10 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006dec:	b2e9      	uxtb	r1, r5
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff ff0c 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006df4:	b156      	cbz	r6, 8006e0c <HAL_SUBGHZ_WriteRegisters+0x64>
 8006df6:	1e7d      	subs	r5, r7, #1
 8006df8:	3e01      	subs	r6, #1
 8006dfa:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006dfe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff ff02 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e08:	42b5      	cmp	r5, r6
 8006e0a:	d1f8      	bne.n	8006dfe <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e0c:	4a0b      	ldr	r2, [pc, #44]	; (8006e3c <HAL_SUBGHZ_WriteRegisters+0x94>)
 8006e0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff ff74 	bl	8006d08 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e20:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8006e22:	3800      	subs	r0, #0
 8006e24:	bf18      	it	ne
 8006e26:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	7163      	strb	r3, [r4, #5]
}
 8006e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006e32:	2002      	movs	r0, #2
 8006e34:	e7fc      	b.n	8006e30 <HAL_SUBGHZ_WriteRegisters+0x88>
    __HAL_LOCK(hsubghz);
 8006e36:	2002      	movs	r0, #2
 8006e38:	e7fa      	b.n	8006e30 <HAL_SUBGHZ_WriteRegisters+0x88>
 8006e3a:	bf00      	nop
 8006e3c:	58000400 	.word	0x58000400

08006e40 <HAL_SUBGHZ_ReadRegisters>:
{
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e44:	7982      	ldrb	r2, [r0, #6]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d13c      	bne.n	8006ec6 <HAL_SUBGHZ_ReadRegisters+0x86>
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e52:	7943      	ldrb	r3, [r0, #5]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d038      	beq.n	8006eca <HAL_SUBGHZ_ReadRegisters+0x8a>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e5c:	f7ff ff7a 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e60:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <HAL_SUBGHZ_ReadRegisters+0x90>)
 8006e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006e6e:	211d      	movs	r1, #29
 8006e70:	4628      	mov	r0, r5
 8006e72:	f7ff fecb 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006e76:	0a39      	lsrs	r1, r7, #8
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7ff fec7 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006e7e:	b2f9      	uxtb	r1, r7
 8006e80:	4628      	mov	r0, r5
 8006e82:	f7ff fec3 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006e86:	2100      	movs	r1, #0
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7ff febf 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e8e:	b13e      	cbz	r6, 8006ea0 <HAL_SUBGHZ_ReadRegisters+0x60>
 8006e90:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff fef7 	bl	8006c88 <SUBGHZSPI_Receive>
      pData++;
 8006e9a:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006e9c:	42b4      	cmp	r4, r6
 8006e9e:	d1f8      	bne.n	8006e92 <HAL_SUBGHZ_ReadRegisters+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ea0:	4a0b      	ldr	r2, [pc, #44]	; (8006ed0 <HAL_SUBGHZ_ReadRegisters+0x90>)
 8006ea2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7ff ff2a 	bl	8006d08 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eb4:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8006eb6:	3800      	subs	r0, #0
 8006eb8:	bf18      	it	ne
 8006eba:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	716b      	strb	r3, [r5, #5]
}
 8006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006ec6:	2002      	movs	r0, #2
 8006ec8:	e7fc      	b.n	8006ec4 <HAL_SUBGHZ_ReadRegisters+0x84>
    __HAL_LOCK(hsubghz);
 8006eca:	2002      	movs	r0, #2
 8006ecc:	e7fa      	b.n	8006ec4 <HAL_SUBGHZ_ReadRegisters+0x84>
 8006ece:	bf00      	nop
 8006ed0:	58000400 	.word	0x58000400

08006ed4 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006eda:	7980      	ldrb	r0, [r0, #6]
 8006edc:	b2c0      	uxtb	r0, r0
 8006ede:	2801      	cmp	r0, #1
 8006ee0:	d140      	bne.n	8006f64 <HAL_SUBGHZ_ExecSetCmd+0x90>
 8006ee2:	460f      	mov	r7, r1
 8006ee4:	4690      	mov	r8, r2
 8006ee6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006ee8:	7963      	ldrb	r3, [r4, #5]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d03c      	beq.n	8006f68 <HAL_SUBGHZ_ExecSetCmd+0x94>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff ff2e 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006ef8:	f007 03ef 	and.w	r3, r7, #239	; 0xef
 8006efc:	2b84      	cmp	r3, #132	; 0x84
 8006efe:	bf14      	ite	ne
 8006f00:	2300      	movne	r3, #0
 8006f02:	2301      	moveq	r3, #1
 8006f04:	7123      	strb	r3, [r4, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f06:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <HAL_SUBGHZ_ExecSetCmd+0x98>)
 8006f08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f14:	4639      	mov	r1, r7
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff fe78 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f1c:	b15e      	cbz	r6, 8006f36 <HAL_SUBGHZ_ExecSetCmd+0x62>
 8006f1e:	f108 35ff 	add.w	r5, r8, #4294967295
 8006f22:	3e01      	subs	r6, #1
 8006f24:	fa18 f686 	uxtah	r6, r8, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f28:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff fe6d 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f32:	42b5      	cmp	r5, r6
 8006f34:	d1f8      	bne.n	8006f28 <HAL_SUBGHZ_ExecSetCmd+0x54>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f36:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <HAL_SUBGHZ_ExecSetCmd+0x98>)
 8006f38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006f44:	2f84      	cmp	r7, #132	; 0x84
 8006f46:	d109      	bne.n	8006f5c <HAL_SUBGHZ_ExecSetCmd+0x88>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f48:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8006f4a:	3800      	subs	r0, #0
 8006f4c:	bf18      	it	ne
 8006f4e:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f50:	2301      	movs	r3, #1
 8006f52:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8006f54:	2300      	movs	r3, #0
 8006f56:	7163      	strb	r3, [r4, #5]
}
 8006f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7ff fed3 	bl	8006d08 <SUBGHZ_WaitOnBusy>
 8006f62:	e7f1      	b.n	8006f48 <HAL_SUBGHZ_ExecSetCmd+0x74>
    return HAL_BUSY;
 8006f64:	2002      	movs	r0, #2
 8006f66:	e7f7      	b.n	8006f58 <HAL_SUBGHZ_ExecSetCmd+0x84>
    __HAL_LOCK(hsubghz);
 8006f68:	2002      	movs	r0, #2
 8006f6a:	e7f5      	b.n	8006f58 <HAL_SUBGHZ_ExecSetCmd+0x84>
 8006f6c:	58000400 	.word	0x58000400

08006f70 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f74:	7982      	ldrb	r2, [r0, #6]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	2a01      	cmp	r2, #1
 8006f7a:	d134      	bne.n	8006fe6 <HAL_SUBGHZ_ExecGetCmd+0x76>
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	460f      	mov	r7, r1
 8006f80:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006f82:	7943      	ldrb	r3, [r0, #5]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d030      	beq.n	8006fea <HAL_SUBGHZ_ExecGetCmd+0x7a>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f8c:	f7ff fee2 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f90:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <HAL_SUBGHZ_ExecGetCmd+0x80>)
 8006f92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7ff fe33 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f7ff fe2f 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fae:	b13e      	cbz	r6, 8006fc0 <HAL_SUBGHZ_ExecGetCmd+0x50>
 8006fb0:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f7ff fe67 	bl	8006c88 <SUBGHZSPI_Receive>
      pData++;
 8006fba:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006fbc:	42b4      	cmp	r4, r6
 8006fbe:	d1f8      	bne.n	8006fb2 <HAL_SUBGHZ_ExecGetCmd+0x42>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fc0:	4a0b      	ldr	r2, [pc, #44]	; (8006ff0 <HAL_SUBGHZ_ExecGetCmd+0x80>)
 8006fc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff fe9a 	bl	8006d08 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fd4:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8006fd6:	3800      	subs	r0, #0
 8006fd8:	bf18      	it	ne
 8006fda:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	716b      	strb	r3, [r5, #5]
}
 8006fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006fe6:	2002      	movs	r0, #2
 8006fe8:	e7fc      	b.n	8006fe4 <HAL_SUBGHZ_ExecGetCmd+0x74>
    __HAL_LOCK(hsubghz);
 8006fea:	2002      	movs	r0, #2
 8006fec:	e7fa      	b.n	8006fe4 <HAL_SUBGHZ_ExecGetCmd+0x74>
 8006fee:	bf00      	nop
 8006ff0:	58000400 	.word	0x58000400

08006ff4 <HAL_SUBGHZ_IRQHandler>:
{
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007000:	2302      	movs	r3, #2
 8007002:	aa01      	add	r2, sp, #4
 8007004:	2112      	movs	r1, #18
 8007006:	f7ff ffb3 	bl	8006f70 <HAL_SUBGHZ_ExecGetCmd>
  itsource = (itsource << 8U) | tmpisr[1U];
 800700a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800700e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8007012:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007016:	2302      	movs	r3, #2
 8007018:	aa01      	add	r2, sp, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4628      	mov	r0, r5
 800701e:	f7ff ff59 	bl	8006ed4 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007022:	f014 0f01 	tst.w	r4, #1
 8007026:	d124      	bne.n	8007072 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007028:	f014 0f02 	tst.w	r4, #2
 800702c:	d125      	bne.n	800707a <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800702e:	f014 0f04 	tst.w	r4, #4
 8007032:	d126      	bne.n	8007082 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007034:	f014 0f08 	tst.w	r4, #8
 8007038:	d127      	bne.n	800708a <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800703a:	f014 0f10 	tst.w	r4, #16
 800703e:	d128      	bne.n	8007092 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007040:	f014 0f20 	tst.w	r4, #32
 8007044:	d129      	bne.n	800709a <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007046:	f014 0f40 	tst.w	r4, #64	; 0x40
 800704a:	d12a      	bne.n	80070a2 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800704c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007050:	d007      	beq.n	8007062 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007052:	f414 7f80 	tst.w	r4, #256	; 0x100
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007056:	bf14      	ite	ne
 8007058:	2101      	movne	r1, #1
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800705a:	2100      	moveq	r1, #0
 800705c:	4628      	mov	r0, r5
 800705e:	f00a ffa5 	bl	8011fac <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007062:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007066:	d120      	bne.n	80070aa <HAL_SUBGHZ_IRQHandler+0xb6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007068:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800706c:	d121      	bne.n	80070b2 <HAL_SUBGHZ_IRQHandler+0xbe>
}
 800706e:	b003      	add	sp, #12
 8007070:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007072:	4628      	mov	r0, r5
 8007074:	f00a ff82 	bl	8011f7c <HAL_SUBGHZ_TxCpltCallback>
 8007078:	e7d6      	b.n	8007028 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800707a:	4628      	mov	r0, r5
 800707c:	f00a ff86 	bl	8011f8c <HAL_SUBGHZ_RxCpltCallback>
 8007080:	e7d5      	b.n	800702e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007082:	4628      	mov	r0, r5
 8007084:	f00a ffb6 	bl	8011ff4 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007088:	e7d4      	b.n	8007034 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800708a:	4628      	mov	r0, r5
 800708c:	f00a ffba 	bl	8012004 <HAL_SUBGHZ_SyncWordValidCallback>
 8007090:	e7d3      	b.n	800703a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007092:	4628      	mov	r0, r5
 8007094:	f00a ffbe 	bl	8012014 <HAL_SUBGHZ_HeaderValidCallback>
 8007098:	e7d2      	b.n	8007040 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800709a:	4628      	mov	r0, r5
 800709c:	f00a ffa2 	bl	8011fe4 <HAL_SUBGHZ_HeaderErrorCallback>
 80070a0:	e7d1      	b.n	8007046 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80070a2:	4628      	mov	r0, r5
 80070a4:	f00a ff7a 	bl	8011f9c <HAL_SUBGHZ_CRCErrorCallback>
 80070a8:	e7d0      	b.n	800704c <HAL_SUBGHZ_IRQHandler+0x58>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80070aa:	4628      	mov	r0, r5
 80070ac:	f00a ff90 	bl	8011fd0 <HAL_SUBGHZ_RxTxTimeoutCallback>
 80070b0:	e7da      	b.n	8007068 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80070b2:	4628      	mov	r0, r5
 80070b4:	f00a ffb6 	bl	8012024 <HAL_SUBGHZ_LrFhssHopCallback>
}
 80070b8:	e7d9      	b.n	800706e <HAL_SUBGHZ_IRQHandler+0x7a>
	...

080070bc <HAL_SUBGHZ_WriteBuffer>:
{
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070c0:	7980      	ldrb	r0, [r0, #6]
 80070c2:	b2c0      	uxtb	r0, r0
 80070c4:	2801      	cmp	r0, #1
 80070c6:	d138      	bne.n	800713a <HAL_SUBGHZ_WriteBuffer+0x7e>
 80070c8:	460d      	mov	r5, r1
 80070ca:	4617      	mov	r7, r2
 80070cc:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80070ce:	7963      	ldrb	r3, [r4, #5]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d034      	beq.n	800713e <HAL_SUBGHZ_WriteBuffer+0x82>
 80070d4:	2301      	movs	r3, #1
 80070d6:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff fe3b 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_SUBGHZ_WriteBuffer+0x88>)
 80070e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80070ec:	210e      	movs	r1, #14
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff fd8c 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070f4:	4629      	mov	r1, r5
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff fd88 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070fc:	b156      	cbz	r6, 8007114 <HAL_SUBGHZ_WriteBuffer+0x58>
 80070fe:	1e7d      	subs	r5, r7, #1
 8007100:	3e01      	subs	r6, #1
 8007102:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007106:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff fd7e 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007110:	42b5      	cmp	r5, r6
 8007112:	d1f8      	bne.n	8007106 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007114:	4a0b      	ldr	r2, [pc, #44]	; (8007144 <HAL_SUBGHZ_WriteBuffer+0x88>)
 8007116:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fdf0 	bl	8006d08 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007128:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 800712a:	3800      	subs	r0, #0
 800712c:	bf18      	it	ne
 800712e:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007130:	2301      	movs	r3, #1
 8007132:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8007134:	2300      	movs	r3, #0
 8007136:	7163      	strb	r3, [r4, #5]
}
 8007138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800713a:	2002      	movs	r0, #2
 800713c:	e7fc      	b.n	8007138 <HAL_SUBGHZ_WriteBuffer+0x7c>
    __HAL_LOCK(hsubghz);
 800713e:	2002      	movs	r0, #2
 8007140:	e7fa      	b.n	8007138 <HAL_SUBGHZ_WriteBuffer+0x7c>
 8007142:	bf00      	nop
 8007144:	58000400 	.word	0x58000400

08007148 <HAL_SUBGHZ_ReadBuffer>:
{
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800714c:	7982      	ldrb	r2, [r0, #6]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	2a01      	cmp	r2, #1
 8007152:	d138      	bne.n	80071c6 <HAL_SUBGHZ_ReadBuffer+0x7e>
 8007154:	4605      	mov	r5, r0
 8007156:	460f      	mov	r7, r1
 8007158:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800715a:	7943      	ldrb	r3, [r0, #5]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d034      	beq.n	80071ca <HAL_SUBGHZ_ReadBuffer+0x82>
 8007160:	2301      	movs	r3, #1
 8007162:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007164:	f7ff fdf6 	bl	8006d54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <HAL_SUBGHZ_ReadBuffer+0x88>)
 800716a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800716e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007176:	211e      	movs	r1, #30
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff fd47 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800717e:	4639      	mov	r1, r7
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff fd43 	bl	8006c0c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007186:	2100      	movs	r1, #0
 8007188:	4628      	mov	r0, r5
 800718a:	f7ff fd3f 	bl	8006c0c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800718e:	b13e      	cbz	r6, 80071a0 <HAL_SUBGHZ_ReadBuffer+0x58>
 8007190:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f7ff fd77 	bl	8006c88 <SUBGHZSPI_Receive>
      pData++;
 800719a:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 800719c:	42b4      	cmp	r4, r6
 800719e:	d1f8      	bne.n	8007192 <HAL_SUBGHZ_ReadBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071a0:	4a0b      	ldr	r2, [pc, #44]	; (80071d0 <HAL_SUBGHZ_ReadBuffer+0x88>)
 80071a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7ff fdaa 	bl	8006d08 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071b4:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 80071b6:	3800      	subs	r0, #0
 80071b8:	bf18      	it	ne
 80071ba:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071bc:	2301      	movs	r3, #1
 80071be:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80071c0:	2300      	movs	r3, #0
 80071c2:	716b      	strb	r3, [r5, #5]
}
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80071c6:	2002      	movs	r0, #2
 80071c8:	e7fc      	b.n	80071c4 <HAL_SUBGHZ_ReadBuffer+0x7c>
    __HAL_LOCK(hsubghz);
 80071ca:	2002      	movs	r0, #2
 80071cc:	e7fa      	b.n	80071c4 <HAL_SUBGHZ_ReadBuffer+0x7c>
 80071ce:	bf00      	nop
 80071d0:	58000400 	.word	0x58000400

080071d4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80071d4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	e852 3f00 	ldrex	r3, [r2]
 80071da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	e842 3100 	strex	r1, r3, [r2]
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d1f6      	bne.n	80071d4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80071e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	f102 0308 	add.w	r3, r2, #8
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	3208      	adds	r2, #8
 80071f6:	e842 3100 	strex	r1, r3, [r2]
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d1f3      	bne.n	80071e6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fe:	2320      	movs	r3, #32
 8007200:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8007204:	4770      	bx	lr

08007206 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007206:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	e852 3f00 	ldrex	r3, [r2]
 800720c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	e842 3100 	strex	r1, r3, [r2]
 8007214:	2900      	cmp	r1, #0
 8007216:	d1f6      	bne.n	8007206 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007218:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	f102 0308 	add.w	r3, r2, #8
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007226:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	3208      	adds	r2, #8
 800722c:	e842 3100 	strex	r1, r3, [r2]
 8007230:	2900      	cmp	r1, #0
 8007232:	d1f1      	bne.n	8007218 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d006      	beq.n	8007248 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800723a:	2320      	movs	r3, #32
 800723c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	2300      	movs	r3, #0
 8007242:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007244:	6743      	str	r3, [r0, #116]	; 0x74
}
 8007246:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	e852 3f00 	ldrex	r3, [r2]
 800724e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	e842 3100 	strex	r1, r3, [r2]
 8007256:	2900      	cmp	r1, #0
 8007258:	d1f6      	bne.n	8007248 <UART_EndRxTransfer+0x42>
 800725a:	e7ee      	b.n	800723a <UART_EndRxTransfer+0x34>

0800725c <HAL_UART_Transmit_DMA>:
{
 800725c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800725e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007262:	2a20      	cmp	r2, #32
 8007264:	d13d      	bne.n	80072e2 <HAL_UART_Transmit_DMA+0x86>
{
 8007266:	b510      	push	{r4, lr}
 8007268:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800726a:	2900      	cmp	r1, #0
 800726c:	d03b      	beq.n	80072e6 <HAL_UART_Transmit_DMA+0x8a>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d03b      	beq.n	80072ea <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007272:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007274:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007278:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	2200      	movs	r2, #0
 800727e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007282:	2221      	movs	r2, #33	; 0x21
 8007284:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8007288:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800728a:	b1ca      	cbz	r2, 80072c0 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800728c:	4918      	ldr	r1, [pc, #96]	; (80072f0 <HAL_UART_Transmit_DMA+0x94>)
 800728e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007290:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007292:	4918      	ldr	r1, [pc, #96]	; (80072f4 <HAL_UART_Transmit_DMA+0x98>)
 8007294:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007296:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007298:	4917      	ldr	r1, [pc, #92]	; (80072f8 <HAL_UART_Transmit_DMA+0x9c>)
 800729a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800729c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800729e:	2100      	movs	r1, #0
 80072a0:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072a2:	6802      	ldr	r2, [r0, #0]
 80072a4:	3228      	adds	r2, #40	; 0x28
 80072a6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80072a8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80072aa:	f7fc fb23 	bl	80038f4 <HAL_DMA_Start_IT>
 80072ae:	b138      	cbz	r0, 80072c0 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072b0:	2310      	movs	r3, #16
 80072b2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 80072b6:	2320      	movs	r3, #32
 80072b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 80072bc:	2001      	movs	r0, #1
 80072be:	e00f      	b.n	80072e0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	f102 0308 	add.w	r3, r2, #8
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	3208      	adds	r2, #8
 80072d6:	e842 3100 	strex	r1, r3, [r2]
 80072da:	2900      	cmp	r1, #0
 80072dc:	d1f3      	bne.n	80072c6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80072de:	2000      	movs	r0, #0
}
 80072e0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80072e2:	2002      	movs	r0, #2
}
 80072e4:	4770      	bx	lr
      return HAL_ERROR;
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7fa      	b.n	80072e0 <HAL_UART_Transmit_DMA+0x84>
 80072ea:	2001      	movs	r0, #1
 80072ec:	e7f8      	b.n	80072e0 <HAL_UART_Transmit_DMA+0x84>
 80072ee:	bf00      	nop
 80072f0:	080072fd 	.word	0x080072fd
 80072f4:	08007347 	.word	0x08007347
 80072f8:	08007353 	.word	0x08007353

080072fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072fc:	b508      	push	{r3, lr}
 80072fe:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007300:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f013 0f20 	tst.w	r3, #32
 800730a:	d118      	bne.n	800733e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007312:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	f102 0308 	add.w	r3, r2, #8
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	3208      	adds	r2, #8
 8007322:	e842 3100 	strex	r1, r3, [r2]
 8007326:	2900      	cmp	r1, #0
 8007328:	d1f3      	bne.n	8007312 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800732a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	e852 3f00 	ldrex	r3, [r2]
 8007330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	e842 3100 	strex	r1, r3, [r2]
 8007338:	2900      	cmp	r1, #0
 800733a:	d1f6      	bne.n	800732a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800733c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800733e:	f7fb fb2f 	bl	80029a0 <HAL_UART_TxCpltCallback>
}
 8007342:	e7fb      	b.n	800733c <UART_DMATransmitCplt+0x40>

08007344 <HAL_UART_TxHalfCpltCallback>:
}
 8007344:	4770      	bx	lr

08007346 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007346:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007348:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800734a:	f7ff fffb 	bl	8007344 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734e:	bd08      	pop	{r3, pc}

08007350 <HAL_UART_ErrorCallback>:
}
 8007350:	4770      	bx	lr

08007352 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007352:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007354:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007356:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800735a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007366:	d001      	beq.n	800736c <UART_DMAError+0x1a>
 8007368:	2a21      	cmp	r2, #33	; 0x21
 800736a:	d010      	beq.n	800738e <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007374:	d001      	beq.n	800737a <UART_DMAError+0x28>
 8007376:	2d22      	cmp	r5, #34	; 0x22
 8007378:	d010      	beq.n	800739c <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800737a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800737e:	f043 0310 	orr.w	r3, r3, #16
 8007382:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff ffe2 	bl	8007350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007394:	4620      	mov	r0, r4
 8007396:	f7ff ff1d 	bl	80071d4 <UART_EndTxTransfer>
 800739a:	e7e7      	b.n	800736c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80073a2:	4620      	mov	r0, r4
 80073a4:	f7ff ff2f 	bl	8007206 <UART_EndRxTransfer>
 80073a8:	e7e7      	b.n	800737a <UART_DMAError+0x28>

080073aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073b4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073b8:	f7ff ffca 	bl	8007350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073bc:	bd08      	pop	{r3, pc}

080073be <HAL_UARTEx_RxEventCallback>:
}
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_IRQHandler>:
{
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073c4:	6802      	ldr	r2, [r0, #0]
 80073c6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073ca:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80073cc:	f640 0c0f 	movw	ip, #2063	; 0x80f
 80073d0:	ea13 0f0c 	tst.w	r3, ip
 80073d4:	d10e      	bne.n	80073f4 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073d6:	f013 0f20 	tst.w	r3, #32
 80073da:	d014      	beq.n	8007406 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073dc:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073e0:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 80073e4:	ea5c 0c05 	orrs.w	ip, ip, r5
 80073e8:	d00d      	beq.n	8007406 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 80073ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80073ec:	b3a3      	cbz	r3, 8007458 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 80073ee:	4620      	mov	r0, r4
 80073f0:	4798      	blx	r3
 80073f2:	e031      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073f4:	4db6      	ldr	r5, [pc, #728]	; (80076d0 <HAL_UART_IRQHandler+0x310>)
 80073f6:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073f8:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 80076d4 <HAL_UART_IRQHandler+0x314>
 80073fc:	ea01 0c0c 	and.w	ip, r1, ip
 8007400:	ea5c 0c05 	orrs.w	ip, ip, r5
 8007404:	d129      	bne.n	800745a <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007406:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8007408:	2d01      	cmp	r5, #1
 800740a:	f000 80c3 	beq.w	8007594 <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800740e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007412:	d003      	beq.n	800741c <HAL_UART_IRQHandler+0x5c>
 8007414:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007418:	f040 8160 	bne.w	80076dc <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800741c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007420:	d006      	beq.n	8007430 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007422:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007426:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 800742a:	4302      	orrs	r2, r0
 800742c:	f040 815d 	bne.w	80076ea <HAL_UART_IRQHandler+0x32a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007434:	d003      	beq.n	800743e <HAL_UART_IRQHandler+0x7e>
 8007436:	f011 0f40 	tst.w	r1, #64	; 0x40
 800743a:	f040 815d 	bne.w	80076f8 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800743e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007442:	d003      	beq.n	800744c <HAL_UART_IRQHandler+0x8c>
 8007444:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007448:	f040 8168 	bne.w	800771c <HAL_UART_IRQHandler+0x35c>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800744c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007450:	d002      	beq.n	8007458 <HAL_UART_IRQHandler+0x98>
 8007452:	2900      	cmp	r1, #0
 8007454:	f2c0 8166 	blt.w	8007724 <HAL_UART_IRQHandler+0x364>
}
 8007458:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800745a:	f013 0f01 	tst.w	r3, #1
 800745e:	d009      	beq.n	8007474 <HAL_UART_IRQHandler+0xb4>
 8007460:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007464:	d006      	beq.n	8007474 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007466:	2601      	movs	r6, #1
 8007468:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800746a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800746e:	4332      	orrs	r2, r6
 8007470:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007474:	f013 0f02 	tst.w	r3, #2
 8007478:	d00f      	beq.n	800749a <HAL_UART_IRQHandler+0xda>
 800747a:	f010 0f01 	tst.w	r0, #1
 800747e:	d01b      	beq.n	80074b8 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	2602      	movs	r6, #2
 8007484:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007486:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800748a:	f042 0204 	orr.w	r2, r2, #4
 800748e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007492:	f013 0f04 	tst.w	r3, #4
 8007496:	d106      	bne.n	80074a6 <HAL_UART_IRQHandler+0xe6>
 8007498:	e00e      	b.n	80074b8 <HAL_UART_IRQHandler+0xf8>
 800749a:	f013 0f04 	tst.w	r3, #4
 800749e:	d00b      	beq.n	80074b8 <HAL_UART_IRQHandler+0xf8>
 80074a0:	f010 0f01 	tst.w	r0, #1
 80074a4:	d008      	beq.n	80074b8 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	2604      	movs	r6, #4
 80074aa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074b0:	f042 0202 	orr.w	r2, r2, #2
 80074b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074b8:	f013 0f08 	tst.w	r3, #8
 80074bc:	d00b      	beq.n	80074d6 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074be:	f001 0220 	and.w	r2, r1, #32
 80074c2:	432a      	orrs	r2, r5
 80074c4:	d007      	beq.n	80074d6 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	2508      	movs	r5, #8
 80074ca:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074d0:	432a      	orrs	r2, r5
 80074d2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80074da:	d00c      	beq.n	80074f6 <HAL_UART_IRQHandler+0x136>
 80074dc:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 80074e0:	d009      	beq.n	80074f6 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80074e8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074ea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074ee:	f042 0220 	orr.w	r2, r2, #32
 80074f2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d0ac      	beq.n	8007458 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074fe:	f013 0f20 	tst.w	r3, #32
 8007502:	d009      	beq.n	8007518 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007504:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007508:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 800750c:	4301      	orrs	r1, r0
 800750e:	d003      	beq.n	8007518 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 8007510:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007512:	b10b      	cbz	r3, 8007518 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 8007514:	4620      	mov	r0, r4
 8007516:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007518:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007524:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007528:	4313      	orrs	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_UART_IRQHandler+0x1c6>
        UART_EndRxTransfer(huart);
 800752c:	4620      	mov	r0, r4
 800752e:	f7ff fe6a 	bl	8007206 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f013 0f40 	tst.w	r3, #64	; 0x40
 800753a:	d020      	beq.n	800757e <HAL_UART_IRQHandler+0x1be>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	f102 0308 	add.w	r3, r2, #8
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	3208      	adds	r2, #8
 800754c:	e842 3100 	strex	r1, r3, [r2]
 8007550:	2900      	cmp	r1, #0
 8007552:	d1f3      	bne.n	800753c <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 8007554:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007558:	b16b      	cbz	r3, 8007576 <HAL_UART_IRQHandler+0x1b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800755a:	4a5f      	ldr	r2, [pc, #380]	; (80076d8 <HAL_UART_IRQHandler+0x318>)
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800755e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007562:	f7fc fa4d 	bl	8003a00 <HAL_DMA_Abort_IT>
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f af76 	beq.w	8007458 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800756c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007570:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007572:	4798      	blx	r3
 8007574:	e770      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff feea 	bl	8007350 <HAL_UART_ErrorCallback>
 800757c:	e76c      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff fee6 	bl	8007350 <HAL_UART_ErrorCallback>
 8007584:	e768      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff fee2 	bl	8007350 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007592:	e761      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007594:	f013 0f10 	tst.w	r3, #16
 8007598:	f43f af39 	beq.w	800740e <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800759c:	f011 0f10 	tst.w	r1, #16
 80075a0:	f43f af35 	beq.w	800740e <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075a4:	2310      	movs	r3, #16
 80075a6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075b0:	d052      	beq.n	8007658 <HAL_UART_IRQHandler+0x298>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f43f af4b 	beq.w	8007458 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075c2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80075c6:	4299      	cmp	r1, r3
 80075c8:	f67f af46 	bls.w	8007458 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 80075cc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f013 0f20 	tst.w	r3, #32
 80075d8:	d132      	bne.n	8007640 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	e852 3f00 	ldrex	r3, [r2]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	e842 3100 	strex	r1, r3, [r2]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d1f6      	bne.n	80075da <HAL_UART_IRQHandler+0x21a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	f102 0308 	add.w	r3, r2, #8
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	3208      	adds	r2, #8
 80075fc:	e842 3100 	strex	r1, r3, [r2]
 8007600:	2900      	cmp	r1, #0
 8007602:	d1f3      	bne.n	80075ec <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007604:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	f102 0308 	add.w	r3, r2, #8
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	3208      	adds	r2, #8
 8007614:	e842 3100 	strex	r1, r3, [r2]
 8007618:	2900      	cmp	r1, #0
 800761a:	d1f3      	bne.n	8007604 <HAL_UART_IRQHandler+0x244>
          huart->RxState = HAL_UART_STATE_READY;
 800761c:	2320      	movs	r3, #32
 800761e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	2300      	movs	r3, #0
 8007624:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	e852 3f00 	ldrex	r3, [r2]
 800762c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	e842 3100 	strex	r1, r3, [r2]
 8007634:	2900      	cmp	r1, #0
 8007636:	d1f6      	bne.n	8007626 <HAL_UART_IRQHandler+0x266>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007638:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800763c:	f7fc f9a6 	bl	800398c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007640:	2302      	movs	r3, #2
 8007642:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007644:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007648:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800764c:	1ac9      	subs	r1, r1, r3
 800764e:	b289      	uxth	r1, r1
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff feb4 	bl	80073be <HAL_UARTEx_RxEventCallback>
 8007656:	e6ff      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007658:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800765c:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 800765e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	f43f aef7 	beq.w	8007458 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800766a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800766e:	1a89      	subs	r1, r1, r2
 8007670:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007672:	2900      	cmp	r1, #0
 8007674:	f43f aef0 	beq.w	8007458 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007678:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	e852 3f00 	ldrex	r3, [r2]
 800767e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	e842 3000 	strex	r0, r3, [r2]
 8007686:	2800      	cmp	r0, #0
 8007688:	d1f6      	bne.n	8007678 <HAL_UART_IRQHandler+0x2b8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800768a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	f102 0308 	add.w	r3, r2, #8
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007698:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	3208      	adds	r2, #8
 800769e:	e842 3000 	strex	r0, r3, [r2]
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d1f1      	bne.n	800768a <HAL_UART_IRQHandler+0x2ca>
        huart->RxState = HAL_UART_STATE_READY;
 80076a6:	2320      	movs	r3, #32
 80076a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ac:	2300      	movs	r3, #0
 80076ae:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80076b0:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	e852 3f00 	ldrex	r3, [r2]
 80076b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	e842 3000 	strex	r0, r3, [r2]
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1f6      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2f2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076c4:	2302      	movs	r3, #2
 80076c6:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff fe78 	bl	80073be <HAL_UARTEx_RxEventCallback>
 80076ce:	e6c3      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
 80076d0:	10000001 	.word	0x10000001
 80076d4:	04000120 	.word	0x04000120
 80076d8:	080073ab 	.word	0x080073ab
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076e0:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fe74 	bl	80083d0 <HAL_UARTEx_WakeupCallback>
    return;
 80076e8:	e6b6      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 80076ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f43f aeb3 	beq.w	8007458 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 80076f2:	4620      	mov	r0, r4
 80076f4:	4798      	blx	r3
 80076f6:	e6af      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	e852 3f00 	ldrex	r3, [r2]
 80076fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	e842 3100 	strex	r1, r3, [r2]
 8007706:	2900      	cmp	r1, #0
 8007708:	d1f6      	bne.n	80076f8 <HAL_UART_IRQHandler+0x338>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800770a:	2320      	movs	r3, #32
 800770c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007714:	4620      	mov	r0, r4
 8007716:	f7fb f943 	bl	80029a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771a:	e69d      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800771c:	4620      	mov	r0, r4
 800771e:	f000 fe59 	bl	80083d4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007722:	e699      	b.n	8007458 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fe54 	bl	80083d2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800772a:	e695      	b.n	8007458 <HAL_UART_IRQHandler+0x98>

0800772c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800772c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800772e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007732:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007736:	2b22      	cmp	r3, #34	; 0x22
 8007738:	d005      	beq.n	8007746 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800773a:	6802      	ldr	r2, [r0, #0]
 800773c:	6993      	ldr	r3, [r2, #24]
 800773e:	f043 0308 	orr.w	r3, r3, #8
 8007742:	6193      	str	r3, [r2, #24]
  }
}
 8007744:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007746:	6803      	ldr	r3, [r0, #0]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800774a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800774c:	4013      	ands	r3, r2
 800774e:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8007750:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007752:	3301      	adds	r3, #1
 8007754:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007756:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800775a:	3b01      	subs	r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007762:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1eb      	bne.n	8007744 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800776c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	e852 3f00 	ldrex	r3, [r2]
 8007772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	e842 3100 	strex	r1, r3, [r2]
 800777a:	2900      	cmp	r1, #0
 800777c:	d1f6      	bne.n	800776c <UART_RxISR_8BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	f102 0308 	add.w	r3, r2, #8
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	3208      	adds	r2, #8
 800778e:	e842 3100 	strex	r1, r3, [r2]
 8007792:	2900      	cmp	r1, #0
 8007794:	d1f3      	bne.n	800777e <UART_RxISR_8BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 8007796:	2320      	movs	r3, #32
 8007798:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800779c:	2300      	movs	r3, #0
 800779e:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a0:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a2:	6803      	ldr	r3, [r0, #0]
 80077a4:	4a16      	ldr	r2, [pc, #88]	; (8007800 <UART_RxISR_8BIT+0xd4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00c      	beq.n	80077c4 <UART_RxISR_8BIT+0x98>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80077b0:	d008      	beq.n	80077c4 <UART_RxISR_8BIT+0x98>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	e852 3f00 	ldrex	r3, [r2]
 80077b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	e842 3100 	strex	r1, r3, [r2]
 80077c0:	2900      	cmp	r1, #0
 80077c2:	d1f6      	bne.n	80077b2 <UART_RxISR_8BIT+0x86>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d116      	bne.n	80077f8 <UART_RxISR_8BIT+0xcc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	2300      	movs	r3, #0
 80077cc:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	e852 3f00 	ldrex	r3, [r2]
 80077d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	e842 3100 	strex	r1, r3, [r2]
 80077dc:	2900      	cmp	r1, #0
 80077de:	d1f6      	bne.n	80077ce <UART_RxISR_8BIT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077e0:	6803      	ldr	r3, [r0, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e8:	bf1c      	itt	ne
 80077ea:	2210      	movne	r2, #16
 80077ec:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80077f2:	f7ff fde4 	bl	80073be <HAL_UARTEx_RxEventCallback>
 80077f6:	e7a5      	b.n	8007744 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80077f8:	f7fb f8e2 	bl	80029c0 <HAL_UART_RxCpltCallback>
 80077fc:	e7a2      	b.n	8007744 <UART_RxISR_8BIT+0x18>
 80077fe:	bf00      	nop
 8007800:	40008000 	.word	0x40008000

08007804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007804:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007806:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800780e:	2a22      	cmp	r2, #34	; 0x22
 8007810:	d005      	beq.n	800781e <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007812:	6802      	ldr	r2, [r0, #0]
 8007814:	6993      	ldr	r3, [r2, #24]
 8007816:	f043 0308 	orr.w	r3, r3, #8
 800781a:	6193      	str	r3, [r2, #24]
  }
}
 800781c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800781e:	6802      	ldr	r2, [r0, #0]
 8007820:	6a51      	ldr	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007822:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007824:	400b      	ands	r3, r1
 8007826:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8007828:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800782a:	3302      	adds	r3, #2
 800782c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800782e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007832:	3b01      	subs	r3, #1
 8007834:	b29b      	uxth	r3, r3
 8007836:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800783a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1eb      	bne.n	800781c <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007844:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	e852 3f00 	ldrex	r3, [r2]
 800784a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	e842 3100 	strex	r1, r3, [r2]
 8007852:	2900      	cmp	r1, #0
 8007854:	d1f6      	bne.n	8007844 <UART_RxISR_16BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	f102 0308 	add.w	r3, r2, #8
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	3208      	adds	r2, #8
 8007866:	e842 3100 	strex	r1, r3, [r2]
 800786a:	2900      	cmp	r1, #0
 800786c:	d1f3      	bne.n	8007856 <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 800786e:	2320      	movs	r3, #32
 8007870:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007878:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800787a:	6803      	ldr	r3, [r0, #0]
 800787c:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <UART_RxISR_16BIT+0xd4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00c      	beq.n	800789c <UART_RxISR_16BIT+0x98>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007888:	d008      	beq.n	800789c <UART_RxISR_16BIT+0x98>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800788a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	e852 3f00 	ldrex	r3, [r2]
 8007890:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	e842 3100 	strex	r1, r3, [r2]
 8007898:	2900      	cmp	r1, #0
 800789a:	d1f6      	bne.n	800788a <UART_RxISR_16BIT+0x86>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d116      	bne.n	80078d0 <UART_RxISR_16BIT+0xcc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a2:	2300      	movs	r3, #0
 80078a4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	e852 3f00 	ldrex	r3, [r2]
 80078ac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	e842 3100 	strex	r1, r3, [r2]
 80078b4:	2900      	cmp	r1, #0
 80078b6:	d1f6      	bne.n	80078a6 <UART_RxISR_16BIT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078b8:	6803      	ldr	r3, [r0, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078c0:	bf1c      	itt	ne
 80078c2:	2210      	movne	r2, #16
 80078c4:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80078ca:	f7ff fd78 	bl	80073be <HAL_UARTEx_RxEventCallback>
 80078ce:	e7a5      	b.n	800781c <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80078d0:	f7fb f876 	bl	80029c0 <HAL_UART_RxCpltCallback>
 80078d4:	e7a2      	b.n	800781c <UART_RxISR_16BIT+0x18>
 80078d6:	bf00      	nop
 80078d8:	40008000 	.word	0x40008000

080078dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
 80078e0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078e4:	6803      	ldr	r3, [r0, #0]
 80078e6:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078e8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078ec:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80078f4:	2a22      	cmp	r2, #34	; 0x22
 80078f6:	d005      	beq.n	8007904 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	f042 0208 	orr.w	r2, r2, #8
 80078fe:	619a      	str	r2, [r3, #24]
  }
}
 8007900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007906:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80cd 	beq.w	8007aaa <UART_RxISR_8BIT_FIFOEN+0x1ce>
 8007910:	f011 0f20 	tst.w	r1, #32
 8007914:	f000 80a6 	beq.w	8007a64 <UART_RxISR_8BIT_FIFOEN+0x188>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007918:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800791a:	f04f 0b04 	mov.w	fp, #4
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800791e:	f8df a190 	ldr.w	sl, [pc, #400]	; 8007ab0 <UART_RxISR_8BIT_FIFOEN+0x1d4>
 8007922:	e01b      	b.n	800795c <UART_RxISR_8BIT_FIFOEN+0x80>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007924:	f015 0f04 	tst.w	r5, #4
 8007928:	d00b      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x66>
 800792a:	f018 0f01 	tst.w	r8, #1
 800792e:	d008      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x66>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	f8c3 b020 	str.w	fp, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007936:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800793a:	f043 0302 	orr.w	r3, r3, #2
 800793e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007942:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007946:	2b00      	cmp	r3, #0
 8007948:	d13b      	bne.n	80079c2 <UART_RxISR_8BIT_FIFOEN+0xe6>
      if (huart->RxXferCount == 0U)
 800794a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d03c      	beq.n	80079ce <UART_RxISR_8BIT_FIFOEN+0xf2>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007954:	f015 0f20 	tst.w	r5, #32
 8007958:	f000 8084 	beq.w	8007a64 <UART_RxISR_8BIT_FIFOEN+0x188>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007960:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007962:	4033      	ands	r3, r6
 8007964:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007968:	3301      	adds	r3, #1
 800796a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800796c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007970:	3b01      	subs	r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800797c:	f015 0f07 	tst.w	r5, #7
 8007980:	d0e3      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x6e>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007982:	f015 0f01 	tst.w	r5, #1
 8007986:	d009      	beq.n	800799c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007988:	f419 7f80 	tst.w	r9, #256	; 0x100
 800798c:	d006      	beq.n	800799c <UART_RxISR_8BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800798e:	2201      	movs	r2, #1
 8007990:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007992:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800799c:	f015 0f02 	tst.w	r5, #2
 80079a0:	d0c0      	beq.n	8007924 <UART_RxISR_8BIT_FIFOEN+0x48>
 80079a2:	f018 0f01 	tst.w	r8, #1
 80079a6:	d0cc      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x66>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	2202      	movs	r2, #2
 80079ac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ba:	f015 0f04 	tst.w	r5, #4
 80079be:	d1b7      	bne.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x54>
 80079c0:	e7bf      	b.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x66>
          HAL_UART_ErrorCallback(huart);
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fcc4 	bl	8007350 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 80079cc:	e7bd      	b.n	800794a <UART_RxISR_8BIT_FIFOEN+0x6e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	e852 3f00 	ldrex	r3, [r2]
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	e842 3100 	strex	r1, r3, [r2]
 80079dc:	2900      	cmp	r1, #0
 80079de:	d1f6      	bne.n	80079ce <UART_RxISR_8BIT_FIFOEN+0xf2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	f102 0308 	add.w	r3, r2, #8
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	3208      	adds	r2, #8
 80079f4:	e842 3100 	strex	r1, r3, [r2]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d1f1      	bne.n	80079e0 <UART_RxISR_8BIT_FIFOEN+0x104>
        huart->RxState = HAL_UART_STATE_READY;
 80079fc:	2320      	movs	r3, #32
 80079fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007a02:	6767      	str	r7, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a04:	6727      	str	r7, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	4553      	cmp	r3, sl
 8007a0a:	d003      	beq.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x138>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007a12:	d106      	bne.n	8007a22 <UART_RxISR_8BIT_FIFOEN+0x146>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d00d      	beq.n	8007a36 <UART_RxISR_8BIT_FIFOEN+0x15a>
          HAL_UART_RxCpltCallback(huart);
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7fa ffd0 	bl	80029c0 <HAL_UART_RxCpltCallback>
 8007a20:	e798      	b.n	8007954 <UART_RxISR_8BIT_FIFOEN+0x78>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	e852 3f00 	ldrex	r3, [r2]
 8007a28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	e842 3100 	strex	r1, r3, [r2]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	d1f6      	bne.n	8007a22 <UART_RxISR_8BIT_FIFOEN+0x146>
 8007a34:	e7ee      	b.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x138>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	66e7      	str	r7, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	e852 3f00 	ldrex	r3, [r2]
 8007a3e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	e842 3100 	strex	r1, r3, [r2]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d1f6      	bne.n	8007a38 <UART_RxISR_8BIT_FIFOEN+0x15c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a52:	bf1c      	itt	ne
 8007a54:	2210      	movne	r2, #16
 8007a56:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a58:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7ff fcae 	bl	80073be <HAL_UARTEx_RxEventCallback>
 8007a62:	e777      	b.n	8007954 <UART_RxISR_8BIT_FIFOEN+0x78>
    rxdatacount = huart->RxXferCount;
 8007a64:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a68:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f43f af48 	beq.w	8007900 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007a70:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007a74:	429a      	cmp	r2, r3
 8007a76:	f67f af43 	bls.w	8007900 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	f102 0308 	add.w	r3, r2, #8
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	3208      	adds	r2, #8
 8007a8a:	e842 3100 	strex	r1, r3, [r2]
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d1f3      	bne.n	8007a7a <UART_RxISR_8BIT_FIFOEN+0x19e>
      huart->RxISR = UART_RxISR_8BIT;
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <UART_RxISR_8BIT_FIFOEN+0x1d8>)
 8007a94:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	e852 3f00 	ldrex	r3, [r2]
 8007a9c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	e842 3100 	strex	r1, r3, [r2]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d1f6      	bne.n	8007a96 <UART_RxISR_8BIT_FIFOEN+0x1ba>
 8007aa8:	e72a      	b.n	8007900 <UART_RxISR_8BIT_FIFOEN+0x24>
    rxdatacount = huart->RxXferCount;
 8007aaa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007aae:	e727      	b.n	8007900 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007ab0:	40008000 	.word	0x40008000
 8007ab4:	0800772d 	.word	0x0800772d

08007ab8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007abc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ac0:	6803      	ldr	r3, [r0, #0]
 8007ac2:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ac4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ac8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007acc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007ad0:	2a22      	cmp	r2, #34	; 0x22
 8007ad2:	d005      	beq.n	8007ae0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	f042 0208 	orr.w	r2, r2, #8
 8007ada:	619a      	str	r2, [r3, #24]
  }
}
 8007adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ae2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 80cd 	beq.w	8007c86 <UART_RxISR_16BIT_FIFOEN+0x1ce>
 8007aec:	f011 0f20 	tst.w	r1, #32
 8007af0:	f000 80a6 	beq.w	8007c40 <UART_RxISR_16BIT_FIFOEN+0x188>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af4:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007af6:	f04f 0b04 	mov.w	fp, #4
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007afa:	f8df a190 	ldr.w	sl, [pc, #400]	; 8007c8c <UART_RxISR_16BIT_FIFOEN+0x1d4>
 8007afe:	e01b      	b.n	8007b38 <UART_RxISR_16BIT_FIFOEN+0x80>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b00:	f015 0f04 	tst.w	r5, #4
 8007b04:	d00b      	beq.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0x66>
 8007b06:	f018 0f01 	tst.w	r8, #1
 8007b0a:	d008      	beq.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0x66>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	f8c3 b020 	str.w	fp, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b16:	f043 0302 	orr.w	r3, r3, #2
 8007b1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13b      	bne.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0xe6>
      if (huart->RxXferCount == 0U)
 8007b26:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d03c      	beq.n	8007baa <UART_RxISR_16BIT_FIFOEN+0xf2>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b30:	f015 0f20 	tst.w	r5, #32
 8007b34:	f000 8084 	beq.w	8007c40 <UART_RxISR_16BIT_FIFOEN+0x188>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b3e:	4033      	ands	r3, r6
 8007b40:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b44:	3302      	adds	r3, #2
 8007b46:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007b48:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b58:	f015 0f07 	tst.w	r5, #7
 8007b5c:	d0e3      	beq.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0x6e>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b5e:	f015 0f01 	tst.w	r5, #1
 8007b62:	d009      	beq.n	8007b78 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007b64:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b68:	d006      	beq.n	8007b78 <UART_RxISR_16BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b78:	f015 0f02 	tst.w	r5, #2
 8007b7c:	d0c0      	beq.n	8007b00 <UART_RxISR_16BIT_FIFOEN+0x48>
 8007b7e:	f018 0f01 	tst.w	r8, #1
 8007b82:	d0cc      	beq.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0x66>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	2202      	movs	r2, #2
 8007b88:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b8e:	f043 0304 	orr.w	r3, r3, #4
 8007b92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b96:	f015 0f04 	tst.w	r5, #4
 8007b9a:	d1b7      	bne.n	8007b0c <UART_RxISR_16BIT_FIFOEN+0x54>
 8007b9c:	e7bf      	b.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0x66>
          HAL_UART_ErrorCallback(huart);
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff fbd6 	bl	8007350 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba4:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8007ba8:	e7bd      	b.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0x6e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007baa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	e852 3f00 	ldrex	r3, [r2]
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	e842 3100 	strex	r1, r3, [r2]
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d1f6      	bne.n	8007baa <UART_RxISR_16BIT_FIFOEN+0xf2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	f102 0308 	add.w	r3, r2, #8
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	3208      	adds	r2, #8
 8007bd0:	e842 3100 	strex	r1, r3, [r2]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d1f1      	bne.n	8007bbc <UART_RxISR_16BIT_FIFOEN+0x104>
        huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007bde:	6767      	str	r7, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be0:	6727      	str	r7, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	4553      	cmp	r3, sl
 8007be6:	d003      	beq.n	8007bf0 <UART_RxISR_16BIT_FIFOEN+0x138>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007bee:	d106      	bne.n	8007bfe <UART_RxISR_16BIT_FIFOEN+0x146>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00d      	beq.n	8007c12 <UART_RxISR_16BIT_FIFOEN+0x15a>
          HAL_UART_RxCpltCallback(huart);
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7fa fee2 	bl	80029c0 <HAL_UART_RxCpltCallback>
 8007bfc:	e798      	b.n	8007b30 <UART_RxISR_16BIT_FIFOEN+0x78>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bfe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	e852 3f00 	ldrex	r3, [r2]
 8007c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	e842 3100 	strex	r1, r3, [r2]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d1f6      	bne.n	8007bfe <UART_RxISR_16BIT_FIFOEN+0x146>
 8007c10:	e7ee      	b.n	8007bf0 <UART_RxISR_16BIT_FIFOEN+0x138>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	66e7      	str	r7, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	e852 3f00 	ldrex	r3, [r2]
 8007c1a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	e842 3100 	strex	r1, r3, [r2]
 8007c22:	2900      	cmp	r1, #0
 8007c24:	d1f6      	bne.n	8007c14 <UART_RxISR_16BIT_FIFOEN+0x15c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	69da      	ldr	r2, [r3, #28]
 8007c2a:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c2e:	bf1c      	itt	ne
 8007c30:	2210      	movne	r2, #16
 8007c32:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c34:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7ff fbc0 	bl	80073be <HAL_UARTEx_RxEventCallback>
 8007c3e:	e777      	b.n	8007b30 <UART_RxISR_16BIT_FIFOEN+0x78>
    rxdatacount = huart->RxXferCount;
 8007c40:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007c44:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f43f af48 	beq.w	8007adc <UART_RxISR_16BIT_FIFOEN+0x24>
 8007c4c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007c50:	429a      	cmp	r2, r3
 8007c52:	f67f af43 	bls.w	8007adc <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f102 0308 	add.w	r3, r2, #8
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	3208      	adds	r2, #8
 8007c66:	e842 3100 	strex	r1, r3, [r2]
 8007c6a:	2900      	cmp	r1, #0
 8007c6c:	d1f3      	bne.n	8007c56 <UART_RxISR_16BIT_FIFOEN+0x19e>
      huart->RxISR = UART_RxISR_16BIT;
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <UART_RxISR_16BIT_FIFOEN+0x1d8>)
 8007c70:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	e852 3f00 	ldrex	r3, [r2]
 8007c78:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	e842 3100 	strex	r1, r3, [r2]
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d1f6      	bne.n	8007c72 <UART_RxISR_16BIT_FIFOEN+0x1ba>
 8007c84:	e72a      	b.n	8007adc <UART_RxISR_16BIT_FIFOEN+0x24>
    rxdatacount = huart->RxXferCount;
 8007c86:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c8a:	e727      	b.n	8007adc <UART_RxISR_16BIT_FIFOEN+0x24>
 8007c8c:	40008000 	.word	0x40008000
 8007c90:	08007805 	.word	0x08007805

08007c94 <UART_SetConfig>:
{
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c98:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c9a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	6962      	ldr	r2, [r4, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	69e2      	ldr	r2, [r4, #28]
 8007ca8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007caa:	4aaa      	ldr	r2, [pc, #680]	; (8007f54 <UART_SetConfig+0x2c0>)
 8007cac:	4002      	ands	r2, r0
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	6853      	ldr	r3, [r2, #4]
 8007cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007cba:	68e1      	ldr	r1, [r4, #12]
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cc0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	4ba4      	ldr	r3, [pc, #656]	; (8007f58 <UART_SetConfig+0x2c4>)
 8007cc6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8007cc8:	bf1c      	itt	ne
 8007cca:	6a23      	ldrne	r3, [r4, #32]
 8007ccc:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cce:	6893      	ldr	r3, [r2, #8]
 8007cd0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007cd4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ce0:	f023 030f 	bic.w	r3, r3, #15
 8007ce4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	4a9b      	ldr	r2, [pc, #620]	; (8007f5c <UART_SetConfig+0x2c8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d019      	beq.n	8007d26 <UART_SetConfig+0x92>
 8007cf2:	4a9b      	ldr	r2, [pc, #620]	; (8007f60 <UART_SetConfig+0x2cc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d02c      	beq.n	8007d52 <UART_SetConfig+0xbe>
 8007cf8:	4a97      	ldr	r2, [pc, #604]	; (8007f58 <UART_SetConfig+0x2c4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d04a      	beq.n	8007d94 <UART_SetConfig+0x100>
 8007cfe:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d00:	69e0      	ldr	r0, [r4, #28]
 8007d02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007d06:	f000 80b8 	beq.w	8007e7a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8007d0a:	2a08      	cmp	r2, #8
 8007d0c:	f200 8130 	bhi.w	8007f70 <UART_SetConfig+0x2dc>
 8007d10:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d14:	010900e7 	.word	0x010900e7
 8007d18:	012e010f 	.word	0x012e010f
 8007d1c:	012e010c 	.word	0x012e010c
 8007d20:	012e012e 	.word	0x012e012e
 8007d24:	00e4      	.short	0x00e4
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d2a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007d2e:	f002 0203 	and.w	r2, r2, #3
 8007d32:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d36:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007d3a:	2a03      	cmp	r2, #3
 8007d3c:	d807      	bhi.n	8007d4e <UART_SetConfig+0xba>
 8007d3e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d42:	0070      	.short	0x0070
 8007d44:	011d0004 	.word	0x011d0004
 8007d48:	011f      	.short	0x011f
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	e7d8      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007d4e:	2210      	movs	r2, #16
 8007d50:	e7d6      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d56:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007d5a:	f002 020c 	and.w	r2, r2, #12
 8007d5e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007d62:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007d66:	2a0c      	cmp	r2, #12
 8007d68:	d812      	bhi.n	8007d90 <UART_SetConfig+0xfc>
 8007d6a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d6e:	0077      	.short	0x0077
 8007d70:	00110011 	.word	0x00110011
 8007d74:	000d0011 	.word	0x000d0011
 8007d78:	00110011 	.word	0x00110011
 8007d7c:	010b0011 	.word	0x010b0011
 8007d80:	00110011 	.word	0x00110011
 8007d84:	000f0011 	.word	0x000f0011
 8007d88:	2204      	movs	r2, #4
 8007d8a:	e7b9      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	e7b7      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007d90:	2210      	movs	r2, #16
 8007d92:	e7b5      	b.n	8007d00 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da4:	d064      	beq.n	8007e70 <UART_SetConfig+0x1dc>
 8007da6:	d80a      	bhi.n	8007dbe <UART_SetConfig+0x12a>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d05b      	beq.n	8007e64 <UART_SetConfig+0x1d0>
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db0:	bf18      	it	ne
 8007db2:	2001      	movne	r0, #1
 8007db4:	f040 80ae 	bne.w	8007f14 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetSysClockFreq();
 8007db8:	f7fd fd64 	bl	8005884 <HAL_RCC_GetSysClockFreq>
        break;
 8007dbc:	e054      	b.n	8007e68 <UART_SetConfig+0x1d4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dc2:	d12c      	bne.n	8007e1e <UART_SetConfig+0x18a>
 8007dc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007dca:	4b66      	ldr	r3, [pc, #408]	; (8007f64 <UART_SetConfig+0x2d0>)
 8007dcc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007dd0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dd4:	6865      	ldr	r5, [r4, #4]
 8007dd6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	f200 80ad 	bhi.w	8007f3a <UART_SetConfig+0x2a6>
 8007de0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007de4:	f200 80ab 	bhi.w	8007f3e <UART_SetConfig+0x2aa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007de8:	2600      	movs	r6, #0
 8007dea:	4633      	mov	r3, r6
 8007dec:	4631      	mov	r1, r6
 8007dee:	f7f8 ffcd 	bl	8000d8c <__aeabi_uldivmod>
 8007df2:	0209      	lsls	r1, r1, #8
 8007df4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007df8:	0200      	lsls	r0, r0, #8
 8007dfa:	086b      	lsrs	r3, r5, #1
 8007dfc:	18c0      	adds	r0, r0, r3
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4633      	mov	r3, r6
 8007e02:	f141 0100 	adc.w	r1, r1, #0
 8007e06:	f7f8 ffc1 	bl	8000d8c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e0a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007e0e:	4b56      	ldr	r3, [pc, #344]	; (8007f68 <UART_SetConfig+0x2d4>)
 8007e10:	429a      	cmp	r2, r3
 8007e12:	f200 8096 	bhi.w	8007f42 <UART_SetConfig+0x2ae>
          huart->Instance->BRR = usartdiv;
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	60d8      	str	r0, [r3, #12]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	e07a      	b.n	8007f14 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e1e:	2001      	movs	r0, #1
 8007e20:	e078      	b.n	8007f14 <UART_SetConfig+0x280>
 8007e22:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e24:	494c      	ldr	r1, [pc, #304]	; (8007f58 <UART_SetConfig+0x2c4>)
 8007e26:	428b      	cmp	r3, r1
 8007e28:	f47f af6a 	bne.w	8007d00 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007e2c:	2a08      	cmp	r2, #8
 8007e2e:	f200 8082 	bhi.w	8007f36 <UART_SetConfig+0x2a2>
 8007e32:	a301      	add	r3, pc, #4	; (adr r3, 8007e38 <UART_SetConfig+0x1a4>)
 8007e34:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007f37 	.word	0x08007f37
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	08007f37 	.word	0x08007f37
 8007e48:	08007db9 	.word	0x08007db9
 8007e4c:	08007f37 	.word	0x08007f37
 8007e50:	08007f37 	.word	0x08007f37
 8007e54:	08007f37 	.word	0x08007f37
 8007e58:	08007e75 	.word	0x08007e75
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	e7e1      	b.n	8007e24 <UART_SetConfig+0x190>
    switch (clocksource)
 8007e60:	4842      	ldr	r0, [pc, #264]	; (8007f6c <UART_SetConfig+0x2d8>)
 8007e62:	e7b1      	b.n	8007dc8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fe f9ea 	bl	800623c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1ad      	bne.n	8007dc8 <UART_SetConfig+0x134>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e051      	b.n	8007f14 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 8007e70:	483e      	ldr	r0, [pc, #248]	; (8007f6c <UART_SetConfig+0x2d8>)
 8007e72:	e7a9      	b.n	8007dc8 <UART_SetConfig+0x134>
        pclk = (uint32_t) LSE_VALUE;
 8007e74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007e78:	e7a6      	b.n	8007dc8 <UART_SetConfig+0x134>
    switch (clocksource)
 8007e7a:	2a08      	cmp	r2, #8
 8007e7c:	d863      	bhi.n	8007f46 <UART_SetConfig+0x2b2>
 8007e7e:	e8df f002 	tbb	[pc, r2]
 8007e82:	2505      	.short	0x2505
 8007e84:	6228622b 	.word	0x6228622b
 8007e88:	6262      	.short	0x6262
 8007e8a:	09          	.byte	0x09
 8007e8b:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fe f9d6 	bl	800623c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d05a      	beq.n	8007f4a <UART_SetConfig+0x2b6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e94:	6862      	ldr	r2, [r4, #4]
 8007e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e98:	4b32      	ldr	r3, [pc, #200]	; (8007f64 <UART_SetConfig+0x2d0>)
 8007e9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007e9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ea2:	0853      	lsrs	r3, r2, #1
 8007ea4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007ea8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eac:	f1a3 0110 	sub.w	r1, r3, #16
 8007eb0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007eb4:	4291      	cmp	r1, r2
 8007eb6:	d84a      	bhi.n	8007f4e <UART_SetConfig+0x2ba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eb8:	f023 020f 	bic.w	r2, r3, #15
 8007ebc:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8007ebe:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ec0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60cb      	str	r3, [r1, #12]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e023      	b.n	8007f14 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ecc:	f7fe f9c6 	bl	800625c <HAL_RCC_GetPCLK2Freq>
        break;
 8007ed0:	e7de      	b.n	8007e90 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed2:	f7fd fcd7 	bl	8005884 <HAL_RCC_GetSysClockFreq>
        break;
 8007ed6:	e7db      	b.n	8007e90 <UART_SetConfig+0x1fc>
        pclk = (uint32_t) HSI_VALUE;
 8007ed8:	4824      	ldr	r0, [pc, #144]	; (8007f6c <UART_SetConfig+0x2d8>)
 8007eda:	e7db      	b.n	8007e94 <UART_SetConfig+0x200>
    switch (clocksource)
 8007edc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ee0:	e003      	b.n	8007eea <UART_SetConfig+0x256>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee2:	f7fe f9ab 	bl	800623c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d044      	beq.n	8007f74 <UART_SetConfig+0x2e0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007eee:	4a1d      	ldr	r2, [pc, #116]	; (8007f64 <UART_SetConfig+0x2d0>)
 8007ef0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007ef4:	fbb0 f0f2 	udiv	r0, r0, r2
 8007ef8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007efc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	f1a0 0210 	sub.w	r2, r0, #16
 8007f04:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d835      	bhi.n	8007f78 <UART_SetConfig+0x2e4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	b280      	uxth	r0, r0
 8007f10:	60d8      	str	r0, [r3, #12]
 8007f12:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f1a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007f22:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f26:	f7fe f999 	bl	800625c <HAL_RCC_GetPCLK2Freq>
        break;
 8007f2a:	e7dc      	b.n	8007ee6 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetSysClockFreq();
 8007f2c:	f7fd fcaa 	bl	8005884 <HAL_RCC_GetSysClockFreq>
        break;
 8007f30:	e7d9      	b.n	8007ee6 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 8007f32:	480e      	ldr	r0, [pc, #56]	; (8007f6c <UART_SetConfig+0x2d8>)
 8007f34:	e7d9      	b.n	8007eea <UART_SetConfig+0x256>
    switch (clocksource)
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7ec      	b.n	8007f14 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e7ea      	b.n	8007f14 <UART_SetConfig+0x280>
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7e8      	b.n	8007f14 <UART_SetConfig+0x280>
          ret = HAL_ERROR;
 8007f42:	2001      	movs	r0, #1
 8007f44:	e7e6      	b.n	8007f14 <UART_SetConfig+0x280>
    switch (clocksource)
 8007f46:	2001      	movs	r0, #1
 8007f48:	e7e4      	b.n	8007f14 <UART_SetConfig+0x280>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7e2      	b.n	8007f14 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7e0      	b.n	8007f14 <UART_SetConfig+0x280>
 8007f52:	bf00      	nop
 8007f54:	cfff69f3 	.word	0xcfff69f3
 8007f58:	40008000 	.word	0x40008000
 8007f5c:	40013800 	.word	0x40013800
 8007f60:	40004400 	.word	0x40004400
 8007f64:	08013290 	.word	0x08013290
 8007f68:	000ffcff 	.word	0x000ffcff
 8007f6c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007f70:	2001      	movs	r0, #1
 8007f72:	e7cf      	b.n	8007f14 <UART_SetConfig+0x280>
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7cd      	b.n	8007f14 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7cb      	b.n	8007f14 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	e6bf      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007f80:	2208      	movs	r2, #8
 8007f82:	e6bd      	b.n	8007d00 <UART_SetConfig+0x6c>
 8007f84:	2202      	movs	r2, #2
 8007f86:	e6bb      	b.n	8007d00 <UART_SetConfig+0x6c>

08007f88 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f8a:	f013 0f01 	tst.w	r3, #1
 8007f8e:	d006      	beq.n	8007f9e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f90:	6802      	ldr	r2, [r0, #0]
 8007f92:	6853      	ldr	r3, [r2, #4]
 8007f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f98:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fa0:	f013 0f02 	tst.w	r3, #2
 8007fa4:	d006      	beq.n	8007fb4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa6:	6802      	ldr	r2, [r0, #0]
 8007fa8:	6853      	ldr	r3, [r2, #4]
 8007faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fb6:	f013 0f04 	tst.w	r3, #4
 8007fba:	d006      	beq.n	8007fca <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fbc:	6802      	ldr	r2, [r0, #0]
 8007fbe:	6853      	ldr	r3, [r2, #4]
 8007fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fc4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fcc:	f013 0f08 	tst.w	r3, #8
 8007fd0:	d006      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fd2:	6802      	ldr	r2, [r0, #0]
 8007fd4:	6853      	ldr	r3, [r2, #4]
 8007fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fda:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fe0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fe2:	f013 0f10 	tst.w	r3, #16
 8007fe6:	d006      	beq.n	8007ff6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe8:	6802      	ldr	r2, [r0, #0]
 8007fea:	6893      	ldr	r3, [r2, #8]
 8007fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ff6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ff8:	f013 0f20 	tst.w	r3, #32
 8007ffc:	d006      	beq.n	800800c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ffe:	6802      	ldr	r2, [r0, #0]
 8008000:	6893      	ldr	r3, [r2, #8]
 8008002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008006:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008008:	430b      	orrs	r3, r1
 800800a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800800c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800800e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008012:	d00a      	beq.n	800802a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008014:	6802      	ldr	r2, [r0, #0]
 8008016:	6853      	ldr	r3, [r2, #4]
 8008018:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800801c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800801e:	430b      	orrs	r3, r1
 8008020:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008022:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008028:	d00b      	beq.n	8008042 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800802a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800802c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008030:	d006      	beq.n	8008040 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008032:	6802      	ldr	r2, [r0, #0]
 8008034:	6853      	ldr	r3, [r2, #4]
 8008036:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800803a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800803c:	430b      	orrs	r3, r1
 800803e:	6053      	str	r3, [r2, #4]
}
 8008040:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008042:	6802      	ldr	r2, [r0, #0]
 8008044:	6853      	ldr	r3, [r2, #4]
 8008046:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800804a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800804c:	430b      	orrs	r3, r1
 800804e:	6053      	str	r3, [r2, #4]
 8008050:	e7eb      	b.n	800802a <UART_AdvFeatureConfig+0xa2>

08008052 <UART_WaitOnFlagUntilTimeout>:
{
 8008052:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008056:	4680      	mov	r8, r0
 8008058:	460e      	mov	r6, r1
 800805a:	4615      	mov	r5, r2
 800805c:	4699      	mov	r9, r3
 800805e:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008060:	f8d8 3000 	ldr.w	r3, [r8]
 8008064:	69dc      	ldr	r4, [r3, #28]
 8008066:	ea36 0404 	bics.w	r4, r6, r4
 800806a:	bf0c      	ite	eq
 800806c:	2401      	moveq	r4, #1
 800806e:	2400      	movne	r4, #0
 8008070:	42ac      	cmp	r4, r5
 8008072:	d15a      	bne.n	800812a <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8008074:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008078:	d0f4      	beq.n	8008064 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807a:	f7fa f90d 	bl	8002298 <HAL_GetTick>
 800807e:	eba0 0009 	sub.w	r0, r0, r9
 8008082:	42b8      	cmp	r0, r7
 8008084:	d830      	bhi.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x96>
 8008086:	b37f      	cbz	r7, 80080e8 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008088:	f8d8 3000 	ldr.w	r3, [r8]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	f012 0f04 	tst.w	r2, #4
 8008092:	d0e5      	beq.n	8008060 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008094:	69da      	ldr	r2, [r3, #28]
 8008096:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800809a:	d0e1      	beq.n	8008060 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800809c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080a0:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080a2:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	e852 3f00 	ldrex	r3, [r2]
 80080aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	e842 3100 	strex	r1, r3, [r2]
 80080b2:	2900      	cmp	r1, #0
 80080b4:	d1f5      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	f102 0308 	add.w	r3, r2, #8
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	3208      	adds	r2, #8
 80080c8:	e842 3100 	strex	r1, r3, [r2]
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d1f2      	bne.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80080d0:	2320      	movs	r3, #32
 80080d2:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80080d6:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080da:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80080de:	2300      	movs	r3, #0
 80080e0:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
          return HAL_TIMEOUT;
 80080e4:	2003      	movs	r0, #3
 80080e6:	e021      	b.n	800812c <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080e8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	e852 3f00 	ldrex	r3, [r2]
 80080f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	e842 3100 	strex	r1, r3, [r2]
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d1f5      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	f102 0308 	add.w	r3, r2, #8
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	3208      	adds	r2, #8
 800810e:	e842 3100 	strex	r1, r3, [r2]
 8008112:	2900      	cmp	r1, #0
 8008114:	d1f2      	bne.n	80080fc <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008116:	2320      	movs	r3, #32
 8008118:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800811c:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8008120:	2300      	movs	r3, #0
 8008122:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
        return HAL_TIMEOUT;
 8008126:	2003      	movs	r0, #3
 8008128:	e000      	b.n	800812c <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800812a:	2000      	movs	r0, #0
}
 800812c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008130 <UART_CheckIdleState>:
{
 8008130:	b530      	push	{r4, r5, lr}
 8008132:	b083      	sub	sp, #12
 8008134:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	2300      	movs	r3, #0
 8008138:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800813c:	f7fa f8ac 	bl	8002298 <HAL_GetTick>
 8008140:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	f012 0f08 	tst.w	r2, #8
 800814a:	d110      	bne.n	800816e <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f013 0f04 	tst.w	r3, #4
 8008154:	d119      	bne.n	800818a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8008156:	2320      	movs	r3, #32
 8008158:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	2000      	movs	r0, #0
 8008162:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008164:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8008166:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800816a:	b003      	add	sp, #12
 800816c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800816e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4603      	mov	r3, r0
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800817c:	4620      	mov	r0, r4
 800817e:	f7ff ff68 	bl	8008052 <UART_WaitOnFlagUntilTimeout>
 8008182:	2800      	cmp	r0, #0
 8008184:	d0e2      	beq.n	800814c <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008186:	2003      	movs	r0, #3
 8008188:	e7ef      	b.n	800816a <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	462b      	mov	r3, r5
 8008192:	2200      	movs	r2, #0
 8008194:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008198:	4620      	mov	r0, r4
 800819a:	f7ff ff5a 	bl	8008052 <UART_WaitOnFlagUntilTimeout>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d0d9      	beq.n	8008156 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80081a2:	2003      	movs	r0, #3
 80081a4:	e7e1      	b.n	800816a <UART_CheckIdleState+0x3a>

080081a6 <HAL_UART_Init>:
  if (huart == NULL)
 80081a6:	b378      	cbz	r0, 8008208 <HAL_UART_Init+0x62>
{
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80081ac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80081b0:	b30b      	cbz	r3, 80081f6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80081b2:	2324      	movs	r3, #36	; 0x24
 80081b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7ff fd66 	bl	8007c94 <UART_SetConfig>
 80081c8:	2801      	cmp	r0, #1
 80081ca:	d013      	beq.n	80081f4 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081ce:	b9bb      	cbnz	r3, 8008200 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	6853      	ldr	r3, [r2, #4]
 80081d4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80081d8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	6893      	ldr	r3, [r2, #8]
 80081de:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80081e2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	f043 0301 	orr.w	r3, r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80081ee:	4620      	mov	r0, r4
 80081f0:	f7ff ff9e 	bl	8008130 <UART_CheckIdleState>
}
 80081f4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80081f6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80081fa:	f7fa fa3f 	bl	800267c <HAL_UART_MspInit>
 80081fe:	e7d8      	b.n	80081b2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff fec1 	bl	8007f88 <UART_AdvFeatureConfig>
 8008206:	e7e3      	b.n	80081d0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008208:	2001      	movs	r0, #1
}
 800820a:	4770      	bx	lr

0800820c <UART_Start_Receive_IT>:
{
 800820c:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800820e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008210:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008214:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 800821c:	6883      	ldr	r3, [r0, #8]
 800821e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008222:	d007      	beq.n	8008234 <UART_Start_Receive_IT+0x28>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d138      	bne.n	800829a <UART_Start_Receive_IT+0x8e>
 8008228:	6903      	ldr	r3, [r0, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	bf14      	ite	ne
 800822e:	237f      	movne	r3, #127	; 0x7f
 8008230:	23ff      	moveq	r3, #255	; 0xff
 8008232:	e005      	b.n	8008240 <UART_Start_Receive_IT+0x34>
 8008234:	6903      	ldr	r3, [r0, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f240 13ff 	movw	r3, #511	; 0x1ff
 800823c:	bf18      	it	ne
 800823e:	23ff      	movne	r3, #255	; 0xff
 8008240:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	2300      	movs	r3, #0
 8008246:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800824a:	2322      	movs	r3, #34	; 0x22
 800824c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	f101 0308 	add.w	r3, r1, #8
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	3108      	adds	r1, #8
 8008260:	e841 3400 	strex	r4, r3, [r1]
 8008264:	2c00      	cmp	r4, #0
 8008266:	d1f3      	bne.n	8008250 <UART_Start_Receive_IT+0x44>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008268:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826e:	d01f      	beq.n	80082b0 <UART_Start_Receive_IT+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008270:	6883      	ldr	r3, [r0, #8]
 8008272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008276:	d042      	beq.n	80082fe <UART_Start_Receive_IT+0xf2>
      huart->RxISR = UART_RxISR_8BIT;
 8008278:	4b2b      	ldr	r3, [pc, #172]	; (8008328 <UART_Start_Receive_IT+0x11c>)
 800827a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800827c:	6903      	ldr	r3, [r0, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d047      	beq.n	8008312 <UART_Start_Receive_IT+0x106>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008282:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	e852 3f00 	ldrex	r3, [r2]
 8008288:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	e842 3100 	strex	r1, r3, [r2]
 8008290:	2900      	cmp	r1, #0
 8008292:	d1f6      	bne.n	8008282 <UART_Start_Receive_IT+0x76>
}
 8008294:	2000      	movs	r0, #0
 8008296:	bc10      	pop	{r4}
 8008298:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800829a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829e:	d001      	beq.n	80082a4 <UART_Start_Receive_IT+0x98>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e7cd      	b.n	8008240 <UART_Start_Receive_IT+0x34>
 80082a4:	6903      	ldr	r3, [r0, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bf14      	ite	ne
 80082aa:	233f      	movne	r3, #63	; 0x3f
 80082ac:	237f      	moveq	r3, #127	; 0x7f
 80082ae:	e7c7      	b.n	8008240 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082b0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d8db      	bhi.n	8008270 <UART_Start_Receive_IT+0x64>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	6883      	ldr	r3, [r0, #8]
 80082ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082be:	d019      	beq.n	80082f4 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082c0:	4b1a      	ldr	r3, [pc, #104]	; (800832c <UART_Start_Receive_IT+0x120>)
 80082c2:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082c4:	6903      	ldr	r3, [r0, #16]
 80082c6:	b143      	cbz	r3, 80082da <UART_Start_Receive_IT+0xce>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	e852 3f00 	ldrex	r3, [r2]
 80082ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	e842 3100 	strex	r1, r3, [r2]
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d1f6      	bne.n	80082c8 <UART_Start_Receive_IT+0xbc>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	f102 0308 	add.w	r3, r2, #8
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	3208      	adds	r2, #8
 80082ea:	e842 3100 	strex	r1, r3, [r2]
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d1f3      	bne.n	80082da <UART_Start_Receive_IT+0xce>
 80082f2:	e7cf      	b.n	8008294 <UART_Start_Receive_IT+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f4:	6903      	ldr	r3, [r0, #16]
 80082f6:	b13b      	cbz	r3, 8008308 <UART_Start_Receive_IT+0xfc>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <UART_Start_Receive_IT+0x120>)
 80082fa:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082fc:	e7e4      	b.n	80082c8 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082fe:	6903      	ldr	r3, [r0, #16]
 8008300:	b12b      	cbz	r3, 800830e <UART_Start_Receive_IT+0x102>
      huart->RxISR = UART_RxISR_8BIT;
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <UART_Start_Receive_IT+0x11c>)
 8008304:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008306:	e7bc      	b.n	8008282 <UART_Start_Receive_IT+0x76>
 8008308:	4b09      	ldr	r3, [pc, #36]	; (8008330 <UART_Start_Receive_IT+0x124>)
 800830a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800830c:	e7e5      	b.n	80082da <UART_Start_Receive_IT+0xce>
 800830e:	4b09      	ldr	r3, [pc, #36]	; (8008334 <UART_Start_Receive_IT+0x128>)
 8008310:	6743      	str	r3, [r0, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008312:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	e852 3f00 	ldrex	r3, [r2]
 8008318:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	e842 3100 	strex	r1, r3, [r2]
 8008320:	2900      	cmp	r1, #0
 8008322:	d1f6      	bne.n	8008312 <UART_Start_Receive_IT+0x106>
 8008324:	e7b6      	b.n	8008294 <UART_Start_Receive_IT+0x88>
 8008326:	bf00      	nop
 8008328:	0800772d 	.word	0x0800772d
 800832c:	080078dd 	.word	0x080078dd
 8008330:	08007ab9 	.word	0x08007ab9
 8008334:	08007805 	.word	0x08007805

08008338 <HAL_UART_Receive_IT>:
{
 8008338:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800833a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800833e:	2b20      	cmp	r3, #32
 8008340:	d117      	bne.n	8008372 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8008342:	b1c1      	cbz	r1, 8008376 <HAL_UART_Receive_IT+0x3e>
 8008344:	b1ca      	cbz	r2, 800837a <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	2300      	movs	r3, #0
 8008348:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800834a:	6803      	ldr	r3, [r0, #0]
 800834c:	4c0c      	ldr	r4, [pc, #48]	; (8008380 <HAL_UART_Receive_IT+0x48>)
 800834e:	42a3      	cmp	r3, r4
 8008350:	d00c      	beq.n	800836c <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008358:	d008      	beq.n	800836c <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800835a:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	e854 3f00 	ldrex	r3, [r4]
 8008360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	e844 3500 	strex	r5, r3, [r4]
 8008368:	2d00      	cmp	r5, #0
 800836a:	d1f6      	bne.n	800835a <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800836c:	f7ff ff4e 	bl	800820c <UART_Start_Receive_IT>
 8008370:	e000      	b.n	8008374 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8008372:	2002      	movs	r0, #2
}
 8008374:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008376:	2001      	movs	r0, #1
 8008378:	e7fc      	b.n	8008374 <HAL_UART_Receive_IT+0x3c>
 800837a:	2001      	movs	r0, #1
 800837c:	e7fa      	b.n	8008374 <HAL_UART_Receive_IT+0x3c>
 800837e:	bf00      	nop
 8008380:	40008000 	.word	0x40008000

08008384 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008384:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008386:	b92b      	cbnz	r3, 8008394 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008388:	2301      	movs	r3, #1
 800838a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800838e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008392:	4770      	bx	lr
{
 8008394:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008396:	6803      	ldr	r3, [r0, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800839a:	6899      	ldr	r1, [r3, #8]
 800839c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800839e:	4d0a      	ldr	r5, [pc, #40]	; (80083c8 <UARTEx_SetNbDataToProcess+0x44>)
 80083a0:	5c6b      	ldrb	r3, [r5, r1]
 80083a2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083a4:	4c09      	ldr	r4, [pc, #36]	; (80083cc <UARTEx_SetNbDataToProcess+0x48>)
 80083a6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80083ac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b0:	f3c2 6242 	ubfx	r2, r2, #25, #3
 80083b4:	5cab      	ldrb	r3, [r5, r2]
 80083b6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083b8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ba:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 80083be:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80083c2:	bc30      	pop	{r4, r5}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	080132b0 	.word	0x080132b0
 80083cc:	080132a8 	.word	0x080132a8

080083d0 <HAL_UARTEx_WakeupCallback>:
}
 80083d0:	4770      	bx	lr

080083d2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80083d2:	4770      	bx	lr

080083d4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80083d4:	4770      	bx	lr

080083d6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80083d6:	b510      	push	{r4, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	ab04      	add	r3, sp, #16
 80083dc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80083e0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d041      	beq.n	800846c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 80083e8:	4604      	mov	r4, r0
 80083ea:	460a      	mov	r2, r1
 80083ec:	2301      	movs	r3, #1
 80083ee:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083f2:	2324      	movs	r3, #36	; 0x24
 80083f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80083f8:	6801      	ldr	r1, [r0, #0]
 80083fa:	680b      	ldr	r3, [r1, #0]
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008402:	6801      	ldr	r1, [r0, #0]
 8008404:	688b      	ldr	r3, [r1, #8]
 8008406:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800840e:	b1aa      	cbz	r2, 800843c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008410:	6822      	ldr	r2, [r4, #0]
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800841a:	f7f9 ff3d 	bl	8002298 <HAL_GetTick>
 800841e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008420:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008424:	9200      	str	r2, [sp, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff fe10 	bl	8008052 <UART_WaitOnFlagUntilTimeout>
 8008432:	b9a8      	cbnz	r0, 8008460 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 8008434:	2320      	movs	r3, #32
 8008436:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800843a:	e012      	b.n	8008462 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800843c:	f89d 100e 	ldrb.w	r1, [sp, #14]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008440:	6802      	ldr	r2, [r0, #0]
 8008442:	6853      	ldr	r3, [r2, #4]
 8008444:	f023 0310 	bic.w	r3, r3, #16
 8008448:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800844c:	4303      	orrs	r3, r0
 800844e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	6853      	ldr	r3, [r2, #4]
 8008454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008458:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	e7d7      	b.n	8008410 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008460:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008462:	2300      	movs	r3, #0
 8008464:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008468:	b004      	add	sp, #16
 800846a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800846c:	2002      	movs	r0, #2
 800846e:	e7fb      	b.n	8008468 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x92>

08008470 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008470:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008474:	2b01      	cmp	r3, #1
 8008476:	d010      	beq.n	800849a <HAL_UARTEx_EnableStopMode+0x2a>
 8008478:	2301      	movs	r3, #1
 800847a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800847e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	e852 3f00 	ldrex	r3, [r2]
 8008484:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	e842 3100 	strex	r1, r3, [r2]
 800848c:	2900      	cmp	r1, #0
 800848e:	d1f6      	bne.n	800847e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008490:	2300      	movs	r3, #0
 8008492:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008496:	4618      	mov	r0, r3
 8008498:	4770      	bx	lr
  __HAL_LOCK(huart);
 800849a:	2002      	movs	r0, #2
}
 800849c:	4770      	bx	lr

0800849e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800849e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d01d      	beq.n	80084e2 <HAL_UARTEx_EnableFifoMode+0x44>
{
 80084a6:	b510      	push	{r4, lr}
 80084a8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80084aa:	2301      	movs	r3, #1
 80084ac:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	2324      	movs	r3, #36	; 0x24
 80084b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b6:	6802      	ldr	r2, [r0, #0]
 80084b8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80084ba:	6811      	ldr	r1, [r2, #0]
 80084bc:	f021 0101 	bic.w	r1, r1, #1
 80084c0:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80084c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80084ca:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084cc:	6802      	ldr	r2, [r0, #0]
 80084ce:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80084d0:	f7ff ff58 	bl	8008384 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80084d4:	2320      	movs	r3, #32
 80084d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80084da:	2000      	movs	r0, #0
 80084dc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80084e0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80084e2:	2002      	movs	r0, #2
}
 80084e4:	4770      	bx	lr

080084e6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80084e6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d018      	beq.n	8008520 <HAL_UARTEx_DisableFifoMode+0x3a>
 80084ee:	2301      	movs	r3, #1
 80084f0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	2324      	movs	r3, #36	; 0x24
 80084f6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fa:	6803      	ldr	r3, [r0, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80084fe:	6819      	ldr	r1, [r3, #0]
 8008500:	f021 0101 	bic.w	r1, r1, #1
 8008504:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008506:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800850a:	2300      	movs	r3, #0
 800850c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850e:	6801      	ldr	r1, [r0, #0]
 8008510:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008512:	2220      	movs	r2, #32
 8008514:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008518:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800851c:	4618      	mov	r0, r3
 800851e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008520:	2002      	movs	r0, #2
}
 8008522:	4770      	bx	lr

08008524 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008524:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008526:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800852a:	2b01      	cmp	r3, #1
 800852c:	d01d      	beq.n	800856a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800852e:	4604      	mov	r4, r0
 8008530:	2301      	movs	r3, #1
 8008532:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008536:	2324      	movs	r3, #36	; 0x24
 8008538:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800853c:	6803      	ldr	r3, [r0, #0]
 800853e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	f022 0201 	bic.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008548:	6802      	ldr	r2, [r0, #0]
 800854a:	6893      	ldr	r3, [r2, #8]
 800854c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008550:	4319      	orrs	r1, r3
 8008552:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008554:	f7ff ff16 	bl	8008384 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800855c:	2320      	movs	r3, #32
 800855e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8008562:	2000      	movs	r0, #0
 8008564:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008568:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800856a:	2002      	movs	r0, #2
 800856c:	e7fc      	b.n	8008568 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800856e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800856e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008570:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008574:	2b01      	cmp	r3, #1
 8008576:	d01d      	beq.n	80085b4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008578:	4604      	mov	r4, r0
 800857a:	2301      	movs	r3, #1
 800857c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008580:	2324      	movs	r3, #36	; 0x24
 8008582:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	f022 0201 	bic.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008592:	6802      	ldr	r2, [r0, #0]
 8008594:	6893      	ldr	r3, [r2, #8]
 8008596:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800859a:	4319      	orrs	r1, r3
 800859c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800859e:	f7ff fef1 	bl	8008384 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80085a6:	2320      	movs	r3, #32
 80085a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80085ac:	2000      	movs	r0, #0
 80085ae:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80085b4:	2002      	movs	r0, #2
 80085b6:	e7fc      	b.n	80085b2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080085b8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80085b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80085ba:	f7f9 fdb3 	bl	8002124 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80085be:	f000 fb15 	bl	8008bec <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80085c2:	bd08      	pop	{r3, pc}

080085c4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80085c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ca:	f00a f8e9 	bl	80127a0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80085ce:	bd08      	pop	{r3, pc}

080085d0 <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context)
{
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 80085d0:	4770      	bx	lr

080085d2 <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 80085d2:	4770      	bx	lr

080085d4 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 80085d4:	4770      	bx	lr

080085d6 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80085d6:	4770      	bx	lr

080085d8 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <OnTxFrameCtrlChanged+0x8>)
 80085da:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000068 	.word	0x20000068

080085e4 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80085e4:	4b01      	ldr	r3, [pc, #4]	; (80085ec <OnPingSlotPeriodicityChanged+0x8>)
 80085e6:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20000068 	.word	0x20000068

080085f0 <OnBeaconStatusChange>:
  if (params != NULL)
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d037      	beq.n	8008664 <OnBeaconStatusChange+0x74>
{
 80085f4:	b500      	push	{lr}
 80085f6:	b08d      	sub	sp, #52	; 0x34
    switch (params->State)
 80085f8:	7842      	ldrb	r2, [r0, #1]
 80085fa:	2a02      	cmp	r2, #2
 80085fc:	d00a      	beq.n	8008614 <OnBeaconStatusChange+0x24>
 80085fe:	2a03      	cmp	r2, #3
 8008600:	d029      	beq.n	8008656 <OnBeaconStatusChange+0x66>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8008602:	4b19      	ldr	r3, [pc, #100]	; (8008668 <OnBeaconStatusChange+0x78>)
 8008604:	2200      	movs	r2, #0
 8008606:	4611      	mov	r1, r2
 8008608:	2002      	movs	r0, #2
 800860a:	f00a fbb7 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800860e:	b00d      	add	sp, #52	; 0x34
 8008610:	f85d fb04 	ldr.w	pc, [sp], #4
        APP_LOG(TS_OFF, VLEVEL_M,
 8008614:	7ec2      	ldrb	r2, [r0, #27]
 8008616:	920b      	str	r2, [sp, #44]	; 0x2c
 8008618:	7e82      	ldrb	r2, [r0, #26]
 800861a:	920a      	str	r2, [sp, #40]	; 0x28
 800861c:	7e42      	ldrb	r2, [r0, #25]
 800861e:	9209      	str	r2, [sp, #36]	; 0x24
 8008620:	7e02      	ldrb	r2, [r0, #24]
 8008622:	9208      	str	r2, [sp, #32]
 8008624:	7dc2      	ldrb	r2, [r0, #23]
 8008626:	9207      	str	r2, [sp, #28]
 8008628:	7d82      	ldrb	r2, [r0, #22]
 800862a:	9206      	str	r2, [sp, #24]
 800862c:	7d42      	ldrb	r2, [r0, #21]
 800862e:	9205      	str	r2, [sp, #20]
 8008630:	6842      	ldr	r2, [r0, #4]
 8008632:	9204      	str	r2, [sp, #16]
 8008634:	68c2      	ldr	r2, [r0, #12]
 8008636:	9203      	str	r2, [sp, #12]
 8008638:	f990 2014 	ldrsb.w	r2, [r0, #20]
 800863c:	9202      	str	r2, [sp, #8]
 800863e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 8008642:	9201      	str	r2, [sp, #4]
 8008644:	7c03      	ldrb	r3, [r0, #16]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4b08      	ldr	r3, [pc, #32]	; (800866c <OnBeaconStatusChange+0x7c>)
 800864a:	2200      	movs	r2, #0
 800864c:	4611      	mov	r1, r2
 800864e:	2002      	movs	r0, #2
 8008650:	f00a fb94 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008654:	e7db      	b.n	800860e <OnBeaconStatusChange+0x1e>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <OnBeaconStatusChange+0x80>)
 8008658:	2200      	movs	r2, #0
 800865a:	4611      	mov	r1, r2
 800865c:	2002      	movs	r0, #2
 800865e:	f00a fb8d 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8008662:	e7d4      	b.n	800860e <OnBeaconStatusChange+0x1e>
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	080132b8 	.word	0x080132b8
 800866c:	080132d0 	.word	0x080132d0
 8008670:	08013344 	.word	0x08013344

08008674 <OnClassChange>:
{
 8008674:	b500      	push	{lr}
 8008676:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <OnClassChange+0x1c>)
 800867a:	5c1b      	ldrb	r3, [r3, r0]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <OnClassChange+0x20>)
 8008680:	2200      	movs	r2, #0
 8008682:	4611      	mov	r1, r2
 8008684:	2002      	movs	r0, #2
 8008686:	f00a fb79 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800868a:	b003      	add	sp, #12
 800868c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008690:	08013380 	.word	0x08013380
 8008694:	08013364 	.word	0x08013364

08008698 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8008698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800869a:	2801      	cmp	r0, #1
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800869c:	bf0c      	ite	eq
 800869e:	4b04      	ldreq	r3, [pc, #16]	; (80086b0 <OnNvmDataChange+0x18>)
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80086a0:	4b04      	ldrne	r3, [pc, #16]	; (80086b4 <OnNvmDataChange+0x1c>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	4611      	mov	r1, r2
 80086a6:	2002      	movs	r0, #2
 80086a8:	f00a fb68 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80086ac:	bd08      	pop	{r3, pc}
 80086ae:	bf00      	nop
 80086b0:	08013384 	.word	0x08013384
 80086b4:	08013398 	.word	0x08013398

080086b8 <OnTxData>:
  if ((params != NULL))
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d03d      	beq.n	8008738 <OnTxData+0x80>
{
 80086bc:	b510      	push	{r4, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80086c2:	7803      	ldrb	r3, [r0, #0]
 80086c4:	b90b      	cbnz	r3, 80086ca <OnTxData+0x12>
}
 80086c6:	b004      	add	sp, #16
 80086c8:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 80086ca:	481c      	ldr	r0, [pc, #112]	; (800873c <OnTxData+0x84>)
 80086cc:	f00a f9de 	bl	8012a8c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80086d0:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <OnTxData+0x88>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	4611      	mov	r1, r2
 80086d6:	2002      	movs	r0, #2
 80086d8:	f00a fb50 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80086dc:	f994 3018 	ldrsb.w	r3, [r4, #24]
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	f994 300a 	ldrsb.w	r3, [r4, #10]
 80086e6:	9302      	str	r3, [sp, #8]
 80086e8:	7c23      	ldrb	r3, [r4, #16]
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	68e3      	ldr	r3, [r4, #12]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4b14      	ldr	r3, [pc, #80]	; (8008744 <OnTxData+0x8c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4611      	mov	r1, r2
 80086f6:	2003      	movs	r0, #3
 80086f8:	f00a fb40 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <OnTxData+0x90>)
 80086fe:	2200      	movs	r2, #0
 8008700:	4611      	mov	r1, r2
 8008702:	2003      	movs	r0, #3
 8008704:	f00a fb3a 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8008708:	7a23      	ldrb	r3, [r4, #8]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d10d      	bne.n	800872a <OnTxData+0x72>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800870e:	7a61      	ldrb	r1, [r4, #9]
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <OnTxData+0x94>)
 8008712:	4a0f      	ldr	r2, [pc, #60]	; (8008750 <OnTxData+0x98>)
 8008714:	2900      	cmp	r1, #0
 8008716:	bf08      	it	eq
 8008718:	4613      	moveq	r3, r2
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <OnTxData+0x9c>)
 800871e:	2200      	movs	r2, #0
 8008720:	4611      	mov	r1, r2
 8008722:	2003      	movs	r0, #3
 8008724:	f00a fb2a 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
 8008728:	e7cd      	b.n	80086c6 <OnTxData+0xe>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <OnTxData+0xa0>)
 800872c:	2200      	movs	r2, #0
 800872e:	4611      	mov	r1, r2
 8008730:	2003      	movs	r0, #3
 8008732:	f00a fb23 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8008736:	e7c6      	b.n	80086c6 <OnTxData+0xe>
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000720 	.word	0x20000720
 8008740:	080133b8 	.word	0x080133b8
 8008744:	080133ec 	.word	0x080133ec
 8008748:	08013420 	.word	0x08013420
 800874c:	080133ac 	.word	0x080133ac
 8008750:	080133b0 	.word	0x080133b0
 8008754:	08013430 	.word	0x08013430
 8008758:	08013444 	.word	0x08013444

0800875c <OnTxTimerEvent>:
{
 800875c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800875e:	2100      	movs	r1, #0
 8008760:	2002      	movs	r0, #2
 8008762:	f009 ffe9 	bl	8012738 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8008766:	4802      	ldr	r0, [pc, #8]	; (8008770 <OnTxTimerEvent+0x14>)
 8008768:	f00a f990 	bl	8012a8c <UTIL_TIMER_Start>
}
 800876c:	bd08      	pop	{r3, pc}
 800876e:	bf00      	nop
 8008770:	20000738 	.word	0x20000738

08008774 <OnMacProcessNotify>:
{
 8008774:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8008776:	2100      	movs	r1, #0
 8008778:	2001      	movs	r0, #1
 800877a:	f009 ffdd 	bl	8012738 <UTIL_SEQ_SetTask>
}
 800877e:	bd08      	pop	{r3, pc}

08008780 <OnStopJoinTimerEvent>:
{
 8008780:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <OnStopJoinTimerEvent+0x18>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d000      	beq.n	800878c <OnStopJoinTimerEvent+0xc>
}
 800878a:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800878c:	2100      	movs	r1, #0
 800878e:	2008      	movs	r0, #8
 8008790:	f009 ffd2 	bl	8012738 <UTIL_SEQ_SetTask>
}
 8008794:	e7f9      	b.n	800878a <OnStopJoinTimerEvent+0xa>
 8008796:	bf00      	nop
 8008798:	20000010 	.word	0x20000010

0800879c <OnSystemReset>:
{
 800879c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800879e:	f001 fdec 	bl	800a37a <LmHandlerHalt>
 80087a2:	b100      	cbz	r0, 80087a6 <OnSystemReset+0xa>
}
 80087a4:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80087a6:	f001 faa5 	bl	8009cf4 <LmHandlerJoinStatus>
 80087aa:	2801      	cmp	r0, #1
 80087ac:	d1fa      	bne.n	80087a4 <OnSystemReset+0x8>
  __ASM volatile ("dsb 0xF":::"memory");
 80087ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80087b2:	4905      	ldr	r1, [pc, #20]	; (80087c8 <OnSystemReset+0x2c>)
 80087b4:	68ca      	ldr	r2, [r1, #12]
 80087b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80087ba:	4b04      	ldr	r3, [pc, #16]	; (80087cc <OnSystemReset+0x30>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	60cb      	str	r3, [r1, #12]
 80087c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80087c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80087c6:	e7fd      	b.n	80087c4 <OnSystemReset+0x28>
 80087c8:	e000ed00 	.word	0xe000ed00
 80087cc:	05fa0004 	.word	0x05fa0004

080087d0 <OnJoinRequest>:
  if (joinParams != NULL)
 80087d0:	b368      	cbz	r0, 800882e <OnJoinRequest+0x5e>
{
 80087d2:	b510      	push	{r4, lr}
 80087d4:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80087d6:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80087da:	b99b      	cbnz	r3, 8008804 <OnJoinRequest+0x34>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80087dc:	4814      	ldr	r0, [pc, #80]	; (8008830 <OnJoinRequest+0x60>)
 80087de:	f00a f8f7 	bl	80129d0 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <OnJoinRequest+0x64>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	4611      	mov	r1, r2
 80087e8:	2002      	movs	r0, #2
 80087ea:	f00a fac7 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80087ee:	79e3      	ldrb	r3, [r4, #7]
 80087f0:	2b01      	cmp	r3, #1
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80087f2:	bf0c      	ite	eq
 80087f4:	4b10      	ldreq	r3, [pc, #64]	; (8008838 <OnJoinRequest+0x68>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80087f6:	4b11      	ldrne	r3, [pc, #68]	; (800883c <OnJoinRequest+0x6c>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	4611      	mov	r1, r2
 80087fc:	2002      	movs	r0, #2
 80087fe:	f00a fabd 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8008802:	bd10      	pop	{r4, pc}
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <OnJoinRequest+0x70>)
 8008806:	2200      	movs	r2, #0
 8008808:	4611      	mov	r1, r2
 800880a:	2002      	movs	r0, #2
 800880c:	f00a fab6 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 8008810:	79e3      	ldrb	r3, [r4, #7]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d1f5      	bne.n	8008802 <OnJoinRequest+0x32>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <OnJoinRequest+0x74>)
 8008818:	2200      	movs	r2, #0
 800881a:	4611      	mov	r1, r2
 800881c:	2002      	movs	r0, #2
 800881e:	f00a faad 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 8008822:	2101      	movs	r1, #1
 8008824:	4b08      	ldr	r3, [pc, #32]	; (8008848 <OnJoinRequest+0x78>)
 8008826:	7818      	ldrb	r0, [r3, #0]
 8008828:	f001 fad4 	bl	8009dd4 <LmHandlerJoin>
}
 800882c:	e7e9      	b.n	8008802 <OnJoinRequest+0x32>
 800882e:	4770      	bx	lr
 8008830:	200006d8 	.word	0x200006d8
 8008834:	08013454 	.word	0x08013454
 8008838:	0801346c 	.word	0x0801346c
 800883c:	0801348c 	.word	0x0801348c
 8008840:	080134ac 	.word	0x080134ac
 8008844:	080134c8 	.word	0x080134c8
 8008848:	20000010 	.word	0x20000010

0800884c <OnTxPeriodicityChanged>:
{
 800884c:	b510      	push	{r4, lr}
  if (TxPeriodicity == 0)
 800884e:	b110      	cbz	r0, 8008856 <OnTxPeriodicityChanged+0xa>
  TxPeriodicity = periodicity;
 8008850:	4a09      	ldr	r2, [pc, #36]	; (8008878 <OnTxPeriodicityChanged+0x2c>)
 8008852:	6010      	str	r0, [r2, #0]
 8008854:	e003      	b.n	800885e <OnTxPeriodicityChanged+0x12>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8008856:	4b08      	ldr	r3, [pc, #32]	; (8008878 <OnTxPeriodicityChanged+0x2c>)
 8008858:	f242 7210 	movw	r2, #10000	; 0x2710
 800885c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800885e:	4c07      	ldr	r4, [pc, #28]	; (800887c <OnTxPeriodicityChanged+0x30>)
 8008860:	4620      	mov	r0, r4
 8008862:	f00a f8b5 	bl	80129d0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8008866:	4b04      	ldr	r3, [pc, #16]	; (8008878 <OnTxPeriodicityChanged+0x2c>)
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	4620      	mov	r0, r4
 800886c:	f00a f954 	bl	8012b18 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8008870:	4620      	mov	r0, r4
 8008872:	f00a f90b 	bl	8012a8c <UTIL_TIMER_Start>
}
 8008876:	bd10      	pop	{r4, pc}
 8008878:	20000080 	.word	0x20000080
 800887c:	20000738 	.word	0x20000738

08008880 <OnRxData>:
  if (params != NULL)
 8008880:	2900      	cmp	r1, #0
 8008882:	d064      	beq.n	800894e <OnRxData+0xce>
{
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
    UTIL_TIMER_Start(&RxLedTimer);
 800888c:	4830      	ldr	r0, [pc, #192]	; (8008950 <OnRxData+0xd0>)
 800888e:	f00a f8fd 	bl	8012a8c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8008892:	782e      	ldrb	r6, [r5, #0]
 8008894:	2e00      	cmp	r6, #0
 8008896:	d03e      	beq.n	8008916 <OnRxData+0x96>
      if (appData != NULL)
 8008898:	2c00      	cmp	r4, #0
 800889a:	d03b      	beq.n	8008914 <OnRxData+0x94>
        RxPort = appData->Port;
 800889c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800889e:	6863      	ldr	r3, [r4, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d038      	beq.n	8008916 <OnRxData+0x96>
    switch (appData->Port)
 80088a4:	2e02      	cmp	r6, #2
 80088a6:	d016      	beq.n	80088d6 <OnRxData+0x56>
 80088a8:	2e03      	cmp	r6, #3
 80088aa:	d134      	bne.n	8008916 <OnRxData+0x96>
        if (appData->BufferSize == 1)
 80088ac:	7862      	ldrb	r2, [r4, #1]
 80088ae:	2a01      	cmp	r2, #1
 80088b0:	d131      	bne.n	8008916 <OnRxData+0x96>
          switch (appData->Buffer[0])
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d006      	beq.n	80088c6 <OnRxData+0x46>
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d008      	beq.n	80088ce <OnRxData+0x4e>
 80088bc:	bb5b      	cbnz	r3, 8008916 <OnRxData+0x96>
              LmHandlerRequestClass(CLASS_A);
 80088be:	2000      	movs	r0, #0
 80088c0:	f001 fa2c 	bl	8009d1c <LmHandlerRequestClass>
              break;
 80088c4:	e027      	b.n	8008916 <OnRxData+0x96>
              LmHandlerRequestClass(CLASS_B);
 80088c6:	2001      	movs	r0, #1
 80088c8:	f001 fa28 	bl	8009d1c <LmHandlerRequestClass>
              break;
 80088cc:	e023      	b.n	8008916 <OnRxData+0x96>
              LmHandlerRequestClass(CLASS_C);
 80088ce:	2002      	movs	r0, #2
 80088d0:	f001 fa24 	bl	8009d1c <LmHandlerRequestClass>
              break;
 80088d4:	e01f      	b.n	8008916 <OnRxData+0x96>
        if (appData->BufferSize == 1)
 80088d6:	7862      	ldrb	r2, [r4, #1]
 80088d8:	2a01      	cmp	r2, #1
 80088da:	d11c      	bne.n	8008916 <OnRxData+0x96>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80088dc:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 80088de:	f013 0f01 	tst.w	r3, #1
 80088e2:	d10b      	bne.n	80088fc <OnRxData+0x7c>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 80088e4:	4b1b      	ldr	r3, [pc, #108]	; (8008954 <OnRxData+0xd4>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	4611      	mov	r1, r2
 80088ea:	2003      	movs	r0, #3
 80088ec:	f00a fa46 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 80088f0:	2201      	movs	r2, #1
 80088f2:	2120      	movs	r1, #32
 80088f4:	4818      	ldr	r0, [pc, #96]	; (8008958 <OnRxData+0xd8>)
 80088f6:	f7fb fbd9 	bl	80040ac <HAL_GPIO_WritePin>
 80088fa:	e00c      	b.n	8008916 <OnRxData+0x96>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80088fc:	4b17      	ldr	r3, [pc, #92]	; (800895c <OnRxData+0xdc>)
 80088fe:	2200      	movs	r2, #0
 8008900:	4611      	mov	r1, r2
 8008902:	2003      	movs	r0, #3
 8008904:	f00a fa3a 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8008908:	2200      	movs	r2, #0
 800890a:	2120      	movs	r1, #32
 800890c:	4812      	ldr	r0, [pc, #72]	; (8008958 <OnRxData+0xd8>)
 800890e:	f7fb fbcd 	bl	80040ac <HAL_GPIO_WritePin>
 8008912:	e000      	b.n	8008916 <OnRxData+0x96>
 uint8_t RxPort = 0;
 8008914:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8008916:	7c2b      	ldrb	r3, [r5, #16]
 8008918:	2b05      	cmp	r3, #5
 800891a:	d901      	bls.n	8008920 <OnRxData+0xa0>
}
 800891c:	b006      	add	sp, #24
 800891e:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8008920:	f995 200a 	ldrsb.w	r2, [r5, #10]
 8008924:	9205      	str	r2, [sp, #20]
 8008926:	f995 2009 	ldrsb.w	r2, [r5, #9]
 800892a:	9204      	str	r2, [sp, #16]
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <OnRxData+0xe0>)
 800892e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	9601      	str	r6, [sp, #4]
 800893c:	68eb      	ldr	r3, [r5, #12]
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <OnRxData+0xe4>)
 8008942:	2200      	movs	r2, #0
 8008944:	4611      	mov	r1, r2
 8008946:	2003      	movs	r0, #3
 8008948:	f00a fa18 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800894c:	e7e6      	b.n	800891c <OnRxData+0x9c>
 800894e:	4770      	bx	lr
 8008950:	200006f0 	.word	0x200006f0
 8008954:	080134ec 	.word	0x080134ec
 8008958:	48000400 	.word	0x48000400
 800895c:	080134f8 	.word	0x080134f8
 8008960:	080136d8 	.word	0x080136d8
 8008964:	08013504 	.word	0x08013504

08008968 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4604      	mov	r4, r0
 800896c:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800896e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <OnStoreContextRequest+0x20>)
 8008974:	f7f8 fe02 	bl	800157c <FLASH_IF_Erase>
 8008978:	b100      	cbz	r0, 800897c <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800897a:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800897c:	462a      	mov	r2, r5
 800897e:	4621      	mov	r1, r4
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <OnStoreContextRequest+0x20>)
 8008982:	f7f8 fce7 	bl	8001354 <FLASH_IF_Write>
}
 8008986:	e7f8      	b.n	800897a <OnStoreContextRequest+0x12>
 8008988:	0803f000 	.word	0x0803f000

0800898c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800898c:	b508      	push	{r3, lr}
 800898e:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8008990:	4901      	ldr	r1, [pc, #4]	; (8008998 <OnRestoreContextRequest+0xc>)
 8008992:	f7f8 fdcd 	bl	8001530 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8008996:	bd08      	pop	{r3, pc}
 8008998:	0803f000 	.word	0x0803f000

0800899c <StopJoin>:
{
 800899c:	b538      	push	{r3, r4, r5, lr}
  UTIL_TIMER_Stop(&TxTimer);
 800899e:	4815      	ldr	r0, [pc, #84]	; (80089f4 <StopJoin+0x58>)
 80089a0:	f00a f816 	bl	80129d0 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80089a4:	f001 fce0 	bl	800a368 <LmHandlerStop>
 80089a8:	b148      	cbz	r0, 80089be <StopJoin+0x22>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <StopJoin+0x5c>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	4611      	mov	r1, r2
 80089b0:	2002      	movs	r0, #2
 80089b2:	f00a f9e3 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80089b6:	4811      	ldr	r0, [pc, #68]	; (80089fc <StopJoin+0x60>)
 80089b8:	f00a f868 	bl	8012a8c <UTIL_TIMER_Start>
}
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <StopJoin+0x64>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	4611      	mov	r1, r2
 80089c4:	2002      	movs	r0, #2
 80089c6:	f00a f9d9 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80089ca:	4c0e      	ldr	r4, [pc, #56]	; (8008a04 <StopJoin+0x68>)
 80089cc:	2501      	movs	r5, #1
 80089ce:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <StopJoin+0x6c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	4611      	mov	r1, r2
 80089d6:	2002      	movs	r0, #2
 80089d8:	f00a f9d0 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80089dc:	480b      	ldr	r0, [pc, #44]	; (8008a0c <StopJoin+0x70>)
 80089de:	f001 fba3 	bl	800a128 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80089e2:	4629      	mov	r1, r5
 80089e4:	7820      	ldrb	r0, [r4, #0]
 80089e6:	f001 f9f5 	bl	8009dd4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80089ea:	4802      	ldr	r0, [pc, #8]	; (80089f4 <StopJoin+0x58>)
 80089ec:	f00a f84e 	bl	8012a8c <UTIL_TIMER_Start>
 80089f0:	e7e1      	b.n	80089b6 <StopJoin+0x1a>
 80089f2:	bf00      	nop
 80089f4:	20000738 	.word	0x20000738
 80089f8:	0801354c 	.word	0x0801354c
 80089fc:	20000708 	.word	0x20000708
 8008a00:	0801356c 	.word	0x0801356c
 8008a04:	20000010 	.word	0x20000010
 8008a08:	08013580 	.word	0x08013580
 8008a0c:	20000068 	.word	0x20000068

08008a10 <StoreContext>:
{
 8008a10:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8008a12:	f001 fd51 	bl	800a4b8 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8008a16:	f110 0f08 	cmn.w	r0, #8
 8008a1a:	d003      	beq.n	8008a24 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8008a1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a20:	d007      	beq.n	8008a32 <StoreContext+0x22>
}
 8008a22:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <StoreContext+0x30>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2002      	movs	r0, #2
 8008a2c:	f00a f9a6 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
 8008a30:	e7f7      	b.n	8008a22 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <StoreContext+0x34>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	4611      	mov	r1, r2
 8008a38:	2002      	movs	r0, #2
 8008a3a:	f00a f99f 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8008a3e:	e7f0      	b.n	8008a22 <StoreContext+0x12>
 8008a40:	080135a0 	.word	0x080135a0
 8008a44:	080135b8 	.word	0x080135b8

08008a48 <SendTxData>:
{
 8008a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4a:	b083      	sub	sp, #12
  extBattery = GetBatteryLevel();
 8008a4c:	f7f9 fb9a 	bl	8002184 <GetBatteryLevel>
 8008a50:	4e54      	ldr	r6, [pc, #336]	; (8008ba4 <SendTxData+0x15c>)
 8008a52:	6030      	str	r0, [r6, #0]
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", extBattery);
 8008a54:	9000      	str	r0, [sp, #0]
 8008a56:	4b54      	ldr	r3, [pc, #336]	; (8008ba8 <SendTxData+0x160>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	2002      	movs	r0, #2
 8008a5e:	f00a f98d 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8008a62:	4c52      	ldr	r4, [pc, #328]	; (8008bac <SendTxData+0x164>)
 8008a64:	2302      	movs	r3, #2
 8008a66:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 8008a68:	6861      	ldr	r1, [r4, #4]
 8008a6a:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <SendTxData+0x168>)
 8008a6c:	6813      	ldr	r3, [r2, #0]
 8008a6e:	4d51      	ldr	r5, [pc, #324]	; (8008bb4 <SendTxData+0x16c>)
 8008a70:	fba5 0303 	umull	r0, r3, r5, r3
 8008a74:	0b5b      	lsrs	r3, r3, #13
 8008a76:	700b      	strb	r3, [r1, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 8008a78:	6861      	ldr	r1, [r4, #4]
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	fba5 2303 	umull	r2, r3, r5, r3
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	704b      	strb	r3, [r1, #1]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 8008a84:	6861      	ldr	r1, [r4, #4]
 8008a86:	4a4c      	ldr	r2, [pc, #304]	; (8008bb8 <SendTxData+0x170>)
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	fba5 0303 	umull	r0, r3, r5, r3
 8008a8e:	0b5b      	lsrs	r3, r3, #13
 8008a90:	708b      	strb	r3, [r1, #2]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 8008a92:	6861      	ldr	r1, [r4, #4]
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	fba5 2303 	umull	r2, r3, r5, r3
 8008a9a:	095b      	lsrs	r3, r3, #5
 8008a9c:	70cb      	strb	r3, [r1, #3]
  AppData.Buffer[i++] = (PM10/100)>>8;
 8008a9e:	4b47      	ldr	r3, [pc, #284]	; (8008bbc <SendTxData+0x174>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	fba5 2303 	umull	r2, r3, r5, r3
 8008aa6:	095a      	lsrs	r2, r3, #5
 8008aa8:	6861      	ldr	r1, [r4, #4]
 8008aaa:	0b5b      	lsrs	r3, r3, #13
 8008aac:	710b      	strb	r3, [r1, #4]
  AppData.Buffer[i++] = (PM10/100)%256;
 8008aae:	6863      	ldr	r3, [r4, #4]
 8008ab0:	715a      	strb	r2, [r3, #5]
  tempVar = ((int16_t)(temp*100.0)) + 10000;
 8008ab2:	4b43      	ldr	r3, [pc, #268]	; (8008bc0 <SendTxData+0x178>)
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	f7f7 fccb 	bl	8000450 <__aeabi_f2d>
 8008aba:	2200      	movs	r2, #0
 8008abc:	4b41      	ldr	r3, [pc, #260]	; (8008bc4 <SendTxData+0x17c>)
 8008abe:	f7f7 fd1f 	bl	8000500 <__aeabi_dmul>
 8008ac2:	f7f7 ffb7 	bl	8000a34 <__aeabi_d2iz>
 8008ac6:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 8008aca:	3010      	adds	r0, #16
 8008acc:	b200      	sxth	r0, r0
  AppData.Buffer[i++] = tempVar/100;
 8008ace:	6862      	ldr	r2, [r4, #4]
 8008ad0:	fb85 3100 	smull	r3, r1, r5, r0
 8008ad4:	17c3      	asrs	r3, r0, #31
 8008ad6:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8008ada:	7193      	strb	r3, [r2, #6]
  AppData.Buffer[i++] = tempVar%100;
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	2764      	movs	r7, #100	; 0x64
 8008ae0:	fb07 0013 	mls	r0, r7, r3, r0
 8008ae4:	71d0      	strb	r0, [r2, #7]
  tempVar = ((int16_t)(humidity*100.0));
 8008ae6:	4b38      	ldr	r3, [pc, #224]	; (8008bc8 <SendTxData+0x180>)
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f7f7 fcb1 	bl	8000450 <__aeabi_f2d>
 8008aee:	2200      	movs	r2, #0
 8008af0:	4b34      	ldr	r3, [pc, #208]	; (8008bc4 <SendTxData+0x17c>)
 8008af2:	f7f7 fd05 	bl	8000500 <__aeabi_dmul>
 8008af6:	f7f7 ff9d 	bl	8000a34 <__aeabi_d2iz>
 8008afa:	b200      	sxth	r0, r0
  AppData.Buffer[i++] = tempVar/100;
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	fb85 2500 	smull	r2, r5, r5, r0
 8008b02:	17c2      	asrs	r2, r0, #31
 8008b04:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 8008b08:	721a      	strb	r2, [r3, #8]
  AppData.Buffer[i++] = tempVar%100;
 8008b0a:	fb07 0012 	mls	r0, r7, r2, r0
 8008b0e:	7258      	strb	r0, [r3, #9]
  AppData.Buffer[i++] = OzonePPB/256;
 8008b10:	4a2e      	ldr	r2, [pc, #184]	; (8008bcc <SendTxData+0x184>)
 8008b12:	8812      	ldrh	r2, [r2, #0]
 8008b14:	0a11      	lsrs	r1, r2, #8
 8008b16:	7299      	strb	r1, [r3, #10]
  AppData.Buffer[i++] = OzonePPB%256;
 8008b18:	72da      	strb	r2, [r3, #11]
  AppData.Buffer[i++] = extBattery;
 8008b1a:	6832      	ldr	r2, [r6, #0]
 8008b1c:	731a      	strb	r2, [r3, #12]
  AppData.BufferSize = i;
 8008b1e:	230d      	movs	r3, #13
 8008b20:	7063      	strb	r3, [r4, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8008b22:	4b2b      	ldr	r3, [pc, #172]	; (8008bd0 <SendTxData+0x188>)
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	b9db      	cbnz	r3, 8008b60 <SendTxData+0x118>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b2a      	ldr	r3, [pc, #168]	; (8008bd4 <SendTxData+0x18c>)
 8008b2c:	78d9      	ldrb	r1, [r3, #3]
 8008b2e:	481f      	ldr	r0, [pc, #124]	; (8008bac <SendTxData+0x164>)
 8008b30:	f001 f9c0 	bl	8009eb4 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8008b34:	b1e0      	cbz	r0, 8008b70 <SendTxData+0x128>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8008b36:	f110 0f06 	cmn.w	r0, #6
 8008b3a:	d021      	beq.n	8008b80 <SendTxData+0x138>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8008b3c:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8008b3e:	4c26      	ldr	r4, [pc, #152]	; (8008bd8 <SendTxData+0x190>)
 8008b40:	4620      	mov	r0, r4
 8008b42:	f009 ff45 	bl	80129d0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8008b46:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <SendTxData+0x194>)
 8008b48:	6819      	ldr	r1, [r3, #0]
 8008b4a:	42a9      	cmp	r1, r5
 8008b4c:	bf38      	it	cc
 8008b4e:	4629      	movcc	r1, r5
 8008b50:	4620      	mov	r0, r4
 8008b52:	f009 ffe1 	bl	8012b18 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8008b56:	4620      	mov	r0, r4
 8008b58:	f009 ff98 	bl	8012a8c <UTIL_TIMER_Start>
}
 8008b5c:	b003      	add	sp, #12
 8008b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8008b60:	f001 f8c8 	bl	8009cf4 <LmHandlerJoinStatus>
 8008b64:	2801      	cmp	r0, #1
 8008b66:	d1df      	bne.n	8008b28 <SendTxData+0xe0>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8008b68:	4819      	ldr	r0, [pc, #100]	; (8008bd0 <SendTxData+0x188>)
 8008b6a:	f009 ff31 	bl	80129d0 <UTIL_TIMER_Stop>
 8008b6e:	e7db      	b.n	8008b28 <SendTxData+0xe0>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8008b70:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <SendTxData+0x198>)
 8008b72:	2201      	movs	r2, #1
 8008b74:	2100      	movs	r1, #0
 8008b76:	4610      	mov	r0, r2
 8008b78:	f00a f900 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	e7de      	b.n	8008b3e <SendTxData+0xf6>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8008b80:	f001 f8b2 	bl	8009ce8 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8008b84:	4605      	mov	r5, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d0d9      	beq.n	8008b3e <SendTxData+0xf6>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8008b8a:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <SendTxData+0x19c>)
 8008b8c:	fba3 2300 	umull	r2, r3, r3, r0
 8008b90:	099b      	lsrs	r3, r3, #6
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <SendTxData+0x1a0>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f00a f8ee 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
 8008ba0:	e7cd      	b.n	8008b3e <SendTxData+0xf6>
 8008ba2:	bf00      	nop
 8008ba4:	20000260 	.word	0x20000260
 8008ba8:	080135d0 	.word	0x080135d0
 8008bac:	20000014 	.word	0x20000014
 8008bb0:	20000248 	.word	0x20000248
 8008bb4:	51eb851f 	.word	0x51eb851f
 8008bb8:	20000250 	.word	0x20000250
 8008bbc:	2000024c 	.word	0x2000024c
 8008bc0:	2000026c 	.word	0x2000026c
 8008bc4:	40590000 	.word	0x40590000
 8008bc8:	20000264 	.word	0x20000264
 8008bcc:	20000244 	.word	0x20000244
 8008bd0:	200006d8 	.word	0x200006d8
 8008bd4:	20000068 	.word	0x20000068
 8008bd8:	20000738 	.word	0x20000738
 8008bdc:	20000080 	.word	0x20000080
 8008be0:	080135dc 	.word	0x080135dc
 8008be4:	10624dd3 	.word	0x10624dd3
 8008be8:	080135ec 	.word	0x080135ec

08008bec <LoRaWAN_Init>:
{
 8008bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bee:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8008bf0:	2400      	movs	r4, #0
 8008bf2:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8008bf4:	9402      	str	r4, [sp, #8]
 8008bf6:	2703      	movs	r7, #3
 8008bf8:	9701      	str	r7, [sp, #4]
 8008bfa:	2501      	movs	r5, #1
 8008bfc:	9500      	str	r5, [sp, #0]
 8008bfe:	4b4b      	ldr	r3, [pc, #300]	; (8008d2c <LoRaWAN_Init+0x140>)
 8008c00:	4622      	mov	r2, r4
 8008c02:	4621      	mov	r1, r4
 8008c04:	2002      	movs	r0, #2
 8008c06:	f00a f8b9 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8008c0a:	9402      	str	r4, [sp, #8]
 8008c0c:	2305      	movs	r3, #5
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	2602      	movs	r6, #2
 8008c12:	9600      	str	r6, [sp, #0]
 8008c14:	4b46      	ldr	r3, [pc, #280]	; (8008d30 <LoRaWAN_Init+0x144>)
 8008c16:	4622      	mov	r2, r4
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f00a f8ae 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8008c20:	9402      	str	r4, [sp, #8]
 8008c22:	9701      	str	r7, [sp, #4]
 8008c24:	9500      	str	r5, [sp, #0]
 8008c26:	4b43      	ldr	r3, [pc, #268]	; (8008d34 <LoRaWAN_Init+0x148>)
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f00a f8a5 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8008c32:	a905      	add	r1, sp, #20
 8008c34:	4620      	mov	r0, r4
 8008c36:	f001 fb81 	bl	800a33c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8008c3a:	9b05      	ldr	r3, [sp, #20]
 8008c3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c40:	9202      	str	r2, [sp, #8]
 8008c42:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008c46:	9201      	str	r2, [sp, #4]
 8008c48:	0e1b      	lsrs	r3, r3, #24
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4b3a      	ldr	r3, [pc, #232]	; (8008d38 <LoRaWAN_Init+0x14c>)
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4621      	mov	r1, r4
 8008c52:	4630      	mov	r0, r6
 8008c54:	f00a f892 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8008c58:	a905      	add	r1, sp, #20
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f001 fb6e 	bl	800a33c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	9203      	str	r2, [sp, #12]
 8008c66:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c6a:	9202      	str	r2, [sp, #8]
 8008c6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008c70:	9201      	str	r2, [sp, #4]
 8008c72:	0e1b      	lsrs	r3, r3, #24
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4b31      	ldr	r3, [pc, #196]	; (8008d3c <LoRaWAN_Init+0x150>)
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f00a f87d 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8008c82:	9400      	str	r4, [sp, #0]
 8008c84:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <LoRaWAN_Init+0x154>)
 8008c86:	4622      	mov	r2, r4
 8008c88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008c8c:	482d      	ldr	r0, [pc, #180]	; (8008d44 <LoRaWAN_Init+0x158>)
 8008c8e:	f009 fe3b 	bl	8012908 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8008c92:	9400      	str	r4, [sp, #0]
 8008c94:	4b2c      	ldr	r3, [pc, #176]	; (8008d48 <LoRaWAN_Init+0x15c>)
 8008c96:	4622      	mov	r2, r4
 8008c98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008c9c:	482b      	ldr	r0, [pc, #172]	; (8008d4c <LoRaWAN_Init+0x160>)
 8008c9e:	f009 fe33 	bl	8012908 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8008ca2:	4f2b      	ldr	r7, [pc, #172]	; (8008d50 <LoRaWAN_Init+0x164>)
 8008ca4:	9400      	str	r4, [sp, #0]
 8008ca6:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <LoRaWAN_Init+0x168>)
 8008ca8:	462a      	mov	r2, r5
 8008caa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f009 fe2a 	bl	8012908 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8008cb4:	9400      	str	r4, [sp, #0]
 8008cb6:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <LoRaWAN_Init+0x16c>)
 8008cb8:	4622      	mov	r2, r4
 8008cba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008cbe:	4827      	ldr	r0, [pc, #156]	; (8008d5c <LoRaWAN_Init+0x170>)
 8008cc0:	f009 fe22 	bl	8012908 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8008cc4:	4a26      	ldr	r2, [pc, #152]	; (8008d60 <LoRaWAN_Init+0x174>)
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f009 fe01 	bl	80128d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8008cce:	4a25      	ldr	r2, [pc, #148]	; (8008d64 <LoRaWAN_Init+0x178>)
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f009 fdfc 	bl	80128d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8008cd8:	4a23      	ldr	r2, [pc, #140]	; (8008d68 <LoRaWAN_Init+0x17c>)
 8008cda:	4621      	mov	r1, r4
 8008cdc:	2004      	movs	r0, #4
 8008cde:	f009 fdf7 	bl	80128d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8008ce2:	4a22      	ldr	r2, [pc, #136]	; (8008d6c <LoRaWAN_Init+0x180>)
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	2008      	movs	r0, #8
 8008ce8:	f009 fdf2 	bl	80128d0 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8008cec:	f000 f84e 	bl	8008d8c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8008cf0:	491f      	ldr	r1, [pc, #124]	; (8008d70 <LoRaWAN_Init+0x184>)
 8008cf2:	4820      	ldr	r0, [pc, #128]	; (8008d74 <LoRaWAN_Init+0x188>)
 8008cf4:	f001 fae2 	bl	800a2bc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8008cf8:	481f      	ldr	r0, [pc, #124]	; (8008d78 <LoRaWAN_Init+0x18c>)
 8008cfa:	f001 fa15 	bl	800a128 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f009 fec4 	bl	8012a8c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8008d04:	4629      	mov	r1, r5
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <LoRaWAN_Init+0x190>)
 8008d08:	7818      	ldrb	r0, [r3, #0]
 8008d0a:	f001 f863 	bl	8009dd4 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8008d0e:	4d1c      	ldr	r5, [pc, #112]	; (8008d80 <LoRaWAN_Init+0x194>)
 8008d10:	9400      	str	r4, [sp, #0]
 8008d12:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <LoRaWAN_Init+0x198>)
 8008d14:	4622      	mov	r2, r4
 8008d16:	491c      	ldr	r1, [pc, #112]	; (8008d88 <LoRaWAN_Init+0x19c>)
 8008d18:	6809      	ldr	r1, [r1, #0]
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f009 fdf4 	bl	8012908 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8008d20:	4628      	mov	r0, r5
 8008d22:	f009 feb3 	bl	8012a8c <UTIL_TIMER_Start>
}
 8008d26:	b007      	add	sp, #28
 8008d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0801360c 	.word	0x0801360c
 8008d30:	08013630 	.word	0x08013630
 8008d34:	08013650 	.word	0x08013650
 8008d38:	08013670 	.word	0x08013670
 8008d3c:	08013694 	.word	0x08013694
 8008d40:	080085d1 	.word	0x080085d1
 8008d44:	20000720 	.word	0x20000720
 8008d48:	080085d3 	.word	0x080085d3
 8008d4c:	200006f0 	.word	0x200006f0
 8008d50:	200006d8 	.word	0x200006d8
 8008d54:	080085d5 	.word	0x080085d5
 8008d58:	08008781 	.word	0x08008781
 8008d5c:	20000708 	.word	0x20000708
 8008d60:	08009c9d 	.word	0x08009c9d
 8008d64:	08008a49 	.word	0x08008a49
 8008d68:	08008a11 	.word	0x08008a11
 8008d6c:	0800899d 	.word	0x0800899d
 8008d70:	01030000 	.word	0x01030000
 8008d74:	2000001c 	.word	0x2000001c
 8008d78:	20000068 	.word	0x20000068
 8008d7c:	20000010 	.word	0x20000010
 8008d80:	20000738 	.word	0x20000738
 8008d84:	0800875d 	.word	0x0800875d
 8008d88:	20000080 	.word	0x20000080

08008d8c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8008d8c:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <LoraInfo_Init+0x10>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8008d92:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8008d94:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8008d96:	2220      	movs	r2, #32
 8008d98:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8008d9a:	4770      	bx	lr
 8008d9c:	20000750 	.word	0x20000750

08008da0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8008da0:	4800      	ldr	r0, [pc, #0]	; (8008da4 <LoraInfo_GetPtr+0x4>)
 8008da2:	4770      	bx	lr
 8008da4:	20000750 	.word	0x20000750

08008da8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8008da8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8008daa:	f7f9 fe5a 	bl	8002a62 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008dae:	bd08      	pop	{r3, pc}

08008db0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8008db0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8008db2:	f7f9 fe7c 	bl	8002aae <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8008db6:	bd08      	pop	{r3, pc}

08008db8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8008db8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8008dba:	f7f9 feb4 	bl	8002b26 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8008dbe:	bd08      	pop	{r3, pc}

08008dc0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8008dc0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8008dc2:	f7f9 feb2 	bl	8002b2a <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008dc6:	bd08      	pop	{r3, pc}

08008dc8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8008dc8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8008dca:	f7f9 feb0 	bl	8002b2e <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008dce:	bd08      	pop	{r3, pc}

08008dd0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8008dd0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8008dd2:	f7f9 feae 	bl	8002b32 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8008dd6:	bd08      	pop	{r3, pc}

08008dd8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8008ddc:	2210      	movs	r2, #16
 8008dde:	2100      	movs	r1, #0
 8008de0:	30f1      	adds	r0, #241	; 0xf1
 8008de2:	f007 f87f 	bl	800fee4 <memset1>
    ctx->M_n = 0;
 8008de6:	2100      	movs	r1, #0
 8008de8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8008dec:	22f0      	movs	r2, #240	; 0xf0
 8008dee:	4620      	mov	r0, r4
 8008df0:	f007 f878 	bl	800fee4 <memset1>
}
 8008df4:	bd10      	pop	{r4, pc}

08008df6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8008df6:	b508      	push	{r3, lr}
 8008df8:	4602      	mov	r2, r0
 8008dfa:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8008dfc:	2110      	movs	r1, #16
 8008dfe:	f000 f9d9 	bl	80091b4 <lorawan_aes_set_key>
}
 8008e02:	bd08      	pop	{r3, pc}

08008e04 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	4692      	mov	sl, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8008e10:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008e14:	bbf3      	cbnz	r3, 8008e94 <AES_CMAC_Update+0x90>
        memcpy1( &ctx->X[0], in, 16 );

        data += mlen;
        len -= mlen;
    }
    while( len > 16 )
 8008e16:	f1ba 0f10 	cmp.w	sl, #16
 8008e1a:	d970      	bls.n	8008efe <AES_CMAC_Update+0xfa>
 8008e1c:	f1aa 0b11 	sub.w	fp, sl, #17
 8008e20:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 8008e24:	f10b 0901 	add.w	r9, fp, #1
 8008e28:	eb05 1909 	add.w	r9, r5, r9, lsl #4
 8008e2c:	f506 7480 	add.w	r4, r6, #256	; 0x100
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008e30:	f106 08f1 	add.w	r8, r6, #241	; 0xf1
 8008e34:	2710      	movs	r7, #16
        XOR( data, ctx->X );
 8008e36:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 8008e3a:	1e69      	subs	r1, r5, #1
 8008e3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008e40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e44:	4042      	eors	r2, r0
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d1f7      	bne.n	8008e3c <AES_CMAC_Update+0x38>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008e4c:	463a      	mov	r2, r7
 8008e4e:	4641      	mov	r1, r8
 8008e50:	4668      	mov	r0, sp
 8008e52:	f007 f82d 	bl	800feb0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8008e56:	4632      	mov	r2, r6
 8008e58:	4669      	mov	r1, sp
 8008e5a:	4668      	mov	r0, sp
 8008e5c:	f000 fa36 	bl	80092cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8008e60:	463a      	mov	r2, r7
 8008e62:	4669      	mov	r1, sp
 8008e64:	4640      	mov	r0, r8
 8008e66:	f007 f823 	bl	800feb0 <memcpy1>

        data += 16;
 8008e6a:	3510      	adds	r5, #16
    while( len > 16 )
 8008e6c:	454d      	cmp	r5, r9
 8008e6e:	d1e2      	bne.n	8008e36 <AES_CMAC_Update+0x32>
 8008e70:	f1aa 0a10 	sub.w	sl, sl, #16
        len -= 16;
 8008e74:	ebcb 7b0b 	rsb	fp, fp, fp, lsl #28
 8008e78:	eb0a 1a0b 	add.w	sl, sl, fp, lsl #4
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8008e7c:	fa1f f28a 	uxth.w	r2, sl
 8008e80:	4649      	mov	r1, r9
 8008e82:	f206 1001 	addw	r0, r6, #257	; 0x101
 8008e86:	f007 f813 	bl	800feb0 <memcpy1>
    ctx->M_n = len;
 8008e8a:	f8c6 a114 	str.w	sl, [r6, #276]	; 0x114
}
 8008e8e:	b005      	add	sp, #20
 8008e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mlen = MIN( 16 - ctx->M_n, len );
 8008e94:	f1c3 0710 	rsb	r7, r3, #16
 8008e98:	463c      	mov	r4, r7
 8008e9a:	4297      	cmp	r7, r2
 8008e9c:	bf28      	it	cs
 8008e9e:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8008ea0:	f200 1001 	addw	r0, r0, #257	; 0x101
 8008ea4:	b2a2      	uxth	r2, r4
 8008ea6:	4418      	add	r0, r3
 8008ea8:	f007 f802 	bl	800feb0 <memcpy1>
        ctx->M_n += mlen;
 8008eac:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8008eb0:	4423      	add	r3, r4
 8008eb2:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8008eb6:	2b0f      	cmp	r3, #15
 8008eb8:	d9e9      	bls.n	8008e8e <AES_CMAC_Update+0x8a>
 8008eba:	4557      	cmp	r7, sl
 8008ebc:	d2e7      	bcs.n	8008e8e <AES_CMAC_Update+0x8a>
 8008ebe:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 8008ec2:	f506 7080 	add.w	r0, r6, #256	; 0x100
        XOR( ctx->M_last, ctx->X );
 8008ec6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008eca:	7c19      	ldrb	r1, [r3, #16]
 8008ecc:	404a      	eors	r2, r1
 8008ece:	701a      	strb	r2, [r3, #0]
 8008ed0:	4283      	cmp	r3, r0
 8008ed2:	d1f8      	bne.n	8008ec6 <AES_CMAC_Update+0xc2>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008ed4:	f106 07f1 	add.w	r7, r6, #241	; 0xf1
 8008ed8:	2210      	movs	r2, #16
 8008eda:	4639      	mov	r1, r7
 8008edc:	4668      	mov	r0, sp
 8008ede:	f006 ffe7 	bl	800feb0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8008ee2:	4632      	mov	r2, r6
 8008ee4:	4669      	mov	r1, sp
 8008ee6:	4668      	mov	r0, sp
 8008ee8:	f000 f9f0 	bl	80092cc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8008eec:	2210      	movs	r2, #16
 8008eee:	4669      	mov	r1, sp
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f006 ffdd 	bl	800feb0 <memcpy1>
        data += mlen;
 8008ef6:	4425      	add	r5, r4
        len -= mlen;
 8008ef8:	ebaa 0a04 	sub.w	sl, sl, r4
 8008efc:	e78b      	b.n	8008e16 <AES_CMAC_Update+0x12>
    while( len > 16 )
 8008efe:	46a9      	mov	r9, r5
 8008f00:	e7bc      	b.n	8008e7c <AES_CMAC_Update+0x78>

08008f02 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8008f02:	b530      	push	{r4, r5, lr}
 8008f04:	b089      	sub	sp, #36	; 0x24
 8008f06:	4605      	mov	r5, r0
 8008f08:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	eb0d 0002 	add.w	r0, sp, r2
 8008f12:	f006 ffe7 	bl	800fee4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8008f16:	4622      	mov	r2, r4
 8008f18:	a904      	add	r1, sp, #16
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	f000 f9d6 	bl	80092cc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8008f20:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	db39      	blt.n	8008f9c <AES_CMAC_Final+0x9a>
 8008f28:	aa04      	add	r2, sp, #16
 8008f2a:	f10d 001f 	add.w	r0, sp, #31
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8008f2e:	7813      	ldrb	r3, [r2, #0]
 8008f30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8008f3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f3e:	4282      	cmp	r2, r0
 8008f40:	d1f5      	bne.n	8008f2e <AES_CMAC_Final+0x2c>
 8008f42:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 8008f4a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8008f4e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008f52:	2b10      	cmp	r3, #16
 8008f54:	d036      	beq.n	8008fc4 <AES_CMAC_Final+0xc2>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8008f56:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	db40      	blt.n	8008fe0 <AES_CMAC_Final+0xde>
 8008f5e:	a904      	add	r1, sp, #16
 8008f60:	f10d 0c1f 	add.w	ip, sp, #31
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8008f64:	780a      	ldrb	r2, [r1, #0]
 8008f66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f6a:	0052      	lsls	r2, r2, #1
 8008f6c:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8008f70:	f801 2c01 	strb.w	r2, [r1, #-1]
 8008f74:	4561      	cmp	r1, ip
 8008f76:	d1f5      	bne.n	8008f64 <AES_CMAC_Final+0x62>
 8008f78:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008f7c:	0052      	lsls	r2, r2, #1
 8008f7e:	b2d2      	uxtb	r2, r2
            K[15] ^= 0x87;
 8008f80:	f88d 201f 	strb.w	r2, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8008f84:	18e2      	adds	r2, r4, r3
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d841      	bhi.n	800901a <AES_CMAC_Final+0x118>
 8008f96:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 8008f98:	2100      	movs	r1, #0
 8008f9a:	e036      	b.n	800900a <AES_CMAC_Final+0x108>
 8008f9c:	aa04      	add	r2, sp, #16
 8008f9e:	f10d 001f 	add.w	r0, sp, #31
        LSHIFT( K, K );
 8008fa2:	7813      	ldrb	r3, [r2, #0]
 8008fa4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8008fae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008fb2:	4282      	cmp	r2, r0
 8008fb4:	d1f5      	bne.n	8008fa2 <AES_CMAC_Final+0xa0>
 8008fb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008fba:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8008fbc:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	e7c2      	b.n	8008f4a <AES_CMAC_Final+0x48>
 8008fc4:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8008fc8:	aa04      	add	r2, sp, #16
 8008fca:	f10d 0c20 	add.w	ip, sp, #32
        XOR( K, ctx->M_last );
 8008fce:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008fd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fd6:	4043      	eors	r3, r0
 8008fd8:	700b      	strb	r3, [r1, #0]
 8008fda:	4562      	cmp	r2, ip
 8008fdc:	d1f7      	bne.n	8008fce <AES_CMAC_Final+0xcc>
 8008fde:	e029      	b.n	8009034 <AES_CMAC_Final+0x132>
 8008fe0:	a904      	add	r1, sp, #16
 8008fe2:	f10d 0c1f 	add.w	ip, sp, #31
            LSHIFT( K, K );
 8008fe6:	780a      	ldrb	r2, [r1, #0]
 8008fe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fec:	0052      	lsls	r2, r2, #1
 8008fee:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8008ff2:	f801 2c01 	strb.w	r2, [r1, #-1]
 8008ff6:	4561      	cmp	r1, ip
 8008ff8:	d1f5      	bne.n	8008fe6 <AES_CMAC_Final+0xe4>
 8008ffa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008ffe:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8009000:	f082 0287 	eor.w	r2, r2, #135	; 0x87
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	e7bb      	b.n	8008f80 <AES_CMAC_Final+0x7e>
        while( ++ctx->M_n < 16 )
 8009008:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 800900a:	4423      	add	r3, r4
 800900c:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009010:	1c53      	adds	r3, r2, #1
 8009012:	2b0f      	cmp	r3, #15
 8009014:	d9f8      	bls.n	8009008 <AES_CMAC_Final+0x106>
 8009016:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114

        XOR( K, ctx->M_last );
 800901a:	f504 7180 	add.w	r1, r4, #256	; 0x100
 800901e:	aa04      	add	r2, sp, #16
 8009020:	f10d 0c20 	add.w	ip, sp, #32
 8009024:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009028:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800902c:	4043      	eors	r3, r0
 800902e:	700b      	strb	r3, [r1, #0]
 8009030:	4562      	cmp	r2, ip
 8009032:	d1f7      	bne.n	8009024 <AES_CMAC_Final+0x122>
    }
    XOR( ctx->M_last, ctx->X );
 8009034:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 8009038:	f504 7180 	add.w	r1, r4, #256	; 0x100
 800903c:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8009040:	7c1a      	ldrb	r2, [r3, #16]
 8009042:	ea8c 0c02 	eor.w	ip, ip, r2
 8009046:	f883 c000 	strb.w	ip, [r3]
 800904a:	4299      	cmp	r1, r3
 800904c:	d1f6      	bne.n	800903c <AES_CMAC_Final+0x13a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800904e:	2210      	movs	r2, #16
 8009050:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8009054:	4668      	mov	r0, sp
 8009056:	f006 ff2b 	bl	800feb0 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800905a:	4622      	mov	r2, r4
 800905c:	4629      	mov	r1, r5
 800905e:	4668      	mov	r0, sp
 8009060:	f000 f934 	bl	80092cc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8009064:	2210      	movs	r2, #16
 8009066:	2100      	movs	r1, #0
 8009068:	eb0d 0002 	add.w	r0, sp, r2
 800906c:	f006 ff3a 	bl	800fee4 <memset1>
}
 8009070:	b009      	add	sp, #36	; 0x24
 8009072:	bd30      	pop	{r4, r5, pc}

08009074 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8009074:	7803      	ldrb	r3, [r0, #0]
 8009076:	780a      	ldrb	r2, [r1, #0]
 8009078:	4053      	eors	r3, r2
 800907a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800907c:	7843      	ldrb	r3, [r0, #1]
 800907e:	784a      	ldrb	r2, [r1, #1]
 8009080:	4053      	eors	r3, r2
 8009082:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8009084:	7883      	ldrb	r3, [r0, #2]
 8009086:	788a      	ldrb	r2, [r1, #2]
 8009088:	4053      	eors	r3, r2
 800908a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800908c:	78c3      	ldrb	r3, [r0, #3]
 800908e:	78ca      	ldrb	r2, [r1, #3]
 8009090:	4053      	eors	r3, r2
 8009092:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8009094:	7903      	ldrb	r3, [r0, #4]
 8009096:	790a      	ldrb	r2, [r1, #4]
 8009098:	4053      	eors	r3, r2
 800909a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800909c:	7943      	ldrb	r3, [r0, #5]
 800909e:	794a      	ldrb	r2, [r1, #5]
 80090a0:	4053      	eors	r3, r2
 80090a2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80090a4:	7983      	ldrb	r3, [r0, #6]
 80090a6:	798a      	ldrb	r2, [r1, #6]
 80090a8:	4053      	eors	r3, r2
 80090aa:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80090ac:	79c3      	ldrb	r3, [r0, #7]
 80090ae:	79ca      	ldrb	r2, [r1, #7]
 80090b0:	4053      	eors	r3, r2
 80090b2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80090b4:	7a03      	ldrb	r3, [r0, #8]
 80090b6:	7a0a      	ldrb	r2, [r1, #8]
 80090b8:	4053      	eors	r3, r2
 80090ba:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80090bc:	7a43      	ldrb	r3, [r0, #9]
 80090be:	7a4a      	ldrb	r2, [r1, #9]
 80090c0:	4053      	eors	r3, r2
 80090c2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80090c4:	7a83      	ldrb	r3, [r0, #10]
 80090c6:	7a8a      	ldrb	r2, [r1, #10]
 80090c8:	4053      	eors	r3, r2
 80090ca:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80090cc:	7ac3      	ldrb	r3, [r0, #11]
 80090ce:	7aca      	ldrb	r2, [r1, #11]
 80090d0:	4053      	eors	r3, r2
 80090d2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80090d4:	7b03      	ldrb	r3, [r0, #12]
 80090d6:	7b0a      	ldrb	r2, [r1, #12]
 80090d8:	4053      	eors	r3, r2
 80090da:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80090dc:	7b43      	ldrb	r3, [r0, #13]
 80090de:	7b4a      	ldrb	r2, [r1, #13]
 80090e0:	4053      	eors	r3, r2
 80090e2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80090e4:	7b83      	ldrb	r3, [r0, #14]
 80090e6:	7b8a      	ldrb	r2, [r1, #14]
 80090e8:	4053      	eors	r3, r2
 80090ea:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80090ec:	7bc3      	ldrb	r3, [r0, #15]
 80090ee:	7bca      	ldrb	r2, [r1, #15]
 80090f0:	4053      	eors	r3, r2
 80090f2:	73c3      	strb	r3, [r0, #15]
#endif
}
 80090f4:	4770      	bx	lr

080090f6 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80090f6:	780b      	ldrb	r3, [r1, #0]
 80090f8:	f892 c000 	ldrb.w	ip, [r2]
 80090fc:	ea83 030c 	eor.w	r3, r3, ip
 8009100:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8009102:	784b      	ldrb	r3, [r1, #1]
 8009104:	f892 c001 	ldrb.w	ip, [r2, #1]
 8009108:	ea83 030c 	eor.w	r3, r3, ip
 800910c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800910e:	788b      	ldrb	r3, [r1, #2]
 8009110:	f892 c002 	ldrb.w	ip, [r2, #2]
 8009114:	ea83 030c 	eor.w	r3, r3, ip
 8009118:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800911a:	78cb      	ldrb	r3, [r1, #3]
 800911c:	f892 c003 	ldrb.w	ip, [r2, #3]
 8009120:	ea83 030c 	eor.w	r3, r3, ip
 8009124:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8009126:	790b      	ldrb	r3, [r1, #4]
 8009128:	f892 c004 	ldrb.w	ip, [r2, #4]
 800912c:	ea83 030c 	eor.w	r3, r3, ip
 8009130:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8009132:	794b      	ldrb	r3, [r1, #5]
 8009134:	f892 c005 	ldrb.w	ip, [r2, #5]
 8009138:	ea83 030c 	eor.w	r3, r3, ip
 800913c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800913e:	798b      	ldrb	r3, [r1, #6]
 8009140:	f892 c006 	ldrb.w	ip, [r2, #6]
 8009144:	ea83 030c 	eor.w	r3, r3, ip
 8009148:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800914a:	79cb      	ldrb	r3, [r1, #7]
 800914c:	f892 c007 	ldrb.w	ip, [r2, #7]
 8009150:	ea83 030c 	eor.w	r3, r3, ip
 8009154:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8009156:	7a0b      	ldrb	r3, [r1, #8]
 8009158:	f892 c008 	ldrb.w	ip, [r2, #8]
 800915c:	ea83 030c 	eor.w	r3, r3, ip
 8009160:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8009162:	7a4b      	ldrb	r3, [r1, #9]
 8009164:	f892 c009 	ldrb.w	ip, [r2, #9]
 8009168:	ea83 030c 	eor.w	r3, r3, ip
 800916c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800916e:	7a8b      	ldrb	r3, [r1, #10]
 8009170:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8009174:	ea83 030c 	eor.w	r3, r3, ip
 8009178:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800917a:	7acb      	ldrb	r3, [r1, #11]
 800917c:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8009180:	ea83 030c 	eor.w	r3, r3, ip
 8009184:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8009186:	7b0b      	ldrb	r3, [r1, #12]
 8009188:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800918c:	ea83 030c 	eor.w	r3, r3, ip
 8009190:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8009192:	7b4b      	ldrb	r3, [r1, #13]
 8009194:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8009198:	ea83 030c 	eor.w	r3, r3, ip
 800919c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800919e:	7b8b      	ldrb	r3, [r1, #14]
 80091a0:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80091a4:	ea83 030c 	eor.w	r3, r3, ip
 80091a8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80091aa:	7bcb      	ldrb	r3, [r1, #15]
 80091ac:	7bd2      	ldrb	r2, [r2, #15]
 80091ae:	4053      	eors	r3, r2
 80091b0:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80091b2:	4770      	bx	lr

080091b4 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80091b4:	f1a1 0310 	sub.w	r3, r1, #16
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b10      	cmp	r3, #16
 80091bc:	d87c      	bhi.n	80092b8 <lorawan_aes_set_key+0x104>
{
 80091be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch( keylen )
 80091c2:	4c40      	ldr	r4, [pc, #256]	; (80092c4 <lorawan_aes_set_key+0x110>)
 80091c4:	fa24 f303 	lsr.w	r3, r4, r3
 80091c8:	f013 0f01 	tst.w	r3, #1
 80091cc:	d104      	bne.n	80091d8 <lorawan_aes_set_key+0x24>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 80091d4:	20ff      	movs	r0, #255	; 0xff
 80091d6:	e06d      	b.n	80092b4 <lorawan_aes_set_key+0x100>
    while( nn-- )
 80091d8:	1e53      	subs	r3, r2, #1
 80091da:	1845      	adds	r5, r0, r1
        *d++ = *s++;
 80091dc:	f810 4b01 	ldrb.w	r4, [r0], #1
 80091e0:	f803 4f01 	strb.w	r4, [r3, #1]!
    while( nn-- )
 80091e4:	42a8      	cmp	r0, r5
 80091e6:	d1f9      	bne.n	80091dc <lorawan_aes_set_key+0x28>
    }
    block_copy_nn(ctx->ksch, key, keylen);
    hi = (keylen + 28) << 2;
 80091e8:	f101 031c 	add.w	r3, r1, #28
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	fa5f fa83 	uxtb.w	sl, r3
    ctx->rnd = (hi >> 4) - 1;
 80091f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80091f6:	3b01      	subs	r3, #1
 80091f8:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
 80091fc:	460b      	mov	r3, r1
 80091fe:	f04f 0e00 	mov.w	lr, #0
 8009202:	f04f 0801 	mov.w	r8, #1
            t3 = s_box(tt);
            rc = f2(rc);
        }
        else if( keylen > 24 && cc % keylen == 16 )
        {
            t0 = s_box(t0);
 8009206:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80092c8 <lorawan_aes_set_key+0x114>
 800920a:	e01f      	b.n	800924c <lorawan_aes_set_key+0x98>
        else if( keylen > 24 && cc % keylen == 16 )
 800920c:	2918      	cmp	r1, #24
 800920e:	d902      	bls.n	8009216 <lorawan_aes_set_key+0x62>
 8009210:	f1bc 0f10 	cmp.w	ip, #16
 8009214:	d044      	beq.n	80092a0 <lorawan_aes_set_key+0xec>
            t1 = s_box(t1);
            t2 = s_box(t2);
            t3 = s_box(t3);
        }
        tt = cc - keylen;
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8009216:	f812 c00e 	ldrb.w	ip, [r2, lr]
 800921a:	ea87 070c 	eor.w	r7, r7, ip
 800921e:	5417      	strb	r7, [r2, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8009220:	4410      	add	r0, r2
 8009222:	eb02 070e 	add.w	r7, r2, lr
 8009226:	f897 c001 	ldrb.w	ip, [r7, #1]
 800922a:	ea86 060c 	eor.w	r6, r6, ip
 800922e:	7046      	strb	r6, [r0, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009230:	78be      	ldrb	r6, [r7, #2]
 8009232:	4075      	eors	r5, r6
 8009234:	7085      	strb	r5, [r0, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8009236:	78fd      	ldrb	r5, [r7, #3]
 8009238:	406c      	eors	r4, r5
 800923a:	70c4      	strb	r4, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800923c:	3304      	adds	r3, #4
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f10e 0e04 	add.w	lr, lr, #4
 8009244:	fa5f fe8e 	uxtb.w	lr, lr
 8009248:	459a      	cmp	sl, r3
 800924a:	d932      	bls.n	80092b2 <lorawan_aes_set_key+0xfe>
        t0 = ctx->ksch[cc - 4];
 800924c:	4618      	mov	r0, r3
 800924e:	18d4      	adds	r4, r2, r3
 8009250:	f814 7c04 	ldrb.w	r7, [r4, #-4]
        t1 = ctx->ksch[cc - 3];
 8009254:	f814 6c03 	ldrb.w	r6, [r4, #-3]
        t2 = ctx->ksch[cc - 2];
 8009258:	f814 5c02 	ldrb.w	r5, [r4, #-2]
        t3 = ctx->ksch[cc - 1];
 800925c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
        if( cc % keylen == 0 )
 8009260:	fbb3 fcf1 	udiv	ip, r3, r1
 8009264:	fb01 3c1c 	mls	ip, r1, ip, r3
 8009268:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800926c:	d1ce      	bne.n	800920c <lorawan_aes_set_key+0x58>
            t0 = s_box(t1) ^ rc;
 800926e:	f819 c006 	ldrb.w	ip, [r9, r6]
 8009272:	ea88 0c0c 	eor.w	ip, r8, ip
            t1 = s_box(t2);
 8009276:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
 800927a:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
 800927e:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
 8009282:	ea4f 17d8 	mov.w	r7, r8, lsr #7
 8009286:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800928a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800928e:	b2ff      	uxtb	r7, r7
 8009290:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009294:	fa5f f888 	uxtb.w	r8, r8
 8009298:	ea87 0808 	eor.w	r8, r7, r8
            t0 = s_box(t1) ^ rc;
 800929c:	4667      	mov	r7, ip
 800929e:	e7ba      	b.n	8009216 <lorawan_aes_set_key+0x62>
            t0 = s_box(t0);
 80092a0:	f819 7007 	ldrb.w	r7, [r9, r7]
            t1 = s_box(t1);
 80092a4:	f819 6006 	ldrb.w	r6, [r9, r6]
            t2 = s_box(t2);
 80092a8:	f819 5005 	ldrb.w	r5, [r9, r5]
            t3 = s_box(t3);
 80092ac:	f819 4004 	ldrb.w	r4, [r9, r4]
 80092b0:	e7b1      	b.n	8009216 <lorawan_aes_set_key+0x62>
    }
    return 0;
 80092b2:	2000      	movs	r0, #0
}
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ctx->rnd = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 80092be:	20ff      	movs	r0, #255	; 0xff
}
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	00010101 	.word	0x00010101
 80092c8:	080138f0 	.word	0x080138f0

080092cc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	b093      	sub	sp, #76	; 0x4c
 80092d2:	910c      	str	r1, [sp, #48]	; 0x30
 80092d4:	920d      	str	r2, [sp, #52]	; 0x34
    if( ctx->rnd )
 80092d6:	f892 40f0 	ldrb.w	r4, [r2, #240]	; 0xf0
 80092da:	940b      	str	r4, [sp, #44]	; 0x2c
 80092dc:	2c00      	cmp	r4, #0
 80092de:	f000 8167 	beq.w	80095b0 <lorawan_aes_encrypt+0x2e4>
 80092e2:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80092e4:	4601      	mov	r1, r0
 80092e6:	a80e      	add	r0, sp, #56	; 0x38
 80092e8:	f7ff ff05 	bl	80090f6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80092ec:	2c01      	cmp	r4, #1
 80092ee:	f240 815c 	bls.w	80095aa <lorawan_aes_encrypt+0x2de>
 80092f2:	462a      	mov	r2, r5
 80092f4:	f105 0110 	add.w	r1, r5, #16
 80092f8:	9100      	str	r1, [sp, #0]
 80092fa:	1ea3      	subs	r3, r4, #2
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	3220      	adds	r2, #32
 8009300:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8009304:	930a      	str	r3, [sp, #40]	; 0x28
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8009306:	4fab      	ldr	r7, [pc, #684]	; (80095b4 <lorawan_aes_encrypt+0x2e8>)
 8009308:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80095b8 <lorawan_aes_encrypt+0x2ec>
 800930c:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 80095bc <lorawan_aes_encrypt+0x2f0>
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8009310:	f89d 4039 	ldrb.w	r4, [sp, #57]	; 0x39
 8009314:	9401      	str	r4, [sp, #4]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8009316:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 800931a:	9502      	str	r5, [sp, #8]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800931c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8009320:	9103      	str	r1, [sp, #12]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8009322:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8009326:	f8cd c010 	str.w	ip, [sp, #16]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800932a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800932e:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8009330:	f89d 603f 	ldrb.w	r6, [sp, #63]	; 0x3f
 8009334:	9606      	str	r6, [sp, #24]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8009336:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
 800933a:	f8cd c01c 	str.w	ip, [sp, #28]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800933e:	f89d 4041 	ldrb.w	r4, [sp, #65]	; 0x41
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8009342:	f89d 8043 	ldrb.w	r8, [sp, #67]	; 0x43
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8009346:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800934a:	9208      	str	r2, [sp, #32]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800934c:	f89d e045 	ldrb.w	lr, [sp, #69]	; 0x45
 8009350:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8009354:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8009358:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 800935c:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 8009360:	f89d c042 	ldrb.w	ip, [sp, #66]	; 0x42
 8009364:	f817 900c 	ldrb.w	r9, [r7, ip]
 8009368:	4649      	mov	r1, r9
 800936a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 800936e:	5d7b      	ldrb	r3, [r7, r5]
 8009370:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8009374:	f81a 900e 	ldrb.w	r9, [sl, lr]
 8009378:	ea82 0209 	eor.w	r2, r2, r9
 800937c:	404a      	eors	r2, r1
 800937e:	405a      	eors	r2, r3
 8009380:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8009384:	5dba      	ldrb	r2, [r7, r6]
 8009386:	4053      	eors	r3, r2
 8009388:	f81b 900e 	ldrb.w	r9, [fp, lr]
 800938c:	ea89 0303 	eor.w	r3, r9, r3
 8009390:	f81a 900c 	ldrb.w	r9, [sl, ip]
 8009394:	ea83 0309 	eor.w	r3, r3, r9
 8009398:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800939c:	f817 300e 	ldrb.w	r3, [r7, lr]
 80093a0:	405a      	eors	r2, r3
 80093a2:	f81b c00c 	ldrb.w	ip, [fp, ip]
 80093a6:	ea82 020c 	eor.w	r2, r2, ip
 80093aa:	f81a c005 	ldrb.w	ip, [sl, r5]
 80093ae:	ea82 020c 	eor.w	r2, r2, ip
 80093b2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80093b6:	404b      	eors	r3, r1
 80093b8:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80093bc:	405a      	eors	r2, r3
 80093be:	f81b 3005 	ldrb.w	r3, [fp, r5]
 80093c2:	405a      	eors	r2, r3
 80093c4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80093c8:	5c3d      	ldrb	r5, [r7, r0]
 80093ca:	9903      	ldr	r1, [sp, #12]
 80093cc:	5c7b      	ldrb	r3, [r7, r1]
 80093ce:	f8dd c010 	ldr.w	ip, [sp, #16]
 80093d2:	f81b 200c 	ldrb.w	r2, [fp, ip]
 80093d6:	f81a 6004 	ldrb.w	r6, [sl, r4]
 80093da:	4072      	eors	r2, r6
 80093dc:	406a      	eors	r2, r5
 80093de:	405a      	eors	r2, r3
 80093e0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80093e4:	f817 200c 	ldrb.w	r2, [r7, ip]
 80093e8:	4053      	eors	r3, r2
 80093ea:	f81b 6004 	ldrb.w	r6, [fp, r4]
 80093ee:	4073      	eors	r3, r6
 80093f0:	f81a 6000 	ldrb.w	r6, [sl, r0]
 80093f4:	4073      	eors	r3, r6
 80093f6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80093fa:	5d3b      	ldrb	r3, [r7, r4]
 80093fc:	405a      	eors	r2, r3
 80093fe:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8009402:	4042      	eors	r2, r0
 8009404:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8009408:	4042      	eors	r2, r0
 800940a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800940e:	406b      	eors	r3, r5
 8009410:	f81a 200c 	ldrb.w	r2, [sl, ip]
 8009414:	405a      	eors	r2, r3
 8009416:	f81b 3001 	ldrb.w	r3, [fp, r1]
 800941a:	405a      	eors	r2, r3
 800941c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8009420:	9d02      	ldr	r5, [sp, #8]
 8009422:	5d7a      	ldrb	r2, [r7, r5]
 8009424:	9e06      	ldr	r6, [sp, #24]
 8009426:	5dbb      	ldrb	r3, [r7, r6]
 8009428:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800942c:	f81b 100c 	ldrb.w	r1, [fp, ip]
 8009430:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8009434:	f81a 000e 	ldrb.w	r0, [sl, lr]
 8009438:	4041      	eors	r1, r0
 800943a:	4051      	eors	r1, r2
 800943c:	4059      	eors	r1, r3
 800943e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8009442:	f817 100c 	ldrb.w	r1, [r7, ip]
 8009446:	404b      	eors	r3, r1
 8009448:	f81b 000e 	ldrb.w	r0, [fp, lr]
 800944c:	4043      	eors	r3, r0
 800944e:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8009452:	4043      	eors	r3, r0
 8009454:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8009458:	f817 300e 	ldrb.w	r3, [r7, lr]
 800945c:	4059      	eors	r1, r3
 800945e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8009462:	4041      	eors	r1, r0
 8009464:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8009468:	4041      	eors	r1, r0
 800946a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800946e:	405a      	eors	r2, r3
 8009470:	f81a 300c 	ldrb.w	r3, [sl, ip]
 8009474:	4053      	eors	r3, r2
 8009476:	f81b 2006 	ldrb.w	r2, [fp, r6]
 800947a:	4053      	eors	r3, r2
 800947c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8009480:	9d05      	ldr	r5, [sp, #20]
 8009482:	5d7b      	ldrb	r3, [r7, r5]
 8009484:	f817 1008 	ldrb.w	r1, [r7, r8]
 8009488:	9e08      	ldr	r6, [sp, #32]
 800948a:	f81b 2006 	ldrb.w	r2, [fp, r6]
 800948e:	9c01      	ldr	r4, [sp, #4]
 8009490:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8009494:	4042      	eors	r2, r0
 8009496:	405a      	eors	r2, r3
 8009498:	404a      	eors	r2, r1
 800949a:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800949e:	5dba      	ldrb	r2, [r7, r6]
 80094a0:	4051      	eors	r1, r2
 80094a2:	f81b 0004 	ldrb.w	r0, [fp, r4]
 80094a6:	4041      	eors	r1, r0
 80094a8:	f81a 0005 	ldrb.w	r0, [sl, r5]
 80094ac:	4041      	eors	r1, r0
 80094ae:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80094b2:	5d39      	ldrb	r1, [r7, r4]
 80094b4:	404a      	eors	r2, r1
 80094b6:	f81b 0005 	ldrb.w	r0, [fp, r5]
 80094ba:	4042      	eors	r2, r0
 80094bc:	f81a 0008 	ldrb.w	r0, [sl, r8]
 80094c0:	4042      	eors	r2, r0
 80094c2:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80094c6:	404b      	eors	r3, r1
 80094c8:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80094cc:	4053      	eors	r3, r2
 80094ce:	f81b 2008 	ldrb.w	r2, [fp, r8]
 80094d2:	4053      	eors	r3, r2
 80094d4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    xor_block(d, k);
 80094d8:	9c00      	ldr	r4, [sp, #0]
 80094da:	4621      	mov	r1, r4
 80094dc:	a80e      	add	r0, sp, #56	; 0x38
 80094de:	f7ff fdc9 	bl	8009074 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80094e2:	4623      	mov	r3, r4
 80094e4:	3310      	adds	r3, #16
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ea:	4293      	cmp	r3, r2
 80094ec:	f47f af10 	bne.w	8009310 <lorawan_aes_encrypt+0x44>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80094f0:	4b30      	ldr	r3, [pc, #192]	; (80095b4 <lorawan_aes_encrypt+0x2e8>)
 80094f2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80094f6:	5c9a      	ldrb	r2, [r3, r2]
 80094f8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80094fc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8009500:	5c9a      	ldrb	r2, [r3, r2]
 8009502:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8009506:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800950a:	5c9a      	ldrb	r2, [r3, r2]
 800950c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8009510:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009514:	5c9a      	ldrb	r2, [r3, r2]
 8009516:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800951a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800951e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009522:	5c59      	ldrb	r1, [r3, r1]
 8009524:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 8009528:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 800952c:	5c59      	ldrb	r1, [r3, r1]
 800952e:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8009532:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 8009536:	5c59      	ldrb	r1, [r3, r1]
 8009538:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
 800953c:	5c9a      	ldrb	r2, [r3, r2]
 800953e:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8009542:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009546:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 800954a:	5c59      	ldrb	r1, [r3, r1]
 800954c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
 8009550:	5c9a      	ldrb	r2, [r3, r2]
 8009552:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8009556:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 800955a:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 800955e:	5c59      	ldrb	r1, [r3, r1]
 8009560:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 8009564:	5c9a      	ldrb	r2, [r3, r2]
 8009566:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800956a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800956e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8009572:	5c59      	ldrb	r1, [r3, r1]
 8009574:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8009578:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800957c:	5c59      	ldrb	r1, [r3, r1]
 800957e:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8009582:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8009586:	5c59      	ldrb	r1, [r3, r1]
 8009588:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
 800958c:	5c9b      	ldrb	r3, [r3, r2]
 800958e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8009592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009596:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800959a:	a90e      	add	r1, sp, #56	; 0x38
 800959c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800959e:	f7ff fdaa 	bl	80090f6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80095a2:	2000      	movs	r0, #0
}
 80095a4:	b013      	add	sp, #76	; 0x4c
 80095a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for( r = 1 ; r < ctx->rnd ; ++r )
 80095aa:	2301      	movs	r3, #1
 80095ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ae:	e79f      	b.n	80094f0 <lorawan_aes_encrypt+0x224>
        return ( uint8_t )-1;
 80095b0:	20ff      	movs	r0, #255	; 0xff
 80095b2:	e7f7      	b.n	80095a4 <lorawan_aes_encrypt+0x2d8>
 80095b4:	080138f0 	.word	0x080138f0
 80095b8:	080136f0 	.word	0x080136f0
 80095bc:	080137f0 	.word	0x080137f0

080095c0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 80095c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c4:	b0ca      	sub	sp, #296	; 0x128
 80095c6:	9c50      	ldr	r4, [sp, #320]	; 0x140
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d044      	beq.n	8009656 <ComputeCmac+0x96>
 80095cc:	4605      	mov	r5, r0
 80095ce:	4616      	mov	r6, r2
 80095d0:	4698      	mov	r8, r3
 80095d2:	460f      	mov	r7, r1
 80095d4:	2c00      	cmp	r4, #0
 80095d6:	d040      	beq.n	800965a <ComputeCmac+0x9a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80095d8:	4668      	mov	r0, sp
 80095da:	f7ff fbfd 	bl	8008dd8 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80095de:	4b20      	ldr	r3, [pc, #128]	; (8009660 <ComputeCmac+0xa0>)
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	468e      	mov	lr, r1
 80095e4:	f04f 0c00 	mov.w	ip, #0
 80095e8:	f89e 2018 	ldrb.w	r2, [lr, #24]
 80095ec:	4542      	cmp	r2, r8
 80095ee:	d00a      	beq.n	8009606 <ComputeCmac+0x46>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80095f0:	f10c 0c01 	add.w	ip, ip, #1
 80095f4:	f10e 0e11 	add.w	lr, lr, #17
 80095f8:	f1bc 0f0b 	cmp.w	ip, #11
 80095fc:	d1f4      	bne.n	80095e8 <ComputeCmac+0x28>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80095fe:	2003      	movs	r0, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8009600:	b04a      	add	sp, #296	; 0x128
 8009602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8009606:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 800960a:	f10c 0c19 	add.w	ip, ip, #25
 800960e:	4461      	add	r1, ip
 8009610:	4668      	mov	r0, sp
 8009612:	f7ff fbf0 	bl	8008df6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8009616:	b125      	cbz	r5, 8009622 <ComputeCmac+0x62>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8009618:	2210      	movs	r2, #16
 800961a:	4629      	mov	r1, r5
 800961c:	4668      	mov	r0, sp
 800961e:	f7ff fbf1 	bl	8008e04 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8009622:	4632      	mov	r2, r6
 8009624:	4639      	mov	r1, r7
 8009626:	4668      	mov	r0, sp
 8009628:	f7ff fbec 	bl	8008e04 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800962c:	4669      	mov	r1, sp
 800962e:	a846      	add	r0, sp, #280	; 0x118
 8009630:	f7ff fc67 	bl	8008f02 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8009634:	f89d 2119 	ldrb.w	r2, [sp, #281]	; 0x119
 8009638:	f89d 311a 	ldrb.w	r3, [sp, #282]	; 0x11a
 800963c:	041b      	lsls	r3, r3, #16
 800963e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009642:	f89d 2118 	ldrb.w	r2, [sp, #280]	; 0x118
 8009646:	4313      	orrs	r3, r2
 8009648:	f89d 211b 	ldrb.w	r2, [sp, #283]	; 0x11b
 800964c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009650:	6023      	str	r3, [r4, #0]
    return retval;
 8009652:	2000      	movs	r0, #0
 8009654:	e7d4      	b.n	8009600 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 8009656:	2002      	movs	r0, #2
 8009658:	e7d2      	b.n	8009600 <ComputeCmac+0x40>
 800965a:	2002      	movs	r0, #2
 800965c:	e7d0      	b.n	8009600 <ComputeCmac+0x40>
 800965e:	bf00      	nop
 8009660:	20000760 	.word	0x20000760

08009664 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8009664:	b140      	cbz	r0, 8009678 <SecureElementInit+0x14>
{
 8009666:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <SecureElementInit+0x18>)
 800966a:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800966c:	22d8      	movs	r2, #216	; 0xd8
 800966e:	4904      	ldr	r1, [pc, #16]	; (8009680 <SecureElementInit+0x1c>)
 8009670:	f006 fc1e 	bl	800feb0 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8009674:	2000      	movs	r0, #0
}
 8009676:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009678:	2002      	movs	r0, #2
}
 800967a:	4770      	bx	lr
 800967c:	20000760 	.word	0x20000760
 8009680:	08013f74 	.word	0x08013f74

08009684 <SecureElementGetKeyByID>:
    return SECURE_ELEMENT_SUCCESS;
}

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8009684:	b410      	push	{r4}
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009686:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <SecureElementGetKeyByID+0x30>)
 8009688:	681c      	ldr	r4, [r3, #0]
 800968a:	4622      	mov	r2, r4
 800968c:	2300      	movs	r3, #0
 800968e:	f892 c018 	ldrb.w	ip, [r2, #24]
 8009692:	4584      	cmp	ip, r0
 8009694:	d006      	beq.n	80096a4 <SecureElementGetKeyByID+0x20>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009696:	3301      	adds	r3, #1
 8009698:	3211      	adds	r2, #17
 800969a:	2b0b      	cmp	r3, #11
 800969c:	d1f7      	bne.n	800968e <SecureElementGetKeyByID+0xa>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800969e:	2003      	movs	r0, #3
}
 80096a0:	bc10      	pop	{r4}
 80096a2:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80096a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80096a8:	3318      	adds	r3, #24
 80096aa:	441c      	add	r4, r3
 80096ac:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80096ae:	2000      	movs	r0, #0
 80096b0:	e7f6      	b.n	80096a0 <SecureElementGetKeyByID+0x1c>
 80096b2:	bf00      	nop
 80096b4:	20000760 	.word	0x20000760

080096b8 <PrintKey>:
{
 80096b8:	b510      	push	{r4, lr}
 80096ba:	b094      	sub	sp, #80	; 0x50
 80096bc:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 80096be:	a913      	add	r1, sp, #76	; 0x4c
 80096c0:	f7ff ffe0 	bl	8009684 <SecureElementGetKeyByID>
 80096c4:	b948      	cbnz	r0, 80096da <PrintKey+0x22>
 80096c6:	4a1d      	ldr	r2, [pc, #116]	; (800973c <PrintKey+0x84>)
 80096c8:	2300      	movs	r3, #0
            if( KeyLabel[i].keyID == keyID )
 80096ca:	4618      	mov	r0, r3
 80096cc:	7811      	ldrb	r1, [r2, #0]
 80096ce:	42a1      	cmp	r1, r4
 80096d0:	d005      	beq.n	80096de <PrintKey+0x26>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80096d2:	3301      	adds	r3, #1
 80096d4:	320c      	adds	r2, #12
 80096d6:	2b0b      	cmp	r3, #11
 80096d8:	d1f7      	bne.n	80096ca <PrintKey+0x12>
}
 80096da:	b014      	add	sp, #80	; 0x50
 80096dc:	bd10      	pop	{r4, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 80096de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096e0:	7c1a      	ldrb	r2, [r3, #16]
 80096e2:	9210      	str	r2, [sp, #64]	; 0x40
 80096e4:	7bda      	ldrb	r2, [r3, #15]
 80096e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80096e8:	7b9a      	ldrb	r2, [r3, #14]
 80096ea:	920e      	str	r2, [sp, #56]	; 0x38
 80096ec:	7b5a      	ldrb	r2, [r3, #13]
 80096ee:	920d      	str	r2, [sp, #52]	; 0x34
 80096f0:	7b1a      	ldrb	r2, [r3, #12]
 80096f2:	920c      	str	r2, [sp, #48]	; 0x30
 80096f4:	7ada      	ldrb	r2, [r3, #11]
 80096f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80096f8:	7a9a      	ldrb	r2, [r3, #10]
 80096fa:	920a      	str	r2, [sp, #40]	; 0x28
 80096fc:	7a5a      	ldrb	r2, [r3, #9]
 80096fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009700:	7a1a      	ldrb	r2, [r3, #8]
 8009702:	9208      	str	r2, [sp, #32]
 8009704:	79da      	ldrb	r2, [r3, #7]
 8009706:	9207      	str	r2, [sp, #28]
 8009708:	799a      	ldrb	r2, [r3, #6]
 800970a:	9206      	str	r2, [sp, #24]
 800970c:	795a      	ldrb	r2, [r3, #5]
 800970e:	9205      	str	r2, [sp, #20]
 8009710:	791a      	ldrb	r2, [r3, #4]
 8009712:	9204      	str	r2, [sp, #16]
 8009714:	78da      	ldrb	r2, [r3, #3]
 8009716:	9203      	str	r2, [sp, #12]
 8009718:	789a      	ldrb	r2, [r3, #2]
 800971a:	9202      	str	r2, [sp, #8]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <PrintKey+0x84>)
 8009726:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	4b04      	ldr	r3, [pc, #16]	; (8009740 <PrintKey+0x88>)
 8009730:	2200      	movs	r2, #0
 8009732:	4611      	mov	r1, r2
 8009734:	2002      	movs	r0, #2
 8009736:	f009 fb21 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
                return;
 800973a:	e7ce      	b.n	80096da <PrintKey+0x22>
 800973c:	08013b88 	.word	0x08013b88
 8009740:	080139f0 	.word	0x080139f0

08009744 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8009744:	2b0b      	cmp	r3, #11
 8009746:	d80a      	bhi.n	800975e <SecureElementComputeAesCmac+0x1a>
{
 8009748:	b500      	push	{lr}
 800974a:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800974c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009750:	f8cd c000 	str.w	ip, [sp]
 8009754:	f7ff ff34 	bl	80095c0 <ComputeCmac>
}
 8009758:	b003      	add	sp, #12
 800975a:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800975e:	2003      	movs	r0, #3
}
 8009760:	4770      	bx	lr

08009762 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8009762:	b190      	cbz	r0, 800978a <SecureElementVerifyAesCmac+0x28>
{
 8009764:	b510      	push	{r4, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	468c      	mov	ip, r1
 800976a:	4614      	mov	r4, r2
 800976c:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800976e:	2000      	movs	r0, #0
 8009770:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8009772:	aa03      	add	r2, sp, #12
 8009774:	9200      	str	r2, [sp, #0]
 8009776:	4662      	mov	r2, ip
 8009778:	f7ff ff22 	bl	80095c0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800977c:	b918      	cbnz	r0, 8009786 <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 800977e:	9803      	ldr	r0, [sp, #12]
 8009780:	1b00      	subs	r0, r0, r4
 8009782:	bf18      	it	ne
 8009784:	2001      	movne	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8009786:	b004      	add	sp, #16
 8009788:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800978a:	2002      	movs	r0, #2
}
 800978c:	4770      	bx	lr
	...

08009790 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8009790:	b398      	cbz	r0, 80097fa <SecureElementAesEncrypt+0x6a>
{
 8009792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009796:	b0be      	sub	sp, #248	; 0xf8
 8009798:	460d      	mov	r5, r1
 800979a:	4690      	mov	r8, r2
 800979c:	461e      	mov	r6, r3
 800979e:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80097a0:	b36b      	cbz	r3, 80097fe <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80097a2:	f011 040f 	ands.w	r4, r1, #15
 80097a6:	d12c      	bne.n	8009802 <SecureElementAesEncrypt+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80097a8:	22f0      	movs	r2, #240	; 0xf0
 80097aa:	2100      	movs	r1, #0
 80097ac:	a801      	add	r0, sp, #4
 80097ae:	f006 fb99 	bl	800fee4 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80097b2:	4b16      	ldr	r3, [pc, #88]	; (800980c <SecureElementAesEncrypt+0x7c>)
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	4684      	mov	ip, r0
 80097b8:	f89c e018 	ldrb.w	lr, [ip, #24]
 80097bc:	45c6      	cmp	lr, r8
 80097be:	d006      	beq.n	80097ce <SecureElementAesEncrypt+0x3e>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80097c0:	3401      	adds	r4, #1
 80097c2:	f10c 0c11 	add.w	ip, ip, #17
 80097c6:	2c0b      	cmp	r4, #11
 80097c8:	d1f6      	bne.n	80097b8 <SecureElementAesEncrypt+0x28>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80097ca:	2003      	movs	r0, #3
 80097cc:	e01a      	b.n	8009804 <SecureElementAesEncrypt+0x74>
    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80097ce:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80097d2:	3419      	adds	r4, #25
 80097d4:	aa01      	add	r2, sp, #4
 80097d6:	2110      	movs	r1, #16
 80097d8:	4420      	add	r0, r4
 80097da:	f7ff fceb 	bl	80091b4 <lorawan_aes_set_key>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 80097de:	2000      	movs	r0, #0
        while( size != 0 )
 80097e0:	b185      	cbz	r5, 8009804 <SecureElementAesEncrypt+0x74>
 80097e2:	462c      	mov	r4, r5
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80097e4:	1b28      	subs	r0, r5, r4
 80097e6:	b2c0      	uxtb	r0, r0
 80097e8:	aa01      	add	r2, sp, #4
 80097ea:	1831      	adds	r1, r6, r0
 80097ec:	4438      	add	r0, r7
 80097ee:	f7ff fd6d 	bl	80092cc <lorawan_aes_encrypt>
        while( size != 0 )
 80097f2:	3c10      	subs	r4, #16
 80097f4:	d1f6      	bne.n	80097e4 <SecureElementAesEncrypt+0x54>
    return retval;
 80097f6:	2000      	movs	r0, #0
 80097f8:	e004      	b.n	8009804 <SecureElementAesEncrypt+0x74>
        return SECURE_ELEMENT_ERROR_NPE;
 80097fa:	2002      	movs	r0, #2
}
 80097fc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80097fe:	2002      	movs	r0, #2
 8009800:	e000      	b.n	8009804 <SecureElementAesEncrypt+0x74>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009802:	2005      	movs	r0, #5
}
 8009804:	b03e      	add	sp, #248	; 0xf8
 8009806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980a:	bf00      	nop
 800980c:	20000760 	.word	0x20000760

08009810 <SecureElementSetKey>:
{
 8009810:	b530      	push	{r4, r5, lr}
 8009812:	b085      	sub	sp, #20
    if( key == NULL )
 8009814:	b391      	cbz	r1, 800987c <SecureElementSetKey+0x6c>
 8009816:	468c      	mov	ip, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8009818:	4b19      	ldr	r3, [pc, #100]	; (8009880 <SecureElementSetKey+0x70>)
 800981a:	681d      	ldr	r5, [r3, #0]
 800981c:	462b      	mov	r3, r5
 800981e:	2400      	movs	r4, #0
 8009820:	7e1a      	ldrb	r2, [r3, #24]
 8009822:	4282      	cmp	r2, r0
 8009824:	d007      	beq.n	8009836 <SecureElementSetKey+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009826:	3401      	adds	r4, #1
 8009828:	3311      	adds	r3, #17
 800982a:	2c0b      	cmp	r4, #11
 800982c:	d1f8      	bne.n	8009820 <SecureElementSetKey+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800982e:	2503      	movs	r5, #3
}
 8009830:	4628      	mov	r0, r5
 8009832:	b005      	add	sp, #20
 8009834:	bd30      	pop	{r4, r5, pc}
            if( keyID == MC_KEY_0 )
 8009836:	280d      	cmp	r0, #13
 8009838:	d009      	beq.n	800984e <SecureElementSetKey+0x3e>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800983a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800983e:	3419      	adds	r4, #25
 8009840:	2210      	movs	r2, #16
 8009842:	4661      	mov	r1, ip
 8009844:	1928      	adds	r0, r5, r4
 8009846:	f006 fb33 	bl	800feb0 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800984a:	2500      	movs	r5, #0
 800984c:	e7f0      	b.n	8009830 <SecureElementSetKey+0x20>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800984e:	2300      	movs	r3, #0
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	9302      	str	r3, [sp, #8]
 8009856:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8009858:	466b      	mov	r3, sp
 800985a:	220c      	movs	r2, #12
 800985c:	2110      	movs	r1, #16
 800985e:	4660      	mov	r0, ip
 8009860:	f7ff ff96 	bl	8009790 <SecureElementAesEncrypt>
 8009864:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8009866:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800986a:	3419      	adds	r4, #25
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <SecureElementSetKey+0x70>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	2210      	movs	r2, #16
 8009872:	4669      	mov	r1, sp
 8009874:	4420      	add	r0, r4
 8009876:	f006 fb1b 	bl	800feb0 <memcpy1>
                return retval;
 800987a:	e7d9      	b.n	8009830 <SecureElementSetKey+0x20>
        return SECURE_ELEMENT_ERROR_NPE;
 800987c:	2502      	movs	r5, #2
 800987e:	e7d7      	b.n	8009830 <SecureElementSetKey+0x20>
 8009880:	20000760 	.word	0x20000760

08009884 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8009884:	b1d0      	cbz	r0, 80098bc <SecureElementDeriveAndStoreKey+0x38>
{
 8009886:	b510      	push	{r4, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	4614      	mov	r4, r2
 800988c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800988e:	2a0c      	cmp	r2, #12
 8009890:	d101      	bne.n	8009896 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8009892:	290b      	cmp	r1, #11
 8009894:	d114      	bne.n	80098c0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8009896:	2300      	movs	r3, #0
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 80098a0:	466b      	mov	r3, sp
 80098a2:	460a      	mov	r2, r1
 80098a4:	2110      	movs	r1, #16
 80098a6:	4660      	mov	r0, ip
 80098a8:	f7ff ff72 	bl	8009790 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80098ac:	b108      	cbz	r0, 80098b2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80098ae:	b004      	add	sp, #16
 80098b0:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 80098b2:	4669      	mov	r1, sp
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7ff ffab 	bl	8009810 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80098ba:	e7f8      	b.n	80098ae <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 80098bc:	2002      	movs	r0, #2
}
 80098be:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80098c0:	2003      	movs	r0, #3
 80098c2:	e7f4      	b.n	80098ae <SecureElementDeriveAndStoreKey+0x2a>

080098c4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80098ca:	9c07      	ldr	r4, [sp, #28]
 80098cc:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80098ce:	b363      	cbz	r3, 800992a <SecureElementProcessJoinAccept+0x66>
 80098d0:	461f      	mov	r7, r3
 80098d2:	b364      	cbz	r4, 800992e <SecureElementProcessJoinAccept+0x6a>
 80098d4:	b36e      	cbz	r6, 8009932 <SecureElementProcessJoinAccept+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80098d6:	2d21      	cmp	r5, #33	; 0x21
 80098d8:	d82d      	bhi.n	8009936 <SecureElementProcessJoinAccept+0x72>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80098da:	462a      	mov	r2, r5
 80098dc:	4619      	mov	r1, r3
 80098de:	4620      	mov	r0, r4
 80098e0:	f006 fae6 	bl	800feb0 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80098e4:	1c63      	adds	r3, r4, #1
 80098e6:	2201      	movs	r2, #1
 80098e8:	1e69      	subs	r1, r5, #1
 80098ea:	18b8      	adds	r0, r7, r2
 80098ec:	f7ff ff50 	bl	8009790 <SecureElementAesEncrypt>
 80098f0:	bb18      	cbnz	r0, 800993a <SecureElementProcessJoinAccept+0x76>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80098f2:	7ae3      	ldrb	r3, [r4, #11]
 80098f4:	09db      	lsrs	r3, r3, #7
 80098f6:	7033      	strb	r3, [r6, #0]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 80098f8:	bb0b      	cbnz	r3, 800993e <SecureElementProcessJoinAccept+0x7a>
    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 80098fa:	1963      	adds	r3, r4, r5
 80098fc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8009900:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009904:	0612      	lsls	r2, r2, #24
 8009906:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800990a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800990e:	430a      	orrs	r2, r1
 8009910:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8009914:	2301      	movs	r3, #1
 8009916:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800991a:	1f29      	subs	r1, r5, #4
 800991c:	4620      	mov	r0, r4
 800991e:	f7ff ff20 	bl	8009762 <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 8009922:	3800      	subs	r0, #0
 8009924:	bf18      	it	ne
 8009926:	2001      	movne	r0, #1
 8009928:	e006      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
 800992a:	2002      	movs	r0, #2
 800992c:	e004      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
 800992e:	2002      	movs	r0, #2
 8009930:	e002      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
 8009932:	2002      	movs	r0, #2
 8009934:	e000      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009936:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8009938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800993a:	2007      	movs	r0, #7
 800993c:	e7fc      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800993e:	2004      	movs	r0, #4
 8009940:	e7fa      	b.n	8009938 <SecureElementProcessJoinAccept+0x74>
	...

08009944 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 8009944:	b138      	cbz	r0, 8009956 <SecureElementRandomNumber+0x12>
{
 8009946:	b510      	push	{r4, lr}
 8009948:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <SecureElementRandomNumber+0x18>)
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	4798      	blx	r3
 8009950:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8009952:	2000      	movs	r0, #0
}
 8009954:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009956:	2002      	movs	r0, #2
}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	08013dd0 	.word	0x08013dd0

08009960 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8009960:	b140      	cbz	r0, 8009974 <SecureElementSetDevEui+0x14>
{
 8009962:	b508      	push	{r3, lr}
 8009964:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8009966:	2208      	movs	r2, #8
 8009968:	4b03      	ldr	r3, [pc, #12]	; (8009978 <SecureElementSetDevEui+0x18>)
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	f006 faa0 	bl	800feb0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8009970:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8009972:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8009974:	2002      	movs	r0, #2
}
 8009976:	4770      	bx	lr
 8009978:	20000760 	.word	0x20000760

0800997c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800997c:	b138      	cbz	r0, 800998e <SecureElementGetDevEui+0x12>
{
 800997e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8009980:	2208      	movs	r2, #8
 8009982:	4904      	ldr	r1, [pc, #16]	; (8009994 <SecureElementGetDevEui+0x18>)
 8009984:	6809      	ldr	r1, [r1, #0]
 8009986:	f006 fa93 	bl	800feb0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800998a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800998c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800998e:	2002      	movs	r0, #2
}
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000760 	.word	0x20000760

08009998 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8009998:	b148      	cbz	r0, 80099ae <SecureElementSetJoinEui+0x16>
{
 800999a:	b508      	push	{r3, lr}
 800999c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800999e:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <SecureElementSetJoinEui+0x1c>)
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	2208      	movs	r2, #8
 80099a4:	4410      	add	r0, r2
 80099a6:	f006 fa83 	bl	800feb0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80099aa:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80099ac:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80099ae:	2002      	movs	r0, #2
}
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000760 	.word	0x20000760

080099b8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80099b8:	b140      	cbz	r0, 80099cc <SecureElementGetJoinEui+0x14>
{
 80099ba:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 80099bc:	4a04      	ldr	r2, [pc, #16]	; (80099d0 <SecureElementGetJoinEui+0x18>)
 80099be:	6811      	ldr	r1, [r2, #0]
 80099c0:	2208      	movs	r2, #8
 80099c2:	4411      	add	r1, r2
 80099c4:	f006 fa74 	bl	800feb0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80099c8:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80099ca:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80099cc:	2002      	movs	r0, #2
}
 80099ce:	4770      	bx	lr
 80099d0:	20000760 	.word	0x20000760

080099d4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80099d4:	2802      	cmp	r0, #2
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80099d6:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <SecureElementSetDevAddr+0x10>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	bf0c      	ite	eq
 80099dc:	6119      	streq	r1, [r3, #16]
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80099de:	6159      	strne	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80099e0:	2000      	movs	r0, #0
 80099e2:	4770      	bx	lr
 80099e4:	20000760 	.word	0x20000760

080099e8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 80099e8:	b141      	cbz	r1, 80099fc <SecureElementGetDevAddr+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80099ea:	2802      	cmp	r0, #2
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80099ec:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <SecureElementGetDevAddr+0x18>)
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	bf0c      	ite	eq
 80099f2:	6912      	ldreq	r2, [r2, #16]
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80099f4:	6952      	ldrne	r2, [r2, #20]
 80099f6:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80099f8:	2000      	movs	r0, #0
 80099fa:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80099fc:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80099fe:	4770      	bx	lr
 8009a00:	20000760 	.word	0x20000760

08009a04 <SecureElementInitMcuID>:
{
 8009a04:	b530      	push	{r4, r5, lr}
 8009a06:	b085      	sub	sp, #20
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
    uint32_t devAddrABP = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8009a10:	a802      	add	r0, sp, #8
 8009a12:	f7ff ffb3 	bl	800997c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8009a16:	a901      	add	r1, sp, #4
 8009a18:	2001      	movs	r0, #1
 8009a1a:	f7ff ffe5 	bl	80099e8 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8009a1e:	b16c      	cbz	r4, 8009a3c <SecureElementInitMcuID+0x38>
 8009a20:	f10d 0307 	add.w	r3, sp, #7
 8009a24:	f10d 0c0f 	add.w	ip, sp, #15
            if( devEui[index] != 0 )
 8009a28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009a2c:	b932      	cbnz	r2, 8009a3c <SecureElementInitMcuID+0x38>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8009a2e:	4563      	cmp	r3, ip
 8009a30:	d1fa      	bne.n	8009a28 <SecureElementInitMcuID+0x24>
            seGetUniqueId( devEui );
 8009a32:	a802      	add	r0, sp, #8
 8009a34:	47a0      	blx	r4
            SecureElementSetDevEui( devEui );
 8009a36:	a802      	add	r0, sp, #8
 8009a38:	f7ff ff92 	bl	8009960 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8009a3c:	b13d      	cbz	r5, 8009a4e <SecureElementInitMcuID+0x4a>
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	b92b      	cbnz	r3, 8009a4e <SecureElementInitMcuID+0x4a>
        seGetDevAddr( &devAddrABP );
 8009a42:	a801      	add	r0, sp, #4
 8009a44:	47a8      	blx	r5
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <SecureElementInitMcuID+0x50>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9a01      	ldr	r2, [sp, #4]
 8009a4c:	615a      	str	r2, [r3, #20]
}
 8009a4e:	2000      	movs	r0, #0
 8009a50:	b005      	add	sp, #20
 8009a52:	bd30      	pop	{r4, r5, pc}
 8009a54:	20000760 	.word	0x20000760

08009a58 <PrintIds>:
{
 8009a58:	b530      	push	{r4, r5, lr}
 8009a5a:	b08f      	sub	sp, #60	; 0x3c
 8009a5c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8009a5e:	2400      	movs	r4, #0
 8009a60:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8009a62:	a80a      	add	r0, sp, #40	; 0x28
 8009a64:	f7ff ff8a 	bl	800997c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8009a68:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009a6c:	9307      	str	r3, [sp, #28]
 8009a6e:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009a72:	9306      	str	r3, [sp, #24]
 8009a74:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009a7e:	9304      	str	r3, [sp, #16]
 8009a80:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8009a8a:	9302      	str	r3, [sp, #8]
 8009a8c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <PrintIds+0xc0>)
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	2002      	movs	r0, #2
 8009aa0:	f009 f96c 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8009aa4:	a80c      	add	r0, sp, #48	; 0x30
 8009aa6:	f7ff ff87 	bl	80099b8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8009aaa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009ab4:	9306      	str	r3, [sp, #24]
 8009ab6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8009ac0:	9304      	str	r3, [sp, #16]
 8009ac2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009acc:	9302      	str	r3, [sp, #8]
 8009ace:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <PrintIds+0xc4>)
 8009adc:	4622      	mov	r2, r4
 8009ade:	4621      	mov	r1, r4
 8009ae0:	2002      	movs	r0, #2
 8009ae2:	f009 f94b 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8009ae6:	a909      	add	r1, sp, #36	; 0x24
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f7ff ff7d 	bl	80099e8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8009aee:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009af8:	9302      	str	r3, [sp, #8]
 8009afa:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <PrintIds+0xc8>)
 8009b08:	4622      	mov	r2, r4
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	2002      	movs	r0, #2
 8009b0e:	f009 f935 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8009b12:	b00f      	add	sp, #60	; 0x3c
 8009b14:	bd30      	pop	{r4, r5, pc}
 8009b16:	bf00      	nop
 8009b18:	08013a4c 	.word	0x08013a4c
 8009b1c:	08013a8c 	.word	0x08013a8c
 8009b20:	08013acc 	.word	0x08013acc

08009b24 <SecureElementPrintKeys>:
{
 8009b24:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7ff fdc6 	bl	80096b8 <PrintKey>
    PrintKey( NWK_KEY );
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	f7ff fdc3 	bl	80096b8 <PrintKey>
    PrintKey( APP_S_KEY );
 8009b32:	2009      	movs	r0, #9
 8009b34:	f7ff fdc0 	bl	80096b8 <PrintKey>
    PrintKey( NWK_S_KEY );
 8009b38:	2008      	movs	r0, #8
 8009b3a:	f7ff fdbd 	bl	80096b8 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f7ff ff8a 	bl	8009a58 <PrintIds>
}
 8009b44:	2000      	movs	r0, #0
 8009b46:	bd08      	pop	{r3, pc}

08009b48 <SecureElementPrintSessionKeys>:
{
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8009b4c:	200b      	movs	r0, #11
 8009b4e:	f7ff fdb3 	bl	80096b8 <PrintKey>
    PrintKey( MC_KE_KEY );
 8009b52:	200c      	movs	r0, #12
 8009b54:	f7ff fdb0 	bl	80096b8 <PrintKey>
    PrintKey( APP_S_KEY );
 8009b58:	2009      	movs	r0, #9
 8009b5a:	f7ff fdad 	bl	80096b8 <PrintKey>
    PrintKey( NWK_S_KEY );
 8009b5e:	2008      	movs	r0, #8
 8009b60:	f7ff fdaa 	bl	80096b8 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8009b64:	200a      	movs	r0, #10
 8009b66:	f7ff fda7 	bl	80096b8 <PrintKey>
    PrintIds( mode );
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff ff74 	bl	8009a58 <PrintIds>
}
 8009b70:	2000      	movs	r0, #0
 8009b72:	bd10      	pop	{r4, pc}

08009b74 <LmHandlerPackageIsTxPending>:
        }
    }
}

static bool LmHandlerPackageIsTxPending( void )
{
 8009b74:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009b76:	4d0b      	ldr	r5, [pc, #44]	; (8009ba4 <LmHandlerPackageIsTxPending+0x30>)
{
 8009b78:	2401      	movs	r4, #1
 8009b7a:	e004      	b.n	8009b86 <LmHandlerPackageIsTxPending+0x12>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009b7c:	b263      	sxtb	r3, r4
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	dc0d      	bgt.n	8009b9e <LmHandlerPackageIsTxPending+0x2a>
 8009b82:	3401      	adds	r4, #1
 8009b84:	b2e4      	uxtb	r4, r4
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8009b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f6      	beq.n	8009b7c <LmHandlerPackageIsTxPending+0x8>
 8009b8e:	2c01      	cmp	r4, #1
 8009b90:	d0f7      	beq.n	8009b82 <LmHandlerPackageIsTxPending+0xe>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	4798      	blx	r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d0ef      	beq.n	8009b7c <LmHandlerPackageIsTxPending+0x8>
 8009b9c:	e000      	b.n	8009ba0 <LmHandlerPackageIsTxPending+0x2c>
            {
                return true;
            }
        }
    }
    return false;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20000878 	.word	0x20000878

08009ba8 <LmHandlerDeviceTimeReq>:
{
 8009ba8:	b500      	push	{lr}
 8009baa:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8009bac:	230a      	movs	r3, #10
 8009bae:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8009bb2:	a801      	add	r0, sp, #4
 8009bb4:	f003 fb82 	bl	800d2bc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <LmHandlerDeviceTimeReq+0x24>)
 8009bba:	9a05      	ldr	r2, [sp, #20]
 8009bbc:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8009bbe:	3800      	subs	r0, #0
 8009bc0:	bf18      	it	ne
 8009bc2:	2001      	movne	r0, #1
}
 8009bc4:	4240      	negs	r0, r0
 8009bc6:	b007      	add	sp, #28
 8009bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bcc:	20000870 	.word	0x20000870

08009bd0 <MlmeIndication>:
{
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	4605      	mov	r5, r0
    RxParams.IsMcpsIndication = 0;
 8009bd4:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <MlmeIndication+0x60>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8009bda:	7842      	ldrb	r2, [r0, #1]
 8009bdc:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8009bde:	7882      	ldrb	r2, [r0, #2]
 8009be0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009be2:	880a      	ldrh	r2, [r1, #0]
 8009be4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009be6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8009bea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8009bec:	78ca      	ldrb	r2, [r1, #3]
 8009bee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8009bf0:	6842      	ldr	r2, [r0, #4]
 8009bf2:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8009bf4:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <MlmeIndication+0x64>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfa:	b13a      	cbz	r2, 8009c0c <MlmeIndication+0x3c>
 8009bfc:	7803      	ldrb	r3, [r0, #0]
 8009bfe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009c02:	2b0b      	cmp	r3, #11
 8009c04:	d002      	beq.n	8009c0c <MlmeIndication+0x3c>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8009c06:	490a      	ldr	r1, [pc, #40]	; (8009c30 <MlmeIndication+0x60>)
 8009c08:	2000      	movs	r0, #0
 8009c0a:	4790      	blx	r2
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009c0c:	4c0a      	ldr	r4, [pc, #40]	; (8009c38 <MlmeIndication+0x68>)
 8009c0e:	f104 0614 	add.w	r6, r4, #20
 8009c12:	e001      	b.n	8009c18 <MlmeIndication+0x48>
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	d009      	beq.n	8009c2c <MlmeIndication+0x5c>
        if( LmHandlerPackages[i] != NULL )
 8009c18:	f854 3b04 	ldr.w	r3, [r4], #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0f9      	beq.n	8009c14 <MlmeIndication+0x44>
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f6      	beq.n	8009c14 <MlmeIndication+0x44>
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8009c26:	4628      	mov	r0, r5
 8009c28:	4798      	blx	r3
 8009c2a:	e7f3      	b.n	8009c14 <MlmeIndication+0x44>
}
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	bf00      	nop
 8009c30:	2000009c 	.word	0x2000009c
 8009c34:	20000874 	.word	0x20000874
 8009c38:	20000878 	.word	0x20000878

08009c3c <McpsConfirm>:
{
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8009c40:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <McpsConfirm+0x54>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8009c46:	7842      	ldrb	r2, [r0, #1]
 8009c48:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8009c4a:	7882      	ldrb	r2, [r0, #2]
 8009c4c:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8009c4e:	68c2      	ldr	r2, [r0, #12]
 8009c50:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8009c52:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8009c56:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8009c58:	6902      	ldr	r2, [r0, #16]
 8009c5a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8009c5c:	7902      	ldrb	r2, [r0, #4]
 8009c5e:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8009c60:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <McpsConfirm+0x58>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c66:	b10b      	cbz	r3, 8009c6c <McpsConfirm+0x30>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8009c68:	4809      	ldr	r0, [pc, #36]	; (8009c90 <McpsConfirm+0x54>)
 8009c6a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009c6c:	4c0a      	ldr	r4, [pc, #40]	; (8009c98 <McpsConfirm+0x5c>)
 8009c6e:	f104 0614 	add.w	r6, r4, #20
 8009c72:	e001      	b.n	8009c78 <McpsConfirm+0x3c>
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	d009      	beq.n	8009c8c <McpsConfirm+0x50>
        if( LmHandlerPackages[i] != NULL )
 8009c78:	f854 3b04 	ldr.w	r3, [r4], #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0f9      	beq.n	8009c74 <McpsConfirm+0x38>
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f6      	beq.n	8009c74 <McpsConfirm+0x38>
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8009c86:	4628      	mov	r0, r5
 8009c88:	4798      	blx	r3
 8009c8a:	e7f3      	b.n	8009c74 <McpsConfirm+0x38>
}
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	bf00      	nop
 8009c90:	200000b0 	.word	0x200000b0
 8009c94:	20000874 	.word	0x20000874
 8009c98:	20000878 	.word	0x20000878

08009c9c <LmHandlerProcess>:
{
 8009c9c:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 8009c9e:	f001 fe3b 	bl	800b918 <LoRaMacProcess>

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009ca2:	4d10      	ldr	r5, [pc, #64]	; (8009ce4 <LmHandlerProcess+0x48>)
 8009ca4:	2400      	movs	r4, #0
 8009ca6:	e009      	b.n	8009cbc <LmHandlerProcess+0x20>
        return LmHandlerPackages[id]->IsInitialized( );
 8009ca8:	4798      	blx	r3
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8009caa:	b118      	cbz	r0, 8009cb4 <LmHandlerProcess+0x18>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 8009cac:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	b264      	sxtb	r4, r4
 8009cb8:	2c05      	cmp	r4, #5
 8009cba:	d00f      	beq.n	8009cdc <LmHandlerProcess+0x40>
        if( ( LmHandlerPackages[i] != NULL ) &&
 8009cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0f7      	beq.n	8009cb4 <LmHandlerProcess+0x18>
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0f4      	beq.n	8009cb4 <LmHandlerProcess+0x18>
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8009cca:	b2e3      	uxtb	r3, r4
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d8f1      	bhi.n	8009cb4 <LmHandlerProcess+0x18>
 8009cd0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <LmHandlerProcess+0xc>
 8009cda:	e7eb      	b.n	8009cb4 <LmHandlerProcess+0x18>
    if( LmHandlerPackageIsTxPending( ) == true )
 8009cdc:	f7ff ff4a 	bl	8009b74 <LmHandlerPackageIsTxPending>
}
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000878 	.word	0x20000878

08009ce8 <LmHandlerGetDutyCycleWaitTime>:
}
 8009ce8:	4b01      	ldr	r3, [pc, #4]	; (8009cf0 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	20000870 	.word	0x20000870

08009cf4 <LmHandlerJoinStatus>:
{
 8009cf4:	b500      	push	{lr}
 8009cf6:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8009cfe:	4668      	mov	r0, sp
 8009d00:	f002 fef0 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8009d04:	b938      	cbnz	r0, 8009d16 <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009d06:	f89d 0004 	ldrb.w	r0, [sp, #4]
            return LORAMAC_HANDLER_RESET;
 8009d0a:	3800      	subs	r0, #0
 8009d0c:	bf18      	it	ne
 8009d0e:	2001      	movne	r0, #1
}
 8009d10:	b00b      	add	sp, #44	; 0x2c
 8009d12:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_RESET;
 8009d16:	2000      	movs	r0, #0
 8009d18:	e7fa      	b.n	8009d10 <LmHandlerJoinStatus+0x1c>
	...

08009d1c <LmHandlerRequestClass>:
{
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8009d22:	f001 fddb 	bl	800b8dc <LoRaMacIsBusy>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d137      	bne.n	8009d9a <LmHandlerRequestClass+0x7e>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8009d2a:	f7ff ffe3 	bl	8009cf4 <LmHandlerJoinStatus>
 8009d2e:	2801      	cmp	r0, #1
 8009d30:	d136      	bne.n	8009da0 <LmHandlerRequestClass+0x84>
    mibReq.Type = MIB_DEVICE_CLASS;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009d38:	4668      	mov	r0, sp
 8009d3a:	f002 fed3 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
 8009d3e:	bb90      	cbnz	r0, 8009da6 <LmHandlerRequestClass+0x8a>
    currentClass = mibReq.Param.Class;
 8009d40:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d031      	beq.n	8009dac <LmHandlerRequestClass+0x90>
        switch( newClass )
 8009d48:	2c01      	cmp	r4, #1
 8009d4a:	d031      	beq.n	8009db0 <LmHandlerRequestClass+0x94>
 8009d4c:	2c02      	cmp	r4, #2
 8009d4e:	d014      	beq.n	8009d7a <LmHandlerRequestClass+0x5e>
 8009d50:	b114      	cbz	r4, 8009d58 <LmHandlerRequestClass+0x3c>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009d52:	2000      	movs	r0, #0
}
 8009d54:	b00a      	add	sp, #40	; 0x28
 8009d56:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8009d58:	b90b      	cbnz	r3, 8009d5e <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e7fa      	b.n	8009d54 <LmHandlerRequestClass+0x38>
                        mibReq.Param.Class = newClass;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f88d 3004 	strb.w	r3, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009d64:	4668      	mov	r0, sp
 8009d66:	f003 f811 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
 8009d6a:	bb20      	cbnz	r0, 8009db6 <LmHandlerRequestClass+0x9a>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009d6c:	4b18      	ldr	r3, [pc, #96]	; (8009dd0 <LmHandlerRequestClass+0xb4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	b31b      	cbz	r3, 8009dbc <LmHandlerRequestClass+0xa0>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009d74:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009d76:	2000      	movs	r0, #0
 8009d78:	e7ec      	b.n	8009d54 <LmHandlerRequestClass+0x38>
                    if( currentClass != CLASS_A )
 8009d7a:	bb0b      	cbnz	r3, 8009dc0 <LmHandlerRequestClass+0xa4>
                        mibReq.Param.Class = newClass;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	f88d 3004 	strb.w	r3, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009d82:	4668      	mov	r0, sp
 8009d84:	f003 f802 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
 8009d88:	b9e8      	cbnz	r0, 8009dc6 <LmHandlerRequestClass+0xaa>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <LmHandlerRequestClass+0xb4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d90:	b1e3      	cbz	r3, 8009dcc <LmHandlerRequestClass+0xb0>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8009d92:	2002      	movs	r0, #2
 8009d94:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009d96:	2000      	movs	r0, #0
 8009d98:	e7dc      	b.n	8009d54 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009d9a:	f06f 0001 	mvn.w	r0, #1
 8009d9e:	e7d9      	b.n	8009d54 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009da0:	f06f 0002 	mvn.w	r0, #2
 8009da4:	e7d6      	b.n	8009d54 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295
 8009daa:	e7d3      	b.n	8009d54 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7d1      	b.n	8009d54 <LmHandlerRequestClass+0x38>
        switch( newClass )
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295
 8009db4:	e7ce      	b.n	8009d54 <LmHandlerRequestClass+0x38>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	e7cb      	b.n	8009d54 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7c9      	b.n	8009d54 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	e7c6      	b.n	8009d54 <LmHandlerRequestClass+0x38>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	e7c3      	b.n	8009d54 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8009dcc:	2000      	movs	r0, #0
 8009dce:	e7c1      	b.n	8009d54 <LmHandlerRequestClass+0x38>
 8009dd0:	20000874 	.word	0x20000874

08009dd4 <LmHandlerJoin>:
{
 8009dd4:	b530      	push	{r4, r5, lr}
 8009dd6:	b091      	sub	sp, #68	; 0x44
    mlmeReq.Type = MLME_JOIN;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8009dde:	4b31      	ldr	r3, [pc, #196]	; (8009ea4 <LmHandlerJoin+0xd0>)
 8009de0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009de4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8009de8:	f993 5005 	ldrsb.w	r5, [r3, #5]
 8009dec:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8009df0:	2802      	cmp	r0, #2
 8009df2:	d04a      	beq.n	8009e8a <LmHandlerJoin+0xb6>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8009df4:	2401      	movs	r4, #1
 8009df6:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8009dfa:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <LmHandlerJoin+0xd4>)
 8009dfc:	71dc      	strb	r4, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8009dfe:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8009e00:	715d      	strb	r5, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009e02:	2000      	movs	r0, #0
 8009e04:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8009e06:	7219      	strb	r1, [r3, #8]
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8009e08:	231e      	movs	r3, #30
 8009e0a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8009e0e:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009e12:	a801      	add	r0, sp, #4
 8009e14:	f002 ffba 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8009e18:	231f      	movs	r3, #31
 8009e1a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8009e1e:	4d21      	ldr	r5, [pc, #132]	; (8009ea4 <LmHandlerJoin+0xd0>)
 8009e20:	792b      	ldrb	r3, [r5, #4]
 8009e22:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009e26:	a801      	add	r0, sp, #4
 8009e28:	f002 ffb0 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8009e2c:	2321      	movs	r3, #33	; 0x21
 8009e2e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8009e32:	796b      	ldrb	r3, [r5, #5]
 8009e34:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009e38:	a801      	add	r0, sp, #4
 8009e3a:	f002 ffa7 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8009e3e:	2320      	movs	r3, #32
 8009e40:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8009e44:	796b      	ldrb	r3, [r5, #5]
 8009e46:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009e4a:	a801      	add	r0, sp, #4
 8009e4c:	f002 ff9e 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8009e50:	2328      	movs	r3, #40	; 0x28
 8009e52:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8009e56:	4b15      	ldr	r3, [pc, #84]	; (8009eac <LmHandlerJoin+0xd8>)
 8009e58:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009e5a:	a801      	add	r0, sp, #4
 8009e5c:	f002 ff96 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8009e60:	f002 fd92 	bl	800c988 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009e64:	f88d 4004 	strb.w	r4, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8009e68:	f88d 4008 	strb.w	r4, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009e6c:	a801      	add	r0, sp, #4
 8009e6e:	f002 ff8d 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8009e72:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <LmHandlerJoin+0xdc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	b10b      	cbz	r3, 8009e7e <LmHandlerJoin+0xaa>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8009e7a:	480b      	ldr	r0, [pc, #44]	; (8009ea8 <LmHandlerJoin+0xd4>)
 8009e7c:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <LmHandlerJoin+0xd0>)
 8009e80:	7858      	ldrb	r0, [r3, #1]
 8009e82:	f7ff ff4b 	bl	8009d1c <LmHandlerRequestClass>
}
 8009e86:	b011      	add	sp, #68	; 0x44
 8009e88:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <LmHandlerJoin+0xd4>)
 8009e92:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8009e94:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 8009e96:	f002 fd77 	bl	800c988 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8009e9a:	a80b      	add	r0, sp, #44	; 0x2c
 8009e9c:	f003 fa0e 	bl	800d2bc <LoRaMacMlmeRequest>
 8009ea0:	e7f1      	b.n	8009e86 <LmHandlerJoin+0xb2>
 8009ea2:	bf00      	nop
 8009ea4:	2000088c 	.word	0x2000088c
 8009ea8:	20000084 	.word	0x20000084
 8009eac:	01000300 	.word	0x01000300
 8009eb0:	20000874 	.word	0x20000874

08009eb4 <LmHandlerSend>:
{
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	4604      	mov	r4, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8009ebe:	f001 fd0d 	bl	800b8dc <LoRaMacIsBusy>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d16e      	bne.n	8009fa4 <LmHandlerSend+0xf0>
    if( LoRaMacIsStopped() == true )
 8009ec6:	f001 fd1d 	bl	800b904 <LoRaMacIsStopped>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d16d      	bne.n	8009faa <LmHandlerSend+0xf6>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8009ece:	f7ff ff11 	bl	8009cf4 <LmHandlerJoinStatus>
 8009ed2:	2801      	cmp	r0, #1
 8009ed4:	d142      	bne.n	8009f5c <LmHandlerSend+0xa8>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 8009ed6:	4b3a      	ldr	r3, [pc, #232]	; (8009fc0 <LmHandlerSend+0x10c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4798      	blx	r3
 8009ede:	b138      	cbz	r0, 8009ef0 <LmHandlerSend+0x3c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8009ee0:	7823      	ldrb	r3, [r4, #0]
 8009ee2:	4a37      	ldr	r2, [pc, #220]	; (8009fc0 <LmHandlerSend+0x10c>)
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	7812      	ldrb	r2, [r2, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d001      	beq.n	8009ef0 <LmHandlerSend+0x3c>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d15f      	bne.n	8009fb0 <LmHandlerSend+0xfc>
    TxParams.MsgType = isTxConfirmed;
 8009ef0:	4b34      	ldr	r3, [pc, #208]	; (8009fc4 <LmHandlerSend+0x110>)
 8009ef2:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8009ef4:	3d00      	subs	r5, #0
 8009ef6:	bf18      	it	ne
 8009ef8:	2501      	movne	r5, #1
 8009efa:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8009efe:	4b32      	ldr	r3, [pc, #200]	; (8009fc8 <LmHandlerSend+0x114>)
 8009f00:	791b      	ldrb	r3, [r3, #4]
 8009f02:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8009f06:	4669      	mov	r1, sp
 8009f08:	7860      	ldrb	r0, [r4, #1]
 8009f0a:	f002 fd89 	bl	800ca20 <LoRaMacQueryTxPossible>
 8009f0e:	b368      	cbz	r0, 8009f6c <LmHandlerSend+0xb8>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8009f10:	2300      	movs	r3, #0
 8009f12:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8009f16:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8009f18:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8009f1c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8009f20:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <LmHandlerSend+0x110>)
 8009f22:	f103 0c10 	add.w	ip, r3, #16
 8009f26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f2a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8009f2e:	4a26      	ldr	r2, [pc, #152]	; (8009fc8 <LmHandlerSend+0x114>)
 8009f30:	7912      	ldrb	r2, [r2, #4]
 8009f32:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8009f34:	4631      	mov	r1, r6
 8009f36:	a801      	add	r0, sp, #4
 8009f38:	f003 faee 	bl	800d518 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8009f3c:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <LmHandlerSend+0x118>)
 8009f3e:	9a05      	ldr	r2, [sp, #20]
 8009f40:	601a      	str	r2, [r3, #0]
    switch( status )
 8009f42:	2811      	cmp	r0, #17
 8009f44:	d82b      	bhi.n	8009f9e <LmHandlerSend+0xea>
 8009f46:	e8df f000 	tbb	[pc, r0]
 8009f4a:	361f      	.short	0x361f
 8009f4c:	2a2a2a2a 	.word	0x2a2a2a2a
 8009f50:	2a2a1c2a 	.word	0x2a2a1c2a
 8009f54:	2a2a272a 	.word	0x2a2a272a
 8009f58:	24363636 	.word	0x24363636
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8009f5c:	4b1c      	ldr	r3, [pc, #112]	; (8009fd0 <LmHandlerSend+0x11c>)
 8009f5e:	7a19      	ldrb	r1, [r3, #8]
 8009f60:	79d8      	ldrb	r0, [r3, #7]
 8009f62:	f7ff ff37 	bl	8009dd4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009f66:	f06f 0502 	mvn.w	r5, #2
 8009f6a:	e026      	b.n	8009fba <LmHandlerSend+0x106>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8009f6c:	7823      	ldrb	r3, [r4, #0]
 8009f6e:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8009f72:	7863      	ldrb	r3, [r4, #1]
 8009f74:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8009f78:	6863      	ldr	r3, [r4, #4]
 8009f7a:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8009f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f80:	e7ce      	b.n	8009f20 <LmHandlerSend+0x6c>
    switch( status )
 8009f82:	f06f 0502 	mvn.w	r5, #2
 8009f86:	e018      	b.n	8009fba <LmHandlerSend+0x106>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8009f88:	f115 0f07 	cmn.w	r5, #7
 8009f8c:	bf18      	it	ne
 8009f8e:	2500      	movne	r5, #0
 8009f90:	e013      	b.n	8009fba <LmHandlerSend+0x106>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8009f92:	f06f 0504 	mvn.w	r5, #4
            break;
 8009f96:	e010      	b.n	8009fba <LmHandlerSend+0x106>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8009f98:	f06f 0505 	mvn.w	r5, #5
            break;
 8009f9c:	e00d      	b.n	8009fba <LmHandlerSend+0x106>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8009f9e:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8009fa2:	e00a      	b.n	8009fba <LmHandlerSend+0x106>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009fa4:	f06f 0501 	mvn.w	r5, #1
 8009fa8:	e007      	b.n	8009fba <LmHandlerSend+0x106>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009faa:	f06f 0502 	mvn.w	r5, #2
 8009fae:	e004      	b.n	8009fba <LmHandlerSend+0x106>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8009fb0:	f06f 0503 	mvn.w	r5, #3
 8009fb4:	e001      	b.n	8009fba <LmHandlerSend+0x106>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8009fb6:	f06f 0501 	mvn.w	r5, #1
}
 8009fba:	4628      	mov	r0, r5
 8009fbc:	b006      	add	sp, #24
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	20000878 	.word	0x20000878
 8009fc4:	200000b0 	.word	0x200000b0
 8009fc8:	2000088c 	.word	0x2000088c
 8009fcc:	20000870 	.word	0x20000870
 8009fd0:	20000084 	.word	0x20000084

08009fd4 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8009fd4:	b170      	cbz	r0, 8009ff4 <LmHandlerGetCurrentClass+0x20>
{
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	b08a      	sub	sp, #40	; 0x28
 8009fda:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009fe2:	4668      	mov	r0, sp
 8009fe4:	f002 fd7e 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
 8009fe8:	b938      	cbnz	r0, 8009ffa <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8009fea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009fee:	7023      	strb	r3, [r4, #0]
}
 8009ff0:	b00a      	add	sp, #40	; 0x28
 8009ff2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009ff8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffe:	e7f7      	b.n	8009ff0 <LmHandlerGetCurrentClass+0x1c>

0800a000 <McpsIndication>:
{
 800a000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a002:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 800a004:	2300      	movs	r3, #0
 800a006:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800a00a:	4a2f      	ldr	r2, [pc, #188]	; (800a0c8 <McpsIndication+0xc8>)
 800a00c:	2301      	movs	r3, #1
 800a00e:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800a010:	7843      	ldrb	r3, [r0, #1]
 800a012:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a014:	2b00      	cmp	r3, #0
 800a016:	d149      	bne.n	800a0ac <McpsIndication+0xac>
 800a018:	4605      	mov	r5, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a01a:	4613      	mov	r3, r2
 800a01c:	7902      	ldrb	r2, [r0, #4]
 800a01e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a020:	880a      	ldrh	r2, [r1, #0]
 800a022:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a024:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a028:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a02a:	78ca      	ldrb	r2, [r1, #3]
 800a02c:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a02e:	6902      	ldr	r2, [r0, #16]
 800a030:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800a032:	78c3      	ldrb	r3, [r0, #3]
 800a034:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a038:	7b03      	ldrb	r3, [r0, #12]
 800a03a:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800a03e:	6883      	ldr	r3, [r0, #8]
 800a040:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800a042:	4b22      	ldr	r3, [pc, #136]	; (800a0cc <McpsIndication+0xcc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	b113      	cbz	r3, 800a050 <McpsIndication+0x50>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a04a:	491f      	ldr	r1, [pc, #124]	; (800a0c8 <McpsIndication+0xc8>)
 800a04c:	a804      	add	r0, sp, #16
 800a04e:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <McpsIndication+0xcc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	b113      	cbz	r3, 800a05e <McpsIndication+0x5e>
 800a058:	7e2a      	ldrb	r2, [r5, #24]
 800a05a:	b102      	cbz	r2, 800a05e <McpsIndication+0x5e>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a05c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a05e:	4e1c      	ldr	r6, [pc, #112]	; (800a0d0 <McpsIndication+0xd0>)
{
 800a060:	2401      	movs	r4, #1
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800a062:	4637      	mov	r7, r6
 800a064:	e009      	b.n	800a07a <McpsIndication+0x7a>
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a066:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	4628      	mov	r0, r5
 800a06e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a070:	b263      	sxtb	r3, r4
 800a072:	2b04      	cmp	r3, #4
 800a074:	dc14      	bgt.n	800a0a0 <McpsIndication+0xa0>
 800a076:	3401      	adds	r4, #1
 800a078:	b2e4      	uxtb	r4, r4
        if( LmHandlerPackages[i] != NULL )
 800a07a:	f856 3b04 	ldr.w	r3, [r6], #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0f6      	beq.n	800a070 <McpsIndication+0x70>
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800a082:	6a1a      	ldr	r2, [r3, #32]
 800a084:	2a00      	cmp	r2, #0
 800a086:	d0f3      	beq.n	800a070 <McpsIndication+0x70>
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	78eb      	ldrb	r3, [r5, #3]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d0ea      	beq.n	800a066 <McpsIndication+0x66>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800a090:	2c01      	cmp	r4, #1
 800a092:	d1ed      	bne.n	800a070 <McpsIndication+0x70>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4798      	blx	r3
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0eb      	beq.n	800a076 <McpsIndication+0x76>
 800a09e:	e7e2      	b.n	800a066 <McpsIndication+0x66>
    LmHandlerGetCurrentClass( &deviceClass );
 800a0a0:	f10d 000f 	add.w	r0, sp, #15
 800a0a4:	f7ff ff96 	bl	8009fd4 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800a0a8:	796b      	ldrb	r3, [r5, #5]
 800a0aa:	b90b      	cbnz	r3, 800a0b0 <McpsIndication+0xb0>
}
 800a0ac:	b007      	add	sp, #28
 800a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LmHandlerAppData_t appData =
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f88d 1004 	strb.w	r1, [sp, #4]
 800a0b6:	f88d 1005 	strb.w	r1, [sp, #5]
 800a0ba:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800a0bc:	2201      	movs	r2, #1
 800a0be:	a801      	add	r0, sp, #4
 800a0c0:	f7ff fef8 	bl	8009eb4 <LmHandlerSend>
 800a0c4:	e7f2      	b.n	800a0ac <McpsIndication+0xac>
 800a0c6:	bf00      	nop
 800a0c8:	2000009c 	.word	0x2000009c
 800a0cc:	20000874 	.word	0x20000874
 800a0d0:	20000878 	.word	0x20000878

0800a0d4 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800a0d4:	b180      	cbz	r0, 800a0f8 <LmHandlerGetTxDatarate+0x24>
{
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	b08a      	sub	sp, #40	; 0x28
 800a0da:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a0dc:	231f      	movs	r3, #31
 800a0de:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800a0e2:	4668      	mov	r0, sp
 800a0e4:	f002 fcfe 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
 800a0e8:	b948      	cbnz	r0, 800a0fe <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a0ea:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800a0ee:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <LmHandlerGetTxDatarate+0x30>)
 800a0f2:	7113      	strb	r3, [r2, #4]
}
 800a0f4:	b00a      	add	sp, #40	; 0x28
 800a0f6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a0fc:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	e7f7      	b.n	800a0f4 <LmHandlerGetTxDatarate+0x20>
 800a104:	2000088c 	.word	0x2000088c

0800a108 <LmHandlerSetSystemMaxRxError>:
{
 800a108:	b500      	push	{lr}
 800a10a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a10c:	2322      	movs	r3, #34	; 0x22
 800a10e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a112:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a114:	4668      	mov	r0, sp
 800a116:	f002 fe39 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
 800a11a:	3800      	subs	r0, #0
 800a11c:	bf18      	it	ne
 800a11e:	2001      	movne	r0, #1
}
 800a120:	4240      	negs	r0, r0
 800a122:	b00b      	add	sp, #44	; 0x2c
 800a124:	f85d fb04 	ldr.w	pc, [sp], #4

0800a128 <LmHandlerConfigure>:
{
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	b08e      	sub	sp, #56	; 0x38
 800a12c:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800a12e:	4c42      	ldr	r4, [pc, #264]	; (800a238 <LmHandlerConfigure+0x110>)
 800a130:	2218      	movs	r2, #24
 800a132:	4620      	mov	r0, r4
 800a134:	f005 febc 	bl	800feb0 <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 800a138:	f7fe fe32 	bl	8008da0 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800a13c:	7822      	ldrb	r2, [r4, #0]
 800a13e:	2301      	movs	r3, #1
 800a140:	4093      	lsls	r3, r2
 800a142:	6841      	ldr	r1, [r0, #4]
 800a144:	420b      	tst	r3, r1
 800a146:	d106      	bne.n	800a156 <LmHandlerConfigure+0x2e>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800a148:	4b3c      	ldr	r3, [pc, #240]	; (800a23c <LmHandlerConfigure+0x114>)
 800a14a:	2201      	movs	r2, #1
 800a14c:	2100      	movs	r1, #0
 800a14e:	4608      	mov	r0, r1
 800a150:	f008 fe14 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800a154:	e7fe      	b.n	800a154 <LmHandlerConfigure+0x2c>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800a156:	493a      	ldr	r1, [pc, #232]	; (800a240 <LmHandlerConfigure+0x118>)
 800a158:	483a      	ldr	r0, [pc, #232]	; (800a244 <LmHandlerConfigure+0x11c>)
 800a15a:	f002 fa4f 	bl	800c5fc <LoRaMacInitialization>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d163      	bne.n	800a22a <LmHandlerConfigure+0x102>
        mibReq.Type = MIB_NET_ID;
 800a162:	2305      	movs	r3, #5
 800a164:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a168:	2300      	movs	r3, #0
 800a16a:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a16c:	a804      	add	r0, sp, #16
 800a16e:	f002 fe0d 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800a172:	4b33      	ldr	r3, [pc, #204]	; (800a240 <LmHandlerConfigure+0x118>)
 800a174:	68d9      	ldr	r1, [r3, #12]
 800a176:	6898      	ldr	r0, [r3, #8]
 800a178:	f7ff fc44 	bl	8009a04 <SecureElementInitMcuID>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d157      	bne.n	800a230 <LmHandlerConfigure+0x108>
    mibReq.Type = MIB_DEV_ADDR;
 800a180:	2306      	movs	r3, #6
 800a182:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a186:	a804      	add	r0, sp, #16
 800a188:	f002 fcac 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a18c:	4c2e      	ldr	r4, [pc, #184]	; (800a248 <LmHandlerConfigure+0x120>)
 800a18e:	9b05      	ldr	r3, [sp, #20]
 800a190:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a192:	a804      	add	r0, sp, #16
 800a194:	f002 fdfa 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800a198:	2302      	movs	r3, #2
 800a19a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800a19e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a1a0:	a804      	add	r0, sp, #16
 800a1a2:	f002 fc9f 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800a1ac:	3408      	adds	r4, #8
 800a1ae:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a1b0:	a804      	add	r0, sp, #16
 800a1b2:	f002 fc97 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800a1b6:	f7ff fcb5 	bl	8009b24 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a1ba:	260f      	movs	r6, #15
 800a1bc:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a1c6:	a804      	add	r0, sp, #16
 800a1c8:	f002 fde0 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a1d8:	eb0d 0003 	add.w	r0, sp, r3
 800a1dc:	f002 fdd6 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a1e6:	4c14      	ldr	r4, [pc, #80]	; (800a238 <LmHandlerConfigure+0x110>)
 800a1e8:	78a3      	ldrb	r3, [r4, #2]
 800a1ea:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a1ee:	a804      	add	r0, sp, #16
 800a1f0:	f002 fdcc 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800a1f4:	2339      	movs	r3, #57	; 0x39
 800a1f6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800a1fa:	6963      	ldr	r3, [r4, #20]
 800a1fc:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a1fe:	a804      	add	r0, sp, #16
 800a200:	f002 fdc4 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a204:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a208:	a902      	add	r1, sp, #8
 800a20a:	7820      	ldrb	r0, [r4, #0]
 800a20c:	f004 fb55 	bl	800e8ba <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800a210:	1b43      	subs	r3, r0, r5
 800a212:	bf18      	it	ne
 800a214:	2301      	movne	r3, #1
 800a216:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800a218:	2014      	movs	r0, #20
 800a21a:	f7ff ff75 	bl	800a108 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a21e:	79e0      	ldrb	r0, [r4, #7]
 800a220:	f003 fb32 	bl	800d888 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800a224:	4628      	mov	r0, r5
}
 800a226:	b00e      	add	sp, #56	; 0x38
 800a228:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_HANDLER_ERROR;
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	e7fa      	b.n	800a226 <LmHandlerConfigure+0xfe>
        return LORAMAC_HANDLER_ERROR;
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e7f7      	b.n	800a226 <LmHandlerConfigure+0xfe>
 800a236:	bf00      	nop
 800a238:	2000088c 	.word	0x2000088c
 800a23c:	08013c0c 	.word	0x08013c0c
 800a240:	200008a4 	.word	0x200008a4
 800a244:	200008bc 	.word	0x200008bc
 800a248:	20000858 	.word	0x20000858

0800a24c <LmHandlerPackageRegister>:
{
 800a24c:	b530      	push	{r4, r5, lr}
 800a24e:	b083      	sub	sp, #12
 800a250:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	9301      	str	r3, [sp, #4]
    switch( id )
 800a256:	4604      	mov	r4, r0
 800a258:	b9c8      	cbnz	r0, 800a28e <LmHandlerPackageRegister+0x42>
                package = LmhpCompliancePackageFactory( );
 800a25a:	f000 fb13 	bl	800a884 <LmhpCompliancePackageFactory>
 800a25e:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	b1e3      	cbz	r3, 800a29e <LmHandlerPackageRegister+0x52>
        LmHandlerPackages[id] = package;
 800a264:	4a0f      	ldr	r2, [pc, #60]	; (800a2a4 <LmHandlerPackageRegister+0x58>)
 800a266:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800a26a:	4a0f      	ldr	r2, [pc, #60]	; (800a2a8 <LmHandlerPackageRegister+0x5c>)
 800a26c:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800a26e:	4a0f      	ldr	r2, [pc, #60]	; (800a2ac <LmHandlerPackageRegister+0x60>)
 800a270:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800a272:	4a0f      	ldr	r2, [pc, #60]	; (800a2b0 <LmHandlerPackageRegister+0x64>)
 800a274:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800a276:	4a0f      	ldr	r2, [pc, #60]	; (800a2b4 <LmHandlerPackageRegister+0x68>)
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	6992      	ldr	r2, [r2, #24]
 800a27c:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	22f2      	movs	r2, #242	; 0xf2
 800a282:	490d      	ldr	r1, [pc, #52]	; (800a2b8 <LmHandlerPackageRegister+0x6c>)
 800a284:	4628      	mov	r0, r5
 800a286:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800a288:	2000      	movs	r0, #0
}
 800a28a:	b003      	add	sp, #12
 800a28c:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800a28e:	a901      	add	r1, sp, #4
 800a290:	f000 fafe 	bl	800a890 <LmhpPackagesRegister>
 800a294:	2800      	cmp	r0, #0
 800a296:	d0e3      	beq.n	800a260 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	e7f5      	b.n	800a28a <LmHandlerPackageRegister+0x3e>
        return LORAMAC_HANDLER_ERROR;
 800a29e:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a2:	e7f2      	b.n	800a28a <LmHandlerPackageRegister+0x3e>
 800a2a4:	20000878 	.word	0x20000878
 800a2a8:	08009dd5 	.word	0x08009dd5
 800a2ac:	08009eb5 	.word	0x08009eb5
 800a2b0:	08009ba9 	.word	0x08009ba9
 800a2b4:	20000874 	.word	0x20000874
 800a2b8:	20000764 	.word	0x20000764

0800a2bc <LmHandlerInit>:
{
 800a2bc:	b500      	push	{lr}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800a2c2:	4b15      	ldr	r3, [pc, #84]	; (800a318 <LmHandlerInit+0x5c>)
 800a2c4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a2c6:	4b15      	ldr	r3, [pc, #84]	; (800a31c <LmHandlerInit+0x60>)
 800a2c8:	4a15      	ldr	r2, [pc, #84]	; (800a320 <LmHandlerInit+0x64>)
 800a2ca:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a2cc:	4a15      	ldr	r2, [pc, #84]	; (800a324 <LmHandlerInit+0x68>)
 800a2ce:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a2d0:	4a15      	ldr	r2, [pc, #84]	; (800a328 <LmHandlerInit+0x6c>)
 800a2d2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a2d4:	4a15      	ldr	r2, [pc, #84]	; (800a32c <LmHandlerInit+0x70>)
 800a2d6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800a2d8:	6802      	ldr	r2, [r0, #0]
 800a2da:	4b15      	ldr	r3, [pc, #84]	; (800a330 <LmHandlerInit+0x74>)
 800a2dc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800a2de:	6842      	ldr	r2, [r0, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800a2e2:	6882      	ldr	r2, [r0, #8]
 800a2e4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800a2e6:	68c2      	ldr	r2, [r0, #12]
 800a2e8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800a2ea:	4a12      	ldr	r2, [pc, #72]	; (800a334 <LmHandlerInit+0x78>)
 800a2ec:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a2ee:	6982      	ldr	r2, [r0, #24]
 800a2f0:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800a2f2:	4911      	ldr	r1, [pc, #68]	; (800a338 <LmHandlerInit+0x7c>)
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f7ff ffa9 	bl	800a24c <LmHandlerPackageRegister>
 800a2fa:	b948      	cbnz	r0, 800a310 <LmHandlerInit+0x54>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800a2fc:	a801      	add	r0, sp, #4
 800a2fe:	f000 fac5 	bl	800a88c <LmhpPackagesRegistrationInit>
 800a302:	3800      	subs	r0, #0
 800a304:	bf18      	it	ne
 800a306:	2001      	movne	r0, #1
 800a308:	4240      	negs	r0, r0
}
 800a30a:	b003      	add	sp, #12
 800a30c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	e7f9      	b.n	800a30a <LmHandlerInit+0x4e>
 800a316:	bf00      	nop
 800a318:	20000874 	.word	0x20000874
 800a31c:	200008bc 	.word	0x200008bc
 800a320:	08009c3d 	.word	0x08009c3d
 800a324:	0800a001 	.word	0x0800a001
 800a328:	0800a3c1 	.word	0x0800a3c1
 800a32c:	08009bd1 	.word	0x08009bd1
 800a330:	200008a4 	.word	0x200008a4
 800a334:	0800a4bf 	.word	0x0800a4bf
 800a338:	20000090 	.word	0x20000090

0800a33c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800a33c:	b161      	cbz	r1, 800a358 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800a33e:	b118      	cbz	r0, 800a348 <LmHandlerGetVersion+0xc>
 800a340:	2801      	cmp	r0, #1
 800a342:	d005      	beq.n	800a350 <LmHandlerGetVersion+0x14>
 800a344:	2000      	movs	r0, #0
 800a346:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800a348:	4a05      	ldr	r2, [pc, #20]	; (800a360 <LmHandlerGetVersion+0x24>)
 800a34a:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800a34c:	2000      	movs	r0, #0
            break;
 800a34e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800a350:	4a04      	ldr	r2, [pc, #16]	; (800a364 <LmHandlerGetVersion+0x28>)
 800a352:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a354:	2000      	movs	r0, #0
            break;
 800a356:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	01000300 	.word	0x01000300
 800a364:	01010003 	.word	0x01010003

0800a368 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800a368:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800a36a:	f003 faab 	bl	800d8c4 <LoRaMacDeInitialization>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a36e:	2800      	cmp	r0, #0
    }
}
 800a370:	bf0c      	ite	eq
 800a372:	2000      	moveq	r0, #0
 800a374:	f06f 0001 	mvnne.w	r0, #1
 800a378:	bd08      	pop	{r3, pc}

0800a37a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800a37a:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800a37c:	f002 fb30 	bl	800c9e0 <LoRaMacHalt>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a380:	2800      	cmp	r0, #0
    }
}
 800a382:	bf0c      	ite	eq
 800a384:	2000      	moveq	r0, #0
 800a386:	f06f 0001 	mvnne.w	r0, #1
 800a38a:	bd08      	pop	{r3, pc}

0800a38c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800a38c:	b180      	cbz	r0, 800a3b0 <LmHandlerGetTxPower+0x24>
{
 800a38e:	b510      	push	{r4, lr}
 800a390:	b08a      	sub	sp, #40	; 0x28
 800a392:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a394:	2320      	movs	r3, #32
 800a396:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a39a:	4668      	mov	r0, sp
 800a39c:	f002 fba2 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
 800a3a0:	b948      	cbnz	r0, 800a3b6 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800a3a2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800a3a6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800a3a8:	4a04      	ldr	r2, [pc, #16]	; (800a3bc <LmHandlerGetTxPower+0x30>)
 800a3aa:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800a3ac:	b00a      	add	sp, #40	; 0x28
 800a3ae:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a3b4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ba:	e7f7      	b.n	800a3ac <LmHandlerGetTxPower+0x20>
 800a3bc:	2000088c 	.word	0x2000088c

0800a3c0 <MlmeConfirm>:
{
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	b08a      	sub	sp, #40	; 0x28
 800a3c4:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 0;
 800a3c6:	4b35      	ldr	r3, [pc, #212]	; (800a49c <MlmeConfirm+0xdc>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a3cc:	7842      	ldrb	r2, [r0, #1]
 800a3ce:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a3d0:	4b33      	ldr	r3, [pc, #204]	; (800a4a0 <MlmeConfirm+0xe0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d6:	b10b      	cbz	r3, 800a3dc <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a3d8:	4830      	ldr	r0, [pc, #192]	; (800a49c <MlmeConfirm+0xdc>)
 800a3da:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a3dc:	4c31      	ldr	r4, [pc, #196]	; (800a4a4 <MlmeConfirm+0xe4>)
 800a3de:	f104 0614 	add.w	r6, r4, #20
 800a3e2:	e001      	b.n	800a3e8 <MlmeConfirm+0x28>
 800a3e4:	42a6      	cmp	r6, r4
 800a3e6:	d009      	beq.n	800a3fc <MlmeConfirm+0x3c>
        if( LmHandlerPackages[i] != NULL )
 800a3e8:	f854 3b04 	ldr.w	r3, [r4], #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0f9      	beq.n	800a3e4 <MlmeConfirm+0x24>
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f6      	beq.n	800a3e4 <MlmeConfirm+0x24>
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	4798      	blx	r3
 800a3fa:	e7f3      	b.n	800a3e4 <MlmeConfirm+0x24>
    switch( mlmeConfirm->MlmeRequest )
 800a3fc:	782b      	ldrb	r3, [r5, #0]
 800a3fe:	2b05      	cmp	r3, #5
 800a400:	d03d      	beq.n	800a47e <MlmeConfirm+0xbe>
 800a402:	2b0c      	cmp	r3, #12
 800a404:	d043      	beq.n	800a48e <MlmeConfirm+0xce>
 800a406:	2b01      	cmp	r3, #1
 800a408:	d001      	beq.n	800a40e <MlmeConfirm+0x4e>
}
 800a40a:	b00a      	add	sp, #40	; 0x28
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800a40e:	2306      	movs	r3, #6
 800a410:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800a414:	4668      	mov	r0, sp
 800a416:	f002 fb65 	bl	800cae4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800a41a:	9901      	ldr	r1, [sp, #4]
 800a41c:	4b22      	ldr	r3, [pc, #136]	; (800a4a8 <MlmeConfirm+0xe8>)
 800a41e:	79d8      	ldrb	r0, [r3, #7]
 800a420:	f7ff fad8 	bl	80099d4 <SecureElementSetDevAddr>
 800a424:	b910      	cbnz	r0, 800a42c <MlmeConfirm+0x6c>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a426:	4b21      	ldr	r3, [pc, #132]	; (800a4ac <MlmeConfirm+0xec>)
 800a428:	9a01      	ldr	r2, [sp, #4]
 800a42a:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a42c:	4c1e      	ldr	r4, [pc, #120]	; (800a4a8 <MlmeConfirm+0xe8>)
 800a42e:	1d20      	adds	r0, r4, #4
 800a430:	f7ff fe50 	bl	800a0d4 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800a434:	1d60      	adds	r0, r4, #5
 800a436:	f7ff ffa9 	bl	800a38c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a43a:	4b18      	ldr	r3, [pc, #96]	; (800a49c <MlmeConfirm+0xdc>)
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	b193      	cbz	r3, 800a466 <MlmeConfirm+0xa6>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a440:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <MlmeConfirm+0xe8>)
 800a442:	22ff      	movs	r2, #255	; 0xff
 800a444:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a446:	4b16      	ldr	r3, [pc, #88]	; (800a4a0 <MlmeConfirm+0xe0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0dc      	beq.n	800a40a <MlmeConfirm+0x4a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a450:	4815      	ldr	r0, [pc, #84]	; (800a4a8 <MlmeConfirm+0xe8>)
 800a452:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a454:	4b11      	ldr	r3, [pc, #68]	; (800a49c <MlmeConfirm+0xdc>)
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1d6      	bne.n	800a40a <MlmeConfirm+0x4a>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800a45c:	4b12      	ldr	r3, [pc, #72]	; (800a4a8 <MlmeConfirm+0xe8>)
 800a45e:	79d8      	ldrb	r0, [r3, #7]
 800a460:	f7ff fb72 	bl	8009b48 <SecureElementPrintSessionKeys>
            break;
 800a464:	e7d1      	b.n	800a40a <MlmeConfirm+0x4a>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a466:	2200      	movs	r2, #0
 800a468:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800a46a:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <MlmeConfirm+0xf0>)
 800a46c:	7858      	ldrb	r0, [r3, #1]
 800a46e:	f7ff fc55 	bl	8009d1c <LmHandlerRequestClass>
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a472:	4b0b      	ldr	r3, [pc, #44]	; (800a4a0 <MlmeConfirm+0xe0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e9      	bne.n	800a450 <MlmeConfirm+0x90>
 800a47c:	e7ea      	b.n	800a454 <MlmeConfirm+0x94>
                RxParams.LinkCheck = true;
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <MlmeConfirm+0xf4>)
 800a480:	2201      	movs	r2, #1
 800a482:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800a484:	7a2a      	ldrb	r2, [r5, #8]
 800a486:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800a488:	7a6a      	ldrb	r2, [r5, #9]
 800a48a:	74da      	strb	r2, [r3, #19]
            break;
 800a48c:	e7bd      	b.n	800a40a <MlmeConfirm+0x4a>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a48e:	786b      	ldrb	r3, [r5, #1]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0ba      	beq.n	800a40a <MlmeConfirm+0x4a>
                    LmHandlerDeviceTimeReq( );
 800a494:	f7ff fb88 	bl	8009ba8 <LmHandlerDeviceTimeReq>
}
 800a498:	e7b7      	b.n	800a40a <MlmeConfirm+0x4a>
 800a49a:	bf00      	nop
 800a49c:	200000b0 	.word	0x200000b0
 800a4a0:	20000874 	.word	0x20000874
 800a4a4:	20000878 	.word	0x20000878
 800a4a8:	20000084 	.word	0x20000084
 800a4ac:	20000858 	.word	0x20000858
 800a4b0:	2000088c 	.word	0x2000088c
 800a4b4:	2000009c 	.word	0x2000009c

0800a4b8 <LmHandlerNvmDataStore>:

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	4770      	bx	lr

0800a4be <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800a4be:	4770      	bx	lr

0800a4c0 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b138      	cbz	r0, 800a4d4 <LmhpComplianceInit+0x14>
 800a4c4:	b131      	cbz	r1, 800a4d4 <LmhpComplianceInit+0x14>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800a4c6:	4806      	ldr	r0, [pc, #24]	; (800a4e0 <LmhpComplianceInit+0x20>)
 800a4c8:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800a4ca:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <LmhpComplianceInit+0x24>)
 800a4cc:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800a4ce:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e002      	b.n	800a4da <LmhpComplianceInit+0x1a>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4a02      	ldr	r2, [pc, #8]	; (800a4e0 <LmhpComplianceInit+0x20>)
 800a4d8:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = true;
 800a4da:	4a02      	ldr	r2, [pc, #8]	; (800a4e4 <LmhpComplianceInit+0x24>)
 800a4dc:	7013      	strb	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
    }
}
 800a4de:	4770      	bx	lr
 800a4e0:	200008f8 	.word	0x200008f8
 800a4e4:	200008cc 	.word	0x200008cc

0800a4e8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <LmhpComplianceIsInitialized+0x8>)
 800a4ea:	7818      	ldrb	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	200008cc 	.word	0x200008cc

0800a4f4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <LmhpComplianceIsRunning+0xc>)
 800a4f6:	7818      	ldrb	r0, [r3, #0]
 800a4f8:	b100      	cbz	r0, 800a4fc <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800a4fa:	7858      	ldrb	r0, [r3, #1]
}
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	200008cc 	.word	0x200008cc

0800a504 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800a504:	4b08      	ldr	r3, [pc, #32]	; (800a528 <LmhpComplianceOnMcpsConfirm+0x24>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	b12b      	cbz	r3, 800a516 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800a50a:	4b07      	ldr	r3, [pc, #28]	; (800a528 <LmhpComplianceOnMcpsConfirm+0x24>)
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	b113      	cbz	r3, 800a516 <LmhpComplianceOnMcpsConfirm+0x12>
 800a510:	7803      	ldrb	r3, [r0, #0]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d000      	beq.n	800a518 <LmhpComplianceOnMcpsConfirm+0x14>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800a516:	4770      	bx	lr
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800a518:	7903      	ldrb	r3, [r0, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0fb      	beq.n	800a516 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800a51e:	4a02      	ldr	r2, [pc, #8]	; (800a528 <LmhpComplianceOnMcpsConfirm+0x24>)
 800a520:	8993      	ldrh	r3, [r2, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	8193      	strh	r3, [r2, #12]
 800a526:	e7f6      	b.n	800a516 <LmhpComplianceOnMcpsConfirm+0x12>
 800a528:	200008cc 	.word	0x200008cc

0800a52c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800a52c:	4b08      	ldr	r3, [pc, #32]	; (800a550 <LmhpComplianceOnMlmeConfirm+0x24>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b12b      	cbz	r3, 800a53e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <LmhpComplianceOnMlmeConfirm+0x24>)
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	b113      	cbz	r3, 800a53e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800a538:	7803      	ldrb	r3, [r0, #0]
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d000      	beq.n	800a540 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800a53e:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 800a540:	4b03      	ldr	r3, [pc, #12]	; (800a550 <LmhpComplianceOnMlmeConfirm+0x24>)
 800a542:	2201      	movs	r2, #1
 800a544:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800a546:	7a02      	ldrb	r2, [r0, #8]
 800a548:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800a54a:	7a42      	ldrb	r2, [r0, #9]
 800a54c:	741a      	strb	r2, [r3, #16]
 800a54e:	e7f6      	b.n	800a53e <LmhpComplianceOnMlmeConfirm+0x12>
 800a550:	200008cc 	.word	0x200008cc

0800a554 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800a554:	4770      	bx	lr
	...

0800a558 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 800a558:	4b26      	ldr	r3, [pc, #152]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d040      	beq.n	800a5e2 <LmhpComplianceTxProcess+0x8a>
    if( ComplianceTestState.IsRunning == false )
 800a560:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d03f      	beq.n	800a5e8 <LmhpComplianceTxProcess+0x90>
{
 800a568:	b500      	push	{lr}
 800a56a:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 800a56c:	4b21      	ldr	r3, [pc, #132]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a56e:	7b9b      	ldrb	r3, [r3, #14]
 800a570:	b323      	cbz	r3, 800a5bc <LmhpComplianceTxProcess+0x64>
        ComplianceTestState.LinkCheck = false;
 800a572:	4b20      	ldr	r3, [pc, #128]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a574:	2200      	movs	r2, #0
 800a576:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800a578:	2203      	movs	r2, #3
 800a57a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	2105      	movs	r1, #5
 800a580:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800a582:	7bd9      	ldrb	r1, [r3, #15]
 800a584:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800a586:	7c19      	ldrb	r1, [r3, #16]
 800a588:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 800a58a:	2201      	movs	r2, #1
 800a58c:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800a58e:	23e0      	movs	r3, #224	; 0xe0
 800a590:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 800a594:	4b17      	ldr	r3, [pc, #92]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
    LmHandlerAppData_t appData =
 800a596:	799a      	ldrb	r2, [r3, #6]
 800a598:	f88d 2001 	strb.w	r2, [sp, #1]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 800a5a0:	4815      	ldr	r0, [pc, #84]	; (800a5f8 <LmhpComplianceTxProcess+0xa0>)
 800a5a2:	f008 fa73 	bl	8012a8c <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <LmhpComplianceTxProcess+0xa4>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	b1fb      	cbz	r3, 800a5ec <LmhpComplianceTxProcess+0x94>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4911      	ldr	r1, [pc, #68]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a5b0:	78c9      	ldrb	r1, [r1, #3]
 800a5b2:	4668      	mov	r0, sp
 800a5b4:	4798      	blx	r3
}
 800a5b6:	b003      	add	sp, #12
 800a5b8:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( ComplianceTestState.State )
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d005      	beq.n	800a5d0 <LmhpComplianceTxProcess+0x78>
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d1e2      	bne.n	800a58e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.State = 1;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	709a      	strb	r2, [r3, #2]
                break;
 800a5ce:	e7de      	b.n	800a58e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.DataBufferSize = 2;
 800a5d0:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <LmhpComplianceTxProcess+0x9c>)
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800a5d6:	899a      	ldrh	r2, [r3, #12]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	0a11      	lsrs	r1, r2, #8
 800a5dc:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800a5de:	705a      	strb	r2, [r3, #1]
                break;
 800a5e0:	e7d5      	b.n	800a58e <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800a5e8:	2000      	movs	r0, #0
}
 800a5ea:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e7e1      	b.n	800a5b6 <LmhpComplianceTxProcess+0x5e>
 800a5f2:	bf00      	nop
 800a5f4:	200008cc 	.word	0x200008cc
 800a5f8:	200008e0 	.word	0x200008e0
 800a5fc:	200000cc 	.word	0x200000cc

0800a600 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800a600:	4b99      	ldr	r3, [pc, #612]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 812d 	beq.w	800a864 <LmhpComplianceOnMcpsIndication+0x264>
    if( mcpsIndication->RxData == false )
 800a60a:	7b43      	ldrb	r3, [r0, #13]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 8129 	beq.w	800a864 <LmhpComplianceOnMcpsIndication+0x264>
{
 800a612:	b510      	push	{r4, lr}
 800a614:	b08c      	sub	sp, #48	; 0x30
    if( ( ComplianceTestState.IsRunning == true ) &&
 800a616:	4b94      	ldr	r3, [pc, #592]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8119 	beq.w	800a852 <LmhpComplianceOnMcpsIndication+0x252>
 800a620:	7b83      	ldrb	r3, [r0, #14]
 800a622:	b91b      	cbnz	r3, 800a62c <LmhpComplianceOnMcpsIndication+0x2c>
        ComplianceTestState.DownLinkCounter++;
 800a624:	4a90      	ldr	r2, [pc, #576]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a626:	8993      	ldrh	r3, [r2, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	8193      	strh	r3, [r2, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800a62c:	78c3      	ldrb	r3, [r0, #3]
 800a62e:	2be0      	cmp	r3, #224	; 0xe0
 800a630:	f040 8116 	bne.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800a634:	6882      	ldr	r2, [r0, #8]
 800a636:	7813      	ldrb	r3, [r2, #0]
 800a638:	498b      	ldr	r1, [pc, #556]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a63a:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 800a63c:	2b0a      	cmp	r3, #10
 800a63e:	f200 810f 	bhi.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
 800a642:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a646:	004b      	.short	0x004b
 800a648:	006c0068 	.word	0x006c0068
 800a64c:	00770071 	.word	0x00770071
 800a650:	009c0095 	.word	0x009c0095
 800a654:	00eb00be 	.word	0x00eb00be
 800a658:	00fc00f2 	.word	0x00fc00f2
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800a65c:	6883      	ldr	r3, [r0, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	2a01      	cmp	r2, #1
 800a662:	f040 80fd 	bne.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800a666:	785a      	ldrb	r2, [r3, #1]
 800a668:	2a01      	cmp	r2, #1
 800a66a:	f040 80f9 	bne.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800a66e:	789a      	ldrb	r2, [r3, #2]
 800a670:	2a01      	cmp	r2, #1
 800a672:	f040 80f5 	bne.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800a676:	78db      	ldrb	r3, [r3, #3]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	f040 80f1 	bne.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
            ComplianceTestState.IsTxConfirmed = false;
 800a67e:	4b7a      	ldr	r3, [pc, #488]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a680:	2400      	movs	r4, #0
 800a682:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800a684:	22e0      	movs	r2, #224	; 0xe0
 800a686:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800a688:	2202      	movs	r2, #2
 800a68a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800a68c:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800a68e:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800a690:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800a692:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800a694:	2201      	movs	r2, #1
 800a696:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800a698:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 800a69a:	2304      	movs	r3, #4
 800a69c:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 800a6a0:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a6a4:	a802      	add	r0, sp, #8
 800a6a6:	f002 fb71 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f003 f8ec 	bl	800d888 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800a6b0:	4b6e      	ldr	r3, [pc, #440]	; (800a86c <LmhpComplianceOnMcpsIndication+0x26c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	b103      	cbz	r3, 800a6ba <LmhpComplianceOnMcpsIndication+0xba>
                LmhpComplianceParams->StopPeripherals( );
 800a6b8:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800a6ba:	4c6d      	ldr	r4, [pc, #436]	; (800a870 <LmhpComplianceOnMcpsIndication+0x270>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	9200      	str	r2, [sp, #0]
 800a6c0:	4b6c      	ldr	r3, [pc, #432]	; (800a874 <LmhpComplianceOnMcpsIndication+0x274>)
 800a6c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f008 f91e 	bl	8012908 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800a6cc:	f241 3188 	movw	r1, #5000	; 0x1388
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f008 fa21 	bl	8012b18 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800a6d6:	f7ff ff3f 	bl	800a558 <LmhpComplianceTxProcess>
 800a6da:	e0c1      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800a6dc:	4864      	ldr	r0, [pc, #400]	; (800a870 <LmhpComplianceOnMcpsIndication+0x270>)
 800a6de:	f008 f977 	bl	80129d0 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800a6e2:	4b61      	ldr	r3, [pc, #388]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800a6e8:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800a6ea:	2304      	movs	r3, #4
 800a6ec:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800a6f0:	4c5e      	ldr	r4, [pc, #376]	; (800a86c <LmhpComplianceOnMcpsIndication+0x26c>)
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800a6fa:	a802      	add	r0, sp, #8
 800a6fc:	f002 fb46 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	7858      	ldrb	r0, [r3, #1]
 800a704:	f003 f8c0 	bl	800d888 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 80a7 	beq.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                        LmhpComplianceParams->StartPeripherals( );
 800a712:	4798      	blx	r3
                break;
 800a714:	e0a4      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                ComplianceTestState.DataBufferSize = 2;
 800a716:	4b54      	ldr	r3, [pc, #336]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a718:	2202      	movs	r2, #2
 800a71a:	719a      	strb	r2, [r3, #6]
                break;
 800a71c:	e0a0      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                ComplianceTestState.IsTxConfirmed = true;
 800a71e:	4b52      	ldr	r3, [pc, #328]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a720:	2201      	movs	r2, #1
 800a722:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800a724:	709a      	strb	r2, [r3, #2]
                break;
 800a726:	e09b      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                ComplianceTestState.IsTxConfirmed = false;
 800a728:	4b4f      	ldr	r3, [pc, #316]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800a72e:	2201      	movs	r2, #1
 800a730:	709a      	strb	r2, [r3, #2]
                break;
 800a732:	e095      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800a734:	7b01      	ldrb	r1, [r0, #12]
 800a736:	4b4c      	ldr	r3, [pc, #304]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a738:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	2404      	movs	r4, #4
 800a73e:	7014      	strb	r4, [r2, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800a740:	795b      	ldrb	r3, [r3, #5]
 800a742:	428b      	cmp	r3, r1
 800a744:	bf28      	it	cs
 800a746:	460b      	movcs	r3, r1
 800a748:	2b01      	cmp	r3, #1
 800a74a:	f240 8089 	bls.w	800a860 <LmhpComplianceOnMcpsIndication+0x260>
 800a74e:	1c51      	adds	r1, r2, #1
 800a750:	3b02      	subs	r3, #2
 800a752:	fa51 f183 	uxtab	r1, r1, r3
 800a756:	4613      	mov	r3, r2
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800a758:	f1c2 0c01 	rsb	ip, r2, #1
 800a75c:	6882      	ldr	r2, [r0, #8]
 800a75e:	441a      	add	r2, r3
 800a760:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a764:	3201      	adds	r2, #1
 800a766:	f803 2f01 	strb.w	r2, [r3, #1]!
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800a76a:	428b      	cmp	r3, r1
 800a76c:	d1f6      	bne.n	800a75c <LmhpComplianceOnMcpsIndication+0x15c>
 800a76e:	e077      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    mlmeReq.Type = MLME_LINK_CHECK;
 800a770:	2305      	movs	r3, #5
 800a772:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800a776:	a802      	add	r0, sp, #8
 800a778:	f002 fda0 	bl	800d2bc <LoRaMacMlmeRequest>
                break;
 800a77c:	e070      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800a77e:	483c      	ldr	r0, [pc, #240]	; (800a870 <LmhpComplianceOnMcpsIndication+0x270>)
 800a780:	f008 f926 	bl	80129d0 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800a784:	4b38      	ldr	r3, [pc, #224]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a786:	2200      	movs	r2, #0
 800a788:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800a78a:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800a78c:	2304      	movs	r3, #4
 800a78e:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800a792:	4c36      	ldr	r4, [pc, #216]	; (800a86c <LmhpComplianceOnMcpsIndication+0x26c>)
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800a79c:	a802      	add	r0, sp, #8
 800a79e:	f002 faf5 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	7858      	ldrb	r0, [r3, #1]
 800a7a6:	f003 f86f 	bl	800d888 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	b103      	cbz	r3, 800a7b2 <LmhpComplianceOnMcpsIndication+0x1b2>
                        LmhpComplianceParams->StartPeripherals( );
 800a7b0:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800a7b2:	4b31      	ldr	r3, [pc, #196]	; (800a878 <LmhpComplianceOnMcpsIndication+0x278>)
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d052      	beq.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	2002      	movs	r0, #2
 800a7be:	4798      	blx	r3
                break;
 800a7c0:	e04e      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    if( mcpsIndication->BufferSize == 3 )
 800a7c2:	7b03      	ldrb	r3, [r0, #12]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d008      	beq.n	800a7da <LmhpComplianceOnMcpsIndication+0x1da>
                    else if( mcpsIndication->BufferSize == 7 )
 800a7c8:	2b07      	cmp	r3, #7
 800a7ca:	d010      	beq.n	800a7ee <LmhpComplianceOnMcpsIndication+0x1ee>
                    LoRaMacMlmeRequest( &mlmeReq );
 800a7cc:	a802      	add	r0, sp, #8
 800a7ce:	f002 fd75 	bl	800d2bc <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800a7d2:	4b25      	ldr	r3, [pc, #148]	; (800a868 <LmhpComplianceOnMcpsIndication+0x268>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	709a      	strb	r2, [r3, #2]
                break;
 800a7d8:	e042      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                        mlmeReq.Type = MLME_TXCW;
 800a7da:	2306      	movs	r3, #6
 800a7dc:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800a7e0:	7851      	ldrb	r1, [r2, #1]
 800a7e2:	7893      	ldrb	r3, [r2, #2]
 800a7e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a7e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a7ec:	e7ee      	b.n	800a7cc <LmhpComplianceOnMcpsIndication+0x1cc>
                        mlmeReq.Type = MLME_TXCW_1;
 800a7ee:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800a7f2:	7851      	ldrb	r1, [r2, #1]
 800a7f4:	7893      	ldrb	r3, [r2, #2]
 800a7f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a7fa:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800a7fe:	78d1      	ldrb	r1, [r2, #3]
 800a800:	7913      	ldrb	r3, [r2, #4]
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a808:	7951      	ldrb	r1, [r2, #5]
 800a80a:	430b      	orrs	r3, r1
 800a80c:	2164      	movs	r1, #100	; 0x64
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800a814:	7993      	ldrb	r3, [r2, #6]
 800a816:	f88d 3014 	strb.w	r3, [sp, #20]
 800a81a:	e7d7      	b.n	800a7cc <LmhpComplianceOnMcpsIndication+0x1cc>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 800a81c:	230a      	movs	r3, #10
 800a81e:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800a822:	a802      	add	r0, sp, #8
 800a824:	f002 fd4a 	bl	800d2bc <LoRaMacMlmeRequest>
                break;
 800a828:	e01a      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    mibReq.Type = MIB_DEVICE_CLASS;
 800a82a:	2300      	movs	r3, #0
 800a82c:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800a830:	7853      	ldrb	r3, [r2, #1]
 800a832:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800a836:	a802      	add	r0, sp, #8
 800a838:	f002 faa8 	bl	800cd8c <LoRaMacMibSetRequestConfirm>
                break;
 800a83c:	e010      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800a83e:	230d      	movs	r3, #13
 800a840:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800a844:	7853      	ldrb	r3, [r2, #1]
 800a846:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 800a84a:	a802      	add	r0, sp, #8
 800a84c:	f002 fd36 	bl	800d2bc <LoRaMacMlmeRequest>
                break;
 800a850:	e006      	b.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800a852:	78c3      	ldrb	r3, [r0, #3]
 800a854:	2be0      	cmp	r3, #224	; 0xe0
 800a856:	d103      	bne.n	800a860 <LmhpComplianceOnMcpsIndication+0x260>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800a858:	7b03      	ldrb	r3, [r0, #12]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	f43f aefe 	beq.w	800a65c <LmhpComplianceOnMcpsIndication+0x5c>
}
 800a860:	b00c      	add	sp, #48	; 0x30
 800a862:	bd10      	pop	{r4, pc}
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	200008cc 	.word	0x200008cc
 800a86c:	200008f8 	.word	0x200008f8
 800a870:	200008e0 	.word	0x200008e0
 800a874:	0800a87d 	.word	0x0800a87d
 800a878:	200000cc 	.word	0x200000cc

0800a87c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800a87c:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 800a87e:	f7ff fe6b 	bl	800a558 <LmhpComplianceTxProcess>
}
 800a882:	bd08      	pop	{r3, pc}

0800a884 <LmhpCompliancePackageFactory>:
}
 800a884:	4800      	ldr	r0, [pc, #0]	; (800a888 <LmhpCompliancePackageFactory+0x4>)
 800a886:	4770      	bx	lr
 800a888:	200000cc 	.word	0x200000cc

0800a88c <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800a88c:	2000      	movs	r0, #0
 800a88e:	4770      	bx	lr

0800a890 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	4770      	bx	lr
	...

0800a898 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <UpdateRxSlotIdleState+0x14>)
 800a89a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	bf18      	it	ne
 800a8a2:	2306      	movne	r3, #6
 800a8a4:	4a02      	ldr	r2, [pc, #8]	; (800a8b0 <UpdateRxSlotIdleState+0x18>)
 800a8a6:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800a8aa:	4770      	bx	lr
 800a8ac:	20000e08 	.word	0x20000e08
 800a8b0:	20000900 	.word	0x20000900

0800a8b4 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <StopRetransmission+0x48>)
 800a8b6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a8ba:	f013 0f02 	tst.w	r3, #2
 800a8be:	d004      	beq.n	800a8ca <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	; (800a8fc <StopRetransmission+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800a8c2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d907      	bls.n	800a8da <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <StopRetransmission+0x4c>)
 800a8cc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a8d0:	b11b      	cbz	r3, 800a8da <StopRetransmission+0x26>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800a8d2:	4a0b      	ldr	r2, [pc, #44]	; (800a900 <StopRetransmission+0x4c>)
 800a8d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800a8da:	4b08      	ldr	r3, [pc, #32]	; (800a8fc <StopRetransmission+0x48>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 800a8e2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800a8e6:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a8ea:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a8ee:	f022 0202 	bic.w	r2, r2, #2
 800a8f2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	20000900 	.word	0x20000900
 800a900:	20000e08 	.word	0x20000e08

0800a904 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800a904:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a906:	4b04      	ldr	r3, [pc, #16]	; (800a918 <OnMacProcessNotify+0x14>)
 800a908:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a90c:	b113      	cbz	r3, 800a914 <OnMacProcessNotify+0x10>
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	b103      	cbz	r3, 800a914 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a912:	4798      	blx	r3
    }
}
 800a914:	bd08      	pop	{r3, pc}
 800a916:	bf00      	nop
 800a918:	20000900 	.word	0x20000900

0800a91c <OnRadioRxError>:
{
 800a91c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800a91e:	4a04      	ldr	r2, [pc, #16]	; (800a930 <OnRadioRxError+0x14>)
 800a920:	7813      	ldrb	r3, [r2, #0]
 800a922:	f043 0302 	orr.w	r3, r3, #2
 800a926:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a928:	f7ff ffec 	bl	800a904 <OnMacProcessNotify>
}
 800a92c:	bd08      	pop	{r3, pc}
 800a92e:	bf00      	nop
 800a930:	200008fc 	.word	0x200008fc

0800a934 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800a934:	b500      	push	{lr}
 800a936:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a938:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <GetMaxAppPayloadWithoutFOptsLength+0x30>)
 800a93a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a93e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800a942:	f88d 0009 	strb.w	r0, [sp, #9]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a946:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800a94a:	320d      	adds	r2, #13
 800a94c:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a950:	a902      	add	r1, sp, #8
 800a952:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a956:	f003 ffb0 	bl	800e8ba <RegionGetPhyParam>
}
 800a95a:	b2c0      	uxtb	r0, r0
 800a95c:	b005      	add	sp, #20
 800a95e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a962:	bf00      	nop
 800a964:	20000e08 	.word	0x20000e08

0800a968 <OnAckTimeoutTimerEvent>:
{
 800a968:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a96a:	4c0d      	ldr	r4, [pc, #52]	; (800a9a0 <OnAckTimeoutTimerEvent+0x38>)
 800a96c:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800a970:	f008 f82e 	bl	80129d0 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800a974:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 800a978:	b113      	cbz	r3, 800a980 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800a97a:	2201      	movs	r2, #1
 800a97c:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a980:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <OnAckTimeoutTimerEvent+0x3c>)
 800a982:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a986:	2b02      	cmp	r3, #2
 800a988:	d002      	beq.n	800a990 <OnAckTimeoutTimerEvent+0x28>
    OnMacProcessNotify( );
 800a98a:	f7ff ffbb 	bl	800a904 <OnMacProcessNotify>
}
 800a98e:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a990:	4a03      	ldr	r2, [pc, #12]	; (800a9a0 <OnAckTimeoutTimerEvent+0x38>)
 800a992:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a996:	f043 0310 	orr.w	r3, r3, #16
 800a99a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800a99e:	e7f4      	b.n	800a98a <OnAckTimeoutTimerEvent+0x22>
 800a9a0:	20000900 	.word	0x20000900
 800a9a4:	20000e08 	.word	0x20000e08

0800a9a8 <PrepareRxDoneAbort>:
{
 800a9a8:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <PrepareRxDoneAbort+0x34>)
 800a9ac:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a9b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9b4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800a9b8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800a9bc:	b94b      	cbnz	r3, 800a9d2 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a9be:	4a07      	ldr	r2, [pc, #28]	; (800a9dc <PrepareRxDoneAbort+0x34>)
 800a9c0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a9c4:	f043 0312 	orr.w	r3, r3, #18
 800a9c8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800a9cc:	f7ff ff64 	bl	800a898 <UpdateRxSlotIdleState>
}
 800a9d0:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	f7ff ffc8 	bl	800a968 <OnAckTimeoutTimerEvent>
 800a9d8:	e7f1      	b.n	800a9be <PrepareRxDoneAbort+0x16>
 800a9da:	bf00      	nop
 800a9dc:	20000900 	.word	0x20000900

0800a9e0 <ProcessMacCommands>:
{
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	b08f      	sub	sp, #60	; 0x3c
 800a9e6:	469a      	mov	sl, r3
    uint8_t status = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a9ee:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 800a9f2:	4291      	cmp	r1, r2
 800a9f4:	f080 82b9 	bcs.w	800af6a <ProcessMacCommands+0x58a>
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4616      	mov	r6, r2
    bool adrBlockFound = false;
 800a9fe:	4698      	mov	r8, r3
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800aa00:	4fbe      	ldr	r7, [pc, #760]	; (800acfc <ProcessMacCommands+0x31c>)
 800aa02:	e027      	b.n	800aa54 <ProcessMacCommands+0x74>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800aa04:	2005      	movs	r0, #5
 800aa06:	f003 fa2f 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800aa0a:	b908      	cbnz	r0, 800aa10 <ProcessMacCommands+0x30>
        switch( payload[macIndex++] )
 800aa0c:	464c      	mov	r4, r9
 800aa0e:	e01e      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800aa10:	2105      	movs	r1, #5
 800aa12:	2000      	movs	r0, #0
 800aa14:	f003 f9de 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800aa18:	1ca3      	adds	r3, r4, #2
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f815 2009 	ldrb.w	r2, [r5, r9]
 800aa20:	f887 2450 	strb.w	r2, [r7, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800aa24:	3403      	adds	r4, #3
 800aa26:	b2e4      	uxtb	r4, r4
 800aa28:	5ceb      	ldrb	r3, [r5, r3]
 800aa2a:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
 800aa2e:	e00e      	b.n	800aa4e <ProcessMacCommands+0x6e>
                int8_t linkAdrDatarate = DR_0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	f88d 300e 	strb.w	r3, [sp, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800aa36:	f88d 300f 	strb.w	r3, [sp, #15]
                uint8_t linkAdrNbRep = 0;
 800aa3a:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
 800aa3e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800aa42:	f1b8 0f00 	cmp.w	r8, #0
 800aa46:	d03d      	beq.n	800aac4 <ProcessMacCommands+0xe4>
                break;
 800aa48:	464c      	mov	r4, r9
 800aa4a:	f04f 0801 	mov.w	r8, #1
    while( macIndex < commandsSize )
 800aa4e:	42a6      	cmp	r6, r4
 800aa50:	f240 828b 	bls.w	800af6a <ProcessMacCommands+0x58a>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800aa54:	5d28      	ldrb	r0, [r5, r4]
 800aa56:	f003 f921 	bl	800dc9c <LoRaMacCommandsGetCmdSize>
 800aa5a:	4420      	add	r0, r4
 800aa5c:	42b0      	cmp	r0, r6
 800aa5e:	f300 8284 	bgt.w	800af6a <ProcessMacCommands+0x58a>
        switch( payload[macIndex++] )
 800aa62:	f104 0901 	add.w	r9, r4, #1
 800aa66:	fa5f f989 	uxtb.w	r9, r9
 800aa6a:	5d2b      	ldrb	r3, [r5, r4]
 800aa6c:	3b02      	subs	r3, #2
 800aa6e:	2b11      	cmp	r3, #17
 800aa70:	f200 827b 	bhi.w	800af6a <ProcessMacCommands+0x58a>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <ProcessMacCommands+0x9c>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aa05 	.word	0x0800aa05
 800aa80:	0800aa31 	.word	0x0800aa31
 800aa84:	0800ab83 	.word	0x0800ab83
 800aa88:	0800abab 	.word	0x0800abab
 800aa8c:	0800ac31 	.word	0x0800ac31
 800aa90:	0800ac5f 	.word	0x0800ac5f
 800aa94:	0800accd 	.word	0x0800accd
 800aa98:	0800ad09 	.word	0x0800ad09
 800aa9c:	0800ad93 	.word	0x0800ad93
 800aaa0:	0800af6b 	.word	0x0800af6b
 800aaa4:	0800af6b 	.word	0x0800af6b
 800aaa8:	0800adef 	.word	0x0800adef
 800aaac:	0800af6b 	.word	0x0800af6b
 800aab0:	0800af6b 	.word	0x0800af6b
 800aab4:	0800ae91 	.word	0x0800ae91
 800aab8:	0800aebd 	.word	0x0800aebd
 800aabc:	0800aefd 	.word	0x0800aefd
 800aac0:	0800af35 	.word	0x0800af35
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800aac4:	f109 33ff 	add.w	r3, r9, #4294967295
 800aac8:	442b      	add	r3, r5
 800aaca:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800aacc:	1b33      	subs	r3, r6, r4
 800aace:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800aad2:	488b      	ldr	r0, [pc, #556]	; (800ad00 <ProcessMacCommands+0x320>)
 800aad4:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 800aad8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aadc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800aae0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800aae4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800aae8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aaec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800aaf0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800aaf4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800aaf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800aafc:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 800ab00:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ab02:	ab05      	add	r3, sp, #20
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	ab04      	add	r3, sp, #16
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	f10d 030f 	add.w	r3, sp, #15
 800ab0e:	f10d 020e 	add.w	r2, sp, #14
 800ab12:	a907      	add	r1, sp, #28
 800ab14:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800ab18:	f003 ff2d 	bl	800e976 <RegionLinkAdrReq>
 800ab1c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800ab20:	f000 0007 	and.w	r0, r0, #7
 800ab24:	2807      	cmp	r0, #7
 800ab26:	d01e      	beq.n	800ab66 <ProcessMacCommands+0x186>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ab28:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d916      	bls.n	800ab5e <ProcessMacCommands+0x17e>
 800ab30:	f04f 0800 	mov.w	r8, #0
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ab34:	f04f 0b01 	mov.w	fp, #1
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ab38:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800ad04 <ProcessMacCommands+0x324>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ab3c:	465a      	mov	r2, fp
 800ab3e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800ab42:	2003      	movs	r0, #3
 800ab44:	f002 ff94 	bl	800da70 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ab48:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ab4c:	f108 0801 	add.w	r8, r8, #1
 800ab50:	fba9 2103 	umull	r2, r1, r9, r3
 800ab54:	fa5f f288 	uxtb.w	r2, r8
 800ab58:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 800ab5c:	d3ee      	bcc.n	800ab3c <ProcessMacCommands+0x15c>
                    macIndex += linkAdrNbBytesParsed - 1;
 800ab5e:	4423      	add	r3, r4
 800ab60:	fa5f f983 	uxtb.w	r9, r3
 800ab64:	e770      	b.n	800aa48 <ProcessMacCommands+0x68>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ab66:	4b66      	ldr	r3, [pc, #408]	; (800ad00 <ProcessMacCommands+0x320>)
 800ab68:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ab6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ab70:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ab74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ab78:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800ab7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800ab80:	e7d2      	b.n	800ab28 <ProcessMacCommands+0x148>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ab82:	3402      	adds	r4, #2
 800ab84:	b2e4      	uxtb	r4, r4
 800ab86:	f815 3009 	ldrb.w	r3, [r5, r9]
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	495c      	ldr	r1, [pc, #368]	; (800ad00 <ProcessMacCommands+0x320>)
 800ab90:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ab94:	2201      	movs	r2, #1
 800ab96:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9a:	f8a1 311e 	strh.w	r3, [r1, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ab9e:	2200      	movs	r2, #0
 800aba0:	a90b      	add	r1, sp, #44	; 0x2c
 800aba2:	2004      	movs	r0, #4
 800aba4:	f002 ff64 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800aba8:	e751      	b.n	800aa4e <ProcessMacCommands+0x6e>
                status = 0x07;
 800abaa:	2307      	movs	r3, #7
 800abac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800abb0:	f815 3009 	ldrb.w	r3, [r5, r9]
 800abb4:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800abb8:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800abbc:	f003 030f 	and.w	r3, r3, #15
 800abc0:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800abc4:	1ca3      	adds	r3, r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800abca:	1d23      	adds	r3, r4, #4
 800abcc:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800abce:	1ce2      	adds	r2, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800abd0:	b2d2      	uxtb	r2, r2
 800abd2:	5caa      	ldrb	r2, [r5, r2]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800abd4:	3405      	adds	r4, #5
 800abd6:	b2e4      	uxtb	r4, r4
 800abd8:	5ceb      	ldrb	r3, [r5, r3]
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800abe0:	430b      	orrs	r3, r1
                rxParamSetupReq.Frequency *= 100;
 800abe2:	2264      	movs	r2, #100	; 0x64
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800abea:	a907      	add	r1, sp, #28
 800abec:	4b44      	ldr	r3, [pc, #272]	; (800ad00 <ProcessMacCommands+0x320>)
 800abee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800abf2:	f003 fed2 	bl	800e99a <RegionRxParamSetupReq>
 800abf6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800abfa:	f000 0307 	and.w	r3, r0, #7
 800abfe:	2b07      	cmp	r3, #7
 800ac00:	d007      	beq.n	800ac12 <ProcessMacCommands+0x232>
                macCmdPayload[0] = status;
 800ac02:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800ac06:	2201      	movs	r2, #1
 800ac08:	a90b      	add	r1, sp, #44	; 0x2c
 800ac0a:	2005      	movs	r0, #5
 800ac0c:	f002 ff30 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800ac10:	e71d      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ac12:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800ac16:	4b3a      	ldr	r3, [pc, #232]	; (800ad00 <ProcessMacCommands+0x320>)
 800ac18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800ac1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ac20:	9a08      	ldr	r2, [sp, #32]
 800ac22:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ac24:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ac26:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800ac2a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800ac2e:	e7e8      	b.n	800ac02 <ProcessMacCommands+0x222>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ac30:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800ac34:	b17b      	cbz	r3, 800ac56 <ProcessMacCommands+0x276>
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	b17b      	cbz	r3, 800ac5a <ProcessMacCommands+0x27a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ac3a:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800ac3c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ac40:	f00a 033f 	and.w	r3, sl, #63	; 0x3f
 800ac44:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ac48:	2202      	movs	r2, #2
 800ac4a:	a90b      	add	r1, sp, #44	; 0x2c
 800ac4c:	2006      	movs	r0, #6
 800ac4e:	f002 ff0f 	bl	800da70 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800ac52:	464c      	mov	r4, r9
                break;
 800ac54:	e6fb      	b.n	800aa4e <ProcessMacCommands+0x6e>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800ac56:	20ff      	movs	r0, #255	; 0xff
 800ac58:	e7f0      	b.n	800ac3c <ProcessMacCommands+0x25c>
 800ac5a:	20ff      	movs	r0, #255	; 0xff
 800ac5c:	e7ee      	b.n	800ac3c <ProcessMacCommands+0x25c>
                status = 0x03;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800ac64:	f815 3009 	ldrb.w	r3, [r5, r9]
 800ac68:	f88d 3018 	strb.w	r3, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800ac6c:	ab07      	add	r3, sp, #28
 800ac6e:	9305      	str	r3, [sp, #20]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ac70:	1d62      	adds	r2, r4, #5
 800ac72:	b2d2      	uxtb	r2, r2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ac74:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	5ce9      	ldrb	r1, [r5, r3]
 800ac7a:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	5ceb      	ldrb	r3, [r5, r3]
 800ac80:	041b      	lsls	r3, r3, #16
 800ac82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
 800ac86:	1ca1      	adds	r1, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ac88:	b2c9      	uxtb	r1, r1
 800ac8a:	5c69      	ldrb	r1, [r5, r1]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ac8c:	430b      	orrs	r3, r1
                chParam.Frequency *= 100;
 800ac8e:	2164      	movs	r1, #100	; 0x64
 800ac90:	fb01 f303 	mul.w	r3, r1, r3
 800ac94:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800ac9a:	3406      	adds	r4, #6
 800ac9c:	b2e4      	uxtb	r4, r4
 800ac9e:	5cab      	ldrb	r3, [r5, r2]
 800aca0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800aca4:	a905      	add	r1, sp, #20
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <ProcessMacCommands+0x320>)
 800aca8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800acac:	f003 fe7e 	bl	800e9ac <RegionNewChannelReq>
 800acb0:	b2c3      	uxtb	r3, r0
 800acb2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f6ff aec9 	blt.w	800aa4e <ProcessMacCommands+0x6e>
                    macCmdPayload[0] = status;
 800acbc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800acc0:	2201      	movs	r2, #1
 800acc2:	a90b      	add	r1, sp, #44	; 0x2c
 800acc4:	2007      	movs	r0, #7
 800acc6:	f002 fed3 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800acca:	e6c0      	b.n	800aa4e <ProcessMacCommands+0x6e>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800accc:	3402      	adds	r4, #2
 800acce:	b2e4      	uxtb	r4, r4
 800acd0:	f815 3009 	ldrb.w	r3, [r5, r9]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	2b01      	cmp	r3, #1
 800acda:	bf38      	it	cc
 800acdc:	2301      	movcc	r3, #1
 800acde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ace2:	fb02 f303 	mul.w	r3, r2, r3
 800ace6:	4a06      	ldr	r2, [pc, #24]	; (800ad00 <ProcessMacCommands+0x320>)
 800ace8:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800acea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800acee:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800acf0:	2200      	movs	r2, #0
 800acf2:	a90b      	add	r1, sp, #44	; 0x2c
 800acf4:	2008      	movs	r0, #8
 800acf6:	f002 febb 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800acfa:	e6a8      	b.n	800aa4e <ProcessMacCommands+0x6e>
 800acfc:	20000900 	.word	0x20000900
 800ad00:	20000e08 	.word	0x20000e08
 800ad04:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800ad08:	3402      	adds	r4, #2
 800ad0a:	b2e4      	uxtb	r4, r4
 800ad0c:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800ad10:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800ad14:	f88d 2011 	strb.w	r2, [sp, #17]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800ad18:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800ad1c:	f88d 2010 	strb.w	r2, [sp, #16]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800ad20:	f003 030f 	and.w	r3, r3, #15
 800ad24:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800ad28:	a904      	add	r1, sp, #16
 800ad2a:	4b91      	ldr	r3, [pc, #580]	; (800af70 <ProcessMacCommands+0x590>)
 800ad2c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ad30:	f003 fe45 	bl	800e9be <RegionTxParamSetupReq>
 800ad34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ad38:	f43f ae89 	beq.w	800aa4e <ProcessMacCommands+0x6e>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ad3c:	f89d b010 	ldrb.w	fp, [sp, #16]
 800ad40:	f8df 922c 	ldr.w	r9, [pc, #556]	; 800af70 <ProcessMacCommands+0x590>
 800ad44:	f889 b07c 	strb.w	fp, [r9, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ad48:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800ad4c:	f889 307d 	strb.w	r3, [r9, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ad50:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800ad54:	4a87      	ldr	r2, [pc, #540]	; (800af74 <ProcessMacCommands+0x594>)
 800ad56:	5cd0      	ldrb	r0, [r2, r3]
 800ad58:	f7f5 ff9a 	bl	8000c90 <__aeabi_ui2f>
 800ad5c:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ad60:	2302      	movs	r3, #2
 800ad62:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ad66:	f88d b01e 	strb.w	fp, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ad6a:	a907      	add	r1, sp, #28
 800ad6c:	f899 0048 	ldrb.w	r0, [r9, #72]	; 0x48
 800ad70:	f003 fda3 	bl	800e8ba <RegionGetPhyParam>
 800ad74:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ad76:	b240      	sxtb	r0, r0
 800ad78:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800ad7c:	4298      	cmp	r0, r3
 800ad7e:	bfb8      	it	lt
 800ad80:	4618      	movlt	r0, r3
 800ad82:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ad86:	2200      	movs	r2, #0
 800ad88:	a90b      	add	r1, sp, #44	; 0x2c
 800ad8a:	2009      	movs	r0, #9
 800ad8c:	f002 fe70 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800ad90:	e65d      	b.n	800aa4e <ProcessMacCommands+0x6e>
                status = 0x03;
 800ad92:	2303      	movs	r3, #3
 800ad94:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800ad98:	f815 3009 	ldrb.w	r3, [r5, r9]
 800ad9c:	f88d 301c 	strb.w	r3, [sp, #28]
 800ada0:	1ca3      	adds	r3, r4, #2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ada6:	1d23      	adds	r3, r4, #4
 800ada8:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800adaa:	1ce2      	adds	r2, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	5caa      	ldrb	r2, [r5, r2]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800adb0:	3405      	adds	r4, #5
 800adb2:	b2e4      	uxtb	r4, r4
 800adb4:	5ceb      	ldrb	r3, [r5, r3]
 800adb6:	041b      	lsls	r3, r3, #16
 800adb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800adbc:	430b      	orrs	r3, r1
                dlChannelReq.Rx1Frequency *= 100;
 800adbe:	2264      	movs	r2, #100	; 0x64
 800adc0:	fb02 f303 	mul.w	r3, r2, r3
 800adc4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800adc6:	a907      	add	r1, sp, #28
 800adc8:	4b69      	ldr	r3, [pc, #420]	; (800af70 <ProcessMacCommands+0x590>)
 800adca:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800adce:	f003 fdff 	bl	800e9d0 <RegionDlChannelReq>
 800add2:	b2c3      	uxtb	r3, r0
 800add4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800add8:	2800      	cmp	r0, #0
 800adda:	f6ff ae38 	blt.w	800aa4e <ProcessMacCommands+0x6e>
                    macCmdPayload[0] = status;
 800adde:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ade2:	2201      	movs	r2, #1
 800ade4:	a90b      	add	r1, sp, #44	; 0x2c
 800ade6:	200a      	movs	r0, #10
 800ade8:	f002 fe42 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800adec:	e62f      	b.n	800aa4e <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800adee:	200a      	movs	r0, #10
 800adf0:	f003 f83a 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800adf4:	b908      	cbnz	r0, 800adfa <ProcessMacCommands+0x41a>
        switch( payload[macIndex++] )
 800adf6:	464c      	mov	r4, r9
 800adf8:	e629      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800adfa:	210a      	movs	r1, #10
 800adfc:	2000      	movs	r0, #0
 800adfe:	f002 ffe9 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 800ae02:	2300      	movs	r3, #0
 800ae04:	f8ad 301a 	strh.w	r3, [sp, #26]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ae08:	1d62      	adds	r2, r4, #5
 800ae0a:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ae0c:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	5ce9      	ldrb	r1, [r5, r3]
 800ae12:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	5ceb      	ldrb	r3, [r5, r3]
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ae1e:	f815 1009 	ldrb.w	r1, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ae22:	ea43 0901 	orr.w	r9, r3, r1
 800ae26:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	5ceb      	ldrb	r3, [r5, r3]
 800ae2c:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ae30:	3406      	adds	r4, #6
 800ae32:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ae34:	5cab      	ldrb	r3, [r5, r2]
 800ae36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	121b      	asrs	r3, r3, #8
 800ae40:	f8ad 3018 	strh.w	r3, [sp, #24]
                    sysTimeCurrent = SysTimeGet( );
 800ae44:	f10d 0b1c 	add.w	fp, sp, #28
 800ae48:	4658      	mov	r0, fp
 800ae4a:	f007 fa35 	bl	80122b8 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ae4e:	4b4a      	ldr	r3, [pc, #296]	; (800af78 <ProcessMacCommands+0x598>)
 800ae50:	444b      	add	r3, r9
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800ae5e:	f10d 0914 	add.w	r9, sp, #20
 800ae62:	e899 0006 	ldmia.w	r9, {r1, r2}
 800ae66:	a80c      	add	r0, sp, #48	; 0x30
 800ae68:	f007 f9e2 	bl	8012230 <SysTimeSub>
 800ae6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae72:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800ae76:	4648      	mov	r0, r9
 800ae78:	f007 f9bf 	bl	80121fa <SysTimeAdd>
                    SysTimeSet( sysTime );
 800ae7c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ae80:	f007 f9f2 	bl	8012268 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ae84:	f002 fdde 	bl	800da44 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	f887 3430 	strb.w	r3, [r7, #1072]	; 0x430
 800ae8e:	e5de      	b.n	800aa4e <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ae90:	200d      	movs	r0, #13
 800ae92:	f002 ffe9 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800ae96:	b908      	cbnz	r0, 800ae9c <ProcessMacCommands+0x4bc>
        switch( payload[macIndex++] )
 800ae98:	464c      	mov	r4, r9
 800ae9a:	e5d8      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ae9c:	210d      	movs	r1, #13
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f002 ff98 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800aea4:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d801      	bhi.n	800aeb4 <ProcessMacCommands+0x4d4>
        switch( payload[macIndex++] )
 800aeb0:	464c      	mov	r4, r9
 800aeb2:	e5cc      	b.n	800aa4e <ProcessMacCommands+0x6e>
                        LoRaMacClassBPingSlotInfoAns( );
 800aeb4:	f002 fdc2 	bl	800da3c <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800aeb8:	464c      	mov	r4, r9
 800aeba:	e5c8      	b.n	800aa4e <ProcessMacCommands+0x6e>
                frequency = ( uint32_t )payload[macIndex++];
 800aebc:	f815 1009 	ldrb.w	r1, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800aec0:	1d22      	adds	r2, r4, #4
 800aec2:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 800aec4:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	5ce8      	ldrb	r0, [r5, r3]
 800aeca:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	5ceb      	ldrb	r3, [r5, r3]
 800aed0:	041b      	lsls	r3, r3, #16
 800aed2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800aed6:	430b      	orrs	r3, r1
                datarate = payload[macIndex++] & 0x0F;
 800aed8:	3405      	adds	r4, #5
 800aeda:	b2e4      	uxtb	r4, r4
 800aedc:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800aede:	2164      	movs	r1, #100	; 0x64
 800aee0:	fb03 f101 	mul.w	r1, r3, r1
 800aee4:	f000 000f 	and.w	r0, r0, #15
 800aee8:	f002 fda9 	bl	800da3e <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800aeec:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800aef0:	2201      	movs	r2, #1
 800aef2:	a90b      	add	r1, sp, #44	; 0x2c
 800aef4:	2011      	movs	r0, #17
 800aef6:	f002 fdbb 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800aefa:	e5a8      	b.n	800aa4e <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800aefc:	200e      	movs	r0, #14
 800aefe:	f002 ffb3 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800af02:	b908      	cbnz	r0, 800af08 <ProcessMacCommands+0x528>
        switch( payload[macIndex++] )
 800af04:	464c      	mov	r4, r9
 800af06:	e5a2      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800af08:	210e      	movs	r1, #14
 800af0a:	2000      	movs	r0, #0
 800af0c:	f002 ff62 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800af10:	1ce3      	adds	r3, r4, #3
 800af12:	b2db      	uxtb	r3, r3
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800af14:	1ca2      	adds	r2, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	f815 c002 	ldrb.w	ip, [r5, r2]
 800af1c:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 800af20:	3404      	adds	r4, #4
 800af22:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800af24:	4a15      	ldr	r2, [pc, #84]	; (800af7c <ProcessMacCommands+0x59c>)
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	5ce9      	ldrb	r1, [r5, r3]
 800af2a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800af2e:	f002 fd88 	bl	800da42 <LoRaMacClassBBeaconTimingAns>
 800af32:	e58c      	b.n	800aa4e <ProcessMacCommands+0x6e>
                    frequency = ( uint32_t )payload[macIndex++];
 800af34:	f815 1009 	ldrb.w	r1, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800af38:	1ce3      	adds	r3, r4, #3
 800af3a:	b2db      	uxtb	r3, r3
                    frequency = ( uint32_t )payload[macIndex++];
 800af3c:	1ca2      	adds	r2, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	5caa      	ldrb	r2, [r5, r2]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800af42:	3404      	adds	r4, #4
 800af44:	b2e4      	uxtb	r4, r4
 800af46:	5ceb      	ldrb	r3, [r5, r3]
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af4e:	430b      	orrs	r3, r1
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800af50:	2064      	movs	r0, #100	; 0x64
 800af52:	fb03 f000 	mul.w	r0, r3, r0
 800af56:	f002 fd76 	bl	800da46 <LoRaMacClassBBeaconFreqReq>
 800af5a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800af5e:	2201      	movs	r2, #1
 800af60:	a90b      	add	r1, sp, #44	; 0x2c
 800af62:	2013      	movs	r0, #19
 800af64:	f002 fd84 	bl	800da70 <LoRaMacCommandsAddCmd>
                break;
 800af68:	e571      	b.n	800aa4e <ProcessMacCommands+0x6e>
}
 800af6a:	b00f      	add	sp, #60	; 0x3c
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	20000e08 	.word	0x20000e08
 800af74:	08013c98 	.word	0x08013c98
 800af78:	12d53d80 	.word	0x12d53d80
 800af7c:	20001570 	.word	0x20001570

0800af80 <HandleRadioRxErrorTimeout>:
{
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	4605      	mov	r5, r0
 800af84:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800af86:	4b3a      	ldr	r3, [pc, #232]	; (800b070 <HandleRadioRxErrorTimeout+0xf0>)
 800af88:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d002      	beq.n	800af96 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800af90:	4b38      	ldr	r3, [pc, #224]	; (800b074 <HandleRadioRxErrorTimeout+0xf4>)
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800af96:	f002 fd40 	bl	800da1a <LoRaMacClassBIsBeaconExpected>
 800af9a:	4606      	mov	r6, r0
 800af9c:	bb40      	cbnz	r0, 800aff0 <HandleRadioRxErrorTimeout+0x70>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800af9e:	4b34      	ldr	r3, [pc, #208]	; (800b070 <HandleRadioRxErrorTimeout+0xf0>)
 800afa0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d031      	beq.n	800b00c <HandleRadioRxErrorTimeout+0x8c>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800afa8:	4b33      	ldr	r3, [pc, #204]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800afaa:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d146      	bne.n	800b040 <HandleRadioRxErrorTimeout+0xc0>
            if( MacCtx.NodeAckRequested == true )
 800afb2:	4b31      	ldr	r3, [pc, #196]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800afb4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800afb8:	b113      	cbz	r3, 800afc0 <HandleRadioRxErrorTimeout+0x40>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800afba:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800afbc:	f883 5435 	strb.w	r5, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800afc0:	4628      	mov	r0, r5
 800afc2:	f002 ff2f 	bl	800de24 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800afc6:	4b2a      	ldr	r3, [pc, #168]	; (800b070 <HandleRadioRxErrorTimeout+0xf0>)
 800afc8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800afca:	f007 fcc5 	bl	8012958 <UTIL_TIMER_GetElapsedTime>
 800afce:	4b2a      	ldr	r3, [pc, #168]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800afd0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800afd4:	4298      	cmp	r0, r3
 800afd6:	d316      	bcc.n	800b006 <HandleRadioRxErrorTimeout+0x86>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800afd8:	4c27      	ldr	r4, [pc, #156]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800afda:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800afde:	f007 fcf7 	bl	80129d0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800afe2:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 800afe6:	f043 0310 	orr.w	r3, r3, #16
 800afea:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 800afee:	e00a      	b.n	800b006 <HandleRadioRxErrorTimeout+0x86>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800aff0:	2002      	movs	r0, #2
 800aff2:	f002 fd08 	bl	800da06 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800aff6:	2000      	movs	r0, #0
 800aff8:	f002 fd0a 	bl	800da10 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800affc:	4b1c      	ldr	r3, [pc, #112]	; (800b070 <HandleRadioRxErrorTimeout+0xf0>)
 800affe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b002:	2b01      	cmp	r3, #1
 800b004:	d002      	beq.n	800b00c <HandleRadioRxErrorTimeout+0x8c>
    UpdateRxSlotIdleState( );
 800b006:	f7ff fc47 	bl	800a898 <UpdateRxSlotIdleState>
}
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b00c:	f002 fd07 	bl	800da1e <LoRaMacClassBIsPingExpected>
 800b010:	b928      	cbnz	r0, 800b01e <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b012:	f002 fd06 	bl	800da22 <LoRaMacClassBIsMulticastExpected>
 800b016:	b960      	cbnz	r0, 800b032 <HandleRadioRxErrorTimeout+0xb2>
    if( classBRx == false )
 800b018:	2e00      	cmp	r6, #0
 800b01a:	d1f4      	bne.n	800b006 <HandleRadioRxErrorTimeout+0x86>
 800b01c:	e7c4      	b.n	800afa8 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b01e:	2000      	movs	r0, #0
 800b020:	f002 fcf2 	bl	800da08 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b024:	2000      	movs	r0, #0
 800b026:	f002 fcf4 	bl	800da12 <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b02a:	f002 fcfa 	bl	800da22 <LoRaMacClassBIsMulticastExpected>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0e9      	beq.n	800b006 <HandleRadioRxErrorTimeout+0x86>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b032:	2000      	movs	r0, #0
 800b034:	f002 fce9 	bl	800da0a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b038:	2000      	movs	r0, #0
 800b03a:	f002 fceb 	bl	800da14 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800b03e:	e7e2      	b.n	800b006 <HandleRadioRxErrorTimeout+0x86>
            if( MacCtx.NodeAckRequested == true )
 800b040:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800b042:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b046:	b113      	cbz	r3, 800b04e <HandleRadioRxErrorTimeout+0xce>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b048:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800b04a:	f883 4435 	strb.w	r4, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b04e:	4620      	mov	r0, r4
 800b050:	f002 fee8 	bl	800de24 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <HandleRadioRxErrorTimeout+0xf0>)
 800b056:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d0d3      	beq.n	800b006 <HandleRadioRxErrorTimeout+0x86>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b05e:	4a06      	ldr	r2, [pc, #24]	; (800b078 <HandleRadioRxErrorTimeout+0xf8>)
 800b060:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b064:	f043 0310 	orr.w	r3, r3, #16
 800b068:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800b06c:	e7cb      	b.n	800b006 <HandleRadioRxErrorTimeout+0x86>
 800b06e:	bf00      	nop
 800b070:	20000e08 	.word	0x20000e08
 800b074:	08013dd0 	.word	0x08013dd0
 800b078:	20000900 	.word	0x20000900

0800b07c <ScheduleTx>:
{
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	b092      	sub	sp, #72	; 0x48
 800b082:	4604      	mov	r4, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b084:	f002 fcc9 	bl	800da1a <LoRaMacClassBIsBeaconExpected>
 800b088:	2800      	cmp	r0, #0
 800b08a:	f040 8199 	bne.w	800b3c0 <ScheduleTx+0x344>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b08e:	4bb4      	ldr	r3, [pc, #720]	; (800b360 <ScheduleTx+0x2e4>)
 800b090:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b094:	2b01      	cmp	r3, #1
 800b096:	d00d      	beq.n	800b0b4 <ScheduleTx+0x38>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b098:	4bb1      	ldr	r3, [pc, #708]	; (800b360 <ScheduleTx+0x2e4>)
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	b1ab      	cbz	r3, 800b0ca <ScheduleTx+0x4e>
    switch( MacCtx.TxMsg.Type )
 800b09e:	4bb1      	ldr	r3, [pc, #708]	; (800b364 <ScheduleTx+0x2e8>)
 800b0a0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b0a4:	b1e3      	cbz	r3, 800b0e0 <ScheduleTx+0x64>
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	f000 8082 	beq.w	800b1b0 <ScheduleTx+0x134>
 800b0ac:	2003      	movs	r0, #3
}
 800b0ae:	b012      	add	sp, #72	; 0x48
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b0b4:	f002 fcb3 	bl	800da1e <LoRaMacClassBIsPingExpected>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f040 8183 	bne.w	800b3c4 <ScheduleTx+0x348>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b0be:	f002 fcb0 	bl	800da22 <LoRaMacClassBIsMulticastExpected>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0e8      	beq.n	800b098 <ScheduleTx+0x1c>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b0c6:	200f      	movs	r0, #15
    if( status != LORAMAC_STATUS_OK )
 800b0c8:	e7f1      	b.n	800b0ae <ScheduleTx+0x32>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b0ca:	4aa5      	ldr	r2, [pc, #660]	; (800b360 <ScheduleTx+0x2e4>)
 800b0cc:	f8b2 311e 	ldrh.w	r3, [r2, #286]	; 0x11e
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	49a4      	ldr	r1, [pc, #656]	; (800b364 <ScheduleTx+0x2e8>)
 800b0d4:	f8d1 1414 	ldr.w	r1, [r1, #1044]	; 0x414
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0de:	e7de      	b.n	800b09e <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b0e0:	48a1      	ldr	r0, [pc, #644]	; (800b368 <ScheduleTx+0x2ec>)
 800b0e2:	f003 fb41 	bl	800e768 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f040 8168 	bne.w	800b3bc <ScheduleTx+0x340>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b0ec:	4b9d      	ldr	r3, [pc, #628]	; (800b364 <ScheduleTx+0x2e8>)
 800b0ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b0f2:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800b364 <ScheduleTx+0x2e8>
 800b0f6:	f8a8 3000 	strh.w	r3, [r8]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b0fa:	4d99      	ldr	r5, [pc, #612]	; (800b360 <ScheduleTx+0x2e4>)
 800b0fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b0fe:	930a      	str	r3, [sp, #40]	; 0x28
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b100:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800b104:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b108:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800b10c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b110:	af10      	add	r7, sp, #64	; 0x40
 800b112:	4638      	mov	r0, r7
 800b114:	f007 f8f6 	bl	8012304 <SysTimeGetMcuTime>
 800b118:	ae02      	add	r6, sp, #8
 800b11a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800b124:	e897 0006 	ldmia.w	r7, {r1, r2}
 800b128:	4630      	mov	r0, r6
 800b12a:	f007 f881 	bl	8012230 <SysTimeSub>
 800b12e:	ab0d      	add	r3, sp, #52	; 0x34
 800b130:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b134:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b138:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b13a:	930b      	str	r3, [sp, #44]	; 0x2c
    nextChan.LastTxIsJoinRequest = false;
 800b13c:	2300      	movs	r3, #0
 800b13e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    nextChan.Joined = true;
 800b142:	2301      	movs	r3, #1
 800b144:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b148:	f8b8 3000 	ldrh.w	r3, [r8]
 800b14c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b150:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 800b154:	b92b      	cbnz	r3, 800b162 <ScheduleTx+0xe6>
        nextChan.LastTxIsJoinRequest = true;
 800b156:	2301      	movs	r3, #1
 800b158:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        nextChan.Joined = false;
 800b15c:	2300      	movs	r3, #0
 800b15e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b162:	4a80      	ldr	r2, [pc, #512]	; (800b364 <ScheduleTx+0x2e8>)
 800b164:	487e      	ldr	r0, [pc, #504]	; (800b360 <ScheduleTx+0x2e4>)
 800b166:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800b170:	f202 4211 	addw	r2, r2, #1041	; 0x411
 800b174:	a90a      	add	r1, sp, #40	; 0x28
 800b176:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b17a:	f003 fc3d 	bl	800e9f8 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800b17e:	b308      	cbz	r0, 800b1c4 <ScheduleTx+0x148>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800b180:	280b      	cmp	r0, #11
 800b182:	d194      	bne.n	800b0ae <ScheduleTx+0x32>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b184:	4b77      	ldr	r3, [pc, #476]	; (800b364 <ScheduleTx+0x2e8>)
 800b186:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800b18a:	b1d9      	cbz	r1, 800b1c4 <ScheduleTx+0x148>
                if( allowDelayedTx == true )
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	d08e      	beq.n	800b0ae <ScheduleTx+0x32>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b190:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b194:	f042 0220 	orr.w	r2, r2, #32
 800b198:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b19c:	f503 745a 	add.w	r4, r3, #872	; 0x368
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f007 fcb9 	bl	8012b18 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f007 fc70 	bl	8012a8c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e77e      	b.n	800b0ae <ScheduleTx+0x32>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800b1b0:	486d      	ldr	r0, [pc, #436]	; (800b368 <ScheduleTx+0x2ec>)
 800b1b2:	f003 fb0f 	bl	800e7d4 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f040 8100 	bne.w	800b3bc <ScheduleTx+0x340>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b1bc:	4b69      	ldr	r3, [pc, #420]	; (800b364 <ScheduleTx+0x2e8>)
 800b1be:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
            break;
 800b1c2:	e796      	b.n	800b0f2 <ScheduleTx+0x76>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b1c4:	4c66      	ldr	r4, [pc, #408]	; (800b360 <ScheduleTx+0x2e4>)
 800b1c6:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800b1ca:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800b1ce:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800b1d2:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f003 fc23 	bl	800ea22 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b1dc:	4d61      	ldr	r5, [pc, #388]	; (800b364 <ScheduleTx+0x2e8>)
 800b1de:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b1e6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b1ea:	b241      	sxtb	r1, r0
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f003 fb9f 	bl	800e930 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b1f2:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b1fa:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b1fe:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800b202:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b206:	f003 fb93 	bl	800e930 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b20a:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800b20e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b210:	440b      	add	r3, r1
 800b212:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b216:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800b21a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b21c:	4413      	add	r3, r2
 800b21e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800b222:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800b226:	2b04      	cmp	r3, #4
 800b228:	d007      	beq.n	800b23a <ScheduleTx+0x1be>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b22a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b22c:	440b      	add	r3, r1
 800b22e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b234:	4413      	add	r3, r2
 800b236:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    size_t macCmdsSize = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	9306      	str	r3, [sp, #24]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b23e:	4b48      	ldr	r3, [pc, #288]	; (800b360 <ScheduleTx+0x2e4>)
 800b240:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d16b      	bne.n	800b320 <ScheduleTx+0x2a4>
    return SendFrameOnChannel( MacCtx.Channel );
 800b248:	4c46      	ldr	r4, [pc, #280]	; (800b364 <ScheduleTx+0x2e8>)
 800b24a:	f894 6411 	ldrb.w	r6, [r4, #1041]	; 0x411
    int8_t txPower = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	f88d 3013 	strb.w	r3, [sp, #19]
    txConfig.Channel = channel;
 800b254:	f88d 6018 	strb.w	r6, [sp, #24]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b258:	4d41      	ldr	r5, [pc, #260]	; (800b360 <ScheduleTx+0x2e4>)
 800b25a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800b25e:	f88d 3019 	strb.w	r3, [sp, #25]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b262:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800b266:	f88d 301a 	strb.w	r3, [sp, #26]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b26a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800b26e:	9307      	str	r3, [sp, #28]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b270:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800b274:	9308      	str	r3, [sp, #32]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b276:	8823      	ldrh	r3, [r4, #0]
 800b278:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b27c:	f204 4314 	addw	r3, r4, #1044	; 0x414
 800b280:	f10d 0213 	add.w	r2, sp, #19
 800b284:	a906      	add	r1, sp, #24
 800b286:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800b28a:	f003 fb68 	bl	800e95e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b294:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800b298:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800b29c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b2a0:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800b2a4:	f8c4 6444 	str.w	r6, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b2a8:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 800b2ac:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b2b0:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b2b4:	f002 fbb7 	bl	800da26 <LoRaMacClassBIsBeaconModeActive>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d146      	bne.n	800b34a <ScheduleTx+0x2ce>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b2bc:	4b28      	ldr	r3, [pc, #160]	; (800b360 <ScheduleTx+0x2e4>)
 800b2be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d049      	beq.n	800b35a <ScheduleTx+0x2de>
    LoRaMacClassBHaltBeaconing( );
 800b2c6:	f002 fbb1 	bl	800da2c <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800b2ca:	4b25      	ldr	r3, [pc, #148]	; (800b360 <ScheduleTx+0x2e4>)
 800b2cc:	f993 5039 	ldrsb.w	r5, [r3, #57]	; 0x39
 800b2d0:	4b24      	ldr	r3, [pc, #144]	; (800b364 <ScheduleTx+0x2e8>)
 800b2d2:	f893 4411 	ldrb.w	r4, [r3, #1041]	; 0x411
    uint32_t fCntUp = 0;
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	9205      	str	r2, [sp, #20]
    switch( MacCtx.TxMsg.Type )
 800b2da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d044      	beq.n	800b36c <ScheduleTx+0x2f0>
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d166      	bne.n	800b3b4 <ScheduleTx+0x338>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b2e6:	a805      	add	r0, sp, #20
 800b2e8:	f002 ff4e 	bl	800e188 <LoRaMacCryptoGetFCntUp>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d15d      	bne.n	800b3ac <ScheduleTx+0x330>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800b2f0:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <ScheduleTx+0x2e8>)
 800b2f2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800b2f6:	b923      	cbnz	r3, 800b302 <ScheduleTx+0x286>
 800b2f8:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <ScheduleTx+0x2e8>)
 800b2fa:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d902      	bls.n	800b308 <ScheduleTx+0x28c>
                fCntUp -= 1;
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	3b01      	subs	r3, #1
 800b306:	9305      	str	r3, [sp, #20]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b308:	4b17      	ldr	r3, [pc, #92]	; (800b368 <ScheduleTx+0x2ec>)
 800b30a:	4622      	mov	r2, r4
 800b30c:	b2e9      	uxtb	r1, r5
 800b30e:	9805      	ldr	r0, [sp, #20]
 800b310:	f002 ffb2 	bl	800e278 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b314:	2800      	cmp	r0, #0
 800b316:	d14b      	bne.n	800b3b0 <ScheduleTx+0x334>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b318:	4b12      	ldr	r3, [pc, #72]	; (800b364 <ScheduleTx+0x2e8>)
 800b31a:	f893 110c 	ldrb.w	r1, [r3, #268]	; 0x10c
            break;
 800b31e:	e02c      	b.n	800b37a <ScheduleTx+0x2fe>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b320:	a806      	add	r0, sp, #24
 800b322:	f002 fc7d 	bl	800dc20 <LoRaMacCommandsGetSizeSerializedCmds>
 800b326:	2800      	cmp	r0, #0
 800b328:	d146      	bne.n	800b3b8 <ScheduleTx+0x33c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800b32a:	4b0e      	ldr	r3, [pc, #56]	; (800b364 <ScheduleTx+0x2e8>)
 800b32c:	f893 4237 	ldrb.w	r4, [r3, #567]	; 0x237
 800b330:	f89d 5018 	ldrb.w	r5, [sp, #24]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <ScheduleTx+0x2e4>)
 800b336:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b33a:	f7ff fafb 	bl	800a934 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b33e:	b280      	uxth	r0, r0
 800b340:	442c      	add	r4, r5
 800b342:	42a0      	cmp	r0, r4
 800b344:	d280      	bcs.n	800b248 <ScheduleTx+0x1cc>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800b346:	2008      	movs	r0, #8
 800b348:	e6b1      	b.n	800b0ae <ScheduleTx+0x32>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b34a:	f8d4 0414 	ldr.w	r0, [r4, #1044]	; 0x414
 800b34e:	f002 fb7c 	bl	800da4a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800b352:	2800      	cmp	r0, #0
 800b354:	d0b2      	beq.n	800b2bc <ScheduleTx+0x240>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b356:	2010      	movs	r0, #16
    return SendFrameOnChannel( MacCtx.Channel );
 800b358:	e6a9      	b.n	800b0ae <ScheduleTx+0x32>
        LoRaMacClassBStopRxSlots( );
 800b35a:	f002 fb78 	bl	800da4e <LoRaMacClassBStopRxSlots>
 800b35e:	e7b2      	b.n	800b2c6 <ScheduleTx+0x24a>
 800b360:	20000e08 	.word	0x20000e08
 800b364:	20000900 	.word	0x20000900
 800b368:	20000a08 	.word	0x20000a08
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b36c:	4816      	ldr	r0, [pc, #88]	; (800b3c8 <ScheduleTx+0x34c>)
 800b36e:	f002 ff57 	bl	800e220 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b372:	b9c8      	cbnz	r0, 800b3a8 <ScheduleTx+0x32c>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b374:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <ScheduleTx+0x350>)
 800b376:	f893 110c 	ldrb.w	r1, [r3, #268]	; 0x10c
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <ScheduleTx+0x350>)
 800b37c:	8019      	strh	r1, [r3, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b37e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b382:	f042 0202 	orr.w	r2, r2, #2
 800b386:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800b38a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b38e:	b92b      	cbnz	r3, 800b39c <ScheduleTx+0x320>
        MacCtx.ChannelsNbTransCounter++;
 800b390:	4a0e      	ldr	r2, [pc, #56]	; (800b3cc <ScheduleTx+0x350>)
 800b392:	f892 340c 	ldrb.w	r3, [r2, #1036]	; 0x40c
 800b396:	3301      	adds	r3, #1
 800b398:	f882 340c 	strb.w	r3, [r2, #1036]	; 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b39c:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <ScheduleTx+0x354>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a0:	480c      	ldr	r0, [pc, #48]	; (800b3d4 <ScheduleTx+0x358>)
 800b3a2:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	e682      	b.n	800b0ae <ScheduleTx+0x32>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b3a8:	2011      	movs	r0, #17
 800b3aa:	e680      	b.n	800b0ae <ScheduleTx+0x32>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b3ac:	2012      	movs	r0, #18
 800b3ae:	e67e      	b.n	800b0ae <ScheduleTx+0x32>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b3b0:	2011      	movs	r0, #17
    if( status != LORAMAC_STATUS_OK )
 800b3b2:	e67c      	b.n	800b0ae <ScheduleTx+0x32>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b3b4:	2003      	movs	r0, #3
 800b3b6:	e67a      	b.n	800b0ae <ScheduleTx+0x32>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3b8:	2013      	movs	r0, #19
 800b3ba:	e678      	b.n	800b0ae <ScheduleTx+0x32>
 800b3bc:	2011      	movs	r0, #17
 800b3be:	e676      	b.n	800b0ae <ScheduleTx+0x32>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800b3c0:	200e      	movs	r0, #14
 800b3c2:	e674      	b.n	800b0ae <ScheduleTx+0x32>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b3c4:	200f      	movs	r0, #15
 800b3c6:	e672      	b.n	800b0ae <ScheduleTx+0x32>
 800b3c8:	20000a08 	.word	0x20000a08
 800b3cc:	20000900 	.word	0x20000900
 800b3d0:	08013dd0 	.word	0x08013dd0
 800b3d4:	20000902 	.word	0x20000902

0800b3d8 <OnTxDelayedTimerEvent>:
{
 800b3d8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800b3da:	4c11      	ldr	r4, [pc, #68]	; (800b420 <OnTxDelayedTimerEvent+0x48>)
 800b3dc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b3e0:	f007 faf6 	bl	80129d0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b3e4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b3e8:	f023 0320 	bic.w	r3, r3, #32
 800b3ec:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	f7ff fe43 	bl	800b07c <ScheduleTx>
 800b3f6:	b108      	cbz	r0, 800b3fc <OnTxDelayedTimerEvent+0x24>
 800b3f8:	280b      	cmp	r0, #11
 800b3fa:	d100      	bne.n	800b3fe <OnTxDelayedTimerEvent+0x26>
}
 800b3fc:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b3fe:	4a09      	ldr	r2, [pc, #36]	; (800b424 <OnTxDelayedTimerEvent+0x4c>)
 800b400:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800b404:	f884 2436 	strb.w	r2, [r4, #1078]	; 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800b408:	f894 240e 	ldrb.w	r2, [r4, #1038]	; 0x40e
 800b40c:	f884 2439 	strb.w	r2, [r4, #1081]	; 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b410:	2009      	movs	r0, #9
 800b412:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b416:	f002 fd05 	bl	800de24 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b41a:	f7ff fa4b 	bl	800a8b4 <StopRetransmission>
}
 800b41e:	e7ed      	b.n	800b3fc <OnTxDelayedTimerEvent+0x24>
 800b420:	20000900 	.word	0x20000900
 800b424:	20000e08 	.word	0x20000e08

0800b428 <OpenContinuousRxCWindow>:
{
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b42c:	4c14      	ldr	r4, [pc, #80]	; (800b480 <OpenContinuousRxCWindow+0x58>)
 800b42e:	4d15      	ldr	r5, [pc, #84]	; (800b484 <OpenContinuousRxCWindow+0x5c>)
 800b430:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800b434:	9600      	str	r6, [sp, #0]
 800b436:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b438:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800b43c:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800b440:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b444:	f003 fa74 	bl	800e930 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b448:	2302      	movs	r3, #2
 800b44a:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b44e:	2301      	movs	r3, #1
 800b450:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b454:	f205 421c 	addw	r2, r5, #1052	; 0x41c
 800b458:	4631      	mov	r1, r6
 800b45a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b45e:	f003 fa73 	bl	800e948 <RegionRxConfig>
 800b462:	b158      	cbz	r0, 800b47c <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b464:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800b468:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <OpenContinuousRxCWindow+0x60>)
 800b46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b470:	2000      	movs	r0, #0
 800b472:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b474:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800b478:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800b47c:	b002      	add	sp, #8
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	20000e08 	.word	0x20000e08
 800b484:	20000900 	.word	0x20000900
 800b488:	08013dd0 	.word	0x08013dd0

0800b48c <RxWindowSetup>:
{
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800b490:	f007 fa9e 	bl	80129d0 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b494:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <RxWindowSetup+0x3c>)
 800b496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b498:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b49a:	4a0c      	ldr	r2, [pc, #48]	; (800b4cc <RxWindowSetup+0x40>)
 800b49c:	4621      	mov	r1, r4
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <RxWindowSetup+0x44>)
 800b4a0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b4a4:	f003 fa50 	bl	800e948 <RegionRxConfig>
 800b4a8:	b160      	cbz	r0, 800b4c4 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b4aa:	4d0a      	ldr	r5, [pc, #40]	; (800b4d4 <RxWindowSetup+0x48>)
 800b4ac:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800b4b0:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <RxWindowSetup+0x3c>)
 800b4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b8:	4a05      	ldr	r2, [pc, #20]	; (800b4d0 <RxWindowSetup+0x44>)
 800b4ba:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800b4bc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b4be:	7ce3      	ldrb	r3, [r4, #19]
 800b4c0:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	08013dd0 	.word	0x08013dd0
 800b4cc:	20000d1c 	.word	0x20000d1c
 800b4d0:	20000e08 	.word	0x20000e08
 800b4d4:	20000900 	.word	0x20000900

0800b4d8 <OnRxWindow2TimerEvent>:
{
 800b4d8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b4da:	4b11      	ldr	r3, [pc, #68]	; (800b520 <OnRxWindow2TimerEvent+0x48>)
 800b4dc:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800b4e0:	b903      	cbnz	r3, 800b4e4 <OnRxWindow2TimerEvent+0xc>
}
 800b4e2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b4e4:	480e      	ldr	r0, [pc, #56]	; (800b520 <OnRxWindow2TimerEvent+0x48>)
 800b4e6:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800b4ea:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b4ee:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <OnRxWindow2TimerEvent+0x4c>)
 800b4f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b4f2:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b4f6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b4fa:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b4fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b502:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b506:	2300      	movs	r3, #0
 800b508:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b50c:	2301      	movs	r3, #1
 800b50e:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b512:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800b516:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800b51a:	f7ff ffb7 	bl	800b48c <RxWindowSetup>
 800b51e:	e7e0      	b.n	800b4e2 <OnRxWindow2TimerEvent+0xa>
 800b520:	20000900 	.word	0x20000900
 800b524:	20000e08 	.word	0x20000e08

0800b528 <OnRxWindow1TimerEvent>:
{
 800b528:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b52a:	480f      	ldr	r0, [pc, #60]	; (800b568 <OnRxWindow1TimerEvent+0x40>)
 800b52c:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800b530:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b534:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <OnRxWindow1TimerEvent+0x44>)
 800b536:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800b53a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b53e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b542:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b546:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b54a:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b54e:	2300      	movs	r3, #0
 800b550:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b554:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b558:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800b55c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800b560:	f7ff ff94 	bl	800b48c <RxWindowSetup>
}
 800b564:	bd08      	pop	{r3, pc}
 800b566:	bf00      	nop
 800b568:	20000900 	.word	0x20000900
 800b56c:	20000e08 	.word	0x20000e08

0800b570 <OnRadioRxTimeout>:
{
 800b570:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b572:	4a07      	ldr	r2, [pc, #28]	; (800b590 <OnRadioRxTimeout+0x20>)
 800b574:	7813      	ldrb	r3, [r2, #0]
 800b576:	f043 0301 	orr.w	r3, r3, #1
 800b57a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b57c:	f7ff f9c2 	bl	800a904 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b580:	4b04      	ldr	r3, [pc, #16]	; (800b594 <OnRadioRxTimeout+0x24>)
 800b582:	2201      	movs	r2, #1
 800b584:	2100      	movs	r1, #0
 800b586:	2002      	movs	r0, #2
 800b588:	f007 fbf8 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800b58c:	bd08      	pop	{r3, pc}
 800b58e:	bf00      	nop
 800b590:	200008fc 	.word	0x200008fc
 800b594:	08013c58 	.word	0x08013c58

0800b598 <OnRadioTxTimeout>:
{
 800b598:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b59a:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <OnRadioTxTimeout+0x20>)
 800b59c:	7813      	ldrb	r3, [r2, #0]
 800b59e:	f043 0304 	orr.w	r3, r3, #4
 800b5a2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b5a4:	f7ff f9ae 	bl	800a904 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b5a8:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <OnRadioTxTimeout+0x24>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	2002      	movs	r0, #2
 800b5b0:	f007 fbe4 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800b5b4:	bd08      	pop	{r3, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200008fc 	.word	0x200008fc
 800b5bc:	08013c68 	.word	0x08013c68

0800b5c0 <OnRadioRxDone>:
{
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b5cc:	f007 f9ba 	bl	8012944 <UTIL_TIMER_GetCurrentTime>
 800b5d0:	4c0a      	ldr	r4, [pc, #40]	; (800b5fc <OnRadioRxDone+0x3c>)
 800b5d2:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b5d4:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b5d8:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b5da:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b5dc:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b5de:	4a08      	ldr	r2, [pc, #32]	; (800b600 <OnRadioRxDone+0x40>)
 800b5e0:	7813      	ldrb	r3, [r2, #0]
 800b5e2:	f043 0308 	orr.w	r3, r3, #8
 800b5e6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b5e8:	f7ff f98c 	bl	800a904 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <OnRadioRxDone+0x44>)
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	2002      	movs	r0, #2
 800b5f4:	f007 fbc2 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	20001570 	.word	0x20001570
 800b600:	200008fc 	.word	0x200008fc
 800b604:	08013c78 	.word	0x08013c78

0800b608 <OnRadioTxDone>:
{
 800b608:	b510      	push	{r4, lr}
 800b60a:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b60c:	f007 f99a 	bl	8012944 <UTIL_TIMER_GetCurrentTime>
 800b610:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <OnRadioTxDone+0x3c>)
 800b612:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b614:	466c      	mov	r4, sp
 800b616:	4620      	mov	r0, r4
 800b618:	f006 fe4e 	bl	80122b8 <SysTimeGet>
 800b61c:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <OnRadioTxDone+0x40>)
 800b61e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b622:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b626:	4a09      	ldr	r2, [pc, #36]	; (800b64c <OnRadioTxDone+0x44>)
 800b628:	7813      	ldrb	r3, [r2, #0]
 800b62a:	f043 0310 	orr.w	r3, r3, #16
 800b62e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b630:	f7ff f968 	bl	800a904 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b634:	4b06      	ldr	r3, [pc, #24]	; (800b650 <OnRadioTxDone+0x48>)
 800b636:	2201      	movs	r2, #1
 800b638:	2100      	movs	r1, #0
 800b63a:	2002      	movs	r0, #2
 800b63c:	f007 fb9e 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800b640:	b002      	add	sp, #8
 800b642:	bd10      	pop	{r4, pc}
 800b644:	20001580 	.word	0x20001580
 800b648:	20000c38 	.word	0x20000c38
 800b64c:	200008fc 	.word	0x200008fc
 800b650:	08013c88 	.word	0x08013c88

0800b654 <ResetMacParameters>:
{
 800b654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b656:	b08f      	sub	sp, #60	; 0x3c
    if( isRejoin == false )
 800b658:	b918      	cbnz	r0, 800b662 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b65a:	4b5b      	ldr	r3, [pc, #364]	; (800b7c8 <ResetMacParameters+0x174>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b662:	4c59      	ldr	r4, [pc, #356]	; (800b7c8 <ResetMacParameters+0x174>)
 800b664:	2500      	movs	r5, #0
 800b666:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b668:	4e58      	ldr	r6, [pc, #352]	; (800b7cc <ResetMacParameters+0x178>)
 800b66a:	f886 540c 	strb.w	r5, [r6, #1036]	; 0x40c
    MacCtx.AckTimeoutRetries = 1;
 800b66e:	2701      	movs	r7, #1
 800b670:	f886 740d 	strb.w	r7, [r6, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b674:	f886 740e 	strb.w	r7, [r6, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 800b678:	f886 540f 	strb.w	r5, [r6, #1039]	; 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 800b67c:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b680:	f8a4 711e 	strh.w	r7, [r4, #286]	; 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b684:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800b688:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b68c:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
 800b690:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b694:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800b698:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b69c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b6a0:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b6a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6a8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b6ac:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800b6b0:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800b6b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6b8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b6bc:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800b6c0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b6c4:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800b6c8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b6cc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800b6d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b6d4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800b6d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b6dc:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800b6e0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b6e4:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800b6e8:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800b6ec:	f886 5410 	strb.w	r5, [r6, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800b6f0:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800b6f4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800b6f8:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800b6fc:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800b700:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800b704:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800b708:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800b70c:	f884 5142 	strb.w	r5, [r4, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800b710:	f884 5143 	strb.w	r5, [r4, #323]	; 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b714:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b718:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800b71c:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b71e:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 800b722:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b724:	a901      	add	r1, sp, #4
 800b726:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b72a:	f003 f8dd 	bl	800e8e8 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b72e:	f886 5411 	strb.w	r5, [r6, #1041]	; 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b732:	f886 53cc 	strb.w	r5, [r6, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b736:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b738:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b73c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800b740:	f886 33dc 	strb.w	r3, [r6, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b744:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800b748:	f886 33dd 	strb.w	r3, [r6, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b74c:	f886 53de 	strb.w	r5, [r6, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b750:	f886 73df 	strb.w	r7, [r6, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b754:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800b758:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800b75c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b762:	f8dc 3000 	ldr.w	r3, [ip]
 800b766:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b768:	f886 73f2 	strb.w	r7, [r6, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b76c:	2302      	movs	r3, #2
 800b76e:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800b772:	950c      	str	r5, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800b774:	950d      	str	r5, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800b776:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800b77a:	b11b      	cbz	r3, 800b784 <ResetMacParameters+0x130>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b784:	4b11      	ldr	r3, [pc, #68]	; (800b7cc <ResetMacParameters+0x178>)
 800b786:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 800b78a:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b78c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800b790:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b792:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 800b796:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b798:	f203 4381 	addw	r3, r3, #1153	; 0x481
 800b79c:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b79e:	4a0a      	ldr	r2, [pc, #40]	; (800b7c8 <ResetMacParameters+0x174>)
 800b7a0:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800b7a4:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b7a6:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800b7aa:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b7ac:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800b7b0:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b7b2:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800b7b6:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b7b8:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
 800b7bc:	a90c      	add	r1, sp, #48	; 0x30
 800b7be:	a804      	add	r0, sp, #16
 800b7c0:	f002 f920 	bl	800da04 <LoRaMacClassBInit>
}
 800b7c4:	b00f      	add	sp, #60	; 0x3c
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c8:	20000e08 	.word	0x20000e08
 800b7cc:	20000900 	.word	0x20000900

0800b7d0 <SwitchClass>:
{
 800b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d2:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b7d4:	4b3e      	ldr	r3, [pc, #248]	; (800b8d0 <SwitchClass+0x100>)
 800b7d6:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800b7da:	2c01      	cmp	r4, #1
 800b7dc:	d05d      	beq.n	800b89a <SwitchClass+0xca>
 800b7de:	2c02      	cmp	r4, #2
 800b7e0:	d064      	beq.n	800b8ac <SwitchClass+0xdc>
 800b7e2:	b114      	cbz	r4, 800b7ea <SwitchClass+0x1a>
 800b7e4:	2403      	movs	r4, #3
}
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800b7ea:	b940      	cbnz	r0, 800b7fe <SwitchClass+0x2e>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b7ec:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800b7f0:	336c      	adds	r3, #108	; 0x6c
 800b7f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7f6:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800b7fa:	462c      	mov	r4, r5
 800b7fc:	e7f3      	b.n	800b7e6 <SwitchClass+0x16>
            if( deviceClass == CLASS_B )
 800b7fe:	2801      	cmp	r0, #1
 800b800:	d024      	beq.n	800b84c <SwitchClass+0x7c>
            if( deviceClass == CLASS_C )
 800b802:	2802      	cmp	r0, #2
 800b804:	d160      	bne.n	800b8c8 <SwitchClass+0xf8>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b806:	4f32      	ldr	r7, [pc, #200]	; (800b8d0 <SwitchClass+0x100>)
 800b808:	f04f 0e02 	mov.w	lr, #2
 800b80c:	f887 e118 	strb.w	lr, [r7, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b810:	4e30      	ldr	r6, [pc, #192]	; (800b8d4 <SwitchClass+0x104>)
 800b812:	f506 7578 	add.w	r5, r6, #992	; 0x3e0
 800b816:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800b81a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b81e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b820:	f8dc 3000 	ldr.w	r3, [ip]
 800b824:	602b      	str	r3, [r5, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b826:	f886 e3f3 	strb.w	lr, [r6, #1011]	; 0x3f3
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b82a:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800b82e:	b11b      	cbz	r3, 800b838 <SwitchClass+0x68>
 800b830:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800b834:	4573      	cmp	r3, lr
 800b836:	d014      	beq.n	800b862 <SwitchClass+0x92>
                MacCtx.NodeAckRequested = false;
 800b838:	4b26      	ldr	r3, [pc, #152]	; (800b8d4 <SwitchClass+0x104>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                Radio.Sleep( );
 800b840:	4b25      	ldr	r3, [pc, #148]	; (800b8d8 <SwitchClass+0x108>)
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b846:	f7ff fdef 	bl	800b428 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b84a:	e7cc      	b.n	800b7e6 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b84c:	2001      	movs	r0, #1
 800b84e:	f002 f8ef 	bl	800da30 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b852:	4604      	mov	r4, r0
 800b854:	2800      	cmp	r0, #0
 800b856:	d1c6      	bne.n	800b7e6 <SwitchClass+0x16>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b858:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <SwitchClass+0x100>)
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800b860:	e7c1      	b.n	800b7e6 <SwitchClass+0x16>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800b862:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b866:	6779      	str	r1, [r7, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800b868:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800b86c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b870:	f896 0411 	ldrb.w	r0, [r6, #1041]	; 0x411
 800b874:	f886 03e0 	strb.w	r0, [r6, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b878:	f8c6 13e4 	str.w	r1, [r6, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b87c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800b880:	f886 13f0 	strb.w	r1, [r6, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b884:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800b888:	f886 23f1 	strb.w	r2, [r6, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b88c:	2203      	movs	r2, #3
 800b88e:	f886 23f3 	strb.w	r2, [r6, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b892:	2201      	movs	r2, #1
 800b894:	f886 23f2 	strb.w	r2, [r6, #1010]	; 0x3f2
                        break;
 800b898:	e7ce      	b.n	800b838 <SwitchClass+0x68>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b89a:	f002 f8c9 	bl	800da30 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b89e:	4604      	mov	r4, r0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d1a0      	bne.n	800b7e6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <SwitchClass+0x100>)
 800b8a6:	f883 5118 	strb.w	r5, [r3, #280]	; 0x118
 800b8aa:	e79c      	b.n	800b7e6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b8ac:	b970      	cbnz	r0, 800b8cc <SwitchClass+0xfc>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800b8ae:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <SwitchClass+0x104>)
 800b8b0:	2206      	movs	r2, #6
 800b8b2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b8b6:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <SwitchClass+0x100>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
                Radio.Sleep( );
 800b8be:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <SwitchClass+0x108>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b8c4:	462c      	mov	r4, r5
 800b8c6:	e78e      	b.n	800b7e6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b8c8:	2403      	movs	r4, #3
 800b8ca:	e78c      	b.n	800b7e6 <SwitchClass+0x16>
 800b8cc:	2403      	movs	r4, #3
 800b8ce:	e78a      	b.n	800b7e6 <SwitchClass+0x16>
 800b8d0:	20000e08 	.word	0x20000e08
 800b8d4:	20000900 	.word	0x20000900
 800b8d8:	08013dd0 	.word	0x08013dd0

0800b8dc <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b8dc:	4b08      	ldr	r3, [pc, #32]	; (800b900 <LoRaMacIsBusy+0x24>)
 800b8de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d007      	beq.n	800b8f6 <LoRaMacIsBusy+0x1a>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b8e6:	b943      	cbnz	r3, 800b8fa <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <LoRaMacIsBusy+0x24>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b8ea:	f893 0482 	ldrb.w	r0, [r3, #1154]	; 0x482
 800b8ee:	3801      	subs	r0, #1
 800b8f0:	bf18      	it	ne
 800b8f2:	2001      	movne	r0, #1
 800b8f4:	4770      	bx	lr
        return false;
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	4770      	bx	lr
    return true;
 800b8fa:	2001      	movs	r0, #1
}
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000900 	.word	0x20000900

0800b904 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b904:	4b03      	ldr	r3, [pc, #12]	; (800b914 <LoRaMacIsStopped+0x10>)
 800b906:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
}
 800b90a:	2801      	cmp	r0, #1
 800b90c:	bf14      	ite	ne
 800b90e:	2000      	movne	r0, #0
 800b910:	2001      	moveq	r0, #1
 800b912:	4770      	bx	lr
 800b914:	20000900 	.word	0x20000900

0800b918 <LoRaMacProcess>:
{
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b91e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b922:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800b924:	4aac      	ldr	r2, [pc, #688]	; (800bbd8 <LoRaMacProcess+0x2c0>)
 800b926:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800b928:	2000      	movs	r0, #0
 800b92a:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92c:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800b930:	b19b      	cbz	r3, 800b95a <LoRaMacProcess+0x42>
        if( events.Events.TxDone == 1 )
 800b932:	b2dc      	uxtb	r4, r3
 800b934:	f013 0f10 	tst.w	r3, #16
 800b938:	d152      	bne.n	800b9e0 <LoRaMacProcess+0xc8>
        if( events.Events.RxDone == 1 )
 800b93a:	f014 0f08 	tst.w	r4, #8
 800b93e:	f040 80cf 	bne.w	800bae0 <LoRaMacProcess+0x1c8>
        if( events.Events.TxTimeout == 1 )
 800b942:	f014 0f04 	tst.w	r4, #4
 800b946:	f040 83dd 	bne.w	800c104 <LoRaMacProcess+0x7ec>
        if( events.Events.RxError == 1 )
 800b94a:	f014 0f02 	tst.w	r4, #2
 800b94e:	f040 83f7 	bne.w	800c140 <LoRaMacProcess+0x828>
        if( events.Events.RxTimeout == 1 )
 800b952:	f014 0f01 	tst.w	r4, #1
 800b956:	f040 83f8 	bne.w	800c14a <LoRaMacProcess+0x832>
    LoRaMacClassBProcess( );
 800b95a:	f002 f879 	bl	800da50 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b95e:	4b9f      	ldr	r3, [pc, #636]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b960:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b964:	f013 0f10 	tst.w	r3, #16
 800b968:	f040 83f4 	bne.w	800c154 <LoRaMacProcess+0x83c>
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b96c:	4b9b      	ldr	r3, [pc, #620]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b96e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b972:	f013 0f08 	tst.w	r3, #8
 800b976:	d00e      	beq.n	800b996 <LoRaMacProcess+0x7e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b978:	4898      	ldr	r0, [pc, #608]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b97a:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800b97e:	f36f 03c3 	bfc	r3, #3, #1
 800b982:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b986:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800b990:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 800b994:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b996:	4b91      	ldr	r3, [pc, #580]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b998:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b99c:	f013 0f02 	tst.w	r3, #2
 800b9a0:	d00e      	beq.n	800b9c0 <LoRaMacProcess+0xa8>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b9a2:	488e      	ldr	r0, [pc, #568]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b9a4:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800b9a8:	f36f 0341 	bfc	r3, #1, #1
 800b9ac:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b9b0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800b9ba:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800b9be:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b9c0:	4b86      	ldr	r3, [pc, #536]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b9c2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	f000 8497 	beq.w	800c2fa <LoRaMacProcess+0x9e2>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b9cc:	4b83      	ldr	r3, [pc, #524]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800b9ce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b9d2:	f013 0f20 	tst.w	r3, #32
 800b9d6:	f040 8494 	bne.w	800c302 <LoRaMacProcess+0x9ea>
}
 800b9da:	b025      	add	sp, #148	; 0x94
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b9e0:	4b7f      	ldr	r3, [pc, #508]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800b9e2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d002      	beq.n	800b9f0 <LoRaMacProcess+0xd8>
        Radio.Sleep( );
 800b9ea:	4b7e      	ldr	r3, [pc, #504]	; (800bbe4 <LoRaMacProcess+0x2cc>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ee:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f4:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800b9f6:	f006 ffa5 	bl	8012944 <UTIL_TIMER_GetCurrentTime>
 800b9fa:	4b7b      	ldr	r3, [pc, #492]	; (800bbe8 <LoRaMacProcess+0x2d0>)
 800b9fc:	681e      	ldr	r6, [r3, #0]
 800b9fe:	1a36      	subs	r6, r6, r0
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800ba00:	4d76      	ldr	r5, [pc, #472]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800ba02:	f8d5 13b0 	ldr.w	r1, [r5, #944]	; 0x3b0
 800ba06:	f505 7760 	add.w	r7, r5, #896	; 0x380
 800ba0a:	4431      	add	r1, r6
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f007 f883 	bl	8012b18 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800ba12:	4638      	mov	r0, r7
 800ba14:	f007 f83a 	bl	8012a8c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800ba18:	f8d5 13b4 	ldr.w	r1, [r5, #948]	; 0x3b4
 800ba1c:	f505 7566 	add.w	r5, r5, #920	; 0x398
 800ba20:	4431      	add	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	f007 f878 	bl	8012b18 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f007 f82f 	bl	8012a8c <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba2e:	f388 8810 	msr	PRIMASK, r8
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800ba32:	4b6b      	ldr	r3, [pc, #428]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800ba34:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d004      	beq.n	800ba46 <LoRaMacProcess+0x12e>
 800ba3c:	f5a5 7366 	sub.w	r3, r5, #920	; 0x398
 800ba40:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ba44:	b1ab      	cbz	r3, 800ba72 <LoRaMacProcess+0x15a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800ba46:	2316      	movs	r3, #22
 800ba48:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba4c:	a90c      	add	r1, sp, #48	; 0x30
 800ba4e:	4b64      	ldr	r3, [pc, #400]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800ba50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba54:	f002 ff31 	bl	800e8ba <RegionGetPhyParam>
 800ba58:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ba5a:	4d60      	ldr	r5, [pc, #384]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800ba5c:	f8d5 13b4 	ldr.w	r1, [r5, #948]	; 0x3b4
 800ba60:	f505 757d 	add.w	r5, r5, #1012	; 0x3f4
 800ba64:	4401      	add	r1, r0
 800ba66:	4628      	mov	r0, r5
 800ba68:	f007 f856 	bl	8012b18 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f007 f80d 	bl	8012a8c <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ba72:	4b5d      	ldr	r3, [pc, #372]	; (800bbe8 <LoRaMacProcess+0x2d0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4d5a      	ldr	r5, [pc, #360]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800ba78:	62eb      	str	r3, [r5, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800ba7a:	4e58      	ldr	r6, [pc, #352]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800ba7c:	f896 2411 	ldrb.w	r2, [r6, #1041]	; 0x411
 800ba80:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ba84:	9317      	str	r3, [sp, #92]	; 0x5c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ba86:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f006 fc3a 	bl	8012304 <SysTimeGetMcuTime>
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800ba9c:	e898 0006 	ldmia.w	r8, {r1, r2}
 800baa0:	4638      	mov	r0, r7
 800baa2:	f006 fbc5 	bl	8012230 <SysTimeSub>
 800baa6:	ab19      	add	r3, sp, #100	; 0x64
 800baa8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800baac:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800bab0:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 800bab4:	9318      	str	r3, [sp, #96]	; 0x60
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bab6:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 800baba:	3b00      	subs	r3, #0
 800babc:	bf18      	it	ne
 800babe:	2301      	movne	r3, #1
 800bac0:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800bac4:	a916      	add	r1, sp, #88	; 0x58
 800bac6:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800baca:	f002 ff05 	bl	800e8d8 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800bace:	f896 3410 	ldrb.w	r3, [r6, #1040]	; 0x410
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f47f af31 	bne.w	800b93a <LoRaMacProcess+0x22>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bad8:	2200      	movs	r2, #0
 800bada:	f886 2435 	strb.w	r2, [r6, #1077]	; 0x435
}
 800bade:	e72c      	b.n	800b93a <LoRaMacProcess+0x22>
    uint8_t *payload = RxDoneParams.Payload;
 800bae0:	4b42      	ldr	r3, [pc, #264]	; (800bbec <LoRaMacProcess+0x2d4>)
 800bae2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800bae6:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800baea:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800baee:	f993 500c 	ldrsb.w	r5, [r3, #12]
    uint32_t downLinkCounter = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800baf6:	4a3a      	ldr	r2, [pc, #232]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800baf8:	f8d2 70e4 	ldr.w	r7, [r2, #228]	; 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 800bafc:	4e37      	ldr	r6, [pc, #220]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800bafe:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800bb02:	f8a6 a47c 	strh.w	sl, [r6, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800bb06:	f886 547e 	strb.w	r5, [r6, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800bb0a:	f896 2480 	ldrb.w	r2, [r6, #1152]	; 0x480
 800bb0e:	f886 247f 	strb.w	r2, [r6, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800bb12:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800bb16:	f886 341a 	strb.w	r3, [r6, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800bb1a:	f886 341d 	strb.w	r3, [r6, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800bb1e:	f8c6 3420 	str.w	r3, [r6, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800bb22:	f886 3424 	strb.w	r3, [r6, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800bb26:	f886 3425 	strb.w	r3, [r6, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800bb2a:	f886 3426 	strb.w	r3, [r6, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800bb2e:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bb32:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800bb36:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bb3a:	f886 3430 	strb.w	r3, [r6, #1072]	; 0x430
    Radio.Sleep( );
 800bb3e:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <LoRaMacProcess+0x2cc>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bb44:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800bb48:	f006 ff42 	bl	80129d0 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	4648      	mov	r0, r9
 800bb50:	f001 ff61 	bl	800da16 <LoRaMacClassBRxBeacon>
 800bb54:	b9b8      	cbnz	r0, 800bb86 <LoRaMacProcess+0x26e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bb56:	4b22      	ldr	r3, [pc, #136]	; (800bbe0 <LoRaMacProcess+0x2c8>)
 800bb58:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d017      	beq.n	800bb90 <LoRaMacProcess+0x278>
    if( size == 0 )
 800bb60:	f1b8 0f00 	cmp.w	r8, #0
 800bb64:	d031      	beq.n	800bbca <LoRaMacProcess+0x2b2>
    macHdr.Value = payload[pktHeaderLen++];
 800bb66:	f899 6000 	ldrb.w	r6, [r9]
    switch( macHdr.Bits.MType )
 800bb6a:	0973      	lsrs	r3, r6, #5
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	2b06      	cmp	r3, #6
 800bb70:	f200 82ae 	bhi.w	800c0d0 <LoRaMacProcess+0x7b8>
 800bb74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb78:	02ac003c 	.word	0x02ac003c
 800bb7c:	02ac00cd 	.word	0x02ac00cd
 800bb80:	02ac00c9 	.word	0x02ac00c9
 800bb84:	0283      	.short	0x0283
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800bb86:	f8a6 a472 	strh.w	sl, [r6, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800bb8a:	f886 5474 	strb.w	r5, [r6, #1140]	; 0x474
        return;
 800bb8e:	e6d8      	b.n	800b942 <LoRaMacProcess+0x2a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bb90:	f001 ff45 	bl	800da1e <LoRaMacClassBIsPingExpected>
 800bb94:	b150      	cbz	r0, 800bbac <LoRaMacProcess+0x294>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bb96:	2000      	movs	r0, #0
 800bb98:	f001 ff36 	bl	800da08 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f001 ff38 	bl	800da12 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bba2:	4b0e      	ldr	r3, [pc, #56]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800bba4:	2204      	movs	r2, #4
 800bba6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800bbaa:	e7d9      	b.n	800bb60 <LoRaMacProcess+0x248>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bbac:	f001 ff39 	bl	800da22 <LoRaMacClassBIsMulticastExpected>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0d5      	beq.n	800bb60 <LoRaMacProcess+0x248>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f001 ff28 	bl	800da0a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bbba:	2000      	movs	r0, #0
 800bbbc:	f001 ff2a 	bl	800da14 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800bbc8:	e7ca      	b.n	800bb60 <LoRaMacProcess+0x248>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bbca:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <LoRaMacProcess+0x2c4>)
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 800bbd2:	f7fe fee9 	bl	800a9a8 <PrepareRxDoneAbort>
        return;
 800bbd6:	e6b4      	b.n	800b942 <LoRaMacProcess+0x2a>
 800bbd8:	200008fc 	.word	0x200008fc
 800bbdc:	20000900 	.word	0x20000900
 800bbe0:	20000e08 	.word	0x20000e08
 800bbe4:	08013dd0 	.word	0x08013dd0
 800bbe8:	20001580 	.word	0x20001580
 800bbec:	20001570 	.word	0x20001570
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800bbf0:	f1b8 0f10 	cmp.w	r8, #16
 800bbf4:	d930      	bls.n	800bc58 <LoRaMacProcess+0x340>
            macMsgJoinAccept.Buffer = payload;
 800bbf6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            macMsgJoinAccept.BufSize = size;
 800bbfa:	fa5f f888 	uxtb.w	r8, r8
 800bbfe:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800bc02:	4bba      	ldr	r3, [pc, #744]	; (800beec <LoRaMacProcess+0x5d4>)
 800bc04:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800bc08:	bb6b      	cbnz	r3, 800bc66 <LoRaMacProcess+0x34e>
            SecureElementGetJoinEui( joinEui );
 800bc0a:	a816      	add	r0, sp, #88	; 0x58
 800bc0c:	f7fd fed4 	bl	80099b8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800bc10:	aa0c      	add	r2, sp, #48	; 0x30
 800bc12:	a916      	add	r1, sp, #88	; 0x58
 800bc14:	20ff      	movs	r0, #255	; 0xff
 800bc16:	f002 fc7f 	bl	800e518 <LoRaMacCryptoHandleJoinAccept>
 800bc1a:	4605      	mov	r5, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bc1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800bc20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bc24:	f88d 3020 	strb.w	r3, [sp, #32]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bc28:	4bb0      	ldr	r3, [pc, #704]	; (800beec <LoRaMacProcess+0x5d4>)
 800bc2a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bc2e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800bc32:	2207      	movs	r2, #7
 800bc34:	a908      	add	r1, sp, #32
 800bc36:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bc3a:	f002 fe5d 	bl	800e8f8 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800bc3e:	b905      	cbnz	r5, 800bc42 <LoRaMacProcess+0x32a>
 800bc40:	b9c0      	cbnz	r0, 800bc74 <LoRaMacProcess+0x35c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bc42:	2001      	movs	r0, #1
 800bc44:	f002 f910 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f000 8235 	beq.w	800c0b8 <LoRaMacProcess+0x7a0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bc4e:	2101      	movs	r1, #1
 800bc50:	2007      	movs	r0, #7
 800bc52:	f002 f8bf 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
 800bc56:	e22f      	b.n	800c0b8 <LoRaMacProcess+0x7a0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc58:	4ba5      	ldr	r3, [pc, #660]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bc60:	f7fe fea2 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bc64:	e66d      	b.n	800b942 <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc66:	4ba2      	ldr	r3, [pc, #648]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bc6e:	f7fe fe9b 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bc72:	e666      	b.n	800b942 <LoRaMacProcess+0x2a>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800bc74:	4d9d      	ldr	r5, [pc, #628]	; (800beec <LoRaMacProcess+0x5d4>)
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800bc76:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800bc7a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800bc84:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800bc8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc90:	f8c5 10e4 	str.w	r1, [r5, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800bc94:	2002      	movs	r0, #2
 800bc96:	f7fd fe9d 	bl	80099d4 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800bc9a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800bc9e:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800bca2:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bca6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bcaa:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bcae:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800bcb2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	bf38      	it	cc
 800bcba:	2301      	movcc	r3, #1
 800bcbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcc0:	fb02 f303 	mul.w	r3, r2, r3
 800bcc4:	65ab      	str	r3, [r5, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bcc6:	4413      	add	r3, r2
 800bcc8:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800bcca:	2601      	movs	r6, #1
 800bccc:	f885 6068 	strb.w	r6, [r5, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bcd6:	f10d 0342 	add.w	r3, sp, #66	; 0x42
 800bcda:	930a      	str	r3, [sp, #40]	; 0x28
                applyCFList.Size = size - 17;
 800bcdc:	f1a8 0811 	sub.w	r8, r8, #17
 800bce0:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800bce4:	a90a      	add	r1, sp, #40	; 0x28
 800bce6:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800bcea:	f002 fe10 	bl	800e90e <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f002 f8b7 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f000 81dc 	beq.w	800c0b8 <LoRaMacProcess+0x7a0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800bd00:	4631      	mov	r1, r6
 800bd02:	2000      	movs	r0, #0
 800bd04:	f002 f866 	bl	800ddd4 <LoRaMacConfirmQueueSetStatus>
 800bd08:	e1d6      	b.n	800c0b8 <LoRaMacProcess+0x7a0>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bd0a:	4b79      	ldr	r3, [pc, #484]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bd12:	4b76      	ldr	r3, [pc, #472]	; (800beec <LoRaMacProcess+0x5d4>)
 800bd14:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bd18:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800bd1c:	4a74      	ldr	r2, [pc, #464]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bd1e:	f892 241c 	ldrb.w	r2, [r2, #1052]	; 0x41c
 800bd22:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bd26:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800bd2a:	320d      	adds	r2, #13
 800bd2c:	f88d 2020 	strb.w	r2, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bd30:	a908      	add	r1, sp, #32
 800bd32:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bd36:	f002 fdc0 	bl	800e8ba <RegionGetPhyParam>
 800bd3a:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800bd3c:	f1a8 030d 	sub.w	r3, r8, #13
 800bd40:	b21b      	sxth	r3, r3
 800bd42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bd46:	b200      	sxth	r0, r0
 800bd48:	4283      	cmp	r3, r0
 800bd4a:	dc02      	bgt.n	800bd52 <LoRaMacProcess+0x43a>
 800bd4c:	f1b8 0f0b 	cmp.w	r8, #11
 800bd50:	d806      	bhi.n	800bd60 <LoRaMacProcess+0x448>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bd52:	4b67      	ldr	r3, [pc, #412]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bd5a:	f7fe fe25 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bd5e:	e5f0      	b.n	800b942 <LoRaMacProcess+0x2a>
            macMsgData.Buffer = payload;
 800bd60:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
            macMsgData.BufSize = size;
 800bd64:	f88d 805c 	strb.w	r8, [sp, #92]	; 0x5c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bd68:	4b62      	ldr	r3, [pc, #392]	; (800bef4 <LoRaMacProcess+0x5dc>)
 800bd6a:	931f      	str	r3, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bd6c:	23ff      	movs	r3, #255	; 0xff
 800bd6e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800bd72:	a816      	add	r0, sp, #88	; 0x58
 800bd74:	f002 fc9a 	bl	800e6ac <LoRaMacParserData>
 800bd78:	9003      	str	r0, [sp, #12]
 800bd7a:	b9d0      	cbnz	r0, 800bdb2 <LoRaMacProcess+0x49a>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800bd7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bd7e:	4a5c      	ldr	r2, [pc, #368]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bd80:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800bd84:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800bd88:	f012 0f0f 	tst.w	r2, #15
 800bd8c:	f000 840c 	beq.w	800c5a8 <LoRaMacProcess+0xc90>
 800bd90:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 800bd94:	2900      	cmp	r1, #0
 800bd96:	f040 8380 	bne.w	800c49a <LoRaMacProcess+0xb82>
    else if( macMsg->FRMPayloadSize == 0 )
 800bd9a:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 800bd9e:	2900      	cmp	r1, #0
 800bda0:	f000 837e 	beq.w	800c4a0 <LoRaMacProcess+0xb88>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bda4:	4b52      	ldr	r3, [pc, #328]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bdac:	f7fe fdfc 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bdb0:	e5c7      	b.n	800b942 <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdb2:	4b4f      	ldr	r3, [pc, #316]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bdba:	f7fe fdf5 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bdbe:	e5c0      	b.n	800b942 <LoRaMacProcess+0x2a>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800bdc0:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
        *fType = FRAME_TYPE_C;
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	bf14      	ite	ne
 800bdc8:	f04f 0a03 	movne.w	sl, #3
 800bdcc:	f04f 0a02 	moveq.w	sl, #2
 800bdd0:	e3f1      	b.n	800c5b6 <LoRaMacProcess+0xc9e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800bdd2:	4b46      	ldr	r3, [pc, #280]	; (800beec <LoRaMacProcess+0x5d4>)
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bdd4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 83f4 	beq.w	800c5c6 <LoRaMacProcess+0xcae>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800bdde:	4b43      	ldr	r3, [pc, #268]	; (800beec <LoRaMacProcess+0x5d4>)
 800bde0:	f893 b0ea 	ldrb.w	fp, [r3, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800bde4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800bde8:	6809      	ldr	r1, [r1, #0]
 800bdea:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800bdec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d060      	beq.n	800beb6 <LoRaMacProcess+0x59e>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bdf4:	f1ba 0f03 	cmp.w	sl, #3
 800bdf8:	d162      	bne.n	800bec0 <LoRaMacProcess+0x5a8>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bdfa:	f012 0f60 	tst.w	r2, #96	; 0x60
 800bdfe:	d15f      	bne.n	800bec0 <LoRaMacProcess+0x5a8>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800be00:	2315      	movs	r3, #21
 800be02:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be06:	4f39      	ldr	r7, [pc, #228]	; (800beec <LoRaMacProcess+0x5d4>)
 800be08:	a908      	add	r1, sp, #32
 800be0a:	f897 0048 	ldrb.w	r0, [r7, #72]	; 0x48
 800be0e:	f002 fd54 	bl	800e8ba <RegionGetPhyParam>
 800be12:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800be14:	b281      	uxth	r1, r0
 800be16:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
    switch( addrID )
 800be1a:	f1bb 0f00 	cmp.w	fp, #0
 800be1e:	f040 832a 	bne.w	800c476 <LoRaMacProcess+0xb5e>
 800be22:	2301      	movs	r3, #1
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	f04f 0904 	mov.w	r9, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800be2a:	ab07      	add	r3, sp, #28
 800be2c:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 800be30:	4648      	mov	r0, r9
 800be32:	f002 f9b5 	bl	800e1a0 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be36:	2800      	cmp	r0, #0
 800be38:	d15e      	bne.n	800bef8 <LoRaMacProcess+0x5e0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800be3a:	ab16      	add	r3, sp, #88	; 0x58
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	9b07      	ldr	r3, [sp, #28]
 800be40:	464a      	mov	r2, r9
 800be42:	4641      	mov	r1, r8
 800be44:	4658      	mov	r0, fp
 800be46:	f002 fa95 	bl	800e374 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d178      	bne.n	800bf40 <LoRaMacProcess+0x628>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800be4e:	4b28      	ldr	r3, [pc, #160]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800be50:	2100      	movs	r1, #0
 800be52:	f883 1419 	strb.w	r1, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800be56:	9a03      	ldr	r2, [sp, #12]
 800be58:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800be5c:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800be60:	f883 1424 	strb.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800be64:	9a07      	ldr	r2, [sp, #28]
 800be66:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800be6a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800be6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800be72:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800be76:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800be7a:	f883 1435 	strb.w	r1, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800be7e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800be82:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800be86:	2b01      	cmp	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 800be88:	bf9c      	itt	ls
 800be8a:	4a18      	ldrls	r2, [pc, #96]	; (800beec <LoRaMacProcess+0x5d4>)
 800be8c:	6291      	strls	r1, [r2, #40]	; 0x28
            if( multicast == 1 )
 800be8e:	9a03      	ldr	r2, [sp, #12]
 800be90:	2a01      	cmp	r2, #1
 800be92:	d05f      	beq.n	800bf54 <LoRaMacProcess+0x63c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800be94:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 800be98:	2ea0      	cmp	r6, #160	; 0xa0
 800be9a:	d07a      	beq.n	800bf92 <LoRaMacProcess+0x67a>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800be9c:	2200      	movs	r2, #0
 800be9e:	4913      	ldr	r1, [pc, #76]	; (800beec <LoRaMacProcess+0x5d4>)
 800bea0:	f881 203a 	strb.w	r2, [r1, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bea4:	4912      	ldr	r1, [pc, #72]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bea6:	f881 2418 	strb.w	r2, [r1, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800beaa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800beae:	f012 0f10 	tst.w	r2, #16
 800beb2:	d060      	beq.n	800bf76 <LoRaMacProcess+0x65e>
 800beb4:	e057      	b.n	800bf66 <LoRaMacProcess+0x64e>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800beb6:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800beb8:	2103      	movs	r1, #3
 800beba:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
 800bebe:	e799      	b.n	800bdf4 <LoRaMacProcess+0x4dc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bec0:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <LoRaMacProcess+0x5d8>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bec8:	f7fe fd6e 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800becc:	e539      	b.n	800b942 <LoRaMacProcess+0x2a>
    switch( addrID )
 800bece:	4647      	mov	r7, r8
 800bed0:	f8cd b00c 	str.w	fp, [sp, #12]
 800bed4:	e387      	b.n	800c5e6 <LoRaMacProcess+0xcce>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800bed6:	f04f 0909 	mov.w	r9, #9
 800beda:	fa29 f90a 	lsr.w	r9, r9, sl
 800bede:	f009 0901 	and.w	r9, r9, #1
 800bee2:	f109 0901 	add.w	r9, r9, #1
 800bee6:	46b8      	mov	r8, r7
 800bee8:	e79f      	b.n	800be2a <LoRaMacProcess+0x512>
 800beea:	bf00      	nop
 800beec:	20000e08 	.word	0x20000e08
 800bef0:	20000900 	.word	0x20000900
 800bef4:	20000b38 	.word	0x20000b38
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800bef8:	2807      	cmp	r0, #7
 800befa:	d119      	bne.n	800bf30 <LoRaMacProcess+0x618>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800befc:	4bb8      	ldr	r3, [pc, #736]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800befe:	2208      	movs	r2, #8
 800bf00:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800bf04:	4bb7      	ldr	r3, [pc, #732]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf06:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f040 82bb 	bne.w	800c486 <LoRaMacProcess+0xb6e>
 800bf10:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 800bf14:	2ea0      	cmp	r6, #160	; 0xa0
 800bf16:	f040 82b6 	bne.w	800c486 <LoRaMacProcess+0xb6e>
 800bf1a:	4bb2      	ldr	r3, [pc, #712]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf20:	429a      	cmp	r2, r3
 800bf22:	f040 82b0 	bne.w	800c486 <LoRaMacProcess+0xb6e>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800bf26:	4baf      	ldr	r3, [pc, #700]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800bf2e:	e2aa      	b.n	800c486 <LoRaMacProcess+0xb6e>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800bf30:	2808      	cmp	r0, #8
 800bf32:	f040 82a4 	bne.w	800c47e <LoRaMacProcess+0xb66>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800bf36:	4baa      	ldr	r3, [pc, #680]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bf38:	220a      	movs	r2, #10
 800bf3a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800bf3e:	e2a2      	b.n	800c486 <LoRaMacProcess+0xb6e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800bf40:	2802      	cmp	r0, #2
 800bf42:	bf0c      	ite	eq
 800bf44:	220b      	moveq	r2, #11
 800bf46:	220c      	movne	r2, #12
 800bf48:	4ba5      	ldr	r3, [pc, #660]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bf4a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800bf4e:	f7fe fd2b 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800bf52:	e4f6      	b.n	800b942 <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800bf54:	4aa2      	ldr	r2, [pc, #648]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bf56:	2102      	movs	r1, #2
 800bf58:	f882 1418 	strb.w	r1, [r2, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800bf5c:	4aa1      	ldr	r2, [pc, #644]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf5e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	d0a1      	beq.n	800beaa <LoRaMacProcess+0x592>
 800bf66:	4a9f      	ldr	r2, [pc, #636]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf68:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
 800bf6c:	b91a      	cbnz	r2, 800bf76 <LoRaMacProcess+0x65e>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800bf6e:	4a9c      	ldr	r2, [pc, #624]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bf70:	2101      	movs	r1, #1
 800bf72:	f882 141d 	strb.w	r1, [r2, #1053]	; 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800bf76:	4a9a      	ldr	r2, [pc, #616]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bf78:	f892 1434 	ldrb.w	r1, [r2, #1076]	; 0x434
 800bf7c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d915      	bls.n	800bfb0 <LoRaMacProcess+0x698>
            switch( fType )
 800bf84:	f1ba 0f03 	cmp.w	sl, #3
 800bf88:	d872      	bhi.n	800c070 <LoRaMacProcess+0x758>
 800bf8a:	e8df f00a 	tbb	[pc, sl]
 800bf8e:	3f1c      	.short	0x3f1c
 800bf90:	6151      	.short	0x6151
                    Nvm.MacGroup1.SrvAckRequested = true;
 800bf92:	4a94      	ldr	r2, [pc, #592]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bf94:	2101      	movs	r1, #1
 800bf96:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800bf9a:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800bf9e:	b912      	cbnz	r2, 800bfa6 <LoRaMacProcess+0x68e>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800bfa0:	4a90      	ldr	r2, [pc, #576]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800bfa2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bfa4:	6351      	str	r1, [r2, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bfa6:	4a8e      	ldr	r2, [pc, #568]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	f882 1418 	strb.w	r1, [r2, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800bfae:	e7da      	b.n	800bf66 <LoRaMacProcess+0x64e>
        if( request == MCPS_CONFIRMED )
 800bfb0:	2901      	cmp	r1, #1
 800bfb2:	d105      	bne.n	800bfc0 <LoRaMacProcess+0x6a8>
            if( fCtrl.Bits.Ack == 1 )
 800bfb4:	f012 0f20 	tst.w	r2, #32
 800bfb8:	d0e4      	beq.n	800bf84 <LoRaMacProcess+0x66c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800bfba:	f001 fe1b 	bl	800dbf4 <LoRaMacCommandsRemoveStickyAnsCmds>
 800bfbe:	e7e1      	b.n	800bf84 <LoRaMacProcess+0x66c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800bfc0:	f001 fe18 	bl	800dbf4 <LoRaMacCommandsRemoveStickyAnsCmds>
 800bfc4:	e7de      	b.n	800bf84 <LoRaMacProcess+0x66c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bfc6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800bfca:	4e85      	ldr	r6, [pc, #532]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bfcc:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	f002 020f 	and.w	r2, r2, #15
 800bfd8:	2100      	movs	r1, #0
 800bfda:	a81a      	add	r0, sp, #104	; 0x68
 800bfdc:	f7fe fd00 	bl	800a9e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bfe0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800bfe4:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800bfe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bfea:	f8c6 3420 	str.w	r3, [r6, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800bfee:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800bff2:	f886 3424 	strb.w	r3, [r6, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800bff6:	2301      	movs	r3, #1
 800bff8:	f886 3425 	strb.w	r3, [r6, #1061]	; 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800bffc:	4a78      	ldr	r2, [pc, #480]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800bffe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c002:	f043 0302 	orr.w	r3, r3, #2
 800c006:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800c00a:	e055      	b.n	800c0b8 <LoRaMacProcess+0x7a0>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c00c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800c010:	4e73      	ldr	r6, [pc, #460]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c012:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	462b      	mov	r3, r5
 800c01a:	f002 020f 	and.w	r2, r2, #15
 800c01e:	2100      	movs	r1, #0
 800c020:	a81a      	add	r0, sp, #104	; 0x68
 800c022:	f7fe fcdd 	bl	800a9e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c026:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800c02a:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    break;
 800c02e:	e7e5      	b.n	800bffc <LoRaMacProcess+0x6e4>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c030:	4e6b      	ldr	r6, [pc, #428]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c032:	f896 347f 	ldrb.w	r3, [r6, #1151]	; 0x47f
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	462b      	mov	r3, r5
 800c03a:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800c03e:	2100      	movs	r1, #0
 800c040:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c042:	f7fe fccd 	bl	800a9e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c046:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800c04a:	f886 341b 	strb.w	r3, [r6, #1051]	; 0x41b
                    break;
 800c04e:	e7d5      	b.n	800bffc <LoRaMacProcess+0x6e4>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c050:	4b63      	ldr	r3, [pc, #396]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c052:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800c056:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c05a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c05c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c060:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800c064:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 800c06e:	e7c5      	b.n	800bffc <LoRaMacProcess+0x6e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c070:	4b5b      	ldr	r3, [pc, #364]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 800c078:	f7fe fc96 	bl	800a9a8 <PrepareRxDoneAbort>
                    break;
 800c07c:	e7be      	b.n	800bffc <LoRaMacProcess+0x6e4>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c07e:	f108 32ff 	add.w	r2, r8, #4294967295
 800c082:	4d57      	ldr	r5, [pc, #348]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c084:	f505 760e 	add.w	r6, r5, #568	; 0x238
 800c088:	b292      	uxth	r2, r2
 800c08a:	f109 0101 	add.w	r1, r9, #1
 800c08e:	4630      	mov	r0, r6
 800c090:	f003 ff0e 	bl	800feb0 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c094:	2303      	movs	r3, #3
 800c096:	f885 3418 	strb.w	r3, [r5, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	f885 3419 	strb.w	r3, [r5, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c0a0:	f8c5 6420 	str.w	r6, [r5, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c0a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0a8:	f885 8424 	strb.w	r8, [r5, #1060]	; 0x424
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c0ac:	f895 3481 	ldrb.w	r3, [r5, #1153]	; 0x481
 800c0b0:	f043 0302 	orr.w	r3, r3, #2
 800c0b4:	f885 3481 	strb.w	r3, [r5, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 800c0b8:	4b49      	ldr	r3, [pc, #292]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c0ba:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800c0be:	b173      	cbz	r3, 800c0de <LoRaMacProcess+0x7c6>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c0c0:	4b47      	ldr	r3, [pc, #284]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c0c2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c0c6:	b17b      	cbz	r3, 800c0e8 <LoRaMacProcess+0x7d0>
            OnAckTimeoutTimerEvent( NULL );
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f7fe fc4d 	bl	800a968 <OnAckTimeoutTimerEvent>
 800c0ce:	e00b      	b.n	800c0e8 <LoRaMacProcess+0x7d0>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0d0:	4b43      	ldr	r3, [pc, #268]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 800c0d8:	f7fe fc66 	bl	800a9a8 <PrepareRxDoneAbort>
            break;
 800c0dc:	e7ec      	b.n	800c0b8 <LoRaMacProcess+0x7a0>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c0de:	4b41      	ldr	r3, [pc, #260]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800c0e0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d009      	beq.n	800c0fc <LoRaMacProcess+0x7e4>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c0e8:	4a3d      	ldr	r2, [pc, #244]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c0ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c0ee:	f043 0310 	orr.w	r3, r3, #16
 800c0f2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800c0f6:	f7fe fbcf 	bl	800a898 <UpdateRxSlotIdleState>
 800c0fa:	e422      	b.n	800b942 <LoRaMacProcess+0x2a>
            OnAckTimeoutTimerEvent( NULL );
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f7fe fc33 	bl	800a968 <OnAckTimeoutTimerEvent>
 800c102:	e7f1      	b.n	800c0e8 <LoRaMacProcess+0x7d0>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c104:	4b37      	ldr	r3, [pc, #220]	; (800c1e4 <LoRaMacProcess+0x8cc>)
 800c106:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d002      	beq.n	800c114 <LoRaMacProcess+0x7fc>
        Radio.Sleep( );
 800c10e:	4b36      	ldr	r3, [pc, #216]	; (800c1e8 <LoRaMacProcess+0x8d0>)
 800c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c112:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800c114:	f7fe fbc0 	bl	800a898 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c118:	4d31      	ldr	r5, [pc, #196]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c11a:	2002      	movs	r0, #2
 800c11c:	f885 0435 	strb.w	r0, [r5, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c120:	f001 fe80 	bl	800de24 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c124:	f895 3410 	ldrb.w	r3, [r5, #1040]	; 0x410
 800c128:	b113      	cbz	r3, 800c130 <LoRaMacProcess+0x818>
        MacCtx.AckTimeoutRetry = true;
 800c12a:	2201      	movs	r2, #1
 800c12c:	f885 240f 	strb.w	r2, [r5, #1039]	; 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c130:	4a2b      	ldr	r2, [pc, #172]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c132:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c136:	f043 0310 	orr.w	r3, r3, #16
 800c13a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800c13e:	e404      	b.n	800b94a <LoRaMacProcess+0x32>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c140:	2106      	movs	r1, #6
 800c142:	2005      	movs	r0, #5
 800c144:	f7fe ff1c 	bl	800af80 <HandleRadioRxErrorTimeout>
}
 800c148:	e403      	b.n	800b952 <LoRaMacProcess+0x3a>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c14a:	2104      	movs	r1, #4
 800c14c:	2003      	movs	r0, #3
 800c14e:	f7fe ff17 	bl	800af80 <HandleRadioRxErrorTimeout>
}
 800c152:	e402      	b.n	800b95a <LoRaMacProcess+0x42>
    MacCtx.AllowRequests = requestState;
 800c154:	4a22      	ldr	r2, [pc, #136]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c156:	2100      	movs	r1, #0
 800c158:	f882 1482 	strb.w	r1, [r2, #1154]	; 0x482
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c15c:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800c160:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c164:	d004      	beq.n	800c170 <LoRaMacProcess+0x858>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c166:	f022 0282 	bic.w	r2, r2, #130	; 0x82
 800c16a:	491d      	ldr	r1, [pc, #116]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c16c:	f8c1 2340 	str.w	r2, [r1, #832]	; 0x340
        if( IsRequestPending( ) > 0 )
 800c170:	f013 0f05 	tst.w	r3, #5
 800c174:	d015      	beq.n	800c1a2 <LoRaMacProcess+0x88a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c176:	200c      	movs	r0, #12
 800c178:	f001 fe76 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800c17c:	b188      	cbz	r0, 800c1a2 <LoRaMacProcess+0x88a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c17e:	4b18      	ldr	r3, [pc, #96]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c180:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c184:	f013 0f01 	tst.w	r3, #1
 800c188:	f040 81d1 	bne.w	800c52e <LoRaMacProcess+0xc16>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c18c:	f013 0f04 	tst.w	r3, #4
 800c190:	d00d      	beq.n	800c1ae <LoRaMacProcess+0x896>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c192:	4a13      	ldr	r2, [pc, #76]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c194:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c198:	f023 0302 	bic.w	r3, r3, #2
 800c19c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        if( noTx == 0x00 )
 800c1a0:	e00c      	b.n	800c1bc <LoRaMacProcess+0x8a4>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c1a4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c1a8:	f013 0f04 	tst.w	r3, #4
 800c1ac:	d11e      	bne.n	800c1ec <LoRaMacProcess+0x8d4>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c1ae:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c1b0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c1b4:	f013 0f01 	tst.w	r3, #1
 800c1b8:	f040 81c3 	bne.w	800c542 <LoRaMacProcess+0xc2a>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c1bc:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c1be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f040 8198 	bne.w	800c4f8 <LoRaMacProcess+0xbe0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c1ca:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c1ce:	f014 0f04 	tst.w	r4, #4
 800c1d2:	f040 8168 	bne.w	800c4a6 <LoRaMacProcess+0xb8e>
    MacCtx.AllowRequests = requestState;
 800c1d6:	4b02      	ldr	r3, [pc, #8]	; (800c1e0 <LoRaMacProcess+0x8c8>)
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.MlmeReq == 1 )
 800c1de:	e182      	b.n	800c4e6 <LoRaMacProcess+0xbce>
 800c1e0:	20000900 	.word	0x20000900
 800c1e4:	20000e08 	.word	0x20000e08
 800c1e8:	08013dd0 	.word	0x08013dd0
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f001 fe3b 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800c1f2:	b178      	cbz	r0, 800c214 <LoRaMacProcess+0x8fc>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f001 fe01 	bl	800ddfc <LoRaMacConfirmQueueGetStatus>
 800c1fa:	b918      	cbnz	r0, 800c204 <LoRaMacProcess+0x8ec>
                MacCtx.ChannelsNbTransCounter = 0;
 800c1fc:	4bc4      	ldr	r3, [pc, #784]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c204:	4ac2      	ldr	r2, [pc, #776]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c206:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c20a:	f023 0302 	bic.w	r3, r3, #2
 800c20e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c212:	e7cc      	b.n	800c1ae <LoRaMacProcess+0x896>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c214:	2006      	movs	r0, #6
 800c216:	f001 fe27 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
 800c21a:	b138      	cbz	r0, 800c22c <LoRaMacProcess+0x914>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c21c:	4abc      	ldr	r2, [pc, #752]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c21e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c222:	f023 0302 	bic.w	r3, r3, #2
 800c226:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c22a:	e7c0      	b.n	800c1ae <LoRaMacProcess+0x896>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800c22c:	2007      	movs	r0, #7
 800c22e:	f001 fe1b 	bl	800de68 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c232:	2800      	cmp	r0, #0
 800c234:	d0bb      	beq.n	800c1ae <LoRaMacProcess+0x896>
 800c236:	e7f1      	b.n	800c21c <LoRaMacProcess+0x904>
    if( MacCtx.ChannelsNbTransCounter >=
 800c238:	4ab5      	ldr	r2, [pc, #724]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c23a:	f892 140c 	ldrb.w	r1, [r2, #1036]	; 0x40c
 800c23e:	4ab5      	ldr	r2, [pc, #724]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c240:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800c244:	4291      	cmp	r1, r2
 800c246:	f080 8108 	bcs.w	800c45a <LoRaMacProcess+0xb42>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c24a:	f013 0f02 	tst.w	r3, #2
 800c24e:	f000 8184 	beq.w	800c55a <LoRaMacProcess+0xc42>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c252:	4bb0      	ldr	r3, [pc, #704]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c254:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 80fe 	beq.w	800c45a <LoRaMacProcess+0xb42>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800c25e:	4bac      	ldr	r3, [pc, #688]	; (800c510 <LoRaMacProcess+0xbf8>)
        if( stopRetransmission == true )
 800c260:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800c264:	2b00      	cmp	r3, #0
 800c266:	f040 8178 	bne.w	800c55a <LoRaMacProcess+0xc42>
 800c26a:	e0f6      	b.n	800c45a <LoRaMacProcess+0xb42>
            if( MacCtx.AckTimeoutRetry == true )
 800c26c:	4aa8      	ldr	r2, [pc, #672]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c26e:	f892 240f 	ldrb.w	r2, [r2, #1039]	; 0x40f
 800c272:	2a00      	cmp	r2, #0
 800c274:	f000 8152 	beq.w	800c51c <LoRaMacProcess+0xc04>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800c278:	49a5      	ldr	r1, [pc, #660]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c27a:	f891 240e 	ldrb.w	r2, [r1, #1038]	; 0x40e
 800c27e:	f891 140d 	ldrb.w	r1, [r1, #1037]	; 0x40d
 800c282:	4291      	cmp	r1, r2
 800c284:	f240 80da 	bls.w	800c43c <LoRaMacProcess+0xb24>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c288:	f013 0f02 	tst.w	r3, #2
 800c28c:	f000 80b2 	beq.w	800c3f4 <LoRaMacProcess+0xadc>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c290:	4b9f      	ldr	r3, [pc, #636]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c292:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c296:	499f      	ldr	r1, [pc, #636]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c298:	f891 112a 	ldrb.w	r1, [r1, #298]	; 0x12a
 800c29c:	b9c9      	cbnz	r1, 800c2d2 <LoRaMacProcess+0x9ba>
                    if( stopRetransmission == false )
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 80ae 	beq.w	800c400 <LoRaMacProcess+0xae8>
 800c2a4:	e0d4      	b.n	800c450 <LoRaMacProcess+0xb38>
static void AckTimeoutRetriesFinalize( void )
{
    if( MacCtx.McpsConfirm.AckReceived == false )
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800c2ac:	4b99      	ldr	r3, [pc, #612]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c2ae:	f503 7208 	add.w	r2, r3, #544	; 0x220
 800c2b2:	9216      	str	r2, [sp, #88]	; 0x58
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800c2b4:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 800c2b8:	9217      	str	r2, [sp, #92]	; 0x5c
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c2ba:	a916      	add	r1, sp, #88	; 0x58
 800c2bc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c2c0:	f002 fb12 	bl	800e8e8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800c2c4:	4b92      	ldr	r3, [pc, #584]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 800c2cc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800c2d0:	e0be      	b.n	800c450 <LoRaMacProcess+0xb38>
        if( stopRetransmission == true )
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 8141 	beq.w	800c55a <LoRaMacProcess+0xc42>
 800c2d8:	e0bf      	b.n	800c45a <LoRaMacProcess+0xb42>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c2da:	488f      	ldr	r0, [pc, #572]	; (800c518 <LoRaMacProcess+0xc00>)
 800c2dc:	f001 fdd0 	bl	800de80 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c2e0:	f001 fe06 	bl	800def0 <LoRaMacConfirmQueueGetCnt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f000 80fe 	beq.w	800c4e6 <LoRaMacProcess+0xbce>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c2ea:	4a89      	ldr	r2, [pc, #548]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c2ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c2f0:	f043 0304 	orr.w	r3, r3, #4
 800c2f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800c2f8:	e0f5      	b.n	800c4e6 <LoRaMacProcess+0xbce>
        OpenContinuousRxCWindow( );
 800c2fa:	f7ff f895 	bl	800b428 <OpenContinuousRxCWindow>
 800c2fe:	f7ff bb65 	b.w	800b9cc <LoRaMacProcess+0xb4>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800c302:	4b83      	ldr	r3, [pc, #524]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c304:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c308:	f36f 1245 	bfc	r2, #5, #1
 800c30c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    if( MacCtx.MacState != LORAMAC_IDLE )
 800c310:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f ab60 	bne.w	800b9da <LoRaMacProcess+0xc2>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800c31a:	4c7e      	ldr	r4, [pc, #504]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c31c:	2124      	movs	r1, #36	; 0x24
 800c31e:	4620      	mov	r0, r4
 800c320:	f003 fdea 	bl	800fef8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c326:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 800c328:	bf1d      	ittte	ne
 800c32a:	4623      	movne	r3, r4
 800c32c:	6258      	strne	r0, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800c32e:	2401      	movne	r4, #1
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c330:	2400      	moveq	r4, #0
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800c332:	4d78      	ldr	r5, [pc, #480]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c334:	211c      	movs	r1, #28
 800c336:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800c33a:	f003 fddd 	bl	800fef8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800c33e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c340:	4298      	cmp	r0, r3
 800c342:	d002      	beq.n	800c34a <LoRaMacProcess+0xa32>
        nvmData->MacGroup1.Crc32 = crc;
 800c344:	6468      	str	r0, [r5, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800c346:	f044 0402 	orr.w	r4, r4, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800c34a:	4d72      	ldr	r5, [pc, #456]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c34c:	21fc      	movs	r1, #252	; 0xfc
 800c34e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800c352:	f003 fdd1 	bl	800fef8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800c356:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 800c35a:	4298      	cmp	r0, r3
 800c35c:	d003      	beq.n	800c366 <LoRaMacProcess+0xa4e>
        nvmData->MacGroup2.Crc32 = crc;
 800c35e:	f8c5 0144 	str.w	r0, [r5, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800c362:	f044 0404 	orr.w	r4, r4, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800c366:	4d6b      	ldr	r5, [pc, #428]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c368:	21d4      	movs	r1, #212	; 0xd4
 800c36a:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800c36e:	f003 fdc3 	bl	800fef8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800c372:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800c376:	4298      	cmp	r0, r3
 800c378:	d003      	beq.n	800c382 <LoRaMacProcess+0xa6a>
        nvmData->SecureElement.Crc32 = crc;
 800c37a:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800c37e:	f044 0408 	orr.w	r4, r4, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800c382:	4d64      	ldr	r5, [pc, #400]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c384:	2190      	movs	r1, #144	; 0x90
 800c386:	f505 7008 	add.w	r0, r5, #544	; 0x220
 800c38a:	f003 fdb5 	bl	800fef8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800c38e:	f8d5 32b0 	ldr.w	r3, [r5, #688]	; 0x2b0
 800c392:	4298      	cmp	r0, r3
 800c394:	d003      	beq.n	800c39e <LoRaMacProcess+0xa86>
        nvmData->RegionGroup1.Crc32 = crc;
 800c396:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800c39a:	f044 0410 	orr.w	r4, r4, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800c39e:	4d5d      	ldr	r5, [pc, #372]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c3a0:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800c3a4:	f505 702d 	add.w	r0, r5, #692	; 0x2b4
 800c3a8:	f003 fda6 	bl	800fef8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800c3ac:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
 800c3b0:	4298      	cmp	r0, r3
 800c3b2:	d003      	beq.n	800c3bc <LoRaMacProcess+0xaa4>
        nvmData->RegionGroup2.Crc32 = crc;
 800c3b4:	f8c5 074c 	str.w	r0, [r5, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800c3b8:	f044 0420 	orr.w	r4, r4, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800c3bc:	4d55      	ldr	r5, [pc, #340]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c3be:	2114      	movs	r1, #20
 800c3c0:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
 800c3c4:	f003 fd98 	bl	800fef8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800c3c8:	f8d5 3764 	ldr.w	r3, [r5, #1892]	; 0x764
 800c3cc:	4298      	cmp	r0, r3
 800c3ce:	d003      	beq.n	800c3d8 <LoRaMacProcess+0xac0>
        nvmData->ClassB.Crc32 = crc;
 800c3d0:	f8c5 0764 	str.w	r0, [r5, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800c3d4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800c3d8:	4b4d      	ldr	r3, [pc, #308]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c3da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f aafb 	beq.w	800b9da <LoRaMacProcess+0xc2>
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f43f aaf7 	beq.w	800b9da <LoRaMacProcess+0xc2>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4798      	blx	r3
}
 800c3f0:	f7ff baf3 	b.w	800b9da <LoRaMacProcess+0xc2>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c3f4:	4b47      	ldr	r3, [pc, #284]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c3f6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f040 80ad 	bne.w	800c55a <LoRaMacProcess+0xc42>
        MacCtx.AckTimeoutRetriesCounter++;
 800c400:	1c53      	adds	r3, r2, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	4a42      	ldr	r2, [pc, #264]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c406:	f882 340e 	strb.w	r3, [r2, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800c40a:	f013 0f01 	tst.w	r3, #1
 800c40e:	f000 80a4 	beq.w	800c55a <LoRaMacProcess+0xc42>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c412:	2322      	movs	r3, #34	; 0x22
 800c414:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c418:	4c3e      	ldr	r4, [pc, #248]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c41a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800c41e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c422:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800c426:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c42a:	a916      	add	r1, sp, #88	; 0x58
 800c42c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c430:	f002 fa43 	bl	800e8ba <RegionGetPhyParam>
 800c434:	900c      	str	r0, [sp, #48]	; 0x30
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800c436:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800c43a:	e08e      	b.n	800c55a <LoRaMacProcess+0xc42>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c43c:	4b35      	ldr	r3, [pc, #212]	; (800c514 <LoRaMacProcess+0xbfc>)
 800c43e:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800c442:	b953      	cbnz	r3, 800c45a <LoRaMacProcess+0xb42>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800c444:	4b32      	ldr	r3, [pc, #200]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c446:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f43f af2b 	beq.w	800c2a6 <LoRaMacProcess+0x98e>
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800c450:	4b2f      	ldr	r3, [pc, #188]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c452:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 800c456:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            TimerStop( &MacCtx.TxDelayedTimer );
 800c45a:	4c2d      	ldr	r4, [pc, #180]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c45c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c460:	f006 fab6 	bl	80129d0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c464:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800c468:	f023 0320 	bic.w	r3, r3, #32
 800c46c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800c470:	f7fe fa20 	bl	800a8b4 <StopRetransmission>
 800c474:	e07d      	b.n	800c572 <LoRaMacProcess+0xc5a>
    switch( addrID )
 800c476:	f1bb 0f01 	cmp.w	fp, #1
 800c47a:	f43f ad28 	beq.w	800bece <LoRaMacProcess+0x5b6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c47e:	4b24      	ldr	r3, [pc, #144]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c486:	9a07      	ldr	r2, [sp, #28]
 800c488:	4b21      	ldr	r3, [pc, #132]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c48a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c48e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
                PrepareRxDoneAbort( );
 800c492:	f7fe fa89 	bl	800a9a8 <PrepareRxDoneAbort>
                return;
 800c496:	f7ff ba54 	b.w	800b942 <LoRaMacProcess+0x2a>
        *fType = FRAME_TYPE_A;
 800c49a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800c49e:	e08a      	b.n	800c5b6 <LoRaMacProcess+0xc9e>
        *fType = FRAME_TYPE_B;
 800c4a0:	f04f 0a01 	mov.w	sl, #1
 800c4a4:	e087      	b.n	800c5b6 <LoRaMacProcess+0xc9e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c4a6:	4b1a      	ldr	r3, [pc, #104]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c4a8:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c4ac:	f36f 0282 	bfc	r2, #2, #1
 800c4b0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.McpsReq == 1 )
 800c4ba:	e010      	b.n	800c4de <LoRaMacProcess+0xbc6>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c4bc:	4b14      	ldr	r3, [pc, #80]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c4be:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c4c2:	f36f 0282 	bfc	r2, #2, #1
 800c4c6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c4d0:	480f      	ldr	r0, [pc, #60]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c4d2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f200 4034 	addw	r0, r0, #1076	; 0x434
 800c4dc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800c4de:	f014 0f04 	tst.w	r4, #4
 800c4e2:	f47f aefa 	bne.w	800c2da <LoRaMacProcess+0x9c2>
        LoRaMacClassBResumeBeaconing( );
 800c4e6:	f001 faa2 	bl	800da2e <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c4ea:	4b09      	ldr	r3, [pc, #36]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c4ec:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c4f0:	f36f 1204 	bfc	r2, #4, #1
 800c4f4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.AllowRequests = requestState;
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <LoRaMacProcess+0xbf8>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c500:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c504:	f042 0220 	orr.w	r2, r2, #32
 800c508:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800c50c:	f7ff ba2e 	b.w	800b96c <LoRaMacProcess+0x54>
 800c510:	20000900 	.word	0x20000900
 800c514:	20000e08 	.word	0x20000e08
 800c518:	20000d48 	.word	0x20000d48
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c51c:	4b35      	ldr	r3, [pc, #212]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c51e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e8      	bne.n	800c4f8 <LoRaMacProcess+0xbe0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c526:	4b33      	ldr	r3, [pc, #204]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c528:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800c52c:	e02d      	b.n	800c58a <LoRaMacProcess+0xc72>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c52e:	4b31      	ldr	r3, [pc, #196]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c530:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c534:	f013 0f04 	tst.w	r3, #4
 800c538:	f47f ae58 	bne.w	800c1ec <LoRaMacProcess+0x8d4>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c53c:	4b2d      	ldr	r3, [pc, #180]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c53e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c542:	4a2c      	ldr	r2, [pc, #176]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c544:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 800c548:	2a00      	cmp	r2, #0
 800c54a:	f43f ae75 	beq.w	800c238 <LoRaMacProcess+0x920>
 800c54e:	2a03      	cmp	r2, #3
 800c550:	f43f ae72 	beq.w	800c238 <LoRaMacProcess+0x920>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c554:	2a01      	cmp	r2, #1
 800c556:	f43f ae89 	beq.w	800c26c <LoRaMacProcess+0x954>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c55a:	4b26      	ldr	r3, [pc, #152]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c55c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800c560:	f36f 1204 	bfc	r2, #4, #1
 800c564:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800c568:	2000      	movs	r0, #0
 800c56a:	f883 040f 	strb.w	r0, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 800c56e:	f7fe ff33 	bl	800b3d8 <OnTxDelayedTimerEvent>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c572:	4b20      	ldr	r3, [pc, #128]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c574:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1bd      	bne.n	800c4f8 <LoRaMacProcess+0xbe0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c57c:	4b1d      	ldr	r3, [pc, #116]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c57e:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800c582:	f014 0f01 	tst.w	r4, #1
 800c586:	f43f ae22 	beq.w	800c1ce <LoRaMacProcess+0x8b6>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c58a:	4a1a      	ldr	r2, [pc, #104]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c58c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c590:	f36f 0300 	bfc	r3, #0, #1
 800c594:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c598:	f013 0f04 	tst.w	r3, #4
 800c59c:	d18e      	bne.n	800c4bc <LoRaMacProcess+0xba4>
    MacCtx.AllowRequests = requestState;
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <LoRaMacProcess+0xcdc>)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
        if( reqEvents.Bits.McpsReq == 1 )
 800c5a6:	e793      	b.n	800c4d0 <LoRaMacProcess+0xbb8>
    else if( macMsg->FRMPayloadSize == 0 )
 800c5a8:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	f47f ac07 	bne.w	800bdc0 <LoRaMacProcess+0x4a8>
        *fType = FRAME_TYPE_B;
 800c5b2:	f04f 0a01 	mov.w	sl, #1
            downLinkCounter = 0;
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	9107      	str	r1, [sp, #28]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c5ba:	490f      	ldr	r1, [pc, #60]	; (800c5f8 <LoRaMacProcess+0xce0>)
 800c5bc:	f8d1 80ec 	ldr.w	r8, [r1, #236]	; 0xec
 800c5c0:	4543      	cmp	r3, r8
 800c5c2:	f43f ac06 	beq.w	800bdd2 <LoRaMacProcess+0x4ba>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800c5c6:	2315      	movs	r3, #21
 800c5c8:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c5cc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800c5f8 <LoRaMacProcess+0xce0>
 800c5d0:	a908      	add	r1, sp, #32
 800c5d2:	f898 0048 	ldrb.w	r0, [r8, #72]	; 0x48
 800c5d6:	f002 f970 	bl	800e8ba <RegionGetPhyParam>
 800c5da:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800c5dc:	b281      	uxth	r1, r0
 800c5de:	f898 312a 	ldrb.w	r3, [r8, #298]	; 0x12a
 800c5e2:	f04f 0b01 	mov.w	fp, #1
            if( lrWanVersion.Fields.Minor == 1 )
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	f43f ac75 	beq.w	800bed6 <LoRaMacProcess+0x5be>
 800c5ec:	46b8      	mov	r8, r7
                *fCntID = FCNT_DOWN;
 800c5ee:	f04f 0903 	mov.w	r9, #3
 800c5f2:	e41a      	b.n	800be2a <LoRaMacProcess+0x512>
 800c5f4:	20000900 	.word	0x20000900
 800c5f8:	20000e08 	.word	0x20000e08

0800c5fc <LoRaMacInitialization>:
    }
    return 0;
}

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c600:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800c602:	2800      	cmp	r0, #0
 800c604:	f000 818c 	beq.w	800c920 <LoRaMacInitialization+0x324>
 800c608:	4688      	mov	r8, r1
 800c60a:	4691      	mov	r9, r2
 800c60c:	4607      	mov	r7, r0
 800c60e:	2900      	cmp	r1, #0
 800c610:	f000 8188 	beq.w	800c924 <LoRaMacInitialization+0x328>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800c614:	6803      	ldr	r3, [r0, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 8186 	beq.w	800c928 <LoRaMacInitialization+0x32c>
 800c61c:	6843      	ldr	r3, [r0, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 8184 	beq.w	800c92c <LoRaMacInitialization+0x330>
        ( primitives->MacMcpsIndication == NULL ) ||
 800c624:	6883      	ldr	r3, [r0, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 8182 	beq.w	800c930 <LoRaMacInitialization+0x334>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800c62c:	68c3      	ldr	r3, [r0, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 8180 	beq.w	800c934 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800c634:	4610      	mov	r0, r2
 800c636:	f002 f93b 	bl	800e8b0 <RegionIsActive>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f000 817c 	beq.w	800c938 <LoRaMacInitialization+0x33c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800c640:	4638      	mov	r0, r7
 800c642:	f001 fb73 	bl	800dd2c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800c646:	4cc3      	ldr	r4, [pc, #780]	; (800c954 <LoRaMacInitialization+0x358>)
 800c648:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 800c64c:	2100      	movs	r1, #0
 800c64e:	4620      	mov	r0, r4
 800c650:	f003 fc48 	bl	800fee4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800c654:	4dc0      	ldr	r5, [pc, #768]	; (800c958 <LoRaMacInitialization+0x35c>)
 800c656:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800c65a:	2100      	movs	r1, #0
 800c65c:	4628      	mov	r0, r5
 800c65e:	f003 fc41 	bl	800fee4 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800c662:	f04f 0a01 	mov.w	sl, #1
 800c666:	f885 a40e 	strb.w	sl, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 800c66a:	f885 a40d 	strb.w	sl, [r5, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800c66e:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800c672:	2600      	movs	r6, #0
 800c674:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800c678:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800c67c:	4bb7      	ldr	r3, [pc, #732]	; (800c95c <LoRaMacInitialization+0x360>)
 800c67e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c682:	230f      	movs	r3, #15
 800c684:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c688:	a908      	add	r1, sp, #32
 800c68a:	4648      	mov	r0, r9
 800c68c:	f002 f915 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800c690:	1b80      	subs	r0, r0, r6
 800c692:	bf18      	it	ne
 800c694:	2001      	movne	r0, #1
 800c696:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800c69a:	f04f 0b0a 	mov.w	fp, #10
 800c69e:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6a2:	a908      	add	r1, sp, #32
 800c6a4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6a8:	f002 f907 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800c6ac:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800c6b0:	f04f 0906 	mov.w	r9, #6
 800c6b4:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6b8:	a908      	add	r1, sp, #32
 800c6ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6be:	f002 f8fc 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800c6c2:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800c6c6:	2310      	movs	r3, #16
 800c6c8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6cc:	a908      	add	r1, sp, #32
 800c6ce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6d2:	f002 f8f2 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800c6d6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800c6da:	2311      	movs	r3, #17
 800c6dc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6e0:	a908      	add	r1, sp, #32
 800c6e2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6e6:	f002 f8e8 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800c6ea:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800c6ee:	2312      	movs	r3, #18
 800c6f0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6f4:	a908      	add	r1, sp, #32
 800c6f6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6fa:	f002 f8de 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800c6fe:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800c702:	2313      	movs	r3, #19
 800c704:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c708:	a908      	add	r1, sp, #32
 800c70a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c70e:	f002 f8d4 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800c712:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800c716:	2314      	movs	r3, #20
 800c718:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c71c:	a908      	add	r1, sp, #32
 800c71e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c722:	f002 f8ca 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800c726:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800c72a:	2317      	movs	r3, #23
 800c72c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c730:	a908      	add	r1, sp, #32
 800c732:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c736:	f002 f8c0 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800c73a:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800c73e:	2318      	movs	r3, #24
 800c740:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c744:	a908      	add	r1, sp, #32
 800c746:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c74a:	f002 f8b6 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800c74e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800c752:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800c756:	2319      	movs	r3, #25
 800c758:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c75c:	a908      	add	r1, sp, #32
 800c75e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c762:	f002 f8aa 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800c766:	b2c0      	uxtb	r0, r0
 800c768:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800c76c:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800c770:	231e      	movs	r3, #30
 800c772:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c776:	a908      	add	r1, sp, #32
 800c778:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c77c:	f002 f89d 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800c780:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800c784:	231f      	movs	r3, #31
 800c786:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c78a:	a908      	add	r1, sp, #32
 800c78c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c790:	f002 f893 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800c794:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800c798:	2320      	movs	r3, #32
 800c79a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c79e:	eb0d 0103 	add.w	r1, sp, r3
 800c7a2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c7a6:	f002 f888 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800c7aa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800c7ae:	2321      	movs	r3, #33	; 0x21
 800c7b0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c7b4:	a908      	add	r1, sp, #32
 800c7b6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c7ba:	f002 f87e 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800c7be:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800c7c2:	230b      	movs	r3, #11
 800c7c4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c7c8:	a908      	add	r1, sp, #32
 800c7ca:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c7ce:	f002 f874 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800c7d2:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800c7d6:	230c      	movs	r3, #12
 800c7d8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c7dc:	a908      	add	r1, sp, #32
 800c7de:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c7e2:	f002 f86a 	bl	800e8ba <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800c7e6:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800c7ea:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800c7ee:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800c7f2:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800c7f6:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800c7fa:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800c7fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c802:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800c804:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800c808:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800c80a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c80e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800c810:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800c814:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800c816:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c81a:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800c81c:	f884 a068 	strb.w	sl, [r4, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800c820:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800c824:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800c828:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800c82a:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 800c82e:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c830:	a904      	add	r1, sp, #16
 800c832:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c836:	f002 f857 	bl	800e8e8 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800c83a:	f8c5 8348 	str.w	r8, [r5, #840]	; 0x348
    ResetMacParameters( false );
 800c83e:	4630      	mov	r0, r6
 800c840:	f7fe ff08 	bl	800b654 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800c844:	f884 a119 	strb.w	sl, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800c848:	f8c5 7344 	str.w	r7, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800c84c:	f885 6481 	strb.w	r6, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800c850:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800c854:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800c856:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800c858:	9600      	str	r6, [sp, #0]
 800c85a:	4b41      	ldr	r3, [pc, #260]	; (800c960 <LoRaMacInitialization+0x364>)
 800c85c:	4632      	mov	r2, r6
 800c85e:	f04f 31ff 	mov.w	r1, #4294967295
 800c862:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800c866:	f006 f84f 	bl	8012908 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800c86a:	9600      	str	r6, [sp, #0]
 800c86c:	4b3d      	ldr	r3, [pc, #244]	; (800c964 <LoRaMacInitialization+0x368>)
 800c86e:	4632      	mov	r2, r6
 800c870:	f04f 31ff 	mov.w	r1, #4294967295
 800c874:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800c878:	f006 f846 	bl	8012908 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800c87c:	9600      	str	r6, [sp, #0]
 800c87e:	4b3a      	ldr	r3, [pc, #232]	; (800c968 <LoRaMacInitialization+0x36c>)
 800c880:	4632      	mov	r2, r6
 800c882:	f04f 31ff 	mov.w	r1, #4294967295
 800c886:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800c88a:	f006 f83d 	bl	8012908 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800c88e:	9600      	str	r6, [sp, #0]
 800c890:	4b36      	ldr	r3, [pc, #216]	; (800c96c <LoRaMacInitialization+0x370>)
 800c892:	4632      	mov	r2, r6
 800c894:	f04f 31ff 	mov.w	r1, #4294967295
 800c898:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800c89c:	f006 f834 	bl	8012908 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800c8a0:	ae02      	add	r6, sp, #8
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f005 fd2e 	bl	8012304 <SysTimeGetMcuTime>
 800c8a8:	f504 7390 	add.w	r3, r4, #288	; 0x120
 800c8ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c8b0:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800c8b4:	4b2e      	ldr	r3, [pc, #184]	; (800c970 <LoRaMacInitialization+0x374>)
 800c8b6:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <LoRaMacInitialization+0x378>)
 800c8bc:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800c8c0:	4b2d      	ldr	r3, [pc, #180]	; (800c978 <LoRaMacInitialization+0x37c>)
 800c8c2:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800c8c6:	4b2d      	ldr	r3, [pc, #180]	; (800c97c <LoRaMacInitialization+0x380>)
 800c8c8:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800c8cc:	4b2c      	ldr	r3, [pc, #176]	; (800c980 <LoRaMacInitialization+0x384>)
 800c8ce:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800c8d2:	4b2c      	ldr	r3, [pc, #176]	; (800c984 <LoRaMacInitialization+0x388>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800c8da:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800c8dc:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800c8e0:	f7fc fec0 	bl	8009664 <SecureElementInit>
 800c8e4:	bb68      	cbnz	r0, 800c942 <LoRaMacInitialization+0x346>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f001 fc2a 	bl	800e140 <LoRaMacCryptoInit>
 800c8ec:	bb58      	cbnz	r0, 800c946 <LoRaMacInitialization+0x34a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800c8ee:	f001 f8b1 	bl	800da54 <LoRaMacCommandsInit>
 800c8f2:	bb50      	cbnz	r0, 800c94a <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800c8f4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800c8f8:	f001 fc86 	bl	800e208 <LoRaMacCryptoSetMulticastReference>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	bb30      	cbnz	r0, 800c94e <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800c900:	4d20      	ldr	r5, [pc, #128]	; (800c984 <LoRaMacInitialization+0x388>)
 800c902:	696b      	ldr	r3, [r5, #20]
 800c904:	4798      	blx	r3
 800c906:	f003 faab 	bl	800fe60 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c90a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c90c:	4a11      	ldr	r2, [pc, #68]	; (800c954 <LoRaMacInitialization+0x358>)
 800c90e:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800c912:	4798      	blx	r3
    Radio.Sleep( );
 800c914:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c916:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800c918:	4b0f      	ldr	r3, [pc, #60]	; (800c958 <LoRaMacInitialization+0x35c>)
 800c91a:	f883 a482 	strb.w	sl, [r3, #1154]	; 0x482
}
 800c91e:	e00c      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c920:	2403      	movs	r4, #3
 800c922:	e00a      	b.n	800c93a <LoRaMacInitialization+0x33e>
 800c924:	2403      	movs	r4, #3
 800c926:	e008      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c928:	2403      	movs	r4, #3
 800c92a:	e006      	b.n	800c93a <LoRaMacInitialization+0x33e>
 800c92c:	2403      	movs	r4, #3
 800c92e:	e004      	b.n	800c93a <LoRaMacInitialization+0x33e>
 800c930:	2403      	movs	r4, #3
 800c932:	e002      	b.n	800c93a <LoRaMacInitialization+0x33e>
 800c934:	2403      	movs	r4, #3
 800c936:	e000      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c938:	2409      	movs	r4, #9

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800c93a:	4620      	mov	r0, r4
 800c93c:	b00b      	add	sp, #44	; 0x2c
 800c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c942:	2411      	movs	r4, #17
 800c944:	e7f9      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c946:	2411      	movs	r4, #17
 800c948:	e7f7      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c94a:	2413      	movs	r4, #19
 800c94c:	e7f5      	b.n	800c93a <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c94e:	2411      	movs	r4, #17
 800c950:	e7f3      	b.n	800c93a <LoRaMacInitialization+0x33e>
 800c952:	bf00      	nop
 800c954:	20000e08 	.word	0x20000e08
 800c958:	20000900 	.word	0x20000900
 800c95c:	01000300 	.word	0x01000300
 800c960:	0800b3d9 	.word	0x0800b3d9
 800c964:	0800b529 	.word	0x0800b529
 800c968:	0800b4d9 	.word	0x0800b4d9
 800c96c:	0800a969 	.word	0x0800a969
 800c970:	0800b609 	.word	0x0800b609
 800c974:	0800b5c1 	.word	0x0800b5c1
 800c978:	0800a91d 	.word	0x0800a91d
 800c97c:	0800b599 	.word	0x0800b599
 800c980:	0800b571 	.word	0x0800b571
 800c984:	08013dd0 	.word	0x08013dd0

0800c988 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800c988:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800c98a:	2400      	movs	r4, #0
 800c98c:	4b03      	ldr	r3, [pc, #12]	; (800c99c <LoRaMacStart+0x14>)
 800c98e:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800c992:	f7fd ff81 	bl	800a898 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800c996:	4620      	mov	r0, r4
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	20000900 	.word	0x20000900

0800c9a0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800c9a0:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800c9a2:	f7fe ff9b 	bl	800b8dc <LoRaMacIsBusy>
 800c9a6:	b130      	cbz	r0, 800c9b6 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800c9a8:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <LoRaMacStop+0x34>)
 800c9aa:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800c9ae:	3801      	subs	r0, #1
 800c9b0:	bf18      	it	ne
 800c9b2:	2001      	movne	r0, #1
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
}
 800c9b4:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c9b6:	4b08      	ldr	r3, [pc, #32]	; (800c9d8 <LoRaMacStop+0x38>)
 800c9b8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d005      	beq.n	800c9cc <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800c9c0:	4b04      	ldr	r3, [pc, #16]	; (800c9d4 <LoRaMacStop+0x34>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e7f3      	b.n	800c9b4 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800c9cc:	4b03      	ldr	r3, [pc, #12]	; (800c9dc <LoRaMacStop+0x3c>)
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	4798      	blx	r3
 800c9d2:	e7f5      	b.n	800c9c0 <LoRaMacStop+0x20>
 800c9d4:	20000900 	.word	0x20000900
 800c9d8:	20000e08 	.word	0x20000e08
 800c9dc:	08013dd0 	.word	0x08013dd0

0800c9e0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800c9e0:	b510      	push	{r4, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800c9e2:	4c0d      	ldr	r4, [pc, #52]	; (800ca18 <LoRaMacHalt+0x38>)
 800c9e4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c9e8:	f005 fff2 	bl	80129d0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800c9ec:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800c9f0:	f005 ffee 	bl	80129d0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c9f4:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c9f8:	f005 ffea 	bl	80129d0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800c9fc:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800ca00:	f005 ffe6 	bl	80129d0 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800ca04:	f001 f812 	bl	800da2c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <LoRaMacHalt+0x3c>)
 800ca0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0c:	4798      	blx	r3

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800ca14:	2000      	movs	r0, #0
 800ca16:	bd10      	pop	{r4, pc}
 800ca18:	20000900 	.word	0x20000900
 800ca1c:	08013dd0 	.word	0x08013dd0

0800ca20 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ca20:	b530      	push	{r4, r5, lr}
 800ca22:	b089      	sub	sp, #36	; 0x24
 800ca24:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ca26:	4b2e      	ldr	r3, [pc, #184]	; (800cae0 <LoRaMacQueryTxPossible+0xc0>)
 800ca28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca2a:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ca2c:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
 800ca30:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ca34:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800ca38:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800ca40:	2900      	cmp	r1, #0
 800ca42:	d049      	beq.n	800cad8 <LoRaMacQueryTxPossible+0xb8>
 800ca44:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800ca46:	4b26      	ldr	r3, [pc, #152]	; (800cae0 <LoRaMacQueryTxPossible+0xc0>)
 800ca48:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800ca4c:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800ca4e:	2100      	movs	r1, #0
 800ca50:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ca54:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800ca58:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ca5c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ca5e:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800ca62:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ca66:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800ca6a:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ca6e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800ca72:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ca76:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800ca7a:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ca7e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ca82:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800ca86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ca8a:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ca8e:	ab02      	add	r3, sp, #8
 800ca90:	f10d 0206 	add.w	r2, sp, #6
 800ca94:	f10d 0107 	add.w	r1, sp, #7
 800ca98:	a803      	add	r0, sp, #12
 800ca9a:	f000 ff39 	bl	800d910 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ca9e:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800caa2:	f7fd ff47 	bl	800a934 <GetMaxAppPayloadWithoutFOptsLength>
 800caa6:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800caa8:	4668      	mov	r0, sp
 800caaa:	f001 f8b9 	bl	800dc20 <LoRaMacCommandsGetSizeSerializedCmds>
 800caae:	b9a8      	cbnz	r0, 800cadc <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800cab0:	9a00      	ldr	r2, [sp, #0]
 800cab2:	2a0f      	cmp	r2, #15
 800cab4:	d80c      	bhi.n	800cad0 <LoRaMacQueryTxPossible+0xb0>
 800cab6:	786b      	ldrb	r3, [r5, #1]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d809      	bhi.n	800cad0 <LoRaMacQueryTxPossible+0xb0>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800cabc:	1a99      	subs	r1, r3, r2
 800cabe:	7029      	strb	r1, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800cac0:	4414      	add	r4, r2
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	bf2c      	ite	cs
 800cac6:	2000      	movcs	r0, #0
 800cac8:	2001      	movcc	r0, #1
 800caca:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800cacc:	b009      	add	sp, #36	; 0x24
 800cace:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800cad4:	2008      	movs	r0, #8
 800cad6:	e7f9      	b.n	800cacc <LoRaMacQueryTxPossible+0xac>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cad8:	2003      	movs	r0, #3
 800cada:	e7f7      	b.n	800cacc <LoRaMacQueryTxPossible+0xac>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cadc:	2013      	movs	r0, #19
 800cade:	e7f5      	b.n	800cacc <LoRaMacQueryTxPossible+0xac>
 800cae0:	20000e08 	.word	0x20000e08

0800cae4 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800cae4:	2800      	cmp	r0, #0
 800cae6:	f000 8142 	beq.w	800cd6e <LoRaMacMibGetRequestConfirm+0x28a>
{
 800caea:	b510      	push	{r4, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800caf0:	7800      	ldrb	r0, [r0, #0]
 800caf2:	283f      	cmp	r0, #63	; 0x3f
 800caf4:	f200 8137 	bhi.w	800cd66 <LoRaMacMibGetRequestConfirm+0x282>
 800caf8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800cafc:	00450040 	.word	0x00450040
 800cb00:	0050004b 	.word	0x0050004b
 800cb04:	005b0055 	.word	0x005b0055
 800cb08:	01350061 	.word	0x01350061
 800cb0c:	01350135 	.word	0x01350135
 800cb10:	01350135 	.word	0x01350135
 800cb14:	01350135 	.word	0x01350135
 800cb18:	00690135 	.word	0x00690135
 800cb1c:	0075006f 	.word	0x0075006f
 800cb20:	00890081 	.word	0x00890081
 800cb24:	00990091 	.word	0x00990091
 800cb28:	00a100ad 	.word	0x00a100ad
 800cb2c:	00bf00b9 	.word	0x00bf00b9
 800cb30:	00c900c4 	.word	0x00c900c4
 800cb34:	00d300ce 	.word	0x00d300ce
 800cb38:	00de00d8 	.word	0x00de00d8
 800cb3c:	00e400ea 	.word	0x00e400ea
 800cb40:	00f500f0 	.word	0x00f500f0
 800cb44:	010800fb 	.word	0x010800fb
 800cb48:	01050101 	.word	0x01050101
 800cb4c:	010e0135 	.word	0x010e0135
 800cb50:	01350135 	.word	0x01350135
 800cb54:	01350135 	.word	0x01350135
 800cb58:	01350135 	.word	0x01350135
 800cb5c:	01350135 	.word	0x01350135
 800cb60:	01350135 	.word	0x01350135
 800cb64:	01350135 	.word	0x01350135
 800cb68:	01350135 	.word	0x01350135
 800cb6c:	01170135 	.word	0x01170135
 800cb70:	0123011d 	.word	0x0123011d
 800cb74:	012f0129 	.word	0x012f0129
 800cb78:	013b013b 	.word	0x013b013b
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800cb7c:	4b7e      	ldr	r3, [pc, #504]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cb7e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cb82:	7123      	strb	r3, [r4, #4]
            break;
 800cb84:	e0f6      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cb86:	4b7c      	ldr	r3, [pc, #496]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cb88:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800cb8c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb8e:	2000      	movs	r0, #0
            break;
 800cb90:	e0f0      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800cb92:	6860      	ldr	r0, [r4, #4]
 800cb94:	f7fc fef2 	bl	800997c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cb98:	2000      	movs	r0, #0
            break;
 800cb9a:	e0eb      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800cb9c:	6860      	ldr	r0, [r4, #4]
 800cb9e:	f7fc ff0b 	bl	80099b8 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cba2:	2000      	movs	r0, #0
            break;
 800cba4:	e0e6      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800cba6:	4b74      	ldr	r3, [pc, #464]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cba8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800cbac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbae:	2000      	movs	r0, #0
            break;
 800cbb0:	e0e0      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800cbb2:	4b71      	ldr	r3, [pc, #452]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cbb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbb8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbba:	2000      	movs	r0, #0
            break;
 800cbbc:	e0da      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800cbbe:	1d21      	adds	r1, r4, #4
 800cbc0:	4b6d      	ldr	r3, [pc, #436]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cbc2:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800cbc6:	f7fc ff0f 	bl	80099e8 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbca:	2000      	movs	r0, #0
            break;
 800cbcc:	e0d2      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800cbce:	4b6a      	ldr	r3, [pc, #424]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cbd0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800cbd4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbd6:	2000      	movs	r0, #0
            break;
 800cbd8:	e0cc      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cbda:	4b67      	ldr	r3, [pc, #412]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cbdc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cbe0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbe2:	2000      	movs	r0, #0
            break;
 800cbe4:	e0c6      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800cbe6:	231d      	movs	r3, #29
 800cbe8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cbec:	a902      	add	r1, sp, #8
 800cbee:	4b62      	ldr	r3, [pc, #392]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cbf0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cbf4:	f001 fe61 	bl	800e8ba <RegionGetPhyParam>

            mibGet->Param.ChannelList = phyParam.Channels;
 800cbf8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cbfa:	2000      	movs	r0, #0
            break;
 800cbfc:	e0ba      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800cbfe:	3404      	adds	r4, #4
 800cc00:	4b5e      	ldr	r3, [pc, #376]	; (800cd7c <LoRaMacMibGetRequestConfirm+0x298>)
 800cc02:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc06:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc0a:	2000      	movs	r0, #0
            break;
 800cc0c:	e0b2      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800cc0e:	3404      	adds	r4, #4
 800cc10:	4b5b      	ldr	r3, [pc, #364]	; (800cd80 <LoRaMacMibGetRequestConfirm+0x29c>)
 800cc12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc16:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc1a:	2000      	movs	r0, #0
            break;
 800cc1c:	e0aa      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800cc1e:	3404      	adds	r4, #4
 800cc20:	4b58      	ldr	r3, [pc, #352]	; (800cd84 <LoRaMacMibGetRequestConfirm+0x2a0>)
 800cc22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc26:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc2a:	2000      	movs	r0, #0
            break;
 800cc2c:	e0a2      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800cc2e:	3404      	adds	r4, #4
 800cc30:	4b55      	ldr	r3, [pc, #340]	; (800cd88 <LoRaMacMibGetRequestConfirm+0x2a4>)
 800cc32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc36:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc3a:	2000      	movs	r0, #0
            break;
 800cc3c:	e09a      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800cc3e:	231b      	movs	r3, #27
 800cc40:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cc44:	a902      	add	r1, sp, #8
 800cc46:	4b4c      	ldr	r3, [pc, #304]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc48:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cc4c:	f001 fe35 	bl	800e8ba <RegionGetPhyParam>

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800cc50:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc52:	2000      	movs	r0, #0
            break;
 800cc54:	e08e      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800cc56:	231a      	movs	r3, #26
 800cc58:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cc5c:	a902      	add	r1, sp, #8
 800cc5e:	4b46      	ldr	r3, [pc, #280]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc60:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cc64:	f001 fe29 	bl	800e8ba <RegionGetPhyParam>

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800cc68:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc6a:	2000      	movs	r0, #0
            break;
 800cc6c:	e082      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800cc6e:	4b42      	ldr	r3, [pc, #264]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc70:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cc74:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc76:	2000      	movs	r0, #0
            break;
 800cc78:	e07c      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800cc7a:	4b3f      	ldr	r3, [pc, #252]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc80:	2000      	movs	r0, #0
            break;
 800cc82:	e077      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800cc84:	4b3c      	ldr	r3, [pc, #240]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc88:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc8a:	2000      	movs	r0, #0
            break;
 800cc8c:	e072      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800cc8e:	4b3a      	ldr	r3, [pc, #232]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc92:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc94:	2000      	movs	r0, #0
            break;
 800cc96:	e06d      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800cc98:	4b37      	ldr	r3, [pc, #220]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cc9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc9c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc9e:	2000      	movs	r0, #0
            break;
 800cca0:	e068      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800cca2:	4b35      	ldr	r3, [pc, #212]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cca6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cca8:	2000      	movs	r0, #0
            break;
 800ccaa:	e063      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ccac:	4b32      	ldr	r3, [pc, #200]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccae:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800ccb2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ccb4:	2000      	movs	r0, #0
            break;
 800ccb6:	e05d      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ccb8:	4b2f      	ldr	r3, [pc, #188]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccba:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ccbe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ccc0:	2000      	movs	r0, #0
            break;
 800ccc2:	e057      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ccc4:	4b2c      	ldr	r3, [pc, #176]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccc6:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800ccca:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cccc:	2000      	movs	r0, #0
            break;
 800ccce:	e051      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ccd0:	4b29      	ldr	r3, [pc, #164]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccd2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ccd6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ccd8:	2000      	movs	r0, #0
            break;
 800ccda:	e04b      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800ccdc:	4b26      	ldr	r3, [pc, #152]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cce0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cce2:	2000      	movs	r0, #0
            break;
 800cce4:	e046      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800cce6:	4b24      	ldr	r3, [pc, #144]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ccec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ccee:	2000      	movs	r0, #0
            break;
 800ccf0:	e040      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ccf2:	4b21      	ldr	r3, [pc, #132]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800ccf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ccfa:	2000      	movs	r0, #0
            break;
 800ccfc:	e03a      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800ccfe:	4b1e      	ldr	r3, [pc, #120]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd00:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd02:	2000      	movs	r0, #0
            break;
 800cd04:	e036      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 800cd06:	2000      	movs	r0, #0
 800cd08:	6060      	str	r0, [r4, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800cd0a:	e033      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800cd0c:	4b1a      	ldr	r3, [pc, #104]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cd12:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd14:	2000      	movs	r0, #0
            break;
 800cd16:	e02d      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800cd18:	4b17      	ldr	r3, [pc, #92]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd1a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800cd1e:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800cd20:	f001 fe8c 	bl	800ea3c <RegionGetVersion>
 800cd24:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd26:	2000      	movs	r0, #0
            break;
 800cd28:	e024      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800cd2a:	4b13      	ldr	r3, [pc, #76]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd30:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd32:	2000      	movs	r0, #0
            break;
 800cd34:	e01e      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800cd36:	4b10      	ldr	r3, [pc, #64]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd38:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800cd3c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd3e:	2000      	movs	r0, #0
            break;
 800cd40:	e018      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800cd42:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd44:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800cd48:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd4a:	2000      	movs	r0, #0
            break;
 800cd4c:	e012      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800cd4e:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd50:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800cd54:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd56:	2000      	movs	r0, #0
            break;
 800cd58:	e00c      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800cd5a:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <LoRaMacMibGetRequestConfirm+0x294>)
 800cd5c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800cd60:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cd62:	2000      	movs	r0, #0
            break;
 800cd64:	e006      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800cd66:	4620      	mov	r0, r4
 800cd68:	f000 fe64 	bl	800da34 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800cd6c:	e002      	b.n	800cd74 <LoRaMacMibGetRequestConfirm+0x290>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd6e:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800cd70:	4770      	bx	lr
    switch( mibGet->Type )
 800cd72:	2018      	movs	r0, #24
}
 800cd74:	b004      	add	sp, #16
 800cd76:	bd10      	pop	{r4, pc}
 800cd78:	20000e08 	.word	0x20000e08
 800cd7c:	20000e74 	.word	0x20000e74
 800cd80:	20000ebc 	.word	0x20000ebc
 800cd84:	20000e7c 	.word	0x20000e7c
 800cd88:	20000ec4 	.word	0x20000ec4

0800cd8c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	f000 8261 	beq.w	800d254 <LoRaMacMibSetRequestConfirm+0x4c8>
{
 800cd92:	b530      	push	{r4, r5, lr}
 800cd94:	b085      	sub	sp, #20
 800cd96:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800cd98:	4ba4      	ldr	r3, [pc, #656]	; (800d02c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800cd9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cd9e:	f013 0f02 	tst.w	r3, #2
 800cda2:	f040 8259 	bne.w	800d258 <LoRaMacMibSetRequestConfirm+0x4cc>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800cda6:	7805      	ldrb	r5, [r0, #0]
 800cda8:	2d3f      	cmp	r5, #63	; 0x3f
 800cdaa:	f200 8250 	bhi.w	800d24e <LoRaMacMibSetRequestConfirm+0x4c2>
 800cdae:	e8df f015 	tbh	[pc, r5, lsl #1]
 800cdb2:	0042      	.short	0x0042
 800cdb4:	004f0046 	.word	0x004f0046
 800cdb8:	005d0056 	.word	0x005d0056
 800cdbc:	00690063 	.word	0x00690063
 800cdc0:	00820077 	.word	0x00820077
 800cdc4:	0098008d 	.word	0x0098008d
 800cdc8:	00ae00a3 	.word	0x00ae00a3
 800cdcc:	00c400b9 	.word	0x00c400b9
 800cdd0:	00da00cf 	.word	0x00da00cf
 800cdd4:	00e0024e 	.word	0x00e0024e
 800cdd8:	011e0105 	.word	0x011e0105
 800cddc:	017e0155 	.word	0x017e0155
 800cde0:	018e016e 	.word	0x018e016e
 800cde4:	019e0199 	.word	0x019e0199
 800cde8:	01a801a3 	.word	0x01a801a3
 800cdec:	01b201ad 	.word	0x01b201ad
 800cdf0:	01f201c6 	.word	0x01f201c6
 800cdf4:	020501de 	.word	0x020501de
 800cdf8:	0214020c 	.word	0x0214020c
 800cdfc:	0040021a 	.word	0x0040021a
 800ce00:	0220024e 	.word	0x0220024e
 800ce04:	024e024e 	.word	0x024e024e
 800ce08:	024e024e 	.word	0x024e024e
 800ce0c:	024e024e 	.word	0x024e024e
 800ce10:	024e024e 	.word	0x024e024e
 800ce14:	024e024e 	.word	0x024e024e
 800ce18:	024e024e 	.word	0x024e024e
 800ce1c:	024e024e 	.word	0x024e024e
 800ce20:	024e024e 	.word	0x024e024e
 800ce24:	02360230 	.word	0x02360230
 800ce28:	0242023c 	.word	0x0242023c
 800ce2c:	02560248 	.word	0x02560248
 800ce30:	0256      	.short	0x0256
 800ce32:	2000      	movs	r0, #0
 800ce34:	e211      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ce36:	7900      	ldrb	r0, [r0, #4]
 800ce38:	f7fe fcca 	bl	800b7d0 <SwitchClass>
            break;
 800ce3c:	e20d      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ce3e:	7903      	ldrb	r3, [r0, #4]
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	f000 820e 	beq.w	800d262 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ce46:	4a7a      	ldr	r2, [pc, #488]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ce48:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	e204      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ce50:	6840      	ldr	r0, [r0, #4]
 800ce52:	f7fc fd85 	bl	8009960 <SecureElementSetDevEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ce56:	2800      	cmp	r0, #0
 800ce58:	bf18      	it	ne
 800ce5a:	2003      	movne	r0, #3
 800ce5c:	e1fd      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ce5e:	6840      	ldr	r0, [r0, #4]
 800ce60:	f7fc fd9a 	bl	8009998 <SecureElementSetJoinEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ce64:	2800      	cmp	r0, #0
 800ce66:	bf18      	it	ne
 800ce68:	4628      	movne	r0, r5
 800ce6a:	e1f6      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ce6c:	7902      	ldrb	r2, [r0, #4]
 800ce6e:	4b70      	ldr	r3, [pc, #448]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ce70:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ce74:	2000      	movs	r0, #0
            break;
 800ce76:	e1f0      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ce78:	6842      	ldr	r2, [r0, #4]
 800ce7a:	4b6d      	ldr	r3, [pc, #436]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ce7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ce80:	2000      	movs	r0, #0
            break;
 800ce82:	e1ea      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800ce84:	6841      	ldr	r1, [r0, #4]
 800ce86:	4b6a      	ldr	r3, [pc, #424]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ce88:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800ce8c:	f7fc fda2 	bl	80099d4 <SecureElementSetDevAddr>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f040 81e8 	bne.w	800d266 <LoRaMacMibSetRequestConfirm+0x4da>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ce96:	6862      	ldr	r2, [r4, #4]
 800ce98:	4b65      	ldr	r3, [pc, #404]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ce9a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800ce9e:	e1dc      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800cea0:	6841      	ldr	r1, [r0, #4]
 800cea2:	2900      	cmp	r1, #0
 800cea4:	f000 81e1 	beq.w	800d26a <LoRaMacMibSetRequestConfirm+0x4de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800cea8:	2000      	movs	r0, #0
 800ceaa:	f001 fb13 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	bf18      	it	ne
 800ceb2:	2011      	movne	r0, #17
 800ceb4:	e1d1      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ceb6:	6841      	ldr	r1, [r0, #4]
 800ceb8:	2900      	cmp	r1, #0
 800ceba:	f000 81d8 	beq.w	800d26e <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800cebe:	2001      	movs	r0, #1
 800cec0:	f001 fb08 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cec4:	2800      	cmp	r0, #0
 800cec6:	bf18      	it	ne
 800cec8:	2011      	movne	r0, #17
 800ceca:	e1c6      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800cecc:	6841      	ldr	r1, [r0, #4]
 800cece:	2900      	cmp	r1, #0
 800ced0:	f000 81cf 	beq.w	800d272 <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ced4:	2008      	movs	r0, #8
 800ced6:	f001 fafd 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ceda:	2800      	cmp	r0, #0
 800cedc:	bf18      	it	ne
 800cede:	2011      	movne	r0, #17
 800cee0:	e1bb      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800cee2:	6841      	ldr	r1, [r0, #4]
 800cee4:	2900      	cmp	r1, #0
 800cee6:	f000 81c6 	beq.w	800d276 <LoRaMacMibSetRequestConfirm+0x4ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ceea:	2009      	movs	r0, #9
 800ceec:	f001 faf2 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cef0:	2800      	cmp	r0, #0
 800cef2:	bf18      	it	ne
 800cef4:	2011      	movne	r0, #17
 800cef6:	e1b0      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800cef8:	6841      	ldr	r1, [r0, #4]
 800cefa:	2900      	cmp	r1, #0
 800cefc:	f000 81bd 	beq.w	800d27a <LoRaMacMibSetRequestConfirm+0x4ee>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800cf00:	200c      	movs	r0, #12
 800cf02:	f001 fae7 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cf06:	2800      	cmp	r0, #0
 800cf08:	bf18      	it	ne
 800cf0a:	2011      	movne	r0, #17
 800cf0c:	e1a5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800cf0e:	6841      	ldr	r1, [r0, #4]
 800cf10:	2900      	cmp	r1, #0
 800cf12:	f000 81b4 	beq.w	800d27e <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800cf16:	200d      	movs	r0, #13
 800cf18:	f001 fadc 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	bf18      	it	ne
 800cf20:	2011      	movne	r0, #17
 800cf22:	e19a      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800cf24:	6841      	ldr	r1, [r0, #4]
 800cf26:	2900      	cmp	r1, #0
 800cf28:	f000 81ab 	beq.w	800d282 <LoRaMacMibSetRequestConfirm+0x4f6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800cf2c:	200e      	movs	r0, #14
 800cf2e:	f001 fad1 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cf32:	2800      	cmp	r0, #0
 800cf34:	bf18      	it	ne
 800cf36:	2011      	movne	r0, #17
 800cf38:	e18f      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800cf3a:	6841      	ldr	r1, [r0, #4]
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	f000 81a2 	beq.w	800d286 <LoRaMacMibSetRequestConfirm+0x4fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800cf42:	200f      	movs	r0, #15
 800cf44:	f001 fac6 	bl	800e4d4 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	bf18      	it	ne
 800cf4c:	2011      	movne	r0, #17
 800cf4e:	e184      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800cf50:	7900      	ldrb	r0, [r0, #4]
 800cf52:	4b37      	ldr	r3, [pc, #220]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cf54:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800cf58:	4c36      	ldr	r4, [pc, #216]	; (800d034 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800cf5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf5c:	4798      	blx	r3
            Radio.Sleep( );
 800cf5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cf60:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cf62:	2000      	movs	r0, #0
            break;
 800cf64:	e179      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800cf66:	7902      	ldrb	r2, [r0, #4]
 800cf68:	4b31      	ldr	r3, [pc, #196]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cf6a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cf6e:	2000      	movs	r0, #0
            break;
 800cf70:	e173      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800cf72:	7a03      	ldrb	r3, [r0, #8]
 800cf74:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cf78:	4b2d      	ldr	r3, [pc, #180]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cf7a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cf7e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800cf82:	2207      	movs	r2, #7
 800cf84:	a901      	add	r1, sp, #4
 800cf86:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cf8a:	f001 fcb5 	bl	800e8f8 <RegionVerify>
 800cf8e:	b908      	cbnz	r0, 800cf94 <LoRaMacMibSetRequestConfirm+0x208>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cf90:	2003      	movs	r0, #3
 800cf92:	e162      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800cf94:	6863      	ldr	r3, [r4, #4]
 800cf96:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800cf98:	2200      	movs	r2, #0
 800cf9a:	a901      	add	r1, sp, #4
 800cf9c:	4b24      	ldr	r3, [pc, #144]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cf9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cfa2:	f001 fca9 	bl	800e8f8 <RegionVerify>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f000 816f 	beq.w	800d28a <LoRaMacMibSetRequestConfirm+0x4fe>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800cfac:	4b22      	ldr	r3, [pc, #136]	; (800d038 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800cfae:	3404      	adds	r4, #4
 800cfb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cfb4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e14e      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800cfbc:	7a03      	ldrb	r3, [r0, #8]
 800cfbe:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cfc2:	4b1b      	ldr	r3, [pc, #108]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cfc4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cfc8:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800cfcc:	2207      	movs	r2, #7
 800cfce:	a901      	add	r1, sp, #4
 800cfd0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cfd4:	f001 fc90 	bl	800e8f8 <RegionVerify>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	f000 8158 	beq.w	800d28e <LoRaMacMibSetRequestConfirm+0x502>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800cfde:	4b17      	ldr	r3, [pc, #92]	; (800d03c <LoRaMacMibSetRequestConfirm+0x2b0>)
 800cfe0:	3404      	adds	r4, #4
 800cfe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cfe6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cfea:	2000      	movs	r0, #0
 800cfec:	e135      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800cfee:	7a03      	ldrb	r3, [r0, #8]
 800cff0:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cff4:	4b0e      	ldr	r3, [pc, #56]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800cff6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cffa:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800cffe:	2207      	movs	r2, #7
 800d000:	a901      	add	r1, sp, #4
 800d002:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d006:	f001 fc77 	bl	800e8f8 <RegionVerify>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	f000 8141 	beq.w	800d292 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800d012:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800d016:	3404      	adds	r4, #4
 800d018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d01c:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800d020:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d024:	2b02      	cmp	r3, #2
 800d026:	d00b      	beq.n	800d040 <LoRaMacMibSetRequestConfirm+0x2b4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d028:	2000      	movs	r0, #0
 800d02a:	e116      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
 800d02c:	20000900 	.word	0x20000900
 800d030:	20000e08 	.word	0x20000e08
 800d034:	08013dd0 	.word	0x08013dd0
 800d038:	20000e74 	.word	0x20000e74
 800d03c:	20000ebc 	.word	0x20000ebc
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800d040:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800d044:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800d048:	2800      	cmp	r0, #0
 800d04a:	f000 8106 	beq.w	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800d04e:	4b98      	ldr	r3, [pc, #608]	; (800d2b0 <LoRaMacMibSetRequestConfirm+0x524>)
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800d054:	f7fe f9e8 	bl	800b428 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d058:	2000      	movs	r0, #0
 800d05a:	e0fe      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800d05c:	7a03      	ldrb	r3, [r0, #8]
 800d05e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d062:	4b94      	ldr	r3, [pc, #592]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d064:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d068:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800d06c:	2207      	movs	r2, #7
 800d06e:	a901      	add	r1, sp, #4
 800d070:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d074:	f001 fc40 	bl	800e8f8 <RegionVerify>
 800d078:	2800      	cmp	r0, #0
 800d07a:	f000 810c 	beq.w	800d296 <LoRaMacMibSetRequestConfirm+0x50a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800d07e:	4b8e      	ldr	r3, [pc, #568]	; (800d2b8 <LoRaMacMibSetRequestConfirm+0x52c>)
 800d080:	3404      	adds	r4, #4
 800d082:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d086:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d08a:	2000      	movs	r0, #0
 800d08c:	e0e5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800d08e:	6843      	ldr	r3, [r0, #4]
 800d090:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800d092:	2301      	movs	r3, #1
 800d094:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800d098:	a902      	add	r1, sp, #8
 800d09a:	4b86      	ldr	r3, [pc, #536]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d09c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d0a0:	f001 fc3d 	bl	800e91e <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	bf14      	ite	ne
 800d0a8:	2000      	movne	r0, #0
 800d0aa:	2003      	moveq	r0, #3
 800d0ac:	e0d5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800d0ae:	6843      	ldr	r3, [r0, #4]
 800d0b0:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800d0b8:	a902      	add	r1, sp, #8
 800d0ba:	4b7e      	ldr	r3, [pc, #504]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d0bc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d0c0:	f001 fc2d 	bl	800e91e <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	bf14      	ite	ne
 800d0c8:	2000      	movne	r0, #0
 800d0ca:	2003      	moveq	r0, #3
 800d0cc:	e0c5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800d0ce:	7902      	ldrb	r2, [r0, #4]
 800d0d0:	1e53      	subs	r3, r2, #1
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b0e      	cmp	r3, #14
 800d0d6:	f200 80e0 	bhi.w	800d29a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800d0da:	4b76      	ldr	r3, [pc, #472]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d0dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e0ba      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800d0e4:	6842      	ldr	r2, [r0, #4]
 800d0e6:	4b73      	ldr	r3, [pc, #460]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d0e8:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d0ea:	2000      	movs	r0, #0
            break;
 800d0ec:	e0b5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800d0ee:	6842      	ldr	r2, [r0, #4]
 800d0f0:	4b70      	ldr	r3, [pc, #448]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d0f2:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d0f4:	2000      	movs	r0, #0
            break;
 800d0f6:	e0b0      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800d0f8:	6842      	ldr	r2, [r0, #4]
 800d0fa:	4b6e      	ldr	r3, [pc, #440]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d0fc:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d0fe:	2000      	movs	r0, #0
            break;
 800d100:	e0ab      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800d102:	6842      	ldr	r2, [r0, #4]
 800d104:	4b6b      	ldr	r3, [pc, #428]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d106:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d108:	2000      	movs	r0, #0
            break;
 800d10a:	e0a6      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800d10c:	6842      	ldr	r2, [r0, #4]
 800d10e:	4b69      	ldr	r3, [pc, #420]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d110:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d112:	2000      	movs	r0, #0
            break;
 800d114:	e0a1      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800d116:	7903      	ldrb	r3, [r0, #4]
 800d118:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800d11c:	2206      	movs	r2, #6
 800d11e:	a901      	add	r1, sp, #4
 800d120:	4b64      	ldr	r3, [pc, #400]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d122:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d126:	f001 fbe7 	bl	800e8f8 <RegionVerify>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	f000 80b7 	beq.w	800d29e <LoRaMacMibSetRequestConfirm+0x512>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800d130:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d134:	4b5f      	ldr	r3, [pc, #380]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d136:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d13a:	2000      	movs	r0, #0
 800d13c:	e08d      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800d13e:	7903      	ldrb	r3, [r0, #4]
 800d140:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d144:	4b5b      	ldr	r3, [pc, #364]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d146:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d14a:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800d14e:	2205      	movs	r2, #5
 800d150:	a901      	add	r1, sp, #4
 800d152:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d156:	f001 fbcf 	bl	800e8f8 <RegionVerify>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f000 80a1 	beq.w	800d2a2 <LoRaMacMibSetRequestConfirm+0x516>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800d160:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d164:	4b53      	ldr	r3, [pc, #332]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d16a:	2000      	movs	r0, #0
 800d16c:	e075      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800d16e:	7903      	ldrb	r3, [r0, #4]
 800d170:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800d174:	220a      	movs	r2, #10
 800d176:	a901      	add	r1, sp, #4
 800d178:	4b4e      	ldr	r3, [pc, #312]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d17a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d17e:	f001 fbbb 	bl	800e8f8 <RegionVerify>
 800d182:	2800      	cmp	r0, #0
 800d184:	f000 808f 	beq.w	800d2a6 <LoRaMacMibSetRequestConfirm+0x51a>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800d188:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d18c:	4b49      	ldr	r3, [pc, #292]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d18e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d192:	2000      	movs	r0, #0
 800d194:	e061      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800d196:	7903      	ldrb	r3, [r0, #4]
 800d198:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800d19c:	2209      	movs	r2, #9
 800d19e:	a901      	add	r1, sp, #4
 800d1a0:	4b44      	ldr	r3, [pc, #272]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1a2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d1a6:	f001 fba7 	bl	800e8f8 <RegionVerify>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d07d      	beq.n	800d2aa <LoRaMacMibSetRequestConfirm+0x51e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800d1ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d1b2:	4b40      	ldr	r3, [pc, #256]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	e04e      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800d1bc:	6842      	ldr	r2, [r0, #4]
 800d1be:	4b3d      	ldr	r3, [pc, #244]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800d1c4:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d1c6:	2000      	movs	r0, #0
            break;
 800d1c8:	e047      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800d1ca:	7902      	ldrb	r2, [r0, #4]
 800d1cc:	4b39      	ldr	r3, [pc, #228]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800d1d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d1d6:	2000      	movs	r0, #0
            break;
 800d1d8:	e03f      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800d1da:	6842      	ldr	r2, [r0, #4]
 800d1dc:	4b35      	ldr	r3, [pc, #212]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d1e2:	2000      	movs	r0, #0
            break;
 800d1e4:	e039      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800d1e6:	6842      	ldr	r2, [r0, #4]
 800d1e8:	4b32      	ldr	r3, [pc, #200]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d1ea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d1ee:	2000      	movs	r0, #0
            break;
 800d1f0:	e033      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            status = RestoreNvmData( );
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800d1f2:	7983      	ldrb	r3, [r0, #6]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d901      	bls.n	800d1fc <LoRaMacMibSetRequestConfirm+0x470>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d1f8:	2003      	movs	r0, #3
 800d1fa:	e02e      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800d1fc:	6842      	ldr	r2, [r0, #4]
 800d1fe:	4b2d      	ldr	r3, [pc, #180]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d200:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800d204:	6840      	ldr	r0, [r0, #4]
 800d206:	f000 ffb7 	bl	800e178 <LoRaMacCryptoSetLrWanVersion>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d20a:	2800      	cmp	r0, #0
 800d20c:	bf18      	it	ne
 800d20e:	2011      	movne	r0, #17
 800d210:	e023      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800d212:	6842      	ldr	r2, [r0, #4]
 800d214:	4b27      	ldr	r3, [pc, #156]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d21a:	2000      	movs	r0, #0
            break;
 800d21c:	e01d      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800d21e:	8882      	ldrh	r2, [r0, #4]
 800d220:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d222:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d226:	2000      	movs	r0, #0
            break;
 800d228:	e017      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800d22a:	8882      	ldrh	r2, [r0, #4]
 800d22c:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d22e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d232:	2000      	movs	r0, #0
            break;
 800d234:	e011      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800d236:	8882      	ldrh	r2, [r0, #4]
 800d238:	4b1e      	ldr	r3, [pc, #120]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d23a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d23e:	2000      	movs	r0, #0
            break;
 800d240:	e00b      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800d242:	8882      	ldrh	r2, [r0, #4]
 800d244:	4b1b      	ldr	r3, [pc, #108]	; (800d2b4 <LoRaMacMibSetRequestConfirm+0x528>)
 800d246:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d24a:	2000      	movs	r0, #0
            break;
 800d24c:	e005      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800d24e:	f000 fbf3 	bl	800da38 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800d252:	e002      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d254:	2003      	movs	r0, #3
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800d256:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800d258:	2001      	movs	r0, #1
}
 800d25a:	b005      	add	sp, #20
 800d25c:	bd30      	pop	{r4, r5, pc}
            status = LORAMAC_STATUS_ERROR;
 800d25e:	2018      	movs	r0, #24
 800d260:	e7fb      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d262:	2003      	movs	r0, #3
 800d264:	e7f9      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d266:	2003      	movs	r0, #3
 800d268:	e7f7      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d26a:	2003      	movs	r0, #3
 800d26c:	e7f5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d26e:	2003      	movs	r0, #3
 800d270:	e7f3      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d272:	2003      	movs	r0, #3
 800d274:	e7f1      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d276:	2003      	movs	r0, #3
 800d278:	e7ef      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d27a:	2003      	movs	r0, #3
 800d27c:	e7ed      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d27e:	2003      	movs	r0, #3
 800d280:	e7eb      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d282:	2003      	movs	r0, #3
 800d284:	e7e9      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d286:	2003      	movs	r0, #3
 800d288:	e7e7      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d28a:	2003      	movs	r0, #3
 800d28c:	e7e5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d28e:	2003      	movs	r0, #3
 800d290:	e7e3      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d292:	2003      	movs	r0, #3
 800d294:	e7e1      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d296:	2003      	movs	r0, #3
 800d298:	e7df      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d29a:	2003      	movs	r0, #3
 800d29c:	e7dd      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d29e:	2003      	movs	r0, #3
 800d2a0:	e7db      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d2a2:	2003      	movs	r0, #3
 800d2a4:	e7d9      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d2a6:	2003      	movs	r0, #3
 800d2a8:	e7d7      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d2aa:	2003      	movs	r0, #3
 800d2ac:	e7d5      	b.n	800d25a <LoRaMacMibSetRequestConfirm+0x4ce>
 800d2ae:	bf00      	nop
 800d2b0:	08013dd0 	.word	0x08013dd0
 800d2b4:	20000e08 	.word	0x20000e08
 800d2b8:	20000ec4 	.word	0x20000ec4

0800d2bc <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	f000 8116 	beq.w	800d4f8 <LoRaMacMlmeRequest+0x23c>
 800d2cc:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800d2ce:	f7fe fb05 	bl	800b8dc <LoRaMacIsBusy>
 800d2d2:	b118      	cbz	r0, 800d2dc <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800d2d4:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	b006      	add	sp, #24
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800d2dc:	f000 fe0e 	bl	800defc <LoRaMacConfirmQueueIsFull>
 800d2e0:	b108      	cbz	r0, 800d2e6 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800d2e2:	2401      	movs	r4, #1
 800d2e4:	e7f7      	b.n	800d2d6 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800d2e6:	f000 fe03 	bl	800def0 <LoRaMacConfirmQueueGetCnt>
 800d2ea:	b328      	cbz	r0, 800d338 <LoRaMacMlmeRequest+0x7c>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2ec:	4b86      	ldr	r3, [pc, #536]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d2ee:	2101      	movs	r1, #1
 800d2f0:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d2f4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d2f8:	f042 0204 	orr.w	r2, r2, #4
 800d2fc:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800d300:	782c      	ldrb	r4, [r5, #0]
 800d302:	f88d 4014 	strb.w	r4, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d306:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800d30a:	2300      	movs	r3, #0
 800d30c:	f88d 3017 	strb.w	r3, [sp, #23]
    switch( mlmeRequest->Type )
 800d310:	1e63      	subs	r3, r4, #1
 800d312:	2b0d      	cmp	r3, #13
 800d314:	f200 80f2 	bhi.w	800d4fc <LoRaMacMlmeRequest+0x240>
 800d318:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d31c:	00f00014 	.word	0x00f00014
 800d320:	00f000f0 	.word	0x00f000f0
 800d324:	005d0055 	.word	0x005d0055
 800d328:	00f00088 	.word	0x00f00088
 800d32c:	009700f0 	.word	0x009700f0
 800d330:	00e000f0 	.word	0x00e000f0
 800d334:	00d700ae 	.word	0x00d700ae
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800d338:	2214      	movs	r2, #20
 800d33a:	2100      	movs	r1, #0
 800d33c:	4873      	ldr	r0, [pc, #460]	; (800d50c <LoRaMacMlmeRequest+0x250>)
 800d33e:	f002 fdd1 	bl	800fee4 <memset1>
 800d342:	e7d3      	b.n	800d2ec <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800d344:	4b70      	ldr	r3, [pc, #448]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d346:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d34a:	f013 0f20 	tst.w	r3, #32
 800d34e:	d1c2      	bne.n	800d2d6 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800d350:	2000      	movs	r0, #0
 800d352:	f7fe f97f 	bl	800b654 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800d356:	4c6e      	ldr	r4, [pc, #440]	; (800d510 <LoRaMacMlmeRequest+0x254>)
 800d358:	2200      	movs	r2, #0
 800d35a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800d35e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d362:	f001 fb3e 	bl	800e9e2 <RegionAlternateDr>
 800d366:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800d36a:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800d36e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800d372:	2307      	movs	r3, #7
 800d374:	f88d 3015 	strb.w	r3, [sp, #21]
            SwitchClass( CLASS_A );
 800d378:	2000      	movs	r0, #0
 800d37a:	f7fe fa29 	bl	800b7d0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800d37e:	4c62      	ldr	r4, [pc, #392]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d380:	2600      	movs	r6, #0
 800d382:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800d386:	1ca3      	adds	r3, r4, #2
 800d388:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d38c:	23ff      	movs	r3, #255	; 0xff
 800d38e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800d392:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800d396:	f504 7087 	add.w	r0, r4, #270	; 0x10e
 800d39a:	f7fc fb0d 	bl	80099b8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800d39e:	f504 708b 	add.w	r0, r4, #278	; 0x116
 800d3a2:	f7fc faeb 	bl	800997c <SecureElementGetDevEui>
    status = ScheduleTx( allowDelayedTx );
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f7fd fe68 	bl	800b07c <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	b3a0      	cbz	r0, 800d41a <LoRaMacMlmeRequest+0x15e>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800d3b0:	4e57      	ldr	r6, [pc, #348]	; (800d510 <LoRaMacMlmeRequest+0x254>)
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800d3b8:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800d3bc:	f001 fb11 	bl	800e9e2 <RegionAlternateDr>
 800d3c0:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800d3c4:	e05d      	b.n	800d482 <LoRaMacMlmeRequest+0x1c6>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	a904      	add	r1, sp, #16
 800d3ca:	2002      	movs	r0, #2
 800d3cc:	f000 fb50 	bl	800da70 <LoRaMacCommandsAddCmd>
 800d3d0:	b318      	cbz	r0, 800d41a <LoRaMacMlmeRequest+0x15e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d3d2:	2413      	movs	r4, #19
 800d3d4:	e055      	b.n	800d482 <LoRaMacMlmeRequest+0x1c6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800d3d6:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800d3d8:	4c4b      	ldr	r4, [pc, #300]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d3da:	f894 3411 	ldrb.w	r3, [r4, #1041]	; 0x411
 800d3de:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d3e2:	4b4b      	ldr	r3, [pc, #300]	; (800d510 <LoRaMacMlmeRequest+0x254>)
 800d3e4:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 800d3e8:	f88d 1001 	strb.w	r1, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d3ec:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800d3f0:	f88d 1002 	strb.w	r1, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d3f4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800d3f8:	9101      	str	r1, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d3fa:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800d3fe:	9102      	str	r1, [sp, #8]
    continuousWave.Timeout = timeout;
 800d400:	f8ad 200c 	strh.w	r2, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800d404:	4669      	mov	r1, sp
 800d406:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d40a:	f001 fb02 	bl	800ea12 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d40e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d412:	f043 0302 	orr.w	r3, r3, #2
 800d416:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d41a:	4b3b      	ldr	r3, [pc, #236]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d41c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d420:	612b      	str	r3, [r5, #16]
        LoRaMacConfirmQueueAdd( &queueElement );
 800d422:	a805      	add	r0, sp, #20
 800d424:	f000 fc96 	bl	800dd54 <LoRaMacConfirmQueueAdd>
    return status;
 800d428:	2400      	movs	r4, #0
 800d42a:	e754      	b.n	800d2d6 <LoRaMacMlmeRequest+0x1a>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800d42c:	4b39      	ldr	r3, [pc, #228]	; (800d514 <LoRaMacMlmeRequest+0x258>)
 800d42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d430:	88aa      	ldrh	r2, [r5, #4]
 800d432:	f995 100c 	ldrsb.w	r1, [r5, #12]
 800d436:	68a8      	ldr	r0, [r5, #8]
 800d438:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d43a:	4a33      	ldr	r2, [pc, #204]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d43c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d440:	f043 0302 	orr.w	r3, r3, #2
 800d444:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            break;
 800d448:	e7e7      	b.n	800d41a <LoRaMacMlmeRequest+0x15e>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800d44a:	4669      	mov	r1, sp
 800d44c:	200d      	movs	r0, #13
 800d44e:	f000 fba5 	bl	800db9c <LoRaMacCommandsGetCmd>
 800d452:	b920      	cbnz	r0, 800d45e <LoRaMacMlmeRequest+0x1a2>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d454:	4b2c      	ldr	r3, [pc, #176]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d456:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d45a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800d45c:	e7e1      	b.n	800d422 <LoRaMacMlmeRequest+0x166>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800d45e:	2200      	movs	r2, #0
 800d460:	a904      	add	r1, sp, #16
 800d462:	200d      	movs	r0, #13
 800d464:	f000 fb04 	bl	800da70 <LoRaMacCommandsAddCmd>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d0f3      	beq.n	800d454 <LoRaMacMlmeRequest+0x198>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d46c:	4b26      	ldr	r3, [pc, #152]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d46e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d472:	612b      	str	r3, [r5, #16]
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d474:	2413      	movs	r4, #19
 800d476:	e008      	b.n	800d48a <LoRaMacMlmeRequest+0x1ce>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800d478:	4b25      	ldr	r3, [pc, #148]	; (800d510 <LoRaMacMlmeRequest+0x254>)
 800d47a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d47e:	b1a3      	cbz	r3, 800d4aa <LoRaMacMlmeRequest+0x1ee>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d480:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d482:	4b21      	ldr	r3, [pc, #132]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d484:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d488:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800d48a:	f000 fd31 	bl	800def0 <LoRaMacConfirmQueueGetCnt>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f47f af21 	bne.w	800d2d6 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800d494:	4b1c      	ldr	r3, [pc, #112]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d496:	2100      	movs	r1, #0
 800d498:	f883 1410 	strb.w	r1, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d49c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d4a0:	f361 0282 	bfi	r2, r1, #2, #1
 800d4a4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800d4a8:	e715      	b.n	800d2d6 <LoRaMacMlmeRequest+0x1a>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800d4aa:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800d4ac:	f004 0007 	and.w	r0, r4, #7
 800d4b0:	f000 fabb 	bl	800da2a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800d4b4:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	a904      	add	r1, sp, #16
 800d4bc:	2010      	movs	r0, #16
 800d4be:	f000 fad7 	bl	800da70 <LoRaMacCommandsAddCmd>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d0a9      	beq.n	800d41a <LoRaMacMlmeRequest+0x15e>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d4c6:	2413      	movs	r4, #19
 800d4c8:	e7db      	b.n	800d482 <LoRaMacMlmeRequest+0x1c6>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	a904      	add	r1, sp, #16
 800d4ce:	2012      	movs	r0, #18
 800d4d0:	f000 face 	bl	800da70 <LoRaMacCommandsAddCmd>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d0a0      	beq.n	800d41a <LoRaMacMlmeRequest+0x15e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d4d8:	2413      	movs	r4, #19
 800d4da:	e7d2      	b.n	800d482 <LoRaMacMlmeRequest+0x1c6>
            queueElement.RestrictCommonReadyToHandle = true;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800d4e2:	f000 fa93 	bl	800da0c <LoRaMacClassBIsAcquisitionInProgress>
 800d4e6:	b108      	cbz	r0, 800d4ec <LoRaMacMlmeRequest+0x230>
                status = LORAMAC_STATUS_BUSY;
 800d4e8:	2401      	movs	r4, #1
 800d4ea:	e7ca      	b.n	800d482 <LoRaMacMlmeRequest+0x1c6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800d4ec:	f000 fa8b 	bl	800da06 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f000 fa8d 	bl	800da10 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800d4f6:	e790      	b.n	800d41a <LoRaMacMlmeRequest+0x15e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d4f8:	2403      	movs	r4, #3
 800d4fa:	e6ec      	b.n	800d2d6 <LoRaMacMlmeRequest+0x1a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <LoRaMacMlmeRequest+0x24c>)
 800d4fe:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d502:	612b      	str	r3, [r5, #16]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d504:	2402      	movs	r4, #2
 800d506:	e7c0      	b.n	800d48a <LoRaMacMlmeRequest+0x1ce>
 800d508:	20000900 	.word	0x20000900
 800d50c:	20000d48 	.word	0x20000d48
 800d510:	20000e08 	.word	0x20000e08
 800d514:	08013dd0 	.word	0x08013dd0

0800d518 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	b08f      	sub	sp, #60	; 0x3c
 800d51e:	9100      	str	r1, [sp, #0]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800d520:	2800      	cmp	r0, #0
 800d522:	f000 819f 	beq.w	800d864 <LoRaMacMcpsRequest+0x34c>
 800d526:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800d528:	f7fe f9d8 	bl	800b8dc <LoRaMacIsBusy>
 800d52c:	b118      	cbz	r0, 800d536 <LoRaMacMcpsRequest+0x1e>
    {
        return LORAMAC_STATUS_BUSY;
 800d52e:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800d530:	b00f      	add	sp, #60	; 0x3c
 800d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    macHdr.Value = 0;
 800d536:	2100      	movs	r1, #0
 800d538:	460d      	mov	r5, r1
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800d53a:	4ebe      	ldr	r6, [pc, #760]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d53c:	2214      	movs	r2, #20
 800d53e:	f206 4034 	addw	r0, r6, #1076	; 0x434
 800d542:	f002 fccf 	bl	800fee4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	f886 3435 	strb.w	r3, [r6, #1077]	; 0x435
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d54c:	f886 340e 	strb.w	r3, [r6, #1038]	; 0x40e
    switch( mcpsRequest->Type )
 800d550:	7823      	ldrb	r3, [r4, #0]
 800d552:	2b01      	cmp	r3, #1
 800d554:	f000 80ca 	beq.w	800d6ec <LoRaMacMcpsRequest+0x1d4>
 800d558:	2b03      	cmp	r3, #3
 800d55a:	f000 80d9 	beq.w	800d710 <LoRaMacMcpsRequest+0x1f8>
 800d55e:	b193      	cbz	r3, 800d586 <LoRaMacMcpsRequest+0x6e>
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d560:	2502      	movs	r5, #2
 800d562:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d566:	4bb4      	ldr	r3, [pc, #720]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d568:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d56c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d570:	a90c      	add	r1, sp, #48	; 0x30
 800d572:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d576:	f001 f9a0 	bl	800e8ba <RegionGetPhyParam>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d57a:	4628      	mov	r0, r5
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d57c:	4bad      	ldr	r3, [pc, #692]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d57e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800d582:	6123      	str	r3, [r4, #16]
    return status;
 800d584:	e7d4      	b.n	800d530 <LoRaMacMcpsRequest+0x18>
            MacCtx.AckTimeoutRetries = 1;
 800d586:	2201      	movs	r2, #1
 800d588:	f886 240d 	strb.w	r2, [r6, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800d58c:	2302      	movs	r3, #2
 800d58e:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800d592:	7923      	ldrb	r3, [r4, #4]
 800d594:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800d596:	f8d4 8008 	ldr.w	r8, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800d59a:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800d59c:	f994 900e 	ldrsb.w	r9, [r4, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d5a6:	4ea4      	ldr	r6, [pc, #656]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d5a8:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800d5ac:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d5b0:	a90c      	add	r1, sp, #48	; 0x30
 800d5b2:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800d5b6:	f001 f980 	bl	800e8ba <RegionGetPhyParam>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800d5ba:	f896 311a 	ldrb.w	r3, [r6, #282]	; 0x11a
 800d5be:	b9c3      	cbnz	r3, 800d5f2 <LoRaMacMcpsRequest+0xda>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800d5c0:	b240      	sxtb	r0, r0
 800d5c2:	4548      	cmp	r0, r9
 800d5c4:	bfb8      	it	lt
 800d5c6:	4648      	movlt	r0, r9
            verify.DatarateParams.Datarate = datarate;
 800d5c8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d5cc:	4b9a      	ldr	r3, [pc, #616]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d5ce:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d5d2:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800d5d6:	2205      	movs	r2, #5
 800d5d8:	a90a      	add	r1, sp, #40	; 0x28
 800d5da:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d5de:	f001 f98b 	bl	800e8f8 <RegionVerify>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	f000 8140 	beq.w	800d868 <LoRaMacMcpsRequest+0x350>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800d5e8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800d5ec:	4b92      	ldr	r3, [pc, #584]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d5ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d5f2:	4b91      	ldr	r3, [pc, #580]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d5f4:	f993 a039 	ldrsb.w	sl, [r3, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d5f8:	f993 b038 	ldrsb.w	fp, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5fe:	9202      	str	r2, [sp, #8]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d600:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 8131 	beq.w	800d86c <LoRaMacMcpsRequest+0x354>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d60a:	4b8b      	ldr	r3, [pc, #556]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d60c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800d610:	b913      	cbnz	r3, 800d618 <LoRaMacMcpsRequest+0x100>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d612:	4b89      	ldr	r3, [pc, #548]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d614:	2100      	movs	r1, #0
 800d616:	6319      	str	r1, [r3, #48]	; 0x30
    fCtrl.Value = 0;
 800d618:	f04f 0600 	mov.w	r6, #0
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d61c:	4b86      	ldr	r3, [pc, #536]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d61e:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800d622:	f361 16c7 	bfi	r6, r1, #7, #1
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d626:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d62a:	2b01      	cmp	r3, #1
        fCtrl.Bits.FPending      = 1;
 800d62c:	bf14      	ite	ne
 800d62e:	f3c6 1300 	ubfxne	r3, r6, #4, #1
 800d632:	2301      	moveq	r3, #1
 800d634:	f363 1604 	bfi	r6, r3, #4, #1
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d638:	4b7f      	ldr	r3, [pc, #508]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d63a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d63e:	b90b      	cbnz	r3, 800d644 <LoRaMacMcpsRequest+0x12c>
        fCtrl.Bits.Ack = 1;
 800d640:	f3c6 1340 	ubfx	r3, r6, #5, #1
 800d644:	f363 1645 	bfi	r6, r3, #5, #1
    adrNext.UpdateChanMask = true;
 800d648:	2301      	movs	r3, #1
 800d64a:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d64e:	f88d 1019 	strb.w	r1, [sp, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d652:	9207      	str	r2, [sp, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d654:	4978      	ldr	r1, [pc, #480]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d656:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800d65a:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d65e:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800d662:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d666:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d66a:	f88d b025 	strb.w	fp, [sp, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d66e:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800d672:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800d676:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800d67a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adrNext.Version = Nvm.MacGroup2.Version;
 800d67e:	f8d1 3128 	ldr.w	r3, [r1, #296]	; 0x128
 800d682:	9305      	str	r3, [sp, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d684:	ab02      	add	r3, sp, #8
 800d686:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800d68a:	3139      	adds	r1, #57	; 0x39
 800d68c:	a805      	add	r0, sp, #20
 800d68e:	f000 f93f 	bl	800d910 <LoRaMacAdrCalcNext>
 800d692:	f360 1686 	bfi	r6, r0, #6, #1
    MacCtx.PktBufferLen = 0;
 800d696:	4a67      	ldr	r2, [pc, #412]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d698:	2300      	movs	r3, #0
 800d69a:	8013      	strh	r3, [r2, #0]
    MacCtx.NodeAckRequested = false;
 800d69c:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    uint32_t fCntUp = 0;
 800d6a0:	9303      	str	r3, [sp, #12]
    size_t macCmdsSize = 0;
 800d6a2:	9304      	str	r3, [sp, #16]
        fBufferSize = 0;
 800d6a4:	4598      	cmp	r8, r3
 800d6a6:	bf08      	it	eq
 800d6a8:	461f      	moveq	r7, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d6aa:	4691      	mov	r9, r2
 800d6ac:	463a      	mov	r2, r7
 800d6ae:	4641      	mov	r1, r8
 800d6b0:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800d6b4:	f002 fbfc 	bl	800feb0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d6b8:	b2fa      	uxtb	r2, r7
 800d6ba:	f889 2237 	strb.w	r2, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d6be:	b2e9      	uxtb	r1, r5
 800d6c0:	f889 5002 	strb.w	r5, [r9, #2]
    switch( macHdr->Bits.MType )
 800d6c4:	f3c5 1542 	ubfx	r5, r5, #5, #3
 800d6c8:	2d04      	cmp	r5, #4
 800d6ca:	d02f      	beq.n	800d72c <LoRaMacMcpsRequest+0x214>
 800d6cc:	2d07      	cmp	r5, #7
 800d6ce:	f000 80b9 	beq.w	800d844 <LoRaMacMcpsRequest+0x32c>
 800d6d2:	2d02      	cmp	r5, #2
 800d6d4:	d02e      	beq.n	800d734 <LoRaMacMcpsRequest+0x21c>
 800d6d6:	2002      	movs	r0, #2
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800d6d8:	4b57      	ldr	r3, [pc, #348]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d6da:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800d6de:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 800d6e2:	4b54      	ldr	r3, [pc, #336]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800d6ea:	e747      	b.n	800d57c <LoRaMacMcpsRequest+0x64>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800d6ec:	7be3      	ldrb	r3, [r4, #15]
 800d6ee:	2b08      	cmp	r3, #8
 800d6f0:	bf28      	it	cs
 800d6f2:	2308      	movcs	r3, #8
 800d6f4:	4a4f      	ldr	r2, [pc, #316]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d6f6:	f882 340d 	strb.w	r3, [r2, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800d700:	7923      	ldrb	r3, [r4, #4]
 800d702:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800d704:	f8d4 8008 	ldr.w	r8, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800d708:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800d70a:	f994 900e 	ldrsb.w	r9, [r4, #14]
            break;
 800d70e:	e747      	b.n	800d5a0 <LoRaMacMcpsRequest+0x88>
            MacCtx.AckTimeoutRetries = 1;
 800d710:	4b48      	ldr	r3, [pc, #288]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d712:	2201      	movs	r2, #1
 800d714:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800d718:	f06f 051f 	mvn.w	r5, #31
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800d71c:	f8d4 8004 	ldr.w	r8, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800d720:	8927      	ldrh	r7, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800d722:	f994 900a 	ldrsb.w	r9, [r4, #10]
    uint8_t fPort = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	9301      	str	r3, [sp, #4]
            break;
 800d72a:	e739      	b.n	800d5a0 <LoRaMacMcpsRequest+0x88>
            MacCtx.NodeAckRequested = true;
 800d72c:	4b41      	ldr	r3, [pc, #260]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d72e:	2001      	movs	r0, #1
 800d730:	f883 0410 	strb.w	r0, [r3, #1040]	; 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d734:	4b3f      	ldr	r3, [pc, #252]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d736:	2004      	movs	r0, #4
 800d738:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d73c:	1c98      	adds	r0, r3, #2
 800d73e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d742:	20ff      	movs	r0, #255	; 0xff
 800d744:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d748:	f883 110d 	strb.w	r1, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d74c:	9901      	ldr	r1, [sp, #4]
 800d74e:	f883 1128 	strb.w	r1, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d752:	4939      	ldr	r1, [pc, #228]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d754:	f8d1 10e4 	ldr.w	r1, [r1, #228]	; 0xe4
 800d758:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d75c:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d760:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d764:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800d768:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d76c:	a803      	add	r0, sp, #12
 800d76e:	f000 fd0b 	bl	800e188 <LoRaMacCryptoGetFCntUp>
 800d772:	2800      	cmp	r0, #0
 800d774:	d17e      	bne.n	800d874 <LoRaMacMcpsRequest+0x35c>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d776:	9a03      	ldr	r2, [sp, #12]
 800d778:	4b2e      	ldr	r3, [pc, #184]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d77a:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800d77e:	2100      	movs	r1, #0
 800d780:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 800d784:	f883 1438 	strb.w	r1, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d788:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d78c:	a804      	add	r0, sp, #16
 800d78e:	f000 fa47 	bl	800dc20 <LoRaMacCommandsGetSizeSerializedCmds>
 800d792:	2800      	cmp	r0, #0
 800d794:	d170      	bne.n	800d878 <LoRaMacMcpsRequest+0x360>
            if( macCmdsSize > 0 )
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	b9cb      	cbnz	r3, 800d7ce <LoRaMacMcpsRequest+0x2b6>
        status = ScheduleTx( allowDelayedTx );
 800d79a:	9800      	ldr	r0, [sp, #0]
 800d79c:	f7fd fc6e 	bl	800b07c <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d199      	bne.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
        Nvm.MacGroup1.SrvAckRequested = false;
 800d7a4:	4b24      	ldr	r3, [pc, #144]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800d7ac:	9a02      	ldr	r2, [sp, #8]
 800d7ae:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800d7b0:	f000 fa06 	bl	800dbc0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d15b      	bne.n	800d870 <LoRaMacMcpsRequest+0x358>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800d7b8:	7822      	ldrb	r2, [r4, #0]
 800d7ba:	4b1e      	ldr	r3, [pc, #120]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d7bc:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800d7c0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d7c4:	f042 0201 	orr.w	r2, r2, #1
 800d7c8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800d7cc:	e6d6      	b.n	800d57c <LoRaMacMcpsRequest+0x64>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d7ce:	4b1a      	ldr	r3, [pc, #104]	; (800d838 <LoRaMacMcpsRequest+0x320>)
 800d7d0:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d7d4:	f7fd f8ae 	bl	800a934 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d7d8:	4b16      	ldr	r3, [pc, #88]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d7da:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800d7de:	b1c3      	cbz	r3, 800d812 <LoRaMacMcpsRequest+0x2fa>
 800d7e0:	9b04      	ldr	r3, [sp, #16]
 800d7e2:	2b0f      	cmp	r3, #15
 800d7e4:	d907      	bls.n	800d7f6 <LoRaMacMcpsRequest+0x2de>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d7e6:	4a15      	ldr	r2, [pc, #84]	; (800d83c <LoRaMacMcpsRequest+0x324>)
 800d7e8:	a904      	add	r1, sp, #16
 800d7ea:	f000 fa25 	bl	800dc38 <LoRaMacCommandsSerializeCmds>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d0d3      	beq.n	800d79a <LoRaMacMcpsRequest+0x282>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d7f2:	2013      	movs	r0, #19
 800d7f4:	e770      	b.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d7f6:	4a12      	ldr	r2, [pc, #72]	; (800d840 <LoRaMacMcpsRequest+0x328>)
 800d7f8:	a904      	add	r1, sp, #16
 800d7fa:	200f      	movs	r0, #15
 800d7fc:	f000 fa1c 	bl	800dc38 <LoRaMacCommandsSerializeCmds>
 800d800:	2800      	cmp	r0, #0
 800d802:	d13b      	bne.n	800d87c <LoRaMacMcpsRequest+0x364>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d804:	9b04      	ldr	r3, [sp, #16]
 800d806:	f363 0603 	bfi	r6, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d80a:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d80c:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
 800d810:	e7c3      	b.n	800d79a <LoRaMacMcpsRequest+0x282>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d812:	4a0a      	ldr	r2, [pc, #40]	; (800d83c <LoRaMacMcpsRequest+0x324>)
 800d814:	a904      	add	r1, sp, #16
 800d816:	f000 fa0f 	bl	800dc38 <LoRaMacCommandsSerializeCmds>
 800d81a:	bb88      	cbnz	r0, 800d880 <LoRaMacMcpsRequest+0x368>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d81c:	4b05      	ldr	r3, [pc, #20]	; (800d834 <LoRaMacMcpsRequest+0x31c>)
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d824:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 800d828:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d82c:	9a04      	ldr	r2, [sp, #16]
 800d82e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800d832:	e7b2      	b.n	800d79a <LoRaMacMcpsRequest+0x282>
 800d834:	20000900 	.word	0x20000900
 800d838:	20000e08 	.word	0x20000e08
 800d83c:	20000d88 	.word	0x20000d88
 800d840:	20000a18 	.word	0x20000a18
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d844:	f1b8 0f00 	cmp.w	r8, #0
 800d848:	d0a7      	beq.n	800d79a <LoRaMacMcpsRequest+0x282>
 800d84a:	2a00      	cmp	r2, #0
 800d84c:	d0a5      	beq.n	800d79a <LoRaMacMcpsRequest+0x282>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d84e:	4d0d      	ldr	r5, [pc, #52]	; (800d884 <LoRaMacMcpsRequest+0x36c>)
 800d850:	b2fa      	uxtb	r2, r7
 800d852:	4641      	mov	r1, r8
 800d854:	1ce8      	adds	r0, r5, #3
 800d856:	f002 fb2b 	bl	800feb0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d85a:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
 800d85e:	3301      	adds	r3, #1
 800d860:	802b      	strh	r3, [r5, #0]
 800d862:	e79a      	b.n	800d79a <LoRaMacMcpsRequest+0x282>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d864:	2003      	movs	r0, #3
 800d866:	e663      	b.n	800d530 <LoRaMacMcpsRequest+0x18>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800d868:	2003      	movs	r0, #3
 800d86a:	e661      	b.n	800d530 <LoRaMacMcpsRequest+0x18>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d86c:	2007      	movs	r0, #7
 800d86e:	e738      	b.n	800d6e2 <LoRaMacMcpsRequest+0x1ca>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d870:	2013      	movs	r0, #19
 800d872:	e736      	b.n	800d6e2 <LoRaMacMcpsRequest+0x1ca>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d874:	2012      	movs	r0, #18
 800d876:	e72f      	b.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d878:	2013      	movs	r0, #19
 800d87a:	e72d      	b.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d87c:	2013      	movs	r0, #19
 800d87e:	e72b      	b.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d880:	2013      	movs	r0, #19
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d882:	e729      	b.n	800d6d8 <LoRaMacMcpsRequest+0x1c0>
 800d884:	20000900 	.word	0x20000900

0800d888 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800d888:	b510      	push	{r4, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800d88e:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800d892:	220f      	movs	r2, #15
 800d894:	a901      	add	r1, sp, #4
 800d896:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <LoRaMacTestSetDutyCycleOn+0x34>)
 800d898:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d89c:	f001 f82c 	bl	800e8f8 <RegionVerify>
 800d8a0:	b148      	cbz	r0, 800d8b6 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800d8a2:	4b06      	ldr	r3, [pc, #24]	; (800d8bc <LoRaMacTestSetDutyCycleOn+0x34>)
 800d8a4:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d8a8:	4a05      	ldr	r2, [pc, #20]	; (800d8c0 <LoRaMacTestSetDutyCycleOn+0x38>)
 800d8aa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d8ae:	f043 0320 	orr.w	r3, r3, #32
 800d8b2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800d8b6:	b002      	add	sp, #8
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000e08 	.word	0x20000e08
 800d8c0:	20000900 	.word	0x20000900

0800d8c4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800d8c4:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800d8c6:	f7ff f86b 	bl	800c9a0 <LoRaMacStop>
 800d8ca:	b110      	cbz	r0, 800d8d2 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800d8cc:	2401      	movs	r4, #1
    }
}
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}
 800d8d2:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800d8d4:	4d0c      	ldr	r5, [pc, #48]	; (800d908 <LoRaMacDeInitialization+0x44>)
 800d8d6:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800d8da:	f005 f879 	bl	80129d0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800d8de:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800d8e2:	f005 f875 	bl	80129d0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800d8e6:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800d8ea:	f005 f871 	bl	80129d0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800d8ee:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800d8f2:	f005 f86d 	bl	80129d0 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800d8f6:	f000 f899 	bl	800da2c <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	f7fd feaa 	bl	800b654 <ResetMacParameters>
        Radio.Sleep( );
 800d900:	4b02      	ldr	r3, [pc, #8]	; (800d90c <LoRaMacDeInitialization+0x48>)
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800d906:	e7e2      	b.n	800d8ce <LoRaMacDeInitialization+0xa>
 800d908:	20000900 	.word	0x20000900
 800d90c:	08013dd0 	.word	0x08013dd0

0800d910 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	b089      	sub	sp, #36	; 0x24
 800d916:	461d      	mov	r5, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800d918:	7883      	ldrb	r3, [r0, #2]
 800d91a:	b12b      	cbz	r3, 800d928 <LoRaMacAdrCalcNext+0x18>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800d91c:	f04f 0800 	mov.w	r8, #0
}
 800d920:	4640      	mov	r0, r8
 800d922:	b009      	add	sp, #36	; 0x24
 800d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d928:	4604      	mov	r4, r0
 800d92a:	460f      	mov	r7, r1
 800d92c:	4616      	mov	r6, r2
    int8_t datarate = adrNext->Datarate;
 800d92e:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800d932:	f990 a011 	ldrsb.w	sl, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 800d936:	6883      	ldr	r3, [r0, #8]
 800d938:	602b      	str	r3, [r5, #0]
    if( adrNext->AdrEnabled == true )
 800d93a:	f890 8005 	ldrb.w	r8, [r0, #5]
 800d93e:	f1b8 0f00 	cmp.w	r8, #0
 800d942:	d104      	bne.n	800d94e <LoRaMacAdrCalcNext+0x3e>
    *drOut = datarate;
 800d944:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800d948:	f886 a000 	strb.w	sl, [r6]
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800d94c:	e7e8      	b.n	800d920 <LoRaMacAdrCalcNext+0x10>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800d94e:	2302      	movs	r3, #2
 800d950:	f88d 300c 	strb.w	r3, [sp, #12]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d954:	7c83      	ldrb	r3, [r0, #18]
 800d956:	f88d 300e 	strb.w	r3, [sp, #14]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d95a:	a903      	add	r1, sp, #12
 800d95c:	7cc0      	ldrb	r0, [r0, #19]
 800d95e:	f000 ffac 	bl	800e8ba <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800d962:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800d966:	464a      	mov	r2, r9
 800d968:	45d9      	cmp	r9, fp
 800d96a:	bfb8      	it	lt
 800d96c:	465a      	movlt	r2, fp
 800d96e:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800d970:	45d9      	cmp	r9, fp
 800d972:	dc04      	bgt.n	800d97e <LoRaMacAdrCalcNext+0x6e>
            *adrAckCounter = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800d978:	4691      	mov	r9, r2
            adrAckReq = false;
 800d97a:	4698      	mov	r8, r3
 800d97c:	e7e2      	b.n	800d944 <LoRaMacAdrCalcNext+0x34>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800d97e:	68a2      	ldr	r2, [r4, #8]
 800d980:	89a1      	ldrh	r1, [r4, #12]
 800d982:	428a      	cmp	r2, r1
 800d984:	bf34      	ite	cc
 800d986:	f04f 0800 	movcc.w	r8, #0
 800d98a:	f04f 0801 	movcs.w	r8, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800d98e:	89e3      	ldrh	r3, [r4, #14]
 800d990:	440b      	add	r3, r1
 800d992:	429a      	cmp	r2, r3
 800d994:	d202      	bcs.n	800d99c <LoRaMacAdrCalcNext+0x8c>
        datarate = MAX( datarate, minTxDatarate );
 800d996:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d99a:	e7d3      	b.n	800d944 <LoRaMacAdrCalcNext+0x34>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800d99c:	2308      	movs	r3, #8
 800d99e:	f88d 300c 	strb.w	r3, [sp, #12]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d9a2:	a903      	add	r1, sp, #12
 800d9a4:	7ce0      	ldrb	r0, [r4, #19]
 800d9a6:	f000 ff88 	bl	800e8ba <RegionGetPhyParam>
                txPower = phyParam.Value;
 800d9aa:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800d9ae:	89e2      	ldrh	r2, [r4, #14]
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9b6:	fb02 3311 	mls	r3, r2, r1, r3
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d002      	beq.n	800d9c4 <LoRaMacAdrCalcNext+0xb4>
        datarate = MAX( datarate, minTxDatarate );
 800d9be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d9c2:	e7bf      	b.n	800d944 <LoRaMacAdrCalcNext+0x34>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d9c4:	2322      	movs	r3, #34	; 0x22
 800d9c6:	f88d 300c 	strb.w	r3, [sp, #12]
                    getPhy.Datarate = datarate;
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	f88d 300d 	strb.w	r3, [sp, #13]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d9d0:	7ca3      	ldrb	r3, [r4, #18]
 800d9d2:	f88d 300e 	strb.w	r3, [sp, #14]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d9d6:	a903      	add	r1, sp, #12
 800d9d8:	7ce0      	ldrb	r0, [r4, #19]
 800d9da:	f000 ff6e 	bl	800e8ba <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800d9de:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800d9e2:	45cb      	cmp	fp, r9
 800d9e4:	d1ae      	bne.n	800d944 <LoRaMacAdrCalcNext+0x34>
                        if( adrNext->UpdateChanMask == true )
 800d9e6:	f894 8004 	ldrb.w	r8, [r4, #4]
 800d9ea:	f1b8 0f00 	cmp.w	r8, #0
 800d9ee:	d0a9      	beq.n	800d944 <LoRaMacAdrCalcNext+0x34>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	f88d 301c 	strb.w	r3, [sp, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800d9f6:	a905      	add	r1, sp, #20
 800d9f8:	7ce0      	ldrb	r0, [r4, #19]
 800d9fa:	f000 ff75 	bl	800e8e8 <RegionInitDefaults>
                        adrAckReq = false;
 800d9fe:	f04f 0800 	mov.w	r8, #0
 800da02:	e79f      	b.n	800d944 <LoRaMacAdrCalcNext+0x34>

0800da04 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da04:	4770      	bx	lr

0800da06 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da06:	4770      	bx	lr

0800da08 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da08:	4770      	bx	lr

0800da0a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da0a:	4770      	bx	lr

0800da0c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da0c:	2000      	movs	r0, #0
 800da0e:	4770      	bx	lr

0800da10 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da10:	4770      	bx	lr

0800da12 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da12:	4770      	bx	lr

0800da14 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da14:	4770      	bx	lr

0800da16 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da16:	2000      	movs	r0, #0
 800da18:	4770      	bx	lr

0800da1a <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da1a:	2000      	movs	r0, #0
 800da1c:	4770      	bx	lr

0800da1e <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da1e:	2000      	movs	r0, #0
 800da20:	4770      	bx	lr

0800da22 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da22:	2000      	movs	r0, #0
 800da24:	4770      	bx	lr

0800da26 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da26:	2000      	movs	r0, #0
 800da28:	4770      	bx	lr

0800da2a <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da2a:	4770      	bx	lr

0800da2c <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da2c:	4770      	bx	lr

0800da2e <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da2e:	4770      	bx	lr

0800da30 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da30:	2002      	movs	r0, #2
 800da32:	4770      	bx	lr

0800da34 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da34:	2002      	movs	r0, #2
 800da36:	4770      	bx	lr

0800da38 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da38:	2002      	movs	r0, #2
 800da3a:	4770      	bx	lr

0800da3c <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da3c:	4770      	bx	lr

0800da3e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da3e:	2000      	movs	r0, #0
 800da40:	4770      	bx	lr

0800da42 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da42:	4770      	bx	lr

0800da44 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da44:	4770      	bx	lr

0800da46 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da46:	2000      	movs	r0, #0
 800da48:	4770      	bx	lr

0800da4a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da4a:	2000      	movs	r0, #0
 800da4c:	4770      	bx	lr

0800da4e <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da4e:	4770      	bx	lr

0800da50 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800da50:	4770      	bx	lr
	...

0800da54 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800da54:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800da56:	4c05      	ldr	r4, [pc, #20]	; (800da6c <LoRaMacCommandsInit+0x18>)
 800da58:	22fc      	movs	r2, #252	; 0xfc
 800da5a:	2100      	movs	r1, #0
 800da5c:	4620      	mov	r0, r4
 800da5e:	f002 fa41 	bl	800fee4 <memset1>
    list->First = NULL;
 800da62:	2000      	movs	r0, #0
 800da64:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800da66:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800da68:	bd10      	pop	{r4, pc}
 800da6a:	bf00      	nop
 800da6c:	20001584 	.word	0x20001584

0800da70 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( payload == NULL )
 800da72:	b159      	cbz	r1, 800da8c <LoRaMacCommandsAddCmd+0x1c>
 800da74:	4606      	mov	r6, r0
 800da76:	4617      	mov	r7, r2
 800da78:	468e      	mov	lr, r1
 800da7a:	4a27      	ldr	r2, [pc, #156]	; (800db18 <LoRaMacCommandsAddCmd+0xa8>)
 800da7c:	f04f 0c00 	mov.w	ip, #0
 800da80:	e00f      	b.n	800daa2 <LoRaMacCommandsAddCmd+0x32>
        list->First = element;
 800da82:	4b26      	ldr	r3, [pc, #152]	; (800db1c <LoRaMacCommandsAddCmd+0xac>)
 800da84:	6018      	str	r0, [r3, #0]
 800da86:	e01b      	b.n	800dac0 <LoRaMacCommandsAddCmd+0x50>
            return true;
 800da88:	2301      	movs	r3, #1
 800da8a:	e036      	b.n	800dafa <LoRaMacCommandsAddCmd+0x8a>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800da8c:	2401      	movs	r4, #1
 800da8e:	e000      	b.n	800da92 <LoRaMacCommandsAddCmd+0x22>
    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );

    if( newCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800da90:	2402      	movs	r4, #2
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800da92:	4620      	mov	r0, r4
 800da94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800da96:	f10c 0c01 	add.w	ip, ip, #1
 800da9a:	3210      	adds	r2, #16
 800da9c:	f1bc 0f0f 	cmp.w	ip, #15
 800daa0:	d0f6      	beq.n	800da90 <LoRaMacCommandsAddCmd+0x20>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800daa2:	4665      	mov	r5, ip
 800daa4:	f1a2 000f 	sub.w	r0, r2, #15
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800daa8:	f1a2 0310 	sub.w	r3, r2, #16
        if( mem[size] != 0x00 )
 800daac:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	d1f0      	bne.n	800da96 <LoRaMacCommandsAddCmd+0x26>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d1f9      	bne.n	800daac <LoRaMacCommandsAddCmd+0x3c>
    if( list->First == NULL )
 800dab8:	4b18      	ldr	r3, [pc, #96]	; (800db1c <LoRaMacCommandsAddCmd+0xac>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d0e0      	beq.n	800da82 <LoRaMacCommandsAddCmd+0x12>
    if( list->Last )
 800dac0:	4b16      	ldr	r3, [pc, #88]	; (800db1c <LoRaMacCommandsAddCmd+0xac>)
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	b103      	cbz	r3, 800dac8 <LoRaMacCommandsAddCmd+0x58>
        list->Last->Next = element;
 800dac6:	6018      	str	r0, [r3, #0]
    element->Next = NULL;
 800dac8:	4b14      	ldr	r3, [pc, #80]	; (800db1c <LoRaMacCommandsAddCmd+0xac>)
 800daca:	eb03 1205 	add.w	r2, r3, r5, lsl #4
 800dace:	2100      	movs	r1, #0
 800dad0:	6091      	str	r1, [r2, #8]
    list->Last = element;
 800dad2:	6058      	str	r0, [r3, #4]
    newCmd->CID = cid;
 800dad4:	7316      	strb	r6, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800dad6:	6117      	str	r7, [r2, #16]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800dad8:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800dadc:	b2ba      	uxth	r2, r7
 800dade:	4671      	mov	r1, lr
 800dae0:	f103 000d 	add.w	r0, r3, #13
 800dae4:	f002 f9e4 	bl	800feb0 <memcpy1>
    switch( cid )
 800dae8:	2e05      	cmp	r6, #5
 800daea:	d0cd      	beq.n	800da88 <LoRaMacCommandsAddCmd+0x18>
 800daec:	f1a6 0308 	sub.w	r3, r6, #8
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	bf8c      	ite	hi
 800daf6:	2300      	movhi	r3, #0
 800daf8:	2301      	movls	r3, #1
    newCmd->IsSticky = IsSticky( cid );
 800dafa:	4908      	ldr	r1, [pc, #32]	; (800db1c <LoRaMacCommandsAddCmd+0xac>)
 800dafc:	1c6a      	adds	r2, r5, #1
 800dafe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800db02:	7113      	strb	r3, [r2, #4]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800db04:	2300      	movs	r3, #0
 800db06:	7153      	strb	r3, [r2, #5]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800db08:	f8d1 30f8 	ldr.w	r3, [r1, #248]	; 0xf8
 800db0c:	3301      	adds	r3, #1
 800db0e:	443b      	add	r3, r7
 800db10:	f8c1 30f8 	str.w	r3, [r1, #248]	; 0xf8
    return LORAMAC_COMMANDS_SUCCESS;
 800db14:	e7bd      	b.n	800da92 <LoRaMacCommandsAddCmd+0x22>
 800db16:	bf00      	nop
 800db18:	2000159b 	.word	0x2000159b
 800db1c:	20001584 	.word	0x20001584

0800db20 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800db20:	b1d8      	cbz	r0, 800db5a <LoRaMacCommandsRemoveCmd+0x3a>
{
 800db22:	b510      	push	{r4, lr}
 800db24:	4684      	mov	ip, r0
    curElement = list->First;
 800db26:	4b1c      	ldr	r3, [pc, #112]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db28:	6819      	ldr	r1, [r3, #0]
    if( element != curElement )
 800db2a:	4288      	cmp	r0, r1
 800db2c:	d00d      	beq.n	800db4a <LoRaMacCommandsRemoveCmd+0x2a>
    curElement = list->First;
 800db2e:	460b      	mov	r3, r1
 800db30:	e000      	b.n	800db34 <LoRaMacCommandsRemoveCmd+0x14>
            curElement = curElement->Next;
 800db32:	4613      	mov	r3, r2
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800db34:	b19b      	cbz	r3, 800db5e <LoRaMacCommandsRemoveCmd+0x3e>
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	4594      	cmp	ip, r2
 800db3a:	d1fa      	bne.n	800db32 <LoRaMacCommandsRemoveCmd+0x12>
    if( list->First == element )
 800db3c:	4291      	cmp	r1, r2
 800db3e:	d005      	beq.n	800db4c <LoRaMacCommandsRemoveCmd+0x2c>
    if( list->Last == element )
 800db40:	4a15      	ldr	r2, [pc, #84]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db42:	6852      	ldr	r2, [r2, #4]
 800db44:	4594      	cmp	ip, r2
 800db46:	d111      	bne.n	800db6c <LoRaMacCommandsRemoveCmd+0x4c>
 800db48:	e00d      	b.n	800db66 <LoRaMacCommandsRemoveCmd+0x46>
        curElement = NULL;
 800db4a:	2300      	movs	r3, #0
        list->First = element->Next;
 800db4c:	6809      	ldr	r1, [r1, #0]
 800db4e:	4a12      	ldr	r2, [pc, #72]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db50:	6011      	str	r1, [r2, #0]
    if( list->Last == element )
 800db52:	6852      	ldr	r2, [r2, #4]
 800db54:	4594      	cmp	ip, r2
 800db56:	d108      	bne.n	800db6a <LoRaMacCommandsRemoveCmd+0x4a>
 800db58:	e005      	b.n	800db66 <LoRaMacCommandsRemoveCmd+0x46>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800db5a:	2001      	movs	r0, #1
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800db5c:	4770      	bx	lr
    if( list->Last == element )
 800db5e:	4a0e      	ldr	r2, [pc, #56]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db60:	6852      	ldr	r2, [r2, #4]
 800db62:	4594      	cmp	ip, r2
 800db64:	d105      	bne.n	800db72 <LoRaMacCommandsRemoveCmd+0x52>
        list->Last = PrevElement;
 800db66:	4a0c      	ldr	r2, [pc, #48]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db68:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 800db6a:	b113      	cbz	r3, 800db72 <LoRaMacCommandsRemoveCmd+0x52>
        PrevElement->Next = element->Next;
 800db6c:	f8dc 2000 	ldr.w	r2, [ip]
 800db70:	601a      	str	r2, [r3, #0]
    element->Next = NULL;
 800db72:	2400      	movs	r4, #0
 800db74:	f8cc 4000 	str.w	r4, [ip]
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800db78:	4a07      	ldr	r2, [pc, #28]	; (800db98 <LoRaMacCommandsRemoveCmd+0x78>)
 800db7a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800db7e:	3b01      	subs	r3, #1
 800db80:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800db84:	1a5b      	subs	r3, r3, r1
 800db86:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800db8a:	2210      	movs	r2, #16
 800db8c:	4621      	mov	r1, r4
 800db8e:	4660      	mov	r0, ip
 800db90:	f002 f9a8 	bl	800fee4 <memset1>
    return LORAMAC_COMMANDS_SUCCESS;
 800db94:	4620      	mov	r0, r4
}
 800db96:	bd10      	pop	{r4, pc}
 800db98:	20001584 	.word	0x20001584

0800db9c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800db9c:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <LoRaMacCommandsGetCmd+0x20>)
 800db9e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800dba0:	b13b      	cbz	r3, 800dbb2 <LoRaMacCommandsGetCmd+0x16>
 800dba2:	791a      	ldrb	r2, [r3, #4]
 800dba4:	4282      	cmp	r2, r0
 800dba6:	d006      	beq.n	800dbb6 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 800dba8:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1f9      	bne.n	800dba2 <LoRaMacCommandsGetCmd+0x6>
    *macCmd = curElement;

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800dbae:	2003      	movs	r0, #3
 800dbb0:	e002      	b.n	800dbb8 <LoRaMacCommandsGetCmd+0x1c>
 800dbb2:	2003      	movs	r0, #3
 800dbb4:	e000      	b.n	800dbb8 <LoRaMacCommandsGetCmd+0x1c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800dbb6:	2000      	movs	r0, #0
    *macCmd = curElement;
 800dbb8:	600b      	str	r3, [r1, #0]
}
 800dbba:	4770      	bx	lr
 800dbbc:	20001584 	.word	0x20001584

0800dbc0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>)
 800dbc2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800dbc4:	b120      	cbz	r0, 800dbd0 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800dbc6:	7b03      	ldrb	r3, [r0, #12]
 800dbc8:	b133      	cbz	r3, 800dbd8 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800dbca:	6800      	ldr	r0, [r0, #0]
    while( curElement != NULL )
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d1fa      	bne.n	800dbc6 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	4770      	bx	lr
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	bd10      	pop	{r4, pc}
{
 800dbd8:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800dbda:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800dbdc:	f7ff ffa0 	bl	800db20 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800dbe0:	4620      	mov	r0, r4
    while( curElement != NULL )
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d0f6      	beq.n	800dbd4 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
        if( curElement->IsSticky == false )
 800dbe6:	7b03      	ldrb	r3, [r0, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d0f6      	beq.n	800dbda <LoRaMacCommandsRemoveNoneStickyCmds+0x1a>
            curElement = curElement->Next;
 800dbec:	6800      	ldr	r0, [r0, #0]
 800dbee:	e7f8      	b.n	800dbe2 <LoRaMacCommandsRemoveNoneStickyCmds+0x22>
 800dbf0:	20001584 	.word	0x20001584

0800dbf4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800dbf4:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 800dbf8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800dbfa:	b91c      	cbnz	r4, 800dc04 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	bd10      	pop	{r4, pc}
    while( curElement != NULL )
 800dc00:	2c00      	cmp	r4, #0
 800dc02:	d0fb      	beq.n	800dbfc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        nexElement = curElement->Next;
 800dc04:	4620      	mov	r0, r4
 800dc06:	6824      	ldr	r4, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800dc08:	7903      	ldrb	r3, [r0, #4]
    switch( cid )
 800dc0a:	2b05      	cmp	r3, #5
 800dc0c:	d003      	beq.n	800dc16 <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
 800dc0e:	3b08      	subs	r3, #8
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d8f4      	bhi.n	800dc00 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
            LoRaMacCommandsRemoveCmd( curElement );
 800dc16:	f7ff ff83 	bl	800db20 <LoRaMacCommandsRemoveCmd>
 800dc1a:	e7f1      	b.n	800dc00 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
 800dc1c:	20001584 	.word	0x20001584

0800dc20 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800dc20:	b128      	cbz	r0, 800dc2e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800dc22:	4a04      	ldr	r2, [pc, #16]	; (800dc34 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800dc24:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800dc28:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800dc2e:	2001      	movs	r0, #1
}
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	20001584 	.word	0x20001584

0800dc38 <LoRaMacCommandsSerializeCmds>:
{
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800dc38:	b352      	cbz	r2, 800dc90 <LoRaMacCommandsSerializeCmds+0x58>
{
 800dc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3e:	4607      	mov	r7, r0
 800dc40:	4688      	mov	r8, r1
 800dc42:	4616      	mov	r6, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800dc44:	b331      	cbz	r1, 800dc94 <LoRaMacCommandsSerializeCmds+0x5c>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800dc46:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <LoRaMacCommandsSerializeCmds+0x60>)
 800dc48:	681c      	ldr	r4, [r3, #0]
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800dc4a:	b1dc      	cbz	r4, 800dc84 <LoRaMacCommandsSerializeCmds+0x4c>
    uint8_t itr = 0;
 800dc4c:	2100      	movs	r1, #0
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800dc4e:	1a7a      	subs	r2, r7, r1
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	3301      	adds	r3, #1
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d30f      	bcc.n	800dc78 <LoRaMacCommandsSerializeCmds+0x40>
        {
            buffer[itr++] = curElement->CID;
 800dc58:	1c4d      	adds	r5, r1, #1
 800dc5a:	b2ed      	uxtb	r5, r5
 800dc5c:	7923      	ldrb	r3, [r4, #4]
 800dc5e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800dc60:	8922      	ldrh	r2, [r4, #8]
 800dc62:	1d61      	adds	r1, r4, #5
 800dc64:	1970      	adds	r0, r6, r5
 800dc66:	f002 f923 	bl	800feb0 <memcpy1>
            itr += curElement->PayloadSize;
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	441d      	add	r5, r3
 800dc6e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800dc70:	6824      	ldr	r4, [r4, #0]
    while( curElement != NULL )
 800dc72:	2c00      	cmp	r4, #0
 800dc74:	d1eb      	bne.n	800dc4e <LoRaMacCommandsSerializeCmds+0x16>
 800dc76:	e005      	b.n	800dc84 <LoRaMacCommandsSerializeCmds+0x4c>

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800dc78:	4620      	mov	r0, r4
 800dc7a:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800dc7c:	f7ff ff50 	bl	800db20 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800dc80:	2c00      	cmp	r4, #0
 800dc82:	d1f9      	bne.n	800dc78 <LoRaMacCommandsSerializeCmds+0x40>
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800dc84:	4640      	mov	r0, r8
 800dc86:	f7ff ffcb 	bl	800dc20 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800dc8a:	2000      	movs	r0, #0
}
 800dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800dc90:	2001      	movs	r0, #1
}
 800dc92:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800dc94:	2001      	movs	r0, #1
 800dc96:	e7f9      	b.n	800dc8c <LoRaMacCommandsSerializeCmds+0x54>
 800dc98:	20001584 	.word	0x20001584

0800dc9c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800dc9c:	1e83      	subs	r3, r0, #2
 800dc9e:	2b11      	cmp	r3, #17
 800dca0:	d824      	bhi.n	800dcec <LoRaMacCommandsGetCmdSize+0x50>
 800dca2:	e8df f003 	tbb	[pc, r3]
 800dca6:	0b09      	.short	0x0b09
 800dca8:	110f240d 	.word	0x110f240d
 800dcac:	23171513 	.word	0x23171513
 800dcb0:	23231923 	.word	0x23231923
 800dcb4:	211f1d1b 	.word	0x211f1d1b
 800dcb8:	2003      	movs	r0, #3
 800dcba:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800dcbc:	2005      	movs	r0, #5
            break;
 800dcbe:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800dcc0:	2002      	movs	r0, #2
            break;
 800dcc2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800dcc4:	2001      	movs	r0, #1
            break;
 800dcc6:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800dcc8:	2006      	movs	r0, #6
            break;
 800dcca:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800dccc:	2002      	movs	r0, #2
            break;
 800dcce:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800dcd0:	2002      	movs	r0, #2
            break;
 800dcd2:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800dcd4:	2005      	movs	r0, #5
            break;
 800dcd6:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800dcd8:	2006      	movs	r0, #6
            break;
 800dcda:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800dcdc:	2001      	movs	r0, #1
            break;
 800dcde:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800dce0:	2005      	movs	r0, #5
            break;
 800dce2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800dce4:	2004      	movs	r0, #4
            break;
 800dce6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800dce8:	2004      	movs	r0, #4
            break;
 800dcea:	4770      	bx	lr
    uint8_t cidSize = 0;
 800dcec:	2000      	movs	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800dcee:	4770      	bx	lr

0800dcf0 <GetElement>:
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800dcf0:	b430      	push	{r4, r5}
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dcf2:	4b0d      	ldr	r3, [pc, #52]	; (800dd28 <GetElement+0x38>)
 800dcf4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800dcf8:	b18c      	cbz	r4, 800dd1e <GetElement+0x2e>
 800dcfa:	2300      	movs	r3, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800dcfc:	4d0a      	ldr	r5, [pc, #40]	; (800dd28 <GetElement+0x38>)
 800dcfe:	f105 0c1c 	add.w	ip, r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800dd02:	780a      	ldrb	r2, [r1, #0]
 800dd04:	4282      	cmp	r2, r0
 800dd06:	d00c      	beq.n	800dd22 <GetElement+0x32>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800dd08:	4561      	cmp	r1, ip
        bufferPointer++;
 800dd0a:	bf14      	ite	ne
 800dd0c:	3104      	addne	r1, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dd0e:	f105 010c 	addeq.w	r1, r5, #12
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800dd12:	3301      	adds	r3, #1
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	4294      	cmp	r4, r2
 800dd18:	d8f3      	bhi.n	800dd02 <GetElement+0x12>
            return element;
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	e002      	b.n	800dd24 <GetElement+0x34>
        return NULL;
 800dd1e:	2000      	movs	r0, #0
 800dd20:	e000      	b.n	800dd24 <GetElement+0x34>
 800dd22:	4608      	mov	r0, r1
}
 800dd24:	bc30      	pop	{r4, r5}
 800dd26:	4770      	bx	lr
 800dd28:	20001680 	.word	0x20001680

0800dd2c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800dd2c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800dd2e:	4c08      	ldr	r4, [pc, #32]	; (800dd50 <LoRaMacConfirmQueueInit+0x24>)
 800dd30:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dd38:	f104 000c 	add.w	r0, r4, #12
 800dd3c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dd3e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800dd40:	2214      	movs	r2, #20
 800dd42:	21ff      	movs	r1, #255	; 0xff
 800dd44:	f002 f8ce 	bl	800fee4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800dd4e:	bd10      	pop	{r4, pc}
 800dd50:	20001680 	.word	0x20001680

0800dd54 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dd54:	4b11      	ldr	r3, [pc, #68]	; (800dd9c <LoRaMacConfirmQueueAdd+0x48>)
 800dd56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd5a:	2b04      	cmp	r3, #4
 800dd5c:	d81b      	bhi.n	800dd96 <LoRaMacConfirmQueueAdd+0x42>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <LoRaMacConfirmQueueAdd+0x48>)
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	7801      	ldrb	r1, [r0, #0]
 800dd64:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800dd66:	689a      	ldr	r2, [r3, #8]
 800dd68:	7841      	ldrb	r1, [r0, #1]
 800dd6a:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800dd6c:	689a      	ldr	r2, [r3, #8]
 800dd6e:	78c1      	ldrb	r1, [r0, #3]
 800dd70:	70d1      	strb	r1, [r2, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	2100      	movs	r1, #0
 800dd76:	7091      	strb	r1, [r2, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800dd78:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dd7c:	3201      	adds	r2, #1
 800dd7e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800dd82:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800dd84:	331c      	adds	r3, #28
 800dd86:	429a      	cmp	r2, r3
        bufferPointer++;
 800dd88:	bf14      	ite	ne
 800dd8a:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dd8c:	4a04      	ldreq	r2, [pc, #16]	; (800dda0 <LoRaMacConfirmQueueAdd+0x4c>)
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800dd8e:	4b03      	ldr	r3, [pc, #12]	; (800dd9c <LoRaMacConfirmQueueAdd+0x48>)
 800dd90:	609a      	str	r2, [r3, #8]

    return true;
 800dd92:	2001      	movs	r0, #1
 800dd94:	4770      	bx	lr
        return false;
 800dd96:	2000      	movs	r0, #0
}
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	20001680 	.word	0x20001680
 800dda0:	2000168c 	.word	0x2000168c

0800dda4 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dda4:	4b09      	ldr	r3, [pc, #36]	; (800ddcc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800dda6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddaa:	b16b      	cbz	r3, 800ddc8 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ddac:	4a07      	ldr	r2, [pc, #28]	; (800ddcc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	f882 3020 	strb.w	r3, [r2, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ddb4:	6853      	ldr	r3, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ddb6:	321c      	adds	r2, #28
 800ddb8:	4293      	cmp	r3, r2
        bufferPointer++;
 800ddba:	bf14      	ite	ne
 800ddbc:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ddbe:	4b04      	ldreq	r3, [pc, #16]	; (800ddd0 <LoRaMacConfirmQueueRemoveFirst+0x2c>)
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ddc0:	4a02      	ldr	r2, [pc, #8]	; (800ddcc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ddc2:	6053      	str	r3, [r2, #4]

    return true;
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	4770      	bx	lr
        return false;
 800ddc8:	2000      	movs	r0, #0
}
 800ddca:	4770      	bx	lr
 800ddcc:	20001680 	.word	0x20001680
 800ddd0:	2000168c 	.word	0x2000168c

0800ddd4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ddd4:	4b08      	ldr	r3, [pc, #32]	; (800ddf8 <LoRaMacConfirmQueueSetStatus+0x24>)
 800ddd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddda:	b163      	cbz	r3, 800ddf6 <LoRaMacConfirmQueueSetStatus+0x22>
{
 800dddc:	b510      	push	{r4, lr}
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <LoRaMacConfirmQueueSetStatus+0x24>)
 800dde4:	689a      	ldr	r2, [r3, #8]
 800dde6:	6859      	ldr	r1, [r3, #4]
 800dde8:	f7ff ff82 	bl	800dcf0 <GetElement>
        if( element != NULL )
 800ddec:	b110      	cbz	r0, 800ddf4 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
 800ddee:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800ddf4:	bd10      	pop	{r4, pc}
 800ddf6:	4770      	bx	lr
 800ddf8:	20001680 	.word	0x20001680

0800ddfc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800ddfc:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ddfe:	4b08      	ldr	r3, [pc, #32]	; (800de20 <LoRaMacConfirmQueueGetStatus+0x24>)
 800de00:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de04:	b13b      	cbz	r3, 800de16 <LoRaMacConfirmQueueGetStatus+0x1a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800de06:	4b06      	ldr	r3, [pc, #24]	; (800de20 <LoRaMacConfirmQueueGetStatus+0x24>)
 800de08:	689a      	ldr	r2, [r3, #8]
 800de0a:	6859      	ldr	r1, [r3, #4]
 800de0c:	f7ff ff70 	bl	800dcf0 <GetElement>
        if( element != NULL )
 800de10:	b118      	cbz	r0, 800de1a <LoRaMacConfirmQueueGetStatus+0x1e>
        {
            return element->Status;
 800de12:	7840      	ldrb	r0, [r0, #1]
 800de14:	e000      	b.n	800de18 <LoRaMacConfirmQueueGetStatus+0x1c>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de16:	2001      	movs	r0, #1
}
 800de18:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de1a:	2001      	movs	r0, #1
 800de1c:	e7fc      	b.n	800de18 <LoRaMacConfirmQueueGetStatus+0x1c>
 800de1e:	bf00      	nop
 800de20:	20001680 	.word	0x20001680

0800de24 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800de24:	4a0f      	ldr	r2, [pc, #60]	; (800de64 <LoRaMacConfirmQueueSetStatusCmn+0x40>)
 800de26:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800de28:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800de2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800de30:	b1ba      	cbz	r2, 800de62 <LoRaMacConfirmQueueSetStatusCmn+0x3e>
{
 800de32:	b500      	push	{lr}
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800de34:	f04f 0e01 	mov.w	lr, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800de38:	490a      	ldr	r1, [pc, #40]	; (800de64 <LoRaMacConfirmQueueSetStatusCmn+0x40>)
 800de3a:	f101 0c1c 	add.w	ip, r1, #28
 800de3e:	e007      	b.n	800de50 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
 800de40:	4563      	cmp	r3, ip
        bufferPointer++;
 800de42:	bf14      	ite	ne
 800de44:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800de46:	f101 030c 	addeq.w	r3, r1, #12
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800de4a:	688a      	ldr	r2, [r1, #8]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d006      	beq.n	800de5e <LoRaMacConfirmQueueSetStatusCmn+0x3a>
            element->Status = status;
 800de50:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800de52:	78da      	ldrb	r2, [r3, #3]
 800de54:	2a00      	cmp	r2, #0
 800de56:	d1f3      	bne.n	800de40 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
                element->ReadyToHandle = true;
 800de58:	f883 e002 	strb.w	lr, [r3, #2]
 800de5c:	e7f0      	b.n	800de40 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
    }
}
 800de5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	20001680 	.word	0x20001680

0800de68 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800de68:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800de6a:	4b04      	ldr	r3, [pc, #16]	; (800de7c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800de6c:	689a      	ldr	r2, [r3, #8]
 800de6e:	6859      	ldr	r1, [r3, #4]
 800de70:	f7ff ff3e 	bl	800dcf0 <GetElement>
    {
        return true;
    }
    return false;
}
 800de74:	3800      	subs	r0, #0
 800de76:	bf18      	it	ne
 800de78:	2001      	movne	r0, #1
 800de7a:	bd08      	pop	{r3, pc}
 800de7c:	20001680 	.word	0x20001680

0800de80 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800de80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de82:	b083      	sub	sp, #12
 800de84:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800de86:	4b19      	ldr	r3, [pc, #100]	; (800deec <LoRaMacConfirmQueueHandleCb+0x6c>)
 800de88:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800de8c:	2204      	movs	r2, #4
 800de8e:	2100      	movs	r1, #0
 800de90:	eb0d 0002 	add.w	r0, sp, r2
 800de94:	f002 f826 	bl	800fee4 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800de98:	b32f      	cbz	r7, 800dee6 <LoRaMacConfirmQueueHandleCb+0x66>
 800de9a:	2500      	movs	r5, #0
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800de9c:	4c13      	ldr	r4, [pc, #76]	; (800deec <LoRaMacConfirmQueueHandleCb+0x6c>)
 800de9e:	e011      	b.n	800dec4 <LoRaMacConfirmQueueHandleCb+0x44>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800dea6:	785a      	ldrb	r2, [r3, #1]
 800dea8:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800deac:	78db      	ldrb	r3, [r3, #3]
 800deae:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800deb2:	f7ff ff77 	bl	800dda4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800deb6:	a801      	add	r0, sp, #4
 800deb8:	f7ff ff4c 	bl	800dd54 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800debc:	3501      	adds	r5, #1
 800debe:	b2eb      	uxtb	r3, r5
 800dec0:	429f      	cmp	r7, r3
 800dec2:	d910      	bls.n	800dee6 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800dec4:	6863      	ldr	r3, [r4, #4]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	7033      	strb	r3, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800deca:	6863      	ldr	r3, [r4, #4]
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	7073      	strb	r3, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ded0:	6863      	ldr	r3, [r4, #4]
        if( readyToHandle == true )
 800ded2:	789a      	ldrb	r2, [r3, #2]
 800ded4:	2a00      	cmp	r2, #0
 800ded6:	d0e3      	beq.n	800dea0 <LoRaMacConfirmQueueHandleCb+0x20>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	4630      	mov	r0, r6
 800dede:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800dee0:	f7ff ff60 	bl	800dda4 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800dee4:	e7ea      	b.n	800debc <LoRaMacConfirmQueueHandleCb+0x3c>
        }
    }
}
 800dee6:	b003      	add	sp, #12
 800dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deea:	bf00      	nop
 800deec:	20001680 	.word	0x20001680

0800def0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800def0:	4b01      	ldr	r3, [pc, #4]	; (800def8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800def2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800def6:	4770      	bx	lr
 800def8:	20001680 	.word	0x20001680

0800defc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800defc:	4b03      	ldr	r3, [pc, #12]	; (800df0c <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800defe:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 800df02:	2804      	cmp	r0, #4
 800df04:	bf94      	ite	ls
 800df06:	2000      	movls	r0, #0
 800df08:	2001      	movhi	r0, #1
 800df0a:	4770      	bx	lr
 800df0c:	20001680 	.word	0x20001680

0800df10 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800df10:	b1f1      	cbz	r1, 800df50 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800df12:	3801      	subs	r0, #1
 800df14:	2803      	cmp	r0, #3
 800df16:	d81d      	bhi.n	800df54 <GetLastFcntDown+0x44>
 800df18:	e8df f000 	tbb	[pc, r0]
 800df1c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800df20:	4a0d      	ldr	r2, [pc, #52]	; (800df58 <GetLastFcntDown+0x48>)
 800df22:	6812      	ldr	r2, [r2, #0]
 800df24:	6912      	ldr	r2, [r2, #16]
 800df26:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800df28:	2000      	movs	r0, #0
            break;
 800df2a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800df2c:	4a0a      	ldr	r2, [pc, #40]	; (800df58 <GetLastFcntDown+0x48>)
 800df2e:	6812      	ldr	r2, [r2, #0]
 800df30:	6952      	ldr	r2, [r2, #20]
 800df32:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800df34:	2000      	movs	r0, #0
            break;
 800df36:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800df38:	4a07      	ldr	r2, [pc, #28]	; (800df58 <GetLastFcntDown+0x48>)
 800df3a:	6812      	ldr	r2, [r2, #0]
 800df3c:	6992      	ldr	r2, [r2, #24]
 800df3e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800df40:	2000      	movs	r0, #0
            break;
 800df42:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800df44:	4a04      	ldr	r2, [pc, #16]	; (800df58 <GetLastFcntDown+0x48>)
 800df46:	6812      	ldr	r2, [r2, #0]
 800df48:	69d2      	ldr	r2, [r2, #28]
 800df4a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800df4c:	2000      	movs	r0, #0
            break;
 800df4e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800df50:	200a      	movs	r0, #10
 800df52:	4770      	bx	lr
    switch( fCntID )
 800df54:	2005      	movs	r0, #5
}
 800df56:	4770      	bx	lr
 800df58:	200016a4 	.word	0x200016a4

0800df5c <DeriveSessionKey10x>:
{
 800df5c:	b510      	push	{r4, lr}
 800df5e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800df60:	2400      	movs	r4, #0
 800df62:	9402      	str	r4, [sp, #8]
 800df64:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800df66:	2808      	cmp	r0, #8
 800df68:	d023      	beq.n	800dfb2 <DeriveSessionKey10x+0x56>
 800df6a:	2809      	cmp	r0, #9
 800df6c:	d123      	bne.n	800dfb6 <DeriveSessionKey10x+0x5a>
 800df6e:	2402      	movs	r4, #2
            compBase[0] = 0x01;
 800df70:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800df74:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800df78:	0a0c      	lsrs	r4, r1, #8
 800df7a:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800df7e:	0c09      	lsrs	r1, r1, #16
 800df80:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800df84:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800df88:	0a11      	lsrs	r1, r2, #8
 800df8a:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800df8e:	0c12      	lsrs	r2, r2, #16
 800df90:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800df94:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800df98:	0a1b      	lsrs	r3, r3, #8
 800df9a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800df9e:	4602      	mov	r2, r0
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	4668      	mov	r0, sp
 800dfa4:	f7fb fc6e 	bl	8009884 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	bf18      	it	ne
 800dfac:	200f      	movne	r0, #15
}
 800dfae:	b004      	add	sp, #16
 800dfb0:	bd10      	pop	{r4, pc}
    switch( keyID )
 800dfb2:	2401      	movs	r4, #1
 800dfb4:	e7dc      	b.n	800df70 <DeriveSessionKey10x+0x14>
 800dfb6:	200b      	movs	r0, #11
 800dfb8:	e7f9      	b.n	800dfae <DeriveSessionKey10x+0x52>

0800dfba <PayloadEncrypt>:
{
 800dfba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfbe:	b089      	sub	sp, #36	; 0x24
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	9911      	ldr	r1, [sp, #68]	; 0x44
    if( buffer == 0 )
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d05a      	beq.n	800e07e <PayloadEncrypt+0xc4>
 800dfc8:	4690      	mov	r8, r2
 800dfca:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800dfcc:	2200      	movs	r2, #0
 800dfce:	9204      	str	r2, [sp, #16]
 800dfd0:	9205      	str	r2, [sp, #20]
 800dfd2:	9206      	str	r2, [sp, #24]
 800dfd4:	9207      	str	r2, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800dfd6:	9200      	str	r2, [sp, #0]
 800dfd8:	9201      	str	r2, [sp, #4]
 800dfda:	9203      	str	r2, [sp, #12]
    aBlock[0] = 0x01;
 800dfdc:	2201      	movs	r2, #1
 800dfde:	f88d 2000 	strb.w	r2, [sp]
    aBlock[5] = dir;
 800dfe2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800dfe6:	f88d 2005 	strb.w	r2, [sp, #5]
    aBlock[6] = address & 0xFF;
 800dfea:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800dfee:	0a1a      	lsrs	r2, r3, #8
 800dff0:	f88d 2007 	strb.w	r2, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800dff4:	0c1a      	lsrs	r2, r3, #16
 800dff6:	f88d 2008 	strb.w	r2, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800dffa:	0e1b      	lsrs	r3, r3, #24
 800dffc:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800e000:	f88d 100a 	strb.w	r1, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800e004:	0a0b      	lsrs	r3, r1, #8
 800e006:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800e00a:	0c0b      	lsrs	r3, r1, #16
 800e00c:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800e010:	0e09      	lsrs	r1, r1, #24
 800e012:	f88d 100d 	strb.w	r1, [sp, #13]
    while( size > 0 )
 800e016:	2e00      	cmp	r6, #0
 800e018:	dd34      	ble.n	800e084 <PayloadEncrypt+0xca>
 800e01a:	2700      	movs	r7, #0
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800e01c:	f04f 0910 	mov.w	r9, #16
 800e020:	e004      	b.n	800e02c <PayloadEncrypt+0x72>
        size -= 16;
 800e022:	3e10      	subs	r6, #16
 800e024:	b236      	sxth	r6, r6
    while( size > 0 )
 800e026:	3701      	adds	r7, #1
 800e028:	2e00      	cmp	r6, #0
 800e02a:	dd30      	ble.n	800e08e <PayloadEncrypt+0xd4>
 800e02c:	b2fb      	uxtb	r3, r7
 800e02e:	011d      	lsls	r5, r3, #4
 800e030:	b2ed      	uxtb	r5, r5
        aBlock[15] = ctr & 0xFF;
 800e032:	3301      	adds	r3, #1
 800e034:	f88d 300f 	strb.w	r3, [sp, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800e038:	ab04      	add	r3, sp, #16
 800e03a:	4642      	mov	r2, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	4668      	mov	r0, sp
 800e040:	f7fb fba6 	bl	8009790 <SecureElementAesEncrypt>
 800e044:	4686      	mov	lr, r0
 800e046:	bb00      	cbnz	r0, 800e08a <PayloadEncrypt+0xd0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800e048:	4631      	mov	r1, r6
 800e04a:	2e10      	cmp	r6, #16
 800e04c:	bfa8      	it	ge
 800e04e:	2110      	movge	r1, #16
 800e050:	2900      	cmp	r1, #0
 800e052:	dde6      	ble.n	800e022 <PayloadEncrypt+0x68>
 800e054:	4603      	mov	r3, r0
 800e056:	f04f 0c00 	mov.w	ip, #0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800e05a:	eb05 000c 	add.w	r0, r5, ip
 800e05e:	f10c 0220 	add.w	r2, ip, #32
 800e062:	eb0d 0c02 	add.w	ip, sp, r2
 800e066:	5c22      	ldrb	r2, [r4, r0]
 800e068:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800e06c:	ea82 020c 	eor.w	r2, r2, ip
 800e070:	5422      	strb	r2, [r4, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800e072:	3301      	adds	r3, #1
 800e074:	b2db      	uxtb	r3, r3
 800e076:	469c      	mov	ip, r3
 800e078:	428b      	cmp	r3, r1
 800e07a:	dbee      	blt.n	800e05a <PayloadEncrypt+0xa0>
 800e07c:	e7d1      	b.n	800e022 <PayloadEncrypt+0x68>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e07e:	f04f 0e0a 	mov.w	lr, #10
 800e082:	e004      	b.n	800e08e <PayloadEncrypt+0xd4>
    return LORAMAC_CRYPTO_SUCCESS;
 800e084:	f04f 0e00 	mov.w	lr, #0
 800e088:	e001      	b.n	800e08e <PayloadEncrypt+0xd4>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e08a:	f04f 0e0f 	mov.w	lr, #15
}
 800e08e:	4670      	mov	r0, lr
 800e090:	b009      	add	sp, #36	; 0x24
 800e092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e096 <VerifyCmacB0>:
{
 800e096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09a:	b0c4      	sub	sp, #272	; 0x110
 800e09c:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
 800e09e:	9d4c      	ldr	r5, [sp, #304]	; 0x130
    if( msg == 0 )
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d048      	beq.n	800e136 <VerifyCmacB0+0xa0>
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	4617      	mov	r7, r2
 800e0a8:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800e0aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e0ae:	d844      	bhi.n	800e13a <VerifyCmacB0+0xa4>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800e0b0:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	4668      	mov	r0, sp
 800e0b8:	f001 ff14 	bl	800fee4 <memset1>
    b0[0] = 0x49;
 800e0bc:	2349      	movs	r3, #73	; 0x49
 800e0be:	f88d 3000 	strb.w	r3, [sp]
        b0[1] = 0x00;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = 0x00;
 800e0c8:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[3] = 0x00;
 800e0cc:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800e0d0:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[5] = dir;
 800e0d4:	f89d 2128 	ldrb.w	r2, [sp, #296]	; 0x128
 800e0d8:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[6] = devAddr & 0xFF;
 800e0dc:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800e0e0:	0a32      	lsrs	r2, r6, #8
 800e0e2:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800e0e6:	0c32      	lsrs	r2, r6, #16
 800e0e8:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800e0ec:	0e36      	lsrs	r6, r6, #24
 800e0ee:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[10] = fCnt & 0xFF;
 800e0f2:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800e0f6:	0a2a      	lsrs	r2, r5, #8
 800e0f8:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800e0fc:	0c2a      	lsrs	r2, r5, #16
 800e0fe:	f88d 200c 	strb.w	r2, [sp, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800e102:	0e2d      	lsrs	r5, r5, #24
 800e104:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[14] = 0x00;
 800e108:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[15] = msgLen & 0xFF;
 800e10c:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800e110:	4622      	mov	r2, r4
 800e112:	4641      	mov	r1, r8
 800e114:	a804      	add	r0, sp, #16
 800e116:	f001 fecb 	bl	800feb0 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800e11a:	463b      	mov	r3, r7
 800e11c:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800e11e:	f104 0110 	add.w	r1, r4, #16
 800e122:	4668      	mov	r0, sp
 800e124:	f7fb fb1d 	bl	8009762 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800e128:	b110      	cbz	r0, 800e130 <VerifyCmacB0+0x9a>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e12a:	2801      	cmp	r0, #1
 800e12c:	bf18      	it	ne
 800e12e:	200f      	movne	r0, #15
}
 800e130:	b044      	add	sp, #272	; 0x110
 800e132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e136:	200a      	movs	r0, #10
 800e138:	e7fa      	b.n	800e130 <VerifyCmacB0+0x9a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800e13a:	200e      	movs	r0, #14
 800e13c:	e7f8      	b.n	800e130 <VerifyCmacB0+0x9a>
	...

0800e140 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800e140:	b1b0      	cbz	r0, 800e170 <LoRaMacCryptoInit+0x30>
{
 800e142:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800e144:	4c0b      	ldr	r4, [pc, #44]	; (800e174 <LoRaMacCryptoInit+0x34>)
 800e146:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800e148:	2228      	movs	r2, #40	; 0x28
 800e14a:	2100      	movs	r1, #0
 800e14c:	f001 feca 	bl	800fee4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	2201      	movs	r2, #1
 800e154:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800e156:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800e158:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800e15a:	2000      	movs	r0, #0
 800e15c:	7018      	strb	r0, [r3, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 800e15e:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e160:	f04f 32ff 	mov.w	r2, #4294967295
 800e164:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e166:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e168:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800e16a:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800e16c:	61da      	str	r2, [r3, #28]

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e16e:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800e170:	2009      	movs	r0, #9
}
 800e172:	4770      	bx	lr
 800e174:	200016a4 	.word	0x200016a4

0800e178 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800e178:	4b02      	ldr	r3, [pc, #8]	; (800e184 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800e17e:	2000      	movs	r0, #0
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	200016a4 	.word	0x200016a4

0800e188 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800e188:	b130      	cbz	r0, 800e198 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800e18a:	4b04      	ldr	r3, [pc, #16]	; (800e19c <LoRaMacCryptoGetFCntUp+0x14>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	3301      	adds	r3, #1
 800e192:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800e194:	2000      	movs	r0, #0
 800e196:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e198:	200a      	movs	r0, #10
}
 800e19a:	4770      	bx	lr
 800e19c:	200016a4 	.word	0x200016a4

0800e1a0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800e1aa:	b34b      	cbz	r3, 800e200 <LoRaMacCryptoGetFCntDown+0x60>
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800e1b0:	a901      	add	r1, sp, #4
 800e1b2:	f7ff fead 	bl	800df10 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e1b6:	b9b8      	cbnz	r0, 800e1e8 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1be:	d004      	beq.n	800e1ca <LoRaMacCryptoGetFCntDown+0x2a>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	dd11      	ble.n	800e1ec <LoRaMacCryptoGetFCntDown+0x4c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800e1c8:	189c      	adds	r4, r3, r2
        *currentDown = frameFcnt;
 800e1ca:	6034      	str	r4, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800e1cc:	4a0d      	ldr	r2, [pc, #52]	; (800e204 <LoRaMacCryptoGetFCntDown+0x64>)
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	7892      	ldrb	r2, [r2, #2]
 800e1d2:	b94a      	cbnz	r2, 800e1e8 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800e1d4:	1ae4      	subs	r4, r4, r3
 800e1d6:	eb63 0303 	sbc.w	r3, r3, r3
 800e1da:	42ac      	cmp	r4, r5
 800e1dc:	f173 0300 	sbcs.w	r3, r3, #0
 800e1e0:	bfac      	ite	ge
 800e1e2:	2001      	movge	r0, #1
 800e1e4:	2000      	movlt	r0, #0
 800e1e6:	00c0      	lsls	r0, r0, #3
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e1e8:	b002      	add	sp, #8
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
        else if( fCntDiff == 0 )
 800e1ec:	b12a      	cbz	r2, 800e1fa <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800e1ee:	0c1a      	lsrs	r2, r3, #16
 800e1f0:	0412      	lsls	r2, r2, #16
 800e1f2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800e1f6:	4414      	add	r4, r2
 800e1f8:	e7e7      	b.n	800e1ca <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800e1fa:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800e1fc:	2007      	movs	r0, #7
 800e1fe:	e7f3      	b.n	800e1e8 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e200:	200a      	movs	r0, #10
 800e202:	e7f1      	b.n	800e1e8 <LoRaMacCryptoGetFCntDown+0x48>
 800e204:	200016a4 	.word	0x200016a4

0800e208 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800e208:	b908      	cbnz	r0, 800e20e <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e20a:	200a      	movs	r0, #10
 800e20c:	4770      	bx	lr
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800e20e:	4a03      	ldr	r2, [pc, #12]	; (800e21c <LoRaMacCryptoSetMulticastReference+0x14>)
 800e210:	6812      	ldr	r2, [r2, #0]
 800e212:	321c      	adds	r2, #28
 800e214:	6242      	str	r2, [r0, #36]	; 0x24
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e216:	2000      	movs	r0, #0
}
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	200016a4 	.word	0x200016a4

0800e220 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800e220:	b310      	cbz	r0, 800e268 <LoRaMacCryptoPrepareJoinRequest+0x48>
{
 800e222:	b510      	push	{r4, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800e22c:	a803      	add	r0, sp, #12
 800e22e:	f7fb fb89 	bl	8009944 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800e232:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e236:	4a0f      	ldr	r2, [pc, #60]	; (800e274 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800e238:	6812      	ldr	r2, [r2, #0]
 800e23a:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800e23c:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 fa92 	bl	800e768 <LoRaMacSerializerJoinRequest>
 800e244:	b990      	cbnz	r0, 800e26c <LoRaMacCryptoPrepareJoinRequest+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800e246:	4623      	mov	r3, r4
 800e248:	f853 1b18 	ldr.w	r1, [r3], #24
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	2301      	movs	r3, #1
 800e250:	2213      	movs	r2, #19
 800e252:	f7fb fa77 	bl	8009744 <SecureElementComputeAesCmac>
 800e256:	b958      	cbnz	r0, 800e270 <LoRaMacCryptoPrepareJoinRequest+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fa85 	bl	800e768 <LoRaMacSerializerJoinRequest>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e25e:	2800      	cmp	r0, #0
 800e260:	bf18      	it	ne
 800e262:	2011      	movne	r0, #17
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e264:	b004      	add	sp, #16
 800e266:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e268:	200a      	movs	r0, #10
}
 800e26a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e26c:	2011      	movs	r0, #17
 800e26e:	e7f9      	b.n	800e264 <LoRaMacCryptoPrepareJoinRequest+0x44>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e270:	200f      	movs	r0, #15
 800e272:	e7f7      	b.n	800e264 <LoRaMacCryptoPrepareJoinRequest+0x44>
 800e274:	200016a4 	.word	0x200016a4

0800e278 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d069      	beq.n	800e350 <LoRaMacCryptoSecureMessage+0xd8>
{
 800e27c:	b530      	push	{r4, r5, lr}
 800e27e:	b087      	sub	sp, #28
 800e280:	4604      	mov	r4, r0
 800e282:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800e284:	4b3a      	ldr	r3, [pc, #232]	; (800e370 <LoRaMacCryptoSecureMessage+0xf8>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	4283      	cmp	r3, r0
 800e28c:	d862      	bhi.n	800e354 <LoRaMacCryptoSecureMessage+0xdc>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800e28e:	f895 2020 	ldrb.w	r2, [r5, #32]
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800e292:	2a00      	cmp	r2, #0
 800e294:	bf14      	ite	ne
 800e296:	2209      	movne	r2, #9
 800e298:	2208      	moveq	r2, #8
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800e29a:	4283      	cmp	r3, r0
 800e29c:	d20a      	bcs.n	800e2b4 <LoRaMacCryptoSecureMessage+0x3c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800e29e:	9001      	str	r0, [sp, #4]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	68ab      	ldr	r3, [r5, #8]
 800e2a6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800e2aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e2ac:	f7ff fe85 	bl	800dfba <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d152      	bne.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f000 fa8d 	bl	800e7d4 <LoRaMacSerializerData>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d14c      	bne.n	800e358 <LoRaMacCryptoSecureMessage+0xe0>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800e2be:	6829      	ldr	r1, [r5, #0]
 800e2c0:	f895 c004 	ldrb.w	ip, [r5, #4]
 800e2c4:	f1ac 0204 	sub.w	r2, ip, #4
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	68ab      	ldr	r3, [r5, #8]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800e2cc:	2900      	cmp	r1, #0
 800e2ce:	d048      	beq.n	800e362 <LoRaMacCryptoSecureMessage+0xea>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800e2d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e2d4:	d847      	bhi.n	800e366 <LoRaMacCryptoSecureMessage+0xee>
    b0[0] = 0x49;
 800e2d6:	2049      	movs	r0, #73	; 0x49
 800e2d8:	f88d 0008 	strb.w	r0, [sp, #8]
        b0[1] = 0x00;
 800e2dc:	2000      	movs	r0, #0
 800e2de:	f88d 0009 	strb.w	r0, [sp, #9]
        b0[2] = 0x00;
 800e2e2:	f88d 000a 	strb.w	r0, [sp, #10]
    b0[3] = 0x00;
 800e2e6:	f88d 000b 	strb.w	r0, [sp, #11]
    b0[4] = 0x00;
 800e2ea:	f88d 000c 	strb.w	r0, [sp, #12]
    b0[5] = dir;
 800e2ee:	f88d 000d 	strb.w	r0, [sp, #13]
    b0[6] = devAddr & 0xFF;
 800e2f2:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800e2f6:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800e2fa:	f88d e00f 	strb.w	lr, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800e2fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e302:	f88d e010 	strb.w	lr, [sp, #16]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800e306:	0e1b      	lsrs	r3, r3, #24
 800e308:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[10] = fCnt & 0xFF;
 800e30c:	f88d 4012 	strb.w	r4, [sp, #18]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800e310:	0a23      	lsrs	r3, r4, #8
 800e312:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800e316:	0c23      	lsrs	r3, r4, #16
 800e318:	f88d 3014 	strb.w	r3, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800e31c:	0e23      	lsrs	r3, r4, #24
 800e31e:	f88d 3015 	strb.w	r3, [sp, #21]
    b0[14] = 0x00;
 800e322:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[15] = msgLen & 0xFF;
 800e326:	f1ac 0c04 	sub.w	ip, ip, #4
 800e32a:	f88d c017 	strb.w	ip, [sp, #23]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800e32e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	2308      	movs	r3, #8
 800e336:	eb0d 0003 	add.w	r0, sp, r3
 800e33a:	f7fb fa03 	bl	8009744 <SecureElementComputeAesCmac>
 800e33e:	b9a0      	cbnz	r0, 800e36a <LoRaMacCryptoSecureMessage+0xf2>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e340:	4628      	mov	r0, r5
 800e342:	f000 fa47 	bl	800e7d4 <LoRaMacSerializerData>
 800e346:	b950      	cbnz	r0, 800e35e <LoRaMacCryptoSecureMessage+0xe6>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800e348:	4b09      	ldr	r3, [pc, #36]	; (800e370 <LoRaMacCryptoSecureMessage+0xf8>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800e34e:	e004      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e350:	200a      	movs	r0, #10
}
 800e352:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800e354:	2006      	movs	r0, #6
 800e356:	e000      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e358:	2011      	movs	r0, #17
}
 800e35a:	b007      	add	sp, #28
 800e35c:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e35e:	2011      	movs	r0, #17
 800e360:	e7fb      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e362:	200a      	movs	r0, #10
 800e364:	e7f9      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800e366:	200e      	movs	r0, #14
 800e368:	e7f7      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e36a:	200f      	movs	r0, #15
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e36c:	e7f5      	b.n	800e35a <LoRaMacCryptoSecureMessage+0xe2>
 800e36e:	bf00      	nop
 800e370:	200016a4 	.word	0x200016a4

0800e374 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	b086      	sub	sp, #24
 800e37a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( macMsg == 0 )
 800e37c:	2c00      	cmp	r4, #0
 800e37e:	d073      	beq.n	800e468 <LoRaMacCryptoUnsecureMessage+0xf4>
 800e380:	4607      	mov	r7, r0
 800e382:	4688      	mov	r8, r1
 800e384:	4616      	mov	r6, r2
 800e386:	461d      	mov	r5, r3
    uint32_t lastDown = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800e38c:	a905      	add	r1, sp, #20
 800e38e:	4610      	mov	r0, r2
 800e390:	f7ff fdbe 	bl	800df10 <GetLastFcntDown>
 800e394:	2800      	cmp	r0, #0
 800e396:	d16f      	bne.n	800e478 <LoRaMacCryptoUnsecureMessage+0x104>
    if( ( currentDown > lastDown ) ||
 800e398:	9b05      	ldr	r3, [sp, #20]
 800e39a:	429d      	cmp	r5, r3
 800e39c:	d802      	bhi.n	800e3a4 <LoRaMacCryptoUnsecureMessage+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d163      	bne.n	800e46c <LoRaMacCryptoUnsecureMessage+0xf8>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f000 f981 	bl	800e6ac <LoRaMacParserData>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d160      	bne.n	800e470 <LoRaMacCryptoUnsecureMessage+0xfc>
        if( KeyAddrList[i].AddrID == addrID )
 800e3ae:	4b33      	ldr	r3, [pc, #204]	; (800e47c <LoRaMacCryptoUnsecureMessage+0x108>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	42bb      	cmp	r3, r7
 800e3b4:	d009      	beq.n	800e3ca <LoRaMacCryptoUnsecureMessage+0x56>
 800e3b6:	4b31      	ldr	r3, [pc, #196]	; (800e47c <LoRaMacCryptoUnsecureMessage+0x108>)
 800e3b8:	791b      	ldrb	r3, [r3, #4]
 800e3ba:	42bb      	cmp	r3, r7
 800e3bc:	bf08      	it	eq
 800e3be:	2101      	moveq	r1, #1
 800e3c0:	d004      	beq.n	800e3cc <LoRaMacCryptoUnsecureMessage+0x58>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800e3c2:	200c      	movs	r0, #12
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e3c4:	b006      	add	sp, #24
 800e3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( KeyAddrList[i].AddrID == addrID )
 800e3ca:	2100      	movs	r1, #0
    if( address != macMsg->FHDR.DevAddr )
 800e3cc:	68a3      	ldr	r3, [r4, #8]
 800e3ce:	4543      	cmp	r3, r8
 800e3d0:	d150      	bne.n	800e474 <LoRaMacCryptoUnsecureMessage+0x100>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800e3d2:	7b23      	ldrb	r3, [r4, #12]
 800e3d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800e3d8:	4a29      	ldr	r2, [pc, #164]	; (800e480 <LoRaMacCryptoUnsecureMessage+0x10c>)
 800e3da:	6812      	ldr	r2, [r2, #0]
 800e3dc:	7892      	ldrb	r2, [r2, #2]
        isAck = false;
 800e3de:	2a00      	cmp	r2, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 800e3e0:	4a26      	ldr	r2, [pc, #152]	; (800e47c <LoRaMacCryptoUnsecureMessage+0x108>)
 800e3e2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e3e6:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800e3e8:	7921      	ldrb	r1, [r4, #4]
 800e3ea:	f1a1 0104 	sub.w	r1, r1, #4
 800e3ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e3f0:	9003      	str	r0, [sp, #12]
 800e3f2:	9502      	str	r5, [sp, #8]
 800e3f4:	f8cd 8004 	str.w	r8, [sp, #4]
 800e3f8:	f04f 0001 	mov.w	r0, #1
 800e3fc:	9000      	str	r0, [sp, #0]
 800e3fe:	bf08      	it	eq
 800e400:	2300      	moveq	r3, #0
 800e402:	7892      	ldrb	r2, [r2, #2]
 800e404:	b289      	uxth	r1, r1
 800e406:	6820      	ldr	r0, [r4, #0]
 800e408:	f7ff fe45 	bl	800e096 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d1d9      	bne.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
    if( macMsg->FPort == 0 )
 800e410:	f894 3020 	ldrb.w	r3, [r4, #32]
        payloadDecryptionKeyID = NWK_S_KEY;
 800e414:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800e416:	9501      	str	r5, [sp, #4]
 800e418:	f04f 0301 	mov.w	r3, #1
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4643      	mov	r3, r8
 800e420:	bf14      	ite	ne
 800e422:	463a      	movne	r2, r7
 800e424:	2208      	moveq	r2, #8
 800e426:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800e42a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e42c:	f7ff fdc5 	bl	800dfba <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e430:	2800      	cmp	r0, #0
 800e432:	d1c7      	bne.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
    switch( fCntID )
 800e434:	1e72      	subs	r2, r6, #1
 800e436:	2a03      	cmp	r2, #3
 800e438:	d8c4      	bhi.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
 800e43a:	e8df f002 	tbb	[pc, r2]
 800e43e:	0702      	.short	0x0702
 800e440:	110c      	.short	0x110c
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800e442:	4b0f      	ldr	r3, [pc, #60]	; (800e480 <LoRaMacCryptoUnsecureMessage+0x10c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	611d      	str	r5, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800e448:	621d      	str	r5, [r3, #32]
            break;
 800e44a:	e7bb      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800e44c:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <LoRaMacCryptoUnsecureMessage+0x10c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	615d      	str	r5, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800e452:	621d      	str	r5, [r3, #32]
            break;
 800e454:	e7b6      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800e456:	4b0a      	ldr	r3, [pc, #40]	; (800e480 <LoRaMacCryptoUnsecureMessage+0x10c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	619d      	str	r5, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800e45c:	621d      	str	r5, [r3, #32]
            break;
 800e45e:	e7b1      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800e460:	4b07      	ldr	r3, [pc, #28]	; (800e480 <LoRaMacCryptoUnsecureMessage+0x10c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	61dd      	str	r5, [r3, #28]
            break;
 800e466:	e7ad      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e468:	200a      	movs	r0, #10
 800e46a:	e7ab      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800e46c:	2006      	movs	r0, #6
 800e46e:	e7a9      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800e470:	2010      	movs	r0, #16
 800e472:	e7a7      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800e474:	2002      	movs	r0, #2
 800e476:	e7a5      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800e478:	2006      	movs	r0, #6
 800e47a:	e7a3      	b.n	800e3c4 <LoRaMacCryptoUnsecureMessage+0x50>
 800e47c:	20000108 	.word	0x20000108
 800e480:	200016a4 	.word	0x200016a4

0800e484 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800e484:	b500      	push	{lr}
 800e486:	b085      	sub	sp, #20
 800e488:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800e48a:	2300      	movs	r3, #0
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	9302      	str	r3, [sp, #8]
 800e492:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800e494:	290b      	cmp	r1, #11
 800e496:	d005      	beq.n	800e4a4 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800e498:	290c      	cmp	r1, #12
 800e49a:	d011      	beq.n	800e4c0 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800e49c:	290a      	cmp	r1, #10
 800e49e:	d00a      	beq.n	800e4b6 <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800e4a0:	200b      	movs	r0, #11
 800e4a2:	e014      	b.n	800e4ce <LoRaMacCryptoDeriveLifeTimeKey+0x4a>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800e4a4:	2801      	cmp	r0, #1
 800e4a6:	d001      	beq.n	800e4ac <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	e00a      	b.n	800e4c2 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800e4ac:	2320      	movs	r3, #32
 800e4ae:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	e005      	b.n	800e4c2 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800e4b6:	2330      	movs	r3, #48	; 0x30
 800e4b8:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800e4bc:	2100      	movs	r1, #0
            break;
 800e4be:	e000      	b.n	800e4c2 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800e4c0:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800e4c2:	4668      	mov	r0, sp
 800e4c4:	f7fb f9de 	bl	8009884 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	bf18      	it	ne
 800e4cc:	200f      	movne	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e4ce:	b005      	add	sp, #20
 800e4d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e4d4 <LoRaMacCryptoSetKey>:
{
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800e4d8:	f7fb f99a 	bl	8009810 <SecureElementSetKey>
 800e4dc:	b998      	cbnz	r0, 800e506 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800e4de:	b104      	cbz	r4, 800e4e2 <LoRaMacCryptoSetKey+0xe>
}
 800e4e0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	; (800e514 <LoRaMacCryptoSetKey+0x40>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	210b      	movs	r1, #11
 800e4e8:	7898      	ldrb	r0, [r3, #2]
 800e4ea:	f7ff ffcb 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
 800e4ee:	b960      	cbnz	r0, 800e50a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800e4f0:	210c      	movs	r1, #12
 800e4f2:	f7ff ffc7 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
 800e4f6:	b950      	cbnz	r0, 800e50e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800e4f8:	210a      	movs	r1, #10
 800e4fa:	f7ff ffc3 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e4fe:	2800      	cmp	r0, #0
 800e500:	bf18      	it	ne
 800e502:	200f      	movne	r0, #15
 800e504:	e7ec      	b.n	800e4e0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e506:	200f      	movs	r0, #15
 800e508:	e7ea      	b.n	800e4e0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e50a:	200f      	movs	r0, #15
 800e50c:	e7e8      	b.n	800e4e0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e50e:	200f      	movs	r0, #15
 800e510:	e7e6      	b.n	800e4e0 <LoRaMacCryptoSetKey+0xc>
 800e512:	bf00      	nop
 800e514:	200016a4 	.word	0x200016a4

0800e518 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800e518:	2a00      	cmp	r2, #0
 800e51a:	d06a      	beq.n	800e5f2 <LoRaMacCryptoHandleJoinAccept+0xda>
{
 800e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e51e:	b08f      	sub	sp, #60	; 0x3c
 800e520:	4607      	mov	r7, r0
 800e522:	460d      	mov	r5, r1
 800e524:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800e526:	2900      	cmp	r1, #0
 800e528:	d065      	beq.n	800e5f6 <LoRaMacCryptoHandleJoinAccept+0xde>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800e52a:	2600      	movs	r6, #0
 800e52c:	9605      	str	r6, [sp, #20]
 800e52e:	221d      	movs	r2, #29
 800e530:	4631      	mov	r1, r6
 800e532:	a806      	add	r0, sp, #24
 800e534:	f004 fcd8 	bl	8012ee8 <memset>
    uint8_t versionMinor         = 0;
 800e538:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800e53c:	4b32      	ldr	r3, [pc, #200]	; (800e608 <LoRaMacCryptoHandleJoinAccept+0xf0>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800e542:	f10d 0313 	add.w	r3, sp, #19
 800e546:	9302      	str	r3, [sp, #8]
 800e548:	ab05      	add	r3, sp, #20
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	7923      	ldrb	r3, [r4, #4]
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	4632      	mov	r2, r6
 800e554:	4629      	mov	r1, r5
 800e556:	4638      	mov	r0, r7
 800e558:	f7fb f9b4 	bl	80098c4 <SecureElementProcessJoinAccept>
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d14c      	bne.n	800e5fa <LoRaMacCryptoHandleJoinAccept+0xe2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800e560:	7922      	ldrb	r2, [r4, #4]
 800e562:	a905      	add	r1, sp, #20
 800e564:	6820      	ldr	r0, [r4, #0]
 800e566:	f001 fca3 	bl	800feb0 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f84e 	bl	800e60c <LoRaMacParserJoinAccept>
 800e570:	2800      	cmp	r0, #0
 800e572:	d145      	bne.n	800e600 <LoRaMacCryptoHandleJoinAccept+0xe8>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800e574:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800e576:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800e578:	7a25      	ldrb	r5, [r4, #8]
 800e57a:	042d      	lsls	r5, r5, #16
 800e57c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800e580:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800e582:	4b21      	ldr	r3, [pc, #132]	; (800e608 <LoRaMacCryptoHandleJoinAccept+0xf0>)
 800e584:	681b      	ldr	r3, [r3, #0]
    if( isJoinNonceOk == true )
 800e586:	689a      	ldr	r2, [r3, #8]
 800e588:	4295      	cmp	r5, r2
 800e58a:	d93b      	bls.n	800e604 <LoRaMacCryptoHandleJoinAccept+0xec>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800e58c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800e58e:	210b      	movs	r1, #11
 800e590:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800e594:	f7ff ff76 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e598:	bb80      	cbnz	r0, 800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800e59a:	210c      	movs	r1, #12
 800e59c:	2000      	movs	r0, #0
 800e59e:	f7ff ff71 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e5a2:	bb58      	cbnz	r0, 800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800e5a4:	210a      	movs	r1, #10
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f7ff ff6c 	bl	800e484 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e5ac:	bb30      	cbnz	r0, 800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
        netID = ( uint32_t )macMsg->NetID[0];
 800e5ae:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800e5b0:	7aa2      	ldrb	r2, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800e5b2:	7ae4      	ldrb	r4, [r4, #11]
 800e5b4:	0424      	lsls	r4, r4, #16
 800e5b6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800e5ba:	431c      	orrs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800e5bc:	4633      	mov	r3, r6
 800e5be:	4622      	mov	r2, r4
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	2009      	movs	r0, #9
 800e5c4:	f7ff fcca 	bl	800df5c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e5c8:	b9c0      	cbnz	r0, 800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800e5ca:	4633      	mov	r3, r6
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	2008      	movs	r0, #8
 800e5d2:	f7ff fcc3 	bl	800df5c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e5d6:	b988      	cbnz	r0, 800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800e5d8:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <LoRaMacCryptoHandleJoinAccept+0xf0>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800e5e0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ea:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e5ec:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800e5ee:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800e5f0:	e004      	b.n	800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e5f2:	200a      	movs	r0, #10
}
 800e5f4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e5f6:	200a      	movs	r0, #10
 800e5f8:	e000      	b.n	800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e5fa:	200f      	movs	r0, #15
}
 800e5fc:	b00f      	add	sp, #60	; 0x3c
 800e5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800e600:	2010      	movs	r0, #16
 800e602:	e7fb      	b.n	800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800e604:	2003      	movs	r0, #3
 800e606:	e7f9      	b.n	800e5fc <LoRaMacCryptoHandleJoinAccept+0xe4>
 800e608:	200016a4 	.word	0x200016a4

0800e60c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d047      	beq.n	800e6a0 <LoRaMacParserJoinAccept+0x94>
{
 800e610:	b510      	push	{r4, lr}
 800e612:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e614:	6801      	ldr	r1, [r0, #0]
 800e616:	2900      	cmp	r1, #0
 800e618:	d044      	beq.n	800e6a4 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e61e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800e620:	2203      	movs	r2, #3
 800e622:	3006      	adds	r0, #6
 800e624:	f001 fc44 	bl	800feb0 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800e628:	4620      	mov	r0, r4
 800e62a:	f850 1b09 	ldr.w	r1, [r0], #9
 800e62e:	2203      	movs	r2, #3
 800e630:	3104      	adds	r1, #4
 800e632:	f001 fc3d 	bl	800feb0 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e636:	6821      	ldr	r1, [r4, #0]
 800e638:	79cb      	ldrb	r3, [r1, #7]
 800e63a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e63c:	7a0a      	ldrb	r2, [r1, #8]
 800e63e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e642:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e644:	7a4a      	ldrb	r2, [r1, #9]
 800e646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e64a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e64c:	7a8a      	ldrb	r2, [r1, #10]
 800e64e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e652:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800e654:	7acb      	ldrb	r3, [r1, #11]
 800e656:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800e658:	7b0b      	ldrb	r3, [r1, #12]
 800e65a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800e65c:	7923      	ldrb	r3, [r4, #4]
 800e65e:	2b21      	cmp	r3, #33	; 0x21
 800e660:	d016      	beq.n	800e690 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800e662:	2b11      	cmp	r3, #17
 800e664:	dc20      	bgt.n	800e6a8 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800e666:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e668:	6821      	ldr	r1, [r4, #0]
 800e66a:	5c8b      	ldrb	r3, [r1, r2]
 800e66c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e66e:	1c50      	adds	r0, r2, #1
 800e670:	5c08      	ldrb	r0, [r1, r0]
 800e672:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e676:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e678:	1c90      	adds	r0, r2, #2
 800e67a:	5c08      	ldrb	r0, [r1, r0]
 800e67c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e680:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e682:	3203      	adds	r2, #3
 800e684:	5c8a      	ldrb	r2, [r1, r2]
 800e686:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e68a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800e68c:	2000      	movs	r0, #0
}
 800e68e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800e690:	2210      	movs	r2, #16
 800e692:	310d      	adds	r1, #13
 800e694:	f104 0012 	add.w	r0, r4, #18
 800e698:	f001 fc0a 	bl	800feb0 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800e69c:	221d      	movs	r2, #29
 800e69e:	e7e3      	b.n	800e668 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800e6a0:	2002      	movs	r0, #2
}
 800e6a2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800e6a4:	2002      	movs	r0, #2
 800e6a6:	e7f2      	b.n	800e68e <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	e7f0      	b.n	800e68e <LoRaMacParserJoinAccept+0x82>

0800e6ac <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d057      	beq.n	800e760 <LoRaMacParserData+0xb4>
{
 800e6b0:	b510      	push	{r4, lr}
 800e6b2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e6b4:	6801      	ldr	r1, [r0, #0]
 800e6b6:	2900      	cmp	r1, #0
 800e6b8:	d054      	beq.n	800e764 <LoRaMacParserData+0xb8>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e6ba:	780b      	ldrb	r3, [r1, #0]
 800e6bc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800e6be:	784b      	ldrb	r3, [r1, #1]
 800e6c0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e6c2:	788a      	ldrb	r2, [r1, #2]
 800e6c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6c8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e6ca:	78ca      	ldrb	r2, [r1, #3]
 800e6cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6d0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e6d2:	790a      	ldrb	r2, [r1, #4]
 800e6d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6d8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800e6da:	794b      	ldrb	r3, [r1, #5]
 800e6dc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800e6de:	798b      	ldrb	r3, [r1, #6]
 800e6e0:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800e6e2:	79ca      	ldrb	r2, [r1, #7]
 800e6e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6e8:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e6ea:	7b02      	ldrb	r2, [r0, #12]
 800e6ec:	f002 020f 	and.w	r2, r2, #15
 800e6f0:	3108      	adds	r1, #8
 800e6f2:	3010      	adds	r0, #16
 800e6f4:	f001 fbdc 	bl	800feb0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e6f8:	7b23      	ldrb	r3, [r4, #12]
 800e6fa:	f003 030f 	and.w	r3, r3, #15
 800e6fe:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800e702:	2200      	movs	r2, #0
 800e704:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800e708:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800e70c:	7922      	ldrb	r2, [r4, #4]
 800e70e:	1a11      	subs	r1, r2, r0
 800e710:	2904      	cmp	r1, #4
 800e712:	dc16      	bgt.n	800e742 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	7923      	ldrb	r3, [r4, #4]
 800e718:	441a      	add	r2, r3
 800e71a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800e71e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800e720:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800e724:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e728:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800e72a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800e72e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e732:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800e734:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800e738:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e73c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800e73e:	2000      	movs	r0, #0
}
 800e740:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800e742:	6821      	ldr	r1, [r4, #0]
 800e744:	3309      	adds	r3, #9
 800e746:	5c08      	ldrb	r0, [r1, r0]
 800e748:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800e74c:	3a04      	subs	r2, #4
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	b2d2      	uxtb	r2, r2
 800e752:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800e756:	4419      	add	r1, r3
 800e758:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e75a:	f001 fba9 	bl	800feb0 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800e75e:	e7d9      	b.n	800e714 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800e760:	2002      	movs	r0, #2
}
 800e762:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800e764:	2002      	movs	r0, #2
 800e766:	e7eb      	b.n	800e740 <LoRaMacParserData+0x94>

0800e768 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e768:	b370      	cbz	r0, 800e7c8 <LoRaMacSerializerJoinRequest+0x60>
{
 800e76a:	b510      	push	{r4, lr}
 800e76c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e76e:	6803      	ldr	r3, [r0, #0]
 800e770:	b363      	cbz	r3, 800e7cc <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800e772:	7902      	ldrb	r2, [r0, #4]
 800e774:	2a16      	cmp	r2, #22
 800e776:	d92b      	bls.n	800e7d0 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e778:	7942      	ldrb	r2, [r0, #5]
 800e77a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800e77c:	4601      	mov	r1, r0
 800e77e:	f851 0b06 	ldr.w	r0, [r1], #6
 800e782:	2208      	movs	r2, #8
 800e784:	3001      	adds	r0, #1
 800e786:	f001 fba0 	bl	800feca <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800e78a:	4621      	mov	r1, r4
 800e78c:	f851 0b0e 	ldr.w	r0, [r1], #14
 800e790:	2208      	movs	r2, #8
 800e792:	3009      	adds	r0, #9
 800e794:	f001 fb99 	bl	800feca <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	8ae2      	ldrh	r2, [r4, #22]
 800e79c:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	8ae3      	ldrh	r3, [r4, #22]
 800e7a2:	0a1b      	lsrs	r3, r3, #8
 800e7a4:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	69a2      	ldr	r2, [r4, #24]
 800e7aa:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e7ac:	6822      	ldr	r2, [r4, #0]
 800e7ae:	69a3      	ldr	r3, [r4, #24]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	8b62      	ldrh	r2, [r4, #26]
 800e7b8:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	7ee2      	ldrb	r2, [r4, #27]
 800e7be:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800e7c0:	2317      	movs	r3, #23
 800e7c2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e7c4:	2000      	movs	r0, #0
}
 800e7c6:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e7c8:	2001      	movs	r0, #1
}
 800e7ca:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	e7fa      	b.n	800e7c6 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e7d0:	2002      	movs	r0, #2
 800e7d2:	e7f8      	b.n	800e7c6 <LoRaMacSerializerJoinRequest+0x5e>

0800e7d4 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d065      	beq.n	800e8a4 <LoRaMacSerializerData+0xd0>
{
 800e7d8:	b538      	push	{r3, r4, r5, lr}
 800e7da:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e7dc:	6801      	ldr	r1, [r0, #0]
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	d062      	beq.n	800e8a8 <LoRaMacSerializerData+0xd4>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e7e2:	7b03      	ldrb	r3, [r0, #12]
 800e7e4:	f003 030f 	and.w	r3, r3, #15

    if( macMsg->FRMPayloadSize > 0 )
 800e7e8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800e7ec:	2a00      	cmp	r2, #0
 800e7ee:	d157      	bne.n	800e8a0 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e7f0:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800e7f2:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 800e7f4:	7920      	ldrb	r0, [r4, #4]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	4298      	cmp	r0, r3
 800e7fa:	d357      	bcc.n	800e8ac <LoRaMacSerializerData+0xd8>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e7fc:	7963      	ldrb	r3, [r4, #5]
 800e7fe:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	68a2      	ldr	r2, [r4, #8]
 800e804:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800e806:	6822      	ldr	r2, [r4, #0]
 800e808:	68a3      	ldr	r3, [r4, #8]
 800e80a:	0a1b      	lsrs	r3, r3, #8
 800e80c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	8962      	ldrh	r2, [r4, #10]
 800e812:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	7ae2      	ldrb	r2, [r4, #11]
 800e818:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	7b22      	ldrb	r2, [r4, #12]
 800e81e:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	89e2      	ldrh	r2, [r4, #14]
 800e824:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800e826:	6822      	ldr	r2, [r4, #0]
 800e828:	89e3      	ldrh	r3, [r4, #14]
 800e82a:	0a1b      	lsrs	r3, r3, #8
 800e82c:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e82e:	7b22      	ldrb	r2, [r4, #12]
 800e830:	4621      	mov	r1, r4
 800e832:	f851 0b10 	ldr.w	r0, [r1], #16
 800e836:	f002 020f 	and.w	r2, r2, #15
 800e83a:	3008      	adds	r0, #8
 800e83c:	f001 fb38 	bl	800feb0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e840:	7b23      	ldrb	r3, [r4, #12]
 800e842:	f003 030f 	and.w	r3, r3, #15
 800e846:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800e84a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e84e:	b12a      	cbz	r2, 800e85c <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800e850:	f894 1020 	ldrb.w	r1, [r4, #32]
 800e854:	6822      	ldr	r2, [r4, #0]
 800e856:	5551      	strb	r1, [r2, r5]
 800e858:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800e85c:	6820      	ldr	r0, [r4, #0]
 800e85e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e862:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e864:	4428      	add	r0, r5
 800e866:	f001 fb23 	bl	800feb0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800e86a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e86e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e870:	6822      	ldr	r2, [r4, #0]
 800e872:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e874:	54d1      	strb	r1, [r2, r3]
 800e876:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e878:	b292      	uxth	r2, r2
 800e87a:	6820      	ldr	r0, [r4, #0]
 800e87c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e87e:	0a09      	lsrs	r1, r1, #8
 800e880:	5481      	strb	r1, [r0, r2]
 800e882:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e884:	b292      	uxth	r2, r2
 800e886:	6821      	ldr	r1, [r4, #0]
 800e888:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800e88a:	5488      	strb	r0, [r1, r2]
 800e88c:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e88e:	b292      	uxth	r2, r2
 800e890:	6821      	ldr	r1, [r4, #0]
 800e892:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800e896:	5488      	strb	r0, [r1, r2]
 800e898:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 800e89a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e89c:	2000      	movs	r0, #0
}
 800e89e:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800e8a0:	3309      	adds	r3, #9
 800e8a2:	e7a6      	b.n	800e7f2 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e8a4:	2001      	movs	r0, #1
}
 800e8a6:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e7f8      	b.n	800e89e <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e8ac:	2002      	movs	r0, #2
 800e8ae:	e7f6      	b.n	800e89e <LoRaMacSerializerData+0xca>

0800e8b0 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 800e8b0:	2805      	cmp	r0, #5
 800e8b2:	bf14      	ite	ne
 800e8b4:	2000      	movne	r0, #0
 800e8b6:	2001      	moveq	r0, #1
 800e8b8:	4770      	bx	lr

0800e8ba <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e8ba:	b500      	push	{lr}
 800e8bc:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
    switch( region )
 800e8be:	2805      	cmp	r0, #5
 800e8c0:	d005      	beq.n	800e8ce <RegionGetPhyParam+0x14>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	9301      	str	r3, [sp, #4]
        }
    }
}
 800e8c6:	9801      	ldr	r0, [sp, #4]
 800e8c8:	b003      	add	sp, #12
 800e8ca:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800e8ce:	4608      	mov	r0, r1
 800e8d0:	f000 fd16 	bl	800f300 <RegionEU868GetPhyParam>
 800e8d4:	9001      	str	r0, [sp, #4]
 800e8d6:	e7f6      	b.n	800e8c6 <RegionGetPhyParam+0xc>

0800e8d8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800e8d8:	2805      	cmp	r0, #5
 800e8da:	d000      	beq.n	800e8de <RegionSetBandTxDone+0x6>
 800e8dc:	4770      	bx	lr
{
 800e8de:	b508      	push	{r3, lr}
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	f000 fdcd 	bl	800f480 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800e8e6:	bd08      	pop	{r3, pc}

0800e8e8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800e8e8:	2805      	cmp	r0, #5
 800e8ea:	d000      	beq.n	800e8ee <RegionInitDefaults+0x6>
 800e8ec:	4770      	bx	lr
{
 800e8ee:	b508      	push	{r3, lr}
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800e8f0:	4608      	mov	r0, r1
 800e8f2:	f000 fde3 	bl	800f4bc <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800e8f6:	bd08      	pop	{r3, pc}

0800e8f8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800e8f8:	2805      	cmp	r0, #5
 800e8fa:	d001      	beq.n	800e900 <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800e8fc:	2000      	movs	r0, #0
        }
    }
}
 800e8fe:	4770      	bx	lr
{
 800e900:	b508      	push	{r3, lr}
 800e902:	460b      	mov	r3, r1
        EU868_VERIFY( );
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f000 fe44 	bl	800f594 <RegionEU868Verify>
}
 800e90c:	bd08      	pop	{r3, pc}

0800e90e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800e90e:	2805      	cmp	r0, #5
 800e910:	d000      	beq.n	800e914 <RegionApplyCFList+0x6>
 800e912:	4770      	bx	lr
{
 800e914:	b508      	push	{r3, lr}
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800e916:	4608      	mov	r0, r1
 800e918:	f001 fa02 	bl	800fd20 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800e91c:	bd08      	pop	{r3, pc}

0800e91e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800e91e:	2805      	cmp	r0, #5
 800e920:	d001      	beq.n	800e926 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800e922:	2000      	movs	r0, #0
        }
    }
}
 800e924:	4770      	bx	lr
{
 800e926:	b508      	push	{r3, lr}
        EU868_CHAN_MASK_SET( );
 800e928:	4608      	mov	r0, r1
 800e92a:	f000 fe79 	bl	800f620 <RegionEU868ChanMaskSet>
}
 800e92e:	bd08      	pop	{r3, pc}

0800e930 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800e930:	2805      	cmp	r0, #5
 800e932:	d000      	beq.n	800e936 <RegionComputeRxWindowParameters+0x6>
 800e934:	4770      	bx	lr
{
 800e936:	b508      	push	{r3, lr}
 800e938:	468c      	mov	ip, r1
 800e93a:	4611      	mov	r1, r2
 800e93c:	461a      	mov	r2, r3
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e93e:	9b02      	ldr	r3, [sp, #8]
 800e940:	4660      	mov	r0, ip
 800e942:	f000 fe8b 	bl	800f65c <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800e946:	bd08      	pop	{r3, pc}

0800e948 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800e948:	2805      	cmp	r0, #5
 800e94a:	d001      	beq.n	800e950 <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800e94c:	2000      	movs	r0, #0
        }
    }
}
 800e94e:	4770      	bx	lr
{
 800e950:	b508      	push	{r3, lr}
 800e952:	460b      	mov	r3, r1
        EU868_RX_CONFIG( );
 800e954:	4611      	mov	r1, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f000 feb4 	bl	800f6c4 <RegionEU868RxConfig>
}
 800e95c:	bd08      	pop	{r3, pc}

0800e95e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800e95e:	2805      	cmp	r0, #5
 800e960:	d001      	beq.n	800e966 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800e962:	2000      	movs	r0, #0
        }
    }
}
 800e964:	4770      	bx	lr
{
 800e966:	b508      	push	{r3, lr}
 800e968:	468c      	mov	ip, r1
 800e96a:	4611      	mov	r1, r2
        EU868_TX_CONFIG( );
 800e96c:	461a      	mov	r2, r3
 800e96e:	4660      	mov	r0, ip
 800e970:	f000 ff2a 	bl	800f7c8 <RegionEU868TxConfig>
}
 800e974:	bd08      	pop	{r3, pc}

0800e976 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800e976:	2805      	cmp	r0, #5
 800e978:	d001      	beq.n	800e97e <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800e97a:	2000      	movs	r0, #0
        }
    }
}
 800e97c:	4770      	bx	lr
{
 800e97e:	b500      	push	{lr}
 800e980:	b083      	sub	sp, #12
 800e982:	468c      	mov	ip, r1
 800e984:	4611      	mov	r1, r2
 800e986:	461a      	mov	r2, r3
        EU868_LINK_ADR_REQ( );
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	4660      	mov	r0, ip
 800e990:	f000 ffac 	bl	800f8ec <RegionEU868LinkAdrReq>
}
 800e994:	b003      	add	sp, #12
 800e996:	f85d fb04 	ldr.w	pc, [sp], #4

0800e99a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800e99a:	2805      	cmp	r0, #5
 800e99c:	d001      	beq.n	800e9a2 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800e99e:	2000      	movs	r0, #0
        }
    }
}
 800e9a0:	4770      	bx	lr
{
 800e9a2:	b508      	push	{r3, lr}
        EU868_RX_PARAM_SETUP_REQ( );
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	f001 f859 	bl	800fa5c <RegionEU868RxParamSetupReq>
}
 800e9aa:	bd08      	pop	{r3, pc}

0800e9ac <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800e9ac:	2805      	cmp	r0, #5
 800e9ae:	d001      	beq.n	800e9b4 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800e9b0:	2000      	movs	r0, #0
        }
    }
}
 800e9b2:	4770      	bx	lr
{
 800e9b4:	b508      	push	{r3, lr}
        EU868_NEW_CHANNEL_REQ( );
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	f001 f9f2 	bl	800fda0 <RegionEU868NewChannelReq>
}
 800e9bc:	bd08      	pop	{r3, pc}

0800e9be <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800e9be:	2805      	cmp	r0, #5
 800e9c0:	d001      	beq.n	800e9c6 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800e9c2:	2000      	movs	r0, #0
        }
    }
}
 800e9c4:	4770      	bx	lr
{
 800e9c6:	b508      	push	{r3, lr}
        EU868_TX_PARAM_SETUP_REQ( );
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	f001 f869 	bl	800faa0 <RegionEU868TxParamSetupReq>
}
 800e9ce:	bd08      	pop	{r3, pc}

0800e9d0 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800e9d0:	2805      	cmp	r0, #5
 800e9d2:	d001      	beq.n	800e9d8 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800e9d4:	2000      	movs	r0, #0
        }
    }
}
 800e9d6:	4770      	bx	lr
{
 800e9d8:	b508      	push	{r3, lr}
        EU868_DL_CHANNEL_REQ( );
 800e9da:	4608      	mov	r0, r1
 800e9dc:	f001 f864 	bl	800faa8 <RegionEU868DlChannelReq>
}
 800e9e0:	bd08      	pop	{r3, pc}

0800e9e2 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800e9e2:	2805      	cmp	r0, #5
 800e9e4:	d001      	beq.n	800e9ea <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800e9e6:	2000      	movs	r0, #0
        }
    }
}
 800e9e8:	4770      	bx	lr
{
 800e9ea:	b508      	push	{r3, lr}
 800e9ec:	460b      	mov	r3, r1
        EU868_ALTERNATE_DR( );
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f001 f881 	bl	800faf8 <RegionEU868AlternateDr>
}
 800e9f6:	bd08      	pop	{r3, pc}

0800e9f8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800e9f8:	2805      	cmp	r0, #5
 800e9fa:	d001      	beq.n	800ea00 <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e9fc:	2009      	movs	r0, #9
        }
    }
}
 800e9fe:	4770      	bx	lr
{
 800ea00:	b508      	push	{r3, lr}
 800ea02:	468c      	mov	ip, r1
 800ea04:	4611      	mov	r1, r2
 800ea06:	461a      	mov	r2, r3
        EU868_NEXT_CHANNEL( );
 800ea08:	9b02      	ldr	r3, [sp, #8]
 800ea0a:	4660      	mov	r0, ip
 800ea0c:	f001 f876 	bl	800fafc <RegionEU868NextChannel>
}
 800ea10:	bd08      	pop	{r3, pc}

0800ea12 <RegionSetContinuousWave>:
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 800ea12:	2805      	cmp	r0, #5
 800ea14:	d000      	beq.n	800ea18 <RegionSetContinuousWave+0x6>
 800ea16:	4770      	bx	lr
{
 800ea18:	b508      	push	{r3, lr}
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800ea1a:	4608      	mov	r0, r1
 800ea1c:	f001 f9ec 	bl	800fdf8 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800ea20:	bd08      	pop	{r3, pc}

0800ea22 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ea22:	468c      	mov	ip, r1
 800ea24:	4611      	mov	r1, r2
    switch( region )
 800ea26:	2805      	cmp	r0, #5
 800ea28:	d001      	beq.n	800ea2e <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ea2a:	b2d0      	uxtb	r0, r2
        }
    }
}
 800ea2c:	4770      	bx	lr
{
 800ea2e:	b508      	push	{r3, lr}
        EU868_APPLY_DR_OFFSET( );
 800ea30:	461a      	mov	r2, r3
 800ea32:	4660      	mov	r0, ip
 800ea34:	f001 fa0e 	bl	800fe54 <RegionEU868ApplyDrOffset>
}
 800ea38:	bd08      	pop	{r3, pc}
	...

0800ea3c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ea3c:	4800      	ldr	r0, [pc, #0]	; (800ea40 <RegionGetVersion+0x4>)
 800ea3e:	4770      	bx	lr
 800ea40:	01010003 	.word	0x01010003

0800ea44 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800ea44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea46:	9f06      	ldr	r7, [sp, #24]
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	db2c      	blt.n	800eaa6 <RegionCommonChanVerifyDr+0x62>
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800ea4c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	dc2a      	bgt.n	800eaaa <RegionCommonChanVerifyDr+0x66>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ea54:	b1c0      	cbz	r0, 800ea88 <RegionCommonChanVerifyDr+0x44>
 800ea56:	2600      	movs	r6, #0
 800ea58:	4635      	mov	r5, r6
 800ea5a:	e01b      	b.n	800ea94 <RegionCommonChanVerifyDr+0x50>
        for( uint8_t j = 0; j < 16; j++ )
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	f10c 0c0c 	add.w	ip, ip, #12
 800ea62:	2b10      	cmp	r3, #16
 800ea64:	d011      	beq.n	800ea8a <RegionCommonChanVerifyDr+0x46>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ea66:	fa44 fe03 	asr.w	lr, r4, r3
 800ea6a:	f01e 0f01 	tst.w	lr, #1
 800ea6e:	d0f5      	beq.n	800ea5c <RegionCommonChanVerifyDr+0x18>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ea70:	f89c e008 	ldrb.w	lr, [ip, #8]
    if( ( value >= min ) && ( value <= max ) )
 800ea74:	f00e 0e0f 	and.w	lr, lr, #15
 800ea78:	4596      	cmp	lr, r2
 800ea7a:	dcef      	bgt.n	800ea5c <RegionCommonChanVerifyDr+0x18>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ea7c:	f89c e008 	ldrb.w	lr, [ip, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ea80:	ebb2 1f1e 	cmp.w	r2, lr, lsr #4
 800ea84:	dcea      	bgt.n	800ea5c <RegionCommonChanVerifyDr+0x18>
                    return true;
 800ea86:	2001      	movs	r0, #1
}
 800ea88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ea8a:	3510      	adds	r5, #16
 800ea8c:	b2ed      	uxtb	r5, r5
 800ea8e:	3601      	adds	r6, #1
 800ea90:	42a8      	cmp	r0, r5
 800ea92:	d90c      	bls.n	800eaae <RegionCommonChanVerifyDr+0x6a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ea94:	b2f3      	uxtb	r3, r6
 800ea96:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800ea9a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800ea9e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e7df      	b.n	800ea66 <RegionCommonChanVerifyDr+0x22>
        return false;
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	e7ee      	b.n	800ea88 <RegionCommonChanVerifyDr+0x44>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e7ec      	b.n	800ea88 <RegionCommonChanVerifyDr+0x44>
    return false;
 800eaae:	2000      	movs	r0, #0
 800eab0:	e7ea      	b.n	800ea88 <RegionCommonChanVerifyDr+0x44>

0800eab2 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 800eab2:	4288      	cmp	r0, r1
 800eab4:	db04      	blt.n	800eac0 <RegionCommonValueInRange+0xe>
    {
        return 1;
 800eab6:	4290      	cmp	r0, r2
 800eab8:	bfcc      	ite	gt
 800eaba:	2000      	movgt	r0, #0
 800eabc:	2001      	movle	r0, #1
 800eabe:	4770      	bx	lr
    }
    return 0;
 800eac0:	2000      	movs	r0, #0
}
 800eac2:	4770      	bx	lr

0800eac4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800eac4:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800eac8:	0913      	lsrs	r3, r2, #4
 800eaca:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800eace:	d30e      	bcc.n	800eaee <RegionCommonChanDisable+0x2a>
 800ead0:	4291      	cmp	r1, r2
 800ead2:	d20e      	bcs.n	800eaf2 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800ead4:	f001 010f 	and.w	r1, r1, #15
 800ead8:	2301      	movs	r3, #1
 800eada:	fa03 f101 	lsl.w	r1, r3, r1
 800eade:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800eae2:	ea22 0201 	bic.w	r2, r2, r1
 800eae6:	f820 201c 	strh.w	r2, [r0, ip, lsl #1]

    return true;
 800eaea:	4618      	mov	r0, r3
 800eaec:	4770      	bx	lr
        return false;
 800eaee:	2000      	movs	r0, #0
 800eaf0:	4770      	bx	lr
 800eaf2:	2000      	movs	r0, #0
}
 800eaf4:	4770      	bx	lr

0800eaf6 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800eaf6:	b318      	cbz	r0, 800eb40 <RegionCommonCountChannels+0x4a>
 800eaf8:	4603      	mov	r3, r0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800eafa:	4291      	cmp	r1, r2
 800eafc:	d222      	bcs.n	800eb44 <RegionCommonCountChannels+0x4e>
{
 800eafe:	b530      	push	{r4, r5, lr}
 800eb00:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800eb04:	3a01      	subs	r2, #1
 800eb06:	1a52      	subs	r2, r2, r1
 800eb08:	fa51 f282 	uxtab	r2, r1, r2
 800eb0c:	3302      	adds	r3, #2
 800eb0e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    uint8_t nbChannels = 0;
 800eb12:	2000      	movs	r0, #0
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800eb14:	f04f 0e01 	mov.w	lr, #1
 800eb18:	e003      	b.n	800eb22 <RegionCommonCountChannels+0x2c>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800eb1a:	4408      	add	r0, r1
 800eb1c:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800eb1e:	42ac      	cmp	r4, r5
 800eb20:	d012      	beq.n	800eb48 <RegionCommonCountChannels+0x52>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800eb22:	f834 cb02 	ldrh.w	ip, [r4], #2
 800eb26:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800eb28:	4619      	mov	r1, r3
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800eb2a:	fa0e f203 	lsl.w	r2, lr, r3
 800eb2e:	ea32 020c 	bics.w	r2, r2, ip
            nbActiveBits++;
 800eb32:	bf04      	itt	eq
 800eb34:	3101      	addeq	r1, #1
 800eb36:	b2c9      	uxtbeq	r1, r1
    for( uint8_t j = 0; j < nbBits; j++ )
 800eb38:	3301      	adds	r3, #1
 800eb3a:	2b10      	cmp	r3, #16
 800eb3c:	d1f5      	bne.n	800eb2a <RegionCommonCountChannels+0x34>
 800eb3e:	e7ec      	b.n	800eb1a <RegionCommonCountChannels+0x24>
        return 0;
 800eb40:	2000      	movs	r0, #0
 800eb42:	4770      	bx	lr
    uint8_t nbChannels = 0;
 800eb44:	2000      	movs	r0, #0
    }

    return nbChannels;
}
 800eb46:	4770      	bx	lr
 800eb48:	bd30      	pop	{r4, r5, pc}

0800eb4a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800eb4a:	b168      	cbz	r0, 800eb68 <RegionCommonChanMaskCopy+0x1e>
 800eb4c:	b161      	cbz	r1, 800eb68 <RegionCommonChanMaskCopy+0x1e>
    {
        for( uint8_t i = 0; i < len; i++ )
 800eb4e:	b15a      	cbz	r2, 800eb68 <RegionCommonChanMaskCopy+0x1e>
 800eb50:	1e8b      	subs	r3, r1, #2
 800eb52:	3802      	subs	r0, #2
 800eb54:	3a01      	subs	r2, #1
 800eb56:	b2d2      	uxtb	r2, r2
 800eb58:	eb01 0142 	add.w	r1, r1, r2, lsl #1
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800eb5c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800eb60:	f820 2f02 	strh.w	r2, [r0, #2]!
        for( uint8_t i = 0; i < len; i++ )
 800eb64:	428b      	cmp	r3, r1
 800eb66:	d1f9      	bne.n	800eb5c <RegionCommonChanMaskCopy+0x12>
        }
    }
}
 800eb68:	4770      	bx	lr

0800eb6a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	b500      	push	{lr}
 800eb6e:	9302      	str	r3, [sp, #8]
    uint16_t dutyCycle = band->DCycle;
 800eb70:	f8b0 c000 	ldrh.w	ip, [r0]
    if( joined == false )
 800eb74:	b97a      	cbnz	r2, 800eb96 <RegionCommonSetBandTxDone+0x2c>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800eb76:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800eb7a:	d308      	bcc.n	800eb8e <RegionCommonSetBandTxDone+0x24>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800eb7c:	f649 2eaf 	movw	lr, #39599	; 0x9aaf
 800eb80:	f242 7210 	movw	r2, #10000	; 0x2710
 800eb84:	4573      	cmp	r3, lr
 800eb86:	bf98      	it	ls
 800eb88:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
 800eb8c:	e000      	b.n	800eb90 <RegionCommonSetBandTxDone+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800eb8e:	2264      	movs	r2, #100	; 0x64
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800eb90:	4594      	cmp	ip, r2
 800eb92:	bf38      	it	cc
 800eb94:	4694      	movcc	ip, r2
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800eb96:	68c3      	ldr	r3, [r0, #12]
 800eb98:	f1bc 0f01 	cmp.w	ip, #1
 800eb9c:	bf38      	it	cc
 800eb9e:	f04f 0c01 	movcc.w	ip, #1
 800eba2:	fb01 f10c 	mul.w	r1, r1, ip
 800eba6:	428b      	cmp	r3, r1
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800eba8:	bf8c      	ite	hi
 800ebaa:	1a5b      	subhi	r3, r3, r1
    }
    else
    {
        band->TimeCredits = 0;
 800ebac:	2300      	movls	r3, #0
 800ebae:	60c3      	str	r3, [r0, #12]
    }
}
 800ebb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb4:	b002      	add	sp, #8
 800ebb6:	4770      	bx	lr

0800ebb8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	b091      	sub	sp, #68	; 0x44
 800ebbe:	4683      	mov	fp, r0
 800ebc0:	460d      	mov	r5, r1
 800ebc2:	4614      	mov	r4, r2
 800ebc4:	9303      	str	r3, [sp, #12]
 800ebc6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ebca:	9307      	str	r3, [sp, #28]
 800ebcc:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800ebd0:	f003 feb8 	bl	8012944 <UTIL_TIMER_GetCurrentTime>
 800ebd4:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800ebd6:	2c00      	cmp	r4, #0
 800ebd8:	d07f      	beq.n	800ecda <RegionCommonUpdateBandTimeOff+0x122>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800ebda:	f5a9 33f6 	sub.w	r3, r9, #125952	; 0x1ec00
 800ebde:	3b30      	subs	r3, #48	; 0x30
 800ebe0:	4a88      	ldr	r2, [pc, #544]	; (800ee04 <RegionCommonUpdateBandTimeOff+0x24c>)
 800ebe2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe6:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800ebe8:	4a87      	ldr	r2, [pc, #540]	; (800ee08 <RegionCommonUpdateBandTimeOff+0x250>)
 800ebea:	fb02 f103 	mul.w	r1, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ebee:	f501 31f6 	add.w	r1, r1, #125952	; 0x1ec00
 800ebf2:	3130      	adds	r1, #48	; 0x30
 800ebf4:	9108      	str	r1, [sp, #32]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ebf6:	fb03 2302 	mla	r3, r3, r2, r2
 800ebfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfc:	462f      	mov	r7, r5
 800ebfe:	3c01      	subs	r4, #1
 800ec00:	b2e4      	uxtb	r4, r4
 800ec02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ec06:	3518      	adds	r5, #24
 800ec08:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ec0c:	9305      	str	r3, [sp, #20]
    uint8_t validBands = 0;
 800ec0e:	f04f 0a00 	mov.w	sl, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800ec12:	f04f 33ff 	mov.w	r3, #4294967295
 800ec16:	9306      	str	r3, [sp, #24]
 800ec18:	e096      	b.n	800ed48 <RegionCommonUpdateBandTimeOff+0x190>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ec1a:	4643      	mov	r3, r8
 800ec1c:	2b64      	cmp	r3, #100	; 0x64
 800ec1e:	bf38      	it	cc
 800ec20:	2364      	movcc	r3, #100	; 0x64
    if( dutyCycle == 0 )
 800ec22:	461d      	mov	r5, r3
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ec24:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800ec28:	d803      	bhi.n	800ec32 <RegionCommonUpdateBandTimeOff+0x7a>
            band->LastMaxCreditAssignTime = elapsedTime;
 800ec2a:	60b8      	str	r0, [r7, #8]
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ec2c:	4698      	mov	r8, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ec2e:	4e77      	ldr	r6, [pc, #476]	; (800ee0c <RegionCommonUpdateBandTimeOff+0x254>)
 800ec30:	e0c8      	b.n	800edc4 <RegionCommonUpdateBandTimeOff+0x20c>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ec32:	4698      	mov	r8, r3
 800ec34:	e0c0      	b.n	800edb8 <RegionCommonUpdateBandTimeOff+0x200>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ec36:	4b76      	ldr	r3, [pc, #472]	; (800ee10 <RegionCommonUpdateBandTimeOff+0x258>)
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	f240 80dd 	bls.w	800edf8 <RegionCommonUpdateBandTimeOff+0x240>
 800ec3e:	e0d6      	b.n	800edee <RegionCommonUpdateBandTimeOff+0x236>
                timeDiff.SubSeconds = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800ec46:	9b08      	ldr	r3, [sp, #32]
 800ec48:	930c      	str	r3, [sp, #48]	; 0x30
 800ec4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ec4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec50:	f003 fb6e 	bl	8012330 <SysTimeToMs>
 800ec54:	60a0      	str	r0, [r4, #8]
 800ec56:	e0cf      	b.n	800edf8 <RegionCommonUpdateBandTimeOff+0x240>
            bands[i].ReadyForTransmission = false;
 800ec58:	2200      	movs	r2, #0
 800ec5a:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits >= creditCosts )
 800ec5c:	42b5      	cmp	r5, r6
 800ec5e:	d809      	bhi.n	800ec74 <RegionCommonUpdateBandTimeOff+0xbc>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800ec60:	1aed      	subs	r5, r5, r3
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	42ab      	cmp	r3, r5
 800ec66:	bf28      	it	cs
 800ec68:	462b      	movcs	r3, r5
 800ec6a:	9306      	str	r3, [sp, #24]
                validBands++;
 800ec6c:	f10a 0a01 	add.w	sl, sl, #1
 800ec70:	fa5f fa8a 	uxtb.w	sl, sl
            if( joined == false )
 800ec74:	f1bb 0f00 	cmp.w	fp, #0
 800ec78:	d162      	bne.n	800ed40 <RegionCommonUpdateBandTimeOff+0x188>
                SysTime_t backoffTimeRange = {
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ec80:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800ec84:	d01b      	beq.n	800ecbe <RegionCommonUpdateBandTimeOff+0x106>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ec86:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800ec8a:	4a62      	ldr	r2, [pc, #392]	; (800ee14 <RegionCommonUpdateBandTimeOff+0x25c>)
 800ec8c:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800ec90:	bf18      	it	ne
 800ec92:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ec94:	4a5f      	ldr	r2, [pc, #380]	; (800ee14 <RegionCommonUpdateBandTimeOff+0x25c>)
 800ec96:	4591      	cmp	r9, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ec98:	bf84      	itt	hi
 800ec9a:	9a09      	ldrhi	r2, [sp, #36]	; 0x24
 800ec9c:	189b      	addhi	r3, r3, r2
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ec9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eca0:	ac0c      	add	r4, sp, #48	; 0x30
 800eca2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eca8:	e894 0006 	ldmia.w	r4, {r1, r2}
 800ecac:	4620      	mov	r0, r4
 800ecae:	f003 fabf 	bl	8012230 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ecb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ecb6:	f003 fb3b 	bl	8012330 <SysTimeToMs>
 800ecba:	9006      	str	r0, [sp, #24]
 800ecbc:	e040      	b.n	800ed40 <RegionCommonUpdateBandTimeOff+0x188>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ecbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ecc2:	e7e7      	b.n	800ec94 <RegionCommonUpdateBandTimeOff+0xdc>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800ecc4:	f1ba 0f00 	cmp.w	sl, #0
 800ecc8:	9b06      	ldr	r3, [sp, #24]
 800ecca:	bf08      	it	eq
 800eccc:	f04f 33ff 	moveq.w	r3, #4294967295
 800ecd0:	9306      	str	r3, [sp, #24]
    }
    return minTimeToWait;
}
 800ecd2:	9806      	ldr	r0, [sp, #24]
 800ecd4:	b011      	add	sp, #68	; 0x44
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800ecda:	f04f 33ff 	mov.w	r3, #4294967295
 800ecde:	9306      	str	r3, [sp, #24]
 800ece0:	e7f7      	b.n	800ecd2 <RegionCommonUpdateBandTimeOff+0x11a>
            bands[i].ReadyForTransmission = false;
 800ece2:	2200      	movs	r2, #0
 800ece4:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits >= creditCosts )
 800ece6:	42b5      	cmp	r5, r6
 800ece8:	d8c7      	bhi.n	800ec7a <RegionCommonUpdateBandTimeOff+0xc2>
 800ecea:	e7b9      	b.n	800ec60 <RegionCommonUpdateBandTimeOff+0xa8>
    if( dutyCycle == 0 )
 800ecec:	4645      	mov	r5, r8
 800ecee:	2d01      	cmp	r5, #1
 800ecf0:	bf38      	it	cc
 800ecf2:	2501      	movcc	r5, #1
        if( dutyCycleEnabled == false )
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	b90b      	cbnz	r3, 800ecfc <RegionCommonUpdateBandTimeOff+0x144>
            band->TimeCredits = maxCredits;
 800ecf8:	4b44      	ldr	r3, [pc, #272]	; (800ee0c <RegionCommonUpdateBandTimeOff+0x254>)
 800ecfa:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800ecfc:	6860      	ldr	r0, [r4, #4]
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d04c      	beq.n	800ed9c <RegionCommonUpdateBandTimeOff+0x1e4>
    band->MaxTimeCredits = maxCredits;
 800ed02:	4b42      	ldr	r3, [pc, #264]	; (800ee0c <RegionCommonUpdateBandTimeOff+0x254>)
 800ed04:	6123      	str	r3, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800ed06:	f003 fe27 	bl	8012958 <UTIL_TIMER_GetElapsedTime>
 800ed0a:	68e3      	ldr	r3, [r4, #12]
 800ed0c:	4403      	add	r3, r0
 800ed0e:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800ed10:	6926      	ldr	r6, [r4, #16]
 800ed12:	68e3      	ldr	r3, [r4, #12]
 800ed14:	42b3      	cmp	r3, r6
        band->TimeCredits = band->MaxTimeCredits;
 800ed16:	bf88      	it	hi
 800ed18:	60e6      	strhi	r6, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800ed1a:	9b04      	ldr	r3, [sp, #16]
 800ed1c:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800ed1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed20:	fb03 f505 	mul.w	r5, r3, r5
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800ed24:	68e3      	ldr	r3, [r4, #12]
 800ed26:	42ab      	cmp	r3, r5
 800ed28:	d205      	bcs.n	800ed36 <RegionCommonUpdateBandTimeOff+0x17e>
 800ed2a:	9a03      	ldr	r2, [sp, #12]
 800ed2c:	2a00      	cmp	r2, #0
 800ed2e:	d193      	bne.n	800ec58 <RegionCommonUpdateBandTimeOff+0xa0>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800ed30:	f1bb 0f00 	cmp.w	fp, #0
 800ed34:	d0d5      	beq.n	800ece2 <RegionCommonUpdateBandTimeOff+0x12a>
            bands[i].ReadyForTransmission = true;
 800ed36:	2301      	movs	r3, #1
 800ed38:	7523      	strb	r3, [r4, #20]
            validBands++;
 800ed3a:	449a      	add	sl, r3
 800ed3c:	fa5f fa8a 	uxtb.w	sl, sl
    for( uint8_t i = 0; i < nbBands; i++ )
 800ed40:	3718      	adds	r7, #24
 800ed42:	9b05      	ldr	r3, [sp, #20]
 800ed44:	429f      	cmp	r7, r3
 800ed46:	d0bd      	beq.n	800ecc4 <RegionCommonUpdateBandTimeOff+0x10c>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800ed48:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800ed4c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800ed50:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800ed54:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800ed58:	ab0a      	add	r3, sp, #40	; 0x28
 800ed5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed5e:	f003 fae7 	bl	8012330 <SysTimeToMs>
    uint16_t dutyCycle = band->DCycle;
 800ed62:	463c      	mov	r4, r7
 800ed64:	f8b7 8000 	ldrh.w	r8, [r7]
    if( joined == false )
 800ed68:	f1bb 0f00 	cmp.w	fp, #0
 800ed6c:	d1be      	bne.n	800ecec <RegionCommonUpdateBandTimeOff+0x134>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800ed6e:	f5b9 6f61 	cmp.w	r9, #3600	; 0xe10
 800ed72:	f4ff af52 	bcc.w	800ec1a <RegionCommonUpdateBandTimeOff+0x62>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800ed76:	f649 23af 	movw	r3, #39599	; 0x9aaf
 800ed7a:	4599      	cmp	r9, r3
 800ed7c:	d912      	bls.n	800eda4 <RegionCommonUpdateBandTimeOff+0x1ec>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ed7e:	f242 7310 	movw	r3, #10000	; 0x2710
 800ed82:	4598      	cmp	r8, r3
 800ed84:	bf38      	it	cc
 800ed86:	4698      	movcc	r8, r3
    if( dutyCycle == 0 )
 800ed88:	4645      	mov	r5, r8
 800ed8a:	2d01      	cmp	r5, #1
 800ed8c:	bf38      	it	cc
 800ed8e:	2501      	movcc	r5, #1
 800ed90:	b2ad      	uxth	r5, r5
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800ed92:	4e21      	ldr	r6, [pc, #132]	; (800ee18 <RegionCommonUpdateBandTimeOff+0x260>)
 800ed94:	e016      	b.n	800edc4 <RegionCommonUpdateBandTimeOff+0x20c>
        band->TimeCredits = maxCredits;
 800ed96:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800ed98:	6126      	str	r6, [r4, #16]
    if( band->TimeCredits > band->MaxTimeCredits )
 800ed9a:	e7be      	b.n	800ed1a <RegionCommonUpdateBandTimeOff+0x162>
        band->TimeCredits = maxCredits;
 800ed9c:	4b1b      	ldr	r3, [pc, #108]	; (800ee0c <RegionCommonUpdateBandTimeOff+0x254>)
 800ed9e:	60e3      	str	r3, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800eda0:	6123      	str	r3, [r4, #16]
    if( joined == true )
 800eda2:	e7b0      	b.n	800ed06 <RegionCommonUpdateBandTimeOff+0x14e>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800eda4:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800eda8:	bf38      	it	cc
 800edaa:	f44f 787a 	movcc.w	r8, #1000	; 0x3e8
    if( dutyCycle == 0 )
 800edae:	4645      	mov	r5, r8
 800edb0:	2d01      	cmp	r5, #1
 800edb2:	bf38      	it	cc
 800edb4:	2501      	movcc	r5, #1
 800edb6:	b2ad      	uxth	r5, r5
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800edb8:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
            band->LastMaxCreditAssignTime = elapsedTime;
 800edbc:	bf06      	itte	eq
 800edbe:	60a0      	streq	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800edc0:	4e16      	ldreq	r6, [pc, #88]	; (800ee1c <RegionCommonUpdateBandTimeOff+0x264>)
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800edc2:	4e15      	ldrne	r6, [pc, #84]	; (800ee18 <RegionCommonUpdateBandTimeOff+0x260>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800edc4:	68a1      	ldr	r1, [r4, #8]
 800edc6:	a80e      	add	r0, sp, #56	; 0x38
 800edc8:	f003 fad4 	bl	8012374 <SysTimeFromMs>
 800edcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edd2:	aa0a      	add	r2, sp, #40	; 0x28
 800edd4:	ca06      	ldmia	r2, {r1, r2}
 800edd6:	a80c      	add	r0, sp, #48	; 0x30
 800edd8:	f003 fa2a 	bl	8012230 <SysTimeSub>
 800eddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	b90b      	cbnz	r3, 800ede6 <RegionCommonUpdateBandTimeOff+0x22e>
 800ede2:	9b07      	ldr	r3, [sp, #28]
 800ede4:	b11b      	cbz	r3, 800edee <RegionCommonUpdateBandTimeOff+0x236>
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	42b3      	cmp	r3, r6
 800edea:	f43f af24 	beq.w	800ec36 <RegionCommonUpdateBandTimeOff+0x7e>
            band->TimeCredits = maxCredits;
 800edee:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800edf0:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <RegionCommonUpdateBandTimeOff+0x268>)
 800edf2:	4599      	cmp	r9, r3
 800edf4:	f63f af24 	bhi.w	800ec40 <RegionCommonUpdateBandTimeOff+0x88>
    if( band->LastBandUpdateTime == 0 )
 800edf8:	6863      	ldr	r3, [r4, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0cb      	beq.n	800ed96 <RegionCommonUpdateBandTimeOff+0x1de>
    band->MaxTimeCredits = maxCredits;
 800edfe:	6126      	str	r6, [r4, #16]
    if( joined == true )
 800ee00:	e786      	b.n	800ed10 <RegionCommonUpdateBandTimeOff+0x158>
 800ee02:	bf00      	nop
 800ee04:	c22e4507 	.word	0xc22e4507
 800ee08:	00015180 	.word	0x00015180
 800ee0c:	001b7740 	.word	0x001b7740
 800ee10:	0001517f 	.word	0x0001517f
 800ee14:	0001ec30 	.word	0x0001ec30
 800ee18:	02932e00 	.word	0x02932e00
 800ee1c:	0112a880 	.word	0x0112a880
 800ee20:	0001ec2f 	.word	0x0001ec2f

0800ee24 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800ee24:	7803      	ldrb	r3, [r0, #0]
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d001      	beq.n	800ee2e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800ee2a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800ee2c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800ee2e:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800ee30:	f003 020f 	and.w	r2, r3, #15
 800ee34:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800ee36:	091b      	lsrs	r3, r3, #4
 800ee38:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800ee3a:	7883      	ldrb	r3, [r0, #2]
 800ee3c:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800ee3e:	78c2      	ldrb	r2, [r0, #3]
 800ee40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ee44:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800ee46:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ee48:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800ee4c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800ee4e:	f003 030f 	and.w	r3, r3, #15
 800ee52:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800ee54:	2005      	movs	r0, #5
 800ee56:	4770      	bx	lr

0800ee58 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5c:	b083      	sub	sp, #12
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460f      	mov	r7, r1
 800ee62:	4616      	mov	r6, r2
 800ee64:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800ee66:	f890 9004 	ldrb.w	r9, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800ee6a:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800ee6e:	f990 8007 	ldrsb.w	r8, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ee72:	7943      	ldrb	r3, [r0, #5]
 800ee74:	b113      	cbz	r3, 800ee7c <RegionCommonLinkAdrReqVerifyParams+0x24>
    int8_t nbRepetitions = verifyParams->NbRep;
 800ee76:	f990 b008 	ldrsb.w	fp, [r0, #8]
 800ee7a:	e005      	b.n	800ee88 <RegionCommonLinkAdrReqVerifyParams+0x30>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800ee7c:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800ee80:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800ee84:	f990 800a 	ldrsb.w	r8, [r0, #10]
    }

    if( status != 0 )
 800ee88:	f1b9 0f00 	cmp.w	r9, #0
 800ee8c:	d02d      	beq.n	800eeea <RegionCommonLinkAdrReqVerifyParams+0x92>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800ee8e:	f1ba 0f0f 	cmp.w	sl, #15
 800ee92:	d10f      	bne.n	800eeb4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800ee94:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800ee98:	f1b8 0f0f 	cmp.w	r8, #15
 800ee9c:	d01b      	beq.n	800eed6 <RegionCommonLinkAdrReqVerifyParams+0x7e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800ee9e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
 800eea2:	4543      	cmp	r3, r8
 800eea4:	dc2b      	bgt.n	800eefe <RegionCommonLinkAdrReqVerifyParams+0xa6>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800eea6:	f994 301c 	ldrsb.w	r3, [r4, #28]
 800eeaa:	4543      	cmp	r3, r8
 800eeac:	da15      	bge.n	800eeda <RegionCommonLinkAdrReqVerifyParams+0x82>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800eeae:	f009 09fb 	and.w	r9, r9, #251	; 0xfb
 800eeb2:	e01a      	b.n	800eeea <RegionCommonLinkAdrReqVerifyParams+0x92>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800eeb4:	69a3      	ldr	r3, [r4, #24]
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800eebc:	9300      	str	r3, [sp, #0]
 800eebe:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800eec2:	4652      	mov	r2, sl
 800eec4:	6921      	ldr	r1, [r4, #16]
 800eec6:	7b20      	ldrb	r0, [r4, #12]
 800eec8:	f7ff fdbc 	bl	800ea44 <RegionCommonChanVerifyDr>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d1e3      	bne.n	800ee98 <RegionCommonLinkAdrReqVerifyParams+0x40>
            status &= 0xFD; // Datarate KO
 800eed0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
 800eed4:	e7e0      	b.n	800ee98 <RegionCommonLinkAdrReqVerifyParams+0x40>
            txPower =  verifyParams->CurrentTxPower;
 800eed6:	f994 800a 	ldrsb.w	r8, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800eeda:	f1b9 0f07 	cmp.w	r9, #7
 800eede:	d104      	bne.n	800eeea <RegionCommonLinkAdrReqVerifyParams+0x92>
    {
        if( nbRepetitions == 0 )
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 800eee0:	f1bb 0f00 	cmp.w	fp, #0
 800eee4:	bf08      	it	eq
 800eee6:	f04f 0b01 	moveq.w	fp, #1
        }
    }

    // Apply changes
    *dr = datarate;
 800eeea:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800eeee:	f886 8000 	strb.w	r8, [r6]
    *nbRep = nbRepetitions;
 800eef2:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800eef6:	4648      	mov	r0, r9
 800eef8:	b003      	add	sp, #12
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800eefe:	4698      	mov	r8, r3
 800ef00:	e7eb      	b.n	800eeda <RegionCommonLinkAdrReqVerifyParams+0x82>
	...

0800ef04 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ef04:	4b02      	ldr	r3, [pc, #8]	; (800ef10 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800ef06:	fa03 f000 	lsl.w	r0, r3, r0
}
 800ef0a:	fbb0 f0f1 	udiv	r0, r0, r1
 800ef0e:	4770      	bx	lr
 800ef10:	000f4240 	.word	0x000f4240

0800ef14 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800ef14:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ef18:	fbb3 f0f0 	udiv	r0, r3, r0
 800ef1c:	4770      	bx	lr
	...

0800ef20 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800ef20:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ef22:	f1a1 0c04 	sub.w	ip, r1, #4
 800ef26:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800ef2a:	fb0e f202 	mul.w	r2, lr, r2
 800ef2e:	fb00 220c 	mla	r2, r0, ip, r2
 800ef32:	0052      	lsls	r2, r2, #1
 800ef34:	d004      	beq.n	800ef40 <RegionCommonComputeRxWindowParameters+0x20>
 800ef36:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef3a:	4462      	add	r2, ip
 800ef3c:	fbb2 f2f0 	udiv	r2, r2, r0
 800ef40:	4291      	cmp	r1, r2
 800ef42:	bf38      	it	cc
 800ef44:	4611      	movcc	r1, r2
 800ef46:	9a01      	ldr	r2, [sp, #4]
 800ef48:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ef4a:	0082      	lsls	r2, r0, #2
 800ef4c:	fb00 f101 	mul.w	r1, r0, r1
 800ef50:	b1a1      	cbz	r1, 800ef7c <RegionCommonComputeRxWindowParameters+0x5c>
 800ef52:	3101      	adds	r1, #1
 800ef54:	0849      	lsrs	r1, r1, #1
 800ef56:	1a52      	subs	r2, r2, r1
 800ef58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ef5c:	fb01 2313 	mls	r3, r1, r3, r2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	bfc8      	it	gt
 800ef64:	f203 33e7 	addwgt	r3, r3, #999	; 0x3e7
 800ef68:	4a05      	ldr	r2, [pc, #20]	; (800ef80 <RegionCommonComputeRxWindowParameters+0x60>)
 800ef6a:	fb82 1203 	smull	r1, r2, r2, r3
 800ef6e:	17db      	asrs	r3, r3, #31
 800ef70:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ef74:	9a02      	ldr	r2, [sp, #8]
 800ef76:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ef78:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	e7ea      	b.n	800ef56 <RegionCommonComputeRxWindowParameters+0x36>
 800ef80:	10624dd3 	.word	0x10624dd3

0800ef84 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	460d      	mov	r5, r1
 800ef88:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ef8a:	0040      	lsls	r0, r0, #1
 800ef8c:	f7f1 fe80 	bl	8000c90 <__aeabi_ui2f>
 800ef90:	4601      	mov	r1, r0
 800ef92:	4628      	mov	r0, r5
 800ef94:	f7f1 fdca 	bl	8000b2c <__aeabi_fsub>
 800ef98:	4621      	mov	r1, r4
 800ef9a:	f7f1 fdc7 	bl	8000b2c <__aeabi_fsub>
 800ef9e:	f7f1 fa57 	bl	8000450 <__aeabi_f2d>
 800efa2:	f004 f835 	bl	8013010 <floor>
 800efa6:	f7f1 fd45 	bl	8000a34 <__aeabi_d2iz>

    return phyTxPower;
}
 800efaa:	b240      	sxtb	r0, r0
 800efac:	bd38      	pop	{r3, r4, r5, pc}

0800efae <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800efae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb2:	b083      	sub	sp, #12
 800efb4:	9101      	str	r1, [sp, #4]
 800efb6:	4690      	mov	r8, r2
 800efb8:	4699      	mov	r9, r3
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800efba:	8a03      	ldrh	r3, [r0, #16]
 800efbc:	b123      	cbz	r3, 800efc8 <RegionCommonCountNbOfEnabledChannels+0x1a>
 800efbe:	2600      	movs	r6, #0
 800efc0:	4634      	mov	r4, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800efc2:	4635      	mov	r5, r6
    uint8_t nbChannelCount = 0;
 800efc4:	4631      	mov	r1, r6
 800efc6:	e05f      	b.n	800f088 <RegionCommonCountNbOfEnabledChannels+0xda>
    uint8_t nbRestrictedChannelsCount = 0;
 800efc8:	2500      	movs	r5, #0
    uint8_t nbChannelCount = 0;
 800efca:	4629      	mov	r1, r5
                }
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800efcc:	f888 1000 	strb.w	r1, [r8]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800efd0:	f889 5000 	strb.w	r5, [r9]
}
 800efd4:	b003      	add	sp, #12
 800efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800efda:	f990 a001 	ldrsb.w	sl, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800efde:	f89b e008 	ldrb.w	lr, [fp, #8]
 800efe2:	f34e 0e03 	sbfx	lr, lr, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 800efe6:	fa4f fe8e 	sxtb.w	lr, lr
 800efea:	45d6      	cmp	lr, sl
 800efec:	dc1c      	bgt.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800efee:	f89b e008 	ldrb.w	lr, [fp, #8]
 800eff2:	f34e 1e03 	sbfx	lr, lr, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800eff6:	fa4f fe8e 	sxtb.w	lr, lr
 800effa:	45d6      	cmp	lr, sl
 800effc:	db14      	blt.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800effe:	f89b e009 	ldrb.w	lr, [fp, #9]
 800f002:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800f006:	68c7      	ldr	r7, [r0, #12]
 800f008:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 800f00c:	f89e e014 	ldrb.w	lr, [lr, #20]
 800f010:	f1be 0f00 	cmp.w	lr, #0
 800f014:	d02e      	beq.n	800f074 <RegionCommonCountNbOfEnabledChannels+0xc6>
                enabledChannels[nbChannelCount++] = i + j;
 800f016:	f101 0e01 	add.w	lr, r1, #1
 800f01a:	eb04 0a0c 	add.w	sl, r4, ip
 800f01e:	9f01      	ldr	r7, [sp, #4]
 800f020:	f807 a001 	strb.w	sl, [r7, r1]
 800f024:	fa5f f18e 	uxtb.w	r1, lr
        for( uint8_t j = 0; j < 16; j++ )
 800f028:	f10c 0c01 	add.w	ip, ip, #1
 800f02c:	330c      	adds	r3, #12
 800f02e:	f1bc 0f10 	cmp.w	ip, #16
 800f032:	d022      	beq.n	800f07a <RegionCommonCountNbOfEnabledChannels+0xcc>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800f034:	6847      	ldr	r7, [r0, #4]
 800f036:	f837 e002 	ldrh.w	lr, [r7, r2]
 800f03a:	fa4e fe0c 	asr.w	lr, lr, ip
 800f03e:	f01e 0f01 	tst.w	lr, #1
 800f042:	d0f1      	beq.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800f044:	6887      	ldr	r7, [r0, #8]
 800f046:	eb07 0b03 	add.w	fp, r7, r3
 800f04a:	58ff      	ldr	r7, [r7, r3]
 800f04c:	2f00      	cmp	r7, #0
 800f04e:	d0eb      	beq.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800f050:	f890 e000 	ldrb.w	lr, [r0]
 800f054:	f1be 0f00 	cmp.w	lr, #0
 800f058:	d1bf      	bne.n	800efda <RegionCommonCountNbOfEnabledChannels+0x2c>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800f05a:	f8d0 e014 	ldr.w	lr, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800f05e:	f1be 0f00 	cmp.w	lr, #0
 800f062:	d0ba      	beq.n	800efda <RegionCommonCountNbOfEnabledChannels+0x2c>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800f064:	f83e e002 	ldrh.w	lr, [lr, r2]
 800f068:	fa4e fe0c 	asr.w	lr, lr, ip
 800f06c:	f01e 0f01 	tst.w	lr, #1
 800f070:	d1b3      	bne.n	800efda <RegionCommonCountNbOfEnabledChannels+0x2c>
 800f072:	e7d9      	b.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
                    nbRestrictedChannelsCount++;
 800f074:	3501      	adds	r5, #1
 800f076:	b2ed      	uxtb	r5, r5
                    continue;
 800f078:	e7d6      	b.n	800f028 <RegionCommonCountNbOfEnabledChannels+0x7a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f07a:	f104 0310 	add.w	r3, r4, #16
 800f07e:	b2dc      	uxtb	r4, r3
 800f080:	3601      	adds	r6, #1
 800f082:	8a02      	ldrh	r2, [r0, #16]
 800f084:	42a2      	cmp	r2, r4
 800f086:	d9a1      	bls.n	800efcc <RegionCommonCountNbOfEnabledChannels+0x1e>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800f088:	b2f2      	uxtb	r2, r6
 800f08a:	0052      	lsls	r2, r2, #1
 800f08c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	f04f 0c00 	mov.w	ip, #0
 800f096:	e7cd      	b.n	800f034 <RegionCommonCountNbOfEnabledChannels+0x86>

0800f098 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800f098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f09c:	b085      	sub	sp, #20
 800f09e:	4604      	mov	r4, r0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	4616      	mov	r6, r2
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f0aa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800f0ae:	6840      	ldr	r0, [r0, #4]
 800f0b0:	f003 fc52 	bl	8012958 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800f0b4:	6823      	ldr	r3, [r4, #0]
 800f0b6:	1a1b      	subs	r3, r3, r0
 800f0b8:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800f0c6:	6863      	ldr	r3, [r4, #4]
 800f0c8:	b113      	cbz	r3, 800f0d0 <RegionCommonIdentifyChannels+0x38>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	4283      	cmp	r3, r0
 800f0ce:	d824      	bhi.n	800f11a <RegionCommonIdentifyChannels+0x82>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800f0d4:	69e3      	ldr	r3, [r4, #28]
 800f0d6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f0da:	781f      	ldrb	r7, [r3, #0]
 800f0dc:	69a3      	ldr	r3, [r4, #24]
 800f0de:	9303      	str	r3, [sp, #12]
 800f0e0:	ab01      	add	r3, sp, #4
 800f0e2:	f104 020c 	add.w	r2, r4, #12
 800f0e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0ee:	7d23      	ldrb	r3, [r4, #20]
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	7a23      	ldrb	r3, [r4, #8]
 800f0f4:	7a62      	ldrb	r2, [r4, #9]
 800f0f6:	4661      	mov	r1, ip
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	f7ff fd5d 	bl	800ebb8 <RegionCommonUpdateBandTimeOff>
 800f0fe:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800f102:	4643      	mov	r3, r8
 800f104:	462a      	mov	r2, r5
 800f106:	4631      	mov	r1, r6
 800f108:	69e0      	ldr	r0, [r4, #28]
 800f10a:	f7ff ff50 	bl	800efae <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800f10e:	782b      	ldrb	r3, [r5, #0]
 800f110:	b11b      	cbz	r3, 800f11a <RegionCommonIdentifyChannels+0x82>
    {
        *nextTxDelay = 0;
 800f112:	2000      	movs	r0, #0
 800f114:	f8c9 0000 	str.w	r0, [r9]
        return LORAMAC_STATUS_OK;
 800f118:	e005      	b.n	800f126 <RegionCommonIdentifyChannels+0x8e>
    }
    else if( *nbRestrictedChannels > 0 )
 800f11a:	f898 3000 	ldrb.w	r3, [r8]
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bf14      	ite	ne
 800f122:	200b      	movne	r0, #11
 800f124:	200c      	moveq	r0, #12
    }
}
 800f126:	b005      	add	sp, #20
 800f128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f12c <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800f132:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800f136:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800f13a:	42a6      	cmp	r6, r4
 800f13c:	d010      	beq.n	800f160 <RegionCommonGetNextLowerTxDr+0x34>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800f13e:	3c01      	subs	r4, #1
 800f140:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800f142:	42a6      	cmp	r6, r4
 800f144:	d00c      	beq.n	800f160 <RegionCommonGetNextLowerTxDr+0x34>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800f146:	68ab      	ldr	r3, [r5, #8]
 800f148:	9301      	str	r3, [sp, #4]
 800f14a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	4633      	mov	r3, r6
 800f152:	4622      	mov	r2, r4
 800f154:	6869      	ldr	r1, [r5, #4]
 800f156:	78e8      	ldrb	r0, [r5, #3]
 800f158:	f7ff fc74 	bl	800ea44 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d0ee      	beq.n	800f13e <RegionCommonGetNextLowerTxDr+0x12>

        return drLocal;
    }
}
 800f160:	4620      	mov	r0, r4
 800f162:	b002      	add	sp, #8
 800f164:	bd70      	pop	{r4, r5, r6, pc}

0800f166 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800f166:	4288      	cmp	r0, r1
 800f168:	bfb8      	it	lt
 800f16a:	4608      	movlt	r0, r1
 800f16c:	4770      	bx	lr
	...

0800f170 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800f170:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800f174:	4b05      	ldr	r3, [pc, #20]	; (800f18c <RegionCommonGetBandwidth+0x1c>)
 800f176:	4298      	cmp	r0, r3
 800f178:	d006      	beq.n	800f188 <RegionCommonGetBandwidth+0x18>
 800f17a:	4b05      	ldr	r3, [pc, #20]	; (800f190 <RegionCommonGetBandwidth+0x20>)
 800f17c:	4298      	cmp	r0, r3
 800f17e:	bf14      	ite	ne
 800f180:	2000      	movne	r0, #0
 800f182:	2001      	moveq	r0, #1
 800f184:	0040      	lsls	r0, r0, #1
 800f186:	4770      	bx	lr
 800f188:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 800f18a:	4770      	bx	lr
 800f18c:	0003d090 	.word	0x0003d090
 800f190:	0007a120 	.word	0x0007a120

0800f194 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800f194:	b500      	push	{lr}
 800f196:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800f198:	2805      	cmp	r0, #5
 800f19a:	d80e      	bhi.n	800f1ba <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800f19c:	9202      	str	r2, [sp, #8]
 800f19e:	9101      	str	r1, [sp, #4]
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <RegionCommonRxConfigPrint+0x38>)
 800f1a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <RegionCommonRxConfigPrint+0x3c>)
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	2002      	movs	r0, #2
 800f1b0:	f003 fde4 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800f1b4:	b005      	add	sp, #20
 800f1b6:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800f1ba:	9201      	str	r2, [sp, #4]
 800f1bc:	9100      	str	r1, [sp, #0]
 800f1be:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <RegionCommonRxConfigPrint+0x40>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	2002      	movs	r0, #2
 800f1c6:	f003 fdd9 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800f1ca:	e7f3      	b.n	800f1b4 <RegionCommonRxConfigPrint+0x20>
 800f1cc:	08013d10 	.word	0x08013d10
 800f1d0:	08013ca8 	.word	0x08013ca8
 800f1d4:	08013cc8 	.word	0x08013cc8

0800f1d8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800f1d8:	b500      	push	{lr}
 800f1da:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800f1dc:	9101      	str	r1, [sp, #4]
 800f1de:	9000      	str	r0, [sp, #0]
 800f1e0:	4b04      	ldr	r3, [pc, #16]	; (800f1f4 <RegionCommonTxConfigPrint+0x1c>)
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	2002      	movs	r0, #2
 800f1e8:	f003 fdc8 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 800f1ec:	b003      	add	sp, #12
 800f1ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1f2:	bf00      	nop
 800f1f4:	08013ce4 	.word	0x08013ce4

0800f1f8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f1fe:	4b1a      	ldr	r3, [pc, #104]	; (800f268 <VerifyRfFreq+0x70>)
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	4798      	blx	r3
 800f204:	b130      	cbz	r0, 800f214 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800f206:	4b19      	ldr	r3, [pc, #100]	; (800f26c <VerifyRfFreq+0x74>)
 800f208:	4423      	add	r3, r4
 800f20a:	4a19      	ldr	r2, [pc, #100]	; (800f270 <VerifyRfFreq+0x78>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d802      	bhi.n	800f216 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800f210:	2302      	movs	r3, #2
 800f212:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800f214:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800f216:	4b17      	ldr	r3, [pc, #92]	; (800f274 <VerifyRfFreq+0x7c>)
 800f218:	4423      	add	r3, r4
 800f21a:	4a17      	ldr	r2, [pc, #92]	; (800f278 <VerifyRfFreq+0x80>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d802      	bhi.n	800f226 <VerifyRfFreq+0x2e>
        *band = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	702b      	strb	r3, [r5, #0]
 800f224:	e7f6      	b.n	800f214 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800f226:	4b15      	ldr	r3, [pc, #84]	; (800f27c <VerifyRfFreq+0x84>)
 800f228:	4423      	add	r3, r4
 800f22a:	4a15      	ldr	r2, [pc, #84]	; (800f280 <VerifyRfFreq+0x88>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d802      	bhi.n	800f236 <VerifyRfFreq+0x3e>
        *band = 1;
 800f230:	2301      	movs	r3, #1
 800f232:	702b      	strb	r3, [r5, #0]
 800f234:	e7ee      	b.n	800f214 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800f236:	4b13      	ldr	r3, [pc, #76]	; (800f284 <VerifyRfFreq+0x8c>)
 800f238:	4423      	add	r3, r4
 800f23a:	4a13      	ldr	r2, [pc, #76]	; (800f288 <VerifyRfFreq+0x90>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d802      	bhi.n	800f246 <VerifyRfFreq+0x4e>
        *band = 5;
 800f240:	2305      	movs	r3, #5
 800f242:	702b      	strb	r3, [r5, #0]
 800f244:	e7e6      	b.n	800f214 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800f246:	4b11      	ldr	r3, [pc, #68]	; (800f28c <VerifyRfFreq+0x94>)
 800f248:	4423      	add	r3, r4
 800f24a:	4a11      	ldr	r2, [pc, #68]	; (800f290 <VerifyRfFreq+0x98>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d802      	bhi.n	800f256 <VerifyRfFreq+0x5e>
        *band = 3;
 800f250:	2303      	movs	r3, #3
 800f252:	702b      	strb	r3, [r5, #0]
 800f254:	e7de      	b.n	800f214 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800f256:	4b0f      	ldr	r3, [pc, #60]	; (800f294 <VerifyRfFreq+0x9c>)
 800f258:	4423      	add	r3, r4
 800f25a:	4a0f      	ldr	r2, [pc, #60]	; (800f298 <VerifyRfFreq+0xa0>)
 800f25c:	4293      	cmp	r3, r2
        *band = 4;
 800f25e:	bf9a      	itte	ls
 800f260:	2304      	movls	r3, #4
 800f262:	702b      	strbls	r3, [r5, #0]
        return false;
 800f264:	2000      	movhi	r0, #0
 800f266:	e7d5      	b.n	800f214 <VerifyRfFreq+0x1c>
 800f268:	08013dd0 	.word	0x08013dd0
 800f26c:	cc8faa40 	.word	0xcc8faa40
 800f270:	001e847f 	.word	0x001e847f
 800f274:	cc7125c0 	.word	0xcc7125c0
 800f278:	002dc6c0 	.word	0x002dc6c0
 800f27c:	cc435eff 	.word	0xcc435eff
 800f280:	000927bf 	.word	0x000927bf
 800f284:	cc38b0a0 	.word	0xcc38b0a0
 800f288:	0007a120 	.word	0x0007a120
 800f28c:	cc2e0240 	.word	0xcc2e0240
 800f290:	0003d090 	.word	0x0003d090
 800f294:	cc296e60 	.word	0xcc296e60
 800f298:	000493e0 	.word	0x000493e0

0800f29c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800f2a4:	4b13      	ldr	r3, [pc, #76]	; (800f2f4 <GetTimeOnAir+0x58>)
 800f2a6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800f2a8:	4913      	ldr	r1, [pc, #76]	; (800f2f8 <GetTimeOnAir+0x5c>)
 800f2aa:	f7ff ff61 	bl	800f170 <RegionCommonGetBandwidth>
 800f2ae:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800f2b0:	2d07      	cmp	r5, #7
 800f2b2:	d00e      	beq.n	800f2d2 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	9003      	str	r0, [sp, #12]
 800f2b8:	b2e4      	uxtb	r4, r4
 800f2ba:	9402      	str	r4, [sp, #8]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	9301      	str	r3, [sp, #4]
 800f2c0:	2308      	movs	r3, #8
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	4b0d      	ldr	r3, [pc, #52]	; (800f2fc <GetTimeOnAir+0x60>)
 800f2c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	47a0      	blx	r4
    }
    return timeOnAir;
}
 800f2ce:	b004      	add	sp, #16
 800f2d0:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	9303      	str	r3, [sp, #12]
 800f2d6:	b2e4      	uxtb	r4, r4
 800f2d8:	9402      	str	r4, [sp, #8]
 800f2da:	2000      	movs	r0, #0
 800f2dc:	9001      	str	r0, [sp, #4]
 800f2de:	2305      	movs	r3, #5
 800f2e0:	9300      	str	r3, [sp, #0]
 800f2e2:	4b06      	ldr	r3, [pc, #24]	; (800f2fc <GetTimeOnAir+0x60>)
 800f2e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f2ec:	fb06 f202 	mul.w	r2, r6, r2
 800f2f0:	47a0      	blx	r4
 800f2f2:	e7ec      	b.n	800f2ce <GetTimeOnAir+0x32>
 800f2f4:	08013d48 	.word	0x08013d48
 800f2f8:	08013d28 	.word	0x08013d28
 800f2fc:	08013dd0 	.word	0x08013dd0

0800f300 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800f300:	b500      	push	{lr}
 800f302:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f304:	2300      	movs	r3, #0
 800f306:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800f308:	7803      	ldrb	r3, [r0, #0]
 800f30a:	3b0b      	subs	r3, #11
 800f30c:	2b2e      	cmp	r3, #46	; 0x2e
 800f30e:	d82f      	bhi.n	800f370 <RegionEU868GetPhyParam+0x70>
 800f310:	e8df f003 	tbb	[pc, r3]
 800f314:	3e383532 	.word	0x3e383532
 800f318:	4f4b4744 	.word	0x4f4b4744
 800f31c:	5f5b5753 	.word	0x5f5b5753
 800f320:	6b2e682e 	.word	0x6b2e682e
 800f324:	2e7a7771 	.word	0x2e7a7771
 800f328:	18827e2e 	.word	0x18827e2e
 800f32c:	2e2e2e2e 	.word	0x2e2e2e2e
 800f330:	2e2e2e2e 	.word	0x2e2e2e2e
 800f334:	2e2e2e2e 	.word	0x2e2e2e2e
 800f338:	8f88852e 	.word	0x8f88852e
 800f33c:	95922e2e 	.word	0x95922e2e
 800f340:	982e      	.short	0x982e
 800f342:	9e          	.byte	0x9e
 800f343:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f344:	7843      	ldrb	r3, [r0, #1]
 800f346:	f88d 3004 	strb.w	r3, [sp, #4]
 800f34a:	2307      	movs	r3, #7
 800f34c:	f88d 3005 	strb.w	r3, [sp, #5]
 800f350:	2300      	movs	r3, #0
 800f352:	f88d 3006 	strb.w	r3, [sp, #6]
 800f356:	2310      	movs	r3, #16
 800f358:	f88d 3007 	strb.w	r3, [sp, #7]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f35c:	4b40      	ldr	r3, [pc, #256]	; (800f460 <RegionEU868GetPhyParam+0x160>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f364:	9202      	str	r2, [sp, #8]
 800f366:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f368:	a801      	add	r0, sp, #4
 800f36a:	f7ff fedf 	bl	800f12c <RegionCommonGetNextLowerTxDr>
 800f36e:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800f370:	9804      	ldr	r0, [sp, #16]
 800f372:	b007      	add	sp, #28
 800f374:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f378:	2340      	movs	r3, #64	; 0x40
 800f37a:	9304      	str	r3, [sp, #16]
            break;
 800f37c:	e7f8      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f37e:	2320      	movs	r3, #32
 800f380:	9304      	str	r3, [sp, #16]
            break;
 800f382:	e7f5      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800f384:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f388:	4a36      	ldr	r2, [pc, #216]	; (800f464 <RegionEU868GetPhyParam+0x164>)
 800f38a:	5cd3      	ldrb	r3, [r2, r3]
 800f38c:	9304      	str	r3, [sp, #16]
            break;
 800f38e:	e7ef      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800f390:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f394:	4a34      	ldr	r2, [pc, #208]	; (800f468 <RegionEU868GetPhyParam+0x168>)
 800f396:	5cd3      	ldrb	r3, [r2, r3]
 800f398:	9304      	str	r3, [sp, #16]
            break;
 800f39a:	e7e9      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800f39c:	2301      	movs	r3, #1
 800f39e:	9304      	str	r3, [sp, #16]
            break;
 800f3a0:	e7e6      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800f3a2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f3a6:	9304      	str	r3, [sp, #16]
            break;
 800f3a8:	e7e2      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3ae:	9304      	str	r3, [sp, #16]
            break;
 800f3b0:	e7de      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f3b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f3b6:	9304      	str	r3, [sp, #16]
            break;
 800f3b8:	e7da      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f3ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800f3be:	9304      	str	r3, [sp, #16]
            break;
 800f3c0:	e7d6      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f3c2:	f241 7370 	movw	r3, #6000	; 0x1770
 800f3c6:	9304      	str	r3, [sp, #16]
            break;
 800f3c8:	e7d2      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800f3ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3ce:	9304      	str	r3, [sp, #16]
            break;
 800f3d0:	e7ce      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800f3d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f3d6:	4825      	ldr	r0, [pc, #148]	; (800f46c <RegionEU868GetPhyParam+0x16c>)
 800f3d8:	f000 fd48 	bl	800fe6c <randr>
 800f3dc:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f3e0:	9004      	str	r0, [sp, #16]
            break;
 800f3e2:	e7c5      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800f3e4:	4b22      	ldr	r3, [pc, #136]	; (800f470 <RegionEU868GetPhyParam+0x170>)
 800f3e6:	9304      	str	r3, [sp, #16]
            break;
 800f3e8:	e7c2      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f3ea:	4b1d      	ldr	r3, [pc, #116]	; (800f460 <RegionEU868GetPhyParam+0x160>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f3f2:	9304      	str	r3, [sp, #16]
            break;
 800f3f4:	e7bc      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f3f6:	4b1a      	ldr	r3, [pc, #104]	; (800f460 <RegionEU868GetPhyParam+0x160>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800f3fe:	9304      	str	r3, [sp, #16]
            break;
 800f400:	e7b6      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800f402:	2310      	movs	r3, #16
 800f404:	9304      	str	r3, [sp, #16]
            break;
 800f406:	e7b3      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <RegionEU868GetPhyParam+0x160>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	9304      	str	r3, [sp, #16]
            break;
 800f40e:	e7af      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800f410:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800f414:	9304      	str	r3, [sp, #16]
            break;
 800f416:	e7ab      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800f418:	4b16      	ldr	r3, [pc, #88]	; (800f474 <RegionEU868GetPhyParam+0x174>)
 800f41a:	9304      	str	r3, [sp, #16]
            break;
 800f41c:	e7a8      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800f41e:	4b14      	ldr	r3, [pc, #80]	; (800f470 <RegionEU868GetPhyParam+0x170>)
 800f420:	9304      	str	r3, [sp, #16]
            break;
 800f422:	e7a5      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800f424:	2311      	movs	r3, #17
 800f426:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800f42a:	2302      	movs	r3, #2
 800f42c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800f430:	e79e      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800f432:	2303      	movs	r3, #3
 800f434:	9304      	str	r3, [sp, #16]
            break;
 800f436:	e79b      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800f438:	4b0d      	ldr	r3, [pc, #52]	; (800f470 <RegionEU868GetPhyParam+0x170>)
 800f43a:	9304      	str	r3, [sp, #16]
            break;
 800f43c:	e798      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800f43e:	2303      	movs	r3, #3
 800f440:	9304      	str	r3, [sp, #16]
            break;
 800f442:	e795      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800f444:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f448:	4a0b      	ldr	r2, [pc, #44]	; (800f478 <RegionEU868GetPhyParam+0x178>)
 800f44a:	5cd3      	ldrb	r3, [r2, r3]
 800f44c:	9304      	str	r3, [sp, #16]
            break;
 800f44e:	e78f      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800f450:	490a      	ldr	r1, [pc, #40]	; (800f47c <RegionEU868GetPhyParam+0x17c>)
 800f452:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f456:	f7ff fe8b 	bl	800f170 <RegionCommonGetBandwidth>
 800f45a:	9004      	str	r0, [sp, #16]
            break;
 800f45c:	e788      	b.n	800f370 <RegionEU868GetPhyParam+0x70>
 800f45e:	bf00      	nop
 800f460:	200016ac 	.word	0x200016ac
 800f464:	08013d50 	.word	0x08013d50
 800f468:	08013d58 	.word	0x08013d58
 800f46c:	fffffc18 	.word	0xfffffc18
 800f470:	33d3e608 	.word	0x33d3e608
 800f474:	4009999a 	.word	0x4009999a
 800f478:	08013d48 	.word	0x08013d48
 800f47c:	08013d28 	.word	0x08013d28

0800f480 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f480:	b510      	push	{r4, lr}
 800f482:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f484:	4b0b      	ldr	r3, [pc, #44]	; (800f4b4 <RegionEU868SetBandTxDone+0x34>)
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	7803      	ldrb	r3, [r0, #0]
 800f48a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f48e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f492:	7a5b      	ldrb	r3, [r3, #9]
 800f494:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f498:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <RegionEU868SetBandTxDone+0x38>)
 800f49a:	681c      	ldr	r4, [r3, #0]
 800f49c:	6903      	ldr	r3, [r0, #16]
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	68c3      	ldr	r3, [r0, #12]
 800f4a2:	7842      	ldrb	r2, [r0, #1]
 800f4a4:	6881      	ldr	r1, [r0, #8]
 800f4a6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f4aa:	f7ff fb5e 	bl	800eb6a <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800f4ae:	b002      	add	sp, #8
 800f4b0:	bd10      	pop	{r4, pc}
 800f4b2:	bf00      	nop
 800f4b4:	200016ac 	.word	0x200016ac
 800f4b8:	200016a8 	.word	0x200016a8

0800f4bc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	b0a4      	sub	sp, #144	; 0x90
 800f4c0:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800f4c2:	2290      	movs	r2, #144	; 0x90
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	4668      	mov	r0, sp
 800f4c8:	f003 fd0e 	bl	8012ee8 <memset>
 800f4cc:	2364      	movs	r3, #100	; 0x64
 800f4ce:	f8ad 3000 	strh.w	r3, [sp]
 800f4d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f4d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4da:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800f4de:	210a      	movs	r1, #10
 800f4e0:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800f4e4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800f4e8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800f4ec:	7a23      	ldrb	r3, [r4, #8]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d031      	beq.n	800f556 <RegionEU868InitDefaults+0x9a>
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	d03d      	beq.n	800f572 <RegionEU868InitDefaults+0xb6>
 800f4f6:	b10b      	cbz	r3, 800f4fc <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800f4f8:	b024      	add	sp, #144	; 0x90
 800f4fa:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d0fa      	beq.n	800f4f8 <RegionEU868InitDefaults+0x3c>
 800f502:	6863      	ldr	r3, [r4, #4]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d0f7      	beq.n	800f4f8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f508:	4a1f      	ldr	r2, [pc, #124]	; (800f588 <RegionEU868InitDefaults+0xcc>)
 800f50a:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f50c:	4c1f      	ldr	r4, [pc, #124]	; (800f58c <RegionEU868InitDefaults+0xd0>)
 800f50e:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800f510:	2290      	movs	r2, #144	; 0x90
 800f512:	4669      	mov	r1, sp
 800f514:	f000 fccc 	bl	800feb0 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800f518:	6824      	ldr	r4, [r4, #0]
 800f51a:	4b1d      	ldr	r3, [pc, #116]	; (800f590 <RegionEU868InitDefaults+0xd4>)
 800f51c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800f524:	f104 0c0c 	add.w	ip, r4, #12
 800f528:	f103 020c 	add.w	r2, r3, #12
 800f52c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f52e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800f532:	f104 0c18 	add.w	ip, r4, #24
 800f536:	3318      	adds	r3, #24
 800f538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f53c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800f540:	2307      	movs	r3, #7
 800f542:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f546:	2201      	movs	r2, #1
 800f548:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800f54c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800f550:	f7ff fafb 	bl	800eb4a <RegionCommonChanMaskCopy>
            break;
 800f554:	e7d0      	b.n	800f4f8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800f556:	4b0d      	ldr	r3, [pc, #52]	; (800f58c <RegionEU868InitDefaults+0xd0>)
 800f558:	6818      	ldr	r0, [r3, #0]
 800f55a:	2300      	movs	r3, #0
 800f55c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800f55e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800f560:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f562:	2201      	movs	r2, #1
 800f564:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800f568:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f56c:	f7ff faed 	bl	800eb4a <RegionCommonChanMaskCopy>
            break;
 800f570:	e7c2      	b.n	800f4f8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <RegionEU868InitDefaults+0xd0>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800f57a:	f8b3 148c 	ldrh.w	r1, [r3, #1164]	; 0x48c
 800f57e:	430a      	orrs	r2, r1
 800f580:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800f584:	e7b8      	b.n	800f4f8 <RegionEU868InitDefaults+0x3c>
 800f586:	bf00      	nop
 800f588:	200016a8 	.word	0x200016a8
 800f58c:	200016ac 	.word	0x200016ac
 800f590:	08013134 	.word	0x08013134

0800f594 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f594:	b500      	push	{lr}
 800f596:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800f598:	290f      	cmp	r1, #15
 800f59a:	d809      	bhi.n	800f5b0 <RegionEU868Verify+0x1c>
 800f59c:	e8df f001 	tbb	[pc, r1]
 800f5a0:	0808080c 	.word	0x0808080c
 800f5a4:	291f1508 	.word	0x291f1508
 800f5a8:	08333308 	.word	0x08333308
 800f5ac:	3d080808 	.word	0x3d080808
 800f5b0:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800f5b2:	b003      	add	sp, #12
 800f5b4:	f85d fb04 	ldr.w	pc, [sp], #4
            uint8_t band = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800f5be:	f10d 0107 	add.w	r1, sp, #7
 800f5c2:	6800      	ldr	r0, [r0, #0]
 800f5c4:	f7ff fe18 	bl	800f1f8 <VerifyRfFreq>
 800f5c8:	e7f3      	b.n	800f5b2 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800f5ca:	2207      	movs	r2, #7
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	f990 0000 	ldrsb.w	r0, [r0]
 800f5d2:	f7ff fa6e 	bl	800eab2 <RegionCommonValueInRange>
 800f5d6:	3800      	subs	r0, #0
 800f5d8:	bf18      	it	ne
 800f5da:	2001      	movne	r0, #1
 800f5dc:	e7e9      	b.n	800f5b2 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f5de:	2205      	movs	r2, #5
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	f990 0000 	ldrsb.w	r0, [r0]
 800f5e6:	f7ff fa64 	bl	800eab2 <RegionCommonValueInRange>
 800f5ea:	3800      	subs	r0, #0
 800f5ec:	bf18      	it	ne
 800f5ee:	2001      	movne	r0, #1
 800f5f0:	e7df      	b.n	800f5b2 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800f5f2:	2207      	movs	r2, #7
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	f990 0000 	ldrsb.w	r0, [r0]
 800f5fa:	f7ff fa5a 	bl	800eab2 <RegionCommonValueInRange>
 800f5fe:	3800      	subs	r0, #0
 800f600:	bf18      	it	ne
 800f602:	2001      	movne	r0, #1
 800f604:	e7d5      	b.n	800f5b2 <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800f606:	2207      	movs	r2, #7
 800f608:	2100      	movs	r1, #0
 800f60a:	f990 0000 	ldrsb.w	r0, [r0]
 800f60e:	f7ff fa50 	bl	800eab2 <RegionCommonValueInRange>
 800f612:	3800      	subs	r0, #0
 800f614:	bf18      	it	ne
 800f616:	2001      	movne	r0, #1
 800f618:	e7cb      	b.n	800f5b2 <RegionEU868Verify+0x1e>
            return EU868_DUTY_CYCLE_ENABLED;
 800f61a:	2001      	movs	r0, #1
 800f61c:	e7c9      	b.n	800f5b2 <RegionEU868Verify+0x1e>
	...

0800f620 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f620:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800f622:	7903      	ldrb	r3, [r0, #4]
 800f624:	b11b      	cbz	r3, 800f62e <RegionEU868ChanMaskSet+0xe>
 800f626:	2b01      	cmp	r3, #1
 800f628:	d00b      	beq.n	800f642 <RegionEU868ChanMaskSet+0x22>
 800f62a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f62c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f62e:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <RegionEU868ChanMaskSet+0x38>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2201      	movs	r2, #1
 800f634:	6801      	ldr	r1, [r0, #0]
 800f636:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800f63a:	f7ff fa86 	bl	800eb4a <RegionCommonChanMaskCopy>
    return true;
 800f63e:	2001      	movs	r0, #1
            break;
 800f640:	e7f4      	b.n	800f62c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <RegionEU868ChanMaskSet+0x38>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2201      	movs	r2, #1
 800f648:	6801      	ldr	r1, [r0, #0]
 800f64a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800f64e:	f7ff fa7c 	bl	800eb4a <RegionCommonChanMaskCopy>
    return true;
 800f652:	2001      	movs	r0, #1
            break;
 800f654:	e7ea      	b.n	800f62c <RegionEU868ChanMaskSet+0xc>
 800f656:	bf00      	nop
 800f658:	200016ac 	.word	0x200016ac

0800f65c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	b083      	sub	sp, #12
 800f660:	460e      	mov	r6, r1
 800f662:	4617      	mov	r7, r2
 800f664:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800f666:	2807      	cmp	r0, #7
 800f668:	bfa8      	it	ge
 800f66a:	2007      	movge	r0, #7
 800f66c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800f66e:	4912      	ldr	r1, [pc, #72]	; (800f6b8 <RegionEU868ComputeRxWindowParameters+0x5c>)
 800f670:	f7ff fd7e 	bl	800f170 <RegionCommonGetBandwidth>
 800f674:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800f676:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f67a:	2b07      	cmp	r3, #7
 800f67c:	d017      	beq.n	800f6ae <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800f67e:	4a0e      	ldr	r2, [pc, #56]	; (800f6b8 <RegionEU868ComputeRxWindowParameters+0x5c>)
 800f680:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f684:	4a0d      	ldr	r2, [pc, #52]	; (800f6bc <RegionEU868ComputeRxWindowParameters+0x60>)
 800f686:	5cd0      	ldrb	r0, [r2, r3]
 800f688:	f7ff fc3c 	bl	800ef04 <RegionCommonComputeSymbolTimeLoRa>
 800f68c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f68e:	4b0c      	ldr	r3, [pc, #48]	; (800f6c0 <RegionEU868ComputeRxWindowParameters+0x64>)
 800f690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f692:	4798      	blx	r3
 800f694:	4603      	mov	r3, r0
 800f696:	f104 020c 	add.w	r2, r4, #12
 800f69a:	9201      	str	r2, [sp, #4]
 800f69c:	3408      	adds	r4, #8
 800f69e:	9400      	str	r4, [sp, #0]
 800f6a0:	463a      	mov	r2, r7
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f7ff fc3b 	bl	800ef20 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800f6aa:	b003      	add	sp, #12
 800f6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800f6ae:	2032      	movs	r0, #50	; 0x32
 800f6b0:	f7ff fc30 	bl	800ef14 <RegionCommonComputeSymbolTimeFsk>
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	e7ea      	b.n	800f68e <RegionEU868ComputeRxWindowParameters+0x32>
 800f6b8:	08013d28 	.word	0x08013d28
 800f6bc:	08013d48 	.word	0x08013d48
 800f6c0:	08013dd0 	.word	0x08013dd0

0800f6c4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	b08a      	sub	sp, #40	; 0x28
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800f6ce:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f6d2:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f6d6:	4b36      	ldr	r3, [pc, #216]	; (800f7b0 <RegionEU868RxConfig+0xec>)
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	4798      	blx	r3
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d165      	bne.n	800f7ac <RegionEU868RxConfig+0xe8>
 800f6e0:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f6e2:	7ce3      	ldrb	r3, [r4, #19]
 800f6e4:	b973      	cbnz	r3, 800f704 <RegionEU868RxConfig+0x40>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800f6e6:	7823      	ldrb	r3, [r4, #0]
 800f6e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f6ec:	0099      	lsls	r1, r3, #2
 800f6ee:	4a31      	ldr	r2, [pc, #196]	; (800f7b4 <RegionEU868RxConfig+0xf0>)
 800f6f0:	6812      	ldr	r2, [r2, #0]
 800f6f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f6fa:	f1b8 0f00 	cmp.w	r8, #0
 800f6fe:	d101      	bne.n	800f704 <RegionEU868RxConfig+0x40>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f700:	f852 8001 	ldr.w	r8, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800f704:	4b2c      	ldr	r3, [pc, #176]	; (800f7b8 <RegionEU868RxConfig+0xf4>)
 800f706:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800f70a:	4b29      	ldr	r3, [pc, #164]	; (800f7b0 <RegionEU868RxConfig+0xec>)
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	4640      	mov	r0, r8
 800f710:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800f712:	2d07      	cmp	r5, #7
 800f714:	d02b      	beq.n	800f76e <RegionEU868RxConfig+0xaa>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f716:	7ca3      	ldrb	r3, [r4, #18]
 800f718:	9309      	str	r3, [sp, #36]	; 0x24
 800f71a:	2601      	movs	r6, #1
 800f71c:	9608      	str	r6, [sp, #32]
 800f71e:	2300      	movs	r3, #0
 800f720:	9307      	str	r3, [sp, #28]
 800f722:	9306      	str	r3, [sp, #24]
 800f724:	9305      	str	r3, [sp, #20]
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	8922      	ldrh	r2, [r4, #8]
 800f72c:	9202      	str	r2, [sp, #8]
 800f72e:	2208      	movs	r2, #8
 800f730:	9201      	str	r2, [sp, #4]
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	4b1e      	ldr	r3, [pc, #120]	; (800f7b0 <RegionEU868RxConfig+0xec>)
 800f736:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f73a:	4633      	mov	r3, r6
 800f73c:	464a      	mov	r2, r9
 800f73e:	78a1      	ldrb	r1, [r4, #2]
 800f740:	4630      	mov	r0, r6
 800f742:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800f744:	7c63      	ldrb	r3, [r4, #17]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d02d      	beq.n	800f7a6 <RegionEU868RxConfig+0xe2>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800f74a:	4b1c      	ldr	r3, [pc, #112]	; (800f7bc <RegionEU868RxConfig+0xf8>)
 800f74c:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f74e:	310d      	adds	r1, #13
 800f750:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <RegionEU868RxConfig+0xec>)
 800f752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f754:	b2c9      	uxtb	r1, r1
 800f756:	4630      	mov	r0, r6
 800f758:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f75a:	462a      	mov	r2, r5
 800f75c:	4641      	mov	r1, r8
 800f75e:	7ce0      	ldrb	r0, [r4, #19]
 800f760:	f7ff fd18 	bl	800f194 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800f764:	703d      	strb	r5, [r7, #0]
    return true;
 800f766:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800f768:	b00a      	add	sp, #40	; 0x28
 800f76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800f76e:	7ca3      	ldrb	r3, [r4, #18]
 800f770:	9309      	str	r3, [sp, #36]	; 0x24
 800f772:	2000      	movs	r0, #0
 800f774:	9008      	str	r0, [sp, #32]
 800f776:	9007      	str	r0, [sp, #28]
 800f778:	9006      	str	r0, [sp, #24]
 800f77a:	2301      	movs	r3, #1
 800f77c:	9305      	str	r3, [sp, #20]
 800f77e:	9004      	str	r0, [sp, #16]
 800f780:	9003      	str	r0, [sp, #12]
 800f782:	8923      	ldrh	r3, [r4, #8]
 800f784:	9302      	str	r3, [sp, #8]
 800f786:	2305      	movs	r3, #5
 800f788:	9301      	str	r3, [sp, #4]
 800f78a:	4b0d      	ldr	r3, [pc, #52]	; (800f7c0 <RegionEU868RxConfig+0xfc>)
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	4b08      	ldr	r3, [pc, #32]	; (800f7b0 <RegionEU868RxConfig+0xec>)
 800f790:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f794:	4603      	mov	r3, r0
 800f796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f79a:	fb02 f209 	mul.w	r2, r2, r9
 800f79e:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f7a2:	47d0      	blx	sl
 800f7a4:	e7ce      	b.n	800f744 <RegionEU868RxConfig+0x80>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800f7a6:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <RegionEU868RxConfig+0x100>)
 800f7a8:	5d59      	ldrb	r1, [r3, r5]
 800f7aa:	e7d0      	b.n	800f74e <RegionEU868RxConfig+0x8a>
        return false;
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	e7db      	b.n	800f768 <RegionEU868RxConfig+0xa4>
 800f7b0:	08013dd0 	.word	0x08013dd0
 800f7b4:	200016ac 	.word	0x200016ac
 800f7b8:	08013d48 	.word	0x08013d48
 800f7bc:	08013d58 	.word	0x08013d58
 800f7c0:	00014585 	.word	0x00014585
 800f7c4:	08013d50 	.word	0x08013d50

0800f7c8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	b08b      	sub	sp, #44	; 0x2c
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	460f      	mov	r7, r1
 800f7d2:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800f7d4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f7d8:	4a3f      	ldr	r2, [pc, #252]	; (800f8d8 <RegionEU868TxConfig+0x110>)
 800f7da:	f912 b003 	ldrsb.w	fp, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800f7de:	4b3f      	ldr	r3, [pc, #252]	; (800f8dc <RegionEU868TxConfig+0x114>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4d3f      	ldr	r5, [pc, #252]	; (800f8e0 <RegionEU868TxConfig+0x118>)
 800f7e4:	6829      	ldr	r1, [r5, #0]
 800f7e6:	7803      	ldrb	r3, [r0, #0]
 800f7e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f7ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f7f0:	7a4b      	ldrb	r3, [r1, #9]
 800f7f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f7f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f7fa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f7fe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f802:	f7ff fcb0 	bl	800f166 <RegionCommonLimitTxPower>
 800f806:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800f808:	4936      	ldr	r1, [pc, #216]	; (800f8e4 <RegionEU868TxConfig+0x11c>)
 800f80a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f80e:	f7ff fcaf 	bl	800f170 <RegionCommonGetBandwidth>
 800f812:	4682      	mov	sl, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800f814:	68a2      	ldr	r2, [r4, #8]
 800f816:	6861      	ldr	r1, [r4, #4]
 800f818:	4630      	mov	r0, r6
 800f81a:	f7ff fbb3 	bl	800ef84 <RegionCommonComputeTxPower>
 800f81e:	4681      	mov	r9, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f820:	6829      	ldr	r1, [r5, #0]
 800f822:	7823      	ldrb	r3, [r4, #0]
 800f824:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f828:	4a2f      	ldr	r2, [pc, #188]	; (800f8e8 <RegionEU868TxConfig+0x120>)
 800f82a:	68d2      	ldr	r2, [r2, #12]
 800f82c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f830:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800f832:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f836:	2b07      	cmp	r3, #7
 800f838:	d031      	beq.n	800f89e <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f83a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f83e:	9308      	str	r3, [sp, #32]
 800f840:	2200      	movs	r2, #0
 800f842:	9207      	str	r2, [sp, #28]
 800f844:	9206      	str	r2, [sp, #24]
 800f846:	9205      	str	r2, [sp, #20]
 800f848:	2501      	movs	r5, #1
 800f84a:	9504      	str	r5, [sp, #16]
 800f84c:	9203      	str	r2, [sp, #12]
 800f84e:	2308      	movs	r3, #8
 800f850:	9302      	str	r3, [sp, #8]
 800f852:	9501      	str	r5, [sp, #4]
 800f854:	f8cd b000 	str.w	fp, [sp]
 800f858:	4b23      	ldr	r3, [pc, #140]	; (800f8e8 <RegionEU868TxConfig+0x120>)
 800f85a:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f85e:	4653      	mov	r3, sl
 800f860:	4649      	mov	r1, r9
 800f862:	4628      	mov	r0, r5
 800f864:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f866:	4b1e      	ldr	r3, [pc, #120]	; (800f8e0 <RegionEU868TxConfig+0x118>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	7823      	ldrb	r3, [r4, #0]
 800f86c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f870:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f874:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f878:	f7ff fcae 	bl	800f1d8 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f87c:	89a1      	ldrh	r1, [r4, #12]
 800f87e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f882:	f7ff fd0b 	bl	800f29c <GetTimeOnAir>
 800f886:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800f88a:	4b17      	ldr	r3, [pc, #92]	; (800f8e8 <RegionEU868TxConfig+0x120>)
 800f88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88e:	7b21      	ldrb	r1, [r4, #12]
 800f890:	4628      	mov	r0, r5
 800f892:	4798      	blx	r3

    *txPower = txPowerLimited;
 800f894:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f896:	2001      	movs	r0, #1
 800f898:	b00b      	add	sp, #44	; 0x2c
 800f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800f89e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f8a2:	9308      	str	r3, [sp, #32]
 800f8a4:	2500      	movs	r5, #0
 800f8a6:	9507      	str	r5, [sp, #28]
 800f8a8:	9506      	str	r5, [sp, #24]
 800f8aa:	9505      	str	r5, [sp, #20]
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	9304      	str	r3, [sp, #16]
 800f8b0:	9503      	str	r5, [sp, #12]
 800f8b2:	2305      	movs	r3, #5
 800f8b4:	9302      	str	r3, [sp, #8]
 800f8b6:	9501      	str	r5, [sp, #4]
 800f8b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8bc:	fb03 f30b 	mul.w	r3, r3, fp
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <RegionEU868TxConfig+0x120>)
 800f8c4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f8c8:	4653      	mov	r3, sl
 800f8ca:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	47d8      	blx	fp
 800f8d4:	e7c7      	b.n	800f866 <RegionEU868TxConfig+0x9e>
 800f8d6:	bf00      	nop
 800f8d8:	08013d48 	.word	0x08013d48
 800f8dc:	200016a8 	.word	0x200016a8
 800f8e0:	200016ac 	.word	0x200016ac
 800f8e4:	08013d28 	.word	0x08013d28
 800f8e8:	08013dd0 	.word	0x08013dd0

0800f8ec <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	b08d      	sub	sp, #52	; 0x34
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	4689      	mov	r9, r1
 800f8f6:	4690      	mov	r8, r2
 800f8f8:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	930a      	str	r3, [sp, #40]	; 0x28
 800f8fe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800f902:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f906:	7a04      	ldrb	r4, [r0, #8]
 800f908:	2c00      	cmp	r4, #0
 800f90a:	d04a      	beq.n	800f9a2 <RegionEU868LinkAdrReq+0xb6>
    uint8_t bytesProcessed = 0;
 800f90c:	461c      	mov	r4, r3
    uint8_t status = 0x07;
 800f90e:	2607      	movs	r6, #7
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f910:	f8df b144 	ldr.w	fp, [pc, #324]	; 800fa58 <RegionEU868LinkAdrReq+0x16c>
                        chMask |= 1 << i;
 800f914:	f04f 0a01 	mov.w	sl, #1
 800f918:	e007      	b.n	800f92a <RegionEU868LinkAdrReq+0x3e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f91a:	1e53      	subs	r3, r2, #1
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b04      	cmp	r3, #4
 800f920:	d81b      	bhi.n	800f95a <RegionEU868LinkAdrReq+0x6e>
            status &= 0xFE; // Channel mask KO
 800f922:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f924:	7a2b      	ldrb	r3, [r5, #8]
 800f926:	42a3      	cmp	r3, r4
 800f928:	d93c      	bls.n	800f9a4 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f92a:	6868      	ldr	r0, [r5, #4]
 800f92c:	a90a      	add	r1, sp, #40	; 0x28
 800f92e:	4420      	add	r0, r4
 800f930:	f7ff fa78 	bl	800ee24 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f934:	4603      	mov	r3, r0
 800f936:	b3a8      	cbz	r0, 800f9a4 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800f938:	4423      	add	r3, r4
 800f93a:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800f93c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800f940:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800f944:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800f948:	2a00      	cmp	r2, #0
 800f94a:	d1e6      	bne.n	800f91a <RegionEU868LinkAdrReq+0x2e>
 800f94c:	b33b      	cbz	r3, 800f99e <RegionEU868LinkAdrReq+0xb2>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f94e:	f8db c000 	ldr.w	ip, [fp]
 800f952:	2100      	movs	r1, #0
 800f954:	460b      	mov	r3, r1
 800f956:	2607      	movs	r6, #7
 800f958:	e013      	b.n	800f982 <RegionEU868LinkAdrReq+0x96>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f95a:	2a06      	cmp	r2, #6
            status &= 0xFE; // Channel mask KO
 800f95c:	bf88      	it	hi
 800f95e:	2606      	movhi	r6, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f960:	d8e0      	bhi.n	800f924 <RegionEU868LinkAdrReq+0x38>
 800f962:	e7f4      	b.n	800f94e <RegionEU868LinkAdrReq+0x62>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800f964:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 800f968:	b138      	cbz	r0, 800f97a <RegionEU868LinkAdrReq+0x8e>
                        chMask |= 1 << i;
 800f96a:	fa0a f003 	lsl.w	r0, sl, r3
 800f96e:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
 800f972:	ea40 000e 	orr.w	r0, r0, lr
 800f976:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f97a:	3301      	adds	r3, #1
 800f97c:	3103      	adds	r1, #3
 800f97e:	2b10      	cmp	r3, #16
 800f980:	d0d0      	beq.n	800f924 <RegionEU868LinkAdrReq+0x38>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800f982:	2a06      	cmp	r2, #6
 800f984:	d0ee      	beq.n	800f964 <RegionEU868LinkAdrReq+0x78>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f986:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 800f98a:	4118      	asrs	r0, r3
 800f98c:	f010 0f01 	tst.w	r0, #1
 800f990:	d0f3      	beq.n	800f97a <RegionEU868LinkAdrReq+0x8e>
 800f992:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800f996:	2800      	cmp	r0, #0
 800f998:	bf08      	it	eq
 800f99a:	2606      	moveq	r6, #6
 800f99c:	e7ed      	b.n	800f97a <RegionEU868LinkAdrReq+0x8e>
            status &= 0xFE; // Channel mask KO
 800f99e:	2606      	movs	r6, #6
 800f9a0:	e7c0      	b.n	800f924 <RegionEU868LinkAdrReq+0x38>
    uint8_t status = 0x07;
 800f9a2:	2607      	movs	r6, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800f9a4:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f9a8:	7aab      	ldrb	r3, [r5, #10]
 800f9aa:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f9ae:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800f9b2:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f9b6:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800f9ba:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f9be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f9c2:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f9c6:	7aeb      	ldrb	r3, [r5, #11]
 800f9c8:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f9cc:	7b2b      	ldrb	r3, [r5, #12]
 800f9ce:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f9d2:	7b6b      	ldrb	r3, [r5, #13]
 800f9d4:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800f9d8:	2310      	movs	r3, #16
 800f9da:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f9de:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800f9e2:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800f9ea:	2207      	movs	r2, #7
 800f9ec:	f88d 2019 	strb.w	r2, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f9f0:	4919      	ldr	r1, [pc, #100]	; (800fa58 <RegionEU868LinkAdrReq+0x16c>)
 800f9f2:	6809      	ldr	r1, [r1, #0]
 800f9f4:	9107      	str	r1, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800f9f6:	f88d 2020 	strb.w	r2, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800f9fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f9fe:	682b      	ldr	r3, [r5, #0]
 800fa00:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800fa02:	ab0a      	add	r3, sp, #40	; 0x28
 800fa04:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800fa08:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 800fa0c:	a801      	add	r0, sp, #4
 800fa0e:	f7ff fa23 	bl	800ee58 <RegionCommonLinkAdrReqVerifyParams>
 800fa12:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800fa14:	2807      	cmp	r0, #7
 800fa16:	d010      	beq.n	800fa3a <RegionEU868LinkAdrReq+0x14e>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800fa18:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800fa1c:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800fa20:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800fa24:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800fa28:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800fa2c:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800fa2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fa30:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800fa32:	4628      	mov	r0, r5
 800fa34:	b00d      	add	sp, #52	; 0x34
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800fa3a:	4e07      	ldr	r6, [pc, #28]	; (800fa58 <RegionEU868LinkAdrReq+0x16c>)
 800fa3c:	6830      	ldr	r0, [r6, #0]
 800fa3e:	220c      	movs	r2, #12
 800fa40:	2100      	movs	r1, #0
 800fa42:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fa46:	f000 fa4d 	bl	800fee4 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800fa4a:	6833      	ldr	r3, [r6, #0]
 800fa4c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800fa50:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800fa54:	e7e0      	b.n	800fa18 <RegionEU868LinkAdrReq+0x12c>
 800fa56:	bf00      	nop
 800fa58:	200016ac 	.word	0x200016ac

0800fa5c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	4605      	mov	r5, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800fa62:	2600      	movs	r6, #0
 800fa64:	f88d 6007 	strb.w	r6, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800fa68:	f10d 0107 	add.w	r1, sp, #7
 800fa6c:	6840      	ldr	r0, [r0, #4]
 800fa6e:	f7ff fbc3 	bl	800f1f8 <VerifyRfFreq>
 800fa72:	1d84      	adds	r4, r0, #6
 800fa74:	b2e4      	uxtb	r4, r4
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800fa76:	2207      	movs	r2, #7
 800fa78:	4631      	mov	r1, r6
 800fa7a:	f995 0000 	ldrsb.w	r0, [r5]
 800fa7e:	f7ff f818 	bl	800eab2 <RegionCommonValueInRange>
 800fa82:	b908      	cbnz	r0, 800fa88 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800fa84:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800fa88:	2205      	movs	r2, #5
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800fa90:	f7ff f80f 	bl	800eab2 <RegionCommonValueInRange>
 800fa94:	b908      	cbnz	r0, 800fa9a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fa96:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	b002      	add	sp, #8
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}

0800faa0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295
 800faa4:	4770      	bx	lr
	...

0800faa8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800faa8:	b510      	push	{r4, lr}
 800faaa:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800faac:	2300      	movs	r3, #0
 800faae:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800fab2:	7803      	ldrb	r3, [r0, #0]
 800fab4:	2b0f      	cmp	r3, #15
 800fab6:	d902      	bls.n	800fabe <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800fab8:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800faba:	b002      	add	sp, #8
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800fac0:	f10d 0107 	add.w	r1, sp, #7
 800fac4:	6840      	ldr	r0, [r0, #4]
 800fac6:	f7ff fb97 	bl	800f1f8 <VerifyRfFreq>
 800faca:	1c83      	adds	r3, r0, #2
 800facc:	b2db      	uxtb	r3, r3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800face:	7822      	ldrb	r2, [r4, #0]
 800fad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fad4:	4907      	ldr	r1, [pc, #28]	; (800faf4 <RegionEU868DlChannelReq+0x4c>)
 800fad6:	6809      	ldr	r1, [r1, #0]
 800fad8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800fadc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fae0:	b91a      	cbnz	r2, 800faea <RegionEU868DlChannelReq+0x42>
        status &= 0xFD;
 800fae2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    return status;
 800fae6:	b258      	sxtb	r0, r3
 800fae8:	e7e7      	b.n	800faba <RegionEU868DlChannelReq+0x12>
    if( status == 0x03 )
 800faea:	2b03      	cmp	r3, #3
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800faec:	bf04      	itt	eq
 800faee:	6862      	ldreq	r2, [r4, #4]
 800faf0:	6042      	streq	r2, [r0, #4]
 800faf2:	e7f8      	b.n	800fae6 <RegionEU868DlChannelReq+0x3e>
 800faf4:	200016ac 	.word	0x200016ac

0800faf8 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800faf8:	4770      	bx	lr
	...

0800fafc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fafe:	b097      	sub	sp, #92	; 0x5c
 800fb00:	4604      	mov	r4, r0
 800fb02:	460f      	mov	r7, r1
 800fb04:	4616      	mov	r6, r2
 800fb06:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800fb08:	2100      	movs	r1, #0
 800fb0a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800fb0e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800fb12:	9111      	str	r1, [sp, #68]	; 0x44
 800fb14:	9112      	str	r1, [sp, #72]	; 0x48
 800fb16:	9113      	str	r1, [sp, #76]	; 0x4c
 800fb18:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800fb1a:	2307      	movs	r3, #7
 800fb1c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800fb20:	4b33      	ldr	r3, [pc, #204]	; (800fbf0 <RegionEU868NextChannel+0xf4>)
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fb2a:	f7fe ffe4 	bl	800eaf6 <RegionCommonCountChannels>
 800fb2e:	b938      	cbnz	r0, 800fb40 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800fb30:	4b2f      	ldr	r3, [pc, #188]	; (800fbf0 <RegionEU868NextChannel+0xf4>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800fb38:	f043 0307 	orr.w	r3, r3, #7
 800fb3c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fb40:	7a63      	ldrb	r3, [r4, #9]
 800fb42:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fb46:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fb4a:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800fb4e:	4a28      	ldr	r2, [pc, #160]	; (800fbf0 <RegionEU868NextChannel+0xf4>)
 800fb50:	6812      	ldr	r2, [r2, #0]
 800fb52:	f502 6190 	add.w	r1, r2, #1152	; 0x480
 800fb56:	9104      	str	r1, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fb58:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800fb5a:	4a26      	ldr	r2, [pc, #152]	; (800fbf4 <RegionEU868NextChannel+0xf8>)
 800fb5c:	6812      	ldr	r2, [r2, #0]
 800fb5e:	9206      	str	r2, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800fb60:	2210      	movs	r2, #16
 800fb62:	f8ad 201c 	strh.w	r2, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800fb66:	f10d 020a 	add.w	r2, sp, #10
 800fb6a:	9208      	str	r2, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fb6c:	6822      	ldr	r2, [r4, #0]
 800fb6e:	9209      	str	r2, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fb70:	6862      	ldr	r2, [r4, #4]
 800fb72:	920a      	str	r2, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fb74:	7aa2      	ldrb	r2, [r4, #10]
 800fb76:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800fb7a:	2206      	movs	r2, #6
 800fb7c:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fb80:	aa0c      	add	r2, sp, #48	; 0x30
 800fb82:	f104 010c 	add.w	r1, r4, #12
 800fb86:	c903      	ldmia	r1, {r0, r1}
 800fb88:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800fb8c:	7d22      	ldrb	r2, [r4, #20]
 800fb8e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800fb92:	8ae1      	ldrh	r1, [r4, #22]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff fb81 	bl	800f29c <GetTimeOnAir>
 800fb9a:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fb9c:	ab03      	add	r3, sp, #12
 800fb9e:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fba0:	9601      	str	r6, [sp, #4]
 800fba2:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800fbac:	aa11      	add	r2, sp, #68	; 0x44
 800fbae:	4629      	mov	r1, r5
 800fbb0:	a809      	add	r0, sp, #36	; 0x24
 800fbb2:	f7ff fa71 	bl	800f098 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	b120      	cbz	r0, 800fbc4 <RegionEU868NextChannel+0xc8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800fbba:	280c      	cmp	r0, #12
 800fbbc:	d00f      	beq.n	800fbde <RegionEU868NextChannel+0xe2>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	b017      	add	sp, #92	; 0x5c
 800fbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800fbc4:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800fbc8:	3901      	subs	r1, #1
 800fbca:	f000 f94f 	bl	800fe6c <randr>
 800fbce:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800fbd2:	eb0d 0003 	add.w	r0, sp, r3
 800fbd6:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800fbda:	703b      	strb	r3, [r7, #0]
 800fbdc:	e7ef      	b.n	800fbbe <RegionEU868NextChannel+0xc2>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800fbde:	4b04      	ldr	r3, [pc, #16]	; (800fbf0 <RegionEU868NextChannel+0xf4>)
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800fbe6:	f043 0307 	orr.w	r3, r3, #7
 800fbea:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800fbee:	e7e6      	b.n	800fbbe <RegionEU868NextChannel+0xc2>
 800fbf0:	200016ac 	.word	0x200016ac
 800fbf4:	200016a8 	.word	0x200016a8

0800fbf8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800fbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbfa:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800fc02:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800fc04:	2d02      	cmp	r5, #2
 800fc06:	d947      	bls.n	800fc98 <RegionEU868ChannelAdd+0xa0>
 800fc08:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800fc0a:	2d0f      	cmp	r5, #15
 800fc0c:	d846      	bhi.n	800fc9c <RegionEU868ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800fc0e:	6803      	ldr	r3, [r0, #0]
 800fc10:	7a18      	ldrb	r0, [r3, #8]
 800fc12:	f340 0003 	sbfx	r0, r0, #0, #4
 800fc16:	2207      	movs	r2, #7
 800fc18:	2100      	movs	r1, #0
 800fc1a:	b240      	sxtb	r0, r0
 800fc1c:	f7fe ff49 	bl	800eab2 <RegionCommonValueInRange>
 800fc20:	4606      	mov	r6, r0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	7a1b      	ldrb	r3, [r3, #8]
 800fc26:	f343 1303 	sbfx	r3, r3, #4, #4
 800fc2a:	2207      	movs	r2, #7
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	b258      	sxtb	r0, r3
 800fc30:	f7fe ff3f 	bl	800eab2 <RegionCommonValueInRange>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d03f      	beq.n	800fcb8 <RegionEU868ChannelAdd+0xc0>
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800fc38:	6822      	ldr	r2, [r4, #0]
 800fc3a:	7a13      	ldrb	r3, [r2, #8]
 800fc3c:	f343 0103 	sbfx	r1, r3, #0, #4
 800fc40:	f343 1303 	sbfx	r3, r3, #4, #4
 800fc44:	b249      	sxtb	r1, r1
 800fc46:	b25b      	sxtb	r3, r3
 800fc48:	4299      	cmp	r1, r3
 800fc4a:	dc3f      	bgt.n	800fccc <RegionEU868ChannelAdd+0xd4>
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800fc4c:	f10d 0107 	add.w	r1, sp, #7
 800fc50:	6810      	ldr	r0, [r2, #0]
 800fc52:	f7ff fad1 	bl	800f1f8 <VerifyRfFreq>
 800fc56:	f080 0301 	eor.w	r3, r0, #1
 800fc5a:	b2db      	uxtb	r3, r3
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800fc5c:	2e00      	cmp	r6, #0
 800fc5e:	d03d      	beq.n	800fcdc <RegionEU868ChannelAdd+0xe4>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800fc60:	b9fb      	cbnz	r3, 800fca2 <RegionEU868ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800fc62:	4f20      	ldr	r7, [pc, #128]	; (800fce4 <RegionEU868ChannelAdd+0xec>)
 800fc64:	006e      	lsls	r6, r5, #1
 800fc66:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	220c      	movs	r2, #12
 800fc6e:	6821      	ldr	r1, [r4, #0]
 800fc70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc74:	f000 f91c 	bl	800feb0 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	442e      	add	r6, r5
 800fc7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fc80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc84:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800fc86:	2301      	movs	r3, #1
 800fc88:	40ab      	lsls	r3, r5
 800fc8a:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800fc8e:	430b      	orrs	r3, r1
 800fc90:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800fc94:	2000      	movs	r0, #0
 800fc96:	e002      	b.n	800fc9e <RegionEU868ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800fc98:	2006      	movs	r0, #6
 800fc9a:	e000      	b.n	800fc9e <RegionEU868ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc9c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800fc9e:	b003      	add	sp, #12
 800fca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800fca2:	2004      	movs	r0, #4
 800fca4:	e7fb      	b.n	800fc9e <RegionEU868ChannelAdd+0xa6>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800fca6:	f10d 0107 	add.w	r1, sp, #7
 800fcaa:	6810      	ldr	r0, [r2, #0]
 800fcac:	f7ff faa4 	bl	800f1f8 <VerifyRfFreq>
 800fcb0:	f080 0301 	eor.w	r3, r0, #1
 800fcb4:	b2db      	uxtb	r3, r3
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800fcb6:	e011      	b.n	800fcdc <RegionEU868ChannelAdd+0xe4>
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800fcb8:	6822      	ldr	r2, [r4, #0]
 800fcba:	7a13      	ldrb	r3, [r2, #8]
 800fcbc:	f343 0103 	sbfx	r1, r3, #0, #4
 800fcc0:	f343 1303 	sbfx	r3, r3, #4, #4
 800fcc4:	b249      	sxtb	r1, r1
 800fcc6:	b25b      	sxtb	r3, r3
 800fcc8:	4299      	cmp	r1, r3
 800fcca:	ddec      	ble.n	800fca6 <RegionEU868ChannelAdd+0xae>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800fccc:	f10d 0107 	add.w	r1, sp, #7
 800fcd0:	6810      	ldr	r0, [r2, #0]
 800fcd2:	f7ff fa91 	bl	800f1f8 <VerifyRfFreq>
 800fcd6:	f080 0301 	eor.w	r3, r0, #1
 800fcda:	b2db      	uxtb	r3, r3
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800fcdc:	1d58      	adds	r0, r3, #5
 800fcde:	b2c0      	uxtb	r0, r0
 800fce0:	e7dd      	b.n	800fc9e <RegionEU868ChannelAdd+0xa6>
 800fce2:	bf00      	nop
 800fce4:	200016ac 	.word	0x200016ac

0800fce8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800fce8:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800fcea:	2902      	cmp	r1, #2
 800fcec:	d801      	bhi.n	800fcf2 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800fcee:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800fcf0:	4770      	bx	lr
{
 800fcf2:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800fcf4:	4b09      	ldr	r3, [pc, #36]	; (800fd1c <RegionEU868ChannelsRemove+0x34>)
 800fcf6:	6818      	ldr	r0, [r3, #0]
 800fcf8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800fcfc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800fd00:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fd04:	2200      	movs	r2, #0
 800fd06:	f840 200c 	str.w	r2, [r0, ip]
 800fd0a:	605a      	str	r2, [r3, #4]
 800fd0c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800fd0e:	2210      	movs	r2, #16
 800fd10:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fd14:	f7fe fed6 	bl	800eac4 <RegionCommonChanDisable>
}
 800fd18:	bd08      	pop	{r3, pc}
 800fd1a:	bf00      	nop
 800fd1c:	200016ac 	.word	0x200016ac

0800fd20 <RegionEU868ApplyCFList>:
{
 800fd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd24:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800fd26:	2350      	movs	r3, #80	; 0x50
 800fd28:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800fd2c:	7903      	ldrb	r3, [r0, #4]
 800fd2e:	2b10      	cmp	r3, #16
 800fd30:	d133      	bne.n	800fd9a <RegionEU868ApplyCFList+0x7a>
 800fd32:	4607      	mov	r7, r0
    if( applyCFList->Payload[15] != 0 )
 800fd34:	6803      	ldr	r3, [r0, #0]
 800fd36:	7bdb      	ldrb	r3, [r3, #15]
 800fd38:	bb7b      	cbnz	r3, 800fd9a <RegionEU868ApplyCFList+0x7a>
 800fd3a:	2500      	movs	r5, #0
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fd3c:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 800fd3e:	462e      	mov	r6, r5
            newChannel.Frequency *= 100;
 800fd40:	f04f 0864 	mov.w	r8, #100	; 0x64
 800fd44:	e019      	b.n	800fd7a <RegionEU868ApplyCFList+0x5a>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	5d53      	ldrb	r3, [r2, r5]
 800fd4a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800fd4c:	442a      	add	r2, r5
 800fd4e:	7851      	ldrb	r1, [r2, #1]
 800fd50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800fd54:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800fd56:	7892      	ldrb	r2, [r2, #2]
 800fd58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800fd5c:	fb08 f303 	mul.w	r3, r8, r3
 800fd60:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800fd62:	9604      	str	r6, [sp, #16]
        if( newChannel.Frequency != 0 )
 800fd64:	b17b      	cbz	r3, 800fd86 <RegionEU868ApplyCFList+0x66>
            channelAdd.NewChannel = &newChannel;
 800fd66:	ab03      	add	r3, sp, #12
 800fd68:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800fd6a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800fd6e:	a801      	add	r0, sp, #4
 800fd70:	f7ff ff42 	bl	800fbf8 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fd74:	3401      	adds	r4, #1
 800fd76:	b2e4      	uxtb	r4, r4
 800fd78:	3503      	adds	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800fd7a:	2c07      	cmp	r4, #7
 800fd7c:	d9e3      	bls.n	800fd46 <RegionEU868ApplyCFList+0x26>
            newChannel.Frequency = 0;
 800fd7e:	9603      	str	r6, [sp, #12]
            newChannel.DrRange.Value = 0;
 800fd80:	f88d 6014 	strb.w	r6, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800fd84:	9604      	str	r6, [sp, #16]
            channelRemove.ChannelId = chanIdx;
 800fd86:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800fd8a:	4668      	mov	r0, sp
 800fd8c:	f7ff ffac 	bl	800fce8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fd90:	3401      	adds	r4, #1
 800fd92:	b2e4      	uxtb	r4, r4
 800fd94:	3503      	adds	r5, #3
 800fd96:	2c10      	cmp	r4, #16
 800fd98:	d1ef      	bne.n	800fd7a <RegionEU868ApplyCFList+0x5a>
}
 800fd9a:	b006      	add	sp, #24
 800fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fda0 <RegionEU868NewChannelReq>:
{
 800fda0:	b500      	push	{lr}
 800fda2:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800fda4:	6803      	ldr	r3, [r0, #0]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	b962      	cbnz	r2, 800fdc4 <RegionEU868NewChannelReq+0x24>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800fdaa:	7903      	ldrb	r3, [r0, #4]
 800fdac:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800fdb0:	a801      	add	r0, sp, #4
 800fdb2:	f7ff ff99 	bl	800fce8 <RegionEU868ChannelsRemove>
            status &= 0xFC;
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	bf14      	ite	ne
 800fdba:	2003      	movne	r0, #3
 800fdbc:	2000      	moveq	r0, #0
}
 800fdbe:	b005      	add	sp, #20
 800fdc0:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800fdc4:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800fdc6:	7903      	ldrb	r3, [r0, #4]
 800fdc8:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800fdcc:	a802      	add	r0, sp, #8
 800fdce:	f7ff ff13 	bl	800fbf8 <RegionEU868ChannelAdd>
 800fdd2:	2806      	cmp	r0, #6
 800fdd4:	d80b      	bhi.n	800fdee <RegionEU868NewChannelReq+0x4e>
 800fdd6:	e8df f000 	tbb	[pc, r0]
 800fdda:	0a0c      	.short	0x0a0c
 800fddc:	06040a0a 	.word	0x06040a0a
 800fde0:	08          	.byte	0x08
 800fde1:	00          	.byte	0x00
 800fde2:	2002      	movs	r0, #2
 800fde4:	e7eb      	b.n	800fdbe <RegionEU868NewChannelReq+0x1e>
                status &= 0xFD;
 800fde6:	2001      	movs	r0, #1
                break;
 800fde8:	e7e9      	b.n	800fdbe <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 800fdea:	2000      	movs	r0, #0
                break;
 800fdec:	e7e7      	b.n	800fdbe <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 800fdee:	2000      	movs	r0, #0
                break;
 800fdf0:	e7e5      	b.n	800fdbe <RegionEU868NewChannelReq+0x1e>
    uint8_t status = 0x03;
 800fdf2:	2003      	movs	r0, #3
 800fdf4:	e7e3      	b.n	800fdbe <RegionEU868NewChannelReq+0x1e>
	...

0800fdf8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800fdfc:	4b12      	ldr	r3, [pc, #72]	; (800fe48 <RegionEU868SetContinuousWave+0x50>)
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	4d12      	ldr	r5, [pc, #72]	; (800fe4c <RegionEU868SetContinuousWave+0x54>)
 800fe02:	6829      	ldr	r1, [r5, #0]
 800fe04:	7803      	ldrb	r3, [r0, #0]
 800fe06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fe0e:	7a4b      	ldrb	r3, [r1, #9]
 800fe10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe18:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800fe1c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800fe20:	f7ff f9a1 	bl	800f166 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800fe24:	682a      	ldr	r2, [r5, #0]
 800fe26:	7823      	ldrb	r3, [r4, #0]
 800fe28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe2c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800fe30:	68a2      	ldr	r2, [r4, #8]
 800fe32:	6861      	ldr	r1, [r4, #4]
 800fe34:	f7ff f8a6 	bl	800ef84 <RegionCommonComputeTxPower>
 800fe38:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <RegionEU868SetContinuousWave+0x58>)
 800fe3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe3e:	89a2      	ldrh	r2, [r4, #12]
 800fe40:	4628      	mov	r0, r5
 800fe42:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800fe44:	bd38      	pop	{r3, r4, r5, pc}
 800fe46:	bf00      	nop
 800fe48:	200016a8 	.word	0x200016a8
 800fe4c:	200016ac 	.word	0x200016ac
 800fe50:	08013dd0 	.word	0x08013dd0

0800fe54 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800fe54:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800fe56:	b240      	sxtb	r0, r0
 800fe58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
#else
    return 0;
#endif /* REGION_EU868 */
}
 800fe5c:	b2c0      	uxtb	r0, r0
 800fe5e:	4770      	bx	lr

0800fe60 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800fe60:	4b01      	ldr	r3, [pc, #4]	; (800fe68 <srand1+0x8>)
 800fe62:	6018      	str	r0, [r3, #0]
}
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	20000110 	.word	0x20000110

0800fe6c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800fe6c:	b410      	push	{r4}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800fe6e:	4a0e      	ldr	r2, [pc, #56]	; (800fea8 <randr+0x3c>)
 800fe70:	4c0e      	ldr	r4, [pc, #56]	; (800feac <randr+0x40>)
 800fe72:	f243 0339 	movw	r3, #12345	; 0x3039
 800fe76:	f8d2 c000 	ldr.w	ip, [r2]
 800fe7a:	fb04 330c 	mla	r3, r4, ip, r3
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	2203      	movs	r2, #3
 800fe82:	fba2 4203 	umull	r4, r2, r2, r3
 800fe86:	eba3 0c02 	sub.w	ip, r3, r2
 800fe8a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
 800fe8e:	0f92      	lsrs	r2, r2, #30
 800fe90:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 800fe94:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800fe96:	1a09      	subs	r1, r1, r0
 800fe98:	3101      	adds	r1, #1
 800fe9a:	fb93 f2f1 	sdiv	r2, r3, r1
 800fe9e:	fb01 3312 	mls	r3, r1, r2, r3
}
 800fea2:	4418      	add	r0, r3
 800fea4:	bc10      	pop	{r4}
 800fea6:	4770      	bx	lr
 800fea8:	20000110 	.word	0x20000110
 800feac:	41c64e6d 	.word	0x41c64e6d

0800feb0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800feb0:	1e53      	subs	r3, r2, #1
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	b142      	cbz	r2, 800fec8 <memcpy1+0x18>
 800feb6:	3801      	subs	r0, #1
 800feb8:	3301      	adds	r3, #1
 800feba:	18ca      	adds	r2, r1, r3
    {
        *dst++ = *src++;
 800febc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fec0:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 800fec4:	4291      	cmp	r1, r2
 800fec6:	d1f9      	bne.n	800febc <memcpy1+0xc>
    }
}
 800fec8:	4770      	bx	lr

0800feca <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 800feca:	1e53      	subs	r3, r2, #1
 800fecc:	b29b      	uxth	r3, r3
 800fece:	b142      	cbz	r2, 800fee2 <memcpyr+0x18>
 800fed0:	4410      	add	r0, r2
 800fed2:	3301      	adds	r3, #1
 800fed4:	18ca      	adds	r2, r1, r3
    {
        *dst-- = *src++;
 800fed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feda:	f800 3d01 	strb.w	r3, [r0, #-1]!
    while( size-- )
 800fede:	4291      	cmp	r1, r2
 800fee0:	d1f9      	bne.n	800fed6 <memcpyr+0xc>
    }
}
 800fee2:	4770      	bx	lr

0800fee4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800fee4:	1e53      	subs	r3, r2, #1
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	b12a      	cbz	r2, 800fef6 <memset1+0x12>
 800feea:	3301      	adds	r3, #1
 800feec:	4403      	add	r3, r0
    {
        *dst++ = value;
 800feee:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800fef2:	4298      	cmp	r0, r3
 800fef4:	d1fb      	bne.n	800feee <memset1+0xa>
    }
}
 800fef6:	4770      	bx	lr

0800fef8 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800fef8:	b1e8      	cbz	r0, 800ff36 <Crc32+0x3e>
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800fefa:	b1f1      	cbz	r1, 800ff3a <Crc32+0x42>
{
 800fefc:	b510      	push	{r4, lr}
 800fefe:	f100 3cff 	add.w	ip, r0, #4294967295
 800ff02:	3901      	subs	r1, #1
 800ff04:	fa10 fe81 	uxtah	lr, r0, r1
    uint32_t crc = 0xFFFFFFFF;
 800ff08:	f04f 31ff 	mov.w	r1, #4294967295
    {
        crc ^= ( uint32_t )buffer[i];
 800ff0c:	2408      	movs	r4, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800ff0e:	480d      	ldr	r0, [pc, #52]	; (800ff44 <Crc32+0x4c>)
 800ff10:	e001      	b.n	800ff16 <Crc32+0x1e>
    for( uint16_t i = 0; i < length; ++i )
 800ff12:	45f4      	cmp	ip, lr
 800ff14:	d00d      	beq.n	800ff32 <Crc32+0x3a>
        crc ^= ( uint32_t )buffer[i];
 800ff16:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ff1a:	4059      	eors	r1, r3
 800ff1c:	4623      	mov	r3, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800ff1e:	f341 0200 	sbfx	r2, r1, #0, #1
 800ff22:	4002      	ands	r2, r0
 800ff24:	ea82 0151 	eor.w	r1, r2, r1, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1f6      	bne.n	800ff1e <Crc32+0x26>
 800ff30:	e7ef      	b.n	800ff12 <Crc32+0x1a>
        }
    }

    return ~crc;
 800ff32:	43c8      	mvns	r0, r1
}
 800ff34:	bd10      	pop	{r4, pc}
        return 0;
 800ff36:	2000      	movs	r0, #0
 800ff38:	4770      	bx	lr
    uint32_t crc = 0xFFFFFFFF;
 800ff3a:	f04f 31ff 	mov.w	r1, #4294967295
    return ~crc;
 800ff3e:	43c8      	mvns	r0, r1
}
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	edb88320 	.word	0xedb88320

0800ff48 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800ff48:	2001      	movs	r0, #1
 800ff4a:	4770      	bx	lr

0800ff4c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800ff52:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800ff56:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800ff5a:	f89d c01c 	ldrb.w	ip, [sp, #28]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800ff5e:	b148      	cbz	r0, 800ff74 <RadioTimeOnAir+0x28>
 800ff60:	4686      	mov	lr, r0
 800ff62:	2801      	cmp	r0, #1
 800ff64:	d015      	beq.n	800ff92 <RadioTimeOnAir+0x46>
 800ff66:	2201      	movs	r2, #1
 800ff68:	2300      	movs	r3, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800ff6a:	1898      	adds	r0, r3, r2
 800ff6c:	3801      	subs	r0, #1
 800ff6e:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff74:	f085 0501 	eor.w	r5, r5, #1
    return ( preambleLen << 3 ) +
 800ff78:	00e3      	lsls	r3, r4, #3
 800ff7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff7e:	3318      	adds	r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800ff80:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff84:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800ff88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff8c:	fb01 f303 	mul.w	r3, r1, r3
        break;
 800ff90:	e7eb      	b.n	800ff6a <RadioTimeOnAir+0x1e>
    int32_t crDenom           = coderate + 4;
 800ff92:	3304      	adds	r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ff94:	1f50      	subs	r0, r2, #5
 800ff96:	2801      	cmp	r0, #1
 800ff98:	d936      	bls.n	8010008 <RadioTimeOnAir+0xbc>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ff9a:	2900      	cmp	r1, #0
 800ff9c:	d138      	bne.n	8010010 <RadioTimeOnAir+0xc4>
 800ff9e:	f1a2 000b 	sub.w	r0, r2, #11
 800ffa2:	2801      	cmp	r0, #1
 800ffa4:	bf8c      	ite	hi
 800ffa6:	2000      	movhi	r0, #0
 800ffa8:	2001      	movls	r0, #1
                            ( 4 * datarate ) +
 800ffaa:	ea4f 0e82 	mov.w	lr, r2, lsl #2
                            ( crcOn ? 16 : 0 ) -
 800ffae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ffb2:	eb0c 0cc6 	add.w	ip, ip, r6, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800ffb6:	ebac 0c82 	sub.w	ip, ip, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 800ffba:	2d00      	cmp	r5, #0
 800ffbc:	bf14      	ite	ne
 800ffbe:	2600      	movne	r6, #0
 800ffc0:	2614      	moveq	r6, #20
                            ( 4 * datarate ) +
 800ffc2:	4466      	add	r6, ip
    if( datarate <= 6 )
 800ffc4:	2a06      	cmp	r2, #6
 800ffc6:	d84c      	bhi.n	8010062 <RadioTimeOnAir+0x116>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ffc8:	2e00      	cmp	r6, #0
 800ffca:	bfac      	ite	ge
 800ffcc:	eb0e 0006 	addge.w	r0, lr, r6
 800ffd0:	f10e 0000 	addlt.w	r0, lr, #0
 800ffd4:	3801      	subs	r0, #1
 800ffd6:	fb90 f0fe 	sdiv	r0, r0, lr
 800ffda:	fb03 4300 	mla	r3, r3, r0, r4
        intermediate += 2;
 800ffde:	330e      	adds	r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	3a02      	subs	r2, #2
 800ffe6:	4093      	lsls	r3, r2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800ffe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ffec:	fb02 f303 	mul.w	r3, r2, r3
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800fff0:	4a2b      	ldr	r2, [pc, #172]	; (80100a0 <RadioTimeOnAir+0x154>)
    switch( bw )
 800fff2:	5c52      	ldrb	r2, [r2, r1]
 800fff4:	2a0a      	cmp	r2, #10
 800fff6:	d830      	bhi.n	801005a <RadioTimeOnAir+0x10e>
 800fff8:	e8df f002 	tbb	[pc, r2]
 800fffc:	26201a14 	.word	0x26201a14
 8010000:	2f2d2b29 	.word	0x2f2d2b29
 8010004:	1d17      	.short	0x1d17
 8010006:	23          	.byte	0x23
 8010007:	00          	.byte	0x00
        if( preambleLen < 12 )
 8010008:	2c0c      	cmp	r4, #12
 801000a:	bf38      	it	cc
 801000c:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801000e:	b129      	cbz	r1, 801001c <RadioTimeOnAir+0xd0>
 8010010:	2901      	cmp	r1, #1
 8010012:	d105      	bne.n	8010020 <RadioTimeOnAir+0xd4>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010014:	2a0c      	cmp	r2, #12
 8010016:	d037      	beq.n	8010088 <RadioTimeOnAir+0x13c>
    bool    lowDatareOptimize = false;
 8010018:	2000      	movs	r0, #0
 801001a:	e7c6      	b.n	800ffaa <RadioTimeOnAir+0x5e>
 801001c:	2000      	movs	r0, #0
 801001e:	e7c4      	b.n	800ffaa <RadioTimeOnAir+0x5e>
 8010020:	2000      	movs	r0, #0
 8010022:	e7c2      	b.n	800ffaa <RadioTimeOnAir+0x5e>
    switch( bw )
 8010024:	f641 6284 	movw	r2, #7812	; 0x1e84
 8010028:	e79f      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 10417UL;
 801002a:	f642 02b1 	movw	r2, #10417	; 0x28b1
        break;
 801002e:	e79c      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 15625UL;
 8010030:	f643 5209 	movw	r2, #15625	; 0x3d09
        break;
 8010034:	e799      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 20833UL;
 8010036:	f245 1261 	movw	r2, #20833	; 0x5161
        break;
 801003a:	e796      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 31250UL;
 801003c:	f647 2212 	movw	r2, #31250	; 0x7a12
        break;
 8010040:	e793      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 41667UL;
 8010042:	f24a 22c3 	movw	r2, #41667	; 0xa2c3
        break;
 8010046:	e790      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 62500UL;
 8010048:	f24f 4224 	movw	r2, #62500	; 0xf424
        break;
 801004c:	e78d      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 125000UL;
 801004e:	4a15      	ldr	r2, [pc, #84]	; (80100a4 <RadioTimeOnAir+0x158>)
        break;
 8010050:	e78b      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 250000UL;
 8010052:	4a15      	ldr	r2, [pc, #84]	; (80100a8 <RadioTimeOnAir+0x15c>)
        break;
 8010054:	e789      	b.n	800ff6a <RadioTimeOnAir+0x1e>
        bandwidthInHz = 500000UL;
 8010056:	4a15      	ldr	r2, [pc, #84]	; (80100ac <RadioTimeOnAir+0x160>)
        break;
 8010058:	e787      	b.n	800ff6a <RadioTimeOnAir+0x1e>
    uint32_t bandwidthInHz = 0;
 801005a:	2200      	movs	r2, #0
 801005c:	e785      	b.n	800ff6a <RadioTimeOnAir+0x1e>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801005e:	4666      	mov	r6, ip
        lowDatareOptimize = true;
 8010060:	4628      	mov	r0, r5
        ceilNumerator += 8;
 8010062:	3608      	adds	r6, #8
        if( lowDatareOptimize == true )
 8010064:	b118      	cbz	r0, 801006e <RadioTimeOnAir+0x122>
            ceilDenominator = 4 * ( datarate - 2 );
 8010066:	f1a2 0e02 	sub.w	lr, r2, #2
 801006a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801006e:	2e00      	cmp	r6, #0
 8010070:	bfac      	ite	ge
 8010072:	eb0e 0006 	addge.w	r0, lr, r6
 8010076:	f10e 0000 	addlt.w	r0, lr, #0
 801007a:	3801      	subs	r0, #1
 801007c:	fb90 f0fe 	sdiv	r0, r0, lr
 8010080:	fb03 4300 	mla	r3, r3, r0, r4
    int32_t intermediate =
 8010084:	330c      	adds	r3, #12
    if( datarate <= 6 )
 8010086:	e7ab      	b.n	800ffe0 <RadioTimeOnAir+0x94>
                            ( 4 * datarate ) +
 8010088:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801008c:	00f6      	lsls	r6, r6, #3
 801008e:	eb06 160c 	add.w	r6, r6, ip, lsl #4
                            ( crcOn ? 16 : 0 ) -
 8010092:	eba6 0c82 	sub.w	ip, r6, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 8010096:	2d00      	cmp	r5, #0
 8010098:	d1e1      	bne.n	801005e <RadioTimeOnAir+0x112>
        lowDatareOptimize = true;
 801009a:	2001      	movs	r0, #1
                            ( fixLen ? 0 : 20 );
 801009c:	2614      	movs	r6, #20
 801009e:	e790      	b.n	800ffc2 <RadioTimeOnAir+0x76>
 80100a0:	08013dcc 	.word	0x08013dcc
 80100a4:	0001e848 	.word	0x0001e848
 80100a8:	0003d090 	.word	0x0003d090
 80100ac:	0007a120 	.word	0x0007a120

080100b0 <RadioOnTxTimeoutIrq>:
{
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
}

static void RadioOnTxTimeoutIrq( void *context )
{
 80100b0:	b508      	push	{r3, lr}

static void RadioOnTxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80100b2:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <RadioOnTxTimeoutIrq+0x10>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	b113      	cbz	r3, 80100be <RadioOnTxTimeoutIrq+0xe>
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	b103      	cbz	r3, 80100be <RadioOnTxTimeoutIrq+0xe>
    {
        RadioEvents->TxTimeout( );
 80100bc:	4798      	blx	r3
}
 80100be:	bd08      	pop	{r3, pc}
 80100c0:	200017b0 	.word	0x200017b0

080100c4 <RadioOnRxTimeoutIrq>:
{
 80100c4:	b508      	push	{r3, lr}

static void RadioOnRxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80100c6:	4b03      	ldr	r3, [pc, #12]	; (80100d4 <RadioOnRxTimeoutIrq+0x10>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	b113      	cbz	r3, 80100d2 <RadioOnRxTimeoutIrq+0xe>
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	b103      	cbz	r3, 80100d2 <RadioOnRxTimeoutIrq+0xe>
    {
        RadioEvents->RxTimeout( );
 80100d0:	4798      	blx	r3
}
 80100d2:	bd08      	pop	{r3, pc}
 80100d4:	200017b0 	.word	0x200017b0

080100d8 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 80100d8:	2001      	movs	r0, #1
 80100da:	4770      	bx	lr

080100dc <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 80100dc:	2001      	movs	r0, #1
 80100de:	4770      	bx	lr

080100e0 <RadioSetMaxPayloadLength>:
{
 80100e0:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80100e2:	2801      	cmp	r0, #1
 80100e4:	d004      	beq.n	80100f0 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80100e6:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <RadioSetMaxPayloadLength+0x30>)
 80100e8:	7d5b      	ldrb	r3, [r3, #21]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d008      	beq.n	8010100 <RadioSetMaxPayloadLength+0x20>
}
 80100ee:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80100f0:	4b08      	ldr	r3, [pc, #32]	; (8010114 <RadioSetMaxPayloadLength+0x34>)
 80100f2:	7019      	strb	r1, [r3, #0]
 80100f4:	4806      	ldr	r0, [pc, #24]	; (8010110 <RadioSetMaxPayloadLength+0x30>)
 80100f6:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80100f8:	300e      	adds	r0, #14
 80100fa:	f001 fdf9 	bl	8011cf0 <SUBGRF_SetPacketParams>
 80100fe:	e7f6      	b.n	80100ee <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8010100:	4b04      	ldr	r3, [pc, #16]	; (8010114 <RadioSetMaxPayloadLength+0x34>)
 8010102:	7019      	strb	r1, [r3, #0]
 8010104:	4802      	ldr	r0, [pc, #8]	; (8010110 <RadioSetMaxPayloadLength+0x30>)
 8010106:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010108:	300e      	adds	r0, #14
 801010a:	f001 fdf1 	bl	8011cf0 <SUBGRF_SetPacketParams>
}
 801010e:	e7ee      	b.n	80100ee <RadioSetMaxPayloadLength+0xe>
 8010110:	200017cc 	.word	0x200017cc
 8010114:	20000114 	.word	0x20000114

08010118 <RadioRead>:
{
 8010118:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801011a:	f001 f9cf 	bl	80114bc <SUBGRF_ReadRegister>
}
 801011e:	bd08      	pop	{r3, pc}

08010120 <RadioWrite>:
{
 8010120:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8010122:	f001 f9bb 	bl	801149c <SUBGRF_WriteRegister>
}
 8010126:	bd08      	pop	{r3, pc}

08010128 <RadioTxCw>:
{
 8010128:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801012a:	f001 ff10 	bl	8011f4e <SUBGRF_SetRfTxPower>
 801012e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010130:	210e      	movs	r1, #14
 8010132:	f640 101f 	movw	r0, #2335	; 0x91f
 8010136:	f001 f9b1 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801013a:	2101      	movs	r1, #1
 801013c:	4620      	mov	r0, r4
 801013e:	f001 fef1 	bl	8011f24 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010142:	f001 fb71 	bl	8011828 <SUBGRF_SetTxContinuousWave>
}
 8010146:	bd10      	pop	{r4, pc}

08010148 <RadioSetRxDutyCycle>:
{
 8010148:	b570      	push	{r4, r5, r6, lr}
 801014a:	4604      	mov	r4, r0
 801014c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801014e:	4e0a      	ldr	r6, [pc, #40]	; (8010178 <RadioSetRxDutyCycle+0x30>)
 8010150:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8010154:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010156:	2300      	movs	r3, #0
 8010158:	461a      	mov	r2, r3
 801015a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801015e:	4608      	mov	r0, r1
 8010160:	f001 fc05 	bl	801196e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010164:	2100      	movs	r1, #0
 8010166:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801016a:	f001 fedb 	bl	8011f24 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801016e:	4629      	mov	r1, r5
 8010170:	4620      	mov	r0, r4
 8010172:	f001 fb2d 	bl	80117d0 <SUBGRF_SetRxDutyCycle>
}
 8010176:	bd70      	pop	{r4, r5, r6, pc}
 8010178:	200017cc 	.word	0x200017cc

0801017c <RadioRxBoosted>:
{
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8010180:	f001 ffbc 	bl	80120fc <RFW_Is_Init>
 8010184:	2801      	cmp	r0, #1
 8010186:	d015      	beq.n	80101b4 <RadioRxBoosted+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010188:	2300      	movs	r3, #0
 801018a:	461a      	mov	r2, r3
 801018c:	f240 2162 	movw	r1, #610	; 0x262
 8010190:	4608      	mov	r0, r1
 8010192:	f001 fbec 	bl	801196e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010196:	b984      	cbnz	r4, 80101ba <RadioRxBoosted+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010198:	4c0f      	ldr	r4, [pc, #60]	; (80101d8 <RadioRxBoosted+0x5c>)
 801019a:	2100      	movs	r1, #0
 801019c:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801019e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80101a2:	f001 febf 	bl	8011f24 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80101a6:	7863      	ldrb	r3, [r4, #1]
 80101a8:	b183      	cbz	r3, 80101cc <RadioRxBoosted+0x50>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80101aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80101ae:	f001 faf3 	bl	8011798 <SUBGRF_SetRxBoosted>
}
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80101b4:	f001 ffaa 	bl	801210c <RFW_ReceiveInit>
 80101b8:	e7ed      	b.n	8010196 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80101ba:	4d08      	ldr	r5, [pc, #32]	; (80101dc <RadioRxBoosted+0x60>)
 80101bc:	4621      	mov	r1, r4
 80101be:	4628      	mov	r0, r5
 80101c0:	f002 fcaa 	bl	8012b18 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80101c4:	4628      	mov	r0, r5
 80101c6:	f002 fc61 	bl	8012a8c <UTIL_TIMER_Start>
 80101ca:	e7e5      	b.n	8010198 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80101cc:	4b02      	ldr	r3, [pc, #8]	; (80101d8 <RadioRxBoosted+0x5c>)
 80101ce:	6898      	ldr	r0, [r3, #8]
 80101d0:	0180      	lsls	r0, r0, #6
 80101d2:	f001 fae1 	bl	8011798 <SUBGRF_SetRxBoosted>
}
 80101d6:	e7ec      	b.n	80101b2 <RadioRxBoosted+0x36>
 80101d8:	200017cc 	.word	0x200017cc
 80101dc:	200017b4 	.word	0x200017b4

080101e0 <RadioStandby>:
{
 80101e0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80101e2:	2000      	movs	r0, #0
 80101e4:	f001 fa52 	bl	801168c <SUBGRF_SetStandby>
}
 80101e8:	bd08      	pop	{r3, pc}

080101ea <RadioGetStatus>:
{
 80101ea:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80101ec:	f001 f950 	bl	8011490 <SUBGRF_GetOperatingMode>
 80101f0:	2805      	cmp	r0, #5
 80101f2:	d007      	beq.n	8010204 <RadioGetStatus+0x1a>
 80101f4:	2807      	cmp	r0, #7
 80101f6:	d007      	beq.n	8010208 <RadioGetStatus+0x1e>
 80101f8:	2804      	cmp	r0, #4
 80101fa:	bf14      	ite	ne
 80101fc:	2000      	movne	r0, #0
 80101fe:	2001      	moveq	r0, #1
 8010200:	0040      	lsls	r0, r0, #1
}
 8010202:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8010204:	2001      	movs	r0, #1
 8010206:	e7fc      	b.n	8010202 <RadioGetStatus+0x18>
            return RF_CAD;
 8010208:	2003      	movs	r0, #3
 801020a:	e7fa      	b.n	8010202 <RadioGetStatus+0x18>

0801020c <RadioGetWakeupTime>:
{
 801020c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801020e:	f001 feb3 	bl	8011f78 <SUBGRF_GetRadioWakeUpTime>
}
 8010212:	3003      	adds	r0, #3
 8010214:	bd08      	pop	{r3, pc}

08010216 <RadioReadRegisters>:
{
 8010216:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8010218:	f001 f9d6 	bl	80115c8 <SUBGRF_ReadRegisters>
}
 801021c:	bd08      	pop	{r3, pc}

0801021e <RadioWriteRegisters>:
{
 801021e:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8010220:	f001 f98c 	bl	801153c <SUBGRF_WriteRegisters>
}
 8010224:	bd08      	pop	{r3, pc}

08010226 <RadioRssi>:
{
 8010226:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8010228:	f001 fdf2 	bl	8011e10 <SUBGRF_GetRssiInst>
}
 801022c:	b200      	sxth	r0, r0
 801022e:	bd08      	pop	{r3, pc}

08010230 <RadioSetTxContinuousWave>:
{
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	460d      	mov	r5, r1
 8010234:	4614      	mov	r4, r2
    SUBGRF_SetRfFrequency( freq );
 8010236:	f001 fc0b 	bl	8011a50 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 801023a:	4628      	mov	r0, r5
 801023c:	f001 fe87 	bl	8011f4e <SUBGRF_SetRfTxPower>
 8010240:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010242:	210e      	movs	r1, #14
 8010244:	f640 101f 	movw	r0, #2335	; 0x91f
 8010248:	f001 f928 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801024c:	2101      	movs	r1, #1
 801024e:	4628      	mov	r0, r5
 8010250:	f001 fe68 	bl	8011f24 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010254:	f001 fae8 	bl	8011828 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8010258:	4d05      	ldr	r5, [pc, #20]	; (8010270 <RadioSetTxContinuousWave+0x40>)
 801025a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801025e:	fb04 f101 	mul.w	r1, r4, r1
 8010262:	4628      	mov	r0, r5
 8010264:	f002 fc58 	bl	8012b18 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010268:	4628      	mov	r0, r5
 801026a:	f002 fc0f 	bl	8012a8c <UTIL_TIMER_Start>
}
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20001828 	.word	0x20001828

08010274 <RadioSetChannel>:
{
 8010274:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8010276:	f001 fbeb 	bl	8011a50 <SUBGRF_SetRfFrequency>
}
 801027a:	bd08      	pop	{r3, pc}

0801027c <RadioStartCad>:
{
 801027c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801027e:	2100      	movs	r1, #0
 8010280:	4b07      	ldr	r3, [pc, #28]	; (80102a0 <RadioStartCad+0x24>)
 8010282:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010286:	f001 fe4d 	bl	8011f24 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801028a:	2300      	movs	r3, #0
 801028c:	461a      	mov	r2, r3
 801028e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8010292:	4608      	mov	r0, r1
 8010294:	f001 fb6b 	bl	801196e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8010298:	f001 faba 	bl	8011810 <SUBGRF_SetCad>
}
 801029c:	bd08      	pop	{r3, pc}
 801029e:	bf00      	nop
 80102a0:	200017cc 	.word	0x200017cc

080102a4 <RadioRx>:
{
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80102a8:	f001 ff28 	bl	80120fc <RFW_Is_Init>
 80102ac:	2801      	cmp	r0, #1
 80102ae:	d015      	beq.n	80102dc <RadioRx+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80102b0:	2300      	movs	r3, #0
 80102b2:	461a      	mov	r2, r3
 80102b4:	f240 2162 	movw	r1, #610	; 0x262
 80102b8:	4608      	mov	r0, r1
 80102ba:	f001 fb58 	bl	801196e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80102be:	b984      	cbnz	r4, 80102e2 <RadioRx+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80102c0:	4c0f      	ldr	r4, [pc, #60]	; (8010300 <RadioRx+0x5c>)
 80102c2:	2100      	movs	r1, #0
 80102c4:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80102c6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80102ca:	f001 fe2b 	bl	8011f24 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80102ce:	7863      	ldrb	r3, [r4, #1]
 80102d0:	b183      	cbz	r3, 80102f4 <RadioRx+0x50>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80102d2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80102d6:	f001 fa11 	bl	80116fc <SUBGRF_SetRx>
}
 80102da:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80102dc:	f001 ff16 	bl	801210c <RFW_ReceiveInit>
 80102e0:	e7ed      	b.n	80102be <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80102e2:	4d08      	ldr	r5, [pc, #32]	; (8010304 <RadioRx+0x60>)
 80102e4:	4621      	mov	r1, r4
 80102e6:	4628      	mov	r0, r5
 80102e8:	f002 fc16 	bl	8012b18 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80102ec:	4628      	mov	r0, r5
 80102ee:	f002 fbcd 	bl	8012a8c <UTIL_TIMER_Start>
 80102f2:	e7e5      	b.n	80102c0 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80102f4:	4b02      	ldr	r3, [pc, #8]	; (8010300 <RadioRx+0x5c>)
 80102f6:	6898      	ldr	r0, [r3, #8]
 80102f8:	0180      	lsls	r0, r0, #6
 80102fa:	f001 f9ff 	bl	80116fc <SUBGRF_SetRx>
}
 80102fe:	e7ec      	b.n	80102da <RadioRx+0x36>
 8010300:	200017cc 	.word	0x200017cc
 8010304:	200017b4 	.word	0x200017b4

08010308 <RadioSleep>:
{
 8010308:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801030a:	f04f 0004 	mov.w	r0, #4
 801030e:	f001 f9a3 	bl	8011658 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8010312:	2002      	movs	r0, #2
 8010314:	f7f1 ffcc 	bl	80022b0 <HAL_Delay>
}
 8010318:	bd08      	pop	{r3, pc}

0801031a <RadioRandom>:
{
 801031a:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801031c:	2300      	movs	r3, #0
 801031e:	461a      	mov	r2, r3
 8010320:	4619      	mov	r1, r3
 8010322:	4618      	mov	r0, r3
 8010324:	f001 fb23 	bl	801196e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010328:	f001 fa00 	bl	801172c <SUBGRF_GetRandom>
}
 801032c:	bd08      	pop	{r3, pc}
	...

08010330 <RadioSetModem>:
{
 8010330:	b510      	push	{r4, lr}
 8010332:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010334:	4b1d      	ldr	r3, [pc, #116]	; (80103ac <RadioSetModem+0x7c>)
 8010336:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010338:	f001 feed 	bl	8012116 <RFW_SetRadioModem>
    switch( modem )
 801033c:	2c05      	cmp	r4, #5
 801033e:	d804      	bhi.n	801034a <RadioSetModem+0x1a>
 8010340:	e8df f004 	tbb	[pc, r4]
 8010344:	1e03110a 	.word	0x1e03110a
 8010348:	2c25      	.short	0x2c25
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801034a:	2003      	movs	r0, #3
 801034c:	f001 fbaa 	bl	8011aa4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010350:	4b16      	ldr	r3, [pc, #88]	; (80103ac <RadioSetModem+0x7c>)
 8010352:	2200      	movs	r2, #0
 8010354:	735a      	strb	r2, [r3, #13]
}
 8010356:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010358:	2000      	movs	r0, #0
 801035a:	f001 fba3 	bl	8011aa4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801035e:	4b13      	ldr	r3, [pc, #76]	; (80103ac <RadioSetModem+0x7c>)
 8010360:	2200      	movs	r2, #0
 8010362:	735a      	strb	r2, [r3, #13]
        break;
 8010364:	e7f7      	b.n	8010356 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8010366:	2001      	movs	r0, #1
 8010368:	f001 fb9c 	bl	8011aa4 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801036c:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <RadioSetModem+0x7c>)
 801036e:	7b18      	ldrb	r0, [r3, #12]
 8010370:	7b5b      	ldrb	r3, [r3, #13]
 8010372:	4283      	cmp	r3, r0
 8010374:	d0ef      	beq.n	8010356 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8010376:	4b0d      	ldr	r3, [pc, #52]	; (80103ac <RadioSetModem+0x7c>)
 8010378:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801037a:	f000 facf 	bl	801091c <RadioSetPublicNetwork>
 801037e:	e7ea      	b.n	8010356 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010380:	2002      	movs	r0, #2
 8010382:	f001 fb8f 	bl	8011aa4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010386:	4b09      	ldr	r3, [pc, #36]	; (80103ac <RadioSetModem+0x7c>)
 8010388:	2200      	movs	r2, #0
 801038a:	735a      	strb	r2, [r3, #13]
        break;
 801038c:	e7e3      	b.n	8010356 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801038e:	2002      	movs	r0, #2
 8010390:	f001 fb88 	bl	8011aa4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010394:	4b05      	ldr	r3, [pc, #20]	; (80103ac <RadioSetModem+0x7c>)
 8010396:	2200      	movs	r2, #0
 8010398:	735a      	strb	r2, [r3, #13]
        break;
 801039a:	e7dc      	b.n	8010356 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801039c:	2000      	movs	r0, #0
 801039e:	f001 fb81 	bl	8011aa4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80103a2:	4b02      	ldr	r3, [pc, #8]	; (80103ac <RadioSetModem+0x7c>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	735a      	strb	r2, [r3, #13]
}
 80103a8:	e7d5      	b.n	8010356 <RadioSetModem+0x26>
 80103aa:	bf00      	nop
 80103ac:	200017cc 	.word	0x200017cc

080103b0 <RadioSetTxGenericConfig>:
{
 80103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b4:	b086      	sub	sp, #24
 80103b6:	4605      	mov	r5, r0
 80103b8:	460c      	mov	r4, r1
 80103ba:	4617      	mov	r7, r2
 80103bc:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80103be:	2100      	movs	r1, #0
 80103c0:	9104      	str	r1, [sp, #16]
 80103c2:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80103c4:	f001 fe99 	bl	80120fa <RFW_DeInit>
    switch( modem )
 80103c8:	2d03      	cmp	r5, #3
 80103ca:	f200 8152 	bhi.w	8010672 <RadioSetTxGenericConfig+0x2c2>
 80103ce:	e8df f015 	tbh	[pc, r5, lsl #1]
 80103d2:	007a      	.short	0x007a
 80103d4:	013c00dd 	.word	0x013c00dd
 80103d8:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 80103da:	7ca2      	ldrb	r2, [r4, #18]
 80103dc:	2a08      	cmp	r2, #8
 80103de:	f200 8155 	bhi.w	801068c <RadioSetTxGenericConfig+0x2dc>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80103e2:	68a1      	ldr	r1, [r4, #8]
 80103e4:	a804      	add	r0, sp, #16
 80103e6:	f001 fef1 	bl	80121cc <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 8150 	beq.w	8010692 <RadioSetTxGenericConfig+0x2e2>
        else if( config->msk.BitRate <= 10000 )
 80103f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d823      	bhi.n	8010442 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80103fa:	4bac      	ldr	r3, [pc, #688]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 80103fc:	2203      	movs	r2, #3
 80103fe:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8010400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8010404:	6822      	ldr	r2, [r4, #0]
 8010406:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8010408:	7ce2      	ldrb	r2, [r4, #19]
 801040a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 801040e:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8010410:	4ba6      	ldr	r3, [pc, #664]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010412:	6862      	ldr	r2, [r4, #4]
 8010414:	00d2      	lsls	r2, r2, #3
 8010416:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8010418:	2204      	movs	r2, #4
 801041a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801041c:	7ca2      	ldrb	r2, [r4, #18]
 801041e:	00d2      	lsls	r2, r2, #3
 8010420:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8010422:	2200      	movs	r2, #0
 8010424:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8010426:	7da3      	ldrb	r3, [r4, #22]
 8010428:	2b02      	cmp	r3, #2
 801042a:	d018      	beq.n	801045e <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801042c:	7d23      	ldrb	r3, [r4, #20]
 801042e:	2b02      	cmp	r3, #2
 8010430:	d015      	beq.n	801045e <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8010432:	7d62      	ldrb	r2, [r4, #21]
 8010434:	4b9d      	ldr	r3, [pc, #628]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010436:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8010438:	7da2      	ldrb	r2, [r4, #22]
 801043a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801043c:	7d22      	ldrb	r2, [r4, #20]
 801043e:	755a      	strb	r2, [r3, #21]
 8010440:	e026      	b.n	8010490 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010442:	4b9a      	ldr	r3, [pc, #616]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010444:	2500      	movs	r5, #0
 8010446:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010448:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8010450:	7ce2      	ldrb	r2, [r4, #19]
 8010452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8010456:	6822      	ldr	r2, [r4, #0]
 8010458:	0892      	lsrs	r2, r2, #2
 801045a:	641a      	str	r2, [r3, #64]	; 0x40
 801045c:	e7d8      	b.n	8010410 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801045e:	7d62      	ldrb	r2, [r4, #21]
 8010460:	f102 030f 	add.w	r3, r2, #15
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b01      	cmp	r3, #1
 8010468:	d901      	bls.n	801046e <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801046a:	2a01      	cmp	r2, #1
 801046c:	d128      	bne.n	80104c0 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig = config;
 801046e:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8010470:	2301      	movs	r3, #1
 8010472:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8010476:	4a8e      	ldr	r2, [pc, #568]	; (80106b0 <RadioSetTxGenericConfig+0x300>)
 8010478:	4b8e      	ldr	r3, [pc, #568]	; (80106b4 <RadioSetTxGenericConfig+0x304>)
 801047a:	6819      	ldr	r1, [r3, #0]
 801047c:	a801      	add	r0, sp, #4
 801047e:	f001 fe39 	bl	80120f4 <RFW_Init>
 8010482:	b9e8      	cbnz	r0, 80104c0 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8010484:	4b89      	ldr	r3, [pc, #548]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010486:	2200      	movs	r2, #0
 8010488:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801048a:	2101      	movs	r1, #1
 801048c:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801048e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8010490:	f7ff fea6 	bl	80101e0 <RadioStandby>
        RadioSetModem( radio_modem );
 8010494:	4628      	mov	r0, r5
 8010496:	f7ff ff4b 	bl	8010330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801049a:	4d84      	ldr	r5, [pc, #528]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801049c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80104a0:	f001 fb9e 	bl	8011be0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80104a4:	f105 000e 	add.w	r0, r5, #14
 80104a8:	f001 fc22 	bl	8011cf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80104ac:	a804      	add	r0, sp, #16
 80104ae:	f001 f855 	bl	801155c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80104b2:	8a20      	ldrh	r0, [r4, #16]
 80104b4:	f001 f826 	bl	8011504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80104b8:	89a0      	ldrh	r0, [r4, #12]
 80104ba:	f001 f86f 	bl	801159c <SUBGRF_SetCrcPolynomial>
        break;
 80104be:	e0d8      	b.n	8010672 <RadioSetTxGenericConfig+0x2c2>
                return -1;
 80104c0:	f04f 30ff 	mov.w	r0, #4294967295
 80104c4:	e0df      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
        if( config->fsk.BitRate == 0 )
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f000 80e5 	beq.w	8010698 <RadioSetTxGenericConfig+0x2e8>
        if( config->fsk.SyncWordLength > 8 )
 80104ce:	7ca2      	ldrb	r2, [r4, #18]
 80104d0:	2a08      	cmp	r2, #8
 80104d2:	f200 80e4 	bhi.w	801069e <RadioSetTxGenericConfig+0x2ee>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80104d6:	68a1      	ldr	r1, [r4, #8]
 80104d8:	a804      	add	r0, sp, #16
 80104da:	f001 fe77 	bl	80121cc <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80104de:	4b73      	ldr	r3, [pc, #460]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80104e6:	6821      	ldr	r1, [r4, #0]
 80104e8:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80104ea:	7ce1      	ldrb	r1, [r4, #19]
 80104ec:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80104f0:	69a1      	ldr	r1, [r4, #24]
 80104f2:	6419      	str	r1, [r3, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80104f4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80104f6:	6861      	ldr	r1, [r4, #4]
 80104f8:	00c9      	lsls	r1, r1, #3
 80104fa:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80104fc:	2104      	movs	r1, #4
 80104fe:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8010500:	7ca1      	ldrb	r1, [r4, #18]
 8010502:	00c9      	lsls	r1, r1, #3
 8010504:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8010506:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8010508:	7da3      	ldrb	r3, [r4, #22]
 801050a:	2b02      	cmp	r3, #2
 801050c:	d00a      	beq.n	8010524 <RadioSetTxGenericConfig+0x174>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801050e:	7d23      	ldrb	r3, [r4, #20]
 8010510:	2b02      	cmp	r3, #2
 8010512:	d007      	beq.n	8010524 <RadioSetTxGenericConfig+0x174>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8010514:	7d62      	ldrb	r2, [r4, #21]
 8010516:	4b65      	ldr	r3, [pc, #404]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010518:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801051a:	7da2      	ldrb	r2, [r4, #22]
 801051c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801051e:	7d22      	ldrb	r2, [r4, #20]
 8010520:	755a      	strb	r2, [r3, #21]
 8010522:	e018      	b.n	8010556 <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8010524:	7d62      	ldrb	r2, [r4, #21]
 8010526:	f102 030f 	add.w	r3, r2, #15
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b01      	cmp	r3, #1
 801052e:	d901      	bls.n	8010534 <RadioSetTxGenericConfig+0x184>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8010530:	2a01      	cmp	r2, #1
 8010532:	d128      	bne.n	8010586 <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 8010534:	2301      	movs	r3, #1
 8010536:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 801053a:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801053c:	4a5c      	ldr	r2, [pc, #368]	; (80106b0 <RadioSetTxGenericConfig+0x300>)
 801053e:	4b5d      	ldr	r3, [pc, #372]	; (80106b4 <RadioSetTxGenericConfig+0x304>)
 8010540:	6819      	ldr	r1, [r3, #0]
 8010542:	a801      	add	r0, sp, #4
 8010544:	f001 fdd6 	bl	80120f4 <RFW_Init>
 8010548:	b9e8      	cbnz	r0, 8010586 <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801054a:	4b58      	ldr	r3, [pc, #352]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801054c:	2200      	movs	r2, #0
 801054e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8010550:	2101      	movs	r1, #1
 8010552:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8010554:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8010556:	f7ff fe43 	bl	80101e0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801055a:	2000      	movs	r0, #0
 801055c:	f7ff fee8 	bl	8010330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010560:	4d52      	ldr	r5, [pc, #328]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010562:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8010566:	f001 fb3b 	bl	8011be0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801056a:	f105 000e 	add.w	r0, r5, #14
 801056e:	f001 fbbf 	bl	8011cf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010572:	a804      	add	r0, sp, #16
 8010574:	f000 fff2 	bl	801155c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8010578:	8a20      	ldrh	r0, [r4, #16]
 801057a:	f000 ffc3 	bl	8011504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801057e:	89a0      	ldrh	r0, [r4, #12]
 8010580:	f001 f80c 	bl	801159c <SUBGRF_SetCrcPolynomial>
        break;
 8010584:	e075      	b.n	8010672 <RadioSetTxGenericConfig+0x2c2>
                return -1;
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	e07c      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801058c:	4b47      	ldr	r3, [pc, #284]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801058e:	2201      	movs	r2, #1
 8010590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8010594:	7822      	ldrb	r2, [r4, #0]
 8010596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801059a:	7862      	ldrb	r2, [r4, #1]
 801059c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80105a0:	78a2      	ldrb	r2, [r4, #2]
 80105a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80105a6:	78e3      	ldrb	r3, [r4, #3]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d033      	beq.n	8010614 <RadioSetTxGenericConfig+0x264>
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d036      	beq.n	801061e <RadioSetTxGenericConfig+0x26e>
 80105b0:	b35b      	cbz	r3, 801060a <RadioSetTxGenericConfig+0x25a>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80105b2:	4d3e      	ldr	r5, [pc, #248]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 80105b4:	f04f 0801 	mov.w	r8, #1
 80105b8:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80105bc:	88a3      	ldrh	r3, [r4, #4]
 80105be:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80105c0:	79a3      	ldrb	r3, [r4, #6]
 80105c2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80105c4:	79e3      	ldrb	r3, [r4, #7]
 80105c6:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80105ca:	7a23      	ldrb	r3, [r4, #8]
 80105cc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80105d0:	f7ff fe06 	bl	80101e0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80105d4:	4640      	mov	r0, r8
 80105d6:	f7ff feab 	bl	8010330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80105da:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80105de:	f001 faff 	bl	8011be0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80105e2:	f105 000e 	add.w	r0, r5, #14
 80105e6:	f001 fb83 	bl	8011cf0 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80105ea:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 80105ee:	2b06      	cmp	r3, #6
 80105f0:	d020      	beq.n	8010634 <RadioSetTxGenericConfig+0x284>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80105f2:	f640 0089 	movw	r0, #2185	; 0x889
 80105f6:	f000 ff61 	bl	80114bc <SUBGRF_ReadRegister>
 80105fa:	f040 0104 	orr.w	r1, r0, #4
 80105fe:	b2c9      	uxtb	r1, r1
 8010600:	f640 0089 	movw	r0, #2185	; 0x889
 8010604:	f000 ff4a 	bl	801149c <SUBGRF_WriteRegister>
 8010608:	e033      	b.n	8010672 <RadioSetTxGenericConfig+0x2c2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801060a:	4b28      	ldr	r3, [pc, #160]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801060c:	2200      	movs	r2, #0
 801060e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8010612:	e7ce      	b.n	80105b2 <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8010614:	4b25      	ldr	r3, [pc, #148]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801061c:	e7c9      	b.n	80105b2 <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801061e:	7823      	ldrb	r3, [r4, #0]
 8010620:	3b0b      	subs	r3, #11
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b01      	cmp	r3, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8010626:	4b21      	ldr	r3, [pc, #132]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 8010628:	bf94      	ite	ls
 801062a:	2201      	movls	r2, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801062c:	2200      	movhi	r2, #0
 801062e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010632:	e7be      	b.n	80105b2 <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010634:	f640 0089 	movw	r0, #2185	; 0x889
 8010638:	f000 ff40 	bl	80114bc <SUBGRF_ReadRegister>
 801063c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010640:	f640 0089 	movw	r0, #2185	; 0x889
 8010644:	f000 ff2a 	bl	801149c <SUBGRF_WriteRegister>
 8010648:	e013      	b.n	8010672 <RadioSetTxGenericConfig+0x2c2>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	3b01      	subs	r3, #1
 801064e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010652:	d227      	bcs.n	80106a4 <RadioSetTxGenericConfig+0x2f4>
        RadioSetModem( MODEM_BPSK );
 8010654:	2003      	movs	r0, #3
 8010656:	f7ff fe6b 	bl	8010330 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801065a:	4814      	ldr	r0, [pc, #80]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801065c:	2302      	movs	r3, #2
 801065e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8010666:	2316      	movs	r3, #22
 8010668:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801066c:	3038      	adds	r0, #56	; 0x38
 801066e:	f001 fab7 	bl	8011be0 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010672:	4638      	mov	r0, r7
 8010674:	f001 fc6b 	bl	8011f4e <SUBGRF_SetRfTxPower>
 8010678:	4c0c      	ldr	r4, [pc, #48]	; (80106ac <RadioSetTxGenericConfig+0x2fc>)
 801067a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801067e:	f001 fd41 	bl	8012104 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010682:	6066      	str	r6, [r4, #4]
    return 0;
 8010684:	2000      	movs	r0, #0
}
 8010686:	b006      	add	sp, #24
 8010688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 801068c:	f04f 30ff 	mov.w	r0, #4294967295
 8010690:	e7f9      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 8010692:	f04f 30ff 	mov.w	r0, #4294967295
 8010696:	e7f6      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 8010698:	f04f 30ff 	mov.w	r0, #4294967295
 801069c:	e7f3      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 801069e:	f04f 30ff 	mov.w	r0, #4294967295
 80106a2:	e7f0      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295
 80106a8:	e7ed      	b.n	8010686 <RadioSetTxGenericConfig+0x2d6>
 80106aa:	bf00      	nop
 80106ac:	200017cc 	.word	0x200017cc
 80106b0:	20001828 	.word	0x20001828
 80106b4:	200017b0 	.word	0x200017b0

080106b8 <RadioSetRxGenericConfig>:
{
 80106b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ba:	b087      	sub	sp, #28
 80106bc:	4607      	mov	r7, r0
 80106be:	460c      	mov	r4, r1
 80106c0:	4615      	mov	r5, r2
 80106c2:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80106c4:	2300      	movs	r3, #0
 80106c6:	9304      	str	r3, [sp, #16]
 80106c8:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80106ca:	f001 fd16 	bl	80120fa <RFW_DeInit>
        symbTimeout = 0;
 80106ce:	2d00      	cmp	r5, #0
 80106d0:	bf18      	it	ne
 80106d2:	2600      	movne	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80106d4:	3d00      	subs	r5, #0
 80106d6:	bf18      	it	ne
 80106d8:	2501      	movne	r5, #1
 80106da:	4b8d      	ldr	r3, [pc, #564]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80106dc:	705d      	strb	r5, [r3, #1]
    switch( modem )
 80106de:	b12f      	cbz	r7, 80106ec <RadioSetRxGenericConfig+0x34>
 80106e0:	2f01      	cmp	r7, #1
 80106e2:	f000 808a 	beq.w	80107fa <RadioSetRxGenericConfig+0x142>
 80106e6:	2000      	movs	r0, #0
}
 80106e8:	b007      	add	sp, #28
 80106ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80106ec:	68a3      	ldr	r3, [r4, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 8101 	beq.w	80108f6 <RadioSetRxGenericConfig+0x23e>
 80106f4:	68e3      	ldr	r3, [r4, #12]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 8100 	beq.w	80108fc <RadioSetRxGenericConfig+0x244>
        if( config->fsk.SyncWordLength > 8 )
 80106fc:	7fa2      	ldrb	r2, [r4, #30]
 80106fe:	2a08      	cmp	r2, #8
 8010700:	f200 80ff 	bhi.w	8010902 <RadioSetRxGenericConfig+0x24a>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8010704:	6921      	ldr	r1, [r4, #16]
 8010706:	a804      	add	r0, sp, #16
 8010708:	f001 fd60 	bl	80121cc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	3800      	subs	r0, #0
 8010710:	bf18      	it	ne
 8010712:	2001      	movne	r0, #1
 8010714:	f001 f896 	bl	8011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010718:	4d7d      	ldr	r5, [pc, #500]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 801071a:	2700      	movs	r7, #0
 801071c:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8010720:	68a3      	ldr	r3, [r4, #8]
 8010722:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8010724:	f894 3020 	ldrb.w	r3, [r4, #32]
 8010728:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801072c:	6860      	ldr	r0, [r4, #4]
 801072e:	f001 fc83 	bl	8012038 <SUBGRF_GetFskBandwidthRegValue>
 8010732:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010736:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8010738:	68e3      	ldr	r3, [r4, #12]
 801073a:	00db      	lsls	r3, r3, #3
 801073c:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801073e:	7fe3      	ldrb	r3, [r4, #31]
 8010740:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8010742:	7fa3      	ldrb	r3, [r4, #30]
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8010748:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801074c:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801074e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8010752:	b96b      	cbnz	r3, 8010770 <RadioSetRxGenericConfig+0xb8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8010754:	7d21      	ldrb	r1, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8010756:	4a6e      	ldr	r2, [pc, #440]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 8010758:	7591      	strb	r1, [r2, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801075a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801075e:	2a02      	cmp	r2, #2
 8010760:	d00d      	beq.n	801077e <RadioSetRxGenericConfig+0xc6>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8010762:	496b      	ldr	r1, [pc, #428]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 8010764:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8010768:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801076a:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801076c:	754b      	strb	r3, [r1, #21]
 801076e:	e020      	b.n	80107b2 <RadioSetRxGenericConfig+0xfa>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8010770:	2b02      	cmp	r3, #2
 8010772:	d001      	beq.n	8010778 <RadioSetRxGenericConfig+0xc0>
 8010774:	21ff      	movs	r1, #255	; 0xff
 8010776:	e7ee      	b.n	8010756 <RadioSetRxGenericConfig+0x9e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8010778:	4b65      	ldr	r3, [pc, #404]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 801077a:	22ff      	movs	r2, #255	; 0xff
 801077c:	759a      	strb	r2, [r3, #22]
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801077e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8010782:	f102 030f 	add.w	r3, r2, #15
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2b01      	cmp	r3, #1
 801078a:	d901      	bls.n	8010790 <RadioSetRxGenericConfig+0xd8>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801078c:	2a01      	cmp	r2, #1
 801078e:	d131      	bne.n	80107f4 <RadioSetRxGenericConfig+0x13c>
            ConfigGeneric.rtx = CONFIG_RX;
 8010790:	2300      	movs	r3, #0
 8010792:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8010796:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8010798:	4a5e      	ldr	r2, [pc, #376]	; (8010914 <RadioSetRxGenericConfig+0x25c>)
 801079a:	4b5f      	ldr	r3, [pc, #380]	; (8010918 <RadioSetRxGenericConfig+0x260>)
 801079c:	6819      	ldr	r1, [r3, #0]
 801079e:	a801      	add	r0, sp, #4
 80107a0:	f001 fca8 	bl	80120f4 <RFW_Init>
 80107a4:	bb30      	cbnz	r0, 80107f4 <RadioSetRxGenericConfig+0x13c>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80107a6:	4b5a      	ldr	r3, [pc, #360]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80107ac:	2101      	movs	r1, #1
 80107ae:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80107b0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80107b2:	f7ff fd15 	bl	80101e0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80107b6:	2000      	movs	r0, #0
 80107b8:	f7ff fdba 	bl	8010330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80107bc:	4d54      	ldr	r5, [pc, #336]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80107be:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80107c2:	f001 fa0d 	bl	8011be0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80107c6:	f105 000e 	add.w	r0, r5, #14
 80107ca:	f001 fa91 	bl	8011cf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80107ce:	a804      	add	r0, sp, #16
 80107d0:	f000 fec4 	bl	801155c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80107d4:	8ba0      	ldrh	r0, [r4, #28]
 80107d6:	f000 fe95 	bl	8011504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80107da:	8b20      	ldrh	r0, [r4, #24]
 80107dc:	f000 fede 	bl	801159c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80107e0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80107e4:	fb06 f303 	mul.w	r3, r6, r3
 80107e8:	68a2      	ldr	r2, [r4, #8]
 80107ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80107ee:	60ab      	str	r3, [r5, #8]
    return status;
 80107f0:	2000      	movs	r0, #0
        break;
 80107f2:	e779      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
                return -1;
 80107f4:	f04f 30ff 	mov.w	r0, #4294967295
 80107f8:	e776      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 80107fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 8083 	beq.w	8010908 <RadioSetRxGenericConfig+0x250>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8010802:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8010806:	2b01      	cmp	r3, #1
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8010808:	bf0c      	ite	eq
 801080a:	7d27      	ldrbeq	r7, [r4, #20]
            MaxPayloadLength = 0xFF;
 801080c:	27ff      	movne	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801080e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010810:	3800      	subs	r0, #0
 8010812:	bf18      	it	ne
 8010814:	2001      	movne	r0, #1
 8010816:	f001 f815 	bl	8011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801081a:	b2f0      	uxtb	r0, r6
 801081c:	f001 f81f 	bl	801185e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010820:	4b3b      	ldr	r3, [pc, #236]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 8010822:	2201      	movs	r2, #1
 8010824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8010828:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801082c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8010830:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8010838:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 801083c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8010840:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010844:	2b01      	cmp	r3, #1
 8010846:	d03a      	beq.n	80108be <RadioSetRxGenericConfig+0x206>
 8010848:	2b02      	cmp	r3, #2
 801084a:	d03d      	beq.n	80108c8 <RadioSetRxGenericConfig+0x210>
 801084c:	b393      	cbz	r3, 80108b4 <RadioSetRxGenericConfig+0x1fc>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801084e:	4d30      	ldr	r5, [pc, #192]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 8010850:	2601      	movs	r6, #1
 8010852:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8010854:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010856:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8010858:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 801085c:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801085e:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8010860:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8010864:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8010868:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801086c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8010870:	f7ff fcb6 	bl	80101e0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8010874:	4630      	mov	r0, r6
 8010876:	f7ff fd5b 	bl	8010330 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801087a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801087e:	f001 f9af 	bl	8011be0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010882:	f105 000e 	add.w	r0, r5, #14
 8010886:	f001 fa33 	bl	8011cf0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801088a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801088e:	42b3      	cmp	r3, r6
 8010890:	d026      	beq.n	80108e0 <RadioSetRxGenericConfig+0x228>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010892:	f240 7036 	movw	r0, #1846	; 0x736
 8010896:	f000 fe11 	bl	80114bc <SUBGRF_ReadRegister>
 801089a:	f040 0104 	orr.w	r1, r0, #4
 801089e:	b2c9      	uxtb	r1, r1
 80108a0:	f240 7036 	movw	r0, #1846	; 0x736
 80108a4:	f000 fdfa 	bl	801149c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80108a8:	4b19      	ldr	r3, [pc, #100]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80108aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108ae:	609a      	str	r2, [r3, #8]
    return status;
 80108b0:	2000      	movs	r0, #0
        break;
 80108b2:	e719      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80108b4:	4b16      	ldr	r3, [pc, #88]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80108bc:	e7c7      	b.n	801084e <RadioSetRxGenericConfig+0x196>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80108be:	4b14      	ldr	r3, [pc, #80]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80108c6:	e7c2      	b.n	801084e <RadioSetRxGenericConfig+0x196>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80108c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80108cc:	3b0b      	subs	r3, #11
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	2b01      	cmp	r3, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80108d2:	4b0f      	ldr	r3, [pc, #60]	; (8010910 <RadioSetRxGenericConfig+0x258>)
 80108d4:	bf94      	ite	ls
 80108d6:	2201      	movls	r2, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80108d8:	2200      	movhi	r2, #0
 80108da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80108de:	e7b6      	b.n	801084e <RadioSetRxGenericConfig+0x196>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80108e0:	f240 7036 	movw	r0, #1846	; 0x736
 80108e4:	f000 fdea 	bl	80114bc <SUBGRF_ReadRegister>
 80108e8:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80108ec:	f240 7036 	movw	r0, #1846	; 0x736
 80108f0:	f000 fdd4 	bl	801149c <SUBGRF_WriteRegister>
 80108f4:	e7d8      	b.n	80108a8 <RadioSetRxGenericConfig+0x1f0>
            return -1;
 80108f6:	f04f 30ff 	mov.w	r0, #4294967295
 80108fa:	e6f5      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	e6f2      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8010902:	f04f 30ff 	mov.w	r0, #4294967295
 8010906:	e6ef      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8010908:	f04f 30ff 	mov.w	r0, #4294967295
 801090c:	e6ec      	b.n	80106e8 <RadioSetRxGenericConfig+0x30>
 801090e:	bf00      	nop
 8010910:	200017cc 	.word	0x200017cc
 8010914:	200017b4 	.word	0x200017b4
 8010918:	200017b0 	.word	0x200017b0

0801091c <RadioSetPublicNetwork>:
{
 801091c:	b510      	push	{r4, lr}
 801091e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010920:	4b0e      	ldr	r3, [pc, #56]	; (801095c <RadioSetPublicNetwork+0x40>)
 8010922:	7318      	strb	r0, [r3, #12]
 8010924:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8010926:	2001      	movs	r0, #1
 8010928:	f7ff fd02 	bl	8010330 <RadioSetModem>
    if( enable == true )
 801092c:	b154      	cbz	r4, 8010944 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801092e:	2134      	movs	r1, #52	; 0x34
 8010930:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010934:	f000 fdb2 	bl	801149c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010938:	2144      	movs	r1, #68	; 0x44
 801093a:	f240 7041 	movw	r0, #1857	; 0x741
 801093e:	f000 fdad 	bl	801149c <SUBGRF_WriteRegister>
}
 8010942:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010944:	2114      	movs	r1, #20
 8010946:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801094a:	f000 fda7 	bl	801149c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801094e:	2124      	movs	r1, #36	; 0x24
 8010950:	f240 7041 	movw	r0, #1857	; 0x741
 8010954:	f000 fda2 	bl	801149c <SUBGRF_WriteRegister>
}
 8010958:	e7f3      	b.n	8010942 <RadioSetPublicNetwork+0x26>
 801095a:	bf00      	nop
 801095c:	200017cc 	.word	0x200017cc

08010960 <RadioSetTxConfig>:
{
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	b083      	sub	sp, #12
 8010966:	4604      	mov	r4, r0
 8010968:	460d      	mov	r5, r1
 801096a:	4616      	mov	r6, r2
 801096c:	469a      	mov	sl, r3
 801096e:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8010972:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8010976:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    RFW_DeInit();
 801097a:	f001 fbbe 	bl	80120fa <RFW_DeInit>
    switch( modem )
 801097e:	2c01      	cmp	r4, #1
 8010980:	d057      	beq.n	8010a32 <RadioSetTxConfig+0xd2>
 8010982:	2c04      	cmp	r4, #4
 8010984:	f000 80a1 	beq.w	8010aca <RadioSetTxConfig+0x16a>
 8010988:	b19c      	cbz	r4, 80109b2 <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801098a:	4628      	mov	r0, r5
 801098c:	f001 fadf 	bl	8011f4e <SUBGRF_SetRfTxPower>
 8010990:	4c59      	ldr	r4, [pc, #356]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010992:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010996:	210e      	movs	r1, #14
 8010998:	f640 101f 	movw	r0, #2335	; 0x91f
 801099c:	f000 fd7e 	bl	801149c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80109a0:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80109a4:	f001 fbae 	bl	8012104 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80109a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109aa:	6063      	str	r3, [r4, #4]
}
 80109ac:	b003      	add	sp, #12
 80109ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80109b2:	4c51      	ldr	r4, [pc, #324]	; (8010af8 <RadioSetTxConfig+0x198>)
 80109b4:	f04f 0b00 	mov.w	fp, #0
 80109b8:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80109bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109be:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80109c0:	230b      	movs	r3, #11
 80109c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80109c6:	4650      	mov	r0, sl
 80109c8:	f001 fb36 	bl	8012038 <SUBGRF_GetFskBandwidthRegValue>
 80109cc:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80109d0:	6426      	str	r6, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80109d2:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80109d6:	00ff      	lsls	r7, r7, #3
 80109d8:	8227      	strh	r7, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80109da:	2304      	movs	r3, #4
 80109dc:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80109de:	2318      	movs	r3, #24
 80109e0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80109e2:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80109e6:	f088 0801 	eor.w	r8, r8, #1
 80109ea:	f884 8015 	strb.w	r8, [r4, #21]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80109ee:	45d9      	cmp	r9, fp
 80109f0:	bf14      	ite	ne
 80109f2:	23f2      	movne	r3, #242	; 0xf2
 80109f4:	2301      	moveq	r3, #1
 80109f6:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80109f8:	2301      	movs	r3, #1
 80109fa:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80109fc:	f7ff fbf0 	bl	80101e0 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8010a00:	4658      	mov	r0, fp
 8010a02:	f7ff fc95 	bl	8010330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010a06:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010a0a:	f001 f8e9 	bl	8011be0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010a0e:	f104 000e 	add.w	r0, r4, #14
 8010a12:	f001 f96d 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010a16:	4a39      	ldr	r2, [pc, #228]	; (8010afc <RadioSetTxConfig+0x19c>)
 8010a18:	466b      	mov	r3, sp
 8010a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 fd9a 	bl	801155c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010a28:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010a2c:	f000 fd6a 	bl	8011504 <SUBGRF_SetWhiteningSeed>
            break;
 8010a30:	e7ab      	b.n	801098a <RadioSetTxConfig+0x2a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010a32:	4a31      	ldr	r2, [pc, #196]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010a34:	2301      	movs	r3, #1
 8010a36:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010a42:	492f      	ldr	r1, [pc, #188]	; (8010b00 <RadioSetTxConfig+0x1a0>)
 8010a44:	f811 100a 	ldrb.w	r1, [r1, sl]
 8010a48:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010a4c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8010a50:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010a54:	f1ba 0f00 	cmp.w	sl, #0
 8010a58:	d129      	bne.n	8010aae <RadioSetTxConfig+0x14e>
 8010a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a5c:	3a0b      	subs	r2, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010a5e:	2a01      	cmp	r2, #1
 8010a60:	bf8c      	ite	hi
 8010a62:	2200      	movhi	r2, #0
 8010a64:	2201      	movls	r2, #1
 8010a66:	4924      	ldr	r1, [pc, #144]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010a68:	f881 2053 	strb.w	r2, [r1, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	738a      	strb	r2, [r1, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010a70:	3b05      	subs	r3, #5
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d924      	bls.n	8010ac2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010a78:	4c1f      	ldr	r4, [pc, #124]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010a7a:	83a7      	strh	r7, [r4, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010a7c:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010a80:	4b20      	ldr	r3, [pc, #128]	; (8010b04 <RadioSetTxConfig+0x1a4>)
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010a86:	f884 9020 	strb.w	r9, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010a8a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010a8e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010a92:	f7ff fba5 	bl	80101e0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010a96:	2001      	movs	r0, #1
 8010a98:	f7ff fc4a 	bl	8010330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010a9c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010aa0:	f001 f89e 	bl	8011be0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010aa4:	f104 000e 	add.w	r0, r4, #14
 8010aa8:	f001 f922 	bl	8011cf0 <SUBGRF_SetPacketParams>
            break;
 8010aac:	e76d      	b.n	801098a <RadioSetTxConfig+0x2a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010aae:	f1ba 0f01 	cmp.w	sl, #1
 8010ab2:	d104      	bne.n	8010abe <RadioSetTxConfig+0x15e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ab6:	2a0c      	cmp	r2, #12
 8010ab8:	d017      	beq.n	8010aea <RadioSetTxConfig+0x18a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010aba:	2200      	movs	r2, #0
 8010abc:	e7d3      	b.n	8010a66 <RadioSetTxConfig+0x106>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	e7d1      	b.n	8010a66 <RadioSetTxConfig+0x106>
                if( preambleLen < 12 )
 8010ac2:	2f0c      	cmp	r7, #12
 8010ac4:	bf38      	it	cc
 8010ac6:	270c      	movcc	r7, #12
 8010ac8:	e7d6      	b.n	8010a78 <RadioSetTxConfig+0x118>
            RadioSetModem(MODEM_SIGFOX_TX);
 8010aca:	2004      	movs	r0, #4
 8010acc:	f7ff fc30 	bl	8010330 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8010ad0:	4809      	ldr	r0, [pc, #36]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010ad2:	2302      	movs	r3, #2
 8010ad4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8010ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ada:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8010adc:	2316      	movs	r3, #22
 8010ade:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010ae2:	3038      	adds	r0, #56	; 0x38
 8010ae4:	f001 f87c 	bl	8011be0 <SUBGRF_SetModulationParams>
            break;
 8010ae8:	e74f      	b.n	801098a <RadioSetTxConfig+0x2a>
 8010aea:	4b03      	ldr	r3, [pc, #12]	; (8010af8 <RadioSetTxConfig+0x198>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010af2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010af4:	e7c0      	b.n	8010a78 <RadioSetTxConfig+0x118>
 8010af6:	bf00      	nop
 8010af8:	200017cc 	.word	0x200017cc
 8010afc:	08013158 	.word	0x08013158
 8010b00:	08013dcc 	.word	0x08013dcc
 8010b04:	20000114 	.word	0x20000114

08010b08 <RadioInit>:
{
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	b082      	sub	sp, #8
    RadioEvents = events;
 8010b0c:	4b1d      	ldr	r3, [pc, #116]	; (8010b84 <RadioInit+0x7c>)
 8010b0e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010b10:	4d1d      	ldr	r5, [pc, #116]	; (8010b88 <RadioInit+0x80>)
 8010b12:	2400      	movs	r4, #0
 8010b14:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8010b16:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8010b18:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010b1a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010b1c:	481b      	ldr	r0, [pc, #108]	; (8010b8c <RadioInit+0x84>)
 8010b1e:	f000 ff5d 	bl	80119dc <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010b22:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010b24:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8010b26:	f000 feb3 	bl	8011890 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f001 f951 	bl	8011dd4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010b32:	2204      	movs	r2, #4
 8010b34:	4621      	mov	r1, r4
 8010b36:	2001      	movs	r0, #1
 8010b38:	f000 ffcc 	bl	8011ad4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010b3c:	4623      	mov	r3, r4
 8010b3e:	4622      	mov	r2, r4
 8010b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010b44:	4608      	mov	r0, r1
 8010b46:	f000 ff12 	bl	801196e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8010b4a:	f7ff fbdd 	bl	8010308 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010b4e:	4e10      	ldr	r6, [pc, #64]	; (8010b90 <RadioInit+0x88>)
 8010b50:	9400      	str	r4, [sp, #0]
 8010b52:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <RadioInit+0x8c>)
 8010b54:	4622      	mov	r2, r4
 8010b56:	f04f 31ff 	mov.w	r1, #4294967295
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	f001 fed4 	bl	8012908 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010b60:	4d0d      	ldr	r5, [pc, #52]	; (8010b98 <RadioInit+0x90>)
 8010b62:	9400      	str	r4, [sp, #0]
 8010b64:	4b0d      	ldr	r3, [pc, #52]	; (8010b9c <RadioInit+0x94>)
 8010b66:	4622      	mov	r2, r4
 8010b68:	f04f 31ff 	mov.w	r1, #4294967295
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f001 fecb 	bl	8012908 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010b72:	4630      	mov	r0, r6
 8010b74:	f001 ff2c 	bl	80129d0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f001 ff29 	bl	80129d0 <UTIL_TIMER_Stop>
}
 8010b7e:	b002      	add	sp, #8
 8010b80:	bd70      	pop	{r4, r5, r6, pc}
 8010b82:	bf00      	nop
 8010b84:	200017b0 	.word	0x200017b0
 8010b88:	200017cc 	.word	0x200017cc
 8010b8c:	080113d5 	.word	0x080113d5
 8010b90:	20001828 	.word	0x20001828
 8010b94:	080100b1 	.word	0x080100b1
 8010b98:	200017b4 	.word	0x200017b4
 8010b9c:	080100c5 	.word	0x080100c5

08010ba0 <RadioSetRxConfig>:
{
 8010ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba4:	b087      	sub	sp, #28
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	9100      	str	r1, [sp, #0]
 8010baa:	4615      	mov	r5, r2
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8010bb2:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8010bb6:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
 8010bba:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 8010bbe:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8010bc2:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8010bc6:	4bab      	ldr	r3, [pc, #684]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010bc8:	f883 9001 	strb.w	r9, [r3, #1]
    RFW_DeInit();
 8010bcc:	f001 fa95 	bl	80120fa <RFW_DeInit>
        symbTimeout = 0;
 8010bd0:	f1b9 0f00 	cmp.w	r9, #0
 8010bd4:	bf18      	it	ne
 8010bd6:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 8010bd8:	f1b8 0f00 	cmp.w	r8, #0
 8010bdc:	bf08      	it	eq
 8010bde:	26ff      	moveq	r6, #255	; 0xff
 8010be0:	4ba5      	ldr	r3, [pc, #660]	; (8010e78 <RadioSetRxConfig+0x2d8>)
 8010be2:	701e      	strb	r6, [r3, #0]
    switch( modem )
 8010be4:	2c01      	cmp	r4, #1
 8010be6:	f000 80c6 	beq.w	8010d76 <RadioSetRxConfig+0x1d6>
 8010bea:	2c05      	cmp	r4, #5
 8010bec:	d004      	beq.n	8010bf8 <RadioSetRxConfig+0x58>
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	d077      	beq.n	8010ce2 <RadioSetRxConfig+0x142>
}
 8010bf2:	b007      	add	sp, #28
 8010bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	f000 fe23 	bl	8011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010bfe:	4c9d      	ldr	r4, [pc, #628]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010c00:	2600      	movs	r6, #0
 8010c02:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010c06:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8010c08:	2309      	movs	r3, #9
 8010c0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8010c0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010c12:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010c14:	9800      	ldr	r0, [sp, #0]
 8010c16:	f001 fa0f 	bl	8012038 <SUBGRF_GetFskBandwidthRegValue>
 8010c1a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010c1e:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010c20:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8010c24:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8010c28:	74a6      	strb	r6, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8010c2a:	2310      	movs	r3, #16
 8010c2c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010c2e:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8010c30:	7566      	strb	r6, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010c32:	4b91      	ldr	r3, [pc, #580]	; (8010e78 <RadioSetRxConfig+0x2d8>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8010c3c:	7626      	strb	r6, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8010c3e:	2005      	movs	r0, #5
 8010c40:	f7ff fb76 	bl	8010330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010c44:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010c48:	f000 ffca 	bl	8011be0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c4c:	f104 000e 	add.w	r0, r4, #14
 8010c50:	f001 f84e 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010c54:	ab02      	add	r3, sp, #8
 8010c56:	4a89      	ldr	r2, [pc, #548]	; (8010e7c <RadioSetRxConfig+0x2dc>)
 8010c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 fc7b 	bl	801155c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010c66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010c6a:	f000 fc4b 	bl	8011504 <SUBGRF_SetWhiteningSeed>
    return SUBGRF_ReadRegister( addr );
 8010c6e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8010c72:	f000 fc23 	bl	80114bc <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( addr, data );
 8010c76:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8010c7a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8010c7e:	f000 fc0d 	bl	801149c <SUBGRF_WriteRegister>
 8010c82:	2104      	movs	r1, #4
 8010c84:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8010c88:	f000 fc08 	bl	801149c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8010c8c:	f640 009b 	movw	r0, #2203	; 0x89b
 8010c90:	f000 fc14 	bl	80114bc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8010c94:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
    SUBGRF_WriteRegister( addr, data );
 8010c98:	f041 0108 	orr.w	r1, r1, #8
 8010c9c:	f640 009b 	movw	r0, #2203	; 0x89b
 8010ca0:	f000 fbfc 	bl	801149c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8010ca4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8010ca8:	f000 fc08 	bl	80114bc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8010cac:	f040 0118 	orr.w	r1, r0, #24
    SUBGRF_WriteRegister( addr, data );
 8010cb0:	b2c9      	uxtb	r1, r1
 8010cb2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8010cb6:	f000 fbf1 	bl	801149c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8010cba:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010cbe:	f000 fbfd 	bl	80114bc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8010cc2:	f000 018f 	and.w	r1, r0, #143	; 0x8f
    SUBGRF_WriteRegister( addr, data );
 8010cc6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8010cca:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010cce:	f000 fbe5 	bl	801149c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010cd2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010cd6:	fb07 f303 	mul.w	r3, r7, r3
 8010cda:	fbb3 f3f5 	udiv	r3, r3, r5
 8010cde:	60a3      	str	r3, [r4, #8]
            break;
 8010ce0:	e787      	b.n	8010bf2 <RadioSetRxConfig+0x52>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	f000 fdae 	bl	8011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010ce8:	4c62      	ldr	r4, [pc, #392]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010cea:	2600      	movs	r6, #0
 8010cec:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010cf0:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010cf2:	230b      	movs	r3, #11
 8010cf4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010cf8:	9800      	ldr	r0, [sp, #0]
 8010cfa:	f001 f99d 	bl	8012038 <SUBGRF_GetFskBandwidthRegValue>
 8010cfe:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010d02:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010d04:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8010d08:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010d0c:	2304      	movs	r3, #4
 8010d0e:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010d10:	2318      	movs	r3, #24
 8010d12:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010d14:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010d16:	f088 0801 	eor.w	r8, r8, #1
 8010d1a:	f884 8015 	strb.w	r8, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010d1e:	4b56      	ldr	r3, [pc, #344]	; (8010e78 <RadioSetRxConfig+0x2d8>)
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	75a3      	strb	r3, [r4, #22]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010d24:	45b3      	cmp	fp, r6
 8010d26:	bf14      	ite	ne
 8010d28:	23f2      	movne	r3, #242	; 0xf2
 8010d2a:	2301      	moveq	r3, #1
 8010d2c:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010d32:	f7ff fa55 	bl	80101e0 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7ff fafa 	bl	8010330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010d3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010d40:	f000 ff4e 	bl	8011be0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010d44:	f104 000e 	add.w	r0, r4, #14
 8010d48:	f000 ffd2 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010d4c:	4a4c      	ldr	r2, [pc, #304]	; (8010e80 <RadioSetRxConfig+0x2e0>)
 8010d4e:	ab04      	add	r3, sp, #16
 8010d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d54:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f000 fbff 	bl	801155c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010d62:	f000 fbcf 	bl	8011504 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010d66:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010d6a:	fb07 f303 	mul.w	r3, r7, r3
 8010d6e:	fbb3 f3f5 	udiv	r3, r3, r5
 8010d72:	60a3      	str	r3, [r4, #8]
            break;
 8010d74:	e73d      	b.n	8010bf2 <RadioSetRxConfig+0x52>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010d76:	2000      	movs	r0, #0
 8010d78:	f000 fd64 	bl	8011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010d7c:	4a3d      	ldr	r2, [pc, #244]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010d7e:	2301      	movs	r3, #1
 8010d80:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010d84:	b2eb      	uxtb	r3, r5
 8010d86:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010d8a:	493e      	ldr	r1, [pc, #248]	; (8010e84 <RadioSetRxConfig+0x2e4>)
 8010d8c:	9800      	ldr	r0, [sp, #0]
 8010d8e:	5c09      	ldrb	r1, [r1, r0]
 8010d90:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8010d94:	9901      	ldr	r1, [sp, #4]
 8010d96:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d14a      	bne.n	8010e34 <RadioSetRxConfig+0x294>
 8010d9e:	f1a5 020b 	sub.w	r2, r5, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010da2:	2a01      	cmp	r2, #1
 8010da4:	bf8c      	ite	hi
 8010da6:	2200      	movhi	r2, #0
 8010da8:	2201      	movls	r2, #1
 8010daa:	4932      	ldr	r1, [pc, #200]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010dac:	f881 2053 	strb.w	r2, [r1, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010db0:	2201      	movs	r2, #1
 8010db2:	738a      	strb	r2, [r1, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010db4:	3b05      	subs	r3, #5
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d944      	bls.n	8010e46 <RadioSetRxConfig+0x2a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010dbc:	4c2d      	ldr	r4, [pc, #180]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010dbe:	f8a4 a01c 	strh.w	sl, [r4, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010dc2:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010dc6:	4b2c      	ldr	r3, [pc, #176]	; (8010e78 <RadioSetRxConfig+0x2d8>)
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010dcc:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010dd0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8010dd4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010dd8:	f7ff fa02 	bl	80101e0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010ddc:	2001      	movs	r0, #1
 8010dde:	f7ff faa7 	bl	8010330 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010de2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010de6:	f000 fefb 	bl	8011be0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010dea:	f104 000e 	add.w	r0, r4, #14
 8010dee:	f000 ff7f 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010df2:	b2f8      	uxtb	r0, r7
 8010df4:	f000 fd33 	bl	801185e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8010df8:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8010dfc:	f000 fb5e 	bl	80114bc <SUBGRF_ReadRegister>
 8010e00:	f000 0101 	and.w	r1, r0, #1
 8010e04:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8010e08:	f000 fb48 	bl	801149c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010e0c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d01e      	beq.n	8010e52 <RadioSetRxConfig+0x2b2>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010e14:	f240 7036 	movw	r0, #1846	; 0x736
 8010e18:	f000 fb50 	bl	80114bc <SUBGRF_ReadRegister>
 8010e1c:	f040 0104 	orr.w	r1, r0, #4
 8010e20:	b2c9      	uxtb	r1, r1
 8010e22:	f240 7036 	movw	r0, #1846	; 0x736
 8010e26:	f000 fb39 	bl	801149c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e30:	609a      	str	r2, [r3, #8]
}
 8010e32:	e6de      	b.n	8010bf2 <RadioSetRxConfig+0x52>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010e34:	9a00      	ldr	r2, [sp, #0]
 8010e36:	2a01      	cmp	r2, #1
 8010e38:	d103      	bne.n	8010e42 <RadioSetRxConfig+0x2a2>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010e3a:	2d0c      	cmp	r5, #12
 8010e3c:	d014      	beq.n	8010e68 <RadioSetRxConfig+0x2c8>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010e3e:	2200      	movs	r2, #0
 8010e40:	e7b3      	b.n	8010daa <RadioSetRxConfig+0x20a>
 8010e42:	2200      	movs	r2, #0
 8010e44:	e7b1      	b.n	8010daa <RadioSetRxConfig+0x20a>
                if( preambleLen < 12 )
 8010e46:	f1ba 0f0c 	cmp.w	sl, #12
 8010e4a:	bf38      	it	cc
 8010e4c:	f04f 0a0c 	movcc.w	sl, #12
 8010e50:	e7b4      	b.n	8010dbc <RadioSetRxConfig+0x21c>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010e52:	f240 7036 	movw	r0, #1846	; 0x736
 8010e56:	f000 fb31 	bl	80114bc <SUBGRF_ReadRegister>
 8010e5a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010e5e:	f240 7036 	movw	r0, #1846	; 0x736
 8010e62:	f000 fb1b 	bl	801149c <SUBGRF_WriteRegister>
 8010e66:	e7e0      	b.n	8010e2a <RadioSetRxConfig+0x28a>
 8010e68:	4b02      	ldr	r3, [pc, #8]	; (8010e74 <RadioSetRxConfig+0x2d4>)
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010e70:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010e72:	e7a3      	b.n	8010dbc <RadioSetRxConfig+0x21c>
 8010e74:	200017cc 	.word	0x200017cc
 8010e78:	20000114 	.word	0x20000114
 8010e7c:	08013160 	.word	0x08013160
 8010e80:	08013158 	.word	0x08013158
 8010e84:	08013dcc 	.word	0x08013dcc

08010e88 <RadioSend>:
{
 8010e88:	b570      	push	{r4, r5, r6, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	4605      	mov	r5, r0
 8010e8e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8010e90:	2300      	movs	r3, #0
 8010e92:	461a      	mov	r2, r3
 8010e94:	f240 2101 	movw	r1, #513	; 0x201
 8010e98:	4608      	mov	r0, r1
 8010e9a:	f000 fd68 	bl	801196e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010e9e:	4e82      	ldr	r6, [pc, #520]	; (80110a8 <RadioSend+0x220>)
 8010ea0:	2101      	movs	r1, #1
 8010ea2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010ea6:	f001 f83d 	bl	8011f24 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8010eaa:	7833      	ldrb	r3, [r6, #0]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d103      	bne.n	8010eb8 <RadioSend+0x30>
 8010eb0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8010eb4:	2b06      	cmp	r3, #6
 8010eb6:	d014      	beq.n	8010ee2 <RadioSend+0x5a>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010eb8:	f640 0089 	movw	r0, #2185	; 0x889
 8010ebc:	f000 fafe 	bl	80114bc <SUBGRF_ReadRegister>
 8010ec0:	f040 0104 	orr.w	r1, r0, #4
 8010ec4:	b2c9      	uxtb	r1, r1
 8010ec6:	f640 0089 	movw	r0, #2185	; 0x889
 8010eca:	f000 fae7 	bl	801149c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8010ece:	4b76      	ldr	r3, [pc, #472]	; (80110a8 <RadioSend+0x220>)
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	2b04      	cmp	r3, #4
 8010ed4:	f200 809a 	bhi.w	801100c <RadioSend+0x184>
 8010ed8:	e8df f003 	tbb	[pc, r3]
 8010edc:	d0a48ea4 	.word	0xd0a48ea4
 8010ee0:	0e          	.byte	0x0e
 8010ee1:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010ee2:	f640 0089 	movw	r0, #2185	; 0x889
 8010ee6:	f000 fae9 	bl	80114bc <SUBGRF_ReadRegister>
 8010eea:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010eee:	f640 0089 	movw	r0, #2185	; 0x889
 8010ef2:	f000 fad3 	bl	801149c <SUBGRF_WriteRegister>
 8010ef6:	e7ea      	b.n	8010ece <RadioSend+0x46>
    uint8_t prevInt = 0;
 8010ef8:	2100      	movs	r1, #0
    for( i = 0; i < size; i++ )
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	d043      	beq.n	8010f86 <RadioSend+0xfe>
 8010efe:	462b      	mov	r3, r5
 8010f00:	496a      	ldr	r1, [pc, #424]	; (80110ac <RadioSend+0x224>)
 8010f02:	1966      	adds	r6, r4, r5
        outBuffer[i] = 0;
 8010f04:	2000      	movs	r0, #0
        inBuffer[i] = ~inBuffer[i];
 8010f06:	781a      	ldrb	r2, [r3, #0]
 8010f08:	43d2      	mvns	r2, r2
 8010f0a:	f803 2b01 	strb.w	r2, [r3], #1
        outBuffer[i] = 0;
 8010f0e:	f801 0b01 	strb.w	r0, [r1], #1
    for( i = 0; i < size; i++ )
 8010f12:	42b3      	cmp	r3, r6
 8010f14:	d1f7      	bne.n	8010f06 <RadioSend+0x7e>
    for( i = 0; i < ( size * 8 ); i++ )
 8010f16:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	460b      	mov	r3, r1
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8010f1e:	4863      	ldr	r0, [pc, #396]	; (80110ac <RadioSend+0x224>)
        index_bit = 7 - ( i % 8 );
 8010f20:	425e      	negs	r6, r3
 8010f22:	f003 0207 	and.w	r2, r3, #7
 8010f26:	f006 0607 	and.w	r6, r6, #7
 8010f2a:	bf58      	it	pl
 8010f2c:	4272      	negpl	r2, r6
 8010f2e:	f1c2 0207 	rsb	r2, r2, #7
 8010f32:	b2d2      	uxtb	r2, r2
        index_byte = i / 8;
 8010f34:	469e      	mov	lr, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bfb8      	it	lt
 8010f3a:	f103 0e07 	addlt.w	lr, r3, #7
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8010f3e:	3301      	adds	r3, #1
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8010f40:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8010f44:	f815 e00e 	ldrb.w	lr, [r5, lr]
 8010f48:	fa4e f202 	asr.w	r2, lr, r2
 8010f4c:	f002 0201 	and.w	r2, r2, #1
        prevInt ^= currBit;
 8010f50:	4051      	eors	r1, r2
        index_byte_out = ( i + 1 ) / 8;
 8010f52:	469e      	mov	lr, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	bfb8      	it	lt
 8010f58:	f103 0e07 	addlt.w	lr, r3, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8010f5c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8010f60:	425e      	negs	r6, r3
 8010f62:	f003 0207 	and.w	r2, r3, #7
 8010f66:	f006 0607 	and.w	r6, r6, #7
 8010f6a:	bf58      	it	pl
 8010f6c:	4272      	negpl	r2, r6
 8010f6e:	f1c2 0207 	rsb	r2, r2, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8010f72:	b2d2      	uxtb	r2, r2
 8010f74:	fa01 f202 	lsl.w	r2, r1, r2
 8010f78:	f810 600e 	ldrb.w	r6, [r0, lr]
 8010f7c:	4332      	orrs	r2, r6
 8010f7e:	f800 200e 	strb.w	r2, [r0, lr]
    for( i = 0; i < ( size * 8 ); i++ )
 8010f82:	459c      	cmp	ip, r3
 8010f84:	dccc      	bgt.n	8010f20 <RadioSend+0x98>
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8010f86:	018b      	lsls	r3, r1, #6
 8010f88:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8010f8c:	fab1 f181 	clz	r1, r1
 8010f90:	0949      	lsrs	r1, r1, #5
 8010f92:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8010f96:	4a45      	ldr	r2, [pc, #276]	; (80110ac <RadioSend+0x224>)
 8010f98:	5513      	strb	r3, [r2, r4]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8010f9a:	4e43      	ldr	r6, [pc, #268]	; (80110a8 <RadioSend+0x220>)
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8010fa0:	1c65      	adds	r5, r4, #1
 8010fa2:	b2ed      	uxtb	r5, r5
 8010fa4:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010fa6:	f106 000e 	add.w	r0, r6, #14
 8010faa:	f000 fea1 	bl	8011cf0 <SUBGRF_SetPacketParams>
    SUBGRF_WriteRegister( addr, data );
 8010fae:	2100      	movs	r1, #0
 8010fb0:	20f1      	movs	r0, #241	; 0xf1
 8010fb2:	f000 fa73 	bl	801149c <SUBGRF_WriteRegister>
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	20f0      	movs	r0, #240	; 0xf0
 8010fba:	f000 fa6f 	bl	801149c <SUBGRF_WriteRegister>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8010fbe:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010fc0:	2b64      	cmp	r3, #100	; 0x64
 8010fc2:	d068      	beq.n	8011096 <RadioSend+0x20e>
    SUBGRF_WriteRegister( addr, data );
 8010fc4:	21e1      	movs	r1, #225	; 0xe1
 8010fc6:	20f3      	movs	r0, #243	; 0xf3
 8010fc8:	f000 fa68 	bl	801149c <SUBGRF_WriteRegister>
 8010fcc:	2104      	movs	r1, #4
 8010fce:	20f2      	movs	r0, #242	; 0xf2
 8010fd0:	f000 fa64 	bl	801149c <SUBGRF_WriteRegister>
            uint16_t bitNum = ( size * 8 ) + 2;
 8010fd4:	00e1      	lsls	r1, r4, #3
 8010fd6:	1c8c      	adds	r4, r1, #2
    SUBGRF_WriteRegister( addr, data );
 8010fd8:	0a09      	lsrs	r1, r1, #8
 8010fda:	20f4      	movs	r0, #244	; 0xf4
 8010fdc:	f000 fa5e 	bl	801149c <SUBGRF_WriteRegister>
 8010fe0:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8010fe4:	20f5      	movs	r0, #245	; 0xf5
 8010fe6:	f000 fa59 	bl	801149c <SUBGRF_WriteRegister>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8010fea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010fee:	4629      	mov	r1, r5
 8010ff0:	482e      	ldr	r0, [pc, #184]	; (80110ac <RadioSend+0x224>)
 8010ff2:	f000 fb7b 	bl	80116ec <SUBGRF_SendPayload>
            break;
 8010ff6:	e009      	b.n	801100c <RadioSend+0x184>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8010ff8:	482b      	ldr	r0, [pc, #172]	; (80110a8 <RadioSend+0x220>)
 8010ffa:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010ffc:	300e      	adds	r0, #14
 8010ffe:	f000 fe77 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011002:	2200      	movs	r2, #0
 8011004:	4621      	mov	r1, r4
 8011006:	4628      	mov	r0, r5
 8011008:	f000 fb70 	bl	80116ec <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801100c:	4c28      	ldr	r4, [pc, #160]	; (80110b0 <RadioSend+0x228>)
 801100e:	4b26      	ldr	r3, [pc, #152]	; (80110a8 <RadioSend+0x220>)
 8011010:	6859      	ldr	r1, [r3, #4]
 8011012:	4620      	mov	r0, r4
 8011014:	f001 fd80 	bl	8012b18 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8011018:	4620      	mov	r0, r4
 801101a:	f001 fd37 	bl	8012a8c <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 801101e:	2000      	movs	r0, #0
}
 8011020:	b002      	add	sp, #8
 8011022:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011024:	f001 f86a 	bl	80120fc <RFW_Is_Init>
 8011028:	2801      	cmp	r0, #1
 801102a:	d00a      	beq.n	8011042 <RadioSend+0x1ba>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801102c:	481e      	ldr	r0, [pc, #120]	; (80110a8 <RadioSend+0x220>)
 801102e:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011030:	300e      	adds	r0, #14
 8011032:	f000 fe5d 	bl	8011cf0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8011036:	2200      	movs	r2, #0
 8011038:	4621      	mov	r1, r4
 801103a:	4628      	mov	r0, r5
 801103c:	f000 fb56 	bl	80116ec <SUBGRF_SendPayload>
 8011040:	e7e4      	b.n	801100c <RadioSend+0x184>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011042:	f10d 0207 	add.w	r2, sp, #7
 8011046:	4621      	mov	r1, r4
 8011048:	4628      	mov	r0, r5
 801104a:	f001 f85c 	bl	8012106 <RFW_TransmitInit>
 801104e:	b968      	cbnz	r0, 801106c <RadioSend+0x1e4>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011050:	4815      	ldr	r0, [pc, #84]	; (80110a8 <RadioSend+0x220>)
 8011052:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011056:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011058:	300e      	adds	r0, #14
 801105a:	f000 fe49 	bl	8011cf0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801105e:	2200      	movs	r2, #0
 8011060:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011064:	4628      	mov	r0, r5
 8011066:	f000 fb41 	bl	80116ec <SUBGRF_SendPayload>
 801106a:	e7cf      	b.n	801100c <RadioSend+0x184>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801106c:	4b11      	ldr	r3, [pc, #68]	; (80110b4 <RadioSend+0x22c>)
 801106e:	2201      	movs	r2, #1
 8011070:	2100      	movs	r1, #0
 8011072:	2002      	movs	r0, #2
 8011074:	f001 fe82 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8011078:	2003      	movs	r0, #3
 801107a:	e7d1      	b.n	8011020 <RadioSend+0x198>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801107c:	480a      	ldr	r0, [pc, #40]	; (80110a8 <RadioSend+0x220>)
 801107e:	2302      	movs	r3, #2
 8011080:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011082:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011084:	300e      	adds	r0, #14
 8011086:	f000 fe33 	bl	8011cf0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801108a:	2200      	movs	r2, #0
 801108c:	4621      	mov	r1, r4
 801108e:	4628      	mov	r0, r5
 8011090:	f000 fb2c 	bl	80116ec <SUBGRF_SendPayload>
            break;
 8011094:	e7ba      	b.n	801100c <RadioSend+0x184>
    SUBGRF_WriteRegister( addr, data );
 8011096:	2170      	movs	r1, #112	; 0x70
 8011098:	20f3      	movs	r0, #243	; 0xf3
 801109a:	f000 f9ff 	bl	801149c <SUBGRF_WriteRegister>
 801109e:	211d      	movs	r1, #29
 80110a0:	20f2      	movs	r0, #242	; 0xf2
 80110a2:	f000 f9fb 	bl	801149c <SUBGRF_WriteRegister>
}
 80110a6:	e795      	b.n	8010fd4 <RadioSend+0x14c>
 80110a8:	200017cc 	.word	0x200017cc
 80110ac:	200016b0 	.word	0x200016b0
 80110b0:	20001828 	.word	0x20001828
 80110b4:	08013d60 	.word	0x08013d60

080110b8 <RadioIrqProcess>:
{
 80110b8:	b530      	push	{r4, r5, lr}
 80110ba:	b083      	sub	sp, #12
    uint8_t size = 0;
 80110bc:	2300      	movs	r3, #0
 80110be:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80110c2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80110c4:	4ba9      	ldr	r3, [pc, #676]	; (801136c <RadioIrqProcess+0x2b4>)
 80110c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80110ca:	2b20      	cmp	r3, #32
 80110cc:	d828      	bhi.n	8011120 <RadioIrqProcess+0x68>
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 8130 	beq.w	8011334 <RadioIrqProcess+0x27c>
 80110d4:	3b01      	subs	r3, #1
 80110d6:	2b1f      	cmp	r3, #31
 80110d8:	f200 812c 	bhi.w	8011334 <RadioIrqProcess+0x27c>
 80110dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80110e0:	0077005f 	.word	0x0077005f
 80110e4:	00e7012a 	.word	0x00e7012a
 80110e8:	012a012a 	.word	0x012a012a
 80110ec:	0117012a 	.word	0x0117012a
 80110f0:	012a012a 	.word	0x012a012a
 80110f4:	012a012a 	.word	0x012a012a
 80110f8:	012a012a 	.word	0x012a012a
 80110fc:	0124012a 	.word	0x0124012a
 8011100:	012a012a 	.word	0x012a012a
 8011104:	012a012a 	.word	0x012a012a
 8011108:	012a012a 	.word	0x012a012a
 801110c:	012a012a 	.word	0x012a012a
 8011110:	012a012a 	.word	0x012a012a
 8011114:	012a012a 	.word	0x012a012a
 8011118:	012a012a 	.word	0x012a012a
 801111c:	012c012a 	.word	0x012c012a
 8011120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011124:	f000 80a7 	beq.w	8011276 <RadioIrqProcess+0x1be>
 8011128:	d924      	bls.n	8011174 <RadioIrqProcess+0xbc>
 801112a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801112e:	f040 8101 	bne.w	8011334 <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011132:	4b8f      	ldr	r3, [pc, #572]	; (8011370 <RadioIrqProcess+0x2b8>)
 8011134:	2201      	movs	r2, #1
 8011136:	2100      	movs	r1, #0
 8011138:	2002      	movs	r0, #2
 801113a:	f001 fe1f 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801113e:	f000 f9a7 	bl	8011490 <SUBGRF_GetOperatingMode>
 8011142:	2804      	cmp	r0, #4
 8011144:	f000 80a4 	beq.w	8011290 <RadioIrqProcess+0x1d8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8011148:	f000 f9a2 	bl	8011490 <SUBGRF_GetOperatingMode>
 801114c:	2805      	cmp	r0, #5
 801114e:	f040 80f1 	bne.w	8011334 <RadioIrqProcess+0x27c>
            TimerStop( &RxTimeoutTimer );
 8011152:	4888      	ldr	r0, [pc, #544]	; (8011374 <RadioIrqProcess+0x2bc>)
 8011154:	f001 fc3c 	bl	80129d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011158:	2000      	movs	r0, #0
 801115a:	f000 fa97 	bl	801168c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801115e:	4b86      	ldr	r3, [pc, #536]	; (8011378 <RadioIrqProcess+0x2c0>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 80e6 	beq.w	8011334 <RadioIrqProcess+0x27c>
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 80e2 	beq.w	8011334 <RadioIrqProcess+0x27c>
                RadioEvents->RxTimeout( );
 8011170:	4798      	blx	r3
 8011172:	e0df      	b.n	8011334 <RadioIrqProcess+0x27c>
    switch( SubgRf.RadioIrq )
 8011174:	2b40      	cmp	r3, #64	; 0x40
 8011176:	f000 8111 	beq.w	801139c <RadioIrqProcess+0x2e4>
 801117a:	2b80      	cmp	r3, #128	; 0x80
 801117c:	f040 80da 	bne.w	8011334 <RadioIrqProcess+0x27c>
        SUBGRF_SetStandby( STDBY_RC );
 8011180:	2000      	movs	r0, #0
 8011182:	f000 fa83 	bl	801168c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011186:	4b7c      	ldr	r3, [pc, #496]	; (8011378 <RadioIrqProcess+0x2c0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	f000 80d2 	beq.w	8011334 <RadioIrqProcess+0x27c>
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	2b00      	cmp	r3, #0
 8011194:	f000 80ce 	beq.w	8011334 <RadioIrqProcess+0x27c>
            RadioEvents->CadDone( false );
 8011198:	2000      	movs	r0, #0
 801119a:	4798      	blx	r3
 801119c:	e0ca      	b.n	8011334 <RadioIrqProcess+0x27c>
        TimerStop( &TxTimeoutTimer );
 801119e:	4877      	ldr	r0, [pc, #476]	; (801137c <RadioIrqProcess+0x2c4>)
 80111a0:	f001 fc16 	bl	80129d0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80111a4:	2000      	movs	r0, #0
 80111a6:	f000 fa71 	bl	801168c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80111aa:	f000 ffa9 	bl	8012100 <RFW_Is_LongPacketModeEnabled>
 80111ae:	2801      	cmp	r0, #1
 80111b0:	d00a      	beq.n	80111c8 <RadioIrqProcess+0x110>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80111b2:	4b71      	ldr	r3, [pc, #452]	; (8011378 <RadioIrqProcess+0x2c0>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f000 80bc 	beq.w	8011334 <RadioIrqProcess+0x27c>
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f000 80b8 	beq.w	8011334 <RadioIrqProcess+0x27c>
            RadioEvents->TxDone( );
 80111c4:	4798      	blx	r3
 80111c6:	e0b5      	b.n	8011334 <RadioIrqProcess+0x27c>
            RFW_DeInit_TxLongPacket( );
 80111c8:	f000 ffa3 	bl	8012112 <RFW_DeInit_TxLongPacket>
 80111cc:	e7f1      	b.n	80111b2 <RadioIrqProcess+0xfa>
        TimerStop( &RxTimeoutTimer );
 80111ce:	4869      	ldr	r0, [pc, #420]	; (8011374 <RadioIrqProcess+0x2bc>)
 80111d0:	f001 fbfe 	bl	80129d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80111d4:	4b65      	ldr	r3, [pc, #404]	; (801136c <RadioIrqProcess+0x2b4>)
 80111d6:	785b      	ldrb	r3, [r3, #1]
 80111d8:	b303      	cbz	r3, 801121c <RadioIrqProcess+0x164>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80111da:	22ff      	movs	r2, #255	; 0xff
 80111dc:	f10d 0107 	add.w	r1, sp, #7
 80111e0:	4867      	ldr	r0, [pc, #412]	; (8011380 <RadioIrqProcess+0x2c8>)
 80111e2:	f000 fe47 	bl	8011e74 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80111e6:	4867      	ldr	r0, [pc, #412]	; (8011384 <RadioIrqProcess+0x2cc>)
 80111e8:	f000 fe5e 	bl	8011ea8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80111ec:	4b62      	ldr	r3, [pc, #392]	; (8011378 <RadioIrqProcess+0x2c0>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 809f 	beq.w	8011334 <RadioIrqProcess+0x27c>
 80111f6:	689c      	ldr	r4, [r3, #8]
 80111f8:	2c00      	cmp	r4, #0
 80111fa:	f000 809b 	beq.w	8011334 <RadioIrqProcess+0x27c>
            switch( SubgRf.PacketStatus.packetType )
 80111fe:	4b5b      	ldr	r3, [pc, #364]	; (801136c <RadioIrqProcess+0x2b4>)
 8011200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011204:	2b01      	cmp	r3, #1
 8011206:	d11d      	bne.n	8011244 <RadioIrqProcess+0x18c>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8011208:	4a58      	ldr	r2, [pc, #352]	; (801136c <RadioIrqProcess+0x2b4>)
 801120a:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801120e:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011212:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011216:	485a      	ldr	r0, [pc, #360]	; (8011380 <RadioIrqProcess+0x2c8>)
 8011218:	47a0      	blx	r4
                break;
 801121a:	e08b      	b.n	8011334 <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 801121c:	2000      	movs	r0, #0
 801121e:	f000 fa35 	bl	801168c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011222:	2100      	movs	r1, #0
 8011224:	f640 1002 	movw	r0, #2306	; 0x902
 8011228:	f000 f938 	bl	801149c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801122c:	f640 1044 	movw	r0, #2372	; 0x944
 8011230:	f000 f944 	bl	80114bc <SUBGRF_ReadRegister>
 8011234:	f040 0102 	orr.w	r1, r0, #2
 8011238:	b2c9      	uxtb	r1, r1
 801123a:	f640 1044 	movw	r0, #2372	; 0x944
 801123e:	f000 f92d 	bl	801149c <SUBGRF_WriteRegister>
 8011242:	e7ca      	b.n	80111da <RadioIrqProcess+0x122>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011244:	4c49      	ldr	r4, [pc, #292]	; (801136c <RadioIrqProcess+0x2b4>)
 8011246:	4669      	mov	r1, sp
 8011248:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801124a:	f000 ff0b 	bl	8012064 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801124e:	9b00      	ldr	r3, [sp, #0]
 8011250:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011254:	4a4c      	ldr	r2, [pc, #304]	; (8011388 <RadioIrqProcess+0x2d0>)
 8011256:	fb82 1203 	smull	r1, r2, r2, r3
 801125a:	17db      	asrs	r3, r3, #31
 801125c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011260:	4a45      	ldr	r2, [pc, #276]	; (8011378 <RadioIrqProcess+0x2c0>)
 8011262:	6812      	ldr	r2, [r2, #0]
 8011264:	6895      	ldr	r5, [r2, #8]
 8011266:	b25b      	sxtb	r3, r3
 8011268:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 801126c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011270:	4843      	ldr	r0, [pc, #268]	; (8011380 <RadioIrqProcess+0x2c8>)
 8011272:	47a8      	blx	r5
                break;
 8011274:	e05e      	b.n	8011334 <RadioIrqProcess+0x27c>
        SUBGRF_SetStandby( STDBY_RC );
 8011276:	2000      	movs	r0, #0
 8011278:	f000 fa08 	bl	801168c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801127c:	4b3e      	ldr	r3, [pc, #248]	; (8011378 <RadioIrqProcess+0x2c0>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d057      	beq.n	8011334 <RadioIrqProcess+0x27c>
 8011284:	699b      	ldr	r3, [r3, #24]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d054      	beq.n	8011334 <RadioIrqProcess+0x27c>
            RadioEvents->CadDone( true );
 801128a:	2001      	movs	r0, #1
 801128c:	4798      	blx	r3
 801128e:	e051      	b.n	8011334 <RadioIrqProcess+0x27c>
            TimerStop( &TxTimeoutTimer );
 8011290:	483a      	ldr	r0, [pc, #232]	; (801137c <RadioIrqProcess+0x2c4>)
 8011292:	f001 fb9d 	bl	80129d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011296:	2000      	movs	r0, #0
 8011298:	f000 f9f8 	bl	801168c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801129c:	4b36      	ldr	r3, [pc, #216]	; (8011378 <RadioIrqProcess+0x2c0>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d047      	beq.n	8011334 <RadioIrqProcess+0x27c>
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d044      	beq.n	8011334 <RadioIrqProcess+0x27c>
                RadioEvents->TxTimeout( );
 80112aa:	4798      	blx	r3
 80112ac:	e042      	b.n	8011334 <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80112ae:	4b37      	ldr	r3, [pc, #220]	; (801138c <RadioIrqProcess+0x2d4>)
 80112b0:	2201      	movs	r2, #1
 80112b2:	2100      	movs	r1, #0
 80112b4:	2002      	movs	r0, #2
 80112b6:	f001 fd61 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80112ba:	4b2c      	ldr	r3, [pc, #176]	; (801136c <RadioIrqProcess+0x2b4>)
 80112bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80112be:	b3c9      	cbz	r1, 8011334 <RadioIrqProcess+0x27c>
    SUBGRF_WriteRegister( addr, data );
 80112c0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80112c4:	f640 1003 	movw	r0, #2307	; 0x903
 80112c8:	f000 f8e8 	bl	801149c <SUBGRF_WriteRegister>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80112cc:	4c27      	ldr	r4, [pc, #156]	; (801136c <RadioIrqProcess+0x2b4>)
    SUBGRF_WriteRegister( addr, data );
 80112ce:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80112d2:	f640 1004 	movw	r0, #2308	; 0x904
 80112d6:	f000 f8e1 	bl	801149c <SUBGRF_WriteRegister>
 80112da:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80112de:	f640 1005 	movw	r0, #2309	; 0x905
 80112e2:	f000 f8db 	bl	801149c <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 80112e6:	f640 1002 	movw	r0, #2306	; 0x902
 80112ea:	f000 f8e7 	bl	80114bc <SUBGRF_ReadRegister>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80112ee:	f040 0101 	orr.w	r1, r0, #1
    SUBGRF_WriteRegister( addr, data );
 80112f2:	b2c9      	uxtb	r1, r1
 80112f4:	f640 1002 	movw	r0, #2306	; 0x902
 80112f8:	f000 f8d0 	bl	801149c <SUBGRF_WriteRegister>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80112fc:	2200      	movs	r2, #0
 80112fe:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011300:	4613      	mov	r3, r2
 8011302:	f240 2162 	movw	r1, #610	; 0x262
 8011306:	4608      	mov	r0, r1
 8011308:	f000 fb31 	bl	801196e <SUBGRF_SetDioIrqParams>
 801130c:	e012      	b.n	8011334 <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801130e:	4b20      	ldr	r3, [pc, #128]	; (8011390 <RadioIrqProcess+0x2d8>)
 8011310:	2201      	movs	r2, #1
 8011312:	2100      	movs	r1, #0
 8011314:	2002      	movs	r0, #2
 8011316:	f001 fd31 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801131a:	f000 feef 	bl	80120fc <RFW_Is_Init>
 801131e:	2801      	cmp	r0, #1
 8011320:	d108      	bne.n	8011334 <RadioIrqProcess+0x27c>
            RFW_ReceivePayload( );
 8011322:	f000 fef7 	bl	8012114 <RFW_ReceivePayload>
 8011326:	e005      	b.n	8011334 <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8011328:	4b1a      	ldr	r3, [pc, #104]	; (8011394 <RadioIrqProcess+0x2dc>)
 801132a:	2201      	movs	r2, #1
 801132c:	2100      	movs	r1, #0
 801132e:	2002      	movs	r0, #2
 8011330:	f001 fd24 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
}
 8011334:	b003      	add	sp, #12
 8011336:	bd30      	pop	{r4, r5, pc}
        TimerStop( &RxTimeoutTimer );
 8011338:	480e      	ldr	r0, [pc, #56]	; (8011374 <RadioIrqProcess+0x2bc>)
 801133a:	f001 fb49 	bl	80129d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801133e:	4b0b      	ldr	r3, [pc, #44]	; (801136c <RadioIrqProcess+0x2b4>)
 8011340:	785b      	ldrb	r3, [r3, #1]
 8011342:	b173      	cbz	r3, 8011362 <RadioIrqProcess+0x2aa>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <RadioIrqProcess+0x2c0>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d0f3      	beq.n	8011334 <RadioIrqProcess+0x27c>
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0f0      	beq.n	8011334 <RadioIrqProcess+0x27c>
            RadioEvents->RxTimeout( );
 8011352:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011354:	4b10      	ldr	r3, [pc, #64]	; (8011398 <RadioIrqProcess+0x2e0>)
 8011356:	2201      	movs	r2, #1
 8011358:	2100      	movs	r1, #0
 801135a:	2002      	movs	r0, #2
 801135c:	f001 fd0e 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
 8011360:	e7e8      	b.n	8011334 <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 8011362:	2000      	movs	r0, #0
 8011364:	f000 f992 	bl	801168c <SUBGRF_SetStandby>
 8011368:	e7ec      	b.n	8011344 <RadioIrqProcess+0x28c>
 801136a:	bf00      	nop
 801136c:	200017cc 	.word	0x200017cc
 8011370:	08013d78 	.word	0x08013d78
 8011374:	200017b4 	.word	0x200017b4
 8011378:	200017b0 	.word	0x200017b0
 801137c:	20001828 	.word	0x20001828
 8011380:	200016b0 	.word	0x200016b0
 8011384:	200017f0 	.word	0x200017f0
 8011388:	10624dd3 	.word	0x10624dd3
 801138c:	08013d8c 	.word	0x08013d8c
 8011390:	08013d98 	.word	0x08013d98
 8011394:	08013da4 	.word	0x08013da4
 8011398:	08013db0 	.word	0x08013db0
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801139c:	4b0a      	ldr	r3, [pc, #40]	; (80113c8 <RadioIrqProcess+0x310>)
 801139e:	2201      	movs	r2, #1
 80113a0:	2100      	movs	r1, #0
 80113a2:	2002      	movs	r0, #2
 80113a4:	f001 fcea 	bl	8012d7c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80113a8:	4b08      	ldr	r3, [pc, #32]	; (80113cc <RadioIrqProcess+0x314>)
 80113aa:	785b      	ldrb	r3, [r3, #1]
 80113ac:	b143      	cbz	r3, 80113c0 <RadioIrqProcess+0x308>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80113ae:	4b08      	ldr	r3, [pc, #32]	; (80113d0 <RadioIrqProcess+0x318>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d0be      	beq.n	8011334 <RadioIrqProcess+0x27c>
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d0bb      	beq.n	8011334 <RadioIrqProcess+0x27c>
            RadioEvents->RxError( );
 80113bc:	4798      	blx	r3
}
 80113be:	e7b9      	b.n	8011334 <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 80113c0:	2000      	movs	r0, #0
 80113c2:	f000 f963 	bl	801168c <SUBGRF_SetStandby>
 80113c6:	e7f2      	b.n	80113ae <RadioIrqProcess+0x2f6>
 80113c8:	08013dbc 	.word	0x08013dbc
 80113cc:	200017cc 	.word	0x200017cc
 80113d0:	200017b0 	.word	0x200017b0

080113d4 <RadioOnDioIrq>:
{
 80113d4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80113d6:	4b03      	ldr	r3, [pc, #12]	; (80113e4 <RadioOnDioIrq+0x10>)
 80113d8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80113dc:	f7ff fe6c 	bl	80110b8 <RadioIrqProcess>
}
 80113e0:	bd08      	pop	{r3, pc}
 80113e2:	bf00      	nop
 80113e4:	200017cc 	.word	0x200017cc

080113e8 <RadioTxPrbs>:
{
 80113e8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80113ea:	2101      	movs	r1, #1
 80113ec:	4b07      	ldr	r3, [pc, #28]	; (801140c <RadioTxPrbs+0x24>)
 80113ee:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80113f2:	f000 fd97 	bl	8011f24 <SUBGRF_SetSwitch>
    SUBGRF_WriteRegister( addr, data );
 80113f6:	212d      	movs	r1, #45	; 0x2d
 80113f8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80113fc:	f000 f84e 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_SetTxInfinitePreamble( );
 8011400:	f000 fa19 	bl	8011836 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8011404:	4802      	ldr	r0, [pc, #8]	; (8011410 <RadioTxPrbs+0x28>)
 8011406:	f000 f959 	bl	80116bc <SUBGRF_SetTx>
}
 801140a:	bd08      	pop	{r3, pc}
 801140c:	200017cc 	.word	0x200017cc
 8011410:	000fffff 	.word	0x000fffff

08011414 <RadioIsChannelFree>:
{
 8011414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011416:	b08b      	sub	sp, #44	; 0x2c
 8011418:	4604      	mov	r4, r0
 801141a:	460f      	mov	r7, r1
 801141c:	4616      	mov	r6, r2
 801141e:	461d      	mov	r5, r3
    RadioStandby( );
 8011420:	f7fe fede 	bl	80101e0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011424:	2000      	movs	r0, #0
 8011426:	f7fe ff83 	bl	8010330 <RadioSetModem>
    SUBGRF_SetRfFrequency( freq );
 801142a:	4620      	mov	r0, r4
 801142c:	f000 fb10 	bl	8011a50 <SUBGRF_SetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011430:	2301      	movs	r3, #1
 8011432:	9309      	str	r3, [sp, #36]	; 0x24
 8011434:	2400      	movs	r4, #0
 8011436:	9408      	str	r4, [sp, #32]
 8011438:	9407      	str	r4, [sp, #28]
 801143a:	9406      	str	r4, [sp, #24]
 801143c:	9405      	str	r4, [sp, #20]
 801143e:	9404      	str	r4, [sp, #16]
 8011440:	9403      	str	r4, [sp, #12]
 8011442:	9402      	str	r4, [sp, #8]
 8011444:	2303      	movs	r3, #3
 8011446:	9301      	str	r3, [sp, #4]
 8011448:	9700      	str	r7, [sp, #0]
 801144a:	4623      	mov	r3, r4
 801144c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011450:	4639      	mov	r1, r7
 8011452:	4620      	mov	r0, r4
 8011454:	f7ff fba4 	bl	8010ba0 <RadioSetRxConfig>
    RadioRx( 0 );
 8011458:	4620      	mov	r0, r4
 801145a:	f7fe ff23 	bl	80102a4 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801145e:	f7fe fed5 	bl	801020c <RadioGetWakeupTime>
 8011462:	f7f0 ff25 	bl	80022b0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011466:	f001 fa6d 	bl	8012944 <UTIL_TIMER_GetCurrentTime>
 801146a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801146c:	4620      	mov	r0, r4
 801146e:	f001 fa73 	bl	8012958 <UTIL_TIMER_GetElapsedTime>
 8011472:	42a8      	cmp	r0, r5
 8011474:	d206      	bcs.n	8011484 <RadioIsChannelFree+0x70>
    return SUBGRF_GetRssiInst( );
 8011476:	f000 fccb 	bl	8011e10 <SUBGRF_GetRssiInst>
        if( rssi > rssiThresh )
 801147a:	b200      	sxth	r0, r0
 801147c:	4286      	cmp	r6, r0
 801147e:	daf5      	bge.n	801146c <RadioIsChannelFree+0x58>
            status = false;
 8011480:	2400      	movs	r4, #0
 8011482:	e000      	b.n	8011486 <RadioIsChannelFree+0x72>
    bool status = true;
 8011484:	2401      	movs	r4, #1
    RadioStandby( );
 8011486:	f7fe feab 	bl	80101e0 <RadioStandby>
}
 801148a:	4620      	mov	r0, r4
 801148c:	b00b      	add	sp, #44	; 0x2c
 801148e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011490 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8011490:	4b01      	ldr	r3, [pc, #4]	; (8011498 <SUBGRF_GetOperatingMode+0x8>)
 8011492:	7818      	ldrb	r0, [r3, #0]
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	20001846 	.word	0x20001846

0801149c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801149c:	b500      	push	{lr}
 801149e:	b083      	sub	sp, #12
 80114a0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80114a4:	2301      	movs	r3, #1
 80114a6:	f10d 0207 	add.w	r2, sp, #7
 80114aa:	4601      	mov	r1, r0
 80114ac:	4802      	ldr	r0, [pc, #8]	; (80114b8 <SUBGRF_WriteRegister+0x1c>)
 80114ae:	f7f5 fc7b 	bl	8006da8 <HAL_SUBGHZ_WriteRegisters>
}
 80114b2:	b003      	add	sp, #12
 80114b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114b8:	200003a0 	.word	0x200003a0

080114bc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80114bc:	b500      	push	{lr}
 80114be:	b083      	sub	sp, #12
 80114c0:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80114c2:	2301      	movs	r3, #1
 80114c4:	f10d 0207 	add.w	r2, sp, #7
 80114c8:	4803      	ldr	r0, [pc, #12]	; (80114d8 <SUBGRF_ReadRegister+0x1c>)
 80114ca:	f7f5 fcb9 	bl	8006e40 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80114ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80114d2:	b003      	add	sp, #12
 80114d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114d8:	200003a0 	.word	0x200003a0

080114dc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80114dc:	b510      	push	{r4, lr}
 80114de:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80114e0:	f7f7 fc72 	bl	8008dc8 <RBI_IsDCDC>
 80114e4:	2801      	cmp	r0, #1
 80114e6:	d000      	beq.n	80114ea <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80114e8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80114ea:	f640 1023 	movw	r0, #2339	; 0x923
 80114ee:	f7ff ffe5 	bl	80114bc <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80114f2:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
 80114f6:	4321      	orrs	r1, r4
 80114f8:	f640 1023 	movw	r0, #2339	; 0x923
 80114fc:	f7ff ffce 	bl	801149c <SUBGRF_WriteRegister>
}
 8011500:	e7f2      	b.n	80114e8 <Radio_SMPS_Set+0xc>
	...

08011504 <SUBGRF_SetWhiteningSeed>:
    return PacketType;
 8011504:	4b0c      	ldr	r3, [pc, #48]	; (8011538 <SUBGRF_SetWhiteningSeed+0x34>)
    switch( SUBGRF_GetPacketType( ) )
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	b103      	cbz	r3, 801150c <SUBGRF_SetWhiteningSeed+0x8>
 801150a:	4770      	bx	lr
{
 801150c:	b510      	push	{r4, lr}
 801150e:	4604      	mov	r4, r0
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8011510:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011514:	f7ff ffd2 	bl	80114bc <SUBGRF_ReadRegister>
 8011518:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801151c:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8011520:	4301      	orrs	r1, r0
 8011522:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011526:	f7ff ffb9 	bl	801149c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801152a:	b2e1      	uxtb	r1, r4
 801152c:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8011530:	f7ff ffb4 	bl	801149c <SUBGRF_WriteRegister>
}
 8011534:	bd10      	pop	{r4, pc}
 8011536:	bf00      	nop
 8011538:	20001847 	.word	0x20001847

0801153c <SUBGRF_WriteRegisters>:
{
 801153c:	b510      	push	{r4, lr}
 801153e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011540:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011544:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8011546:	460a      	mov	r2, r1
 8011548:	4601      	mov	r1, r0
 801154a:	4803      	ldr	r0, [pc, #12]	; (8011558 <SUBGRF_WriteRegisters+0x1c>)
 801154c:	f7f5 fc2c 	bl	8006da8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011550:	f384 8810 	msr	PRIMASK, r4
}
 8011554:	bd10      	pop	{r4, pc}
 8011556:	bf00      	nop
 8011558:	200003a0 	.word	0x200003a0

0801155c <SUBGRF_SetSyncWord>:
{
 801155c:	b508      	push	{r3, lr}
 801155e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8011560:	2208      	movs	r2, #8
 8011562:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8011566:	f7ff ffe9 	bl	801153c <SUBGRF_WriteRegisters>
}
 801156a:	2000      	movs	r0, #0
 801156c:	bd08      	pop	{r3, pc}
	...

08011570 <SUBGRF_SetCrcSeed>:
{
 8011570:	b500      	push	{lr}
 8011572:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8011574:	0a03      	lsrs	r3, r0, #8
 8011576:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801157a:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 801157e:	4b06      	ldr	r3, [pc, #24]	; (8011598 <SUBGRF_SetCrcSeed+0x28>)
    switch( SUBGRF_GetPacketType( ) )
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	b113      	cbz	r3, 801158a <SUBGRF_SetCrcSeed+0x1a>
}
 8011584:	b003      	add	sp, #12
 8011586:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801158a:	2202      	movs	r2, #2
 801158c:	a901      	add	r1, sp, #4
 801158e:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8011592:	f7ff ffd3 	bl	801153c <SUBGRF_WriteRegisters>
}
 8011596:	e7f5      	b.n	8011584 <SUBGRF_SetCrcSeed+0x14>
 8011598:	20001847 	.word	0x20001847

0801159c <SUBGRF_SetCrcPolynomial>:
{
 801159c:	b500      	push	{lr}
 801159e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80115a0:	0a03      	lsrs	r3, r0, #8
 80115a2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80115a6:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 80115aa:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <SUBGRF_SetCrcPolynomial+0x28>)
    switch( SUBGRF_GetPacketType( ) )
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	b113      	cbz	r3, 80115b6 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80115b0:	b003      	add	sp, #12
 80115b2:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80115b6:	2202      	movs	r2, #2
 80115b8:	a901      	add	r1, sp, #4
 80115ba:	f240 60be 	movw	r0, #1726	; 0x6be
 80115be:	f7ff ffbd 	bl	801153c <SUBGRF_WriteRegisters>
}
 80115c2:	e7f5      	b.n	80115b0 <SUBGRF_SetCrcPolynomial+0x14>
 80115c4:	20001847 	.word	0x20001847

080115c8 <SUBGRF_ReadRegisters>:
{
 80115c8:	b510      	push	{r4, lr}
 80115ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80115d0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80115d2:	460a      	mov	r2, r1
 80115d4:	4601      	mov	r1, r0
 80115d6:	4803      	ldr	r0, [pc, #12]	; (80115e4 <SUBGRF_ReadRegisters+0x1c>)
 80115d8:	f7f5 fc32 	bl	8006e40 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115dc:	f384 8810 	msr	PRIMASK, r4
}
 80115e0:	bd10      	pop	{r4, pc}
 80115e2:	bf00      	nop
 80115e4:	200003a0 	.word	0x200003a0

080115e8 <SUBGRF_WriteBuffer>:
{
 80115e8:	b510      	push	{r4, lr}
 80115ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80115f0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80115f2:	460a      	mov	r2, r1
 80115f4:	4601      	mov	r1, r0
 80115f6:	4803      	ldr	r0, [pc, #12]	; (8011604 <SUBGRF_WriteBuffer+0x1c>)
 80115f8:	f7f5 fd60 	bl	80070bc <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115fc:	f384 8810 	msr	PRIMASK, r4
}
 8011600:	bd10      	pop	{r4, pc}
 8011602:	bf00      	nop
 8011604:	200003a0 	.word	0x200003a0

08011608 <SUBGRF_SetPayload>:
{
 8011608:	b508      	push	{r3, lr}
 801160a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801160c:	4601      	mov	r1, r0
 801160e:	2000      	movs	r0, #0
 8011610:	f7ff ffea 	bl	80115e8 <SUBGRF_WriteBuffer>
}
 8011614:	bd08      	pop	{r3, pc}
	...

08011618 <SUBGRF_ReadBuffer>:
{
 8011618:	b510      	push	{r4, lr}
 801161a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801161c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011620:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8011622:	460a      	mov	r2, r1
 8011624:	4601      	mov	r1, r0
 8011626:	4803      	ldr	r0, [pc, #12]	; (8011634 <SUBGRF_ReadBuffer+0x1c>)
 8011628:	f7f5 fd8e 	bl	8007148 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801162c:	f384 8810 	msr	PRIMASK, r4
}
 8011630:	bd10      	pop	{r4, pc}
 8011632:	bf00      	nop
 8011634:	200003a0 	.word	0x200003a0

08011638 <SUBGRF_WriteCommand>:
{
 8011638:	b510      	push	{r4, lr}
 801163a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801163c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011640:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011642:	460a      	mov	r2, r1
 8011644:	4601      	mov	r1, r0
 8011646:	4803      	ldr	r0, [pc, #12]	; (8011654 <SUBGRF_WriteCommand+0x1c>)
 8011648:	f7f5 fc44 	bl	8006ed4 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801164c:	f384 8810 	msr	PRIMASK, r4
}
 8011650:	bd10      	pop	{r4, pc}
 8011652:	bf00      	nop
 8011654:	200003a0 	.word	0x200003a0

08011658 <SUBGRF_SetSleep>:
{
 8011658:	b510      	push	{r4, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801165e:	2000      	movs	r0, #0
 8011660:	f7f7 fba6 	bl	8008db0 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011664:	2002      	movs	r0, #2
 8011666:	f7ff ff39 	bl	80114dc <Radio_SMPS_Set>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801166a:	f004 0407 	and.w	r4, r4, #7
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801166e:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8011672:	2201      	movs	r2, #1
 8011674:	f10d 0107 	add.w	r1, sp, #7
 8011678:	2084      	movs	r0, #132	; 0x84
 801167a:	f7ff ffdd 	bl	8011638 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801167e:	4b02      	ldr	r3, [pc, #8]	; (8011688 <SUBGRF_SetSleep+0x30>)
 8011680:	2200      	movs	r2, #0
 8011682:	701a      	strb	r2, [r3, #0]
}
 8011684:	b002      	add	sp, #8
 8011686:	bd10      	pop	{r4, pc}
 8011688:	20001846 	.word	0x20001846

0801168c <SUBGRF_SetStandby>:
{
 801168c:	b500      	push	{lr}
 801168e:	b083      	sub	sp, #12
 8011690:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011694:	2201      	movs	r2, #1
 8011696:	f10d 0107 	add.w	r1, sp, #7
 801169a:	2080      	movs	r0, #128	; 0x80
 801169c:	f7ff ffcc 	bl	8011638 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80116a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        OperatingMode = MODE_STDBY_XOSC;
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	bf0c      	ite	eq
 80116a8:	2201      	moveq	r2, #1
 80116aa:	2202      	movne	r2, #2
 80116ac:	4b02      	ldr	r3, [pc, #8]	; (80116b8 <SUBGRF_SetStandby+0x2c>)
 80116ae:	701a      	strb	r2, [r3, #0]
}
 80116b0:	b003      	add	sp, #12
 80116b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80116b6:	bf00      	nop
 80116b8:	20001846 	.word	0x20001846

080116bc <SUBGRF_SetTx>:
{
 80116bc:	b500      	push	{lr}
 80116be:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80116c0:	4b09      	ldr	r3, [pc, #36]	; (80116e8 <SUBGRF_SetTx+0x2c>)
 80116c2:	2204      	movs	r2, #4
 80116c4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80116c6:	0c03      	lsrs	r3, r0, #16
 80116c8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80116cc:	0a03      	lsrs	r3, r0, #8
 80116ce:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80116d2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80116d6:	2203      	movs	r2, #3
 80116d8:	a901      	add	r1, sp, #4
 80116da:	2083      	movs	r0, #131	; 0x83
 80116dc:	f7ff ffac 	bl	8011638 <SUBGRF_WriteCommand>
}
 80116e0:	b003      	add	sp, #12
 80116e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80116e6:	bf00      	nop
 80116e8:	20001846 	.word	0x20001846

080116ec <SUBGRF_SendPayload>:
{
 80116ec:	b510      	push	{r4, lr}
 80116ee:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80116f0:	f7ff ff8a 	bl	8011608 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80116f4:	4620      	mov	r0, r4
 80116f6:	f7ff ffe1 	bl	80116bc <SUBGRF_SetTx>
}
 80116fa:	bd10      	pop	{r4, pc}

080116fc <SUBGRF_SetRx>:
{
 80116fc:	b500      	push	{lr}
 80116fe:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011700:	4b09      	ldr	r3, [pc, #36]	; (8011728 <SUBGRF_SetRx+0x2c>)
 8011702:	2205      	movs	r2, #5
 8011704:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011706:	0c03      	lsrs	r3, r0, #16
 8011708:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801170c:	0a03      	lsrs	r3, r0, #8
 801170e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011712:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011716:	2203      	movs	r2, #3
 8011718:	a901      	add	r1, sp, #4
 801171a:	2082      	movs	r0, #130	; 0x82
 801171c:	f7ff ff8c 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011720:	b003      	add	sp, #12
 8011722:	f85d fb04 	ldr.w	pc, [sp], #4
 8011726:	bf00      	nop
 8011728:	20001846 	.word	0x20001846

0801172c <SUBGRF_GetRandom>:
{
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011730:	2600      	movs	r6, #0
 8011732:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8011734:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011738:	f7ff fec0 	bl	80114bc <SUBGRF_ReadRegister>
 801173c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801173e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8011742:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011746:	f7ff fea9 	bl	801149c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801174a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801174e:	f7ff feb5 	bl	80114bc <SUBGRF_ReadRegister>
 8011752:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011754:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8011758:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801175c:	f7ff fe9e 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011760:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011764:	f7ff ffca 	bl	80116fc <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8011768:	2204      	movs	r2, #4
 801176a:	eb0d 0102 	add.w	r1, sp, r2
 801176e:	f640 0019 	movw	r0, #2073	; 0x819
 8011772:	f7ff ff29 	bl	80115c8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8011776:	4630      	mov	r0, r6
 8011778:	f7ff ff88 	bl	801168c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801177c:	4629      	mov	r1, r5
 801177e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011782:	f7ff fe8b 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8011786:	4621      	mov	r1, r4
 8011788:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801178c:	f7ff fe86 	bl	801149c <SUBGRF_WriteRegister>
}
 8011790:	9801      	ldr	r0, [sp, #4]
 8011792:	b002      	add	sp, #8
 8011794:	bd70      	pop	{r4, r5, r6, pc}
	...

08011798 <SUBGRF_SetRxBoosted>:
{
 8011798:	b510      	push	{r4, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 801179e:	4b0b      	ldr	r3, [pc, #44]	; (80117cc <SUBGRF_SetRxBoosted+0x34>)
 80117a0:	2205      	movs	r2, #5
 80117a2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80117a4:	2197      	movs	r1, #151	; 0x97
 80117a6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80117aa:	f7ff fe77 	bl	801149c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80117ae:	0c23      	lsrs	r3, r4, #16
 80117b0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80117b4:	0a23      	lsrs	r3, r4, #8
 80117b6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80117ba:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80117be:	2203      	movs	r2, #3
 80117c0:	a901      	add	r1, sp, #4
 80117c2:	2082      	movs	r0, #130	; 0x82
 80117c4:	f7ff ff38 	bl	8011638 <SUBGRF_WriteCommand>
}
 80117c8:	b002      	add	sp, #8
 80117ca:	bd10      	pop	{r4, pc}
 80117cc:	20001846 	.word	0x20001846

080117d0 <SUBGRF_SetRxDutyCycle>:
{
 80117d0:	b500      	push	{lr}
 80117d2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80117d4:	0c03      	lsrs	r3, r0, #16
 80117d6:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80117da:	0a03      	lsrs	r3, r0, #8
 80117dc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80117e0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80117e4:	0c0b      	lsrs	r3, r1, #16
 80117e6:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80117ea:	0a0b      	lsrs	r3, r1, #8
 80117ec:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80117f0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80117f4:	2206      	movs	r2, #6
 80117f6:	4669      	mov	r1, sp
 80117f8:	2094      	movs	r0, #148	; 0x94
 80117fa:	f7ff ff1d 	bl	8011638 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80117fe:	4b03      	ldr	r3, [pc, #12]	; (801180c <SUBGRF_SetRxDutyCycle+0x3c>)
 8011800:	2206      	movs	r2, #6
 8011802:	701a      	strb	r2, [r3, #0]
}
 8011804:	b003      	add	sp, #12
 8011806:	f85d fb04 	ldr.w	pc, [sp], #4
 801180a:	bf00      	nop
 801180c:	20001846 	.word	0x20001846

08011810 <SUBGRF_SetCad>:
{
 8011810:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011812:	2200      	movs	r2, #0
 8011814:	4611      	mov	r1, r2
 8011816:	20c5      	movs	r0, #197	; 0xc5
 8011818:	f7ff ff0e 	bl	8011638 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801181c:	4b01      	ldr	r3, [pc, #4]	; (8011824 <SUBGRF_SetCad+0x14>)
 801181e:	2207      	movs	r2, #7
 8011820:	701a      	strb	r2, [r3, #0]
}
 8011822:	bd08      	pop	{r3, pc}
 8011824:	20001846 	.word	0x20001846

08011828 <SUBGRF_SetTxContinuousWave>:
{
 8011828:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801182a:	2200      	movs	r2, #0
 801182c:	4611      	mov	r1, r2
 801182e:	20d1      	movs	r0, #209	; 0xd1
 8011830:	f7ff ff02 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011834:	bd08      	pop	{r3, pc}

08011836 <SUBGRF_SetTxInfinitePreamble>:
{
 8011836:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011838:	2200      	movs	r2, #0
 801183a:	4611      	mov	r1, r2
 801183c:	20d2      	movs	r0, #210	; 0xd2
 801183e:	f7ff fefb 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011842:	bd08      	pop	{r3, pc}

08011844 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011844:	b500      	push	{lr}
 8011846:	b083      	sub	sp, #12
 8011848:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801184c:	2201      	movs	r2, #1
 801184e:	f10d 0107 	add.w	r1, sp, #7
 8011852:	209f      	movs	r0, #159	; 0x9f
 8011854:	f7ff fef0 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011858:	b003      	add	sp, #12
 801185a:	f85d fb04 	ldr.w	pc, [sp], #4

0801185e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 801185e:	b500      	push	{lr}
 8011860:	b083      	sub	sp, #12
 8011862:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8011866:	2201      	movs	r2, #1
 8011868:	f10d 0107 	add.w	r1, sp, #7
 801186c:	20a0      	movs	r0, #160	; 0xa0
 801186e:	f7ff fee3 	bl	8011638 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8011872:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011876:	293f      	cmp	r1, #63	; 0x3f
 8011878:	d907      	bls.n	801188a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        reg = exp + ( mant << 3 );
 801187a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801187e:	3101      	adds	r1, #1
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8011880:	b2c9      	uxtb	r1, r1
 8011882:	f240 7006 	movw	r0, #1798	; 0x706
 8011886:	f7ff fe09 	bl	801149c <SUBGRF_WriteRegister>
}
 801188a:	b003      	add	sp, #12
 801188c:	f85d fb04 	ldr.w	pc, [sp], #4

08011890 <SUBGRF_SetRegulatorMode>:
{
 8011890:	b500      	push	{lr}
 8011892:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8011894:	f7f7 fa98 	bl	8008dc8 <RBI_IsDCDC>
 8011898:	2801      	cmp	r0, #1
 801189a:	bf14      	ite	ne
 801189c:	2000      	movne	r0, #0
 801189e:	2001      	moveq	r0, #1
 80118a0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80118a4:	2201      	movs	r2, #1
 80118a6:	f10d 0107 	add.w	r1, sp, #7
 80118aa:	2096      	movs	r0, #150	; 0x96
 80118ac:	f7ff fec4 	bl	8011638 <SUBGRF_WriteCommand>
}
 80118b0:	b003      	add	sp, #12
 80118b2:	f85d fb04 	ldr.w	pc, [sp], #4

080118b6 <SUBGRF_Calibrate>:
{
 80118b6:	b500      	push	{lr}
 80118b8:	b083      	sub	sp, #12
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80118ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80118be:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80118c2:	2201      	movs	r2, #1
 80118c4:	f10d 0107 	add.w	r1, sp, #7
 80118c8:	2089      	movs	r0, #137	; 0x89
 80118ca:	f7ff feb5 	bl	8011638 <SUBGRF_WriteCommand>
}
 80118ce:	b003      	add	sp, #12
 80118d0:	f85d fb04 	ldr.w	pc, [sp], #4

080118d4 <SUBGRF_CalibrateImage>:
{
 80118d4:	b500      	push	{lr}
 80118d6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80118d8:	4b16      	ldr	r3, [pc, #88]	; (8011934 <SUBGRF_CalibrateImage+0x60>)
 80118da:	4298      	cmp	r0, r3
 80118dc:	d812      	bhi.n	8011904 <SUBGRF_CalibrateImage+0x30>
    else if( freq > 850000000 )
 80118de:	4b16      	ldr	r3, [pc, #88]	; (8011938 <SUBGRF_CalibrateImage+0x64>)
 80118e0:	4298      	cmp	r0, r3
 80118e2:	d81d      	bhi.n	8011920 <SUBGRF_CalibrateImage+0x4c>
    else if( freq > 770000000 )
 80118e4:	4b15      	ldr	r3, [pc, #84]	; (801193c <SUBGRF_CalibrateImage+0x68>)
 80118e6:	4298      	cmp	r0, r3
 80118e8:	d81d      	bhi.n	8011926 <SUBGRF_CalibrateImage+0x52>
    else if( freq > 460000000 )
 80118ea:	4b15      	ldr	r3, [pc, #84]	; (8011940 <SUBGRF_CalibrateImage+0x6c>)
 80118ec:	4298      	cmp	r0, r3
 80118ee:	d81d      	bhi.n	801192c <SUBGRF_CalibrateImage+0x58>
    else if( freq > 425000000 )
 80118f0:	4a14      	ldr	r2, [pc, #80]	; (8011944 <SUBGRF_CalibrateImage+0x70>)
 80118f2:	4290      	cmp	r0, r2
 80118f4:	bf94      	ite	ls
 80118f6:	2329      	movls	r3, #41	; 0x29
 80118f8:	236b      	movhi	r3, #107	; 0x6b
 80118fa:	4290      	cmp	r0, r2
 80118fc:	bf94      	ite	ls
 80118fe:	202b      	movls	r0, #43	; 0x2b
 8011900:	206f      	movhi	r0, #111	; 0x6f
 8011902:	e001      	b.n	8011908 <SUBGRF_CalibrateImage+0x34>
 8011904:	23e1      	movs	r3, #225	; 0xe1
 8011906:	20e9      	movs	r0, #233	; 0xe9
        calFreq[0] = 0xE1;
 8011908:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 801190c:	f88d 0005 	strb.w	r0, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8011910:	2202      	movs	r2, #2
 8011912:	a901      	add	r1, sp, #4
 8011914:	2098      	movs	r0, #152	; 0x98
 8011916:	f7ff fe8f 	bl	8011638 <SUBGRF_WriteCommand>
}
 801191a:	b003      	add	sp, #12
 801191c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011920:	23d7      	movs	r3, #215	; 0xd7
 8011922:	20db      	movs	r0, #219	; 0xdb
 8011924:	e7f0      	b.n	8011908 <SUBGRF_CalibrateImage+0x34>
 8011926:	23c1      	movs	r3, #193	; 0xc1
 8011928:	20c5      	movs	r0, #197	; 0xc5
 801192a:	e7ed      	b.n	8011908 <SUBGRF_CalibrateImage+0x34>
 801192c:	2375      	movs	r3, #117	; 0x75
 801192e:	2081      	movs	r0, #129	; 0x81
 8011930:	e7ea      	b.n	8011908 <SUBGRF_CalibrateImage+0x34>
 8011932:	bf00      	nop
 8011934:	35a4e900 	.word	0x35a4e900
 8011938:	32a9f880 	.word	0x32a9f880
 801193c:	2de54480 	.word	0x2de54480
 8011940:	1b6b0b00 	.word	0x1b6b0b00
 8011944:	1954fc40 	.word	0x1954fc40

08011948 <SUBGRF_SetPaConfig>:
{
 8011948:	b500      	push	{lr}
 801194a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 801194c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011950:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8011954:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011958:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801195c:	2204      	movs	r2, #4
 801195e:	eb0d 0102 	add.w	r1, sp, r2
 8011962:	2095      	movs	r0, #149	; 0x95
 8011964:	f7ff fe68 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011968:	b003      	add	sp, #12
 801196a:	f85d fb04 	ldr.w	pc, [sp], #4

0801196e <SUBGRF_SetDioIrqParams>:
{
 801196e:	b500      	push	{lr}
 8011970:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011972:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8011976:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801197a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801197e:	0a08      	lsrs	r0, r1, #8
 8011980:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011984:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011988:	0a11      	lsrs	r1, r2, #8
 801198a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801198e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011992:	0a1a      	lsrs	r2, r3, #8
 8011994:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011998:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801199c:	2208      	movs	r2, #8
 801199e:	4669      	mov	r1, sp
 80119a0:	4610      	mov	r0, r2
 80119a2:	f7ff fe49 	bl	8011638 <SUBGRF_WriteCommand>
}
 80119a6:	b003      	add	sp, #12
 80119a8:	f85d fb04 	ldr.w	pc, [sp], #4

080119ac <SUBGRF_SetTcxoMode>:
{
 80119ac:	b500      	push	{lr}
 80119ae:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80119b0:	f000 0007 	and.w	r0, r0, #7
 80119b4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80119b8:	0c0b      	lsrs	r3, r1, #16
 80119ba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80119be:	0a0b      	lsrs	r3, r1, #8
 80119c0:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80119c4:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80119c8:	2204      	movs	r2, #4
 80119ca:	eb0d 0102 	add.w	r1, sp, r2
 80119ce:	2097      	movs	r0, #151	; 0x97
 80119d0:	f7ff fe32 	bl	8011638 <SUBGRF_WriteCommand>
}
 80119d4:	b003      	add	sp, #12
 80119d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080119dc <SUBGRF_Init>:
{
 80119dc:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80119de:	b108      	cbz	r0, 80119e4 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80119e0:	4a18      	ldr	r2, [pc, #96]	; (8011a44 <SUBGRF_Init+0x68>)
 80119e2:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80119e4:	f7f0 fb52 	bl	800208c <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80119e8:	2002      	movs	r0, #2
 80119ea:	f7ff fd77 	bl	80114dc <Radio_SMPS_Set>
    ImageCalibrated = false;
 80119ee:	2000      	movs	r0, #0
 80119f0:	4b15      	ldr	r3, [pc, #84]	; (8011a48 <SUBGRF_Init+0x6c>)
 80119f2:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80119f4:	f7ff fe4a 	bl	801168c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80119f8:	f7f7 f9e2 	bl	8008dc0 <RBI_IsTCXO>
 80119fc:	2801      	cmp	r0, #1
 80119fe:	d014      	beq.n	8011a2a <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011a00:	2120      	movs	r1, #32
 8011a02:	f640 1011 	movw	r0, #2321	; 0x911
 8011a06:	f7ff fd49 	bl	801149c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011a0a:	2120      	movs	r1, #32
 8011a0c:	f640 1012 	movw	r0, #2322	; 0x912
 8011a10:	f7ff fd44 	bl	801149c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011a14:	210e      	movs	r1, #14
 8011a16:	f640 101f 	movw	r0, #2335	; 0x91f
 8011a1a:	f7ff fd3f 	bl	801149c <SUBGRF_WriteRegister>
    RBI_Init();
 8011a1e:	f7f7 f9c3 	bl	8008da8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8011a22:	4b0a      	ldr	r3, [pc, #40]	; (8011a4c <SUBGRF_Init+0x70>)
 8011a24:	2201      	movs	r2, #1
 8011a26:	701a      	strb	r2, [r3, #0]
}
 8011a28:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8011a2a:	2140      	movs	r1, #64	; 0x40
 8011a2c:	f7ff ffbe 	bl	80119ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8011a30:	2100      	movs	r1, #0
 8011a32:	f640 1011 	movw	r0, #2321	; 0x911
 8011a36:	f7ff fd31 	bl	801149c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8011a3a:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8011a3e:	f7ff ff3a 	bl	80118b6 <SUBGRF_Calibrate>
 8011a42:	e7e7      	b.n	8011a14 <SUBGRF_Init+0x38>
 8011a44:	20001848 	.word	0x20001848
 8011a48:	20001844 	.word	0x20001844
 8011a4c:	20001846 	.word	0x20001846

08011a50 <SUBGRF_SetRfFrequency>:
{
 8011a50:	b510      	push	{r4, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011a56:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <SUBGRF_SetRfFrequency+0x4c>)
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	b1c3      	cbz	r3, 8011a8e <SUBGRF_SetRfFrequency+0x3e>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011a5c:	4a10      	ldr	r2, [pc, #64]	; (8011aa0 <SUBGRF_SetRfFrequency+0x50>)
 8011a5e:	2300      	movs	r3, #0
 8011a60:	0660      	lsls	r0, r4, #25
 8011a62:	09e1      	lsrs	r1, r4, #7
 8011a64:	f7ef f992 	bl	8000d8c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011a68:	0e03      	lsrs	r3, r0, #24
 8011a6a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8011a6e:	0c03      	lsrs	r3, r0, #16
 8011a70:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011a74:	0a03      	lsrs	r3, r0, #8
 8011a76:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8011a7a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011a7e:	2204      	movs	r2, #4
 8011a80:	eb0d 0102 	add.w	r1, sp, r2
 8011a84:	2086      	movs	r0, #134	; 0x86
 8011a86:	f7ff fdd7 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011a8a:	b002      	add	sp, #8
 8011a8c:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8011a8e:	f7ff ff21 	bl	80118d4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011a92:	4b02      	ldr	r3, [pc, #8]	; (8011a9c <SUBGRF_SetRfFrequency+0x4c>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	701a      	strb	r2, [r3, #0]
 8011a98:	e7e0      	b.n	8011a5c <SUBGRF_SetRfFrequency+0xc>
 8011a9a:	bf00      	nop
 8011a9c:	20001844 	.word	0x20001844
 8011aa0:	01e84800 	.word	0x01e84800

08011aa4 <SUBGRF_SetPacketType>:
{
 8011aa4:	b500      	push	{lr}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8011aac:	4b08      	ldr	r3, [pc, #32]	; (8011ad0 <SUBGRF_SetPacketType+0x2c>)
 8011aae:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8011ab0:	b140      	cbz	r0, 8011ac4 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	f10d 0107 	add.w	r1, sp, #7
 8011ab8:	208a      	movs	r0, #138	; 0x8a
 8011aba:	f7ff fdbd 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011abe:	b003      	add	sp, #12
 8011ac0:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011aca:	f7ff fce7 	bl	801149c <SUBGRF_WriteRegister>
 8011ace:	e7f0      	b.n	8011ab2 <SUBGRF_SetPacketType+0xe>
 8011ad0:	20001847 	.word	0x20001847

08011ad4 <SUBGRF_SetTxParams>:
{
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	460c      	mov	r4, r1
 8011ada:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8011adc:	2801      	cmp	r0, #1
 8011ade:	d036      	beq.n	8011b4e <SUBGRF_SetTxParams+0x7a>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8011ae0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011ae4:	f7ff fcea 	bl	80114bc <SUBGRF_ReadRegister>
 8011ae8:	f040 011e 	orr.w	r1, r0, #30
 8011aec:	b2c9      	uxtb	r1, r1
 8011aee:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011af2:	f7ff fcd3 	bl	801149c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8011af6:	2001      	movs	r0, #1
 8011af8:	f7f7 f96a 	bl	8008dd0 <RBI_GetRFOMaxPowerConfig>
 8011afc:	4605      	mov	r5, r0
        if (power > max_power)
 8011afe:	4284      	cmp	r4, r0
            power = max_power;
 8011b00:	bfc8      	it	gt
 8011b02:	b244      	sxtbgt	r4, r0
        if (max_power == 20)
 8011b04:	2814      	cmp	r0, #20
 8011b06:	d052      	beq.n	8011bae <SUBGRF_SetTxParams+0xda>
        else if (max_power == 17)
 8011b08:	2811      	cmp	r0, #17
 8011b0a:	d059      	beq.n	8011bc0 <SUBGRF_SetTxParams+0xec>
        else if (max_power == 14)
 8011b0c:	280e      	cmp	r0, #14
 8011b0e:	d060      	beq.n	8011bd2 <SUBGRF_SetTxParams+0xfe>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8011b10:	2301      	movs	r3, #1
 8011b12:	2200      	movs	r2, #0
 8011b14:	2107      	movs	r1, #7
 8011b16:	2004      	movs	r0, #4
 8011b18:	f7ff ff16 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011b1c:	f1c5 0516 	rsb	r5, r5, #22
 8011b20:	4425      	add	r5, r4
 8011b22:	b26c      	sxtb	r4, r5
        if (power < -9)
 8011b24:	f06f 0308 	mvn.w	r3, #8
 8011b28:	429c      	cmp	r4, r3
 8011b2a:	bfb8      	it	lt
 8011b2c:	461c      	movlt	r4, r3
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8011b2e:	2138      	movs	r1, #56	; 0x38
 8011b30:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011b34:	f7ff fcb2 	bl	801149c <SUBGRF_WriteRegister>
    buf[0] = power;
 8011b38:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8011b3c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8011b40:	2202      	movs	r2, #2
 8011b42:	a901      	add	r1, sp, #4
 8011b44:	208e      	movs	r0, #142	; 0x8e
 8011b46:	f7ff fd77 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011b4a:	b002      	add	sp, #8
 8011b4c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8011b4e:	2000      	movs	r0, #0
 8011b50:	f7f7 f93e 	bl	8008dd0 <RBI_GetRFOMaxPowerConfig>
 8011b54:	4605      	mov	r5, r0
        if (power >  max_power)
 8011b56:	4284      	cmp	r4, r0
          power = max_power;
 8011b58:	bfc8      	it	gt
 8011b5a:	b244      	sxtbgt	r4, r0
        if (max_power == 14)
 8011b5c:	280e      	cmp	r0, #14
 8011b5e:	d016      	beq.n	8011b8e <SUBGRF_SetTxParams+0xba>
        else if (max_power == 10)
 8011b60:	280a      	cmp	r0, #10
 8011b62:	d01b      	beq.n	8011b9c <SUBGRF_SetTxParams+0xc8>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8011b64:	2301      	movs	r3, #1
 8011b66:	461a      	mov	r2, r3
 8011b68:	2100      	movs	r1, #0
 8011b6a:	2007      	movs	r0, #7
 8011b6c:	f7ff feec 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011b70:	f1c5 050e 	rsb	r5, r5, #14
 8011b74:	4425      	add	r5, r4
 8011b76:	b26c      	sxtb	r4, r5
        if (power < -17)
 8011b78:	f06f 0310 	mvn.w	r3, #16
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	bfb8      	it	lt
 8011b80:	461c      	movlt	r4, r3
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8011b82:	2118      	movs	r1, #24
 8011b84:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011b88:	f7ff fc88 	bl	801149c <SUBGRF_WriteRegister>
 8011b8c:	e7d4      	b.n	8011b38 <SUBGRF_SetTxParams+0x64>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8011b8e:	2301      	movs	r3, #1
 8011b90:	461a      	mov	r2, r3
 8011b92:	2100      	movs	r1, #0
 8011b94:	2004      	movs	r0, #4
 8011b96:	f7ff fed7 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011b9a:	e7ed      	b.n	8011b78 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff fed0 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8011ba8:	3403      	adds	r4, #3
 8011baa:	b264      	sxtb	r4, r4
 8011bac:	e7e4      	b.n	8011b78 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8011bae:	2301      	movs	r3, #1
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	2105      	movs	r1, #5
 8011bb4:	2003      	movs	r0, #3
 8011bb6:	f7ff fec7 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011bba:	3402      	adds	r4, #2
 8011bbc:	b264      	sxtb	r4, r4
 8011bbe:	e7b1      	b.n	8011b24 <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	2103      	movs	r1, #3
 8011bc6:	2002      	movs	r0, #2
 8011bc8:	f7ff febe 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011bcc:	3405      	adds	r4, #5
 8011bce:	b264      	sxtb	r4, r4
 8011bd0:	e7a8      	b.n	8011b24 <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2102      	movs	r1, #2
 8011bd8:	4608      	mov	r0, r1
 8011bda:	f7ff feb5 	bl	8011948 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011bde:	e7a1      	b.n	8011b24 <SUBGRF_SetTxParams+0x50>

08011be0 <SUBGRF_SetModulationParams>:
{
 8011be0:	b510      	push	{r4, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011be6:	4b3e      	ldr	r3, [pc, #248]	; (8011ce0 <SUBGRF_SetModulationParams+0x100>)
 8011be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011bec:	ab02      	add	r3, sp, #8
 8011bee:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8011bf2:	7820      	ldrb	r0, [r4, #0]
 8011bf4:	4b3b      	ldr	r3, [pc, #236]	; (8011ce4 <SUBGRF_SetModulationParams+0x104>)
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	4283      	cmp	r3, r0
 8011bfa:	d106      	bne.n	8011c0a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8011bfc:	7823      	ldrb	r3, [r4, #0]
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d82c      	bhi.n	8011c5c <SUBGRF_SetModulationParams+0x7c>
 8011c02:	e8df f003 	tbb	[pc, r3]
 8011c06:	4205      	.short	0x4205
 8011c08:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8011c0a:	f7ff ff4b 	bl	8011aa4 <SUBGRF_SetPacketType>
 8011c0e:	e7f5      	b.n	8011bfc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8011c10:	6862      	ldr	r2, [r4, #4]
 8011c12:	4b35      	ldr	r3, [pc, #212]	; (8011ce8 <SUBGRF_SetModulationParams+0x108>)
 8011c14:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011c18:	0c1a      	lsrs	r2, r3, #16
 8011c1a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011c1e:	0a1a      	lsrs	r2, r3, #8
 8011c20:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011c24:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011c28:	7b23      	ldrb	r3, [r4, #12]
 8011c2a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011c2e:	7b63      	ldrb	r3, [r4, #13]
 8011c30:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8011c34:	68a1      	ldr	r1, [r4, #8]
 8011c36:	4a2d      	ldr	r2, [pc, #180]	; (8011cec <SUBGRF_SetModulationParams+0x10c>)
 8011c38:	2300      	movs	r3, #0
 8011c3a:	0648      	lsls	r0, r1, #25
 8011c3c:	09c9      	lsrs	r1, r1, #7
 8011c3e:	f7ef f8a5 	bl	8000d8c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011c42:	0c03      	lsrs	r3, r0, #16
 8011c44:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011c48:	0a03      	lsrs	r3, r0, #8
 8011c4a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011c4e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011c52:	2208      	movs	r2, #8
 8011c54:	4669      	mov	r1, sp
 8011c56:	208b      	movs	r0, #139	; 0x8b
 8011c58:	f7ff fcee 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011c5c:	b002      	add	sp, #8
 8011c5e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011c60:	6922      	ldr	r2, [r4, #16]
 8011c62:	4b21      	ldr	r3, [pc, #132]	; (8011ce8 <SUBGRF_SetModulationParams+0x108>)
 8011c64:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011c68:	0c1a      	lsrs	r2, r3, #16
 8011c6a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011c6e:	0a1a      	lsrs	r2, r3, #8
 8011c70:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011c74:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011c78:	7d23      	ldrb	r3, [r4, #20]
 8011c7a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011c7e:	2204      	movs	r2, #4
 8011c80:	4669      	mov	r1, sp
 8011c82:	208b      	movs	r0, #139	; 0x8b
 8011c84:	f7ff fcd8 	bl	8011638 <SUBGRF_WriteCommand>
        break;
 8011c88:	e7e8      	b.n	8011c5c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011c8a:	7e23      	ldrb	r3, [r4, #24]
 8011c8c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011c90:	7e63      	ldrb	r3, [r4, #25]
 8011c92:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011c96:	7ea3      	ldrb	r3, [r4, #26]
 8011c98:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011c9c:	7ee3      	ldrb	r3, [r4, #27]
 8011c9e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011ca2:	2204      	movs	r2, #4
 8011ca4:	4669      	mov	r1, sp
 8011ca6:	208b      	movs	r0, #139	; 0x8b
 8011ca8:	f7ff fcc6 	bl	8011638 <SUBGRF_WriteCommand>
        break;
 8011cac:	e7d6      	b.n	8011c5c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8011cae:	6862      	ldr	r2, [r4, #4]
 8011cb0:	4b0d      	ldr	r3, [pc, #52]	; (8011ce8 <SUBGRF_SetModulationParams+0x108>)
 8011cb2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011cb6:	0c1a      	lsrs	r2, r3, #16
 8011cb8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011cbc:	0a1a      	lsrs	r2, r3, #8
 8011cbe:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011cc2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011cc6:	7b23      	ldrb	r3, [r4, #12]
 8011cc8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011ccc:	7b63      	ldrb	r3, [r4, #13]
 8011cce:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011cd2:	2205      	movs	r2, #5
 8011cd4:	4669      	mov	r1, sp
 8011cd6:	208b      	movs	r0, #139	; 0x8b
 8011cd8:	f7ff fcae 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011cdc:	e7be      	b.n	8011c5c <SUBGRF_SetModulationParams+0x7c>
 8011cde:	bf00      	nop
 8011ce0:	08013168 	.word	0x08013168
 8011ce4:	20001847 	.word	0x20001847
 8011ce8:	3d090000 	.word	0x3d090000
 8011cec:	01e84800 	.word	0x01e84800

08011cf0 <SUBGRF_SetPacketParams>:
{
 8011cf0:	b510      	push	{r4, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011cf6:	ab01      	add	r3, sp, #4
 8011cf8:	4a33      	ldr	r2, [pc, #204]	; (8011dc8 <SUBGRF_SetPacketParams+0xd8>)
 8011cfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8011cfc:	c303      	stmia	r3!, {r0, r1}
 8011cfe:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8011d00:	7820      	ldrb	r0, [r4, #0]
 8011d02:	4b32      	ldr	r3, [pc, #200]	; (8011dcc <SUBGRF_SetPacketParams+0xdc>)
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	4283      	cmp	r3, r0
 8011d08:	d106      	bne.n	8011d18 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011d0a:	7823      	ldrb	r3, [r4, #0]
 8011d0c:	2b03      	cmp	r3, #3
 8011d0e:	d82a      	bhi.n	8011d66 <SUBGRF_SetPacketParams+0x76>
 8011d10:	e8df f003 	tbb	[pc, r3]
 8011d14:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011d18:	f7ff fec4 	bl	8011aa4 <SUBGRF_SetPacketType>
 8011d1c:	e7f5      	b.n	8011d0a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8011d1e:	7a63      	ldrb	r3, [r4, #9]
 8011d20:	2bf1      	cmp	r3, #241	; 0xf1
 8011d22:	d022      	beq.n	8011d6a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8011d24:	2bf2      	cmp	r3, #242	; 0xf2
 8011d26:	d02a      	beq.n	8011d7e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8011d28:	8862      	ldrh	r2, [r4, #2]
 8011d2a:	0a11      	lsrs	r1, r2, #8
 8011d2c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8011d30:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8011d34:	7922      	ldrb	r2, [r4, #4]
 8011d36:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8011d3a:	7962      	ldrb	r2, [r4, #5]
 8011d3c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8011d40:	79a2      	ldrb	r2, [r4, #6]
 8011d42:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8011d46:	79e2      	ldrb	r2, [r4, #7]
 8011d48:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011d4c:	7a22      	ldrb	r2, [r4, #8]
 8011d4e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8011d52:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8011d56:	7aa3      	ldrb	r3, [r4, #10]
 8011d58:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011d5c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011d5e:	a901      	add	r1, sp, #4
 8011d60:	208c      	movs	r0, #140	; 0x8c
 8011d62:	f7ff fc69 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011d66:	b004      	add	sp, #16
 8011d68:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011d6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d6e:	f7ff fbff 	bl	8011570 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011d72:	f248 0005 	movw	r0, #32773	; 0x8005
 8011d76:	f7ff fc11 	bl	801159c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011d7a:	2302      	movs	r3, #2
 8011d7c:	e7d4      	b.n	8011d28 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8011d7e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8011d82:	f7ff fbf5 	bl	8011570 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011d86:	f241 0021 	movw	r0, #4129	; 0x1021
 8011d8a:	f7ff fc07 	bl	801159c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8011d8e:	2306      	movs	r3, #6
 8011d90:	e7ca      	b.n	8011d28 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8011d92:	7b23      	ldrb	r3, [r4, #12]
 8011d94:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011d98:	2201      	movs	r2, #1
        break;
 8011d9a:	e7e0      	b.n	8011d5e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011d9c:	89e3      	ldrh	r3, [r4, #14]
 8011d9e:	0a1a      	lsrs	r2, r3, #8
 8011da0:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011da4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011da8:	7c23      	ldrb	r3, [r4, #16]
 8011daa:	4a09      	ldr	r2, [pc, #36]	; (8011dd0 <SUBGRF_SetPacketParams+0xe0>)
 8011dac:	7013      	strb	r3, [r2, #0]
 8011dae:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8011db2:	7c63      	ldrb	r3, [r4, #17]
 8011db4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011db8:	7ca3      	ldrb	r3, [r4, #18]
 8011dba:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8011dbe:	7ce3      	ldrb	r3, [r4, #19]
 8011dc0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011dc4:	2206      	movs	r2, #6
        break;
 8011dc6:	e7ca      	b.n	8011d5e <SUBGRF_SetPacketParams+0x6e>
 8011dc8:	08013170 	.word	0x08013170
 8011dcc:	20001847 	.word	0x20001847
 8011dd0:	20001845 	.word	0x20001845

08011dd4 <SUBGRF_SetBufferBaseAddress>:
{
 8011dd4:	b500      	push	{lr}
 8011dd6:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011dd8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011ddc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011de0:	2202      	movs	r2, #2
 8011de2:	a901      	add	r1, sp, #4
 8011de4:	208f      	movs	r0, #143	; 0x8f
 8011de6:	f7ff fc27 	bl	8011638 <SUBGRF_WriteCommand>
}
 8011dea:	b003      	add	sp, #12
 8011dec:	f85d fb04 	ldr.w	pc, [sp], #4

08011df0 <SUBGRF_ReadCommand>:
{
 8011df0:	b510      	push	{r4, lr}
 8011df2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011df4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011df8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011dfa:	460a      	mov	r2, r1
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	4803      	ldr	r0, [pc, #12]	; (8011e0c <SUBGRF_ReadCommand+0x1c>)
 8011e00:	f7f5 f8b6 	bl	8006f70 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e04:	f384 8810 	msr	PRIMASK, r4
}
 8011e08:	bd10      	pop	{r4, pc}
 8011e0a:	bf00      	nop
 8011e0c:	200003a0 	.word	0x200003a0

08011e10 <SUBGRF_GetRssiInst>:
{
 8011e10:	b500      	push	{lr}
 8011e12:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011e14:	2201      	movs	r2, #1
 8011e16:	a901      	add	r1, sp, #4
 8011e18:	2015      	movs	r0, #21
 8011e1a:	f7ff ffe9 	bl	8011df0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011e1e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011e22:	4240      	negs	r0, r0
}
 8011e24:	1040      	asrs	r0, r0, #1
 8011e26:	b003      	add	sp, #12
 8011e28:	f85d fb04 	ldr.w	pc, [sp], #4

08011e2c <SUBGRF_GetRxBufferStatus>:
{
 8011e2c:	b530      	push	{r4, r5, lr}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	4605      	mov	r5, r0
 8011e32:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8011e34:	2202      	movs	r2, #2
 8011e36:	a901      	add	r1, sp, #4
 8011e38:	2013      	movs	r0, #19
 8011e3a:	f7ff ffd9 	bl	8011df0 <SUBGRF_ReadCommand>
    return PacketType;
 8011e3e:	4b0b      	ldr	r3, [pc, #44]	; (8011e6c <SUBGRF_GetRxBufferStatus+0x40>)
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d007      	beq.n	8011e56 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8011e46:	f89d 3004 	ldrb.w	r3, [sp, #4]
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011e4a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8011e4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011e50:	7023      	strb	r3, [r4, #0]
}
 8011e52:	b003      	add	sp, #12
 8011e54:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011e56:	4b06      	ldr	r3, [pc, #24]	; (8011e70 <SUBGRF_GetRxBufferStatus+0x44>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d1f2      	bne.n	8011e46 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011e60:	f240 7002 	movw	r0, #1794	; 0x702
 8011e64:	f7ff fb2a 	bl	80114bc <SUBGRF_ReadRegister>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	e7ee      	b.n	8011e4a <SUBGRF_GetRxBufferStatus+0x1e>
 8011e6c:	20001847 	.word	0x20001847
 8011e70:	20001845 	.word	0x20001845

08011e74 <SUBGRF_GetPayload>:
{
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	4606      	mov	r6, r0
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8011e84:	f10d 0107 	add.w	r1, sp, #7
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f7ff ffcf 	bl	8011e2c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011e8e:	7822      	ldrb	r2, [r4, #0]
 8011e90:	42aa      	cmp	r2, r5
 8011e92:	d902      	bls.n	8011e9a <SUBGRF_GetPayload+0x26>
        return 1;
 8011e94:	2001      	movs	r0, #1
}
 8011e96:	b002      	add	sp, #8
 8011e98:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011e9a:	4631      	mov	r1, r6
 8011e9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011ea0:	f7ff fbba 	bl	8011618 <SUBGRF_ReadBuffer>
    return 0;
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	e7f6      	b.n	8011e96 <SUBGRF_GetPayload+0x22>

08011ea8 <SUBGRF_GetPacketStatus>:
{
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011eae:	2203      	movs	r2, #3
 8011eb0:	a901      	add	r1, sp, #4
 8011eb2:	2014      	movs	r0, #20
 8011eb4:	f7ff ff9c 	bl	8011df0 <SUBGRF_ReadCommand>
    return PacketType;
 8011eb8:	4b18      	ldr	r3, [pc, #96]	; (8011f1c <SUBGRF_GetPacketStatus+0x74>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011ebc:	7023      	strb	r3, [r4, #0]
    switch( pktStatus->packetType )
 8011ebe:	b14b      	cbz	r3, 8011ed4 <SUBGRF_GetPacketStatus+0x2c>
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d018      	beq.n	8011ef6 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011ec4:	2214      	movs	r2, #20
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f000 f98c 	bl	80121e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011ece:	230f      	movs	r3, #15
 8011ed0:	7023      	strb	r3, [r4, #0]
}
 8011ed2:	e00e      	b.n	8011ef2 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011ed4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ed8:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011eda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ede:	425b      	negs	r3, r3
 8011ee0:	105b      	asrs	r3, r3, #1
 8011ee2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011ee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ee8:	425b      	negs	r3, r3
 8011eea:	105b      	asrs	r3, r3, #1
 8011eec:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	60a3      	str	r3, [r4, #8]
}
 8011ef2:	b002      	add	sp, #8
 8011ef4:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011efa:	425b      	negs	r3, r3
 8011efc:	105b      	asrs	r3, r3, #1
 8011efe:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011f00:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011f04:	3302      	adds	r3, #2
 8011f06:	109b      	asrs	r3, r3, #2
 8011f08:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011f0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f0e:	425b      	negs	r3, r3
 8011f10:	105b      	asrs	r3, r3, #1
 8011f12:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011f14:	4b02      	ldr	r3, [pc, #8]	; (8011f20 <SUBGRF_GetPacketStatus+0x78>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	6123      	str	r3, [r4, #16]
            break;
 8011f1a:	e7ea      	b.n	8011ef2 <SUBGRF_GetPacketStatus+0x4a>
 8011f1c:	20001847 	.word	0x20001847
 8011f20:	20001840 	.word	0x20001840

08011f24 <SUBGRF_SetSwitch>:
{
 8011f24:	b508      	push	{r3, lr}
    if (rxtx == RFSWITCH_TX)
 8011f26:	2901      	cmp	r1, #1
 8011f28:	d003      	beq.n	8011f32 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011f2a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011f2c:	f7f6 ff40 	bl	8008db0 <RBI_ConfigRFSwitch>
}
 8011f30:	bd08      	pop	{r3, pc}
 8011f32:	4603      	mov	r3, r0
 8011f34:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d004      	beq.n	8011f44 <SUBGRF_SetSwitch+0x20>
            state = RBI_SWITCH_RFO_HP;
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	bf14      	ite	ne
 8011f3e:	4608      	movne	r0, r1
 8011f40:	2003      	moveq	r0, #3
 8011f42:	e7f3      	b.n	8011f2c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8011f44:	2004      	movs	r0, #4
 8011f46:	f7ff fac9 	bl	80114dc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011f4a:	2002      	movs	r0, #2
 8011f4c:	e7ee      	b.n	8011f2c <SUBGRF_SetSwitch+0x8>

08011f4e <SUBGRF_SetRfTxPower>:
{
 8011f4e:	b538      	push	{r3, r4, r5, lr}
 8011f50:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011f52:	f7f6 ff31 	bl	8008db8 <RBI_GetTxConfig>
    switch (TxConfig)
 8011f56:	b150      	cbz	r0, 8011f6e <SUBGRF_SetRfTxPower+0x20>
 8011f58:	2802      	cmp	r0, #2
 8011f5a:	bf14      	ite	ne
 8011f5c:	2501      	movne	r5, #1
 8011f5e:	2502      	moveq	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011f60:	2202      	movs	r2, #2
 8011f62:	4621      	mov	r1, r4
 8011f64:	4628      	mov	r0, r5
 8011f66:	f7ff fdb5 	bl	8011ad4 <SUBGRF_SetTxParams>
}
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
                paSelect = RFO_LP;
 8011f6e:	2c0f      	cmp	r4, #15
 8011f70:	bfcc      	ite	gt
 8011f72:	2502      	movgt	r5, #2
 8011f74:	2501      	movle	r5, #1
 8011f76:	e7f3      	b.n	8011f60 <SUBGRF_SetRfTxPower+0x12>

08011f78 <SUBGRF_GetRadioWakeUpTime>:
}
 8011f78:	2001      	movs	r0, #1
 8011f7a:	4770      	bx	lr

08011f7c <HAL_SUBGHZ_TxCpltCallback>:
{
 8011f7c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011f7e:	4b02      	ldr	r3, [pc, #8]	; (8011f88 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2001      	movs	r0, #1
 8011f84:	4798      	blx	r3
}
 8011f86:	bd08      	pop	{r3, pc}
 8011f88:	20001848 	.word	0x20001848

08011f8c <HAL_SUBGHZ_RxCpltCallback>:
{
 8011f8c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011f8e:	4b02      	ldr	r3, [pc, #8]	; (8011f98 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2002      	movs	r0, #2
 8011f94:	4798      	blx	r3
}
 8011f96:	bd08      	pop	{r3, pc}
 8011f98:	20001848 	.word	0x20001848

08011f9c <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011f9c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011f9e:	4b02      	ldr	r3, [pc, #8]	; (8011fa8 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2040      	movs	r0, #64	; 0x40
 8011fa4:	4798      	blx	r3
}
 8011fa6:	bd08      	pop	{r3, pc}
 8011fa8:	20001848 	.word	0x20001848

08011fac <HAL_SUBGHZ_CADStatusCallback>:
{
 8011fac:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011fae:	b111      	cbz	r1, 8011fb6 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011fb0:	2901      	cmp	r1, #1
 8011fb2:	d005      	beq.n	8011fc0 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8011fb4:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8011fb6:	4b05      	ldr	r3, [pc, #20]	; (8011fcc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2080      	movs	r0, #128	; 0x80
 8011fbc:	4798      	blx	r3
            break;
 8011fbe:	e7f9      	b.n	8011fb4 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011fc0:	4b02      	ldr	r3, [pc, #8]	; (8011fcc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011fc8:	4798      	blx	r3
}
 8011fca:	e7f3      	b.n	8011fb4 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8011fcc:	20001848 	.word	0x20001848

08011fd0 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011fd0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011fd2:	4b03      	ldr	r3, [pc, #12]	; (8011fe0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011fda:	4798      	blx	r3
}
 8011fdc:	bd08      	pop	{r3, pc}
 8011fde:	bf00      	nop
 8011fe0:	20001848 	.word	0x20001848

08011fe4 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8011fe4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011fe6:	4b02      	ldr	r3, [pc, #8]	; (8011ff0 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2020      	movs	r0, #32
 8011fec:	4798      	blx	r3
}
 8011fee:	bd08      	pop	{r3, pc}
 8011ff0:	20001848 	.word	0x20001848

08011ff4 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011ff4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011ff6:	4b02      	ldr	r3, [pc, #8]	; (8012000 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2004      	movs	r0, #4
 8011ffc:	4798      	blx	r3
}
 8011ffe:	bd08      	pop	{r3, pc}
 8012000:	20001848 	.word	0x20001848

08012004 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012004:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8012006:	4b02      	ldr	r3, [pc, #8]	; (8012010 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2008      	movs	r0, #8
 801200c:	4798      	blx	r3
}
 801200e:	bd08      	pop	{r3, pc}
 8012010:	20001848 	.word	0x20001848

08012014 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8012014:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8012016:	4b02      	ldr	r3, [pc, #8]	; (8012020 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2010      	movs	r0, #16
 801201c:	4798      	blx	r3
}
 801201e:	bd08      	pop	{r3, pc}
 8012020:	20001848 	.word	0x20001848

08012024 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8012024:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8012026:	4b03      	ldr	r3, [pc, #12]	; (8012034 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801202e:	4798      	blx	r3
}
 8012030:	bd08      	pop	{r3, pc}
 8012032:	bf00      	nop
 8012034:	20001848 	.word	0x20001848

08012038 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8012038:	4601      	mov	r1, r0
 801203a:	b178      	cbz	r0, 801205c <SUBGRF_GetFskBandwidthRegValue+0x24>
 801203c:	2300      	movs	r3, #0
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801203e:	4808      	ldr	r0, [pc, #32]	; (8012060 <SUBGRF_GetFskBandwidthRegValue+0x28>)
 8012040:	469c      	mov	ip, r3
 8012042:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8012046:	428a      	cmp	r2, r1
 8012048:	d803      	bhi.n	8012052 <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801204a:	3301      	adds	r3, #1
 801204c:	2b16      	cmp	r3, #22
 801204e:	d1f7      	bne.n	8012040 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8012050:	e7fe      	b.n	8012050 <SUBGRF_GetFskBandwidthRegValue+0x18>
            return FskBandwidths[i].RegValue;
 8012052:	4b03      	ldr	r3, [pc, #12]	; (8012060 <SUBGRF_GetFskBandwidthRegValue+0x28>)
 8012054:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8012058:	7918      	ldrb	r0, [r3, #4]
 801205a:	4770      	bx	lr
        return( 0x1F );
 801205c:	201f      	movs	r0, #31
}
 801205e:	4770      	bx	lr
 8012060:	08013e5c 	.word	0x08013e5c

08012064 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	4604      	mov	r4, r0
 801206a:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801206c:	4b1c      	ldr	r3, [pc, #112]	; (80120e0 <SUBGRF_GetCFO+0x7c>)
 801206e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8012070:	f640 0007 	movw	r0, #2055	; 0x807
 8012074:	f7ff fa22 	bl	80114bc <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8012078:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 801207c:	3308      	adds	r3, #8
 801207e:	446b      	add	r3, sp
  uint8_t bandwidth_exp = reg & 0x7;
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8012080:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8012084:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8012088:	3301      	adds	r3, #1
 801208a:	409a      	lsls	r2, r3
 801208c:	4b15      	ldr	r3, [pc, #84]	; (80120e4 <SUBGRF_GetCFO+0x80>)
 801208e:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 8012092:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8012096:	2807      	cmp	r0, #7
 8012098:	d820      	bhi.n	80120dc <SUBGRF_GetCFO+0x78>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801209a:	0040      	lsls	r0, r0, #1
  {
    interp = 4;
 801209c:	2803      	cmp	r0, #3
 801209e:	bf8c      	ite	hi
 80120a0:	2402      	movhi	r4, #2
 80120a2:	2404      	movls	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80120a4:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80120a8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80120ac:	f7ff fa06 	bl	80114bc <SUBGRF_ReadRegister>
 80120b0:	0206      	lsls	r6, r0, #8
 80120b2:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80120b6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80120ba:	f7ff f9ff 	bl	80114bc <SUBGRF_ReadRegister>
 80120be:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80120c0:	f410 6f00 	tst.w	r0, #2048	; 0x800
  {
    cfo_bin |= 0xFFFFF000;
 80120c4:	bf1c      	itt	ne
 80120c6:	ea6f 5000 	mvnne.w	r0, r0, lsl #20
 80120ca:	ea6f 5010 	mvnne.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80120ce:	0964      	lsrs	r4, r4, #5
 80120d0:	fb00 f404 	mul.w	r4, r0, r4
 80120d4:	11e4      	asrs	r4, r4, #7
 80120d6:	602c      	str	r4, [r5, #0]
}
 80120d8:	b002      	add	sp, #8
 80120da:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t interp = 1;
 80120dc:	2401      	movs	r4, #1
 80120de:	e7e1      	b.n	80120a4 <SUBGRF_GetCFO+0x40>
 80120e0:	0c0a0804 	.word	0x0c0a0804
 80120e4:	01e84800 	.word	0x01e84800

080120e8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80120e8:	f04f 30ff 	mov.w	r0, #4294967295
 80120ec:	4770      	bx	lr

080120ee <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80120ee:	f04f 30ff 	mov.w	r0, #4294967295
 80120f2:	4770      	bx	lr

080120f4 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80120f4:	f04f 30ff 	mov.w	r0, #4294967295
 80120f8:	4770      	bx	lr

080120fa <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80120fa:	4770      	bx	lr

080120fc <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80120fc:	2000      	movs	r0, #0
 80120fe:	4770      	bx	lr

08012100 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8012100:	2000      	movs	r0, #0
 8012102:	4770      	bx	lr

08012104 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8012104:	4770      	bx	lr

08012106 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8012106:	f04f 30ff 	mov.w	r0, #4294967295
 801210a:	4770      	bx	lr

0801210c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 801210c:	f04f 30ff 	mov.w	r0, #4294967295
 8012110:	4770      	bx	lr

08012112 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8012112:	4770      	bx	lr

08012114 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8012114:	4770      	bx	lr

08012116 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8012116:	4770      	bx	lr

08012118 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012118:	2300      	movs	r3, #0
 801211a:	4a02      	ldr	r2, [pc, #8]	; (8012124 <UTIL_LPM_Init+0xc>)
 801211c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801211e:	4a02      	ldr	r2, [pc, #8]	; (8012128 <UTIL_LPM_Init+0x10>)
 8012120:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012122:	4770      	bx	lr
 8012124:	20001850 	.word	0x20001850
 8012128:	2000184c 	.word	0x2000184c

0801212c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801212c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012130:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012132:	b141      	cbz	r1, 8012146 <UTIL_LPM_SetStopMode+0x1a>
 8012134:	2901      	cmp	r1, #1
 8012136:	d103      	bne.n	8012140 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012138:	4906      	ldr	r1, [pc, #24]	; (8012154 <UTIL_LPM_SetStopMode+0x28>)
 801213a:	680a      	ldr	r2, [r1, #0]
 801213c:	4302      	orrs	r2, r0
 801213e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012140:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012144:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012146:	4903      	ldr	r1, [pc, #12]	; (8012154 <UTIL_LPM_SetStopMode+0x28>)
 8012148:	680a      	ldr	r2, [r1, #0]
 801214a:	ea22 0200 	bic.w	r2, r2, r0
 801214e:	600a      	str	r2, [r1, #0]
      break;
 8012150:	e7f6      	b.n	8012140 <UTIL_LPM_SetStopMode+0x14>
 8012152:	bf00      	nop
 8012154:	20001850 	.word	0x20001850

08012158 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012158:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801215c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801215e:	b141      	cbz	r1, 8012172 <UTIL_LPM_SetOffMode+0x1a>
 8012160:	2901      	cmp	r1, #1
 8012162:	d103      	bne.n	801216c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012164:	4906      	ldr	r1, [pc, #24]	; (8012180 <UTIL_LPM_SetOffMode+0x28>)
 8012166:	680a      	ldr	r2, [r1, #0]
 8012168:	4302      	orrs	r2, r0
 801216a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801216c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012170:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012172:	4903      	ldr	r1, [pc, #12]	; (8012180 <UTIL_LPM_SetOffMode+0x28>)
 8012174:	680a      	ldr	r2, [r1, #0]
 8012176:	ea22 0200 	bic.w	r2, r2, r0
 801217a:	600a      	str	r2, [r1, #0]
      break;
 801217c:	e7f6      	b.n	801216c <UTIL_LPM_SetOffMode+0x14>
 801217e:	bf00      	nop
 8012180:	2000184c 	.word	0x2000184c

08012184 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012184:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012186:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801218a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801218c:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <UTIL_LPM_EnterLowPower+0x3c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	b13b      	cbz	r3, 80121a2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012192:	4d0c      	ldr	r5, [pc, #48]	; (80121c4 <UTIL_LPM_EnterLowPower+0x40>)
 8012194:	682b      	ldr	r3, [r5, #0]
 8012196:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012198:	686b      	ldr	r3, [r5, #4]
 801219a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801219c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80121a0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80121a2:	4b09      	ldr	r3, [pc, #36]	; (80121c8 <UTIL_LPM_EnterLowPower+0x44>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	b12b      	cbz	r3, 80121b4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80121a8:	4d06      	ldr	r5, [pc, #24]	; (80121c4 <UTIL_LPM_EnterLowPower+0x40>)
 80121aa:	68ab      	ldr	r3, [r5, #8]
 80121ac:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80121ae:	68eb      	ldr	r3, [r5, #12]
 80121b0:	4798      	blx	r3
 80121b2:	e7f3      	b.n	801219c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80121b4:	4d03      	ldr	r5, [pc, #12]	; (80121c4 <UTIL_LPM_EnterLowPower+0x40>)
 80121b6:	692b      	ldr	r3, [r5, #16]
 80121b8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80121ba:	696b      	ldr	r3, [r5, #20]
 80121bc:	4798      	blx	r3
 80121be:	e7ed      	b.n	801219c <UTIL_LPM_EnterLowPower+0x18>
 80121c0:	20001850 	.word	0x20001850
 80121c4:	0801317c 	.word	0x0801317c
 80121c8:	2000184c 	.word	0x2000184c

080121cc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80121cc:	1e53      	subs	r3, r2, #1
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	b142      	cbz	r2, 80121e4 <UTIL_MEM_cpy_8+0x18>
 80121d2:	3801      	subs	r0, #1
 80121d4:	3301      	adds	r3, #1
 80121d6:	18ca      	adds	r2, r1, r3
    {
        *dst8++ = *src8++;
 80121d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121dc:	f800 3f01 	strb.w	r3, [r0, #1]!
  while( size-- )
 80121e0:	4291      	cmp	r1, r2
 80121e2:	d1f9      	bne.n	80121d8 <UTIL_MEM_cpy_8+0xc>
    }
}
 80121e4:	4770      	bx	lr

080121e6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80121e6:	1e53      	subs	r3, r2, #1
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	b12a      	cbz	r2, 80121f8 <UTIL_MEM_set_8+0x12>
 80121ec:	3301      	adds	r3, #1
 80121ee:	4403      	add	r3, r0
  {
    *dst8++ = value;
 80121f0:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80121f4:	4298      	cmp	r0, r3
 80121f6:	d1fb      	bne.n	80121f0 <UTIL_MEM_set_8+0xa>
  }
}
 80121f8:	4770      	bx	lr

080121fa <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80121fa:	b082      	sub	sp, #8
 80121fc:	b082      	sub	sp, #8
 80121fe:	f10d 0c08 	add.w	ip, sp, #8
 8012202:	e90c 0006 	stmdb	ip, {r1, r2}
 8012206:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8012208:	440b      	add	r3, r1
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801220a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801220e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012212:	440a      	add	r2, r1
 8012214:	b291      	uxth	r1, r2
 8012216:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 8012218:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801221c:	db03      	blt.n	8012226 <SysTimeAdd+0x2c>
  {
    c.Seconds++;
 801221e:	3301      	adds	r3, #1
    c.SubSeconds -= 1000;
 8012220:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012224:	b20a      	sxth	r2, r1
  }
  return c;
 8012226:	6003      	str	r3, [r0, #0]
 8012228:	8082      	strh	r2, [r0, #4]
}
 801222a:	b002      	add	sp, #8
 801222c:	b002      	add	sp, #8
 801222e:	4770      	bx	lr

08012230 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012230:	b082      	sub	sp, #8
 8012232:	b082      	sub	sp, #8
 8012234:	f10d 0c08 	add.w	ip, sp, #8
 8012238:	e90c 0006 	stmdb	ip, {r1, r2}
 801223c:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 801223e:	1acb      	subs	r3, r1, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012240:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012244:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012248:	1a52      	subs	r2, r2, r1
 801224a:	b291      	uxth	r1, r2
 801224c:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 801224e:	2a00      	cmp	r2, #0
 8012250:	db04      	blt.n	801225c <SysTimeSub+0x2c>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
 8012252:	6003      	str	r3, [r0, #0]
 8012254:	8082      	strh	r2, [r0, #4]
}
 8012256:	b002      	add	sp, #8
 8012258:	b002      	add	sp, #8
 801225a:	4770      	bx	lr
    c.Seconds--;
 801225c:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 801225e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012262:	b20a      	sxth	r2, r1
 8012264:	e7f5      	b.n	8012252 <SysTimeSub+0x22>
	...

08012268 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012268:	b530      	push	{r4, r5, lr}
 801226a:	b085      	sub	sp, #20
 801226c:	466b      	mov	r3, sp
 801226e:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012272:	2300      	movs	r3, #0
 8012274:	9302      	str	r3, [sp, #8]
 8012276:	f8ad 300c 	strh.w	r3, [sp, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801227a:	4b0e      	ldr	r3, [pc, #56]	; (80122b4 <SysTimeSet+0x4c>)
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	a803      	add	r0, sp, #12
 8012280:	4798      	blx	r3
 8012282:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 8012284:	9b00      	ldr	r3, [sp, #0]
 8012286:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012288:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801228c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012290:	1ae4      	subs	r4, r4, r3
 8012292:	b2a3      	uxth	r3, r4
 8012294:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 8012296:	2c00      	cmp	r4, #0
 8012298:	db07      	blt.n	80122aa <SysTimeSet+0x42>

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801229a:	4d06      	ldr	r5, [pc, #24]	; (80122b4 <SysTimeSet+0x4c>)
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80122a0:	68ab      	ldr	r3, [r5, #8]
 80122a2:	4620      	mov	r0, r4
 80122a4:	4798      	blx	r3
}
 80122a6:	b005      	add	sp, #20
 80122a8:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 80122aa:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 80122ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80122b0:	b21c      	sxth	r4, r3
 80122b2:	e7f2      	b.n	801229a <SysTimeSet+0x32>
 80122b4:	08013240 	.word	0x08013240

080122b8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80122b8:	b570      	push	{r4, r5, r6, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80122be:	2300      	movs	r3, #0
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	f8ad 3004 	strh.w	r3, [sp, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80122c6:	4e0e      	ldr	r6, [pc, #56]	; (8012300 <SysTimeGet+0x48>)
 80122c8:	6933      	ldr	r3, [r6, #16]
 80122ca:	a801      	add	r0, sp, #4
 80122cc:	4798      	blx	r3
 80122ce:	9000      	str	r0, [sp, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80122d0:	68f3      	ldr	r3, [r6, #12]
 80122d2:	4798      	blx	r3
 80122d4:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80122d6:	6873      	ldr	r3, [r6, #4]
 80122d8:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 80122da:	9b00      	ldr	r3, [sp, #0]
 80122dc:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80122de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80122e2:	4423      	add	r3, r4
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 80122e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122ec:	db03      	blt.n	80122f6 <SysTimeGet+0x3e>
    c.Seconds++;
 80122ee:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 80122f0:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 80122f4:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 80122f6:	6028      	str	r0, [r5, #0]
 80122f8:	80ab      	strh	r3, [r5, #4]
}
 80122fa:	4628      	mov	r0, r5
 80122fc:	b002      	add	sp, #8
 80122fe:	bd70      	pop	{r4, r5, r6, pc}
 8012300:	08013240 	.word	0x08013240

08012304 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012304:	b530      	push	{r4, r5, lr}
 8012306:	b083      	sub	sp, #12
 8012308:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801230a:	2300      	movs	r3, #0
 801230c:	9300      	str	r3, [sp, #0]
 801230e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012312:	466d      	mov	r5, sp
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <SysTimeGetMcuTime+0x28>)
 8012316:	691b      	ldr	r3, [r3, #16]
 8012318:	a801      	add	r0, sp, #4
 801231a:	4798      	blx	r3
 801231c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801231e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012322:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012326:	4620      	mov	r0, r4
 8012328:	b003      	add	sp, #12
 801232a:	bd30      	pop	{r4, r5, pc}
 801232c:	08013240 	.word	0x08013240

08012330 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012330:	b530      	push	{r4, r5, lr}
 8012332:	b083      	sub	sp, #12
 8012334:	ab02      	add	r3, sp, #8
 8012336:	e903 0003 	stmdb	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801233a:	4d0d      	ldr	r5, [pc, #52]	; (8012370 <SysTimeToMs+0x40>)
 801233c:	68eb      	ldr	r3, [r5, #12]
 801233e:	4798      	blx	r3
 8012340:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012342:	686b      	ldr	r3, [r5, #4]
 8012344:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 8012346:	9a00      	ldr	r2, [sp, #0]
 8012348:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801234a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801234e:	1b1b      	subs	r3, r3, r4
 8012350:	b299      	uxth	r1, r3
 8012352:	b21b      	sxth	r3, r3
  if( c.SubSeconds < 0 )
 8012354:	2b00      	cmp	r3, #0
 8012356:	db05      	blt.n	8012364 <SysTimeToMs+0x34>

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 8012358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801235c:	fb00 3002 	mla	r0, r0, r2, r3
 8012360:	b003      	add	sp, #12
 8012362:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 8012364:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 8012366:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 801236a:	b20b      	sxth	r3, r1
 801236c:	e7f4      	b.n	8012358 <SysTimeToMs+0x28>
 801236e:	bf00      	nop
 8012370:	08013240 	.word	0x08013240

08012374 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	4606      	mov	r6, r0
  uint32_t seconds = timeMs / 1000;
 801237a:	4d12      	ldr	r5, [pc, #72]	; (80123c4 <SysTimeFromMs+0x50>)
 801237c:	fba5 3501 	umull	r3, r5, r5, r1
 8012380:	09ad      	lsrs	r5, r5, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8012382:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 8012386:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801238a:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 801238e:	b29c      	uxth	r4, r3
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012390:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80123c8 <SysTimeFromMs+0x54>
 8012394:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012398:	4798      	blx	r3
 801239a:	4607      	mov	r7, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801239c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123a0:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 80123a2:	4428      	add	r0, r5
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80123a4:	19e3      	adds	r3, r4, r7
 80123a6:	b299      	uxth	r1, r3
 80123a8:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 80123aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80123ae:	db03      	blt.n	80123b8 <SysTimeFromMs+0x44>
    c.Seconds++;
 80123b0:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 80123b2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80123b6:	b20b      	sxth	r3, r1
  return c;
 80123b8:	6030      	str	r0, [r6, #0]
 80123ba:	80b3      	strh	r3, [r6, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 80123bc:	4630      	mov	r0, r6
 80123be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c2:	bf00      	nop
 80123c4:	10624dd3 	.word	0x10624dd3
 80123c8:	08013240 	.word	0x08013240

080123cc <tiny_vsnprintf_like>:

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80123cc:	2900      	cmp	r1, #0
 80123ce:	f340 819e 	ble.w	801270e <tiny_vsnprintf_like+0x342>
{
 80123d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d6:	b097      	sub	sp, #92	; 0x5c
 80123d8:	4682      	mov	sl, r0
 80123da:	4616      	mov	r6, r2
 80123dc:	9302      	str	r3, [sp, #8]
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80123de:	4604      	mov	r4, r0
  {
    CHECK_STR_SIZE(buf, str, size);
 80123e0:	f101 3bff 	add.w	fp, r1, #4294967295
  while (size-- > 0) ASSIGN_STR(' ');
 80123e4:	2720      	movs	r7, #32
 80123e6:	e02d      	b.n	8012444 <tiny_vsnprintf_like+0x78>
    CHECK_STR_SIZE(buf, str, size);
 80123e8:	eba4 020a 	sub.w	r2, r4, sl
 80123ec:	455a      	cmp	r2, fp
 80123ee:	da2c      	bge.n	801244a <tiny_vsnprintf_like+0x7e>

    if (*fmt != '%')
 80123f0:	2b25      	cmp	r3, #37	; 0x25
 80123f2:	d124      	bne.n	801243e <tiny_vsnprintf_like+0x72>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80123f4:	1c72      	adds	r2, r6, #1
    if (*fmt == '0')
 80123f6:	7871      	ldrb	r1, [r6, #1]
 80123f8:	2930      	cmp	r1, #48	; 0x30
 80123fa:	bf14      	ite	ne
 80123fc:	f04f 0c00 	movne.w	ip, #0
 8012400:	f04f 0c01 	moveq.w	ip, #1
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8012404:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012408:	b2db      	uxtb	r3, r3
 801240a:	2b09      	cmp	r3, #9
 801240c:	d924      	bls.n	8012458 <tiny_vsnprintf_like+0x8c>
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801240e:	f1a1 0358 	sub.w	r3, r1, #88	; 0x58
 8012412:	2b20      	cmp	r3, #32
 8012414:	f200 80bb 	bhi.w	801258e <tiny_vsnprintf_like+0x1c2>
 8012418:	e8df f003 	tbb	[pc, r3]
 801241c:	b9b9b99c 	.word	0xb9b9b99c
 8012420:	b9b9b9b9 	.word	0xb9b9b9b9
 8012424:	5fb9b9b9 	.word	0x5fb9b9b9
 8012428:	b9b9b9a6 	.word	0xb9b9b9a6
 801242c:	b9b9a6b9 	.word	0xb9b9a6b9
 8012430:	b9b9b9b9 	.word	0xb9b9b9b9
 8012434:	63b9b9b9 	.word	0x63b9b9b9
 8012438:	b9b9deb9 	.word	0xb9b9deb9
 801243c:	59          	.byte	0x59
 801243d:	00          	.byte	0x00
      *str++ = *fmt;
 801243e:	f804 3b01 	strb.w	r3, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012442:	3601      	adds	r6, #1
 8012444:	7833      	ldrb	r3, [r6, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1ce      	bne.n	80123e8 <tiny_vsnprintf_like+0x1c>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 801244a:	2300      	movs	r3, #0
 801244c:	7023      	strb	r3, [r4, #0]
  return str - buf;
 801244e:	eba4 000a 	sub.w	r0, r4, sl
}
 8012452:	b017      	add	sp, #92	; 0x5c
 8012454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int i = 0;
 8012458:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801245a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801245e:	eb01 0345 	add.w	r3, r1, r5, lsl #1
 8012462:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8012466:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801246a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 801246e:	b2c0      	uxtb	r0, r0
 8012470:	2809      	cmp	r0, #9
 8012472:	d9f2      	bls.n	801245a <tiny_vsnprintf_like+0x8e>
    switch (*fmt)
 8012474:	f1a1 0058 	sub.w	r0, r1, #88	; 0x58
 8012478:	2820      	cmp	r0, #32
 801247a:	f200 808a 	bhi.w	8012592 <tiny_vsnprintf_like+0x1c6>
 801247e:	e8df f000 	tbb	[pc, r0]
 8012482:	8867      	.short	0x8867
 8012484:	88888888 	.word	0x88888888
 8012488:	88888888 	.word	0x88888888
 801248c:	88711188 	.word	0x88711188
 8012490:	71888888 	.word	0x71888888
 8012494:	88888888 	.word	0x88888888
 8012498:	88888888 	.word	0x88888888
 801249c:	a9882e88 	.word	0xa9882e88
 80124a0:	8888      	.short	0x8888
 80124a2:	24          	.byte	0x24
 80124a3:	00          	.byte	0x00
          while (--field_width > 0) *str++ = ' ';
 80124a4:	2b31      	cmp	r3, #49	; 0x31
 80124a6:	bfd8      	it	le
 80124a8:	4623      	movle	r3, r4
 80124aa:	dd05      	ble.n	80124b8 <tiny_vsnprintf_like+0xec>
 80124ac:	3b31      	subs	r3, #49	; 0x31
 80124ae:	4423      	add	r3, r4
 80124b0:	f804 7b01 	strb.w	r7, [r4], #1
 80124b4:	429c      	cmp	r4, r3
 80124b6:	d1fb      	bne.n	80124b0 <tiny_vsnprintf_like+0xe4>
        *str++ = (unsigned char) va_arg(args, int);
 80124b8:	9902      	ldr	r1, [sp, #8]
 80124ba:	461c      	mov	r4, r3
 80124bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80124c0:	f804 3b01 	strb.w	r3, [r4], #1
 80124c4:	9102      	str	r1, [sp, #8]
        continue;
 80124c6:	4616      	mov	r6, r2
 80124c8:	e7bb      	b.n	8012442 <tiny_vsnprintf_like+0x76>
    switch (*fmt)
 80124ca:	4616      	mov	r6, r2
 80124cc:	e002      	b.n	80124d4 <tiny_vsnprintf_like+0x108>
 80124ce:	4616      	mov	r6, r2
 80124d0:	f04f 35ff 	mov.w	r5, #4294967295
    return 0;
 80124d4:	9401      	str	r4, [sp, #4]
        base = 16;
 80124d6:	2410      	movs	r4, #16
 80124d8:	e083      	b.n	80125e2 <tiny_vsnprintf_like+0x216>
    switch (*fmt)
 80124da:	4623      	mov	r3, r4
 80124dc:	e7ec      	b.n	80124b8 <tiny_vsnprintf_like+0xec>
 80124de:	4616      	mov	r6, r2
 80124e0:	e002      	b.n	80124e8 <tiny_vsnprintf_like+0x11c>
 80124e2:	4616      	mov	r6, r2
 80124e4:	f04f 35ff 	mov.w	r5, #4294967295
        s = va_arg(args, char *);
 80124e8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80124ec:	f859 8b04 	ldr.w	r8, [r9], #4
        if (!s) s = "<NULL>";
 80124f0:	f1b8 0f00 	cmp.w	r8, #0
 80124f4:	f000 810d 	beq.w	8012712 <tiny_vsnprintf_like+0x346>
        len = strlen(s);
 80124f8:	4640      	mov	r0, r8
 80124fa:	f7ed fe3d 	bl	8000178 <strlen>
 80124fe:	4602      	mov	r2, r0
          while (len < field_width--) *str++ = ' ';
 8012500:	f105 3cff 	add.w	ip, r5, #4294967295
 8012504:	42a8      	cmp	r0, r5
 8012506:	da0f      	bge.n	8012528 <tiny_vsnprintf_like+0x15c>
        if (!s) s = "<NULL>";
 8012508:	4621      	mov	r1, r4
 801250a:	4660      	mov	r0, ip
          while (len < field_width--) *str++ = ' ';
 801250c:	f801 7b01 	strb.w	r7, [r1], #1
 8012510:	f1c1 0301 	rsb	r3, r1, #1
 8012514:	4423      	add	r3, r4
 8012516:	4463      	add	r3, ip
 8012518:	429a      	cmp	r2, r3
 801251a:	dbf7      	blt.n	801250c <tiny_vsnprintf_like+0x140>
 801251c:	1c43      	adds	r3, r0, #1
 801251e:	1a9b      	subs	r3, r3, r2
 8012520:	4562      	cmp	r2, ip
 8012522:	bfc8      	it	gt
 8012524:	2301      	movgt	r3, #1
 8012526:	441c      	add	r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8012528:	2a00      	cmp	r2, #0
 801252a:	f340 80ed 	ble.w	8012708 <tiny_vsnprintf_like+0x33c>
 801252e:	1e61      	subs	r1, r4, #1
 8012530:	f818 0b01 	ldrb.w	r0, [r8], #1
 8012534:	460b      	mov	r3, r1
 8012536:	f801 0f01 	strb.w	r0, [r1, #1]!
 801253a:	3302      	adds	r3, #2
 801253c:	1b1b      	subs	r3, r3, r4
 801253e:	429a      	cmp	r2, r3
 8012540:	dcf6      	bgt.n	8012530 <tiny_vsnprintf_like+0x164>
 8012542:	2a00      	cmp	r2, #0
 8012544:	bfd8      	it	le
 8012546:	2201      	movle	r2, #1
 8012548:	4414      	add	r4, r2
        s = va_arg(args, char *);
 801254a:	f8cd 9008 	str.w	r9, [sp, #8]
 801254e:	e778      	b.n	8012442 <tiny_vsnprintf_like+0x76>
    switch (*fmt)
 8012550:	4616      	mov	r6, r2
 8012552:	e002      	b.n	801255a <tiny_vsnprintf_like+0x18e>
 8012554:	4616      	mov	r6, r2
 8012556:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= UPPERCASE;
 801255a:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 801255e:	9401      	str	r4, [sp, #4]
        base = 16;
 8012560:	2410      	movs	r4, #16
 8012562:	e03e      	b.n	80125e2 <tiny_vsnprintf_like+0x216>
    switch (*fmt)
 8012564:	4616      	mov	r6, r2
 8012566:	e002      	b.n	801256e <tiny_vsnprintf_like+0x1a2>
 8012568:	4616      	mov	r6, r2
 801256a:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= SIGN;
 801256e:	f04c 0c02 	orr.w	ip, ip, #2
      num = va_arg(args, int);
 8012572:	9902      	ldr	r1, [sp, #8]
 8012574:	f851 2b04 	ldr.w	r2, [r1], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012578:	eba4 030a 	sub.w	r3, r4, sl
 801257c:	ebab 0303 	sub.w	r3, fp, r3
 8012580:	9401      	str	r4, [sp, #4]
      num = va_arg(args, int);
 8012582:	9102      	str	r1, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012584:	240a      	movs	r4, #10
 8012586:	2102      	movs	r1, #2
  char *dig = lower_digits;
 8012588:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 801272c <tiny_vsnprintf_like+0x360>
 801258c:	e03a      	b.n	8012604 <tiny_vsnprintf_like+0x238>
    switch (*fmt)
 801258e:	f04f 35ff 	mov.w	r5, #4294967295
        if (*fmt != '%') *str++ = '%';
 8012592:	2925      	cmp	r1, #37	; 0x25
 8012594:	d00c      	beq.n	80125b0 <tiny_vsnprintf_like+0x1e4>
 8012596:	4621      	mov	r1, r4
 8012598:	2325      	movs	r3, #37	; 0x25
 801259a:	f801 3b01 	strb.w	r3, [r1], #1
 801259e:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 80125a0:	eba1 030a 	sub.w	r3, r1, sl
 80125a4:	459b      	cmp	fp, r3
 80125a6:	dc02      	bgt.n	80125ae <tiny_vsnprintf_like+0x1e2>
 80125a8:	4616      	mov	r6, r2
    base = 10;
 80125aa:	240a      	movs	r4, #10
 80125ac:	e019      	b.n	80125e2 <tiny_vsnprintf_like+0x216>
        if (*fmt != '%') *str++ = '%';
 80125ae:	460c      	mov	r4, r1
        if (*fmt)
 80125b0:	7813      	ldrb	r3, [r2, #0]
 80125b2:	b16b      	cbz	r3, 80125d0 <tiny_vsnprintf_like+0x204>
          *str++ = *fmt;
 80125b4:	4621      	mov	r1, r4
 80125b6:	f801 3b01 	strb.w	r3, [r1], #1
 80125ba:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 80125bc:	eba1 030a 	sub.w	r3, r1, sl
 80125c0:	459b      	cmp	fp, r3
 80125c2:	dc02      	bgt.n	80125ca <tiny_vsnprintf_like+0x1fe>
 80125c4:	4616      	mov	r6, r2
    base = 10;
 80125c6:	240a      	movs	r4, #10
    else if (flags & SIGN)
 80125c8:	e00b      	b.n	80125e2 <tiny_vsnprintf_like+0x216>
 80125ca:	4616      	mov	r6, r2
          *str++ = *fmt;
 80125cc:	460c      	mov	r4, r1
 80125ce:	e738      	b.n	8012442 <tiny_vsnprintf_like+0x76>
          --fmt;
 80125d0:	1e56      	subs	r6, r2, #1
        CHECK_STR_SIZE(buf, str, size);
 80125d2:	e736      	b.n	8012442 <tiny_vsnprintf_like+0x76>
    switch (*fmt)
 80125d4:	4616      	mov	r6, r2
 80125d6:	e002      	b.n	80125de <tiny_vsnprintf_like+0x212>
 80125d8:	4616      	mov	r6, r2
 80125da:	f04f 35ff 	mov.w	r5, #4294967295
    else if (flags & SIGN)
 80125de:	9401      	str	r4, [sp, #4]
 80125e0:	240a      	movs	r4, #10
      num = va_arg(args, unsigned int);
 80125e2:	9802      	ldr	r0, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80125e4:	9b01      	ldr	r3, [sp, #4]
 80125e6:	eba3 030a 	sub.w	r3, r3, sl
 80125ea:	ebab 0303 	sub.w	r3, fp, r3
 80125ee:	f850 2b04 	ldr.w	r2, [r0], #4
  if (type & UPPERCASE)  dig = upper_digits;
 80125f2:	f01c 0140 	ands.w	r1, ip, #64	; 0x40
      num = va_arg(args, unsigned int);
 80125f6:	9002      	str	r0, [sp, #8]
  if (type & UPPERCASE)  dig = upper_digits;
 80125f8:	bf1a      	itte	ne
 80125fa:	2100      	movne	r1, #0
 80125fc:	f8df 8130 	ldrne.w	r8, [pc, #304]	; 8012730 <tiny_vsnprintf_like+0x364>
  char *dig = lower_digits;
 8012600:	f8df 8128 	ldreq.w	r8, [pc, #296]	; 801272c <tiny_vsnprintf_like+0x360>
  c = (type & ZEROPAD) ? '0' : ' ';
 8012604:	f01c 0c01 	ands.w	ip, ip, #1
 8012608:	bf14      	ite	ne
 801260a:	f04f 0930 	movne.w	r9, #48	; 0x30
 801260e:	f04f 0920 	moveq.w	r9, #32
  if (type & SIGN)
 8012612:	b109      	cbz	r1, 8012618 <tiny_vsnprintf_like+0x24c>
    if (num < 0)
 8012614:	2a00      	cmp	r2, #0
 8012616:	db27      	blt.n	8012668 <tiny_vsnprintf_like+0x29c>
  if (num == 0)
 8012618:	bb5a      	cbnz	r2, 8012672 <tiny_vsnprintf_like+0x2a6>
    tmp[i++] = '0';
 801261a:	f04f 0230 	mov.w	r2, #48	; 0x30
 801261e:	f88d 2014 	strb.w	r2, [sp, #20]
 8012622:	2200      	movs	r2, #0
 8012624:	9203      	str	r2, [sp, #12]
 8012626:	2001      	movs	r0, #1
  if (i > precision) precision = i;
 8012628:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
  size -= precision;
 801262c:	1a6d      	subs	r5, r5, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801262e:	f1bc 0f00 	cmp.w	ip, #0
 8012632:	d030      	beq.n	8012696 <tiny_vsnprintf_like+0x2ca>
  if (sign) ASSIGN_STR(sign);
 8012634:	9a03      	ldr	r2, [sp, #12]
 8012636:	b132      	cbz	r2, 8012646 <tiny_vsnprintf_like+0x27a>
 8012638:	9c01      	ldr	r4, [sp, #4]
 801263a:	f804 2b01 	strb.w	r2, [r4], #1
 801263e:	3b01      	subs	r3, #1
 8012640:	f43f aeff 	beq.w	8012442 <tiny_vsnprintf_like+0x76>
 8012644:	9401      	str	r4, [sp, #4]
 8012646:	9a01      	ldr	r2, [sp, #4]
 8012648:	4614      	mov	r4, r2
 801264a:	f105 3cff 	add.w	ip, r5, #4294967295
 801264e:	4494      	add	ip, r2
  while (size-- > 0) ASSIGN_STR(c);
 8012650:	4415      	add	r5, r2
 8012652:	46a0      	mov	r8, r4
 8012654:	ebac 0e04 	sub.w	lr, ip, r4
 8012658:	1b2a      	subs	r2, r5, r4
 801265a:	2a00      	cmp	r2, #0
 801265c:	dd2f      	ble.n	80126be <tiny_vsnprintf_like+0x2f2>
 801265e:	f804 9b01 	strb.w	r9, [r4], #1
 8012662:	3b01      	subs	r3, #1
 8012664:	d1f5      	bne.n	8012652 <tiny_vsnprintf_like+0x286>
 8012666:	e6ec      	b.n	8012442 <tiny_vsnprintf_like+0x76>
      num = -num;
 8012668:	4252      	negs	r2, r2
      size--;
 801266a:	3d01      	subs	r5, #1
      sign = '-';
 801266c:	212d      	movs	r1, #45	; 0x2d
 801266e:	9103      	str	r1, [sp, #12]
 8012670:	e001      	b.n	8012676 <tiny_vsnprintf_like+0x2aa>
 8012672:	2100      	movs	r1, #0
 8012674:	9103      	str	r1, [sp, #12]
    while (num != 0)
 8012676:	f10d 0e14 	add.w	lr, sp, #20
  i = 0;
 801267a:	2000      	movs	r0, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801267c:	3001      	adds	r0, #1
 801267e:	fbb2 f1f4 	udiv	r1, r2, r4
 8012682:	fb04 2211 	mls	r2, r4, r1, r2
 8012686:	f818 2002 	ldrb.w	r2, [r8, r2]
 801268a:	f80e 2b01 	strb.w	r2, [lr], #1
      num = ((unsigned long) num) / (unsigned) base;
 801268e:	460a      	mov	r2, r1
    while (num != 0)
 8012690:	2900      	cmp	r1, #0
 8012692:	d1f3      	bne.n	801267c <tiny_vsnprintf_like+0x2b0>
 8012694:	e7c8      	b.n	8012628 <tiny_vsnprintf_like+0x25c>
 8012696:	9a01      	ldr	r2, [sp, #4]
 8012698:	4614      	mov	r4, r2
 801269a:	f102 3cff 	add.w	ip, r2, #4294967295
 801269e:	44ac      	add	ip, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80126a0:	eb02 0e05 	add.w	lr, r2, r5
 80126a4:	ebac 0504 	sub.w	r5, ip, r4
 80126a8:	ebae 0204 	sub.w	r2, lr, r4
 80126ac:	2a00      	cmp	r2, #0
 80126ae:	dd04      	ble.n	80126ba <tiny_vsnprintf_like+0x2ee>
 80126b0:	f804 7b01 	strb.w	r7, [r4], #1
 80126b4:	3b01      	subs	r3, #1
 80126b6:	d1f5      	bne.n	80126a4 <tiny_vsnprintf_like+0x2d8>
 80126b8:	e6c3      	b.n	8012442 <tiny_vsnprintf_like+0x76>
 80126ba:	9401      	str	r4, [sp, #4]
 80126bc:	e7ba      	b.n	8012634 <tiny_vsnprintf_like+0x268>
  while (i < precision--) ASSIGN_STR('0');
 80126be:	4421      	add	r1, r4
 80126c0:	4625      	mov	r5, r4
 80126c2:	1b0a      	subs	r2, r1, r4
 80126c4:	4282      	cmp	r2, r0
 80126c6:	dd06      	ble.n	80126d6 <tiny_vsnprintf_like+0x30a>
 80126c8:	f04f 0230 	mov.w	r2, #48	; 0x30
 80126cc:	f804 2b01 	strb.w	r2, [r4], #1
 80126d0:	3b01      	subs	r3, #1
 80126d2:	d1f5      	bne.n	80126c0 <tiny_vsnprintf_like+0x2f4>
 80126d4:	e6b5      	b.n	8012442 <tiny_vsnprintf_like+0x76>
 80126d6:	aa05      	add	r2, sp, #20
 80126d8:	1811      	adds	r1, r2, r0
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80126da:	4405      	add	r5, r0
 80126dc:	1b2a      	subs	r2, r5, r4
 80126de:	2a00      	cmp	r2, #0
 80126e0:	dd06      	ble.n	80126f0 <tiny_vsnprintf_like+0x324>
 80126e2:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 80126e6:	f804 2b01 	strb.w	r2, [r4], #1
 80126ea:	3b01      	subs	r3, #1
 80126ec:	d1f6      	bne.n	80126dc <tiny_vsnprintf_like+0x310>
 80126ee:	e6a8      	b.n	8012442 <tiny_vsnprintf_like+0x76>
  while (size-- > 0) ASSIGN_STR(' ');
 80126f0:	44a6      	add	lr, r4
 80126f2:	4423      	add	r3, r4
 80126f4:	ebae 0204 	sub.w	r2, lr, r4
 80126f8:	2a00      	cmp	r2, #0
 80126fa:	f77f aea2 	ble.w	8012442 <tiny_vsnprintf_like+0x76>
 80126fe:	f804 7b01 	strb.w	r7, [r4], #1
 8012702:	429c      	cmp	r4, r3
 8012704:	d1f6      	bne.n	80126f4 <tiny_vsnprintf_like+0x328>
 8012706:	e69c      	b.n	8012442 <tiny_vsnprintf_like+0x76>
        s = va_arg(args, char *);
 8012708:	f8cd 9008 	str.w	r9, [sp, #8]
 801270c:	e699      	b.n	8012442 <tiny_vsnprintf_like+0x76>
    return 0;
 801270e:	2000      	movs	r0, #0
}
 8012710:	4770      	bx	lr
          while (len < field_width--) *str++ = ' ';
 8012712:	f105 3cff 	add.w	ip, r5, #4294967295
 8012716:	2d06      	cmp	r5, #6
 8012718:	dd03      	ble.n	8012722 <tiny_vsnprintf_like+0x356>
        len = strlen(s);
 801271a:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 801271c:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8012734 <tiny_vsnprintf_like+0x368>
 8012720:	e6f2      	b.n	8012508 <tiny_vsnprintf_like+0x13c>
        len = strlen(s);
 8012722:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 8012724:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8012734 <tiny_vsnprintf_like+0x368>
 8012728:	e701      	b.n	801252e <tiny_vsnprintf_like+0x162>
 801272a:	bf00      	nop
 801272c:	08013f14 	.word	0x08013f14
 8012730:	08013f3c 	.word	0x08013f3c
 8012734:	08013f0c 	.word	0x08013f0c

08012738 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012738:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801273c:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801273e:	4a06      	ldr	r2, [pc, #24]	; (8012758 <UTIL_SEQ_SetTask+0x20>)
 8012740:	6813      	ldr	r3, [r2, #0]
 8012742:	4303      	orrs	r3, r0
 8012744:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012746:	4a05      	ldr	r2, [pc, #20]	; (801275c <UTIL_SEQ_SetTask+0x24>)
 8012748:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 801274c:	4303      	orrs	r3, r0
 801274e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012752:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012756:	4770      	bx	lr
 8012758:	20001878 	.word	0x20001878
 801275c:	20001870 	.word	0x20001870

08012760 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012760:	4770      	bx	lr

08012762 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012762:	4770      	bx	lr

08012764 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012764:	0c03      	lsrs	r3, r0, #16
 8012766:	041b      	lsls	r3, r3, #16
 8012768:	b9ab      	cbnz	r3, 8012796 <SEQ_BitPosition+0x32>
 801276a:	0400      	lsls	r0, r0, #16
 801276c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801276e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012772:	d102      	bne.n	801277a <SEQ_BitPosition+0x16>
 8012774:	3308      	adds	r3, #8
 8012776:	b2db      	uxtb	r3, r3
 8012778:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801277a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801277e:	d102      	bne.n	8012786 <SEQ_BitPosition+0x22>
 8012780:	3304      	adds	r3, #4
 8012782:	b2db      	uxtb	r3, r3
 8012784:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];

  return (uint8_t)(31U-n);
 8012786:	f1c3 031f 	rsb	r3, r3, #31
  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801278a:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 801278c:	4a03      	ldr	r2, [pc, #12]	; (801279c <SEQ_BitPosition+0x38>)
 801278e:	5c12      	ldrb	r2, [r2, r0]
 8012790:	1a98      	subs	r0, r3, r2
}
 8012792:	b2c0      	uxtb	r0, r0
 8012794:	4770      	bx	lr
uint8_t n = 0U;
 8012796:	2300      	movs	r3, #0
 8012798:	e7e9      	b.n	801276e <SEQ_BitPosition+0xa>
 801279a:	bf00      	nop
 801279c:	08013f64 	.word	0x08013f64

080127a0 <UTIL_SEQ_Run>:
{
 80127a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  super_mask_backup = SuperMask;
 80127a4:	4b42      	ldr	r3, [pc, #264]	; (80128b0 <UTIL_SEQ_Run+0x110>)
 80127a6:	f8d3 9000 	ldr.w	r9, [r3]
  SuperMask &= Mask_bm;
 80127aa:	ea09 0000 	and.w	r0, r9, r0
 80127ae:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 80127b0:	4b40      	ldr	r3, [pc, #256]	; (80128b4 <UTIL_SEQ_Run+0x114>)
 80127b2:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80127b4:	4a40      	ldr	r2, [pc, #256]	; (80128b8 <UTIL_SEQ_Run+0x118>)
 80127b6:	6814      	ldr	r4, [r2, #0]
  local_taskmask = TaskMask;
 80127b8:	4a40      	ldr	r2, [pc, #256]	; (80128bc <UTIL_SEQ_Run+0x11c>)
 80127ba:	6812      	ldr	r2, [r2, #0]
  local_evtwaited =  EvtWaited;
 80127bc:	4940      	ldr	r1, [pc, #256]	; (80128c0 <UTIL_SEQ_Run+0x120>)
 80127be:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80127c0:	4013      	ands	r3, r2
 80127c2:	4203      	tst	r3, r0
 80127c4:	d04f      	beq.n	8012866 <UTIL_SEQ_Run+0xc6>
 80127c6:	ea14 0801 	ands.w	r8, r4, r1
 80127ca:	d14c      	bne.n	8012866 <UTIL_SEQ_Run+0xc6>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80127cc:	4d3d      	ldr	r5, [pc, #244]	; (80128c4 <UTIL_SEQ_Run+0x124>)
      counter++;
 80127ce:	2701      	movs	r7, #1
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80127d0:	4e3d      	ldr	r6, [pc, #244]	; (80128c8 <UTIL_SEQ_Run+0x128>)
 80127d2:	e035      	b.n	8012840 <UTIL_SEQ_Run+0xa0>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80127d4:	68ab      	ldr	r3, [r5, #8]
      counter++;
 80127d6:	463b      	mov	r3, r7
 80127d8:	e037      	b.n	801284a <UTIL_SEQ_Run+0xaa>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80127da:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80127de:	6863      	ldr	r3, [r4, #4]
 80127e0:	4018      	ands	r0, r3
 80127e2:	f7ff ffbf 	bl	8012764 <SEQ_BitPosition>
 80127e6:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80127e8:	6863      	ldr	r3, [r4, #4]
 80127ea:	fa07 f000 	lsl.w	r0, r7, r0
 80127ee:	ea23 0300 	bic.w	r3, r3, r0
 80127f2:	6063      	str	r3, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127f8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80127fa:	6833      	ldr	r3, [r6, #0]
 80127fc:	fa07 f303 	lsl.w	r3, r7, r3
 8012800:	4c2c      	ldr	r4, [pc, #176]	; (80128b4 <UTIL_SEQ_Run+0x114>)
 8012802:	6822      	ldr	r2, [r4, #0]
 8012804:	ea22 0203 	bic.w	r2, r2, r3
 8012808:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801280a:	682a      	ldr	r2, [r5, #0]
 801280c:	ea22 0303 	bic.w	r3, r2, r3
 8012810:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012812:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8012816:	6832      	ldr	r2, [r6, #0]
 8012818:	4b2c      	ldr	r3, [pc, #176]	; (80128cc <UTIL_SEQ_Run+0x12c>)
 801281a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801281e:	4798      	blx	r3
    local_taskset = TaskSet;
 8012820:	6823      	ldr	r3, [r4, #0]
    local_evtset = EvtSet;
 8012822:	4a25      	ldr	r2, [pc, #148]	; (80128b8 <UTIL_SEQ_Run+0x118>)
 8012824:	f8d2 c000 	ldr.w	ip, [r2]
    local_taskmask = TaskMask;
 8012828:	4a24      	ldr	r2, [pc, #144]	; (80128bc <UTIL_SEQ_Run+0x11c>)
 801282a:	6812      	ldr	r2, [r2, #0]
    local_evtwaited = EvtWaited;
 801282c:	4924      	ldr	r1, [pc, #144]	; (80128c0 <UTIL_SEQ_Run+0x120>)
 801282e:	680c      	ldr	r4, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012830:	491f      	ldr	r1, [pc, #124]	; (80128b0 <UTIL_SEQ_Run+0x110>)
 8012832:	6808      	ldr	r0, [r1, #0]
 8012834:	4013      	ands	r3, r2
 8012836:	4203      	tst	r3, r0
 8012838:	d015      	beq.n	8012866 <UTIL_SEQ_Run+0xc6>
 801283a:	ea1c 0f04 	tst.w	ip, r4
 801283e:	d112      	bne.n	8012866 <UTIL_SEQ_Run+0xc6>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	4002      	ands	r2, r0
 8012844:	421a      	tst	r2, r3
 8012846:	d0c5      	beq.n	80127d4 <UTIL_SEQ_Run+0x34>
    counter = 0U;
 8012848:	4643      	mov	r3, r8
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801284a:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 801284e:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012850:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8012854:	6852      	ldr	r2, [r2, #4]
 8012856:	4202      	tst	r2, r0
 8012858:	d1bf      	bne.n	80127da <UTIL_SEQ_Run+0x3a>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801285a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801285e:	f04f 31ff 	mov.w	r1, #4294967295
 8012862:	6051      	str	r1, [r2, #4]
 8012864:	e7b9      	b.n	80127da <UTIL_SEQ_Run+0x3a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012866:	4b18      	ldr	r3, [pc, #96]	; (80128c8 <UTIL_SEQ_Run+0x128>)
 8012868:	f04f 32ff 	mov.w	r2, #4294967295
 801286c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801286e:	f7ff ff77 	bl	8012760 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012872:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012876:	b672      	cpsid	i
  local_taskset = TaskSet;
 8012878:	4b0e      	ldr	r3, [pc, #56]	; (80128b4 <UTIL_SEQ_Run+0x114>)
 801287a:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801287c:	4a0e      	ldr	r2, [pc, #56]	; (80128b8 <UTIL_SEQ_Run+0x118>)
 801287e:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012880:	4a0e      	ldr	r2, [pc, #56]	; (80128bc <UTIL_SEQ_Run+0x11c>)
 8012882:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012884:	4013      	ands	r3, r2
 8012886:	4a0a      	ldr	r2, [pc, #40]	; (80128b0 <UTIL_SEQ_Run+0x110>)
 8012888:	6812      	ldr	r2, [r2, #0]
 801288a:	4213      	tst	r3, r2
 801288c:	d103      	bne.n	8012896 <UTIL_SEQ_Run+0xf6>
    if ((local_evtset & EvtWaited)== 0U)
 801288e:	4b0c      	ldr	r3, [pc, #48]	; (80128c0 <UTIL_SEQ_Run+0x120>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	420b      	tst	r3, r1
 8012894:	d008      	beq.n	80128a8 <UTIL_SEQ_Run+0x108>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012896:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 801289a:	f7ff ff62 	bl	8012762 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 801289e:	4b04      	ldr	r3, [pc, #16]	; (80128b0 <UTIL_SEQ_Run+0x110>)
 80128a0:	f8c3 9000 	str.w	r9, [r3]
}
 80128a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      UTIL_SEQ_Idle( );
 80128a8:	f7ef fc68 	bl	800217c <UTIL_SEQ_Idle>
 80128ac:	e7f3      	b.n	8012896 <UTIL_SEQ_Run+0xf6>
 80128ae:	bf00      	nop
 80128b0:	20000118 	.word	0x20000118
 80128b4:	20001878 	.word	0x20001878
 80128b8:	20001858 	.word	0x20001858
 80128bc:	2000011c 	.word	0x2000011c
 80128c0:	2000185c 	.word	0x2000185c
 80128c4:	20001870 	.word	0x20001870
 80128c8:	20001854 	.word	0x20001854
 80128cc:	20001860 	.word	0x20001860

080128d0 <UTIL_SEQ_RegTask>:
{
 80128d0:	b538      	push	{r3, r4, r5, lr}
 80128d2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128d4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80128d8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80128da:	f7ff ff43 	bl	8012764 <SEQ_BitPosition>
 80128de:	4b03      	ldr	r3, [pc, #12]	; (80128ec <UTIL_SEQ_RegTask+0x1c>)
 80128e0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128e4:	f385 8810 	msr	PRIMASK, r5
}
 80128e8:	bd38      	pop	{r3, r4, r5, pc}
 80128ea:	bf00      	nop
 80128ec:	20001860 	.word	0x20001860

080128f0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80128f0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80128f2:	4b03      	ldr	r3, [pc, #12]	; (8012900 <UTIL_TIMER_Init+0x10>)
 80128f4:	2200      	movs	r2, #0
 80128f6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80128f8:	4b02      	ldr	r3, [pc, #8]	; (8012904 <UTIL_TIMER_Init+0x14>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4798      	blx	r3
}
 80128fe:	bd08      	pop	{r3, pc}
 8012900:	2000187c 	.word	0x2000187c
 8012904:	08013254 	.word	0x08013254

08012908 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8012908:	b1a8      	cbz	r0, 8012936 <UTIL_TIMER_Create+0x2e>
{
 801290a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801290c:	4617      	mov	r7, r2
 801290e:	461e      	mov	r6, r3
 8012910:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8012912:	b193      	cbz	r3, 801293a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8012914:	2500      	movs	r5, #0
 8012916:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8012918:	4b09      	ldr	r3, [pc, #36]	; (8012940 <UTIL_TIMER_Create+0x38>)
 801291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291c:	4608      	mov	r0, r1
 801291e:	4798      	blx	r3
 8012920:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8012922:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8012924:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012926:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8012928:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801292a:	9b06      	ldr	r3, [sp, #24]
 801292c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801292e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8012930:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8012932:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8012934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8012936:	2001      	movs	r0, #1
}
 8012938:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801293a:	2001      	movs	r0, #1
 801293c:	e7fa      	b.n	8012934 <UTIL_TIMER_Create+0x2c>
 801293e:	bf00      	nop
 8012940:	08013254 	.word	0x08013254

08012944 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012944:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8012946:	4c03      	ldr	r4, [pc, #12]	; (8012954 <UTIL_TIMER_GetCurrentTime+0x10>)
 8012948:	69e3      	ldr	r3, [r4, #28]
 801294a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801294c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801294e:	4798      	blx	r3
}
 8012950:	bd10      	pop	{r4, pc}
 8012952:	bf00      	nop
 8012954:	08013254 	.word	0x08013254

08012958 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012958:	b570      	push	{r4, r5, r6, lr}
 801295a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801295c:	4d05      	ldr	r5, [pc, #20]	; (8012974 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801295e:	69eb      	ldr	r3, [r5, #28]
 8012960:	4798      	blx	r3
 8012962:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012966:	4630      	mov	r0, r6
 8012968:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801296a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801296c:	1a20      	subs	r0, r4, r0
 801296e:	4798      	blx	r3
}
 8012970:	bd70      	pop	{r4, r5, r6, pc}
 8012972:	bf00      	nop
 8012974:	08013254 	.word	0x08013254

08012978 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012978:	4b08      	ldr	r3, [pc, #32]	; (801299c <TimerExists+0x24>)
 801297a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801297c:	b14b      	cbz	r3, 8012992 <TimerExists+0x1a>
  {
    if( cur == TimerObject )
 801297e:	4283      	cmp	r3, r0
 8012980:	d009      	beq.n	8012996 <TimerExists+0x1e>
    {
      return true;
    }
    cur = cur->Next;
 8012982:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8012984:	b11b      	cbz	r3, 801298e <TimerExists+0x16>
    if( cur == TimerObject )
 8012986:	4298      	cmp	r0, r3
 8012988:	d1fb      	bne.n	8012982 <TimerExists+0xa>
      return true;
 801298a:	2001      	movs	r0, #1
  }
  return false;
}
 801298c:	4770      	bx	lr
  return false;
 801298e:	2000      	movs	r0, #0
 8012990:	4770      	bx	lr
 8012992:	2000      	movs	r0, #0
 8012994:	4770      	bx	lr
      return true;
 8012996:	2001      	movs	r0, #1
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	2000187c 	.word	0x2000187c

080129a0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80129a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a2:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80129a4:	4e09      	ldr	r6, [pc, #36]	; (80129cc <TimerSetTimeout+0x2c>)
 80129a6:	6a33      	ldr	r3, [r6, #32]
 80129a8:	4798      	blx	r3
 80129aa:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80129ac:	2301      	movs	r3, #1
 80129ae:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80129b0:	6827      	ldr	r7, [r4, #0]
 80129b2:	69b6      	ldr	r6, [r6, #24]
 80129b4:	47b0      	blx	r6
 80129b6:	4428      	add	r0, r5
 80129b8:	4287      	cmp	r7, r0
 80129ba:	d202      	bcs.n	80129c2 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80129bc:	47b0      	blx	r6
 80129be:	4428      	add	r0, r5
 80129c0:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80129c2:	4b02      	ldr	r3, [pc, #8]	; (80129cc <TimerSetTimeout+0x2c>)
 80129c4:	689b      	ldr	r3, [r3, #8]
 80129c6:	6820      	ldr	r0, [r4, #0]
 80129c8:	4798      	blx	r3
}
 80129ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129cc:	08013254 	.word	0x08013254

080129d0 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80129d0:	b358      	cbz	r0, 8012a2a <UTIL_TIMER_Stop+0x5a>
{
 80129d2:	b510      	push	{r4, lr}
 80129d4:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129da:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80129dc:	4b14      	ldr	r3, [pc, #80]	; (8012a30 <UTIL_TIMER_Stop+0x60>)
 80129de:	681b      	ldr	r3, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80129e0:	2101      	movs	r1, #1
 80129e2:	7281      	strb	r1, [r0, #10]
    if(NULL != TimerListHead)
 80129e4:	b15b      	cbz	r3, 80129fe <UTIL_TIMER_Stop+0x2e>
      TimerObject->IsRunning = 0U;
 80129e6:	2100      	movs	r1, #0
 80129e8:	7241      	strb	r1, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80129ea:	4298      	cmp	r0, r3
 80129ec:	d00b      	beq.n	8012a06 <UTIL_TIMER_Stop+0x36>
            cur = cur->Next;
 80129ee:	4619      	mov	r1, r3
 80129f0:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 80129f2:	b123      	cbz	r3, 80129fe <UTIL_TIMER_Stop+0x2e>
          if( cur == TimerObject )
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d1fa      	bne.n	80129ee <UTIL_TIMER_Stop+0x1e>
            if( cur->Next != NULL )
 80129f8:	695b      	ldr	r3, [r3, #20]
 80129fa:	b19b      	cbz	r3, 8012a24 <UTIL_TIMER_Stop+0x54>
              prev->Next = cur;
 80129fc:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129fe:	f384 8810 	msr	PRIMASK, r4
}
 8012a02:	2000      	movs	r0, #0
}
 8012a04:	bd10      	pop	{r4, pc}
          TimerListHead->IsPending = 0;
 8012a06:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8012a08:	6958      	ldr	r0, [r3, #20]
 8012a0a:	b120      	cbz	r0, 8012a16 <UTIL_TIMER_Stop+0x46>
            TimerListHead = TimerListHead->Next;
 8012a0c:	4b08      	ldr	r3, [pc, #32]	; (8012a30 <UTIL_TIMER_Stop+0x60>)
 8012a0e:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8012a10:	f7ff ffc6 	bl	80129a0 <TimerSetTimeout>
 8012a14:	e7f3      	b.n	80129fe <UTIL_TIMER_Stop+0x2e>
            UTIL_TimerDriver.StopTimerEvt( );
 8012a16:	4b07      	ldr	r3, [pc, #28]	; (8012a34 <UTIL_TIMER_Stop+0x64>)
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	4798      	blx	r3
            TimerListHead = NULL;
 8012a1c:	4b04      	ldr	r3, [pc, #16]	; (8012a30 <UTIL_TIMER_Stop+0x60>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	e7ec      	b.n	80129fe <UTIL_TIMER_Stop+0x2e>
              prev->Next = cur;
 8012a24:	2300      	movs	r3, #0
 8012a26:	614b      	str	r3, [r1, #20]
 8012a28:	e7e9      	b.n	80129fe <UTIL_TIMER_Stop+0x2e>
    ret = UTIL_TIMER_INVALID_PARAM;
 8012a2a:	2001      	movs	r0, #1
}
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	2000187c 	.word	0x2000187c
 8012a34:	08013254 	.word	0x08013254

08012a38 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012a38:	4b0c      	ldr	r3, [pc, #48]	; (8012a6c <TimerInsertTimer+0x34>)
 8012a3a:	6819      	ldr	r1, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8012a3c:	694b      	ldr	r3, [r1, #20]

  while (cur->Next != NULL )
 8012a3e:	b18b      	cbz	r3, 8012a64 <TimerInsertTimer+0x2c>
{
 8012a40:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8012a42:	6804      	ldr	r4, [r0, #0]
 8012a44:	e000      	b.n	8012a48 <TimerInsertTimer+0x10>
    {
        cur = next;
        next = next->Next;
 8012a46:	4613      	mov	r3, r2
    if( TimerObject->Timestamp  > next->Timestamp )
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	4294      	cmp	r4, r2
 8012a4c:	d906      	bls.n	8012a5c <TimerInsertTimer+0x24>
        next = next->Next;
 8012a4e:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 8012a50:	4619      	mov	r1, r3
 8012a52:	2a00      	cmp	r2, #0
 8012a54:	d1f7      	bne.n	8012a46 <TimerInsertTimer+0xe>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8012a56:	6158      	str	r0, [r3, #20]
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e000      	b.n	8012a5e <TimerInsertTimer+0x26>
        cur->Next = TimerObject;
 8012a5c:	6148      	str	r0, [r1, #20]
        TimerObject->Next = next;
 8012a5e:	6143      	str	r3, [r0, #20]
  TimerObject->Next = NULL;
}
 8012a60:	bc10      	pop	{r4}
 8012a62:	4770      	bx	lr
  cur->Next = TimerObject;
 8012a64:	6148      	str	r0, [r1, #20]
 8012a66:	2300      	movs	r3, #0
        TimerObject->Next = next;
 8012a68:	6143      	str	r3, [r0, #20]
 8012a6a:	4770      	bx	lr
 8012a6c:	2000187c 	.word	0x2000187c

08012a70 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012a70:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012a72:	4b05      	ldr	r3, [pc, #20]	; (8012a88 <TimerInsertNewHeadTimer+0x18>)
 8012a74:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8012a76:	b10b      	cbz	r3, 8012a7c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012a78:	2200      	movs	r2, #0
 8012a7a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012a7c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8012a7e:	4b02      	ldr	r3, [pc, #8]	; (8012a88 <TimerInsertNewHeadTimer+0x18>)
 8012a80:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8012a82:	f7ff ff8d 	bl	80129a0 <TimerSetTimeout>
}
 8012a86:	bd08      	pop	{r3, pc}
 8012a88:	2000187c 	.word	0x2000187c

08012a8c <UTIL_TIMER_Start>:
{
 8012a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d036      	beq.n	8012b00 <UTIL_TIMER_Start+0x74>
 8012a92:	4604      	mov	r4, r0
 8012a94:	f7ff ff70 	bl	8012978 <TimerExists>
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	d134      	bne.n	8012b06 <UTIL_TIMER_Start+0x7a>
 8012a9c:	7a65      	ldrb	r5, [r4, #9]
 8012a9e:	2d00      	cmp	r5, #0
 8012aa0:	d133      	bne.n	8012b0a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012aa2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012aa6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8012aa8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8012aaa:	4b19      	ldr	r3, [pc, #100]	; (8012b10 <UTIL_TIMER_Start+0x84>)
 8012aac:	6a1b      	ldr	r3, [r3, #32]
 8012aae:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8012ab0:	4287      	cmp	r7, r0
 8012ab2:	bf38      	it	cc
 8012ab4:	4607      	movcc	r7, r0
 8012ab6:	6027      	str	r7, [r4, #0]
    TimerObject->IsPending = 0U;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8012abc:	2201      	movs	r2, #1
 8012abe:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012ac0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8012ac2:	4b14      	ldr	r3, [pc, #80]	; (8012b14 <UTIL_TIMER_Start+0x88>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	b183      	cbz	r3, 8012aea <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012ac8:	4b11      	ldr	r3, [pc, #68]	; (8012b10 <UTIL_TIMER_Start+0x84>)
 8012aca:	699b      	ldr	r3, [r3, #24]
 8012acc:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	4418      	add	r0, r3
 8012ad2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8012ad4:	4b0f      	ldr	r3, [pc, #60]	; (8012b14 <UTIL_TIMER_Start+0x88>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4298      	cmp	r0, r3
 8012adc:	d20c      	bcs.n	8012af8 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f7ff ffc6 	bl	8012a70 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ae4:	f386 8810 	msr	PRIMASK, r6
}
 8012ae8:	e00b      	b.n	8012b02 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8012aea:	4b09      	ldr	r3, [pc, #36]	; (8012b10 <UTIL_TIMER_Start+0x84>)
 8012aec:	691b      	ldr	r3, [r3, #16]
 8012aee:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8012af0:	4620      	mov	r0, r4
 8012af2:	f7ff ffbd 	bl	8012a70 <TimerInsertNewHeadTimer>
 8012af6:	e7f5      	b.n	8012ae4 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8012af8:	4620      	mov	r0, r4
 8012afa:	f7ff ff9d 	bl	8012a38 <TimerInsertTimer>
 8012afe:	e7f1      	b.n	8012ae4 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8012b00:	2501      	movs	r5, #1
}
 8012b02:	4628      	mov	r0, r5
 8012b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8012b06:	2501      	movs	r5, #1
 8012b08:	e7fb      	b.n	8012b02 <UTIL_TIMER_Start+0x76>
 8012b0a:	2501      	movs	r5, #1
 8012b0c:	e7f9      	b.n	8012b02 <UTIL_TIMER_Start+0x76>
 8012b0e:	bf00      	nop
 8012b10:	08013254 	.word	0x08013254
 8012b14:	2000187c 	.word	0x2000187c

08012b18 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8012b18:	b198      	cbz	r0, 8012b42 <UTIL_TIMER_SetPeriod+0x2a>
{
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8012b1e:	4b0a      	ldr	r3, [pc, #40]	; (8012b48 <UTIL_TIMER_SetPeriod+0x30>)
 8012b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b22:	4608      	mov	r0, r1
 8012b24:	4798      	blx	r3
 8012b26:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f7ff ff25 	bl	8012978 <TimerExists>
 8012b2e:	b908      	cbnz	r0, 8012b34 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8012b30:	2000      	movs	r0, #0
}
 8012b32:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8012b34:	4620      	mov	r0, r4
 8012b36:	f7ff ff4b 	bl	80129d0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	f7ff ffa6 	bl	8012a8c <UTIL_TIMER_Start>
 8012b40:	e7f7      	b.n	8012b32 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8012b42:	2001      	movs	r0, #1
}
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	08013254 	.word	0x08013254

08012b4c <UTIL_TIMER_IRQ_Handler>:
{
 8012b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b50:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012b54:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8012b56:	4d1f      	ldr	r5, [pc, #124]	; (8012bd4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012b58:	696b      	ldr	r3, [r5, #20]
 8012b5a:	4798      	blx	r3
 8012b5c:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8012b5e:	692b      	ldr	r3, [r5, #16]
 8012b60:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8012b62:	4b1d      	ldr	r3, [pc, #116]	; (8012bd8 <UTIL_TIMER_IRQ_Handler+0x8c>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	b15b      	cbz	r3, 8012b80 <UTIL_TIMER_IRQ_Handler+0x34>
  DeltaContext = now  - old; /*intentional wrap around */
 8012b68:	1b01      	subs	r1, r0, r4
        cur->Timestamp = 0;
 8012b6a:	2500      	movs	r5, #0
        cur->Timestamp -= DeltaContext;
 8012b6c:	1a20      	subs	r0, r4, r0
      if (cur->Timestamp > DeltaContext)
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	428a      	cmp	r2, r1
        cur->Timestamp -= DeltaContext;
 8012b72:	bf8c      	ite	hi
 8012b74:	1812      	addhi	r2, r2, r0
        cur->Timestamp = 0;
 8012b76:	462a      	movls	r2, r5
 8012b78:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8012b7a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1f6      	bne.n	8012b6e <UTIL_TIMER_IRQ_Handler+0x22>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8012b80:	4d15      	ldr	r5, [pc, #84]	; (8012bd8 <UTIL_TIMER_IRQ_Handler+0x8c>)
 8012b82:	4f14      	ldr	r7, [pc, #80]	; (8012bd4 <UTIL_TIMER_IRQ_Handler+0x88>)
      cur->IsPending = 0;
 8012b84:	2600      	movs	r6, #0
 8012b86:	e00b      	b.n	8012ba0 <UTIL_TIMER_IRQ_Handler+0x54>
      cur = TimerListHead;
 8012b88:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8012b8a:	6963      	ldr	r3, [r4, #20]
 8012b8c:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 8012b8e:	7226      	strb	r6, [r4, #8]
      cur->IsRunning = 0;
 8012b90:	7266      	strb	r6, [r4, #9]
      cur->Callback(cur->argument);
 8012b92:	68e3      	ldr	r3, [r4, #12]
 8012b94:	6920      	ldr	r0, [r4, #16]
 8012b96:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8012b98:	8963      	ldrh	r3, [r4, #10]
 8012b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b9e:	d011      	beq.n	8012bc4 <UTIL_TIMER_IRQ_Handler+0x78>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8012ba0:	682b      	ldr	r3, [r5, #0]
 8012ba2:	b15b      	cbz	r3, 8012bbc <UTIL_TIMER_IRQ_Handler+0x70>
 8012ba4:	681c      	ldr	r4, [r3, #0]
 8012ba6:	2c00      	cmp	r4, #0
 8012ba8:	d0ee      	beq.n	8012b88 <UTIL_TIMER_IRQ_Handler+0x3c>
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	4798      	blx	r3
 8012bae:	4284      	cmp	r4, r0
 8012bb0:	d3ea      	bcc.n	8012b88 <UTIL_TIMER_IRQ_Handler+0x3c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8012bb2:	4b09      	ldr	r3, [pc, #36]	; (8012bd8 <UTIL_TIMER_IRQ_Handler+0x8c>)
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	b108      	cbz	r0, 8012bbc <UTIL_TIMER_IRQ_Handler+0x70>
 8012bb8:	7a03      	ldrb	r3, [r0, #8]
 8012bba:	b13b      	cbz	r3, 8012bcc <UTIL_TIMER_IRQ_Handler+0x80>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bbc:	f388 8810 	msr	PRIMASK, r8
}
 8012bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void)UTIL_TIMER_Start(cur);
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f7ff ff61 	bl	8012a8c <UTIL_TIMER_Start>
 8012bca:	e7db      	b.n	8012b84 <UTIL_TIMER_IRQ_Handler+0x38>
    TimerSetTimeout( TimerListHead );
 8012bcc:	f7ff fee8 	bl	80129a0 <TimerSetTimeout>
 8012bd0:	e7f4      	b.n	8012bbc <UTIL_TIMER_IRQ_Handler+0x70>
 8012bd2:	bf00      	nop
 8012bd4:	08013254 	.word	0x08013254
 8012bd8:	2000187c 	.word	0x2000187c

08012bdc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012bdc:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bde:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012be2:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012be4:	4b1f      	ldr	r3, [pc, #124]	; (8012c64 <TRACE_AllocateBufer+0x88>)
 8012be6:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8012bea:	8a1b      	ldrh	r3, [r3, #16]
 8012bec:	459c      	cmp	ip, r3
 8012bee:	d010      	beq.n	8012c12 <TRACE_AllocateBufer+0x36>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012bf0:	459c      	cmp	ip, r3
 8012bf2:	d91d      	bls.n	8012c30 <TRACE_AllocateBufer+0x54>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012bf4:	f5cc 6480 	rsb	r4, ip, #1024	; 0x400
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8012bf8:	b2a4      	uxth	r4, r4
 8012bfa:	4284      	cmp	r4, r0
 8012bfc:	d81d      	bhi.n	8012c3a <TRACE_AllocateBufer+0x5e>
 8012bfe:	4283      	cmp	r3, r0
 8012c00:	d92a      	bls.n	8012c58 <TRACE_AllocateBufer+0x7c>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012c02:	4b18      	ldr	r3, [pc, #96]	; (8012c64 <TRACE_AllocateBufer+0x88>)
 8012c04:	2401      	movs	r4, #1
 8012c06:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012c08:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012c0c:	2400      	movs	r4, #0
 8012c0e:	825c      	strh	r4, [r3, #18]
 8012c10:	e013      	b.n	8012c3a <TRACE_AllocateBufer+0x5e>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012c12:	f5cc 6480 	rsb	r4, ip, #1024	; 0x400
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8012c16:	b2a4      	uxth	r4, r4
 8012c18:	42a0      	cmp	r0, r4
 8012c1a:	d30e      	bcc.n	8012c3a <TRACE_AllocateBufer+0x5e>
 8012c1c:	4283      	cmp	r3, r0
 8012c1e:	d918      	bls.n	8012c52 <TRACE_AllocateBufer+0x76>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012c20:	4b10      	ldr	r3, [pc, #64]	; (8012c64 <TRACE_AllocateBufer+0x88>)
 8012c22:	2401      	movs	r4, #1
 8012c24:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012c26:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012c2a:	2400      	movs	r4, #0
 8012c2c:	825c      	strh	r4, [r3, #18]
 8012c2e:	e004      	b.n	8012c3a <TRACE_AllocateBufer+0x5e>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8012c30:	eba3 030c 	sub.w	r3, r3, ip
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	4283      	cmp	r3, r0
 8012c38:	d911      	bls.n	8012c5e <TRACE_AllocateBufer+0x82>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012c3a:	4c0a      	ldr	r4, [pc, #40]	; (8012c64 <TRACE_AllocateBufer+0x88>)
 8012c3c:	8a63      	ldrh	r3, [r4, #18]
 8012c3e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012c40:	4403      	add	r3, r0
 8012c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012c46:	8263      	strh	r3, [r4, #18]
    ret = 0;
 8012c48:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c4a:	f382 8810 	msr	PRIMASK, r2
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8012c4e:	bc10      	pop	{r4}
 8012c50:	4770      	bx	lr
  int16_t ret = -1;
 8012c52:	f04f 30ff 	mov.w	r0, #4294967295
 8012c56:	e7f8      	b.n	8012c4a <TRACE_AllocateBufer+0x6e>
 8012c58:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5c:	e7f5      	b.n	8012c4a <TRACE_AllocateBufer+0x6e>
 8012c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c62:	e7f2      	b.n	8012c4a <TRACE_AllocateBufer+0x6e>
 8012c64:	20001c80 	.word	0x20001c80

08012c68 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c6c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8012c6e:	4a03      	ldr	r2, [pc, #12]	; (8012c7c <TRACE_Lock+0x14>)
 8012c70:	8ad3      	ldrh	r3, [r2, #22]
 8012c72:	3301      	adds	r3, #1
 8012c74:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c76:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012c7a:	4770      	bx	lr
 8012c7c:	20001c80 	.word	0x20001c80

08012c80 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c84:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012c86:	4a03      	ldr	r2, [pc, #12]	; (8012c94 <TRACE_UnLock+0x14>)
 8012c88:	8ad3      	ldrh	r3, [r2, #22]
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c8e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012c92:	4770      	bx	lr
 8012c94:	20001c80 	.word	0x20001c80

08012c98 <UTIL_ADV_TRACE_Init>:
{
 8012c98:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012c9a:	2218      	movs	r2, #24
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	4807      	ldr	r0, [pc, #28]	; (8012cbc <UTIL_ADV_TRACE_Init+0x24>)
 8012ca0:	f7ff faa1 	bl	80121e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012ca8:	2100      	movs	r1, #0
 8012caa:	4805      	ldr	r0, [pc, #20]	; (8012cc0 <UTIL_ADV_TRACE_Init+0x28>)
 8012cac:	f7ff fa9b 	bl	80121e6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012cb0:	4b04      	ldr	r3, [pc, #16]	; (8012cc4 <UTIL_ADV_TRACE_Init+0x2c>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4804      	ldr	r0, [pc, #16]	; (8012cc8 <UTIL_ADV_TRACE_Init+0x30>)
 8012cb6:	4798      	blx	r3
}
 8012cb8:	bd08      	pop	{r3, pc}
 8012cba:	bf00      	nop
 8012cbc:	20001c80 	.word	0x20001c80
 8012cc0:	20001880 	.word	0x20001880
 8012cc4:	08013280 	.word	0x08013280
 8012cc8:	08012e41 	.word	0x08012e41

08012ccc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012ccc:	4b01      	ldr	r3, [pc, #4]	; (8012cd4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8012cce:	6058      	str	r0, [r3, #4]
}
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	20001c80 	.word	0x20001c80

08012cd8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012cd8:	4b01      	ldr	r3, [pc, #4]	; (8012ce0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8012cda:	7218      	strb	r0, [r3, #8]
}
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	20001c80 	.word	0x20001c80

08012ce4 <TRACE_Send>:
{
 8012ce4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8012cea:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012cec:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012cee:	4b20      	ldr	r3, [pc, #128]	; (8012d70 <TRACE_Send+0x8c>)
  if(TRACE_IsLocked() == 0u)
 8012cf0:	8adb      	ldrh	r3, [r3, #22]
 8012cf2:	b11b      	cbz	r3, 8012cfc <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cf4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012cf8:	2000      	movs	r0, #0
}
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8012cfc:	f7ff ffb4 	bl	8012c68 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8012d00:	4b1b      	ldr	r3, [pc, #108]	; (8012d70 <TRACE_Send+0x8c>)
 8012d02:	8a1a      	ldrh	r2, [r3, #16]
 8012d04:	8a5b      	ldrh	r3, [r3, #18]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d02c      	beq.n	8012d64 <TRACE_Send+0x80>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012d0a:	4919      	ldr	r1, [pc, #100]	; (8012d70 <TRACE_Send+0x8c>)
 8012d0c:	7889      	ldrb	r1, [r1, #2]
 8012d0e:	2901      	cmp	r1, #1
 8012d10:	d015      	beq.n	8012d3e <TRACE_Send+0x5a>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012d12:	b931      	cbnz	r1, 8012d22 <TRACE_Send+0x3e>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012d14:	4a16      	ldr	r2, [pc, #88]	; (8012d70 <TRACE_Send+0x8c>)
 8012d16:	8a12      	ldrh	r2, [r2, #16]
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d91e      	bls.n	8012d5a <TRACE_Send+0x76>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012d1c:	1a9b      	subs	r3, r3, r2
 8012d1e:	4a14      	ldr	r2, [pc, #80]	; (8012d70 <TRACE_Send+0x8c>)
 8012d20:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012d22:	4e13      	ldr	r6, [pc, #76]	; (8012d70 <TRACE_Send+0x8c>)
 8012d24:	8a33      	ldrh	r3, [r6, #16]
 8012d26:	4d13      	ldr	r5, [pc, #76]	; (8012d74 <TRACE_Send+0x90>)
 8012d28:	441d      	add	r5, r3
 8012d2a:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012d2e:	f7ef faa5 	bl	800227c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012d32:	4b11      	ldr	r3, [pc, #68]	; (8012d78 <TRACE_Send+0x94>)
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	8ab1      	ldrh	r1, [r6, #20]
 8012d38:	4628      	mov	r0, r5
 8012d3a:	4798      	blx	r3
 8012d3c:	e7dd      	b.n	8012cfa <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012d3e:	480c      	ldr	r0, [pc, #48]	; (8012d70 <TRACE_Send+0x8c>)
 8012d40:	8801      	ldrh	r1, [r0, #0]
 8012d42:	1a8a      	subs	r2, r1, r2
 8012d44:	b292      	uxth	r2, r2
 8012d46:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012d48:	2102      	movs	r1, #2
 8012d4a:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012d50:	2a00      	cmp	r2, #0
 8012d52:	d1e6      	bne.n	8012d22 <TRACE_Send+0x3e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012d54:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012d56:	8201      	strh	r1, [r0, #16]
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012d58:	e7dc      	b.n	8012d14 <TRACE_Send+0x30>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012d5a:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8012d5e:	4b04      	ldr	r3, [pc, #16]	; (8012d70 <TRACE_Send+0x8c>)
 8012d60:	829a      	strh	r2, [r3, #20]
 8012d62:	e7de      	b.n	8012d22 <TRACE_Send+0x3e>
      TRACE_UnLock();
 8012d64:	f7ff ff8c 	bl	8012c80 <TRACE_UnLock>
 8012d68:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012d6c:	2000      	movs	r0, #0
}
 8012d6e:	e7c4      	b.n	8012cfa <TRACE_Send+0x16>
 8012d70:	20001c80 	.word	0x20001c80
 8012d74:	20001880 	.word	0x20001880
 8012d78:	08013280 	.word	0x08013280

08012d7c <UTIL_ADV_TRACE_COND_FSend>:
{
 8012d7c:	b408      	push	{r3}
 8012d7e:	b530      	push	{r4, r5, lr}
 8012d80:	b086      	sub	sp, #24
 8012d82:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012d84:	2300      	movs	r3, #0
 8012d86:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012d8a:	4b2a      	ldr	r3, [pc, #168]	; (8012e34 <UTIL_ADV_TRACE_COND_FSend+0xb8>)
 8012d8c:	7a1b      	ldrb	r3, [r3, #8]
 8012d8e:	4283      	cmp	r3, r0
 8012d90:	d34a      	bcc.n	8012e28 <UTIL_ADV_TRACE_COND_FSend+0xac>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012d92:	4b28      	ldr	r3, [pc, #160]	; (8012e34 <UTIL_ADV_TRACE_COND_FSend+0xb8>)
 8012d94:	68db      	ldr	r3, [r3, #12]
 8012d96:	4399      	bics	r1, r3
 8012d98:	d149      	bne.n	8012e2e <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012d9a:	4b26      	ldr	r3, [pc, #152]	; (8012e34 <UTIL_ADV_TRACE_COND_FSend+0xb8>)
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	b123      	cbz	r3, 8012daa <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8012da0:	b11a      	cbz	r2, 8012daa <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012da2:	f10d 0102 	add.w	r1, sp, #2
 8012da6:	a801      	add	r0, sp, #4
 8012da8:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012daa:	ab0a      	add	r3, sp, #40	; 0x28
 8012dac:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012dae:	4622      	mov	r2, r4
 8012db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012db4:	4820      	ldr	r0, [pc, #128]	; (8012e38 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012db6:	f7ff fb09 	bl	80123cc <tiny_vsnprintf_like>
 8012dba:	4605      	mov	r5, r0
  TRACE_Lock();
 8012dbc:	f7ff ff54 	bl	8012c68 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012dc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012dc4:	18e8      	adds	r0, r5, r3
 8012dc6:	4669      	mov	r1, sp
 8012dc8:	b280      	uxth	r0, r0
 8012dca:	f7ff ff07 	bl	8012bdc <TRACE_AllocateBufer>
 8012dce:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012dd2:	d024      	beq.n	8012e1e <UTIL_ADV_TRACE_COND_FSend+0xa2>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012dd4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8012dd8:	b170      	cbz	r0, 8012df8 <UTIL_ADV_TRACE_COND_FSend+0x7c>
 8012dda:	f8bd 3000 	ldrh.w	r3, [sp]
 8012dde:	aa01      	add	r2, sp, #4
 8012de0:	4418      	add	r0, r3
 8012de2:	b280      	uxth	r0, r0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012de4:	4d15      	ldr	r5, [pc, #84]	; (8012e3c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012de6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012dea:	54e9      	strb	r1, [r5, r3]
      writepos = writepos + 1u;
 8012dec:	3301      	adds	r3, #1
 8012dee:	b29b      	uxth	r3, r3
    for (idx = 0u; idx < timestamp_size; idx++)
 8012df0:	4283      	cmp	r3, r0
 8012df2:	d1f8      	bne.n	8012de6 <UTIL_ADV_TRACE_COND_FSend+0x6a>
 8012df4:	f8ad 3000 	strh.w	r3, [sp]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012df8:	f8bd 0000 	ldrh.w	r0, [sp]
 8012dfc:	9b05      	ldr	r3, [sp, #20]
 8012dfe:	4622      	mov	r2, r4
 8012e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012e04:	4c0d      	ldr	r4, [pc, #52]	; (8012e3c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012e06:	4420      	add	r0, r4
 8012e08:	f7ff fae0 	bl	80123cc <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012e0c:	f7ff ff38 	bl	8012c80 <TRACE_UnLock>
    return TRACE_Send();
 8012e10:	f7ff ff68 	bl	8012ce4 <TRACE_Send>
}
 8012e14:	b006      	add	sp, #24
 8012e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e1a:	b001      	add	sp, #4
 8012e1c:	4770      	bx	lr
  TRACE_UnLock();
 8012e1e:	f7ff ff2f 	bl	8012c80 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012e22:	f06f 0002 	mvn.w	r0, #2
 8012e26:	e7f5      	b.n	8012e14 <UTIL_ADV_TRACE_COND_FSend+0x98>
    return UTIL_ADV_TRACE_GIVEUP;
 8012e28:	f06f 0004 	mvn.w	r0, #4
 8012e2c:	e7f2      	b.n	8012e14 <UTIL_ADV_TRACE_COND_FSend+0x98>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012e2e:	f06f 0005 	mvn.w	r0, #5
 8012e32:	e7ef      	b.n	8012e14 <UTIL_ADV_TRACE_COND_FSend+0x98>
 8012e34:	20001c80 	.word	0x20001c80
 8012e38:	20001c98 	.word	0x20001c98
 8012e3c:	20001880 	.word	0x20001880

08012e40 <TRACE_TxCpltCallback>:
{
 8012e40:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e42:	f3ef 8310 	mrs	r3, PRIMASK
 8012e46:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012e48:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012e4a:	4b24      	ldr	r3, [pc, #144]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e4c:	789b      	ldrb	r3, [r3, #2]
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	d015      	beq.n	8012e7e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012e52:	4a22      	ldr	r2, [pc, #136]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e54:	8a13      	ldrh	r3, [r2, #16]
 8012e56:	8a92      	ldrh	r2, [r2, #20]
 8012e58:	4413      	add	r3, r2
 8012e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012e5e:	4a1f      	ldr	r2, [pc, #124]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e60:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012e62:	8a52      	ldrh	r2, [r2, #18]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d003      	beq.n	8012e70 <TRACE_TxCpltCallback+0x30>
 8012e68:	481c      	ldr	r0, [pc, #112]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e6a:	8ac0      	ldrh	r0, [r0, #22]
 8012e6c:	2801      	cmp	r0, #1
 8012e6e:	d00a      	beq.n	8012e86 <TRACE_TxCpltCallback+0x46>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e70:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012e74:	f7ef fa08 	bl	8002288 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012e78:	f7ff ff02 	bl	8012c80 <TRACE_UnLock>
}
 8012e7c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	4a16      	ldr	r2, [pc, #88]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e82:	7093      	strb	r3, [r2, #2]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012e84:	e7eb      	b.n	8012e5e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012e86:	4815      	ldr	r0, [pc, #84]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e88:	7880      	ldrb	r0, [r0, #2]
 8012e8a:	2801      	cmp	r0, #1
 8012e8c:	d012      	beq.n	8012eb4 <TRACE_TxCpltCallback+0x74>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012e8e:	b930      	cbnz	r0, 8012e9e <TRACE_TxCpltCallback+0x5e>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012e90:	4b12      	ldr	r3, [pc, #72]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e92:	8a1b      	ldrh	r3, [r3, #16]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d91b      	bls.n	8012ed0 <TRACE_TxCpltCallback+0x90>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012e98:	1ad2      	subs	r2, r2, r3
 8012e9a:	4b10      	ldr	r3, [pc, #64]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012e9c:	829a      	strh	r2, [r3, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012e9e:	4b0f      	ldr	r3, [pc, #60]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012ea0:	8a1a      	ldrh	r2, [r3, #16]
 8012ea2:	480f      	ldr	r0, [pc, #60]	; (8012ee0 <TRACE_TxCpltCallback+0xa0>)
 8012ea4:	4410      	add	r0, r2
 8012ea6:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012eaa:	4a0e      	ldr	r2, [pc, #56]	; (8012ee4 <TRACE_TxCpltCallback+0xa4>)
 8012eac:	68d2      	ldr	r2, [r2, #12]
 8012eae:	8a99      	ldrh	r1, [r3, #20]
 8012eb0:	4790      	blx	r2
 8012eb2:	e7e3      	b.n	8012e7c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012eb4:	4c09      	ldr	r4, [pc, #36]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012eb6:	8820      	ldrh	r0, [r4, #0]
 8012eb8:	1ac3      	subs	r3, r0, r3
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	82a3      	strh	r3, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012ebe:	2002      	movs	r0, #2
 8012ec0:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1e9      	bne.n	8012e9e <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012eca:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012ecc:	8220      	strh	r0, [r4, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012ece:	e7df      	b.n	8012e90 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012ed0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8012ed4:	4a01      	ldr	r2, [pc, #4]	; (8012edc <TRACE_TxCpltCallback+0x9c>)
 8012ed6:	8293      	strh	r3, [r2, #20]
 8012ed8:	e7e1      	b.n	8012e9e <TRACE_TxCpltCallback+0x5e>
 8012eda:	bf00      	nop
 8012edc:	20001c80 	.word	0x20001c80
 8012ee0:	20001880 	.word	0x20001880
 8012ee4:	08013280 	.word	0x08013280

08012ee8 <memset>:
 8012ee8:	4402      	add	r2, r0
 8012eea:	4603      	mov	r3, r0
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d100      	bne.n	8012ef2 <memset+0xa>
 8012ef0:	4770      	bx	lr
 8012ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8012ef6:	e7f9      	b.n	8012eec <memset+0x4>

08012ef8 <__libc_init_array>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	4d0d      	ldr	r5, [pc, #52]	; (8012f30 <__libc_init_array+0x38>)
 8012efc:	4c0d      	ldr	r4, [pc, #52]	; (8012f34 <__libc_init_array+0x3c>)
 8012efe:	1b64      	subs	r4, r4, r5
 8012f00:	10a4      	asrs	r4, r4, #2
 8012f02:	2600      	movs	r6, #0
 8012f04:	42a6      	cmp	r6, r4
 8012f06:	d109      	bne.n	8012f1c <__libc_init_array+0x24>
 8012f08:	4d0b      	ldr	r5, [pc, #44]	; (8012f38 <__libc_init_array+0x40>)
 8012f0a:	4c0c      	ldr	r4, [pc, #48]	; (8012f3c <__libc_init_array+0x44>)
 8012f0c:	f000 f900 	bl	8013110 <_init>
 8012f10:	1b64      	subs	r4, r4, r5
 8012f12:	10a4      	asrs	r4, r4, #2
 8012f14:	2600      	movs	r6, #0
 8012f16:	42a6      	cmp	r6, r4
 8012f18:	d105      	bne.n	8012f26 <__libc_init_array+0x2e>
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f20:	4798      	blx	r3
 8012f22:	3601      	adds	r6, #1
 8012f24:	e7ee      	b.n	8012f04 <__libc_init_array+0xc>
 8012f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f2a:	4798      	blx	r3
 8012f2c:	3601      	adds	r6, #1
 8012f2e:	e7f2      	b.n	8012f16 <__libc_init_array+0x1e>
 8012f30:	08014054 	.word	0x08014054
 8012f34:	08014054 	.word	0x08014054
 8012f38:	08014054 	.word	0x08014054
 8012f3c:	0801405c 	.word	0x0801405c

08012f40 <__retarget_lock_acquire_recursive>:
 8012f40:	4770      	bx	lr

08012f42 <__retarget_lock_release_recursive>:
 8012f42:	4770      	bx	lr

08012f44 <register_fini>:
 8012f44:	4b02      	ldr	r3, [pc, #8]	; (8012f50 <register_fini+0xc>)
 8012f46:	b113      	cbz	r3, 8012f4e <register_fini+0xa>
 8012f48:	4802      	ldr	r0, [pc, #8]	; (8012f54 <register_fini+0x10>)
 8012f4a:	f000 b805 	b.w	8012f58 <atexit>
 8012f4e:	4770      	bx	lr
 8012f50:	00000000 	.word	0x00000000
 8012f54:	08012f65 	.word	0x08012f65

08012f58 <atexit>:
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4601      	mov	r1, r0
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f000 b814 	b.w	8012f8c <__register_exitproc>

08012f64 <__libc_fini_array>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4d07      	ldr	r5, [pc, #28]	; (8012f84 <__libc_fini_array+0x20>)
 8012f68:	4c07      	ldr	r4, [pc, #28]	; (8012f88 <__libc_fini_array+0x24>)
 8012f6a:	1b64      	subs	r4, r4, r5
 8012f6c:	10a4      	asrs	r4, r4, #2
 8012f6e:	b91c      	cbnz	r4, 8012f78 <__libc_fini_array+0x14>
 8012f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f74:	f000 b8d2 	b.w	801311c <_fini>
 8012f78:	3c01      	subs	r4, #1
 8012f7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8012f7e:	4798      	blx	r3
 8012f80:	e7f5      	b.n	8012f6e <__libc_fini_array+0xa>
 8012f82:	bf00      	nop
 8012f84:	0801405c 	.word	0x0801405c
 8012f88:	08014060 	.word	0x08014060

08012f8c <__register_exitproc>:
 8012f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f90:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013000 <__register_exitproc+0x74>
 8012f94:	4606      	mov	r6, r0
 8012f96:	f8da 0000 	ldr.w	r0, [sl]
 8012f9a:	4698      	mov	r8, r3
 8012f9c:	460f      	mov	r7, r1
 8012f9e:	4691      	mov	r9, r2
 8012fa0:	f7ff ffce 	bl	8012f40 <__retarget_lock_acquire_recursive>
 8012fa4:	4b17      	ldr	r3, [pc, #92]	; (8013004 <__register_exitproc+0x78>)
 8012fa6:	681c      	ldr	r4, [r3, #0]
 8012fa8:	b90c      	cbnz	r4, 8012fae <__register_exitproc+0x22>
 8012faa:	4c17      	ldr	r4, [pc, #92]	; (8013008 <__register_exitproc+0x7c>)
 8012fac:	601c      	str	r4, [r3, #0]
 8012fae:	6865      	ldr	r5, [r4, #4]
 8012fb0:	f8da 0000 	ldr.w	r0, [sl]
 8012fb4:	2d1f      	cmp	r5, #31
 8012fb6:	dd05      	ble.n	8012fc4 <__register_exitproc+0x38>
 8012fb8:	f7ff ffc3 	bl	8012f42 <__retarget_lock_release_recursive>
 8012fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc4:	b19e      	cbz	r6, 8012fee <__register_exitproc+0x62>
 8012fc6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8012fca:	2201      	movs	r2, #1
 8012fcc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8012fd0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8012fd4:	40aa      	lsls	r2, r5
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8012fdc:	2e02      	cmp	r6, #2
 8012fde:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8012fe2:	bf02      	ittt	eq
 8012fe4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8012fe8:	4313      	orreq	r3, r2
 8012fea:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8012fee:	1c6b      	adds	r3, r5, #1
 8012ff0:	3502      	adds	r5, #2
 8012ff2:	6063      	str	r3, [r4, #4]
 8012ff4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8012ff8:	f7ff ffa3 	bl	8012f42 <__retarget_lock_release_recursive>
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	e7df      	b.n	8012fc0 <__register_exitproc+0x34>
 8013000:	20000120 	.word	0x20000120
 8013004:	20001e9c 	.word	0x20001e9c
 8013008:	20001ea0 	.word	0x20001ea0
 801300c:	00000000 	.word	0x00000000

08013010 <floor>:
 8013010:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013018:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801301c:	2e13      	cmp	r6, #19
 801301e:	460b      	mov	r3, r1
 8013020:	4607      	mov	r7, r0
 8013022:	460c      	mov	r4, r1
 8013024:	4605      	mov	r5, r0
 8013026:	dc32      	bgt.n	801308e <floor+0x7e>
 8013028:	2e00      	cmp	r6, #0
 801302a:	da14      	bge.n	8013056 <floor+0x46>
 801302c:	a334      	add	r3, pc, #208	; (adr r3, 8013100 <floor+0xf0>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	f7ed f8af 	bl	8000194 <__adddf3>
 8013036:	2200      	movs	r2, #0
 8013038:	2300      	movs	r3, #0
 801303a:	f7ed fcf1 	bl	8000a20 <__aeabi_dcmpgt>
 801303e:	b138      	cbz	r0, 8013050 <floor+0x40>
 8013040:	2c00      	cmp	r4, #0
 8013042:	da56      	bge.n	80130f2 <floor+0xe2>
 8013044:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013048:	4325      	orrs	r5, r4
 801304a:	d055      	beq.n	80130f8 <floor+0xe8>
 801304c:	4c2e      	ldr	r4, [pc, #184]	; (8013108 <floor+0xf8>)
 801304e:	2500      	movs	r5, #0
 8013050:	4623      	mov	r3, r4
 8013052:	462f      	mov	r7, r5
 8013054:	e025      	b.n	80130a2 <floor+0x92>
 8013056:	4a2d      	ldr	r2, [pc, #180]	; (801310c <floor+0xfc>)
 8013058:	fa42 f806 	asr.w	r8, r2, r6
 801305c:	ea01 0208 	and.w	r2, r1, r8
 8013060:	4302      	orrs	r2, r0
 8013062:	d01e      	beq.n	80130a2 <floor+0x92>
 8013064:	a326      	add	r3, pc, #152	; (adr r3, 8013100 <floor+0xf0>)
 8013066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306a:	f7ed f893 	bl	8000194 <__adddf3>
 801306e:	2200      	movs	r2, #0
 8013070:	2300      	movs	r3, #0
 8013072:	f7ed fcd5 	bl	8000a20 <__aeabi_dcmpgt>
 8013076:	2800      	cmp	r0, #0
 8013078:	d0ea      	beq.n	8013050 <floor+0x40>
 801307a:	2c00      	cmp	r4, #0
 801307c:	bfbe      	ittt	lt
 801307e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013082:	4133      	asrlt	r3, r6
 8013084:	18e4      	addlt	r4, r4, r3
 8013086:	ea24 0408 	bic.w	r4, r4, r8
 801308a:	2500      	movs	r5, #0
 801308c:	e7e0      	b.n	8013050 <floor+0x40>
 801308e:	2e33      	cmp	r6, #51	; 0x33
 8013090:	dd0b      	ble.n	80130aa <floor+0x9a>
 8013092:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013096:	d104      	bne.n	80130a2 <floor+0x92>
 8013098:	4602      	mov	r2, r0
 801309a:	f7ed f87b 	bl	8000194 <__adddf3>
 801309e:	4607      	mov	r7, r0
 80130a0:	460b      	mov	r3, r1
 80130a2:	4638      	mov	r0, r7
 80130a4:	4619      	mov	r1, r3
 80130a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80130ae:	f04f 38ff 	mov.w	r8, #4294967295
 80130b2:	fa28 f802 	lsr.w	r8, r8, r2
 80130b6:	ea10 0f08 	tst.w	r0, r8
 80130ba:	d0f2      	beq.n	80130a2 <floor+0x92>
 80130bc:	a310      	add	r3, pc, #64	; (adr r3, 8013100 <floor+0xf0>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	f7ed f867 	bl	8000194 <__adddf3>
 80130c6:	2200      	movs	r2, #0
 80130c8:	2300      	movs	r3, #0
 80130ca:	f7ed fca9 	bl	8000a20 <__aeabi_dcmpgt>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d0be      	beq.n	8013050 <floor+0x40>
 80130d2:	2c00      	cmp	r4, #0
 80130d4:	da0a      	bge.n	80130ec <floor+0xdc>
 80130d6:	2e14      	cmp	r6, #20
 80130d8:	d101      	bne.n	80130de <floor+0xce>
 80130da:	3401      	adds	r4, #1
 80130dc:	e006      	b.n	80130ec <floor+0xdc>
 80130de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80130e2:	2301      	movs	r3, #1
 80130e4:	40b3      	lsls	r3, r6
 80130e6:	441d      	add	r5, r3
 80130e8:	42af      	cmp	r7, r5
 80130ea:	d8f6      	bhi.n	80130da <floor+0xca>
 80130ec:	ea25 0508 	bic.w	r5, r5, r8
 80130f0:	e7ae      	b.n	8013050 <floor+0x40>
 80130f2:	2500      	movs	r5, #0
 80130f4:	462c      	mov	r4, r5
 80130f6:	e7ab      	b.n	8013050 <floor+0x40>
 80130f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80130fc:	e7a8      	b.n	8013050 <floor+0x40>
 80130fe:	bf00      	nop
 8013100:	8800759c 	.word	0x8800759c
 8013104:	7e37e43c 	.word	0x7e37e43c
 8013108:	bff00000 	.word	0xbff00000
 801310c:	000fffff 	.word	0x000fffff

08013110 <_init>:
 8013110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013112:	bf00      	nop
 8013114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013116:	bc08      	pop	{r3}
 8013118:	469e      	mov	lr, r3
 801311a:	4770      	bx	lr

0801311c <_fini>:
 801311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311e:	bf00      	nop
 8013120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013122:	bc08      	pop	{r3}
 8013124:	469e      	mov	lr, r3
 8013126:	4770      	bx	lr
