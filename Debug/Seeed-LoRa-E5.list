
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb80  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801ecb8  0801ecb8  0002ecb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fb68  0801fb68  0002fb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc40  0801fc40  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc40  0801fc40  0002fc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc48  0801fc48  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc48  0801fc48  0002fc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc50  0801fc50  0002fc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801fc54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001ef8  20000164  0801fdb8  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000205c  0801fdb8  0003205c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004974d  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b5a7  00000000  00000000  0007991e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ad8  00000000  00000000  00084ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c95  00000000  00000000  000889a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ad5b  00000000  00000000  0008b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048b51  00000000  00000000  000b6390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2d9a  00000000  00000000  000feee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000f4c8  00000000  00000000  001d1c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001e1144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801eca0 	.word	0x0801eca0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801eca0 	.word	0x0801eca0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <ZE27_Checksum>:
 */

#include "ZE27_O3.h"


uint8_t ZE27_Checksum(uint8_t *msg, unsigned char ln){
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  //Checksum = (NOT(Byte1+Byte2+Byte3+Byte4+Byte5+Byte6+Byte7)) +1
    for (uint8_t i = 1; i <= ln - 2; i++) {
 8001098:	2301      	movs	r3, #1
 800109a:	73bb      	strb	r3, [r7, #14]
 800109c:	e009      	b.n	80010b2 <ZE27_Checksum+0x2a>
        sum += msg[i];
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4413      	add	r3, r2
 80010aa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 1; i <= ln - 2; i++) {
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73bb      	strb	r3, [r7, #14]
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dcf0      	bgt.n	800109e <ZE27_Checksum+0x16>
    }

    uint8_t checksum = (~sum)+1;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	425b      	negs	r3, r3
 80010c0:	737b      	strb	r3, [r7, #13]
    return checksum;
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <ZE27_parsePPB>:

uint16_t ZE27_parsePPB(uint8_t *msg){
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	if(msg[ZE27_RX_BUFFER_SIZE -1] == ZE27_Checksum(msg, ZE27_RX_BUFFER_SIZE)){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	781c      	ldrb	r4, [r3, #0]
 80010dc:	2109      	movs	r1, #9
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffd2 	bl	8001088 <ZE27_Checksum>
 80010e4:	4603      	mov	r3, r0
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d10c      	bne.n	8001104 <ZE27_parsePPB+0x36>
		return msg[4]*256 + msg[5];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3305      	adds	r3, #5
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4413      	add	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	e000      	b.n	8001106 <ZE27_parsePPB+0x38>
	}
 return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4313      	orrs	r3, r2
 8001154:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	43db      	mvns	r3, r3
 8001180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001184:	4013      	ands	r3, r2
 8001186:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_ADC_Init+0xc4>)
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <MX_ADC_Init+0xc8>)
 80011a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_ADC_Init+0xc4>)
 80011ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011b0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MX_ADC_Init+0xc4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_ADC_Init+0xc4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_ADC_Init+0xc4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_ADC_Init+0xc4>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_ADC_Init+0xc4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_ADC_Init+0xc4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_ADC_Init+0xc4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_ADC_Init+0xc4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_ADC_Init+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_ADC_Init+0xc4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_ADC_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_ADC_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_ADC_Init+0xc4>)
 8001200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_ADC_Init+0xc4>)
 8001208:	2207      	movs	r2, #7
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_ADC_Init+0xc4>)
 800120e:	2207      	movs	r2, #7
 8001210:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_ADC_Init+0xc4>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_ADC_Init+0xc4>)
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_ADC_Init+0xc4>)
 8001222:	f002 fe17 	bl	8003e54 <HAL_ADC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 800122c:	f000 ffd4 	bl	80021d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_ADC_Init+0xcc>)
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_ADC_Init+0xc4>)
 8001242:	f003 f943 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 800124c:	f000 ffc4 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000180 	.word	0x20000180
 800125c:	40012400 	.word	0x40012400
 8001260:	0c000008 	.word	0x0c000008

08001264 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_ADC_MspInit+0x50>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d112      	bne.n	80012ac <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128a:	f7ff ff58 	bl	800113e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff ff3d 	bl	800110e <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001294:	2310      	movs	r3, #16
 8001296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <HAL_ADC_MspInit+0x54>)
 80012a8:	f004 fc72 	bl	8005b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40012400 	.word	0x40012400
 80012b8:	48000400 	.word	0x48000400

080012bc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_ADC_MspDeInit+0x2c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d107      	bne.n	80012de <HAL_ADC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80012ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d2:	f7ff ff4c 	bl	800116e <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80012d6:	2110      	movs	r1, #16
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <HAL_ADC_MspDeInit+0x30>)
 80012da:	f004 fdb9 	bl	8005e50 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012400 	.word	0x40012400
 80012ec:	48000400 	.word	0x48000400

080012f0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <SYS_InitMeasurement+0x14>)
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <SYS_InitMeasurement+0x18>)
 80012f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000180 	.word	0x20000180
 8001308:	40012400 	.word	0x40012400

0800130c <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */
   return ADC_ReadChannels(ADC_CHANNEL_3);
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <SYS_GetBatteryLevel+0x14>)
 8001312:	f000 f807 	bl	8001324 <ADC_ReadChannels>
 8001316:	4603      	mov	r3, r0
 8001318:	b29b      	uxth	r3, r3

  return batteryLevelmV;
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0c000008 	.word	0x0c000008

08001324 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800133c:	f7ff ff2a 	bl	8001194 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001340:	481a      	ldr	r0, [pc, #104]	; (80013ac <ADC_ReadChannels+0x88>)
 8001342:	f003 fba6 	bl	8004a92 <HAL_ADCEx_Calibration_Start>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800134c:	f000 ff44 	bl	80021d8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <ADC_ReadChannels+0x88>)
 8001364:	f003 f8b2 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800136e:	f000 ff33 	bl	80021d8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <ADC_ReadChannels+0x88>)
 8001374:	f002 ff8e 	bl	8004294 <HAL_ADC_Start>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800137e:	f000 ff2b 	bl	80021d8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001382:	f04f 31ff 	mov.w	r1, #4294967295
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <ADC_ReadChannels+0x88>)
 8001388:	f002 fffc 	bl	8004384 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <ADC_ReadChannels+0x88>)
 800138e:	f002 ffc7 	bl	8004320 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <ADC_ReadChannels+0x88>)
 8001394:	f003 f88d 	bl	80044b2 <HAL_ADC_GetValue>
 8001398:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <ADC_ReadChannels+0x88>)
 800139c:	f002 feee 	bl	800417c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80013a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000180 	.word	0x20000180

080013b0 <LL_AHB1_GRP1_EnableClock>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013e4:	2004      	movs	r0, #4
 80013e6:	f7ff ffe3 	bl	80013b0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff ffe0 	bl	80013b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2102      	movs	r1, #2
 80013f4:	200b      	movs	r0, #11
 80013f6:	f003 fcf2 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013fa:	200b      	movs	r0, #11
 80013fc:	f003 fd09 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	200c      	movs	r0, #12
 8001406:	f003 fcea 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800140a:	200c      	movs	r0, #12
 800140c:	f003 fd01 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	203d      	movs	r0, #61	; 0x3d
 8001416:	f003 fce2 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800141a:	203d      	movs	r0, #61	; 0x3d
 800141c:	f003 fcf9 	bl	8004e12 <HAL_NVIC_EnableIRQ>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001430:	23ff      	movs	r3, #255	; 0xff
 8001432:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800143a:	d311      	bcc.n	8001460 <FLASH_IF_Write+0x3c>
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <FLASH_IF_Write+0x48>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	029a      	lsls	r2, r3, #10
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <FLASH_IF_Write+0x4c>)
 8001444:	4013      	ands	r3, r2
 8001446:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800144a:	3b01      	subs	r3, #1
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4293      	cmp	r3, r2
 8001450:	d306      	bcc.n	8001460 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f85a 	bl	8001510 <FLASH_IF_INT_Write>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	1fff75e0 	.word	0x1fff75e0
 8001470:	03fffc00 	.word	0x03fffc00

08001474 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800148a:	d311      	bcc.n	80014b0 <FLASH_IF_Read+0x3c>
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <FLASH_IF_Read+0x48>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	029a      	lsls	r2, r3, #10
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <FLASH_IF_Read+0x4c>)
 8001494:	4013      	ands	r3, r2
 8001496:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800149a:	3b01      	subs	r3, #1
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d306      	bcc.n	80014b0 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f93a 	bl	8001720 <FLASH_IF_INT_Read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80014b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	1fff75e0 	.word	0x1fff75e0
 80014c0:	03fffc00 	.word	0x03fffc00

080014c4 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ce:	23ff      	movs	r3, #255	; 0xff
 80014d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014d8:	d310      	bcc.n	80014fc <FLASH_IF_Erase+0x38>
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <FLASH_IF_Erase+0x44>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	029a      	lsls	r2, r3, #10
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <FLASH_IF_Erase+0x48>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014e8:	3b01      	subs	r3, #1
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d305      	bcc.n	80014fc <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f932 	bl	800175c <FLASH_IF_INT_Erase>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	1fff75e0 	.word	0x1fff75e0
 800150c:	03fffc00 	.word	0x03fffc00

08001510 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00c      	beq.n	800154e <FLASH_IF_INT_Write+0x3e>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <FLASH_IF_INT_Write+0x3e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800154e:	f06f 0305 	mvn.w	r3, #5
 8001552:	e0da      	b.n	800170a <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001554:	f000 f992 	bl	800187c <FLASH_IF_INT_Clear_Error>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800155e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80cf 	bne.w	8001706 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001568:	f004 f93c 	bl	80057e4 <HAL_FLASH_Unlock>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 80c6 	bne.w	8001700 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <FLASH_IF_INT_Write+0x204>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0299      	lsls	r1, r3, #10
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <FLASH_IF_INT_Write+0x208>)
 8001582:	400b      	ands	r3, r1
 8001584:	fbb2 f1f3 	udiv	r1, r2, r3
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	0adb      	lsrs	r3, r3, #11
 8001590:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800159c:	3b01      	subs	r3, #1
 800159e:	4a5d      	ldr	r2, [pc, #372]	; (8001714 <FLASH_IF_INT_Write+0x204>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	0291      	lsls	r1, r2, #10
 80015a4:	4a5c      	ldr	r2, [pc, #368]	; (8001718 <FLASH_IF_INT_Write+0x208>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015ac:	fb01 f202 	mul.w	r2, r1, r2
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	0ada      	lsrs	r2, r3, #11
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d905      	bls.n	80015ce <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d2:	e089      	b.n	80016e8 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80015da:	02db      	lsls	r3, r3, #11
 80015dc:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80015de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f925 	bl	8001830 <FLASH_IF_INT_IsEmpty>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d031      	beq.n	8001650 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <FLASH_IF_INT_Write+0x20c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015f4:	23fa      	movs	r3, #250	; 0xfa
 80015f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80015fa:	e07e      	b.n	80016fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <FLASH_IF_INT_Write+0x20c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f88a 	bl	8001720 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <FLASH_IF_INT_Write+0x20c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001616:	4413      	add	r3, r2
 8001618:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161c:	b292      	uxth	r2, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f01b ff68 	bl	801d4f4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f896 	bl	800175c <FLASH_IF_INT_Erase>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001636:	23fe      	movs	r3, #254	; 0xfe
 8001638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800163c:	e05d      	b.n	80016fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <FLASH_IF_INT_Write+0x20c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e005      	b.n	800165c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001656:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	e026      	b.n	80016b0 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800166e:	2001      	movs	r0, #1
 8001670:	f004 f874 	bl	800575c <HAL_FLASH_Program>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d113      	bne.n	80016a2 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001680:	6a3a      	ldr	r2, [r7, #32]
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	4413      	add	r3, r2
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	4299      	cmp	r1, r3
 800168c:	bf08      	it	eq
 800168e:	4290      	cmpeq	r0, r2
 8001690:	d003      	beq.n	800169a <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001692:	23fc      	movs	r3, #252	; 0xfc
 8001694:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001698:	e00e      	b.n	80016b8 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	3308      	adds	r3, #8
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	e003      	b.n	80016aa <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80016a2:	23fc      	movs	r3, #252	; 0xfc
 80016a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80016a8:	e006      	b.n	80016b8 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	3308      	adds	r3, #8
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3d4      	bcc.n	8001662 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80016b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11b      	bne.n	80016f8 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80016c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	4413      	add	r3, r2
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80016c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016cc:	4413      	add	r3, r2
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016da:	bf28      	it	cs
 80016dc:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	3301      	adds	r3, #1
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4413      	add	r3, r2
 80016ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f4ff af6f 	bcc.w	80015d4 <FLASH_IF_INT_Write+0xc4>
 80016f6:	e000      	b.n	80016fa <FLASH_IF_INT_Write+0x1ea>
          break;
 80016f8:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016fa:	f004 f895 	bl	8005828 <HAL_FLASH_Lock>
 80016fe:	e002      	b.n	8001706 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001700:	23fb      	movs	r3, #251	; 0xfb
 8001702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001706:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800170a:	4618      	mov	r0, r3
 800170c:	3740      	adds	r7, #64	; 0x40
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	1fff75e0 	.word	0x1fff75e0
 8001718:	03fffc00 	.word	0x03fffc00
 800171c:	200001e4 	.word	0x200001e4

08001720 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <FLASH_IF_INT_Read+0x1c>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 800173c:	f06f 0305 	mvn.w	r3, #5
 8001740:	e008      	b.n	8001754 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	b29b      	uxth	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f01b fed2 	bl	801d4f4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001750:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 800177c:	f06f 0305 	mvn.w	r3, #5
 8001780:	e04e      	b.n	8001820 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001782:	f000 f87b 	bl	800187c <FLASH_IF_INT_Clear_Error>
 8001786:	4603      	mov	r3, r0
 8001788:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800178a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d144      	bne.n	800181c <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001792:	f004 f827 	bl	80057e4 <HAL_FLASH_Unlock>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13d      	bne.n	8001818 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800179c:	2302      	movs	r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <FLASH_IF_INT_Erase+0xcc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0299      	lsls	r1, r3, #10
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <FLASH_IF_INT_Erase+0xd0>)
 80017ae:	400b      	ands	r3, r1
 80017b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	0adb      	lsrs	r3, r3, #11
 80017bc:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <FLASH_IF_INT_Erase+0xcc>)
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	0291      	lsls	r1, r2, #10
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <FLASH_IF_INT_Erase+0xd0>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80017d8:	fb01 f202 	mul.w	r2, r1, r2
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	0ada      	lsrs	r2, r3, #11
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80017e8:	f107 0214 	add.w	r2, r7, #20
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 f8f8 	bl	80059e8 <HAL_FLASHEx_Erase>
 80017f8:	4603      	mov	r3, r0
 80017fa:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017fc:	7fbb      	ldrb	r3, [r7, #30]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d101      	bne.n	800180c <FLASH_IF_INT_Erase+0xb0>
 8001808:	2301      	movs	r3, #1
 800180a:	e001      	b.n	8001810 <FLASH_IF_INT_Erase+0xb4>
 800180c:	f06f 0301 	mvn.w	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001812:	f004 f809 	bl	8005828 <HAL_FLASH_Lock>
 8001816:	e001      	b.n	800181c <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001818:	23fb      	movs	r3, #251	; 0xfb
 800181a:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 800181c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	1fff75e0 	.word	0x1fff75e0
 800182c:	03fffc00 	.word	0x03fffc00

08001830 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	e011      	b.n	8001868 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	bf08      	it	eq
 8001850:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001854:	d002      	beq.n	800185c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001856:	2301      	movs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
      break;
 800185a:	e009      	b.n	8001870 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3308      	adds	r3, #8
 8001860:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3308      	adds	r3, #8
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d3e9      	bcc.n	8001844 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001882:	23fb      	movs	r3, #251	; 0xfb
 8001884:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001886:	f003 ffad 	bl	80057e4 <HAL_FLASH_Unlock>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d110      	bne.n	80018b2 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001896:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <FLASH_IF_INT_Clear_Error+0x44>)
 800189e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80018a2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80018a4:	f003 ffc0 	bl	8005828 <HAL_FLASH_Lock>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	58004000 	.word	0x58004000

080018c4 <LL_AHB2_GRP1_EnableClock>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e8:	68fb      	ldr	r3, [r7, #12]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff ffdb 	bl	80018c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff ffd8 	bl	80018c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001914:	2004      	movs	r0, #4
 8001916:	f7ff ffd5 	bl	80018c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001920:	4825      	ldr	r0, [pc, #148]	; (80019b8 <MX_GPIO_Init+0xc4>)
 8001922:	f004 fb63 	bl	8005fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	2120      	movs	r1, #32
 800192a:	4823      	ldr	r0, [pc, #140]	; (80019b8 <MX_GPIO_Init+0xc4>)
 800192c:	f004 fb5e 	bl	8005fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f240 2131 	movw	r1, #561	; 0x231
 8001936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193a:	f004 fb57 	bl	8005fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|LED2_Pin;
 800193e:	2328      	movs	r3, #40	; 0x28
 8001940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4819      	ldr	r0, [pc, #100]	; (80019b8 <MX_GPIO_Init+0xc4>)
 8001954:	f004 f91c 	bl	8005b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001958:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800195c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <MX_GPIO_Init+0xc4>)
 8001970:	f004 f90e 	bl	8005b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001974:	2331      	movs	r3, #49	; 0x31
 8001976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f004 f900 	bl	8005b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f004 f8f1 	bl	8005b90 <HAL_GPIO_Init>

}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	48000400 	.word	0x48000400

080019bc <LL_AHB2_GRP1_EnableClock>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <LL_APB1_GRP1_EnableClock>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <MX_I2C2_Init+0x78>)
 8001a24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <MX_I2C2_Init+0x7c>)
 8001a2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a58:	f004 fadf 	bl	800601a <HAL_I2C_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a62:	f000 fbb9 	bl	80021d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4809      	ldr	r0, [pc, #36]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a6a:	f005 fe7a 	bl	8007762 <HAL_I2CEx_ConfigAnalogFilter>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a74:	f000 fbb0 	bl	80021d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_I2C2_Init+0x74>)
 8001a7c:	f005 febb 	bl	80077f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f000 fba7 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001e8 	.word	0x200001e8
 8001a94:	40005800 	.word	0x40005800
 8001a98:	00707cbb 	.word	0x00707cbb

08001a9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2238      	movs	r2, #56	; 0x38
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f01c ffdd 	bl	801ea7c <memset>
  if(i2cHandle->Instance==I2C2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_I2C_MspInit+0xd0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d14b      	bne.n	8001b64 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ad0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4618      	mov	r0, r3
 8001adc:	f007 fd98 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ae6:	f000 fb77 	bl	80021d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff ff66 	bl	80019bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7ff ff63 	bl	80019bc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afc:	2312      	movs	r3, #18
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b04:	2301      	movs	r3, #1
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f004 f83b 	bl	8005b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b20:	2312      	movs	r3, #18
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b34:	4619      	mov	r1, r3
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <HAL_I2C_MspInit+0xd4>)
 8001b38:	f004 f82a 	bl	8005b90 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b3c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001b40:	f7ff ff54 	bl	80019ec <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2020      	movs	r0, #32
 8001b4a:	f003 f948 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b4e:	2020      	movs	r0, #32
 8001b50:	f003 f95f 	bl	8004e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2021      	movs	r0, #33	; 0x21
 8001b5a:	f003 f940 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b5e:	2021      	movs	r0, #33	; 0x21
 8001b60:	f003 f957 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3758      	adds	r7, #88	; 0x58
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	48000400 	.word	0x48000400

08001b74 <LL_APB1_GRP1_EnableClock>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001baa:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <MX_LPTIM1_Init+0x58>)
 8001bac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bb6:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001bba:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_LPTIM1_Init+0x54>)
 8001be4:	f005 fec4 	bl	8007970 <HAL_LPTIM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001bee:	f000 faf3 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000023c 	.word	0x2000023c
 8001bfc:	40007c00 	.word	0x40007c00

08001c00 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b090      	sub	sp, #64	; 0x40
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2238      	movs	r2, #56	; 0x38
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f01c ff33 	bl	801ea7c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_LPTIM_MspInit+0x60>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d11b      	bne.n	8001c58 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c24:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001c26:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4618      	mov	r0, r3
 8001c32:	f007 fced 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001c3c:	f000 facc 	bl	80021d8 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001c40:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001c44:	f7ff ff96 	bl	8001b74 <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2027      	movs	r0, #39	; 0x27
 8001c4e:	f003 f8c6 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001c52:	2027      	movs	r0, #39	; 0x27
 8001c54:	f003 f8dd 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3740      	adds	r7, #64	; 0x40
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40007c00 	.word	0x40007c00

08001c64 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f023 0218 	bic.w	r2, r3, #24
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
	...

08001c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c94:	f001 fef0 	bl	8003a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c98:	f000 f82a 	bl	8001cf0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c9c:	f7ff fe2a 	bl	80018f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ca0:	f00b fa5c 	bl	800d15c <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001ca4:	f001 fb42 	bl	800332c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001ca8:	f7ff feb8 	bl	8001a1c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001cac:	f000 fc70 	bl	8002590 <MX_SPI2_Init>
  MX_LPTIM1_Init();
 8001cb0:	f7ff ff78 	bl	8001ba4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  F1_QueueIni(); // init Function queue
 8001cb4:	f000 fa9c 	bl	80021f0 <F1_QueueIni>
  F2_QueueIni();
 8001cb8:	f000 fb12 	bl	80022e0 <F2_QueueIni>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f004 f991 	bl	8005fec <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim16);
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1,  256, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <main+0x5c>)
 8001cd2:	f005 ff15 	bl	8007b00 <HAL_LPTIM_TimeOut_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001cd6:	f00b fa49 	bl	800d16c <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */

    F1_pull()();
 8001cda:	f000 facd 	bl	8002278 <F1_pull>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4798      	blx	r3
    F2_pull()();
 8001ce2:	f000 fb41 	bl	8002368 <F2_pull>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4798      	blx	r3
    MX_LoRaWAN_Process();
 8001cea:	e7f4      	b.n	8001cd6 <main+0x46>
 8001cec:	2000023c 	.word	0x2000023c

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b09a      	sub	sp, #104	; 0x68
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2248      	movs	r2, #72	; 0x48
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f01c febc 	bl	801ea7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d16:	f006 fa0b 	bl	8008130 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff ffa2 	bl	8001c64 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <SystemClock_Config+0xb8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <SystemClock_Config+0xb8>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <SystemClock_Config+0xb8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001d40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d46:	2381      	movs	r3, #129	; 0x81
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4618      	mov	r0, r3
 8001d62:	f006 fd31 	bl	80087c8 <HAL_RCC_OscConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d6c:	f000 fa34 	bl	80021d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001d70:	234f      	movs	r3, #79	; 0x4f
 8001d72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d74:	2302      	movs	r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d88:	f107 0308 	add.w	r3, r7, #8
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f007 f89c 	bl	8008ecc <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d9a:	f000 fa1d 	bl	80021d8 <Error_Handler>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3768      	adds	r7, #104	; 0x68
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58000400 	.word	0x58000400

08001dac <EnablePM_sens>:

/* USER CODE BEGIN 4 */

void EnablePM_sens(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f004 f917 	bl	8005fec <HAL_GPIO_WritePin>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <DisablePM_sens>:

void DisablePM_sens(void){
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd0:	f004 f90c 	bl	8005fec <HAL_GPIO_WritePin>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001dde:	2333      	movs	r3, #51	; 0x33
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	b299      	uxth	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	230c      	movs	r3, #12
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2301      	movs	r3, #1
 8001df6:	2200      	movs	r2, #0
 8001df8:	482e      	ldr	r0, [pc, #184]	; (8001eb4 <MeasurePM_sens+0xdc>)
 8001dfa:	f004 fb87 	bl	800650c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x26, 1, &pmSensStatus, 1, 1000);
 8001dfe:	2333      	movs	r3, #51	; 0x33
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	b299      	uxth	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <MeasurePM_sens+0xe0>)
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2301      	movs	r3, #1
 8001e16:	2226      	movs	r2, #38	; 0x26
 8001e18:	4826      	ldr	r0, [pc, #152]	; (8001eb4 <MeasurePM_sens+0xdc>)
 8001e1a:	f004 fb77 	bl	800650c <HAL_I2C_Mem_Read>
 if(!pmSensStatus){
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MeasurePM_sens+0xe0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d141      	bne.n	8001eaa <MeasurePM_sens+0xd2>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	441a      	add	r2, r3
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	441a      	add	r2, r3
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4413      	add	r3, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MeasurePM_sens+0xe4>)
 8001e50:	601a      	str	r2, [r3, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	441a      	add	r2, r3
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e66:	799b      	ldrb	r3, [r3, #6]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	441a      	add	r2, r3
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e70:	79db      	ldrb	r3, [r3, #7]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MeasurePM_sens+0xe8>)
 8001e7c:	601a      	str	r2, [r3, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e80:	7a1b      	ldrb	r3, [r3, #8]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e88:	7a5b      	ldrb	r3, [r3, #9]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	441a      	add	r2, r3
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e92:	7a9b      	ldrb	r3, [r3, #10]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	441a      	add	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <MeasurePM_sens+0xd8>)
 8001e9c:	7adb      	ldrb	r3, [r3, #11]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <MeasurePM_sens+0xec>)
 8001ea8:	601a      	str	r2, [r3, #0]
 }
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200002b0 	.word	0x200002b0
 8001eb4:	200001e8 	.word	0x200001e8
 8001eb8:	200002a0 	.word	0x200002a0
 8001ebc:	20000288 	.word	0x20000288
 8001ec0:	20000284 	.word	0x20000284
 8001ec4:	2000028c 	.word	0x2000028c

08001ec8 <MeasureOzone>:
void MeasureOzone(void){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE);
 8001ece:	2209      	movs	r2, #9
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <MeasureOzone+0x38>)
 8001ed2:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MeasureOzone+0x3c>)
 8001ed4:	f008 fe42 	bl	800ab5c <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE, &RxLen, 1000);
 8001ed8:	1dbb      	adds	r3, r7, #6
 8001eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ede:	9200      	str	r2, [sp, #0]
 8001ee0:	2209      	movs	r2, #9
 8001ee2:	4907      	ldr	r1, [pc, #28]	; (8001f00 <MeasureOzone+0x38>)
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <MeasureOzone+0x3c>)
 8001ee6:	f00a ffc8 	bl	800ce7a <HAL_UARTEx_ReceiveToIdle>
	OzonePPB = ZE27_parsePPB(aRXBufferUser);
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MeasureOzone+0x38>)
 8001eec:	f7ff f8ef 	bl	80010ce <ZE27_parsePPB>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <MeasureOzone+0x40>)
 8001ef6:	801a      	strh	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000278 	.word	0x20000278
 8001f04:	20000490 	.word	0x20000490
 8001f08:	20000290 	.word	0x20000290
 8001f0c:	00000000 	.word	0x00000000

08001f10 <MeasureTempHum>:

void MeasureTempHum(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af02      	add	r7, sp, #8

    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 8001f16:	2344      	movs	r3, #68	; 0x44
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	2364      	movs	r3, #100	; 0x64
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2306      	movs	r3, #6
 8001f24:	4a44      	ldr	r2, [pc, #272]	; (8002038 <MeasureTempHum+0x128>)
 8001f26:	4845      	ldr	r0, [pc, #276]	; (800203c <MeasureTempHum+0x12c>)
 8001f28:	f004 f9fa 	bl	8006320 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <MeasureTempHum+0x128>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <MeasureTempHum+0x128>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <MeasureTempHum+0x130>)
 8001f46:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <MeasureTempHum+0x128>)
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <MeasureTempHum+0x128>)
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <MeasureTempHum+0x134>)
 8001f62:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <MeasureTempHum+0x130>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fe91 	bl	8000c90 <__aeabi_ui2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fa6d 	bl	8000450 <__aeabi_f2d>
 8001f76:	a32c      	add	r3, pc, #176	; (adr r3, 8002028 <MeasureTempHum+0x118>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fac0 	bl	8000500 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	a329      	add	r3, pc, #164	; (adr r3, 8002030 <MeasureTempHum+0x120>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fbe1 	bl	8000754 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <MeasureTempHum+0x138>)
 8001fa0:	f7fe f8f6 	bl	8000190 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fd6a 	bl	8000a84 <__aeabi_d2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a26      	ldr	r2, [pc, #152]	; (800204c <MeasureTempHum+0x13c>)
 8001fb4:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <MeasureTempHum+0x134>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe68 	bl	8000c90 <__aeabi_ui2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fa44 	bl	8000450 <__aeabi_f2d>
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <MeasureTempHum+0x140>)
 8001fce:	f7fe fa97 	bl	8000500 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	a315      	add	r3, pc, #84	; (adr r3, 8002030 <MeasureTempHum+0x120>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fbb8 	bl	8000754 <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MeasureTempHum+0x144>)
 8001ff2:	f7fe f8cd 	bl	8000190 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd41 	bl	8000a84 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <MeasureTempHum+0x148>)
 8002006:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8002008:	2344      	movs	r3, #68	; 0x44
 800200a:	b29b      	uxth	r3, r3
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	b299      	uxth	r1, r3
 8002010:	2364      	movs	r3, #100	; 0x64
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <MeasureTempHum+0x14c>)
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <MeasureTempHum+0x12c>)
 800201a:	f004 f88d 	bl	8006138 <HAL_I2C_Master_Transmit>
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	4065e000 	.word	0x4065e000
 8002030:	00000000 	.word	0x00000000
 8002034:	40efffe0 	.word	0x40efffe0
 8002038:	200002a4 	.word	0x200002a4
 800203c:	200001e8 	.word	0x200001e8
 8002040:	200002aa 	.word	0x200002aa
 8002044:	200002ac 	.word	0x200002ac
 8002048:	40468000 	.word	0x40468000
 800204c:	20000294 	.word	0x20000294
 8002050:	405f4000 	.word	0x405f4000
 8002054:	40180000 	.word	0x40180000
 8002058:	20000298 	.word	0x20000298
 800205c:	0801f51b 	.word	0x0801f51b

08002060 <HAL_LPTIM_CompareMatchCallback>:

 void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	static char firstStart = 1;
   if (hlptim == &hlptim1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a50      	ldr	r2, [pc, #320]	; (80021ac <HAL_LPTIM_CompareMatchCallback+0x14c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	f040 8099 	bne.w	80021a4 <HAL_LPTIM_CompareMatchCallback+0x144>
   {

      switch(counter){
 8002072:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800207a:	da57      	bge.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
 800207c:	f240 2253 	movw	r2, #595	; 0x253
 8002080:	4293      	cmp	r3, r2
 8002082:	da0b      	bge.n	800209c <HAL_LPTIM_CompareMatchCallback+0x3c>
 8002084:	f240 222f 	movw	r2, #559	; 0x22f
 8002088:	4293      	cmp	r3, r2
 800208a:	d035      	beq.n	80020f8 <HAL_LPTIM_CompareMatchCallback+0x98>
 800208c:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8002090:	da4c      	bge.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d014      	beq.n	80020c0 <HAL_LPTIM_CompareMatchCallback+0x60>
 8002096:	2b28      	cmp	r3, #40	; 0x28
 8002098:	d01a      	beq.n	80020d0 <HAL_LPTIM_CompareMatchCallback+0x70>
 800209a:	e047      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
 800209c:	f2a3 2353 	subw	r3, r3, #595	; 0x253
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d843      	bhi.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <HAL_LPTIM_CompareMatchCallback+0x4c>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	08002101 	.word	0x08002101
 80020b0:	08002109 	.word	0x08002109
 80020b4:	08002117 	.word	0x08002117
 80020b8:	0800212d 	.word	0x0800212d
 80020bc:	0800211f 	.word	0x0800211f
      case 10:
    	  if(firstStart)
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_LPTIM_CompareMatchCallback+0x154>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02e      	beq.n	8002126 <HAL_LPTIM_CompareMatchCallback+0xc6>
    		  F2_push(EnablePM_sens);
 80020c8:	483b      	ldr	r0, [pc, #236]	; (80021b8 <HAL_LPTIM_CompareMatchCallback+0x158>)
 80020ca:	f000 f919 	bl	8002300 <F2_push>
    	  break;
 80020ce:	e02a      	b.n	8002126 <HAL_LPTIM_CompareMatchCallback+0xc6>
      case 40:
    	  if(firstStart){
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_LPTIM_CompareMatchCallback+0x154>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d028      	beq.n	800212a <HAL_LPTIM_CompareMatchCallback+0xca>
    		  F2_push(MeasureTempHum);
 80020d8:	4838      	ldr	r0, [pc, #224]	; (80021bc <HAL_LPTIM_CompareMatchCallback+0x15c>)
 80020da:	f000 f911 	bl	8002300 <F2_push>
    		  F1_push(MeasurePM_sens);
 80020de:	4838      	ldr	r0, [pc, #224]	; (80021c0 <HAL_LPTIM_CompareMatchCallback+0x160>)
 80020e0:	f000 f896 	bl	8002210 <F1_push>
    		  F1_push(MeasureOzone);
 80020e4:	4837      	ldr	r0, [pc, #220]	; (80021c4 <HAL_LPTIM_CompareMatchCallback+0x164>)
 80020e6:	f000 f893 	bl	8002210 <F1_push>
    		  F2_push(DisablePM_sens);
 80020ea:	4837      	ldr	r0, [pc, #220]	; (80021c8 <HAL_LPTIM_CompareMatchCallback+0x168>)
 80020ec:	f000 f908 	bl	8002300 <F2_push>
    		  firstStart = 0;
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_LPTIM_CompareMatchCallback+0x154>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    	  }
    	  break;
 80020f6:	e018      	b.n	800212a <HAL_LPTIM_CompareMatchCallback+0xca>
      case 559:
    	  F2_push(EnablePM_sens);
 80020f8:	482f      	ldr	r0, [pc, #188]	; (80021b8 <HAL_LPTIM_CompareMatchCallback+0x158>)
 80020fa:	f000 f901 	bl	8002300 <F2_push>

    	  break;
 80020fe:	e015      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
      case 595:
    	  F2_push(MeasureTempHum);
 8002100:	482e      	ldr	r0, [pc, #184]	; (80021bc <HAL_LPTIM_CompareMatchCallback+0x15c>)
 8002102:	f000 f8fd 	bl	8002300 <F2_push>
    	  break;
 8002106:	e011      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
      case 596:
    	  F2_push(MeasureTempHum);
 8002108:	482c      	ldr	r0, [pc, #176]	; (80021bc <HAL_LPTIM_CompareMatchCallback+0x15c>)
 800210a:	f000 f8f9 	bl	8002300 <F2_push>
    	  F1_push(MeasureOzone);
 800210e:	482d      	ldr	r0, [pc, #180]	; (80021c4 <HAL_LPTIM_CompareMatchCallback+0x164>)
 8002110:	f000 f87e 	bl	8002210 <F1_push>
    	  break;
 8002114:	e00a      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>

      case 597:
    	  F1_push(MeasurePM_sens);
 8002116:	482a      	ldr	r0, [pc, #168]	; (80021c0 <HAL_LPTIM_CompareMatchCallback+0x160>)
 8002118:	f000 f87a 	bl	8002210 <F1_push>
    	  break;
 800211c:	e006      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
      case 599:
    	  F2_push(DisablePM_sens);
 800211e:	482a      	ldr	r0, [pc, #168]	; (80021c8 <HAL_LPTIM_CompareMatchCallback+0x168>)
 8002120:	f000 f8ee 	bl	8002300 <F2_push>
 8002124:	e002      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
    	  break;
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <HAL_LPTIM_CompareMatchCallback+0xcc>
    	  break;
 800212a:	bf00      	nop
      }
      counter++;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8002134:	6013      	str	r3, [r2, #0]
      if(counter % 10 == 8)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);///DBG
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_LPTIM_CompareMatchCallback+0x16c>)
 800213c:	fb83 2301 	smull	r2, r3, r3, r1
 8002140:	109a      	asrs	r2, r3, #2
 8002142:	17cb      	asrs	r3, r1, #31
 8002144:	1ad2      	subs	r2, r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	1aca      	subs	r2, r1, r3
 8002150:	2a08      	cmp	r2, #8
 8002152:	d104      	bne.n	800215e <HAL_LPTIM_CompareMatchCallback+0xfe>
 8002154:	2200      	movs	r2, #0
 8002156:	2120      	movs	r1, #32
 8002158:	481d      	ldr	r0, [pc, #116]	; (80021d0 <HAL_LPTIM_CompareMatchCallback+0x170>)
 800215a:	f003 ff47 	bl	8005fec <HAL_GPIO_WritePin>
      if(counter % 10 == 9)HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);///DBG
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_LPTIM_CompareMatchCallback+0x16c>)
 8002164:	fb83 2301 	smull	r2, r3, r3, r1
 8002168:	109a      	asrs	r2, r3, #2
 800216a:	17cb      	asrs	r3, r1, #31
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	1aca      	subs	r2, r1, r3
 8002178:	2a09      	cmp	r2, #9
 800217a:	d104      	bne.n	8002186 <HAL_LPTIM_CompareMatchCallback+0x126>
 800217c:	2201      	movs	r2, #1
 800217e:	2120      	movs	r1, #32
 8002180:	4813      	ldr	r0, [pc, #76]	; (80021d0 <HAL_LPTIM_CompareMatchCallback+0x170>)
 8002182:	f003 ff33 	bl	8005fec <HAL_GPIO_WritePin>
      counter %= 600;
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_LPTIM_CompareMatchCallback+0x174>)
 800218c:	fb83 1302 	smull	r1, r3, r3, r2
 8002190:	1199      	asrs	r1, r3, #6
 8002192:	17d3      	asrs	r3, r2, #31
 8002194:	1acb      	subs	r3, r1, r3
 8002196:	f44f 7116 	mov.w	r1, #600	; 0x258
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <HAL_LPTIM_CompareMatchCallback+0x150>)
 80021a2:	6013      	str	r3, [r2, #0]
   }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000023c 	.word	0x2000023c
 80021b0:	2000029c 	.word	0x2000029c
 80021b4:	20000000 	.word	0x20000000
 80021b8:	08001dad 	.word	0x08001dad
 80021bc:	08001f11 	.word	0x08001f11
 80021c0:	08001dd9 	.word	0x08001dd9
 80021c4:	08001ec9 	.word	0x08001ec9
 80021c8:	08001dc3 	.word	0x08001dc3
 80021cc:	66666667 	.word	0x66666667
 80021d0:	48000400 	.word	0x48000400
 80021d4:	1b4e81b5 	.word	0x1b4e81b5

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>

080021e2 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  F1_last = 0;
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <F1_QueueIni+0x18>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <F1_QueueIni+0x1c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	200002bc 	.word	0x200002bc
 800220c:	200002c0 	.word	0x200002c0

08002210 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <F1_push+0x5c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	425a      	negs	r2, r3
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	f002 020f 	and.w	r2, r2, #15
 8002228:	bf58      	it	pl
 800222a:	4253      	negpl	r3, r2
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <F1_push+0x60>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <F1_push+0x28>
 8002234:	2301      	movs	r3, #1
 8002236:	e014      	b.n	8002262 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <F1_push+0x5c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	490b      	ldr	r1, [pc, #44]	; (800226c <F1_push+0x5c>)
 8002240:	600a      	str	r2, [r1, #0]
 8002242:	490c      	ldr	r1, [pc, #48]	; (8002274 <F1_push+0x64>)
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <F1_push+0x5c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	425a      	negs	r2, r3
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	f002 020f 	and.w	r2, r2, #15
 8002258:	bf58      	it	pl
 800225a:	4253      	negpl	r3, r2
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <F1_push+0x5c>)
 800225e:	6013      	str	r3, [r2, #0]
  return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	200002bc 	.word	0x200002bc
 8002270:	200002c0 	.word	0x200002c0
 8002274:	200002c4 	.word	0x200002c4

08002278 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <F1_pull+0x4c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <F1_pull+0x50>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d101      	bne.n	800228e <F1_pull+0x16>
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <F1_pull+0x54>)
 800228c:	e014      	b.n	80022b8 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <F1_pull+0x50>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <F1_pull+0x50>)
 8002296:	600a      	str	r2, [r1, #0]
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <F1_pull+0x58>)
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <F1_pull+0x50>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	425a      	negs	r2, r3
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	f002 020f 	and.w	r2, r2, #15
 80022ae:	bf58      	it	pl
 80022b0:	4253      	negpl	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <F1_pull+0x50>)
 80022b4:	6013      	str	r3, [r2, #0]
  return pullVar;
 80022b6:	687b      	ldr	r3, [r7, #4]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	200002bc 	.word	0x200002bc
 80022c8:	200002c0 	.word	0x200002c0
 80022cc:	080021e3 	.word	0x080021e3
 80022d0:	200002c4 	.word	0x200002c4

080022d4 <SimpleF2>:
 // ------ 8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----

 volatile int F2_last; // number of last element of fast-speed queue
 int F2_first; // number of first element of fast-speed queue

 void SimpleF2(){;};
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <F2_QueueIni>:

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
   F2_last = 0;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <F2_QueueIni+0x18>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
   F2_first = 0;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <F2_QueueIni+0x1c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 }
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000304 	.word	0x20000304
 80022fc:	20000308 	.word	0x20000308

08002300 <F2_push>:

 int F2_push(void (*pointerQ)(void) ){ // push element from the queue
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <F2_push+0x5c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	425a      	negs	r2, r3
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	f002 020f 	and.w	r2, r2, #15
 8002318:	bf58      	it	pl
 800231a:	4253      	negpl	r3, r2
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <F2_push+0x60>)
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <F2_push+0x28>
 8002324:	2301      	movs	r3, #1
 8002326:	e014      	b.n	8002352 <F2_push+0x52>
   F2_Queue[F2_last++] = pointerQ;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <F2_push+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	490b      	ldr	r1, [pc, #44]	; (800235c <F2_push+0x5c>)
 8002330:	600a      	str	r2, [r1, #0]
 8002332:	490c      	ldr	r1, [pc, #48]	; (8002364 <F2_push+0x64>)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   F2_last%=Q_SIZE_FAST;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <F2_push+0x5c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	425a      	negs	r2, r3
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	f002 020f 	and.w	r2, r2, #15
 8002348:	bf58      	it	pl
 800234a:	4253      	negpl	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <F2_push+0x5c>)
 800234e:	6013      	str	r3, [r2, #0]
   return 0;
 8002350:	2300      	movs	r3, #0
 }
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000304 	.word	0x20000304
 8002360:	20000308 	.word	0x20000308
 8002364:	2000030c 	.word	0x2000030c

08002368 <F2_pull>:

 void (*F2_pull(void))(void){ // pull element from the queue
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
   void (*pullVar)(void);
   if (F2_last == F2_first)return SimpleF2;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <F2_pull+0x4c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <F2_pull+0x50>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d101      	bne.n	800237e <F2_pull+0x16>
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <F2_pull+0x54>)
 800237c:	e014      	b.n	80023a8 <F2_pull+0x40>
   pullVar = F2_Queue[F2_first++];
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <F2_pull+0x50>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <F2_pull+0x50>)
 8002386:	600a      	str	r2, [r1, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <F2_pull+0x58>)
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	607b      	str	r3, [r7, #4]
   F2_first%=Q_SIZE_FAST;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <F2_pull+0x50>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	425a      	negs	r2, r3
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	f002 020f 	and.w	r2, r2, #15
 800239e:	bf58      	it	pl
 80023a0:	4253      	negpl	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <F2_pull+0x50>)
 80023a4:	6013      	str	r3, [r2, #0]
   return pullVar;
 80023a6:	687b      	ldr	r3, [r7, #4]
 }
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000304 	.word	0x20000304
 80023b8:	20000308 	.word	0x20000308
 80023bc:	080022d5 	.word	0x080022d5
 80023c0:	2000030c 	.word	0x2000030c

080023c4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <LL_APB1_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	222c      	movs	r2, #44	; 0x2c
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f01c fb2b 	bl	801ea7c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <MX_RTC_Init+0xa0>)
 800242a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <MX_RTC_Init+0x9c>)
 800242e:	221f      	movs	r2, #31
 8002430:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_RTC_Init+0x9c>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800244a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_RTC_Init+0x9c>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800245a:	4815      	ldr	r0, [pc, #84]	; (80024b0 <MX_RTC_Init+0x9c>)
 800245c:	f007 f9f2 	bl	8009844 <HAL_RTC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002466:	f7ff feb7 	bl	80021d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800246a:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_RTC_Init+0x9c>)
 800246c:	f007 fce8 	bl	8009e40 <HAL_RTCEx_SetSSRU_IT>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002476:	f7ff feaf 	bl	80021d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002486:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800248a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_RTC_Init+0x9c>)
 800249a:	f007 fa55 	bl	8009948 <HAL_RTC_SetAlarm_IT>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80024a4:	f7ff fe98 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	3730      	adds	r7, #48	; 0x30
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000034c 	.word	0x2000034c
 80024b4:	40002800 	.word	0x40002800

080024b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	2238      	movs	r2, #56	; 0x38
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f01c fad7 	bl	801ea7c <memset>
  if(rtcHandle->Instance==RTC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_RTC_MspInit+0x74>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d125      	bne.n	8002524 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f007 f891 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024f4:	f7ff fe70 	bl	80021d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024f8:	f7ff ff64 	bl	80023c4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80024fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002500:	f7ff ff70 	bl	80023e4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2002      	movs	r0, #2
 800250a:	f002 fc68 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800250e:	2002      	movs	r0, #2
 8002510:	f002 fc7f 	bl	8004e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	202a      	movs	r0, #42	; 0x2a
 800251a:	f002 fc60 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800251e:	202a      	movs	r0, #42	; 0x2a
 8002520:	f002 fc77 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002524:	bf00      	nop
 8002526:	3740      	adds	r7, #64	; 0x40
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40002800 	.word	0x40002800

08002530 <LL_AHB2_GRP1_EnableClock>:
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800253e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4313      	orrs	r3, r2
 8002546:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_APB1_GRP1_EnableClock>:
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_SPI2_Init+0x74>)
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <MX_SPI2_Init+0x78>)
 8002598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_SPI2_Init+0x74>)
 800259c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_SPI2_Init+0x74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_SPI2_Init+0x74>)
 80025aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_SPI2_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <MX_SPI2_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_SPI2_Init+0x74>)
 80025be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_SPI2_Init+0x74>)
 80025c6:	2218      	movs	r2, #24
 80025c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_SPI2_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_SPI2_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_SPI2_Init+0x74>)
 80025de:	2207      	movs	r2, #7
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_SPI2_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_SPI2_Init+0x74>)
 80025ea:	2208      	movs	r2, #8
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_SPI2_Init+0x74>)
 80025f0:	f007 fcb4 	bl	8009f5c <HAL_SPI_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f7ff fded 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000384 	.word	0x20000384
 8002608:	40003800 	.word	0x40003800

0800260c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b096      	sub	sp, #88	; 0x58
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	2238      	movs	r2, #56	; 0x38
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f01c fa25 	bl	801ea7c <memset>
  if(spiHandle->Instance==SPI2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_SPI_MspInit+0xb0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d13b      	bne.n	80026b4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800263c:	2310      	movs	r3, #16
 800263e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	4618      	mov	r0, r3
 800264c:	f006 ffe0 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002656:	f7ff fdbf 	bl	80021d8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800265a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800265e:	f7ff ff7f 	bl	8002560 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2002      	movs	r0, #2
 8002664:	f7ff ff64 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff ff61 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800266e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002680:	2305      	movs	r3, #5
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <HAL_SPI_MspInit+0xb4>)
 800268c:	f003 fa80 	bl	8005b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a2:	2305      	movs	r3, #5
 80026a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b0:	f003 fa6e 	bl	8005b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026b4:	bf00      	nop
 80026b6:	3758      	adds	r7, #88	; 0x58
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40003800 	.word	0x40003800
 80026c0:	48000400 	.word	0x48000400

080026c4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	58000400 	.word	0x58000400

080026dc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80026f8:	f001 f9de 	bl	8003ab8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80026fc:	f7ff ffe2 	bl	80026c4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002700:	2001      	movs	r0, #1
 8002702:	f005 fda7 	bl	8008254 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}

0800270a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800270e:	f001 f9e1 	bl	8003ad4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002712:	f001 f855 	bl	80037c0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800271e:	f001 f9cb 	bl	8003ab8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002722:	2101      	movs	r1, #1
 8002724:	2000      	movs	r0, #0
 8002726:	f005 fd11 	bl	800814c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002732:	f001 f9cf 	bl	8003ad4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274a:	e7fe      	b.n	800274a <NMI_Handler+0x4>

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <HardFault_Handler+0x4>

08002752 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <MemManage_Handler+0x4>

08002758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <BusFault_Handler+0x4>

0800275e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800279a:	f007 fb8d 	bl	8009eb8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000034c 	.word	0x2000034c

080027a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <DMA1_Channel1_IRQHandler+0x10>)
 80027ae:	f002 fdc7 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000524 	.word	0x20000524

080027bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <DMA1_Channel2_IRQHandler+0x10>)
 80027c2:	f002 fdbd 	bl	8005340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000584 	.word	0x20000584

080027d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <I2C2_EV_IRQHandler+0x10>)
 80027d6:	f003 ffb3 	bl	8006740 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200001e8 	.word	0x200001e8

080027e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <I2C2_ER_IRQHandler+0x10>)
 80027ea:	f003 ffc3 	bl	8006774 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200001e8 	.word	0x200001e8

080027f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <USART1_IRQHandler+0x10>)
 80027fe:	f008 fa79 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200003fc 	.word	0x200003fc

0800280c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART2_IRQHandler+0x10>)
 8002812:	f008 fa6f 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000490 	.word	0x20000490

08002820 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <LPTIM1_IRQHandler+0x10>)
 8002826:	f005 f9fd 	bl	8007c24 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000023c 	.word	0x2000023c

08002834 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <RTC_Alarm_IRQHandler+0x10>)
 800283a:	f007 f9ed 	bl	8009c18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000034c 	.word	0x2000034c

08002848 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <SUBGHZ_Radio_IRQHandler+0x10>)
 800284e:	f007 ff75 	bl	800a73c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200003e8 	.word	0x200003e8

0800285c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <DMAMUX1_OVR_IRQHandler+0x10>)
 8002862:	f002 ff29 	bl	80056b8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000584 	.word	0x20000584

08002870 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002894:	68fb      	ldr	r3, [r7, #12]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_SUBGHZ_Init+0x20>)
 80028a6:	2208      	movs	r2, #8
 80028a8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_SUBGHZ_Init+0x20>)
 80028ac:	f007 fcc4 	bl	800a238 <HAL_SUBGHZ_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80028b6:	f7ff fc8f 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003e8 	.word	0x200003e8

080028c4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff ffcf 	bl	8002870 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	2032      	movs	r0, #50	; 0x32
 80028d8:	f002 fa81 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80028dc:	2032      	movs	r0, #50	; 0x32
 80028de:	f002 fa98 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <LL_RCC_SetClkAfterWakeFromStop>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <LL_FLASH_GetUDN+0x10>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	1fff7580 	.word	0x1fff7580

08002924 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <LL_FLASH_GetDeviceID+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	1fff7584 	.word	0x1fff7584

0800293c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <LL_FLASH_GetSTCompanyID+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0a1b      	lsrs	r3, r3, #8
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	1fff7584 	.word	0x1fff7584

08002954 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff ffc6 	bl	80028ea <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800295e:	f01b fb57 	bl	801e010 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <SystemApp_Init+0x48>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002968:	f000 f988 	bl	8002c7c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800296c:	f01b fde0 	bl	801e530 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <SystemApp_Init+0x4c>)
 8002972:	f01b fe8b 	bl	801e68c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <SystemApp_Init+0x50>)
 8002978:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800297c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800297e:	2002      	movs	r0, #2
 8002980:	f01b fe92 	bl	801e6a8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002984:	f7fe fcb4 	bl	80012f0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002988:	f000 f9b0 	bl	8002cec <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800298c:	f01a fd0c 	bl	801d3a8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002990:	2101      	movs	r1, #1
 8002992:	2001      	movs	r0, #1
 8002994:	f01a fd48 	bl	801d428 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200003f4 	.word	0x200003f4
 80029a0:	08002b75 	.word	0x08002b75
 80029a4:	58004000 	.word	0x58004000

080029a8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80029ac:	f01a fd6c 	bl	801d488 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80029be:	f7fe fca5 	bl	800130c <SYS_GetBatteryLevel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d902      	bls.n	80029d6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80029d0:	23fe      	movs	r3, #254	; 0xfe
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	e014      	b.n	8002a00 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80029d6:	88bb      	ldrh	r3, [r7, #4]
 80029d8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80029dc:	d202      	bcs.n	80029e4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	71fb      	strb	r3, [r7, #7]
 80029e2:	e00d      	b.n	8002a00 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80029ea:	461a      	mov	r2, r3
 80029ec:	4613      	mov	r3, r2
 80029ee:	01db      	lsls	r3, r3, #7
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <GetBatteryLevel+0x58>)
 80029f8:	fba3 2302 	umull	r2, r3, r3, r2
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002a00:	79fb      	ldrb	r3, [r7, #7]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	1b4e81b5 	.word	0x1b4e81b5

08002a10 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f93b 	bl	8002c98 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f98b 	bl	8000d40 <__aeabi_f2iz>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002a2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002a3a:	b590      	push	{r4, r7, lr}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002a46:	f7ff ff63 	bl	8002910 <LL_FLASH_GetUDN>
 8002a4a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d138      	bne.n	8002ac6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002a54:	f001 f84c 	bl	8003af0 <HAL_GetUIDw0>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	f001 f85d 	bl	8003b18 <HAL_GetUIDw2>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4423      	add	r3, r4
 8002a62:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002a64:	f001 f84e 	bl	8003b04 <HAL_GetUIDw1>
 8002a68:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	0e1a      	lsrs	r2, r3, #24
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3307      	adds	r3, #7
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	0c1a      	lsrs	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3306      	adds	r3, #6
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	0a1a      	lsrs	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3305      	adds	r3, #5
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0e1a      	lsrs	r2, r3, #24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3303      	adds	r3, #3
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0c1a      	lsrs	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	0a1a      	lsrs	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002ac4:	e031      	b.n	8002b2a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3307      	adds	r3, #7
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	0a1a      	lsrs	r2, r3, #8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3306      	adds	r3, #6
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0c1a      	lsrs	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3305      	adds	r3, #5
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0e1a      	lsrs	r2, r3, #24
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002af4:	f7ff ff16 	bl	8002924 <LL_FLASH_GetDeviceID>
 8002af8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3303      	adds	r3, #3
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002b04:	f7ff ff1a 	bl	800293c <LL_FLASH_GetSTCompanyID>
 8002b08:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	0a1a      	lsrs	r2, r3, #8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	701a      	strb	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}

08002b32 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002b32:	b590      	push	{r4, r7, lr}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002b3a:	f7ff fee9 	bl	8002910 <LL_FLASH_GetUDN>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d10d      	bne.n	8002b6a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002b4e:	f000 ffcf 	bl	8003af0 <HAL_GetUIDw0>
 8002b52:	4604      	mov	r4, r0
 8002b54:	f000 ffd6 	bl	8003b04 <HAL_GetUIDw1>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	405c      	eors	r4, r3
 8002b5c:	f000 ffdc 	bl	8003b18 <HAL_GetUIDw2>
 8002b60:	4603      	mov	r3, r0
 8002b62:	ea84 0203 	eor.w	r2, r4, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
	...

08002b74 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	4618      	mov	r0, r3
 8002b84:	f01a fd90 	bl	801d6a8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b8e:	9200      	str	r2, [sp, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <TimestampNow+0x3c>)
 8002b92:	2110      	movs	r1, #16
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f81d 	bl	8002bd4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd faec 	bl	8000178 <strlen>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0801ecb8 	.word	0x0801ecb8

08002bb4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f01a fc04 	bl	801d3c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f01a fbfc 	bl	801d3c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002bd4:	b40c      	push	{r2, r3}
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f01a ff2d 	bl	801da4c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bfc:	b002      	add	sp, #8
 8002bfe:	4770      	bx	lr

08002c00 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_GetTick+0x24>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c26:	f000 f92d 	bl	8002e84 <TIMER_IF_GetTimerValue>
 8002c2a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200003f4 	.word	0x200003f4

08002c3c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f9a3 	bl	8002f92 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c62:	4905      	ldr	r1, [pc, #20]	; (8002c78 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	58000800 	.word	0x58000800

08002c7c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002c80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c84:	f7ff ffe6 	bl	8002c54 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002c88:	f000 ff50 	bl	8003b2c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002c8c:	f000 ff54 	bl	8003b38 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002c90:	f000 ff58 	bl	8003b44 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <EnvSensors_Read+0x40>)
 8002ca2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <EnvSensors_Read+0x44>)
 8002ca6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <EnvSensors_Read+0x48>)
 8002caa:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <EnvSensors_Read+0x4c>)
 8002cc2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <EnvSensors_Read+0x50>)
 8002cc8:	611a      	str	r2, [r3, #16]

  return 0;
 8002cca:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	42480000 	.word	0x42480000
 8002cdc:	41900000 	.word	0x41900000
 8002ce0:	447a0000 	.word	0x447a0000
 8002ce4:	003e090d 	.word	0x003e090d
 8002ce8:	000503ab 	.word	0x000503ab

08002cec <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002cf6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <TIMER_IF_Init+0x5c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <TIMER_IF_Init+0x60>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002d44:	f7ff fb66 	bl	8002414 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002d48:	f000 f856 	bl	8002df8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d50:	480c      	ldr	r0, [pc, #48]	; (8002d84 <TIMER_IF_Init+0x60>)
 8002d52:	f006 ff05 	bl	8009b60 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <TIMER_IF_Init+0x60>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002d5e:	4809      	ldr	r0, [pc, #36]	; (8002d84 <TIMER_IF_Init+0x60>)
 8002d60:	f007 f83c 	bl	8009ddc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f000 f9d3 	bl	8003110 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002d6a:	f000 f85f 	bl	8002e2c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <TIMER_IF_Init+0x5c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002d74:	79fb      	ldrb	r3, [r7, #7]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200003f5 	.word	0x200003f5
 8002d84:	2000034c 	.word	0x2000034c

08002d88 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	222c      	movs	r2, #44	; 0x2c
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f01b fe6c 	bl	801ea7c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002da4:	f000 f828 	bl	8002df8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <TIMER_IF_StartTimer+0x68>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002dc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002dc4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4807      	ldr	r0, [pc, #28]	; (8002df4 <TIMER_IF_StartTimer+0x6c>)
 8002dd6:	f006 fdb7 	bl	8009948 <HAL_RTC_SetAlarm_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002de0:	f7ff f9fa 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3738      	adds	r7, #56	; 0x38
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200003f8 	.word	0x200003f8
 8002df4:	2000034c 	.word	0x2000034c

08002df8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <TIMER_IF_StopTimer+0x2c>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e0c:	4806      	ldr	r0, [pc, #24]	; (8002e28 <TIMER_IF_StopTimer+0x30>)
 8002e0e:	f006 fea7 	bl	8009b60 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <TIMER_IF_StopTimer+0x30>)
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40002800 	.word	0x40002800
 8002e28:	2000034c 	.word	0x2000034c

08002e2c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002e30:	f000 f98e 	bl	8003150 <GetTimerTicks>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <TIMER_IF_SetTimerContext+0x18>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e3a:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <TIMER_IF_SetTimerContext+0x18>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200003f8 	.word	0x200003f8

08002e48 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <TIMER_IF_GetTimerContext+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	200003f8 	.word	0x200003f8

08002e5c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002e66:	f000 f973 	bl	8003150 <GetTimerTicks>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003f8 	.word	0x200003f8

08002e84 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <TIMER_IF_GetTimerValue+0x24>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002e96:	f000 f95b 	bl	8003150 <GetTimerTicks>
 8002e9a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002e9c:	687b      	ldr	r3, [r7, #4]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200003f5 	.word	0x200003f5

08002eac <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002eba:	687b      	ldr	r3, [r7, #4]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002ec6:	b5b0      	push	{r4, r5, r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ece:	2100      	movs	r1, #0
 8002ed0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	4603      	mov	r3, r0
 8002eda:	0d95      	lsrs	r5, r2, #22
 8002edc:	0294      	lsls	r4, r2, #10
 8002ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	f7fd ff4f 	bl	8000d8c <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}

08002f00 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002f00:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	2000      	movs	r0, #0
 8002f12:	460c      	mov	r4, r1
 8002f14:	4605      	mov	r5, r0
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f04f 0a00 	mov.w	sl, #0
 8002f1e:	f04f 0b00 	mov.w	fp, #0
 8002f22:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002f26:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002f2a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002f2e:	4650      	mov	r0, sl
 8002f30:	4659      	mov	r1, fp
 8002f32:	1b02      	subs	r2, r0, r4
 8002f34:	eb61 0305 	sbc.w	r3, r1, r5
 8002f38:	f04f 0000 	mov.w	r0, #0
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	0099      	lsls	r1, r3, #2
 8002f42:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f46:	0090      	lsls	r0, r2, #2
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	eb12 0804 	adds.w	r8, r2, r4
 8002f50:	eb43 0905 	adc.w	r9, r3, r5
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f68:	4690      	mov	r8, r2
 8002f6a:	4699      	mov	r9, r3
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	0a82      	lsrs	r2, r0, #10
 8002f7a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f7e:	0a8b      	lsrs	r3, r1, #10
 8002f80:	4613      	mov	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002f84:	68fb      	ldr	r3, [r7, #12]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f90:	4770      	bx	lr

08002f92 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff93 	bl	8002ec6 <TIMER_IF_Convert_ms2Tick>
 8002fa0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002fa2:	f000 f8d5 	bl	8003150 <GetTimerTicks>
 8002fa6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fa8:	e000      	b.n	8002fac <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002faa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fac:	f000 f8d0 	bl	8003150 <GetTimerTicks>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8f6      	bhi.n	8002faa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002fce:	f01b f96d 	bl	801e2ac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002fe2:	f000 f8a5 	bl	8003130 <TIMER_IF_BkUp_Read_MSBticks>
 8002fe6:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f88f 	bl	8003110 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002ffa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003008:	f000 f8a2 	bl	8003150 <GetTimerTicks>
 800300c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800300e:	f000 f88f 	bl	8003130 <TIMER_IF_BkUp_Read_MSBticks>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2200      	movs	r2, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	60fa      	str	r2, [r7, #12]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	000b      	movs	r3, r1
 8003028:	2200      	movs	r2, #0
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	2000      	movs	r0, #0
 800302e:	460c      	mov	r4, r1
 8003030:	4605      	mov	r5, r0
 8003032:	eb12 0804 	adds.w	r8, r2, r4
 8003036:	eb43 0905 	adc.w	r9, r3, r5
 800303a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800303e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	0a82      	lsrs	r2, r0, #10
 800304c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8003050:	0a8b      	lsrs	r3, r1, #10
 8003052:	4613      	mov	r3, r2
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2200      	movs	r2, #0
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003064:	f04f 0b00 	mov.w	fp, #0
 8003068:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff46 	bl	8002f00 <TIMER_IF_Convert_Tick2ms>
 8003074:	4603      	mov	r3, r0
 8003076:	b29a      	uxth	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800307e:	4618      	mov	r0, r3
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003088 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	2100      	movs	r1, #0
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003096:	f006 ff33 	bl	8009f00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000034c 	.word	0x2000034c

080030a8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	2101      	movs	r1, #1
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80030b6:	f006 ff23 	bl	8009f00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000034c 	.word	0x2000034c

080030c8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80030d2:	2100      	movs	r1, #0
 80030d4:	4804      	ldr	r0, [pc, #16]	; (80030e8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80030d6:	f006 ff2b 	bl	8009f30 <HAL_RTCEx_BKUPRead>
 80030da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000034c 	.word	0x2000034c

080030ec <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80030f6:	2101      	movs	r1, #1
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80030fa:	f006 ff19 	bl	8009f30 <HAL_RTCEx_BKUPRead>
 80030fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000034c 	.word	0x2000034c

08003110 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	2102      	movs	r1, #2
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800311e:	f006 feef 	bl	8009f00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000034c 	.word	0x2000034c

08003130 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003136:	2102      	movs	r1, #2
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800313a:	f006 fef9 	bl	8009f30 <HAL_RTCEx_BKUPRead>
 800313e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003140:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	2000034c 	.word	0x2000034c

08003150 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003156:	480b      	ldr	r0, [pc, #44]	; (8003184 <GetTimerTicks+0x34>)
 8003158:	f7ff fdd9 	bl	8002d0e <LL_RTC_TIME_GetSubSecond>
 800315c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800315e:	e003      	b.n	8003168 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003160:	4808      	ldr	r0, [pc, #32]	; (8003184 <GetTimerTicks+0x34>)
 8003162:	f7ff fdd4 	bl	8002d0e <LL_RTC_TIME_GetSubSecond>
 8003166:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003168:	4806      	ldr	r0, [pc, #24]	; (8003184 <GetTimerTicks+0x34>)
 800316a:	f7ff fdd0 	bl	8002d0e <LL_RTC_TIME_GetSubSecond>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4293      	cmp	r3, r2
 8003174:	d1f4      	bne.n	8003160 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40002800 	.word	0x40002800

08003188 <LL_AHB2_GRP1_EnableClock>:
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4313      	orrs	r3, r2
 800319e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <LL_APB1_GRP1_EnableClock>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <LL_APB1_GRP1_DisableClock>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fe:	4013      	ands	r3, r2
 8003200:	658b      	str	r3, [r1, #88]	; 0x58
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_APB2_GRP1_EnableClock>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4313      	orrs	r3, r2
 8003222:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <LL_APB2_GRP1_DisableClock>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	43db      	mvns	r3, r3
 800324e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003252:	4013      	ands	r3, r2
 8003254:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <LL_SYSCFG_EnableFastModePlus>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000

08003284 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 800328a:	4a27      	ldr	r2, [pc, #156]	; (8003328 <MX_USART1_UART_Init+0xa4>)
 800328c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 8003290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a8:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032aa:	220c      	movs	r2, #12
 80032ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032dc:	f007 fbed 	bl	800aaba <HAL_UART_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80032e6:	f7fe ff77 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ea:	2100      	movs	r1, #0
 80032ec:	480d      	ldr	r0, [pc, #52]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 80032ee:	f009 fd48 	bl	800cd82 <HAL_UARTEx_SetTxFifoThreshold>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80032f8:	f7fe ff6e 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032fc:	2100      	movs	r1, #0
 80032fe:	4809      	ldr	r0, [pc, #36]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 8003300:	f009 fd7d 	bl	800cdfe <HAL_UARTEx_SetRxFifoThreshold>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800330a:	f7fe ff65 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <MX_USART1_UART_Init+0xa0>)
 8003310:	f009 fcc4 	bl	800cc9c <HAL_UARTEx_EnableFifoMode>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800331a:	f7fe ff5d 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200003fc 	.word	0x200003fc
 8003328:	40013800 	.word	0x40013800

0800332c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003332:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <MX_USART2_UART_Init+0x98>)
 8003334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800333c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800335c:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 800335e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003362:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003366:	2200      	movs	r2, #0
 8003368:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 800336c:	2200      	movs	r2, #0
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003372:	2200      	movs	r2, #0
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003376:	4812      	ldr	r0, [pc, #72]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 8003378:	f007 fb9f 	bl	800aaba <HAL_UART_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003382:	f7fe ff29 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003386:	2100      	movs	r1, #0
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 800338a:	f009 fcfa 	bl	800cd82 <HAL_UARTEx_SetTxFifoThreshold>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003394:	f7fe ff20 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003398:	2100      	movs	r1, #0
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 800339c:	f009 fd2f 	bl	800cdfe <HAL_UARTEx_SetRxFifoThreshold>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80033a6:	f7fe ff17 	bl	80021d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033aa:	4805      	ldr	r0, [pc, #20]	; (80033c0 <MX_USART2_UART_Init+0x94>)
 80033ac:	f009 fcb1 	bl	800cd12 <HAL_UARTEx_DisableFifoMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80033b6:	f7fe ff0f 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000490 	.word	0x20000490
 80033c4:	40004400 	.word	0x40004400

080033c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b09a      	sub	sp, #104	; 0x68
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80033e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	2238      	movs	r2, #56	; 0x38
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f01b fb40 	bl	801ea7c <memset>
  if(uartHandle->Instance==USART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_UART_MspInit+0x1f8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f040 80a4 	bne.w	8003550 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003408:	2301      	movs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800340c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003410:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	4618      	mov	r0, r3
 8003418:	f006 f8fa 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003422:	f7fe fed9 	bl	80021d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003426:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800342a:	f7ff feef 	bl	800320c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2002      	movs	r0, #2
 8003430:	f7ff feaa 	bl	8003188 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003434:	23c0      	movs	r3, #192	; 0xc0
 8003436:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343c:	2301      	movs	r3, #1
 800343e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003440:	2301      	movs	r3, #1
 8003442:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003444:	2307      	movs	r3, #7
 8003446:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800344c:	4619      	mov	r1, r3
 800344e:	485d      	ldr	r0, [pc, #372]	; (80035c4 <HAL_UART_MspInit+0x1fc>)
 8003450:	f002 fb9e 	bl	8005b90 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003454:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003458:	f7ff ff02 	bl	8003260 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800345c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003460:	f7ff fefe 	bl	8003260 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003464:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003466:	4a59      	ldr	r2, [pc, #356]	; (80035cc <HAL_UART_MspInit+0x204>)
 8003468:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800346a:	4b57      	ldr	r3, [pc, #348]	; (80035c8 <HAL_UART_MspInit+0x200>)
 800346c:	2212      	movs	r2, #18
 800346e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003470:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003472:	2210      	movs	r2, #16
 8003474:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003476:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800347c:	4b52      	ldr	r3, [pc, #328]	; (80035c8 <HAL_UART_MspInit+0x200>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003482:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003488:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <HAL_UART_MspInit+0x200>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800348e:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003494:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_UART_MspInit+0x200>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800349a:	484b      	ldr	r0, [pc, #300]	; (80035c8 <HAL_UART_MspInit+0x200>)
 800349c:	f001 fcd6 	bl	8004e4c <HAL_DMA_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80034a6:	f7fe fe97 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a46      	ldr	r2, [pc, #280]	; (80035c8 <HAL_UART_MspInit+0x200>)
 80034ae:	67da      	str	r2, [r3, #124]	; 0x7c
 80034b0:	4a45      	ldr	r2, [pc, #276]	; (80035c8 <HAL_UART_MspInit+0x200>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80034b6:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034b8:	4a46      	ldr	r2, [pc, #280]	; (80035d4 <HAL_UART_MspInit+0x20c>)
 80034ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034bc:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034be:	2211      	movs	r2, #17
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d4:	4b3e      	ldr	r3, [pc, #248]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034ec:	4838      	ldr	r0, [pc, #224]	; (80035d0 <HAL_UART_MspInit+0x208>)
 80034ee:	f001 fcad 	bl	8004e4c <HAL_DMA_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80034f8:	f7fe fe6e 	bl	80021d8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003500:	2300      	movs	r3, #0
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003510:	2301      	movs	r3, #1
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003514:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003518:	4619      	mov	r1, r3
 800351a:	482d      	ldr	r0, [pc, #180]	; (80035d0 <HAL_UART_MspInit+0x208>)
 800351c:	f002 f88c 	bl	8005638 <HAL_DMAEx_ConfigMuxSync>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003526:	f7fe fe57 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_UART_MspInit+0x208>)
 800352e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003532:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_UART_MspInit+0x208>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	2102      	movs	r1, #2
 800353c:	2024      	movs	r0, #36	; 0x24
 800353e:	f001 fc4e 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003542:	2024      	movs	r0, #36	; 0x24
 8003544:	f001 fc65 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003548:	200c      	movs	r0, #12
 800354a:	f001 fc62 	bl	8004e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800354e:	e033      	b.n	80035b8 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_UART_MspInit+0x210>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12e      	bne.n	80035b8 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800355a:	2302      	movs	r3, #2
 800355c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800355e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003562:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003564:	f107 030c 	add.w	r3, r7, #12
 8003568:	4618      	mov	r0, r3
 800356a:	f006 f851 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8003574:	f7fe fe30 	bl	80021d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003578:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800357c:	f7ff fe1c 	bl	80031b8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003580:	2001      	movs	r0, #1
 8003582:	f7ff fe01 	bl	8003188 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003586:	230c      	movs	r3, #12
 8003588:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358a:	2302      	movs	r3, #2
 800358c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358e:	2301      	movs	r3, #1
 8003590:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003592:	2301      	movs	r3, #1
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003596:	2307      	movs	r3, #7
 8003598:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800359e:	4619      	mov	r1, r3
 80035a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a4:	f002 faf4 	bl	8005b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2025      	movs	r0, #37	; 0x25
 80035ae:	f001 fc16 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035b2:	2025      	movs	r0, #37	; 0x25
 80035b4:	f001 fc2d 	bl	8004e12 <HAL_NVIC_EnableIRQ>
}
 80035b8:	bf00      	nop
 80035ba:	3768      	adds	r7, #104	; 0x68
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40013800 	.word	0x40013800
 80035c4:	48000400 	.word	0x48000400
 80035c8:	20000524 	.word	0x20000524
 80035cc:	40020008 	.word	0x40020008
 80035d0:	20000584 	.word	0x20000584
 80035d4:	4002001c 	.word	0x4002001c
 80035d8:	40004400 	.word	0x40004400

080035dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_UART_MspDeInit+0x6c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d116      	bne.n	800361c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035f2:	f7ff fe23 	bl	800323c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80035f6:	21c0      	movs	r1, #192	; 0xc0
 80035f8:	4814      	ldr	r0, [pc, #80]	; (800364c <HAL_UART_MspDeInit+0x70>)
 80035fa:	f002 fc29 	bl	8005e50 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fcca 	bl	8004f9c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fcc4 	bl	8004f9c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003614:	2024      	movs	r0, #36	; 0x24
 8003616:	f001 fc0a 	bl	8004e2e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800361a:	e010      	b.n	800363e <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <HAL_UART_MspDeInit+0x74>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10b      	bne.n	800363e <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003626:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800362a:	f7ff fddd 	bl	80031e8 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800362e:	210c      	movs	r1, #12
 8003630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003634:	f002 fc0c 	bl	8005e50 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003638:	2025      	movs	r0, #37	; 0x25
 800363a:	f001 fbf8 	bl	8004e2e <HAL_NVIC_DisableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40013800 	.word	0x40013800
 800364c:	48000400 	.word	0x48000400
 8003650:	40004400 	.word	0x40004400

08003654 <LL_APB2_GRP1_ForceReset>:
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4313      	orrs	r3, r2
 800366a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <LL_APB2_GRP1_ReleaseReset>:
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	43db      	mvns	r3, r3
 8003688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368c:	4013      	ands	r3, r2
 800368e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
	...

0800369c <LL_EXTI_EnableIT_0_31>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80036a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80036aa:	4905      	ldr	r1, [pc, #20]	; (80036c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	58000800 	.word	0x58000800

080036c4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <vcom_Init+0x28>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80036d2:	f7fd fe85 	bl	80013e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036d6:	f7ff fdd5 	bl	8003284 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80036da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036de:	f7ff ffdd 	bl	800369c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80036e2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200005e8 	.word	0x200005e8

080036f0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80036f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f8:	f7ff ffac 	bl	8003654 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80036fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003700:	f7ff ffb9 	bl	8003676 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003704:	4804      	ldr	r0, [pc, #16]	; (8003718 <vcom_DeInit+0x28>)
 8003706:	f7ff ff69 	bl	80035dc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800370a:	200f      	movs	r0, #15
 800370c:	f001 fb8f 	bl	8004e2e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003710:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003712:	4618      	mov	r0, r3
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200003fc 	.word	0x200003fc

0800371c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	461a      	mov	r2, r3
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4804      	ldr	r0, [pc, #16]	; (8003740 <vcom_Trace_DMA+0x24>)
 8003730:	f007 fa60 	bl	800abf4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003734:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200003fc 	.word	0x200003fc

08003744 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800374c:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <vcom_ReceiveInit+0x70>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003752:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003756:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003760:	4815      	ldr	r0, [pc, #84]	; (80037b8 <vcom_ReceiveInit+0x74>)
 8003762:	f009 fa0e 	bl	800cb82 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003766:	bf00      	nop
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <vcom_ReceiveInit+0x74>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d0f7      	beq.n	8003768 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003778:	bf00      	nop
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <vcom_ReceiveInit+0x74>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003788:	d1f7      	bne.n	800377a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <vcom_ReceiveInit+0x74>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <vcom_ReceiveInit+0x74>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003798:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800379a:	4807      	ldr	r0, [pc, #28]	; (80037b8 <vcom_ReceiveInit+0x74>)
 800379c:	f009 fa4c 	bl	800cc38 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80037a0:	2201      	movs	r2, #1
 80037a2:	4906      	ldr	r1, [pc, #24]	; (80037bc <vcom_ReceiveInit+0x78>)
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <vcom_ReceiveInit+0x74>)
 80037a6:	f007 f9d9 	bl	800ab5c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80037aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200005ec 	.word	0x200005ec
 80037b8:	200003fc 	.word	0x200003fc
 80037bc:	200005e4 	.word	0x200005e4

080037c0 <vcom_Resume>:

void vcom_Resume(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037c4:	4808      	ldr	r0, [pc, #32]	; (80037e8 <vcom_Resume+0x28>)
 80037c6:	f007 f978 	bl	800aaba <HAL_UART_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <vcom_Resume+0x14>
  {
    Error_Handler();
 80037d0:	f7fe fd02 	bl	80021d8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <vcom_Resume+0x2c>)
 80037d6:	f001 fb39 	bl	8004e4c <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <vcom_Resume+0x24>
  {
    Error_Handler();
 80037e0:	f7fe fcfa 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200003fc 	.word	0x200003fc
 80037ec:	20000524 	.word	0x20000524

080037f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <HAL_UART_TxCpltCallback+0x24>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d103      	bne.n	800380a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_UART_TxCpltCallback+0x28>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2000      	movs	r0, #0
 8003808:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40013800 	.word	0x40013800
 8003818:	200005e8 	.word	0x200005e8

0800381c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a11      	ldr	r2, [pc, #68]	; (8003870 <HAL_UART_RxCpltCallback+0x54>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d113      	bne.n	8003856 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_UART_RxCpltCallback+0x58>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_UART_RxCpltCallback+0x30>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_UART_RxCpltCallback+0x58>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2200      	movs	r2, #0
 8003846:	2101      	movs	r1, #1
 8003848:	480b      	ldr	r0, [pc, #44]	; (8003878 <HAL_UART_RxCpltCallback+0x5c>)
 800384a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800384c:	2201      	movs	r2, #1
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_UART_RxCpltCallback+0x5c>)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f007 f983 	bl	800ab5c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <HAL_UART_RxCpltCallback+0x60>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_UART_RxCpltCallback+0x64>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013800 	.word	0x40013800
 8003874:	200005ec 	.word	0x200005ec
 8003878:	200005e4 	.word	0x200005e4
 800387c:	40004400 	.word	0x40004400
 8003880:	20000008 	.word	0x20000008

08003884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003884:	480d      	ldr	r0, [pc, #52]	; (80038bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003886:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003888:	f7ff fa3b 	bl	8002d02 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800388e:	490d      	ldr	r1, [pc, #52]	; (80038c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <LoopForever+0xe>)
  movs r3, #0
 8003892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003894:	e002      	b.n	800389c <LoopCopyDataInit>

08003896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389a:	3304      	adds	r3, #4

0800389c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800389c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a0:	d3f9      	bcc.n	8003896 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80038a4:	4c0a      	ldr	r4, [pc, #40]	; (80038d0 <LoopForever+0x16>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a8:	e001      	b.n	80038ae <LoopFillZerobss>

080038aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ac:	3204      	adds	r2, #4

080038ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b0:	d3fb      	bcc.n	80038aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038b2:	f01b f8eb 	bl	801ea8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038b6:	f7fe f9eb 	bl	8001c90 <main>

080038ba <LoopForever>:

LoopForever:
    b LoopForever
 80038ba:	e7fe      	b.n	80038ba <LoopForever>
  ldr   r0, =_estack
 80038bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80038c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80038c8:	0801fc54 	.word	0x0801fc54
  ldr r2, =_sbss
 80038cc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80038d0:	2000205c 	.word	0x2000205c

080038d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038d4:	e7fe      	b.n	80038d4 <ADC_IRQHandler>

080038d6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80038ea:	2310      	movs	r3, #16
 80038ec:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80038ee:	2301      	movs	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	2303      	movs	r3, #3
 80038f8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003902:	f002 f945 	bl	8005b90 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003906:	2320      	movs	r3, #32
 8003908:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	4619      	mov	r1, r3
 800390e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003912:	f002 f93d 	bl	8005b90 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391e:	f002 fb65 	bl	8005fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003922:	2200      	movs	r2, #0
 8003924:	2110      	movs	r1, #16
 8003926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392a:	f002 fb5f 	bl	8005fec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d83f      	bhi.n	80039c8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	0800397b 	.word	0x0800397b
 8003958:	08003995 	.word	0x08003995
 800395c:	080039af 	.word	0x080039af
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003960:	2200      	movs	r2, #0
 8003962:	2110      	movs	r1, #16
 8003964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003968:	f002 fb40 	bl	8005fec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	2120      	movs	r1, #32
 8003970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003974:	f002 fb3a 	bl	8005fec <HAL_GPIO_WritePin>
      break;      
 8003978:	e027      	b.n	80039ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800397a:	2201      	movs	r2, #1
 800397c:	2110      	movs	r1, #16
 800397e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003982:	f002 fb33 	bl	8005fec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003986:	2200      	movs	r2, #0
 8003988:	2120      	movs	r1, #32
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f002 fb2d 	bl	8005fec <HAL_GPIO_WritePin>
      break;
 8003992:	e01a      	b.n	80039ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003994:	2201      	movs	r2, #1
 8003996:	2110      	movs	r1, #16
 8003998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399c:	f002 fb26 	bl	8005fec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039a0:	2201      	movs	r2, #1
 80039a2:	2120      	movs	r1, #32
 80039a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a8:	f002 fb20 	bl	8005fec <HAL_GPIO_WritePin>
      break;
 80039ac:	e00d      	b.n	80039ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80039ae:	2200      	movs	r2, #0
 80039b0:	2110      	movs	r1, #16
 80039b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b6:	f002 fb19 	bl	8005fec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039ba:	2201      	movs	r2, #1
 80039bc:	2120      	movs	r1, #32
 80039be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c2:	f002 fb13 	bl	8005fec <HAL_GPIO_WritePin>
      break;
 80039c6:	e000      	b.n	80039ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80039c8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80039d8:	2302      	movs	r3, #2
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80039f4:	2301      	movs	r3, #1
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e001      	b.n	8003a18 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003a14:	2316      	movs	r3, #22
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a18:	68fb      	ldr	r3, [r7, #12]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6053      	str	r3, [r2, #4]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	e0042000 	.word	0xe0042000

08003a40 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	6053      	str	r3, [r2, #4]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	e0042000 	.word	0xe0042000

08003a5c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a03      	ldr	r2, [pc, #12]	; (8003a74 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6053      	str	r3, [r2, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	e0042000 	.word	0xe0042000

08003a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a82:	2003      	movs	r0, #3
 8003a84:	f001 f9a0 	bl	8004dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a88:	f005 fbe4 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_Init+0x3c>)
 8003a90:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a92:	200f      	movs	r0, #15
 8003a94:	f7ff f8b4 	bl	8002c00 <HAL_InitTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	71fb      	strb	r3, [r7, #7]
 8003aa2:	e001      	b.n	8003aa8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aa4:	f7fe fe49 	bl	800273a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000004 	.word	0x20000004

08003ab8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <HAL_SuspendTick+0x18>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <HAL_SuspendTick+0x18>)
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <HAL_ResumeTick+0x18>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_ResumeTick+0x18>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	e000e010 	.word	0xe000e010

08003af0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003af4:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <HAL_GetUIDw0+0x10>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	1fff7590 	.word	0x1fff7590

08003b04 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <HAL_GetUIDw1+0x10>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	1fff7594 	.word	0x1fff7594

08003b18 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <HAL_GetUIDw2+0x10>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	1fff7598 	.word	0x1fff7598

08003b2c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003b30:	f7ff ff78 	bl	8003a24 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003b3c:	f7ff ff80 	bl	8003a40 <LL_DBGMCU_EnableDBGStopMode>
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003b48:	f7ff ff88 	bl	8003a5c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2107      	movs	r1, #7
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	401a      	ands	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2107      	movs	r1, #7
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	210f      	movs	r1, #15
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	f003 010f 	and.w	r1, r3, #15
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0219      	lsls	r1, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	400b      	ands	r3, r1
 8003cca:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cf2:	f023 0317 	bic.w	r3, r3, #23
 8003cf6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d18:	f023 0317 	bic.w	r3, r3, #23
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6093      	str	r3, [r2, #8]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3e:	d101      	bne.n	8003d44 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d60:	f023 0317 	bic.w	r3, r3, #23
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d86:	f023 0317 	bic.w	r3, r3, #23
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <LL_ADC_IsEnabled+0x18>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <LL_ADC_IsEnabled+0x1a>
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d101      	bne.n	8003dd8 <LL_ADC_IsDisableOngoing+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_ADC_IsDisableOngoing+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f023 0317 	bic.w	r3, r3, #23
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e1a:	f023 0317 	bic.w	r3, r3, #23
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d101      	bne.n	8003e48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e17e      	b.n	8004174 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd f9ed 	bl	8001264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff44 	bl	8003d2a <LL_ADC_IsInternalRegulatorEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d115      	bne.n	8003ed4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff18 	bl	8003ce2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb2:	4b9e      	ldr	r3, [pc, #632]	; (800412c <HAL_ADC_Init+0x2d8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	4a9d      	ldr	r2, [pc, #628]	; (8004130 <HAL_ADC_Init+0x2dc>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ec6:	e002      	b.n	8003ece <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f9      	bne.n	8003ec8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff26 	bl	8003d2a <LL_ADC_IsInternalRegulatorEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f043 0210 	orr.w	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff93 	bl	8003e30 <LL_ADC_REG_IsConversionOngoing>
 8003f0a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 8124 	bne.w	8004162 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 8120 	bne.w	8004162 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff30 	bl	8003d9c <LL_ADC_IsEnabled>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 80a7 	bne.w	8004092 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7e1b      	ldrb	r3, [r3, #24]
 8003f4c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f4e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7e5b      	ldrb	r3, [r3, #25]
 8003f54:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f56:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7e9b      	ldrb	r3, [r3, #26]
 8003f5c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f5e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_ADC_Init+0x11a>
 8003f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f6c:	e000      	b.n	8003f70 <HAL_ADC_Init+0x11c>
 8003f6e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f70:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f76:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da04      	bge.n	8003f8a <HAL_ADC_Init+0x136>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f88:	e001      	b.n	8003f8e <HAL_ADC_Init+0x13a>
 8003f8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003f8e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f96:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f98:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d114      	bne.n	8003fd4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7e9b      	ldrb	r3, [r3, #26]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00b      	b.n	8003fd4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003ffa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	69b9      	ldr	r1, [r7, #24]
 8004004:	430b      	orrs	r3, r1
 8004006:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004014:	4313      	orrs	r3, r2
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d111      	bne.n	800404a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004032:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004038:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800403e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_ADC_Init+0x2e0>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	430b      	orrs	r3, r1
 800405c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004066:	d014      	beq.n	8004092 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d00f      	beq.n	8004092 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d00a      	beq.n	8004092 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_ADC_Init+0x2e4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800408c:	492a      	ldr	r1, [pc, #168]	; (8004138 <HAL_ADC_Init+0x2e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	461a      	mov	r2, r3
 800409c:	2100      	movs	r1, #0
 800409e:	f7ff fd76 	bl	8003b8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	461a      	mov	r2, r3
 80040ac:	4923      	ldr	r1, [pc, #140]	; (800413c <HAL_ADC_Init+0x2e8>)
 80040ae:	f7ff fd6e 	bl	8003b8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f062 020f 	orn	r2, r2, #15
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ca:	e017      	b.n	80040fc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d4:	d112      	bne.n	80040fc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	f003 031c 	and.w	r3, r3, #28
 80040e8:	f06f 020f 	mvn.w	r2, #15
 80040ec:	fa02 f103 	lsl.w	r1, r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fd61 	bl	8003bca <LL_ADC_GetSamplingTimeCommonChannels>
 8004108:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800410e:	429a      	cmp	r2, r3
 8004110:	d116      	bne.n	8004140 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	f023 0303 	bic.w	r3, r3, #3
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004128:	e023      	b.n	8004172 <HAL_ADC_Init+0x31e>
 800412a:	bf00      	nop
 800412c:	20000004 	.word	0x20000004
 8004130:	053e2d63 	.word	0x053e2d63
 8004134:	1ffffc02 	.word	0x1ffffc02
 8004138:	40012708 	.word	0x40012708
 800413c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f023 0312 	bic.w	r3, r3, #18
 8004148:	f043 0210 	orr.w	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004160:	e007      	b.n	8004172 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f043 0210 	orr.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004172:	7ffb      	ldrb	r3, [r7, #31]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07a      	b.n	8004284 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 face 	bl	800473c <ADC_ConversionStop>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fb92 	bl	80048d4 <ADC_Disable>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fd9f 	bl	8003d08 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f240 329f 	movw	r2, #927	; 0x39f
 80041e6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_ADC_DeInit+0x110>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004206:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0207 	bic.w	r2, r2, #7
 8004216:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004226:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2200      	movs	r2, #0
 8004254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004256:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <HAL_ADC_DeInit+0x114>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <HAL_ADC_DeInit+0x114>)
 800425c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004260:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd f82a 	bl	80012bc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	833e0200 	.word	0x833e0200
 8004290:	40012708 	.word	0x40012708

08004294 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fdc5 	bl	8003e30 <LL_ADC_REG_IsConversionOngoing>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d132      	bne.n	8004312 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Start+0x26>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e02e      	b.n	8004318 <HAL_ADC_Start+0x84>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa80 	bl	80047c8 <ADC_Enable>
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11a      	bne.n	8004308 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	221c      	movs	r2, #28
 80042f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fd6f 	bl	8003de4 <LL_ADC_REG_StartConversion>
 8004306:	e006      	b.n	8004316 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004310:	e001      	b.n	8004316 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_ADC_Stop+0x16>
 8004332:	2302      	movs	r3, #2
 8004334:	e022      	b.n	800437c <HAL_ADC_Stop+0x5c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9fc 	bl	800473c <ADC_ConversionStop>
 8004344:	4603      	mov	r3, r0
 8004346:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d111      	bne.n	8004372 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fac0 	bl	80048d4 <ADC_Disable>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d102      	bne.n	800439c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004396:	2308      	movs	r3, #8
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e010      	b.n	80043be <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e077      	b.n	80044aa <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043ba:	2304      	movs	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043be:	f7fe fc29 	bl	8002c14 <HAL_GetTick>
 80043c2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043c4:	e021      	b.n	800440a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d01d      	beq.n	800440a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043ce:	f7fe fc21 	bl	8002c14 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <HAL_ADC_PollForConversion+0x60>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d112      	bne.n	800440a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0d6      	beq.n	80043c6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fbe6 	bl	8003bfa <LL_ADC_REG_IsTriggerSourceSWStart>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d031      	beq.n	8004498 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7e9b      	ldrb	r3, [r3, #26]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d12d      	bne.n	8004498 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d126      	bne.n	8004498 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fcee 	bl	8003e30 <LL_ADC_REG_IsConversionOngoing>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d112      	bne.n	8004480 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 020c 	bic.w	r2, r2, #12
 8004468:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f043 0201 	orr.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	; 0x58
 800447e:	e00b      	b.n	8004498 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f043 0201 	orr.w	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7e1b      	ldrb	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	220c      	movs	r2, #12
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x28>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e110      	b.n	8004716 <HAL_ADC_ConfigChannel+0x24a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fc95 	bl	8003e30 <LL_ADC_REG_IsConversionOngoing>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	f040 80f7 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	f000 80b1 	beq.w	800467a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004520:	d004      	beq.n	800452c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004526:	4a7e      	ldr	r2, [pc, #504]	; (8004720 <HAL_ADC_ConfigChannel+0x254>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7ff fb92 	bl	8003c60 <LL_ADC_REG_SetSequencerChAdd>
 800453c:	e041      	b.n	80045c2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	210f      	movs	r1, #15
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_ADC_ConfigChannel+0xa0>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0e9b      	lsrs	r3, r3, #26
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	e011      	b.n	8004590 <HAL_ADC_ConfigChannel+0xc4>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	e003      	b.n	8004590 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	6849      	ldr	r1, [r1, #4]
 8004594:	f001 011f 	and.w	r1, r1, #31
 8004598:	408b      	lsls	r3, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d808      	bhi.n	80045c2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	f7ff fb2e 	bl	8003c1e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f7ff fb6b 	bl	8003caa <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f280 8097 	bge.w	800470c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045de:	4851      	ldr	r0, [pc, #324]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80045e0:	f7ff fac8 	bl	8003b74 <LL_ADC_GetCommonPathInternalCh>
 80045e4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4f      	ldr	r2, [pc, #316]	; (8004728 <HAL_ADC_ConfigChannel+0x25c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d120      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11b      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004600:	4619      	mov	r1, r3
 8004602:	4848      	ldr	r0, [pc, #288]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 8004604:	f7ff faa4 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <HAL_ADC_ConfigChannel+0x260>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	4a48      	ldr	r2, [pc, #288]	; (8004730 <HAL_ADC_ConfigChannel+0x264>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004622:	e002      	b.n	800462a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3b01      	subs	r3, #1
 8004628:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f9      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004630:	e06c      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <HAL_ADC_ConfigChannel+0x268>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10c      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464c:	4619      	mov	r1, r3
 800464e:	4835      	ldr	r0, [pc, #212]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 8004650:	f7ff fa7e 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 8004654:	e05a      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a37      	ldr	r2, [pc, #220]	; (8004738 <HAL_ADC_ConfigChannel+0x26c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d155      	bne.n	800470c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d150      	bne.n	800470c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004670:	4619      	mov	r1, r3
 8004672:	482c      	ldr	r0, [pc, #176]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 8004674:	f7ff fa6c 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 8004678:	e048      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004682:	d004      	beq.n	800468e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004688:	4a25      	ldr	r2, [pc, #148]	; (8004720 <HAL_ADC_ConfigChannel+0x254>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d107      	bne.n	800469e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f7ff faf3 	bl	8003c84 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da32      	bge.n	800470c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046a6:	481f      	ldr	r0, [pc, #124]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046a8:	f7ff fa64 	bl	8003b74 <LL_ADC_GetCommonPathInternalCh>
 80046ac:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_ADC_ConfigChannel+0x25c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d107      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046be:	4619      	mov	r1, r3
 80046c0:	4818      	ldr	r0, [pc, #96]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046c2:	f7ff fa45 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80046c6:	e021      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_ADC_ConfigChannel+0x268>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d107      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d8:	4619      	mov	r1, r3
 80046da:	4812      	ldr	r0, [pc, #72]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046dc:	f7ff fa38 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80046e0:	e014      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <HAL_ADC_ConfigChannel+0x26c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10f      	bne.n	800470c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046f2:	4619      	mov	r1, r3
 80046f4:	480b      	ldr	r0, [pc, #44]	; (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046f6:	f7ff fa2b 	bl	8003b50 <LL_ADC_SetCommonPathInternalCh>
 80046fa:	e007      	b.n	800470c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004714:	7ffb      	ldrb	r3, [r7, #31]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	80000004 	.word	0x80000004
 8004724:	40012708 	.word	0x40012708
 8004728:	b0001000 	.word	0xb0001000
 800472c:	20000004 	.word	0x20000004
 8004730:	053e2d63 	.word	0x053e2d63
 8004734:	b8004000 	.word	0xb8004000
 8004738:	b4002000 	.word	0xb4002000

0800473c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fb71 	bl	8003e30 <LL_ADC_REG_IsConversionOngoing>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d033      	beq.n	80047bc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fb31 	bl	8003dc0 <LL_ADC_IsDisableOngoing>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fb4e 	bl	8003e0a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800476e:	f7fe fa51 	bl	8002c14 <HAL_GetTick>
 8004772:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004774:	e01b      	b.n	80047ae <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004776:	f7fe fa4d 	bl	8002c14 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d914      	bls.n	80047ae <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e007      	b.n	80047be <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1dc      	bne.n	8004776 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fadf 	bl	8003d9c <LL_ADC_IsEnabled>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d169      	bne.n	80048b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <ADC_Enable+0xfc>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	f043 0210 	orr.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e055      	b.n	80048ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fa9c 	bl	8003d50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004818:	482b      	ldr	r0, [pc, #172]	; (80048c8 <ADC_Enable+0x100>)
 800481a:	f7ff f9ab 	bl	8003b74 <LL_ADC_GetCommonPathInternalCh>
 800481e:	4603      	mov	r3, r0
 8004820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <ADC_Enable+0x104>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <ADC_Enable+0x108>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004838:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800483a:	e002      	b.n	8004842 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f9      	bne.n	800483c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	7e5b      	ldrb	r3, [r3, #25]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d033      	beq.n	80048b8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004850:	f7fe f9e0 	bl	8002c14 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004856:	e028      	b.n	80048aa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fa9d 	bl	8003d9c <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fa6f 	bl	8003d50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004872:	f7fe f9cf 	bl	8002c14 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d914      	bls.n	80048aa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d00d      	beq.n	80048aa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	f043 0210 	orr.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e007      	b.n	80048ba <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d1cf      	bne.n	8004858 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	80000017 	.word	0x80000017
 80048c8:	40012708 	.word	0x40012708
 80048cc:	20000004 	.word	0x20000004
 80048d0:	053e2d63 	.word	0x053e2d63

080048d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa6d 	bl	8003dc0 <LL_ADC_IsDisableOngoing>
 80048e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fa55 	bl	8003d9c <LL_ADC_IsEnabled>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d047      	beq.n	8004988 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d144      	bne.n	8004988 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0305 	and.w	r3, r3, #5
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fa30 	bl	8003d76 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2203      	movs	r2, #3
 800491c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800491e:	f7fe f979 	bl	8002c14 <HAL_GetTick>
 8004922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004924:	e029      	b.n	800497a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	f043 0210 	orr.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e023      	b.n	800498a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004942:	f7fe f967 	bl	8002c14 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d914      	bls.n	800497a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f043 0210 	orr.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e007      	b.n	800498a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1dc      	bne.n	8004942 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <LL_ADC_SetCalibrationFactor>:
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049a2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_GetCalibrationFactor>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_Enable>:
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	f023 0317 	bic.w	r3, r3, #23
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_Disable>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a0c:	f023 0317 	bic.w	r3, r3, #23
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <LL_ADC_IsEnabled>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <LL_ADC_IsEnabled+0x18>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <LL_ADC_IsEnabled+0x1a>
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_ADC_StartCalibration>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	f023 0317 	bic.w	r3, r3, #23
 8004a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_IsCalibrationOnGoing>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a80:	d101      	bne.n	8004a86 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b088      	sub	sp, #32
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADCEx_Calibration_Start+0x1e>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0b9      	b.n	8004c24 <HAL_ADCEx_Calibration_Start+0x192>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff0b 	bl	80048d4 <ADC_Disable>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffab 	bl	8004a22 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 809d 	bne.w	8004c0e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	f248 0303 	movw	r3, #32771	; 0x8003
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e02e      	b.n	8004b6a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff98 	bl	8004a46 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b16:	e014      	b.n	8004b42 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004b24:	d30d      	bcc.n	8004b42 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f023 0312 	bic.w	r3, r3, #18
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e070      	b.n	8004c24 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff ff90 	bl	8004a6c <LL_ADC_IsCalibrationOnGoing>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e2      	bne.n	8004b18 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff2f 	bl	80049ba <LL_ADC_GetCalibrationFactor>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	4413      	add	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	3301      	adds	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b07      	cmp	r3, #7
 8004b6e:	d9cd      	bls.n	8004b0c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff29 	bl	80049d6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff01 	bl	8004992 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff31 	bl	80049fc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b9a:	f7fe f83b 	bl	8002c14 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ba0:	e01c      	b.n	8004bdc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ba2:	f7fe f837 	bl	8002c14 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d915      	bls.n	8004bdc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff34 	bl	8004a22 <LL_ADC_IsEnabled>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e023      	b.n	8004c24 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff1e 	bl	8004a22 <LL_ADC_IsEnabled>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1da      	bne.n	8004ba2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68d9      	ldr	r1, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f023 0303 	bic.w	r3, r3, #3
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c0c:	e005      	b.n	8004c1a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	f043 0210 	orr.w	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	60d3      	str	r3, [r2, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <__NVIC_EnableIRQ+0x34>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	e000e100 	.word	0xe000e100

08004cc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	db12      	blt.n	8004d00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	f003 021f 	and.w	r2, r3, #31
 8004ce0:	490a      	ldr	r1, [pc, #40]	; (8004d0c <__NVIC_DisableIRQ+0x44>)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2001      	movs	r0, #1
 8004cea:	fa00 f202 	lsl.w	r2, r0, r2
 8004cee:	3320      	adds	r3, #32
 8004cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf4:	f3bf 8f4f 	dsb	sy
}
 8004cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cfa:	f3bf 8f6f 	isb	sy
}
 8004cfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000e100 	.word	0xe000e100

08004d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db0a      	blt.n	8004d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	490c      	ldr	r1, [pc, #48]	; (8004d5c <__NVIC_SetPriority+0x4c>)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	440b      	add	r3, r1
 8004d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d38:	e00a      	b.n	8004d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4908      	ldr	r1, [pc, #32]	; (8004d60 <__NVIC_SetPriority+0x50>)
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3b04      	subs	r3, #4
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	761a      	strb	r2, [r3, #24]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000e100 	.word	0xe000e100
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	bf28      	it	cs
 8004d82:	2304      	movcs	r3, #4
 8004d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2b06      	cmp	r3, #6
 8004d8c:	d902      	bls.n	8004d94 <NVIC_EncodePriority+0x30>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3b03      	subs	r3, #3
 8004d92:	e000      	b.n	8004d96 <NVIC_EncodePriority+0x32>
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	401a      	ands	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dac:	f04f 31ff 	mov.w	r1, #4294967295
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	43d9      	mvns	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	4313      	orrs	r3, r2
         );
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3724      	adds	r7, #36	; 0x24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff2b 	bl	8004c2c <__NVIC_SetPriorityGrouping>
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	4603      	mov	r3, r0
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dec:	f7ff ff42 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 8004df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	f7ff ffb4 	bl	8004d64 <NVIC_EncodePriority>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff83 	bl	8004d10 <__NVIC_SetPriority>
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ff35 	bl	8004c90 <__NVIC_EnableIRQ>
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	4603      	mov	r3, r0
 8004e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff43 	bl	8004cc8 <__NVIC_DisableIRQ>
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e08e      	b.n	8004f7c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <HAL_DMA_Init+0x138>)
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d80f      	bhi.n	8004e8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4b45      	ldr	r3, [pc, #276]	; (8004f88 <HAL_DMA_Init+0x13c>)
 8004e72:	4413      	add	r3, r2
 8004e74:	4a45      	ldr	r2, [pc, #276]	; (8004f8c <HAL_DMA_Init+0x140>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	009a      	lsls	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a42      	ldr	r2, [pc, #264]	; (8004f90 <HAL_DMA_Init+0x144>)
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
 8004e88:	e00e      	b.n	8004ea8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <HAL_DMA_Init+0x148>)
 8004e92:	4413      	add	r3, r2
 8004e94:	4a3d      	ldr	r2, [pc, #244]	; (8004f8c <HAL_DMA_Init+0x140>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	009a      	lsls	r2, r3, #2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a3c      	ldr	r2, [pc, #240]	; (8004f98 <HAL_DMA_Init+0x14c>)
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fb30 	bl	8005560 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f08:	d102      	bne.n	8004f10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_DMA_Init+0x106>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d80c      	bhi.n	8004f52 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb59 	bl	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	e008      	b.n	8004f64 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40020407 	.word	0x40020407
 8004f88:	bffdfff8 	.word	0xbffdfff8
 8004f8c:	cccccccd 	.word	0xcccccccd
 8004f90:	40020000 	.word	0x40020000
 8004f94:	bffdfbf8 	.word	0xbffdfbf8
 8004f98:	40020400 	.word	0x40020400

08004f9c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07b      	b.n	80050a6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_DMA_DeInit+0x114>)
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d80f      	bhi.n	8004fea <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <HAL_DMA_DeInit+0x118>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a38      	ldr	r2, [pc, #224]	; (80050b8 <HAL_DMA_DeInit+0x11c>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_DMA_DeInit+0x120>)
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8004fe8:	e00e      	b.n	8005008 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_DMA_DeInit+0x124>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4a30      	ldr	r2, [pc, #192]	; (80050b8 <HAL_DMA_DeInit+0x11c>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	009a      	lsls	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <HAL_DMA_DeInit+0x128>)
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	f003 021c 	and.w	r2, r3, #28
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fa9b 	bl	8005560 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800503a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00f      	beq.n	8005064 <HAL_DMA_DeInit+0xc8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d80b      	bhi.n	8005064 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 facf 	bl	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005062:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40020407 	.word	0x40020407
 80050b4:	bffdfff8 	.word	0xbffdfff8
 80050b8:	cccccccd 	.word	0xcccccccd
 80050bc:	40020000 	.word	0x40020000
 80050c0:	bffdfbf8 	.word	0xbffdfbf8
 80050c4:	40020400 	.word	0x40020400

080050c8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA_Start_IT+0x20>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e069      	b.n	80051bc <HAL_DMA_Start_IT+0xf4>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d155      	bne.n	80051a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f9e0 	bl	80054e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 020e 	orr.w	r2, r2, #14
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e00f      	b.n	8005160 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0204 	bic.w	r2, r2, #4
 800514e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 020a 	orr.w	r2, r2, #10
 800515e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005194:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e008      	b.n	80051ba <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e04f      	b.n	8005276 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d008      	beq.n	80051f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2204      	movs	r2, #4
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e040      	b.n	8005276 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 020e 	bic.w	r2, r2, #14
 8005202:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f003 021c 	and.w	r2, r3, #28
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f202 	lsl.w	r2, r1, r2
 8005236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d005      	beq.n	80052a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
 80052a2:	e047      	b.n	8005334 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020e 	bic.w	r2, r2, #14
 80052b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	f003 021c 	and.w	r2, r3, #28
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2101      	movs	r1, #1
 80052e2:	fa01 f202 	lsl.w	r2, r1, r2
 80052e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005312:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
    }
  }
  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	f003 031c 	and.w	r3, r3, #28
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d027      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7c>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d107      	bne.n	8005394 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0204 	bic.w	r2, r2, #4
 8005392:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	f003 021c 	and.w	r2, r3, #28
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2104      	movs	r1, #4
 80053a2:	fa01 f202 	lsl.w	r2, r1, r2
 80053a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8081 	beq.w	80054b4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053ba:	e07b      	b.n	80054b4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	f003 031c 	and.w	r3, r3, #28
 80053c4:	2202      	movs	r2, #2
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d03d      	beq.n	800544c <HAL_DMA_IRQHandler+0x10c>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d038      	beq.n	800544c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 020a 	bic.w	r2, r2, #10
 80053f6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <HAL_DMA_IRQHandler+0x180>)
 8005408:	429a      	cmp	r2, r3
 800540a:	d909      	bls.n	8005420 <HAL_DMA_IRQHandler+0xe0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	f003 031c 	and.w	r3, r3, #28
 8005414:	4a2b      	ldr	r2, [pc, #172]	; (80054c4 <HAL_DMA_IRQHandler+0x184>)
 8005416:	2102      	movs	r1, #2
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	6053      	str	r3, [r2, #4]
 800541e:	e008      	b.n	8005432 <HAL_DMA_IRQHandler+0xf2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005424:	f003 031c 	and.w	r3, r3, #28
 8005428:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <HAL_DMA_IRQHandler+0x188>)
 800542a:	2102      	movs	r1, #2
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d038      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800544a:	e033      	b.n	80054b4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	f003 031c 	and.w	r3, r3, #28
 8005454:	2208      	movs	r2, #8
 8005456:	409a      	lsls	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x176>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d025      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 020e 	bic.w	r2, r2, #14
 8005478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f003 021c 	and.w	r2, r3, #28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
}
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40020080 	.word	0x40020080
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40020000 	.word	0x40020000

080054cc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054da:	b2db      	uxtb	r3, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f003 021c 	and.w	r2, r3, #28
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2101      	movs	r1, #1
 800551e:	fa01 f202 	lsl.w	r2, r1, r2
 8005522:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b10      	cmp	r3, #16
 8005532:	d108      	bne.n	8005546 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005544:	e007      	b.n	8005556 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005570:	429a      	cmp	r2, r3
 8005572:	d813      	bhi.n	800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005580:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	3b08      	subs	r3, #8
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e011      	b.n	80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	089b      	lsrs	r3, r3, #2
 80055a2:	009a      	lsls	r2, r3, #2
 80055a4:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80055a6:	4413      	add	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b08      	subs	r3, #8
 80055b4:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	3307      	adds	r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80055c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40020407 	.word	0x40020407
 80055e4:	cccccccd 	.word	0xcccccccd
 80055e8:	4002081c 	.word	0x4002081c
 80055ec:	40020880 	.word	0x40020880

080055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005600:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005614:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b01      	subs	r3, #1
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2201      	movs	r2, #1
 8005620:	409a      	lsls	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	1000823f 	.word	0x1000823f
 8005634:	40020940 	.word	0x40020940

08005638 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12b      	bne.n	80056a6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_DMAEx_ConfigMuxSync+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e028      	b.n	80056ae <HAL_DMAEx_ConfigMuxSync+0x76>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	3b01      	subs	r3, #1
 8005678:	04db      	lsls	r3, r3, #19
 800567a:	431a      	orrs	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	431a      	orrs	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	7a1b      	ldrb	r3, [r3, #8]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	431a      	orrs	r2, r3
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	7a5b      	ldrb	r3, [r3, #9]
 800568e:	025b      	lsls	r3, r3, #9
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e003      	b.n	80056ae <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	2b00      	cmp	r3, #0
 800570c:	d022      	beq.n	8005754 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01a      	beq.n	8005754 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800572c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
      }
    }
  }
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800576a:	4b1c      	ldr	r3, [pc, #112]	; (80057dc <HAL_FLASH_Program+0x80>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_FLASH_Program+0x1a>
 8005772:	2302      	movs	r3, #2
 8005774:	e02d      	b.n	80057d2 <HAL_FLASH_Program+0x76>
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_FLASH_Program+0x80>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <HAL_FLASH_Program+0x80>)
 800577e:	2200      	movs	r2, #0
 8005780:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005786:	f000 f869 	bl	800585c <FLASH_WaitForLastOperation>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11a      	bne.n	80057ca <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d105      	bne.n	80057a6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800579a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579e:	68b8      	ldr	r0, [r7, #8]
 80057a0:	f000 f8be 	bl	8005920 <FLASH_Program_DoubleWord>
 80057a4:	e004      	b.n	80057b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f000 f8de 	bl	800596c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80057b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057b4:	f000 f852 	bl	800585c <FLASH_WaitForLastOperation>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80057bc:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_FLASH_Program+0x84>)
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	4906      	ldr	r1, [pc, #24]	; (80057e0 <HAL_FLASH_Program+0x84>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80057ca:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_FLASH_Program+0x80>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200005f0 	.word	0x200005f0
 80057e0:	58004000 	.word	0x58004000

080057e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_FLASH_Unlock+0x38>)
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da0b      	bge.n	800580e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_FLASH_Unlock+0x38>)
 80057f8:	4a09      	ldr	r2, [pc, #36]	; (8005820 <HAL_FLASH_Unlock+0x3c>)
 80057fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <HAL_FLASH_Unlock+0x38>)
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <HAL_FLASH_Unlock+0x40>)
 8005800:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_FLASH_Unlock+0x38>)
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	da01      	bge.n	800580e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800580e:	79fb      	ldrb	r3, [r7, #7]
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	58004000 	.word	0x58004000
 8005820:	45670123 	.word	0x45670123
 8005824:	cdef89ab 	.word	0xcdef89ab

08005828 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_FLASH_Lock+0x30>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4a08      	ldr	r2, [pc, #32]	; (8005858 <HAL_FLASH_Lock+0x30>)
 8005838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800583c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_FLASH_Lock+0x30>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db01      	blt.n	800584a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800584a:	79fb      	ldrb	r3, [r7, #7]
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	58004000 	.word	0x58004000

0800585c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005864:	f7fd f9d6 	bl	8002c14 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800586a:	e009      	b.n	8005880 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800586c:	f7fd f9d2 	bl	8002c14 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d801      	bhi.n	8005880 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e047      	b.n	8005910 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d0ee      	beq.n	800586c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80058aa:	4013      	ands	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <FLASH_WaitForLastOperation+0x6c>
 80058b8:	4b17      	ldr	r3, [pc, #92]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058c2:	4915      	ldr	r1, [pc, #84]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	618b      	str	r3, [r1, #24]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <FLASH_WaitForLastOperation+0x80>
 80058d2:	4a11      	ldr	r2, [pc, #68]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058da:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80058e2:	4a0e      	ldr	r2, [pc, #56]	; (800591c <FLASH_WaitForLastOperation+0xc0>)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e011      	b.n	8005910 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80058ec:	f7fd f992 	bl	8002c14 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d801      	bhi.n	8005900 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e007      	b.n	8005910 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <FLASH_WaitForLastOperation+0xbc>)
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800590c:	d0ee      	beq.n	80058ec <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	58004000 	.word	0x58004000
 800591c:	200005f0 	.word	0x200005f0

08005920 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <FLASH_Program_DoubleWord+0x48>)
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <FLASH_Program_DoubleWord+0x48>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800593e:	f3bf 8f6f 	isb	sy
}
 8005942:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	000a      	movs	r2, r1
 8005952:	2300      	movs	r3, #0
 8005954:	68f9      	ldr	r1, [r7, #12]
 8005956:	3104      	adds	r1, #4
 8005958:	4613      	mov	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58004000 	.word	0x58004000

0800596c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005976:	2340      	movs	r3, #64	; 0x40
 8005978:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <FLASH_Program_Fast+0x78>)
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <FLASH_Program_Fast+0x78>)
 8005988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800598c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	60fb      	str	r3, [r7, #12]
  return(result);
 8005994:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005998:	b672      	cpsid	i
}
 800599a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	3304      	adds	r3, #4
 80059a8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3304      	adds	r3, #4
 80059ae:	617b      	str	r3, [r7, #20]
    row_index--;
 80059b0:	7ffb      	ldrb	r3, [r7, #31]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80059b6:	7ffb      	ldrb	r3, [r7, #31]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ef      	bne.n	800599c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80059bc:	bf00      	nop
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <FLASH_Program_Fast+0x78>)
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d0f8      	beq.n	80059be <FLASH_Program_Fast+0x52>
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80059d8:	bf00      	nop
 80059da:	3724      	adds	r7, #36	; 0x24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	58004000 	.word	0x58004000

080059e8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059f2:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <HAL_FLASHEx_Erase+0xac>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_FLASHEx_Erase+0x16>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e046      	b.n	8005a8c <HAL_FLASHEx_Erase+0xa4>
 80059fe:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <HAL_FLASHEx_Erase+0xac>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a04:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <HAL_FLASHEx_Erase+0xac>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a0e:	f7ff ff25 	bl	800585c <FLASH_WaitForLastOperation>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d133      	bne.n	8005a84 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d108      	bne.n	8005a36 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005a24:	f000 f838 	bl	8005a98 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a2c:	f7ff ff16 	bl	800585c <FLASH_WaitForLastOperation>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e024      	b.n	8005a80 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	e012      	b.n	8005a6c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005a46:	68b8      	ldr	r0, [r7, #8]
 8005a48:	f000 f836 	bl	8005ab8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a50:	f7ff ff04 	bl	800585c <FLASH_WaitForLastOperation>
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	601a      	str	r2, [r3, #0]
          break;
 8005a64:	e00a      	b.n	8005a7c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d3e4      	bcc.n	8005a46 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005a7c:	f000 f878 	bl	8005b70 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a80:	f000 f832 	bl	8005ae8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a84:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <HAL_FLASHEx_Erase+0xac>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]

  return status;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200005f0 	.word	0x200005f0

08005a98 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <FLASH_MassErase+0x1c>)
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <FLASH_MassErase+0x1c>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	f043 0304 	orr.w	r3, r3, #4
 8005aaa:	6153      	str	r3, [r2, #20]
#endif
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	58004000 	.word	0x58004000

08005ab8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005ac0:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <FLASH_PageErase+0x2c>)
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4313      	orrs	r3, r2
 8005ace:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <FLASH_PageErase+0x2c>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	6153      	str	r3, [r2, #20]
#endif
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	58004000 	.word	0x58004000

08005ae8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005aec:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d117      	bne.n	8005b28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005afe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b1c:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b26:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d117      	bne.n	8005b64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a06      	ldr	r2, [pc, #24]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a03      	ldr	r2, [pc, #12]	; (8005b6c <FLASH_FlushCaches+0x84>)
 8005b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b62:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	58004000 	.word	0x58004000

08005b70 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <FLASH_AcknowledgePageErase+0x1c>)
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <FLASH_AcknowledgePageErase+0x1c>)
 8005b7a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005b7e:	f023 0302 	bic.w	r3, r3, #2
 8005b82:	6153      	str	r3, [r2, #20]
#endif
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	58004000 	.word	0x58004000

08005b90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b9e:	e140      	b.n	8005e22 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8132 	beq.w	8005e1c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d005      	beq.n	8005bd0 <HAL_GPIO_Init+0x40>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d130      	bne.n	8005c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2203      	movs	r2, #3
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c06:	2201      	movs	r2, #1
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4013      	ands	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0201 	and.w	r2, r3, #1
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d017      	beq.n	8005c6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	2203      	movs	r2, #3
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4013      	ands	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d123      	bne.n	8005cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	08da      	lsrs	r2, r3, #3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3208      	adds	r2, #8
 8005c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	220f      	movs	r2, #15
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	08da      	lsrs	r2, r3, #3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3208      	adds	r2, #8
 8005cbc:	6939      	ldr	r1, [r7, #16]
 8005cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	2203      	movs	r2, #3
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0203 	and.w	r2, r3, #3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 808c 	beq.w	8005e1c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d04:	4a4e      	ldr	r2, [pc, #312]	; (8005e40 <HAL_GPIO_Init+0x2b0>)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	2207      	movs	r2, #7
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	43db      	mvns	r3, r3
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d2e:	d00d      	beq.n	8005d4c <HAL_GPIO_Init+0x1bc>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a44      	ldr	r2, [pc, #272]	; (8005e44 <HAL_GPIO_Init+0x2b4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <HAL_GPIO_Init+0x1b8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a43      	ldr	r2, [pc, #268]	; (8005e48 <HAL_GPIO_Init+0x2b8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_GPIO_Init+0x1b4>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e004      	b.n	8005d4e <HAL_GPIO_Init+0x1be>
 8005d44:	2307      	movs	r3, #7
 8005d46:	e002      	b.n	8005d4e <HAL_GPIO_Init+0x1be>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_GPIO_Init+0x1be>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	f002 0203 	and.w	r2, r2, #3
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	4093      	lsls	r3, r2
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d5e:	4938      	ldr	r1, [pc, #224]	; (8005e40 <HAL_GPIO_Init+0x2b0>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d6c:	4b37      	ldr	r3, [pc, #220]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d90:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d96:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4013      	ands	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dba:	4a24      	ldr	r2, [pc, #144]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005dc0:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005de6:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005dee:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <HAL_GPIO_Init+0x2bc>)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f aeb7 	bne.w	8005ba0 <HAL_GPIO_Init+0x10>
  }
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	48000400 	.word	0x48000400
 8005e48:	48000800 	.word	0x48000800
 8005e4c:	58000800 	.word	0x58000800

08005e50 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005e5e:	e0af      	b.n	8005fc0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e60:	2201      	movs	r2, #1
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80a2 	beq.w	8005fba <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e76:	4a59      	ldr	r2, [pc, #356]	; (8005fdc <HAL_GPIO_DeInit+0x18c>)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4013      	ands	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e9e:	d00d      	beq.n	8005ebc <HAL_GPIO_DeInit+0x6c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a4f      	ldr	r2, [pc, #316]	; (8005fe0 <HAL_GPIO_DeInit+0x190>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <HAL_GPIO_DeInit+0x68>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a4e      	ldr	r2, [pc, #312]	; (8005fe4 <HAL_GPIO_DeInit+0x194>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <HAL_GPIO_DeInit+0x64>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e004      	b.n	8005ebe <HAL_GPIO_DeInit+0x6e>
 8005eb4:	2307      	movs	r3, #7
 8005eb6:	e002      	b.n	8005ebe <HAL_GPIO_DeInit+0x6e>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_GPIO_DeInit+0x6e>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	f002 0203 	and.w	r2, r2, #3
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	4093      	lsls	r3, r2
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d136      	bne.n	8005f3c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005ece:	4b46      	ldr	r3, [pc, #280]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005ed0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	4943      	ldr	r1, [pc, #268]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005ee0:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005ee2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	493f      	ldr	r1, [pc, #252]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005ef2:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	493b      	ldr	r1, [pc, #236]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005f00:	4b39      	ldr	r3, [pc, #228]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	4937      	ldr	r1, [pc, #220]	; (8005fe8 <HAL_GPIO_DeInit+0x198>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	2207      	movs	r2, #7
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <HAL_GPIO_DeInit+0x18c>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	3302      	adds	r3, #2
 8005f26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	482b      	ldr	r0, [pc, #172]	; (8005fdc <HAL_GPIO_DeInit+0x18c>)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	400a      	ands	r2, r1
 8005f36:	3302      	adds	r3, #2
 8005f38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	2103      	movs	r1, #3
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	08da      	lsrs	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3208      	adds	r2, #8
 8005f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	08d2      	lsrs	r2, r2, #3
 8005f70:	4019      	ands	r1, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3208      	adds	r2, #8
 8005f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	2103      	movs	r1, #3
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	2101      	movs	r1, #1
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	2103      	movs	r1, #3
 8005fae:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	401a      	ands	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f47f af49 	bne.w	8005e60 <HAL_GPIO_DeInit+0x10>
  }
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	48000400 	.word	0x48000400
 8005fe4:	48000800 	.word	0x48000800
 8005fe8:	58000800 	.word	0x58000800

08005fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	807b      	strh	r3, [r7, #2]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ffc:	787b      	ldrb	r3, [r7, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006008:	e002      	b.n	8006010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800600a:	887a      	ldrh	r2, [r7, #2]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e081      	b.n	8006130 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fb fd2b 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2224      	movs	r2, #36	; 0x24
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800606a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800607a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006090:	609a      	str	r2, [r3, #8]
 8006092:	e006      	b.n	80060a2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d104      	bne.n	80060b4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69d9      	ldr	r1, [r3, #28]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1a      	ldr	r2, [r3, #32]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	461a      	mov	r2, r3
 8006144:	460b      	mov	r3, r1
 8006146:	817b      	strh	r3, [r7, #10]
 8006148:	4613      	mov	r3, r2
 800614a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b20      	cmp	r3, #32
 8006156:	f040 80da 	bne.w	800630e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_I2C_Master_Transmit+0x30>
 8006164:	2302      	movs	r3, #2
 8006166:	e0d3      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006170:	f7fc fd50 	bl	8002c14 <HAL_GetTick>
 8006174:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2319      	movs	r3, #25
 800617c:	2201      	movs	r2, #1
 800617e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 f84a 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e0be      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2221      	movs	r2, #33	; 0x21
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2210      	movs	r2, #16
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	893a      	ldrh	r2, [r7, #8]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2bff      	cmp	r3, #255	; 0xff
 80061c2:	d90e      	bls.n	80061e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	22ff      	movs	r2, #255	; 0xff
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	8979      	ldrh	r1, [r7, #10]
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_I2C_Master_Transmit+0x1e0>)
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fa34 	bl	8007648 <I2C_TransferConfig>
 80061e0:	e06c      	b.n	80062bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	8979      	ldrh	r1, [r7, #10]
 80061f4:	4b48      	ldr	r3, [pc, #288]	; (8006318 <HAL_I2C_Master_Transmit+0x1e0>)
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f001 fa23 	bl	8007648 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006202:	e05b      	b.n	80062bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	6a39      	ldr	r1, [r7, #32]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f001 f847 	bl	800729c <I2C_WaitOnTXISFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e07b      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d034      	beq.n	80062bc <HAL_I2C_Master_Transmit+0x184>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	d130      	bne.n	80062bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 ffd9 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e04d      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2bff      	cmp	r3, #255	; 0xff
 800627c:	d90e      	bls.n	800629c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	22ff      	movs	r2, #255	; 0xff
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	b2da      	uxtb	r2, r3
 800628a:	8979      	ldrh	r1, [r7, #10]
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 f9d7 	bl	8007648 <I2C_TransferConfig>
 800629a:	e00f      	b.n	80062bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	8979      	ldrh	r1, [r7, #10]
 80062ae:	2300      	movs	r3, #0
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f001 f9c6 	bl	8007648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d19e      	bne.n	8006204 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6a39      	ldr	r1, [r7, #32]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 f826 	bl	800731c <I2C_WaitOnSTOPFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e01a      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2220      	movs	r2, #32
 80062e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_I2C_Master_Transmit+0x1e4>)
 80062ee:	400b      	ands	r3, r1
 80062f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e000      	b.n	8006310 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800630e:	2302      	movs	r3, #2
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	80002000 	.word	0x80002000
 800631c:	fe00e800 	.word	0xfe00e800

08006320 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	460b      	mov	r3, r1
 800632e:	817b      	strh	r3, [r7, #10]
 8006330:	4613      	mov	r3, r2
 8006332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80db 	bne.w	80064f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_I2C_Master_Receive+0x30>
 800634c:	2302      	movs	r3, #2
 800634e:	e0d4      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006358:	f7fc fc5c 	bl	8002c14 <HAL_GetTick>
 800635c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2319      	movs	r3, #25
 8006364:	2201      	movs	r2, #1
 8006366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 ff56 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0bf      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2222      	movs	r2, #34	; 0x22
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2210      	movs	r2, #16
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	893a      	ldrh	r2, [r7, #8]
 800639a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2bff      	cmp	r3, #255	; 0xff
 80063aa:	d90e      	bls.n	80063ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	8979      	ldrh	r1, [r7, #10]
 80063ba:	4b52      	ldr	r3, [pc, #328]	; (8006504 <HAL_I2C_Master_Receive+0x1e4>)
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 f940 	bl	8007648 <I2C_TransferConfig>
 80063c8:	e06d      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	8979      	ldrh	r1, [r7, #10]
 80063dc:	4b49      	ldr	r3, [pc, #292]	; (8006504 <HAL_I2C_Master_Receive+0x1e4>)
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f001 f92f 	bl	8007648 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063ea:	e05c      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	6a39      	ldr	r1, [r7, #32]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 ffcf 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e07c      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d034      	beq.n	80064a6 <HAL_I2C_Master_Receive+0x186>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d130      	bne.n	80064a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fee4 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04d      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	2bff      	cmp	r3, #255	; 0xff
 8006466:	d90e      	bls.n	8006486 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	22ff      	movs	r2, #255	; 0xff
 800646c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	b2da      	uxtb	r2, r3
 8006474:	8979      	ldrh	r1, [r7, #10]
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f001 f8e2 	bl	8007648 <I2C_TransferConfig>
 8006484:	e00f      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	2300      	movs	r3, #0
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f8d1 	bl	8007648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d19d      	bne.n	80063ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	6a39      	ldr	r1, [r7, #32]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 ff31 	bl	800731c <I2C_WaitOnSTOPFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01a      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2220      	movs	r2, #32
 80064ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_I2C_Master_Receive+0x1e8>)
 80064d8:	400b      	ands	r3, r1
 80064da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	80002400 	.word	0x80002400
 8006508:	fe00e800 	.word	0xfe00e800

0800650c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b20      	cmp	r3, #32
 8006530:	f040 80fd 	bne.w	800672e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_I2C_Mem_Read+0x34>
 800653a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0f1      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_I2C_Mem_Read+0x4e>
 8006556:	2302      	movs	r3, #2
 8006558:	e0ea      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006562:	f7fc fb57 	bl	8002c14 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2319      	movs	r3, #25
 800656e:	2201      	movs	r2, #1
 8006570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fe51 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0d5      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2222      	movs	r2, #34	; 0x22
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ac:	88f8      	ldrh	r0, [r7, #6]
 80065ae:	893a      	ldrh	r2, [r7, #8]
 80065b0:	8979      	ldrh	r1, [r7, #10]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4603      	mov	r3, r0
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fa67 	bl	8006a90 <I2C_RequestMemoryRead>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0ad      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2bff      	cmp	r3, #255	; 0xff
 80065dc:	d90e      	bls.n	80065fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	4b52      	ldr	r3, [pc, #328]	; (8006738 <HAL_I2C_Mem_Read+0x22c>)
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f827 	bl	8007648 <I2C_TransferConfig>
 80065fa:	e00f      	b.n	800661c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	b2da      	uxtb	r2, r3
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	4b4a      	ldr	r3, [pc, #296]	; (8006738 <HAL_I2C_Mem_Read+0x22c>)
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f001 f816 	bl	8007648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2200      	movs	r2, #0
 8006624:	2104      	movs	r1, #4
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fdf8 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e07c      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d034      	beq.n	80066dc <HAL_I2C_Mem_Read+0x1d0>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d130      	bne.n	80066dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fdc9 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e04d      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2bff      	cmp	r3, #255	; 0xff
 800669c:	d90e      	bls.n	80066bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 ffc7 	bl	8007648 <I2C_TransferConfig>
 80066ba:	e00f      	b.n	80066dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	8979      	ldrh	r1, [r7, #10]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 ffb6 	bl	8007648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d19a      	bne.n	800661c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fe16 	bl	800731c <I2C_WaitOnSTOPFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e01a      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2220      	movs	r2, #32
 8006700:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_I2C_Mem_Read+0x230>)
 800670e:	400b      	ands	r3, r1
 8006710:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	80002400 	.word	0x80002400
 800673c:	fe00e800 	.word	0xfe00e800

08006740 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
  }
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00f      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	f043 0201 	orr.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00f      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f043 0208 	orr.w	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00f      	beq.n	800680a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f043 0202 	orr.w	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006808:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 030b 	and.w	r3, r3, #11
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbc5 	bl	8006fac <I2C_ITError>
  }
}
 8006822:	bf00      	nop
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
 800685a:	4613      	mov	r3, r2
 800685c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <I2C_Slave_ISR_IT+0x24>
 80068be:	2302      	movs	r3, #2
 80068c0:	e0e1      	b.n	8006a86 <I2C_Slave_ISR_IT+0x1e8>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80068de:	6939      	ldr	r1, [r7, #16]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fa09 	bl	8006cf8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d04b      	beq.n	8006988 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d046      	beq.n	8006988 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d128      	bne.n	8006956 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b28      	cmp	r3, #40	; 0x28
 800690e:	d108      	bne.n	8006922 <I2C_Slave_ISR_IT+0x84>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006916:	d104      	bne.n	8006922 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006918:	6939      	ldr	r1, [r7, #16]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 faf2 	bl	8006f04 <I2C_ITListenCplt>
 8006920:	e031      	b.n	8006986 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b29      	cmp	r3, #41	; 0x29
 800692c:	d10e      	bne.n	800694c <I2C_Slave_ISR_IT+0xae>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006934:	d00a      	beq.n	800694c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fc2b 	bl	800719a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f97b 	bl	8006c40 <I2C_ITSlaveSeqCplt>
 800694a:	e01c      	b.n	8006986 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2210      	movs	r2, #16
 8006952:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006954:	e08f      	b.n	8006a76 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2210      	movs	r2, #16
 800695c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	f043 0204 	orr.w	r2, r3, #4
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <I2C_Slave_ISR_IT+0xda>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006976:	d17e      	bne.n	8006a76 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	4619      	mov	r1, r3
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fb14 	bl	8006fac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006984:	e077      	b.n	8006a76 <I2C_Slave_ISR_IT+0x1d8>
 8006986:	e076      	b.n	8006a76 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02f      	beq.n	80069f2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02a      	beq.n	80069f2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d14b      	bne.n	8006a7a <I2C_Slave_ISR_IT+0x1dc>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069e8:	d047      	beq.n	8006a7a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f928 	bl	8006c40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80069f0:	e043      	b.n	8006a7a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006a06:	6939      	ldr	r1, [r7, #16]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f895 	bl	8006b38 <I2C_ITAddrCplt>
 8006a0e:	e035      	b.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d030      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d02b      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d018      	beq.n	8006a60 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a5e:	e00d      	b.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a66:	d002      	beq.n	8006a6e <I2C_Slave_ISR_IT+0x1d0>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f8e6 	bl	8006c40 <I2C_ITSlaveSeqCplt>
 8006a74:	e002      	b.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006a7a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	8979      	ldrh	r1, [r7, #10]
 8006ab0:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <I2C_RequestMemoryRead+0xa4>)
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fdc6 	bl	8007648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	69b9      	ldr	r1, [r7, #24]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fbeb 	bl	800729c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e02c      	b.n	8006b2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae0:	e015      	b.n	8006b0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ae2:	893b      	ldrh	r3, [r7, #8]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fbd1 	bl	800729c <I2C_WaitOnTXISFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e012      	b.n	8006b2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2140      	movs	r1, #64	; 0x40
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fb7f 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	80002000 	.word	0x80002000

08006b38 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b4e:	2b28      	cmp	r3, #40	; 0x28
 8006b50:	d16a      	bne.n	8006c28 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b70:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b7e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b8c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d138      	bne.n	8006c08 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b96:	897b      	ldrh	r3, [r7, #10]
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	4053      	eors	r3, r2
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f003 0306 	and.w	r3, r3, #6
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d11c      	bne.n	8006be4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006baa:	897b      	ldrh	r3, [r7, #10]
 8006bac:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d13b      	bne.n	8006c38 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bd6:	89ba      	ldrh	r2, [r7, #12]
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff fe36 	bl	800684e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006be2:	e029      	b.n	8006c38 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006be4:	893b      	ldrh	r3, [r7, #8]
 8006be6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fd5b 	bl	80076a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bfa:	89ba      	ldrh	r2, [r7, #12]
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fe24 	bl	800684e <HAL_I2C_AddrCallback>
}
 8006c06:	e017      	b.n	8006c38 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fd4b 	bl	80076a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c1a:	89ba      	ldrh	r2, [r7, #12]
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fe14 	bl	800684e <HAL_I2C_AddrCallback>
}
 8006c26:	e007      	b.n	8006c38 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e00c      	b.n	8006c8e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b29      	cmp	r3, #41	; 0x29
 8006c98:	d112      	bne.n	8006cc0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2228      	movs	r2, #40	; 0x28
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2221      	movs	r2, #33	; 0x21
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fcfc 	bl	80076a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fdb6 	bl	800682a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cbe:	e017      	b.n	8006cf0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cca:	d111      	bne.n	8006cf0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2228      	movs	r2, #40	; 0x28
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2222      	movs	r2, #34	; 0x22
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006cda:	2102      	movs	r1, #2
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fce3 	bl	80076a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fda6 	bl	800683c <HAL_I2C_SlaveRxCpltCallback>
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d14:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b21      	cmp	r3, #33	; 0x21
 8006d22:	d002      	beq.n	8006d2a <I2C_ITSlaveCplt+0x32>
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b29      	cmp	r3, #41	; 0x29
 8006d28:	d108      	bne.n	8006d3c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d2a:	f248 0101 	movw	r1, #32769	; 0x8001
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fcba 	bl	80076a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2221      	movs	r2, #33	; 0x21
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3a:	e00d      	b.n	8006d58 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b22      	cmp	r3, #34	; 0x22
 8006d40:	d002      	beq.n	8006d48 <I2C_ITSlaveCplt+0x50>
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b2a      	cmp	r3, #42	; 0x2a
 8006d46:	d107      	bne.n	8006d58 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d48:	f248 0102 	movw	r1, #32770	; 0x8002
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fcab 	bl	80076a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2222      	movs	r2, #34	; 0x22
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d66:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6859      	ldr	r1, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b62      	ldr	r3, [pc, #392]	; (8006efc <I2C_ITSlaveCplt+0x204>)
 8006d74:	400b      	ands	r3, r1
 8006d76:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa0e 	bl	800719a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d013      	beq.n	8006db0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01f      	beq.n	8006de0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dae:	e017      	b.n	8006de0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d012      	beq.n	8006de0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d020      	beq.n	8006e2c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 0304 	bic.w	r3, r3, #4
 8006df0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	f043 0204 	orr.w	r2, r3, #4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8a4 	bl	8006fac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b28      	cmp	r3, #40	; 0x28
 8006e6e:	d141      	bne.n	8006ef4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f846 	bl	8006f04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e78:	e03c      	b.n	8006ef4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e82:	d014      	beq.n	8006eae <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fedb 	bl	8006c40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <I2C_ITSlaveCplt+0x208>)
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fcde 	bl	8006868 <HAL_I2C_ListenCpltCallback>
}
 8006eac:	e022      	b.n	8006ef4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b22      	cmp	r3, #34	; 0x22
 8006eb8:	d10e      	bne.n	8006ed8 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fcb3 	bl	800683c <HAL_I2C_SlaveRxCpltCallback>
}
 8006ed6:	e00d      	b.n	8006ef4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fc9b 	bl	800682a <HAL_I2C_SlaveTxCpltCallback>
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	fe00e800 	.word	0xfe00e800
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a25      	ldr	r2, [pc, #148]	; (8006fa8 <I2C_ITListenCplt+0xa4>)
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d022      	beq.n	8006f80 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d012      	beq.n	8006f80 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f043 0204 	orr.w	r2, r3, #4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f80:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fb8f 	bl	80076a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2210      	movs	r2, #16
 8006f90:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fc64 	bl	8006868 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	ffff0000 	.word	0xffff0000

08006fac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a5d      	ldr	r2, [pc, #372]	; (8007140 <I2C_ITError+0x194>)
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b28      	cmp	r3, #40	; 0x28
 8006fe2:	d005      	beq.n	8006ff0 <I2C_ITError+0x44>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b29      	cmp	r3, #41	; 0x29
 8006fe8:	d002      	beq.n	8006ff0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	2b2a      	cmp	r3, #42	; 0x2a
 8006fee:	d10b      	bne.n	8007008 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ff0:	2103      	movs	r1, #3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb58 	bl	80076a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2228      	movs	r2, #40	; 0x28
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a50      	ldr	r2, [pc, #320]	; (8007144 <I2C_ITError+0x198>)
 8007004:	635a      	str	r2, [r3, #52]	; 0x34
 8007006:	e011      	b.n	800702c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007008:	f248 0103 	movw	r1, #32771	; 0x8003
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb4b 	bl	80076a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b60      	cmp	r3, #96	; 0x60
 800701c:	d003      	beq.n	8007026 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d039      	beq.n	80070ae <I2C_ITError+0x102>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b11      	cmp	r3, #17
 800703e:	d002      	beq.n	8007046 <I2C_ITError+0x9a>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b21      	cmp	r3, #33	; 0x21
 8007044:	d133      	bne.n	80070ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007054:	d107      	bne.n	8007066 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007064:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fa2e 	bl	80054cc <HAL_DMA_GetState>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d017      	beq.n	80070a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	4a33      	ldr	r2, [pc, #204]	; (8007148 <I2C_ITError+0x19c>)
 800707c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe f8f8 	bl	8005280 <HAL_DMA_Abort_IT>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d04d      	beq.n	8007132 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070a4:	e045      	b.n	8007132 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f850 	bl	800714c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ac:	e041      	b.n	8007132 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d039      	beq.n	800712a <I2C_ITError+0x17e>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b12      	cmp	r3, #18
 80070ba:	d002      	beq.n	80070c2 <I2C_ITError+0x116>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	d133      	bne.n	800712a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d0:	d107      	bne.n	80070e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe f9f0 	bl	80054cc <HAL_DMA_GetState>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d017      	beq.n	8007122 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	4a14      	ldr	r2, [pc, #80]	; (8007148 <I2C_ITError+0x19c>)
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe f8ba 	bl	8005280 <HAL_DMA_Abort_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d011      	beq.n	8007136 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800711c:	4610      	mov	r0, r2
 800711e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007120:	e009      	b.n	8007136 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f812 	bl	800714c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007128:	e005      	b.n	8007136 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f80e 	bl	800714c <I2C_TreatErrorCallback>
  }
}
 8007130:	e002      	b.n	8007138 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007136:	bf00      	nop
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	ffff0000 	.word	0xffff0000
 8007144:	0800689f 	.word	0x0800689f
 8007148:	080071e1 	.word	0x080071e1

0800714c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b60      	cmp	r3, #96	; 0x60
 800715e:	d10e      	bne.n	800717e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fb88 	bl	800688c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800717c:	e009      	b.n	8007192 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fb74 	bl	800687a <HAL_I2C_ErrorCallback>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d103      	bne.n	80071b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d007      	beq.n	80071d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0201 	orr.w	r2, r2, #1
 80071d4:	619a      	str	r2, [r3, #24]
  }
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr

080071e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	2200      	movs	r2, #0
 80071fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	2200      	movs	r2, #0
 800720c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ff9c 	bl	800714c <I2C_TreatErrorCallback>
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800722c:	e022      	b.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d01e      	beq.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fb fced 	bl	8002c14 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d113      	bne.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e00f      	b.n	8007294 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4013      	ands	r3, r2
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	429a      	cmp	r2, r3
 8007282:	bf0c      	ite	eq
 8007284:	2301      	moveq	r3, #1
 8007286:	2300      	movne	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	429a      	cmp	r2, r3
 8007290:	d0cd      	beq.n	800722e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072a8:	e02c      	b.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8ea 	bl	8007488 <I2C_IsErrorOccurred>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e02a      	b.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d01e      	beq.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fb fca5 	bl	8002c14 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d113      	bne.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	f043 0220 	orr.w	r2, r3, #32
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e007      	b.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d1cb      	bne.n	80072aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007328:	e028      	b.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f8aa 	bl	8007488 <I2C_IsErrorOccurred>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e026      	b.n	800738c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fb fc69 	bl	8002c14 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d113      	bne.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007358:	f043 0220 	orr.w	r2, r3, #32
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e007      	b.n	800738c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b20      	cmp	r3, #32
 8007388:	d1cf      	bne.n	800732a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a0:	e064      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f86e 	bl	8007488 <I2C_IsErrorOccurred>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e062      	b.n	800747c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d138      	bne.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d105      	bne.n	80073de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e04e      	b.n	800747c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d107      	bne.n	80073fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2210      	movs	r2, #16
 80073f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2204      	movs	r2, #4
 80073f8:	645a      	str	r2, [r3, #68]	; 0x44
 80073fa:	e002      	b.n	8007402 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2220      	movs	r2, #32
 8007408:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6859      	ldr	r1, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007416:	400b      	ands	r3, r1
 8007418:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e022      	b.n	800747c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fb fbed 	bl	8002c14 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10f      	bne.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e007      	b.n	800747c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	2b04      	cmp	r3, #4
 8007478:	d193      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	fe00e800 	.word	0xfe00e800

08007488 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d068      	beq.n	8007586 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2210      	movs	r2, #16
 80074ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074bc:	e049      	b.n	8007552 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d045      	beq.n	8007552 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fb fba5 	bl	8002c14 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <I2C_IsErrorOccurred+0x54>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d13a      	bne.n	8007552 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fe:	d121      	bne.n	8007544 <I2C_IsErrorOccurred+0xbc>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007506:	d01d      	beq.n	8007544 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007508:	7cfb      	ldrb	r3, [r7, #19]
 800750a:	2b20      	cmp	r3, #32
 800750c:	d01a      	beq.n	8007544 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800751c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800751e:	f7fb fb79 	bl	8002c14 <HAL_GetTick>
 8007522:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007524:	e00e      	b.n	8007544 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007526:	f7fb fb75 	bl	8002c14 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b19      	cmp	r3, #25
 8007532:	d907      	bls.n	8007544 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	f043 0320 	orr.w	r3, r3, #32
 800753a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007542:	e006      	b.n	8007552 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b20      	cmp	r3, #32
 8007550:	d1e9      	bne.n	8007526 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b20      	cmp	r3, #32
 800755e:	d003      	beq.n	8007568 <I2C_IsErrorOccurred+0xe0>
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0aa      	beq.n	80074be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2220      	movs	r2, #32
 8007576:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	f043 0304 	orr.w	r3, r3, #4
 800757e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f043 0308 	orr.w	r3, r3, #8
 80075c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	f043 0302 	orr.w	r3, r3, #2
 80075e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01c      	beq.n	8007636 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fdcc 	bl	800719a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <I2C_IsErrorOccurred+0x1bc>)
 800760e:	400b      	ands	r3, r1
 8007610:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800763a:	4618      	mov	r0, r3
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	fe00e800 	.word	0xfe00e800

08007648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	817b      	strh	r3, [r7, #10]
 8007656:	4613      	mov	r3, r2
 8007658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800765a:	897b      	ldrh	r3, [r7, #10]
 800765c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007660:	7a7b      	ldrb	r3, [r7, #9]
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007668:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	4313      	orrs	r3, r2
 8007672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007676:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	0d5b      	lsrs	r3, r3, #21
 8007682:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007686:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <I2C_TransferConfig+0x5c>)
 8007688:	430b      	orrs	r3, r1
 800768a:	43db      	mvns	r3, r3
 800768c:	ea02 0103 	and.w	r1, r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	03ff63ff 	.word	0x03ff63ff

080076a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00f      	beq.n	80076e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80076c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076d6:	2b28      	cmp	r3, #40	; 0x28
 80076d8:	d003      	beq.n	80076e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80076e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00f      	beq.n	800770c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80076f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007700:	2b28      	cmp	r3, #40	; 0x28
 8007702:	d003      	beq.n	800770c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800770a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800770c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007710:	2b00      	cmp	r3, #0
 8007712:	da03      	bge.n	800771c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800771a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	2b10      	cmp	r3, #16
 8007720:	d103      	bne.n	800772a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007728:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	2b20      	cmp	r3, #32
 800772e:	d103      	bne.n	8007738 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f043 0320 	orr.w	r3, r3, #32
 8007736:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007738:	887b      	ldrh	r3, [r7, #2]
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d103      	bne.n	8007746 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007744:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6819      	ldr	r1, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	43da      	mvns	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	400a      	ands	r2, r1
 8007756:	601a      	str	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b20      	cmp	r3, #32
 8007776:	d138      	bne.n	80077ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007782:	2302      	movs	r3, #2
 8007784:	e032      	b.n	80077ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2224      	movs	r2, #36	; 0x24
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6819      	ldr	r1, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0201 	orr.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
  }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b20      	cmp	r3, #32
 800780a:	d139      	bne.n	8007880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007816:	2302      	movs	r3, #2
 8007818:	e033      	b.n	8007882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2224      	movs	r2, #36	; 0x24
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr

0800788c <LL_RCC_SetLPTIMClockSource>:
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007898:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	43db      	mvns	r3, r3
 80078a4:	401a      	ands	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <LL_RCC_GetLPTIMClockSource>:
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80078c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4013      	ands	r3, r2
 80078d2:	0c1a      	lsrs	r2, r3, #16
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4313      	orrs	r3, r2
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr

080078e2 <LL_APB1_GRP1_ForceReset>:
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80078ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <LL_APB1_GRP2_ForceReset>:
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800790c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4313      	orrs	r3, r2
 800791a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <LL_APB1_GRP1_ReleaseReset>:
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800792e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	43db      	mvns	r3, r3
 8007938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800793c:	4013      	ands	r3, r2
 800793e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <LL_APB1_GRP2_ReleaseReset>:
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8007952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	43db      	mvns	r3, r3
 800795c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007960:	4013      	ands	r3, r2
 8007962:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
	...

08007970 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e0b6      	b.n	8007af0 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fa f92f 	bl	8001c00 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079c2:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80079ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa44 	bl	8007e60 <LPTIM_WaitForFlag>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d101      	bne.n	80079e2 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e086      	b.n	8007af0 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa6c 	bl	8007ec0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa2b 	bl	8007e44 <HAL_LPTIM_GetState>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d101      	bne.n	80079f8 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e07b      	b.n	8007af0 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d004      	beq.n	8007a12 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a10:	d103      	bne.n	8007a1a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f023 031e 	bic.w	r3, r3, #30
 8007a18:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d005      	beq.n	8007a32 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a30:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <HAL_LPTIM_Init+0x188>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007a42:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007a48:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007a4e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007a54:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d107      	bne.n	8007a74 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d004      	beq.n	8007a86 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a84:	d107      	bne.n	8007a96 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007aaa:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007ab0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <HAL_LPTIM_Init+0x18c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	621a      	str	r2, [r3, #32]
 8007ada:	e004      	b.n	8007ae6 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007ae4:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	ff19f1fe 	.word	0xff19f1fe
 8007afc:	40007c00 	.word	0x40007c00

08007b00 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a3f      	ldr	r2, [pc, #252]	; (8007c18 <HAL_LPTIM_TimeOut_Start_IT+0x118>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b24:	4a3d      	ldr	r2, [pc, #244]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b2e:	e015      	b.n	8007b5c <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a3a      	ldr	r2, [pc, #232]	; (8007c20 <HAL_LPTIM_TimeOut_Start_IT+0x120>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_LPTIM_TimeOut_Start_IT+0x4c>
 8007b3a:	4b38      	ldr	r3, [pc, #224]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b40:	4a36      	ldr	r2, [pc, #216]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b4a:	e007      	b.n	8007b5c <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007b4c:	4b33      	ldr	r3, [pc, #204]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b52:	4a32      	ldr	r2, [pc, #200]	; (8007c1c <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2210      	movs	r2, #16
 8007b82:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f966 	bl	8007e60 <LPTIM_WaitForFlag>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d101      	bne.n	8007b9e <HAL_LPTIM_TimeOut_Start_IT+0x9e>
  {
    return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e038      	b.n	8007c10 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007bae:	2108      	movs	r1, #8
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f955 	bl	8007e60 <LPTIM_WaitForFlag>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d101      	bne.n	8007bc0 <HAL_LPTIM_TimeOut_Start_IT+0xc0>
  {
    return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e027      	b.n	8007c10 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f97d 	bl	8007ec0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f93c 	bl	8007e44 <HAL_LPTIM_GetState>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d101      	bne.n	8007bd6 <HAL_LPTIM_TimeOut_Start_IT+0xd6>
  {
    return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e01c      	b.n	8007c10 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0204 	orr.w	r2, r2, #4
 8007c04:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40007c00 	.word	0x40007c00
 8007c1c:	58000800 	.word	0x58000800
 8007c20:	40009400 	.word	0x40009400

08007c24 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10d      	bne.n	8007c56 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d106      	bne.n	8007c56 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fa fa05 	bl	8002060 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d10d      	bne.n	8007c80 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d106      	bne.n	8007c80 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2202      	movs	r2, #2
 8007c78:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f89a 	bl	8007db4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d10d      	bne.n	8007caa <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d106      	bne.n	8007caa <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f88e 	bl	8007dc6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d10d      	bne.n	8007cd4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d106      	bne.n	8007cd4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2208      	movs	r2, #8
 8007ccc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f882 	bl	8007dd8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d10d      	bne.n	8007cfe <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b10      	cmp	r3, #16
 8007cee:	d106      	bne.n	8007cfe <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2210      	movs	r2, #16
 8007cf6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f876 	bl	8007dea <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d10d      	bne.n	8007d28 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d106      	bne.n	8007d28 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f86a 	bl	8007dfc <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d10d      	bne.n	8007d52 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	d106      	bne.n	8007d52 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2240      	movs	r2, #64	; 0x40
 8007d4a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f85e 	bl	8007e0e <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b80      	cmp	r3, #128	; 0x80
 8007d5e:	d10d      	bne.n	8007d7c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d106      	bne.n	8007d7c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2280      	movs	r2, #128	; 0x80
 8007d74:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f852 	bl	8007e20 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8a:	d10f      	bne.n	8007dac <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9a:	d107      	bne.n	8007dac <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007da4:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f843 	bl	8007e32 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr

08007e0e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e52:	b2db      	uxtb	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
	...

08007e60 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <LPTIM_WaitForFlag+0x58>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <LPTIM_WaitForFlag+0x5c>)
 8007e74:	fba2 2303 	umull	r2, r3, r2, r3
 8007e78:	0b9b      	lsrs	r3, r3, #14
 8007e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d002      	beq.n	8007eaa <LPTIM_WaitForFlag+0x4a>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1ec      	bne.n	8007e84 <LPTIM_WaitForFlag+0x24>

  return result;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000004 	.word	0x20000004
 8007ebc:	d1b71759 	.word	0xd1b71759

08007ec0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ed2:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f383 8810 	msr	PRIMASK, r3
}
 8007ee0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a8f      	ldr	r2, [pc, #572]	; (8008124 <LPTIM_Disable+0x264>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d015      	beq.n	8007f18 <LPTIM_Disable+0x58>
 8007eec:	4a8d      	ldr	r2, [pc, #564]	; (8008124 <LPTIM_Disable+0x264>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d818      	bhi.n	8007f24 <LPTIM_Disable+0x64>
 8007ef2:	4a8d      	ldr	r2, [pc, #564]	; (8008128 <LPTIM_Disable+0x268>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <LPTIM_Disable+0x40>
 8007ef8:	4a8c      	ldr	r2, [pc, #560]	; (800812c <LPTIM_Disable+0x26c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d006      	beq.n	8007f0c <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8007efe:	e011      	b.n	8007f24 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f00:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007f04:	f7ff fcdb 	bl	80078be <LL_RCC_GetLPTIMClockSource>
 8007f08:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8007f0a:	e00c      	b.n	8007f26 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f0c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007f10:	f7ff fcd5 	bl	80078be <LL_RCC_GetLPTIMClockSource>
 8007f14:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8007f16:	e006      	b.n	8007f26 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007f18:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8007f1c:	f7ff fccf 	bl	80078be <LL_RCC_GetLPTIMClockSource>
 8007f20:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8007f22:	e000      	b.n	8007f26 <LPTIM_Disable+0x66>
      break;
 8007f24:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a72      	ldr	r2, [pc, #456]	; (8008124 <LPTIM_Disable+0x264>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d019      	beq.n	8007f94 <LPTIM_Disable+0xd4>
 8007f60:	4a70      	ldr	r2, [pc, #448]	; (8008124 <LPTIM_Disable+0x264>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d81d      	bhi.n	8007fa2 <LPTIM_Disable+0xe2>
 8007f66:	4a70      	ldr	r2, [pc, #448]	; (8008128 <LPTIM_Disable+0x268>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <LPTIM_Disable+0xb4>
 8007f6c:	4a6f      	ldr	r2, [pc, #444]	; (800812c <LPTIM_Disable+0x26c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d009      	beq.n	8007f86 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8007f72:	e016      	b.n	8007fa2 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8007f74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007f78:	f7ff fcb3 	bl	80078e2 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007f7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007f80:	f7ff fcd1 	bl	8007926 <LL_APB1_GRP1_ReleaseReset>
      break;
 8007f84:	e00e      	b.n	8007fa4 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8007f86:	2020      	movs	r0, #32
 8007f88:	f7ff fcbc 	bl	8007904 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8007f8c:	2020      	movs	r0, #32
 8007f8e:	f7ff fcdc 	bl	800794a <LL_APB1_GRP2_ReleaseReset>
      break;
 8007f92:	e007      	b.n	8007fa4 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8007f94:	2040      	movs	r0, #64	; 0x40
 8007f96:	f7ff fcb5 	bl	8007904 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8007f9a:	2040      	movs	r0, #64	; 0x40
 8007f9c:	f7ff fcd5 	bl	800794a <LL_APB1_GRP2_ReleaseReset>
      break;
 8007fa0:	e000      	b.n	8007fa4 <LPTIM_Disable+0xe4>
      break;
 8007fa2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <LPTIM_Disable+0xf8>
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <LPTIM_Disable+0xf8>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8097 	beq.w	80080e6 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a59      	ldr	r2, [pc, #356]	; (8008124 <LPTIM_Disable+0x264>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <LPTIM_Disable+0x12a>
 8007fc2:	4a58      	ldr	r2, [pc, #352]	; (8008124 <LPTIM_Disable+0x264>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d815      	bhi.n	8007ff4 <LPTIM_Disable+0x134>
 8007fc8:	4a57      	ldr	r2, [pc, #348]	; (8008128 <LPTIM_Disable+0x268>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <LPTIM_Disable+0x116>
 8007fce:	4a57      	ldr	r2, [pc, #348]	; (800812c <LPTIM_Disable+0x26c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d005      	beq.n	8007fe0 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8007fd4:	e00e      	b.n	8007ff4 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8007fd6:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007fda:	f7ff fc57 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 8007fde:	e00a      	b.n	8007ff6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8007fe0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007fe4:	f7ff fc52 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 8007fe8:	e005      	b.n	8007ff6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8007fea:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8007fee:	f7ff fc4d 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 8007ff2:	e000      	b.n	8007ff6 <LPTIM_Disable+0x136>
        break;
 8007ff4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01a      	beq.n	8008032 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008012:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008014:	2108      	movs	r1, #8
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ff22 	bl	8007e60 <LPTIM_WaitForFlag>
 800801c:	4603      	mov	r3, r0
 800801e:	2b03      	cmp	r3, #3
 8008020:	d103      	bne.n	800802a <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2203      	movs	r2, #3
 8008026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2208      	movs	r2, #8
 8008030:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01a      	beq.n	800806e <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a3a      	ldr	r2, [r7, #32]
 800804e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008050:	2110      	movs	r1, #16
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ff04 	bl	8007e60 <LPTIM_WaitForFlag>
 8008058:	4603      	mov	r3, r0
 800805a:	2b03      	cmp	r3, #3
 800805c:	d103      	bne.n	8008066 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2203      	movs	r2, #3
 8008062:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2210      	movs	r2, #16
 800806c:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01c      	beq.n	80080ae <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800808c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fee5 	bl	8007e60 <LPTIM_WaitForFlag>
 8008096:	4603      	mov	r3, r0
 8008098:	2b03      	cmp	r3, #3
 800809a:	d103      	bne.n	80080a4 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2203      	movs	r2, #3
 80080a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ac:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1c      	ldr	r2, [pc, #112]	; (8008124 <LPTIM_Disable+0x264>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d011      	beq.n	80080dc <LPTIM_Disable+0x21c>
 80080b8:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <LPTIM_Disable+0x264>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d812      	bhi.n	80080e4 <LPTIM_Disable+0x224>
 80080be:	4a1a      	ldr	r2, [pc, #104]	; (8008128 <LPTIM_Disable+0x268>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <LPTIM_Disable+0x20c>
 80080c4:	4a19      	ldr	r2, [pc, #100]	; (800812c <LPTIM_Disable+0x26c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80080ca:	e00b      	b.n	80080e4 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80080cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080ce:	f7ff fbdd 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 80080d2:	e008      	b.n	80080e6 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80080d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080d6:	f7ff fbd9 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 80080da:	e004      	b.n	80080e6 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80080dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080de:	f7ff fbd5 	bl	800788c <LL_RCC_SetLPTIMClockSource>
        break;
 80080e2:	e000      	b.n	80080e6 <LPTIM_Disable+0x226>
        break;
 80080e4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0201 	bic.w	r2, r2, #1
 80080f4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080fc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008104:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	621a      	str	r2, [r3, #32]
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f383 8810 	msr	PRIMASK, r3
}
 8008118:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800811a:	bf00      	nop
 800811c:	3738      	adds	r7, #56	; 0x38
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40009800 	.word	0x40009800
 8008128:	40007c00 	.word	0x40007c00
 800812c:	40009400 	.word	0x40009400

08008130 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a03      	ldr	r2, [pc, #12]	; (8008148 <HAL_PWR_EnableBkUpAccess+0x18>)
 800813a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813e:	6013      	str	r3, [r2, #0]
}
 8008140:	bf00      	nop
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr
 8008148:	58000400 	.word	0x58000400

0800814c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10c      	bne.n	8008178 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <HAL_PWR_EnterSLEEPMode+0x60>)
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816a:	d10d      	bne.n	8008188 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800816c:	f000 f83c 	bl	80081e8 <HAL_PWREx_DisableLowPowerRunMode>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d008      	beq.n	8008188 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8008176:	e015      	b.n	80081a4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8008178:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <HAL_PWR_EnterSLEEPMode+0x60>)
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008184:	f000 f822 	bl	80081cc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800818e:	f023 0304 	bic.w	r3, r3, #4
 8008192:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800819a:	bf30      	wfi
 800819c:	e002      	b.n	80081a4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800819e:	bf40      	sev
    __WFE();
 80081a0:	bf20      	wfe
    __WFE();
 80081a2:	bf20      	wfe
  }
}
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	58000400 	.word	0x58000400
 80081b0:	e000ed00 	.word	0xe000ed00

080081b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80081b8:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <HAL_PWREx_GetVoltageRange+0x14>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	58000400 	.word	0x58000400

080081cc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a03      	ldr	r2, [pc, #12]	; (80081e4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80081d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081da:	6013      	str	r3, [r2, #0]
}
 80081dc:	bf00      	nop
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	58000400 	.word	0x58000400

080081e8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80081ee:	4b16      	ldr	r3, [pc, #88]	; (8008248 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a15      	ldr	r2, [pc, #84]	; (8008248 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80081f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2232      	movs	r2, #50	; 0x32
 8008200:	fb02 f303 	mul.w	r3, r2, r3
 8008204:	4a12      	ldr	r2, [pc, #72]	; (8008250 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0c9b      	lsrs	r3, r3, #18
 800820c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800820e:	e002      	b.n	8008216 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3b01      	subs	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800821e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008222:	d102      	bne.n	800822a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f2      	bne.n	8008210 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800822a:	4b07      	ldr	r3, [pc, #28]	; (8008248 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	d101      	bne.n	800823c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e000      	b.n	800823e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr
 8008248:	58000400 	.word	0x58000400
 800824c:	20000004 	.word	0x20000004
 8008250:	431bde83 	.word	0x431bde83

08008254 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008268:	f043 0302 	orr.w	r3, r3, #2
 800826c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008274:	f043 0304 	orr.w	r3, r3, #4
 8008278:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008280:	bf30      	wfi
 8008282:	e002      	b.n	800828a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008284:	bf40      	sev
    __WFE();
 8008286:	bf20      	wfe
    __WFE();
 8008288:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	4a05      	ldr	r2, [pc, #20]	; (80082a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008290:	f023 0304 	bic.w	r3, r3, #4
 8008294:	6113      	str	r3, [r2, #16]
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	58000400 	.word	0x58000400
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b8:	d101      	bne.n	80082be <LL_PWR_IsEnabledBkUpAccess+0x16>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr
 80082c8:	58000400 	.word	0x58000400

080082cc <LL_RCC_HSE_EnableTcxo>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082de:	6013      	str	r3, [r2, #0]
}
 80082e0:	bf00      	nop
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr

080082e8 <LL_RCC_HSE_DisableTcxo>:
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082fa:	6013      	str	r3, [r2, #0]
}
 80082fc:	bf00      	nop
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr

08008304 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008316:	d101      	bne.n	800831c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr

08008326 <LL_RCC_HSE_Enable>:
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800832a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008338:	6013      	str	r3, [r2, #0]
}
 800833a:	bf00      	nop
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <LL_RCC_HSE_Disable>:
{
 8008342:	b480      	push	{r7}
 8008344:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008354:	6013      	str	r3, [r2, #0]
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <LL_RCC_HSE_IsReady>:
{
 800835e:	b480      	push	{r7}
 8008360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008370:	d101      	bne.n	8008376 <LL_RCC_HSE_IsReady+0x18>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <LL_RCC_HSE_IsReady+0x1a>
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <LL_RCC_HSI_Enable>:
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800838e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	bc80      	pop	{r7}
 800839a:	4770      	bx	lr

0800839c <LL_RCC_HSI_Disable>:
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80083a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ae:	6013      	str	r3, [r2, #0]
}
 80083b0:	bf00      	nop
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <LL_RCC_HSI_IsReady>:
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80083bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ca:	d101      	bne.n	80083d0 <LL_RCC_HSI_IsReady+0x18>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <LL_RCC_HSI_IsReady+0x1a>
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <LL_RCC_HSI_SetCalibTrimming>:
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80083e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	061b      	lsls	r3, r3, #24
 80083f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083f4:	4313      	orrs	r3, r2
 80083f6:	604b      	str	r3, [r1, #4]
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr

08008402 <LL_RCC_LSE_IsReady>:
{
 8008402:	b480      	push	{r7}
 8008404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b02      	cmp	r3, #2
 8008414:	d101      	bne.n	800841a <LL_RCC_LSE_IsReady+0x18>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <LL_RCC_LSE_IsReady+0x1a>
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <LL_RCC_LSI_Enable>:
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008434:	f043 0301 	orr.w	r3, r3, #1
 8008438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <LL_RCC_LSI_Disable>:
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800844c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <LL_RCC_LSI_IsReady>:
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b02      	cmp	r3, #2
 8008476:	d101      	bne.n	800847c <LL_RCC_LSI_IsReady+0x18>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <LL_RCC_LSI_IsReady+0x1a>
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	bc80      	pop	{r7}
 8008484:	4770      	bx	lr

08008486 <LL_RCC_MSI_Enable>:
{
 8008486:	b480      	push	{r7}
 8008488:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800848a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008494:	f043 0301 	orr.w	r3, r3, #1
 8008498:	6013      	str	r3, [r2, #0]
}
 800849a:	bf00      	nop
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <LL_RCC_MSI_Disable>:
{
 80084a2:	b480      	push	{r7}
 80084a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80084a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	6013      	str	r3, [r2, #0]
}
 80084b6:	bf00      	nop
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <LL_RCC_MSI_IsReady>:
{
 80084be:	b480      	push	{r7}
 80084c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80084c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d101      	bne.n	80084d4 <LL_RCC_MSI_IsReady+0x16>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <LL_RCC_MSI_IsReady+0x18>
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	bc80      	pop	{r7}
 80084dc:	4770      	bx	lr

080084de <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80084de:	b480      	push	{r7}
 80084e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80084e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d101      	bne.n	80084f4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <LL_RCC_MSI_GetRange>:
{
 80084fe:	b480      	push	{r7}
 8008500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800850c:	4618      	mov	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800851c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008520:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <LL_RCC_MSI_SetCalibTrimming>:
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008546:	4313      	orrs	r3, r2
 8008548:	604b      	str	r3, [r1, #4]
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <LL_RCC_SetSysClkSource>:
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800855c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f023 0203 	bic.w	r2, r3, #3
 8008566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4313      	orrs	r3, r2
 800856e:	608b      	str	r3, [r1, #8]
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <LL_RCC_GetSysClkSource>:
{
 800857a:	b480      	push	{r7}
 800857c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800857e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 030c 	and.w	r3, r3, #12
}
 8008588:	4618      	mov	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr

08008590 <LL_RCC_SetAHBPrescaler>:
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	608b      	str	r3, [r1, #8]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr

080085b6 <LL_RCC_SetAHB3Prescaler>:
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80085be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80085c6:	f023 020f 	bic.w	r2, r3, #15
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d2:	4313      	orrs	r3, r2
 80085d4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr

080085e2 <LL_RCC_SetAPB1Prescaler>:
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80085ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr

08008608 <LL_RCC_SetAPB2Prescaler>:
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800861a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4313      	orrs	r3, r2
 8008622:	608b      	str	r3, [r1, #8]
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <LL_RCC_GetAHBPrescaler>:
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <LL_RCC_GetAHB3Prescaler>:
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800864c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008656:	4618      	mov	r0, r3
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <LL_RCC_GetAPB1Prescaler>:
{
 800865e:	b480      	push	{r7}
 8008660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800866c:	4618      	mov	r0, r3
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <LL_RCC_GetAPB2Prescaler>:
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008682:	4618      	mov	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800868a:	b480      	push	{r7}
 800868c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800868e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800869c:	6013      	str	r3, [r2, #0]
}
 800869e:	bf00      	nop
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80086a6:	b480      	push	{r7}
 80086a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80086aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b8:	6013      	str	r3, [r2, #0]
}
 80086ba:	bf00      	nop
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80086c2:	b480      	push	{r7}
 80086c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80086c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d4:	d101      	bne.n	80086da <LL_RCC_PLL_IsReady+0x18>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <LL_RCC_PLL_IsReady+0x1a>
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80086e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800870a:	4618      	mov	r0, r3
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008712:	b480      	push	{r7}
 8008714:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008720:	4618      	mov	r0, r3
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800872c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0303 	and.w	r3, r3, #3
}
 8008736:	4618      	mov	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr

0800873e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800873e:	b480      	push	{r7}
 8008740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800874c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008750:	d101      	bne.n	8008756 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008768:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800876c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008774:	d101      	bne.n	800877a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr

08008784 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008796:	d101      	bne.n	800879c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr

080087a6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80087a6:	b480      	push	{r7}
 80087a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80087aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087b8:	d101      	bne.n	80087be <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e36f      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087da:	f7ff fece 	bl	800857a <LL_RCC_GetSysClkSource>
 80087de:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e0:	f7ff ffa2 	bl	8008728 <LL_RCC_PLL_GetMainSource>
 80087e4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80c4 	beq.w	800897c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RCC_OscConfig+0x3e>
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d176      	bne.n	80088ee <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d173      	bne.n	80088ee <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e353      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_RCC_OscConfig+0x68>
 8008824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800882e:	e006      	b.n	800883e <HAL_RCC_OscConfig+0x76>
 8008830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008838:	091b      	lsrs	r3, r3, #4
 800883a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800883e:	4293      	cmp	r3, r2
 8008840:	d222      	bcs.n	8008888 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fd3c 	bl	80092c4 <RCC_SetFlashLatencyFromMSIRange>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e331      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008878:	4313      	orrs	r3, r2
 800887a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fe53 	bl	800852c <LL_RCC_MSI_SetCalibTrimming>
 8008886:	e021      	b.n	80088cc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008892:	f043 0308 	orr.w	r3, r3, #8
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088aa:	4313      	orrs	r3, r2
 80088ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fe3a 	bl	800852c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fd01 	bl	80092c4 <RCC_SetFlashLatencyFromMSIRange>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e2f6      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80088cc:	f000 fcc2 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 80088d0:	4603      	mov	r3, r0
 80088d2:	4aa7      	ldr	r2, [pc, #668]	; (8008b70 <HAL_RCC_OscConfig+0x3a8>)
 80088d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80088d6:	4ba7      	ldr	r3, [pc, #668]	; (8008b74 <HAL_RCC_OscConfig+0x3ac>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fa f990 	bl	8002c00 <HAL_InitTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80088e4:	7cfb      	ldrb	r3, [r7, #19]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d047      	beq.n	800897a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80088ea:	7cfb      	ldrb	r3, [r7, #19]
 80088ec:	e2e5      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d02c      	beq.n	8008950 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80088f6:	f7ff fdc6 	bl	8008486 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088fa:	f7fa f98b 	bl	8002c14 <HAL_GetTick>
 80088fe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008902:	f7fa f987 	bl	8002c14 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e2d2      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008914:	f7ff fdd3 	bl	80084be <LL_RCC_MSI_IsReady>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f1      	beq.n	8008902 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800891e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008928:	f043 0308 	orr.w	r3, r3, #8
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008940:	4313      	orrs	r3, r2
 8008942:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fdef 	bl	800852c <LL_RCC_MSI_SetCalibTrimming>
 800894e:	e015      	b.n	800897c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008950:	f7ff fda7 	bl	80084a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008954:	f7fa f95e 	bl	8002c14 <HAL_GetTick>
 8008958:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800895c:	f7fa f95a 	bl	8002c14 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e2a5      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800896e:	f7ff fda6 	bl	80084be <LL_RCC_MSI_IsReady>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1f1      	bne.n	800895c <HAL_RCC_OscConfig+0x194>
 8008978:	e000      	b.n	800897c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800897a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d058      	beq.n	8008a3a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	2b08      	cmp	r3, #8
 800898c:	d005      	beq.n	800899a <HAL_RCC_OscConfig+0x1d2>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d108      	bne.n	80089a6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	2b03      	cmp	r3, #3
 8008998:	d105      	bne.n	80089a6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14b      	bne.n	8008a3a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e289      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80089a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089b8:	4313      	orrs	r3, r2
 80089ba:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c4:	d102      	bne.n	80089cc <HAL_RCC_OscConfig+0x204>
 80089c6:	f7ff fcae 	bl	8008326 <LL_RCC_HSE_Enable>
 80089ca:	e00d      	b.n	80089e8 <HAL_RCC_OscConfig+0x220>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80089d4:	d104      	bne.n	80089e0 <HAL_RCC_OscConfig+0x218>
 80089d6:	f7ff fc79 	bl	80082cc <LL_RCC_HSE_EnableTcxo>
 80089da:	f7ff fca4 	bl	8008326 <LL_RCC_HSE_Enable>
 80089de:	e003      	b.n	80089e8 <HAL_RCC_OscConfig+0x220>
 80089e0:	f7ff fcaf 	bl	8008342 <LL_RCC_HSE_Disable>
 80089e4:	f7ff fc80 	bl	80082e8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d012      	beq.n	8008a16 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f0:	f7fa f910 	bl	8002c14 <HAL_GetTick>
 80089f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f8:	f7fa f90c 	bl	8002c14 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b64      	cmp	r3, #100	; 0x64
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e257      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008a0a:	f7ff fca8 	bl	800835e <LL_RCC_HSE_IsReady>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0f1      	beq.n	80089f8 <HAL_RCC_OscConfig+0x230>
 8008a14:	e011      	b.n	8008a3a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a16:	f7fa f8fd 	bl	8002c14 <HAL_GetTick>
 8008a1a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a1e:	f7fa f8f9 	bl	8002c14 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b64      	cmp	r3, #100	; 0x64
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e244      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a30:	f7ff fc95 	bl	800835e <LL_RCC_HSE_IsReady>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f1      	bne.n	8008a1e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d046      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	d005      	beq.n	8008a58 <HAL_RCC_OscConfig+0x290>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b0c      	cmp	r3, #12
 8008a50:	d10e      	bne.n	8008a70 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d10b      	bne.n	8008a70 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e22a      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff fcb6 	bl	80083da <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a6e:	e031      	b.n	8008ad4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d019      	beq.n	8008aac <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a78:	f7ff fc82 	bl	8008380 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a7c:	f7fa f8ca 	bl	8002c14 <HAL_GetTick>
 8008a80:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a82:	e008      	b.n	8008a96 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a84:	f7fa f8c6 	bl	8002c14 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e211      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a96:	f7ff fc8f 	bl	80083b8 <LL_RCC_HSI_IsReady>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f1      	beq.n	8008a84 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fc98 	bl	80083da <LL_RCC_HSI_SetCalibTrimming>
 8008aaa:	e013      	b.n	8008ad4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aac:	f7ff fc76 	bl	800839c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab0:	f7fa f8b0 	bl	8002c14 <HAL_GetTick>
 8008ab4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008ab6:	e008      	b.n	8008aca <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ab8:	f7fa f8ac 	bl	8002c14 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e1f7      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008aca:	f7ff fc75 	bl	80083b8 <LL_RCC_HSI_IsReady>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f1      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d06e      	beq.n	8008bbe <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d056      	beq.n	8008b96 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008af0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d031      	beq.n	8008b64 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e1d0      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d013      	beq.n	8008b4a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8008b22:	f7ff fc8f 	bl	8008444 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b26:	f7fa f875 	bl	8002c14 <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b2c:	e008      	b.n	8008b40 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b2e:	f7fa f871 	bl	8002c14 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b11      	cmp	r3, #17
 8008b3a:	d901      	bls.n	8008b40 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e1bc      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b40:	f7ff fc90 	bl	8008464 <LL_RCC_LSI_IsReady>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1f1      	bne.n	8008b2e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b52:	f023 0210 	bic.w	r2, r3, #16
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b64:	f7ff fc5e 	bl	8008424 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b68:	f7fa f854 	bl	8002c14 <HAL_GetTick>
 8008b6c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b6e:	e00c      	b.n	8008b8a <HAL_RCC_OscConfig+0x3c2>
 8008b70:	20000004 	.word	0x20000004
 8008b74:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b78:	f7fa f84c 	bl	8002c14 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b11      	cmp	r3, #17
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e197      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b8a:	f7ff fc6b 	bl	8008464 <LL_RCC_LSI_IsReady>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f1      	beq.n	8008b78 <HAL_RCC_OscConfig+0x3b0>
 8008b94:	e013      	b.n	8008bbe <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b96:	f7ff fc55 	bl	8008444 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b9a:	f7fa f83b 	bl	8002c14 <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ba2:	f7fa f837 	bl	8002c14 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b11      	cmp	r3, #17
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e182      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008bb4:	f7ff fc56 	bl	8008464 <LL_RCC_LSI_IsReady>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1f1      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80d8 	beq.w	8008d7c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bcc:	f7ff fb6c 	bl	80082a8 <LL_PWR_IsEnabledBkUpAccess>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d113      	bne.n	8008bfe <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008bd6:	f7ff faab 	bl	8008130 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bda:	f7fa f81b 	bl	8002c14 <HAL_GetTick>
 8008bde:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be2:	f7fa f817 	bl	8002c14 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e162      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bf4:	f7ff fb58 	bl	80082a8 <LL_PWR_IsEnabledBkUpAccess>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f1      	beq.n	8008be2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d07b      	beq.n	8008cfe <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b85      	cmp	r3, #133	; 0x85
 8008c0c:	d003      	beq.n	8008c16 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d109      	bne.n	8008c2a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c22:	f043 0304 	orr.w	r3, r3, #4
 8008c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c2a:	f7f9 fff3 	bl	8002c14 <HAL_GetTick>
 8008c2e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c44:	e00a      	b.n	8008c5c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c46:	f7f9 ffe5 	bl	8002c14 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e12e      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c5c:	f7ff fbd1 	bl	8008402 <LL_RCC_LSE_IsReady>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0ef      	beq.n	8008c46 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2b81      	cmp	r3, #129	; 0x81
 8008c6c:	d003      	beq.n	8008c76 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b85      	cmp	r3, #133	; 0x85
 8008c74:	d121      	bne.n	8008cba <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c76:	f7f9 ffcd 	bl	8002c14 <HAL_GetTick>
 8008c7a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008c90:	e00a      	b.n	8008ca8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c92:	f7f9 ffbf 	bl	8002c14 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e108      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ec      	beq.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008cb8:	e060      	b.n	8008d7c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cba:	f7f9 ffab 	bl	8002c14 <HAL_GetTick>
 8008cbe:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cd4:	e00a      	b.n	8008cec <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cd6:	f7f9 ff9d 	bl	8002c14 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e0e6      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1ec      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x50e>
 8008cfc:	e03e      	b.n	8008d7c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cfe:	f7f9 ff89 	bl	8002c14 <HAL_GetTick>
 8008d02:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d18:	e00a      	b.n	8008d30 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7f9 ff7b 	bl	8002c14 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e0c4      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1ec      	bne.n	8008d1a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d40:	f7f9 ff68 	bl	8002c14 <HAL_GetTick>
 8008d44:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d52:	f023 0301 	bic.w	r3, r3, #1
 8008d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d5a:	e00a      	b.n	8008d72 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5c:	f7f9 ff5a 	bl	8002c14 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e0a3      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d72:	f7ff fb46 	bl	8008402 <LL_RCC_LSE_IsReady>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1ef      	bne.n	8008d5c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8099 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	2b0c      	cmp	r3, #12
 8008d8a:	d06c      	beq.n	8008e66 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d14b      	bne.n	8008e2c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d94:	f7ff fc87 	bl	80086a6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d98:	f7f9 ff3c 	bl	8002c14 <HAL_GetTick>
 8008d9c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da0:	f7f9 ff38 	bl	8002c14 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b0a      	cmp	r3, #10
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e083      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008db2:	f7ff fc86 	bl	80086c2 <LL_RCC_PLL_IsReady>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f1      	bne.n	8008da0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <HAL_RCC_OscConfig+0x6fc>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dd4:	0212      	lsls	r2, r2, #8
 8008dd6:	4311      	orrs	r1, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ddc:	4311      	orrs	r1, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008de2:	4311      	orrs	r1, r2
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008de8:	430a      	orrs	r2, r1
 8008dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008df2:	f7ff fc4a 	bl	800868a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e04:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e06:	f7f9 ff05 	bl	8002c14 <HAL_GetTick>
 8008e0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e0c:	e008      	b.n	8008e20 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e0e:	f7f9 ff01 	bl	8002c14 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b0a      	cmp	r3, #10
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e04c      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e20:	f7ff fc4f 	bl	80086c2 <LL_RCC_PLL_IsReady>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0f1      	beq.n	8008e0e <HAL_RCC_OscConfig+0x646>
 8008e2a:	e045      	b.n	8008eb8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e2c:	f7ff fc3b 	bl	80086a6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e30:	f7f9 fef0 	bl	8002c14 <HAL_GetTick>
 8008e34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e38:	f7f9 feec 	bl	8002c14 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b0a      	cmp	r3, #10
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e037      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e4a:	f7ff fc3a 	bl	80086c2 <LL_RCC_PLL_IsReady>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f1      	bne.n	8008e38 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <HAL_RCC_OscConfig+0x700>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	60cb      	str	r3, [r1, #12]
 8008e64:	e028      	b.n	8008eb8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e023      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f003 0203 	and.w	r2, r3, #3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d115      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d10e      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d106      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d001      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e000      	b.n	8008eba <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	11c1808c 	.word	0x11c1808c
 8008ec8:	eefefffc 	.word	0xeefefffc

08008ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e10f      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ee0:	4b89      	ldr	r3, [pc, #548]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d91b      	bls.n	8008f26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eee:	4b86      	ldr	r3, [pc, #536]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f023 0207 	bic.w	r2, r3, #7
 8008ef6:	4984      	ldr	r1, [pc, #528]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008efe:	f7f9 fe89 	bl	8002c14 <HAL_GetTick>
 8008f02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f06:	f7f9 fe85 	bl	8002c14 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e0f3      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f18:	4b7b      	ldr	r3, [pc, #492]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d1ef      	bne.n	8008f06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d016      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fb2a 	bl	8008590 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f3c:	f7f9 fe6a 	bl	8002c14 <HAL_GetTick>
 8008f40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f42:	e008      	b.n	8008f56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f44:	f7f9 fe66 	bl	8002c14 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e0d4      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f56:	f7ff fbf2 	bl	800873e <LL_RCC_IsActiveFlag_HPRE>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f1      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d016      	beq.n	8008f9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff fb20 	bl	80085b6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f76:	f7f9 fe4d 	bl	8002c14 <HAL_GetTick>
 8008f7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f7e:	f7f9 fe49 	bl	8002c14 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e0b7      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008f90:	f7ff fbe6 	bl	8008760 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0f1      	beq.n	8008f7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fb19 	bl	80085e2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008fb0:	f7f9 fe30 	bl	8002c14 <HAL_GetTick>
 8008fb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008fb8:	f7f9 fe2c 	bl	8002c14 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e09a      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008fca:	f7ff fbdb 	bl	8008784 <LL_RCC_IsActiveFlag_PPRE1>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0f1      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d017      	beq.n	8009010 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff fb0e 	bl	8008608 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008fec:	f7f9 fe12 	bl	8002c14 <HAL_GetTick>
 8008ff0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ff4:	f7f9 fe0e 	bl	8002c14 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e07c      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009006:	f7ff fbce 	bl	80087a6 <LL_RCC_IsActiveFlag_PPRE2>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f1      	beq.n	8008ff4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d043      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d106      	bne.n	8009032 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009024:	f7ff f99b 	bl	800835e <LL_RCC_HSE_IsReady>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d11e      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e066      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b03      	cmp	r3, #3
 8009038:	d106      	bne.n	8009048 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800903a:	f7ff fb42 	bl	80086c2 <LL_RCC_PLL_IsReady>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d113      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e05b      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009050:	f7ff fa35 	bl	80084be <LL_RCC_MSI_IsReady>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d108      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e050      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800905e:	f7ff f9ab 	bl	80083b8 <LL_RCC_HSI_IsReady>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e049      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff fa6f 	bl	8008554 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009076:	f7f9 fdcd 	bl	8002c14 <HAL_GetTick>
 800907a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800907c:	e00a      	b.n	8009094 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800907e:	f7f9 fdc9 	bl	8002c14 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	f241 3288 	movw	r2, #5000	; 0x1388
 800908c:	4293      	cmp	r3, r2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e035      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009094:	f7ff fa71 	bl	800857a <LL_RCC_GetSysClkSource>
 8009098:	4602      	mov	r2, r0
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1ec      	bne.n	800907e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090a4:	4b18      	ldr	r3, [pc, #96]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d21b      	bcs.n	80090ea <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 0207 	bic.w	r2, r3, #7
 80090ba:	4913      	ldr	r1, [pc, #76]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	4313      	orrs	r3, r2
 80090c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090c2:	f7f9 fda7 	bl	8002c14 <HAL_GetTick>
 80090c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090ca:	f7f9 fda3 	bl	8002c14 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e011      	b.n	8009100 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_RCC_ClockConfig+0x23c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0307 	and.w	r3, r3, #7
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d1ef      	bne.n	80090ca <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80090ea:	f000 f8b3 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <HAL_RCC_ClockConfig+0x240>)
 80090f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80090f4:	4b06      	ldr	r3, [pc, #24]	; (8009110 <HAL_RCC_ClockConfig+0x244>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f9 fd81 	bl	8002c00 <HAL_InitTick>
 80090fe:	4603      	mov	r3, r0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58004000 	.word	0x58004000
 800910c:	20000004 	.word	0x20000004
 8009110:	2000000c 	.word	0x2000000c

08009114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009122:	f7ff fa2a 	bl	800857a <LL_RCC_GetSysClkSource>
 8009126:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009128:	f7ff fafe 	bl	8008728 <LL_RCC_PLL_GetMainSource>
 800912c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <HAL_RCC_GetSysClockFreq+0x2c>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b0c      	cmp	r3, #12
 8009138:	d139      	bne.n	80091ae <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d136      	bne.n	80091ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009140:	f7ff f9cd 	bl	80084de <LL_RCC_MSI_IsEnabledRangeSelect>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d115      	bne.n	8009176 <HAL_RCC_GetSysClockFreq+0x62>
 800914a:	f7ff f9c8 	bl	80084de <LL_RCC_MSI_IsEnabledRangeSelect>
 800914e:	4603      	mov	r3, r0
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <HAL_RCC_GetSysClockFreq+0x4e>
 8009154:	f7ff f9d3 	bl	80084fe <LL_RCC_MSI_GetRange>
 8009158:	4603      	mov	r3, r0
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	e005      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x5a>
 8009162:	f7ff f9d7 	bl	8008514 <LL_RCC_MSI_GetRangeAfterStandby>
 8009166:	4603      	mov	r3, r0
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	4a36      	ldr	r2, [pc, #216]	; (8009248 <HAL_RCC_GetSysClockFreq+0x134>)
 8009170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009174:	e014      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8009176:	f7ff f9b2 	bl	80084de <LL_RCC_MSI_IsEnabledRangeSelect>
 800917a:	4603      	mov	r3, r0
 800917c:	2b01      	cmp	r3, #1
 800917e:	d106      	bne.n	800918e <HAL_RCC_GetSysClockFreq+0x7a>
 8009180:	f7ff f9bd 	bl	80084fe <LL_RCC_MSI_GetRange>
 8009184:	4603      	mov	r3, r0
 8009186:	091b      	lsrs	r3, r3, #4
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	e005      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x86>
 800918e:	f7ff f9c1 	bl	8008514 <LL_RCC_MSI_GetRangeAfterStandby>
 8009192:	4603      	mov	r3, r0
 8009194:	091b      	lsrs	r3, r3, #4
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	4a2b      	ldr	r2, [pc, #172]	; (8009248 <HAL_RCC_GetSysClockFreq+0x134>)
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d115      	bne.n	80091d4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091ac:	e012      	b.n	80091d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d102      	bne.n	80091ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091b4:	4b25      	ldr	r3, [pc, #148]	; (800924c <HAL_RCC_GetSysClockFreq+0x138>)
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e00c      	b.n	80091d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d109      	bne.n	80091d4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80091c0:	f7ff f8a0 	bl	8008304 <LL_RCC_HSE_IsEnabledDiv2>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d102      	bne.n	80091d0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80091ca:	4b20      	ldr	r3, [pc, #128]	; (800924c <HAL_RCC_GetSysClockFreq+0x138>)
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e001      	b.n	80091d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80091d0:	4b1f      	ldr	r3, [pc, #124]	; (8009250 <HAL_RCC_GetSysClockFreq+0x13c>)
 80091d2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091d4:	f7ff f9d1 	bl	800857a <LL_RCC_GetSysClkSource>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b0c      	cmp	r3, #12
 80091dc:	d12f      	bne.n	800923e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80091de:	f7ff faa3 	bl	8008728 <LL_RCC_PLL_GetMainSource>
 80091e2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d003      	beq.n	80091f2 <HAL_RCC_GetSysClockFreq+0xde>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d003      	beq.n	80091f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80091f0:	e00d      	b.n	800920e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80091f2:	4b16      	ldr	r3, [pc, #88]	; (800924c <HAL_RCC_GetSysClockFreq+0x138>)
 80091f4:	60fb      	str	r3, [r7, #12]
        break;
 80091f6:	e00d      	b.n	8009214 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80091f8:	f7ff f884 	bl	8008304 <LL_RCC_HSE_IsEnabledDiv2>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d102      	bne.n	8009208 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009202:	4b12      	ldr	r3, [pc, #72]	; (800924c <HAL_RCC_GetSysClockFreq+0x138>)
 8009204:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009206:	e005      	b.n	8009214 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8009208:	4b11      	ldr	r3, [pc, #68]	; (8009250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800920a:	60fb      	str	r3, [r7, #12]
        break;
 800920c:	e002      	b.n	8009214 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	60fb      	str	r3, [r7, #12]
        break;
 8009212:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009214:	f7ff fa66 	bl	80086e4 <LL_RCC_PLL_GetN>
 8009218:	4602      	mov	r2, r0
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	fb03 f402 	mul.w	r4, r3, r2
 8009220:	f7ff fa77 	bl	8008712 <LL_RCC_PLL_GetDivider>
 8009224:	4603      	mov	r3, r0
 8009226:	091b      	lsrs	r3, r3, #4
 8009228:	3301      	adds	r3, #1
 800922a:	fbb4 f4f3 	udiv	r4, r4, r3
 800922e:	f7ff fa65 	bl	80086fc <LL_RCC_PLL_GetR>
 8009232:	4603      	mov	r3, r0
 8009234:	0f5b      	lsrs	r3, r3, #29
 8009236:	3301      	adds	r3, #1
 8009238:	fbb4 f3f3 	udiv	r3, r4, r3
 800923c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800923e:	697b      	ldr	r3, [r7, #20]
}
 8009240:	4618      	mov	r0, r3
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	bd90      	pop	{r4, r7, pc}
 8009248:	0801f594 	.word	0x0801f594
 800924c:	00f42400 	.word	0x00f42400
 8009250:	01e84800 	.word	0x01e84800

08009254 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009254:	b598      	push	{r3, r4, r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009258:	f7ff ff5c 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800925c:	4604      	mov	r4, r0
 800925e:	f7ff f9e6 	bl	800862e <LL_RCC_GetAHBPrescaler>
 8009262:	4603      	mov	r3, r0
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	4a03      	ldr	r2, [pc, #12]	; (8009278 <HAL_RCC_GetHCLKFreq+0x24>)
 800926c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009270:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009274:	4618      	mov	r0, r3
 8009276:	bd98      	pop	{r3, r4, r7, pc}
 8009278:	0801f534 	.word	0x0801f534

0800927c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800927c:	b598      	push	{r3, r4, r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009280:	f7ff ffe8 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 8009284:	4604      	mov	r4, r0
 8009286:	f7ff f9ea 	bl	800865e <LL_RCC_GetAPB1Prescaler>
 800928a:	4603      	mov	r3, r0
 800928c:	0a1b      	lsrs	r3, r3, #8
 800928e:	4a03      	ldr	r2, [pc, #12]	; (800929c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009294:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009298:	4618      	mov	r0, r3
 800929a:	bd98      	pop	{r3, r4, r7, pc}
 800929c:	0801f574 	.word	0x0801f574

080092a0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092a0:	b598      	push	{r3, r4, r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80092a4:	f7ff ffd6 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 80092a8:	4604      	mov	r4, r0
 80092aa:	f7ff f9e3 	bl	8008674 <LL_RCC_GetAPB2Prescaler>
 80092ae:	4603      	mov	r3, r0
 80092b0:	0adb      	lsrs	r3, r3, #11
 80092b2:	4a03      	ldr	r2, [pc, #12]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80092bc:	4618      	mov	r0, r3
 80092be:	bd98      	pop	{r3, r4, r7, pc}
 80092c0:	0801f574 	.word	0x0801f574

080092c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	091b      	lsrs	r3, r3, #4
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	4a10      	ldr	r2, [pc, #64]	; (8009318 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80092d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092da:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80092dc:	f7ff f9b2 	bl	8008644 <LL_RCC_GetAHB3Prescaler>
 80092e0:	4603      	mov	r3, r0
 80092e2:	091b      	lsrs	r3, r3, #4
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	4a0c      	ldr	r2, [pc, #48]	; (800931c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80092ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4a09      	ldr	r2, [pc, #36]	; (8009320 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	0c9c      	lsrs	r4, r3, #18
 8009300:	f7fe ff58 	bl	80081b4 <HAL_PWREx_GetVoltageRange>
 8009304:	4603      	mov	r3, r0
 8009306:	4619      	mov	r1, r3
 8009308:	4620      	mov	r0, r4
 800930a:	f000 f80b 	bl	8009324 <RCC_SetFlashLatency>
 800930e:	4603      	mov	r3, r0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	bd90      	pop	{r4, r7, pc}
 8009318:	0801f594 	.word	0x0801f594
 800931c:	0801f534 	.word	0x0801f534
 8009320:	431bde83 	.word	0x431bde83

08009324 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08e      	sub	sp, #56	; 0x38
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800932e:	4a3a      	ldr	r2, [pc, #232]	; (8009418 <RCC_SetFlashLatency+0xf4>)
 8009330:	f107 0320 	add.w	r3, r7, #32
 8009334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009338:	6018      	str	r0, [r3, #0]
 800933a:	3304      	adds	r3, #4
 800933c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800933e:	4a37      	ldr	r2, [pc, #220]	; (800941c <RCC_SetFlashLatency+0xf8>)
 8009340:	f107 0318 	add.w	r3, r7, #24
 8009344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009348:	6018      	str	r0, [r3, #0]
 800934a:	3304      	adds	r3, #4
 800934c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800934e:	4a34      	ldr	r2, [pc, #208]	; (8009420 <RCC_SetFlashLatency+0xfc>)
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	ca07      	ldmia	r2, {r0, r1, r2}
 8009356:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009364:	d11b      	bne.n	800939e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009366:	2300      	movs	r3, #0
 8009368:	633b      	str	r3, [r7, #48]	; 0x30
 800936a:	e014      	b.n	8009396 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	3338      	adds	r3, #56	; 0x38
 8009372:	443b      	add	r3, r7
 8009374:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4293      	cmp	r3, r2
 800937e:	d807      	bhi.n	8009390 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	3338      	adds	r3, #56	; 0x38
 8009386:	443b      	add	r3, r7
 8009388:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800938e:	e021      	b.n	80093d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	3301      	adds	r3, #1
 8009394:	633b      	str	r3, [r7, #48]	; 0x30
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	2b02      	cmp	r3, #2
 800939a:	d9e7      	bls.n	800936c <RCC_SetFlashLatency+0x48>
 800939c:	e01a      	b.n	80093d4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800939e:	2300      	movs	r3, #0
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a2:	e014      	b.n	80093ce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	3338      	adds	r3, #56	; 0x38
 80093aa:	443b      	add	r3, r7
 80093ac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d807      	bhi.n	80093c8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80093b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	3338      	adds	r3, #56	; 0x38
 80093be:	443b      	add	r3, r7
 80093c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80093c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093c6:	e005      	b.n	80093d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	3301      	adds	r3, #1
 80093cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d9e7      	bls.n	80093a4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80093d4:	4b13      	ldr	r3, [pc, #76]	; (8009424 <RCC_SetFlashLatency+0x100>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f023 0207 	bic.w	r2, r3, #7
 80093dc:	4911      	ldr	r1, [pc, #68]	; (8009424 <RCC_SetFlashLatency+0x100>)
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	4313      	orrs	r3, r2
 80093e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093e4:	f7f9 fc16 	bl	8002c14 <HAL_GetTick>
 80093e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80093ea:	e008      	b.n	80093fe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80093ec:	f7f9 fc12 	bl	8002c14 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d901      	bls.n	80093fe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e007      	b.n	800940e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <RCC_SetFlashLatency+0x100>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009408:	429a      	cmp	r2, r3
 800940a:	d1ef      	bne.n	80093ec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3738      	adds	r7, #56	; 0x38
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	0801ecc4 	.word	0x0801ecc4
 800941c:	0801eccc 	.word	0x0801eccc
 8009420:	0801ecd4 	.word	0x0801ecd4
 8009424:	58004000 	.word	0x58004000

08009428 <LL_RCC_LSE_IsReady>:
{
 8009428:	b480      	push	{r7}
 800942a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800942c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b02      	cmp	r3, #2
 800943a:	d101      	bne.n	8009440 <LL_RCC_LSE_IsReady+0x18>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <LL_RCC_LSE_IsReady+0x1a>
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <LL_RCC_SetUSARTClockSource>:
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009456:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	43db      	mvns	r3, r3
 8009460:	401a      	ands	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bc80      	pop	{r7}
 8009478:	4770      	bx	lr

0800947a <LL_RCC_SetI2SClockSource>:
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800948e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr

080094a4 <LL_RCC_SetLPUARTClockSource>:
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80094ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <LL_RCC_SetI2CClockSource>:
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80094d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	091b      	lsrs	r3, r3, #4
 80094e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80094e6:	43db      	mvns	r3, r3
 80094e8:	401a      	ands	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80094f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <LL_RCC_SetLPTIMClockSource>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800950e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009512:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	0c1b      	lsrs	r3, r3, #16
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	43db      	mvns	r3, r3
 800951e:	401a      	ands	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009528:	4313      	orrs	r3, r2
 800952a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr

08009538 <LL_RCC_SetRNGClockSource>:
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009548:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800954c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <LL_RCC_SetADCClockSource>:
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800956a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800956e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009572:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4313      	orrs	r3, r2
 800957e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <LL_RCC_SetRTCClockSource>:
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <LL_RCC_GetRTCClockSource>:
{
 80095b6:	b480      	push	{r7}
 80095b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80095ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr

080095ce <LL_RCC_ForceBackupDomainReset>:
{
 80095ce:	b480      	push	{r7}
 80095d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80095e6:	bf00      	nop
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80095ee:	b480      	push	{r7}
 80095f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009606:	bf00      	nop
 8009608:	46bd      	mov	sp, r7
 800960a:	bc80      	pop	{r7}
 800960c:	4770      	bx	lr
	...

08009610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800961c:	2300      	movs	r3, #0
 800961e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009620:	2300      	movs	r3, #0
 8009622:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d058      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009630:	f7fe fd7e 	bl	8008130 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009634:	f7f9 faee 	bl	8002c14 <HAL_GetTick>
 8009638:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800963a:	e009      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800963c:	f7f9 faea 	bl	8002c14 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d902      	bls.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	74fb      	strb	r3, [r7, #19]
        break;
 800964e:	e006      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009650:	4b7b      	ldr	r3, [pc, #492]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800965c:	d1ee      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800965e:	7cfb      	ldrb	r3, [r7, #19]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d13c      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009664:	f7ff ffa7 	bl	80095b6 <LL_RCC_GetRTCClockSource>
 8009668:	4602      	mov	r2, r0
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966e:	429a      	cmp	r2, r3
 8009670:	d00f      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009680:	f7ff ffa5 	bl	80095ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009684:	f7ff ffb3 	bl	80095ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d014      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969c:	f7f9 faba 	bl	8002c14 <HAL_GetTick>
 80096a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80096a2:	e00b      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096a4:	f7f9 fab6 	bl	8002c14 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d902      	bls.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	74fb      	strb	r3, [r7, #19]
            break;
 80096ba:	e004      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80096bc:	f7ff feb4 	bl	8009428 <LL_RCC_LSE_IsReady>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d1ee      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80096c6:	7cfb      	ldrb	r3, [r7, #19]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff ff5b 	bl	800958c <LL_RCC_SetRTCClockSource>
 80096d6:	e004      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096d8:	7cfb      	ldrb	r3, [r7, #19]
 80096da:	74bb      	strb	r3, [r7, #18]
 80096dc:	e001      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096de:	7cfb      	ldrb	r3, [r7, #19]
 80096e0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fea9 	bl	800944a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fe9e 	bl	800944a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fec0 	bl	80094a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fee6 	bl	8009506 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff fedb 	bl	8009506 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009758:	2b00      	cmp	r3, #0
 800975a:	d004      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fed0 	bl	8009506 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff fea9 	bl	80094ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff fe9e 	bl	80094ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fe93 	bl	80094ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d011      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff fe5e 	bl	800947a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c6:	d107      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80097c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fea5 	bl	8009538 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80097f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009804:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d011      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff fea3 	bl	8009562 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009824:	d107      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009834:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009836:	7cbb      	ldrb	r3, [r7, #18]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	58000400 	.word	0x58000400

08009844 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d071      	beq.n	800993a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7f8 fe24 	bl	80024b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009878:	4b32      	ldr	r3, [pc, #200]	; (8009944 <HAL_RTC_Init+0x100>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0310 	and.w	r3, r3, #16
 8009880:	2b10      	cmp	r3, #16
 8009882:	d051      	beq.n	8009928 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009884:	4b2f      	ldr	r3, [pc, #188]	; (8009944 <HAL_RTC_Init+0x100>)
 8009886:	22ca      	movs	r2, #202	; 0xca
 8009888:	625a      	str	r2, [r3, #36]	; 0x24
 800988a:	4b2e      	ldr	r3, [pc, #184]	; (8009944 <HAL_RTC_Init+0x100>)
 800988c:	2253      	movs	r2, #83	; 0x53
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa11 	bl	8009cb8 <RTC_EnterInitMode>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d13f      	bne.n	8009920 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80098a0:	4b28      	ldr	r3, [pc, #160]	; (8009944 <HAL_RTC_Init+0x100>)
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	4a27      	ldr	r2, [pc, #156]	; (8009944 <HAL_RTC_Init+0x100>)
 80098a6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80098aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ae:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80098b0:	4b24      	ldr	r3, [pc, #144]	; (8009944 <HAL_RTC_Init+0x100>)
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	4319      	orrs	r1, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	430b      	orrs	r3, r1
 80098c4:	491f      	ldr	r1, [pc, #124]	; (8009944 <HAL_RTC_Init+0x100>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	491b      	ldr	r1, [pc, #108]	; (8009944 <HAL_RTC_Init+0x100>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80098da:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <HAL_RTC_Init+0x100>)
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	430b      	orrs	r3, r1
 80098ec:	4915      	ldr	r1, [pc, #84]	; (8009944 <HAL_RTC_Init+0x100>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa14 	bl	8009d20 <RTC_ExitInitMode>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10e      	bne.n	8009920 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <HAL_RTC_Init+0x100>)
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a19      	ldr	r1, [r3, #32]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	4319      	orrs	r1, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	430b      	orrs	r3, r1
 800991a:	490a      	ldr	r1, [pc, #40]	; (8009944 <HAL_RTC_Init+0x100>)
 800991c:	4313      	orrs	r3, r2
 800991e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009920:	4b08      	ldr	r3, [pc, #32]	; (8009944 <HAL_RTC_Init+0x100>)
 8009922:	22ff      	movs	r2, #255	; 0xff
 8009924:	625a      	str	r2, [r3, #36]	; 0x24
 8009926:	e001      	b.n	800992c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40002800 	.word	0x40002800

08009948 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_RTC_SetAlarm_IT+0x1e>
 8009962:	2302      	movs	r3, #2
 8009964:	e0f3      	b.n	8009b4e <HAL_RTC_SetAlarm_IT+0x206>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009976:	4b78      	ldr	r3, [pc, #480]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009986:	d06a      	beq.n	8009a5e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d13a      	bne.n	8009a04 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800998e:	4b72      	ldr	r3, [pc, #456]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f9f5 	bl	8009d9c <RTC_ByteToBcd2>
 80099b2:	4603      	mov	r3, r0
 80099b4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f9ee 	bl	8009d9c <RTC_ByteToBcd2>
 80099c0:	4603      	mov	r3, r0
 80099c2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099c4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	789b      	ldrb	r3, [r3, #2]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f9e6 	bl	8009d9c <RTC_ByteToBcd2>
 80099d0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099d2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	78db      	ldrb	r3, [r3, #3]
 80099da:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099dc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f9d8 	bl	8009d9c <RTC_ByteToBcd2>
 80099ec:	4603      	mov	r3, r0
 80099ee:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80099f0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80099f8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e02c      	b.n	8009a5e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009a0c:	d00d      	beq.n	8009a2a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a16:	d008      	beq.n	8009a2a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009a18:	4b4f      	ldr	r3, [pc, #316]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a36:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a3c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a44:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a4c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a4e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a54:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a5e:	4b3e      	ldr	r3, [pc, #248]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a60:	22ca      	movs	r2, #202	; 0xca
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24
 8009a64:	4b3c      	ldr	r3, [pc, #240]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a66:	2253      	movs	r2, #83	; 0x53
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a72:	d12c      	bne.n	8009ace <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009a74:	4b38      	ldr	r3, [pc, #224]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	4a37      	ldr	r2, [pc, #220]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a7e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009a80:	4b35      	ldr	r3, [pc, #212]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8c:	d107      	bne.n	8009a9e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	4930      	ldr	r1, [pc, #192]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	644b      	str	r3, [r1, #68]	; 0x44
 8009a9c:	e006      	b.n	8009aac <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009a9e:	4a2e      	ldr	r2, [pc, #184]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009aa4:	4a2c      	ldr	r2, [pc, #176]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009aac:	4a2a      	ldr	r2, [pc, #168]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab8:	f043 0201 	orr.w	r2, r3, #1
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009ac0:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	4a24      	ldr	r2, [pc, #144]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ac6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009aca:	6193      	str	r3, [r2, #24]
 8009acc:	e02b      	b.n	8009b26 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009ace:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	4a21      	ldr	r2, [pc, #132]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ad4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009ad8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009ada:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009adc:	2202      	movs	r2, #2
 8009ade:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae6:	d107      	bne.n	8009af8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	4919      	ldr	r1, [pc, #100]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009af6:	e006      	b.n	8009b06 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009af8:	4a17      	ldr	r2, [pc, #92]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009afe:	4a16      	ldr	r2, [pc, #88]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009b06:	4a14      	ldr	r2, [pc, #80]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f043 0202 	orr.w	r2, r3, #2
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	4a0e      	ldr	r2, [pc, #56]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b20:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009b24:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009b26:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x214>)
 8009b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b2c:	4a0b      	ldr	r2, [pc, #44]	; (8009b5c <HAL_RTC_SetAlarm_IT+0x214>)
 8009b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}
 8009b56:	bf00      	nop
 8009b58:	40002800 	.word	0x40002800
 8009b5c:	58000800 	.word	0x58000800

08009b60 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d101      	bne.n	8009b78 <HAL_RTC_DeactivateAlarm+0x18>
 8009b74:	2302      	movs	r3, #2
 8009b76:	e048      	b.n	8009c0a <HAL_RTC_DeactivateAlarm+0xaa>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b88:	4b22      	ldr	r3, [pc, #136]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009b8a:	22ca      	movs	r2, #202	; 0xca
 8009b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b8e:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009b90:	2253      	movs	r2, #83	; 0x53
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9a:	d115      	bne.n	8009bc8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009ba6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009ba8:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bac:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	f023 0201 	bic.w	r2, r3, #1
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009bc0:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bc6:	e014      	b.n	8009bf2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009bc8:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	4a11      	ldr	r2, [pc, #68]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bce:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009bd2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd8:	4a0e      	ldr	r2, [pc, #56]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bde:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	f023 0202 	bic.w	r2, r3, #2
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bee:	2202      	movs	r2, #2
 8009bf0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bf2:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr
 8009c14:	40002800 	.word	0x40002800

08009c18 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8009c20:	4b11      	ldr	r3, [pc, #68]	; (8009c68 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c28:	4013      	ands	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7f9 f9c2 	bl	8002fc6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009c4e:	2202      	movs	r2, #2
 8009c50:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f94a 	bl	8009eec <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	40002800 	.word	0x40002800

08009c6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <HAL_RTC_WaitForSynchro+0x48>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	4a0e      	ldr	r2, [pc, #56]	; (8009cb4 <HAL_RTC_WaitForSynchro+0x48>)
 8009c7a:	f023 0320 	bic.w	r3, r3, #32
 8009c7e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009c80:	f7f8 ffc8 	bl	8002c14 <HAL_GetTick>
 8009c84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009c86:	e009      	b.n	8009c9c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c88:	f7f8 ffc4 	bl	8002c14 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c96:	d901      	bls.n	8009c9c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e006      	b.n	8009caa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009c9c:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <HAL_RTC_WaitForSynchro+0x48>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0ef      	beq.n	8009c88 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40002800 	.word	0x40002800

08009cb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <RTC_EnterInitMode+0x64>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d120      	bne.n	8009d12 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <RTC_EnterInitMode+0x64>)
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a11      	ldr	r2, [pc, #68]	; (8009d1c <RTC_EnterInitMode+0x64>)
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009cdc:	f7f8 ff9a 	bl	8002c14 <HAL_GetTick>
 8009ce0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ce2:	e00d      	b.n	8009d00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ce4:	f7f8 ff96 	bl	8002c14 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cf2:	d905      	bls.n	8009d00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <RTC_EnterInitMode+0x64>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <RTC_EnterInitMode+0x5a>
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d1e8      	bne.n	8009ce4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40002800 	.word	0x40002800

08009d20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d36:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009d38:	4b17      	ldr	r3, [pc, #92]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10c      	bne.n	8009d5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff ff91 	bl	8009c6c <HAL_RTC_WaitForSynchro>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01e      	beq.n	8009d8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2203      	movs	r2, #3
 8009d54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	73fb      	strb	r3, [r7, #15]
 8009d5c:	e017      	b.n	8009d8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009d5e:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	4a0d      	ldr	r2, [pc, #52]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d64:	f023 0320 	bic.w	r3, r3, #32
 8009d68:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ff7e 	bl	8009c6c <HAL_RTC_WaitForSynchro>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d005      	beq.n	8009d82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2203      	movs	r2, #3
 8009d7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	4a04      	ldr	r2, [pc, #16]	; (8009d98 <RTC_ExitInitMode+0x78>)
 8009d88:	f043 0320 	orr.w	r3, r3, #32
 8009d8c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	40002800 	.word	0x40002800

08009d9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009dae:	e005      	b.n	8009dbc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	3b0a      	subs	r3, #10
 8009dba:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d8f6      	bhi.n	8009db0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	b2db      	uxtb	r3, r3
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr
	...

08009ddc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e01f      	b.n	8009e32 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e02:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e04:	22ca      	movs	r2, #202	; 0xca
 8009e06:	625a      	str	r2, [r3, #36]	; 0x24
 8009e08:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e0a:	2253      	movs	r2, #83	; 0x53
 8009e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e14:	f043 0320 	orr.w	r3, r3, #32
 8009e18:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e1a:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009e1c:	22ff      	movs	r2, #255	; 0xff
 8009e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr
 8009e3c:	40002800 	.word	0x40002800

08009e40 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_RTCEx_SetSSRU_IT+0x16>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e027      	b.n	8009ea6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2202      	movs	r2, #2
 8009e62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e66:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e68:	22ca      	movs	r2, #202	; 0xca
 8009e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8009e6c:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e6e:	2253      	movs	r2, #83	; 0x53
 8009e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009e72:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	4a0e      	ldr	r2, [pc, #56]	; (8009eb0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009e7e:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e84:	4a0b      	ldr	r2, [pc, #44]	; (8009eb4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e8e:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009e90:	22ff      	movs	r2, #255	; 0xff
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr
 8009eb0:	40002800 	.word	0x40002800
 8009eb4:	58000800 	.word	0x58000800

08009eb8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009ece:	2240      	movs	r2, #64	; 0x40
 8009ed0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7f9 f881 	bl	8002fda <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40002800 	.word	0x40002800

08009eec <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr
	...

08009f00 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <HAL_RTCEx_BKUPWrite+0x2c>)
 8009f0e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	4413      	add	r3, r2
 8009f18:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
}
 8009f20:	bf00      	nop
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	4000b100 	.word	0x4000b100

08009f30 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009f3a:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <HAL_RTCEx_BKUPRead+0x28>)
 8009f3c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4413      	add	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	4000b100 	.word	0x4000b100

08009f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e0c6      	b.n	800a0fc <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d108      	bne.n	8009f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f7e:	d009      	beq.n	8009f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	61da      	str	r2, [r3, #28]
 8009f86:	e005      	b.n	8009f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d106      	bne.n	8009fae <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7f8 fb2f 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fce:	d902      	bls.n	8009fd6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e002      	b.n	8009fdc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009fe4:	d007      	beq.n	8009ff6 <HAL_SPI_Init+0x9a>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fee:	d002      	beq.n	8009ff6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a038:	ea42 0103 	orr.w	r1, r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a040:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a054:	d11b      	bne.n	800a08e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10b      	bne.n	800a076 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a066:	d903      	bls.n	800a070 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	631a      	str	r2, [r3, #48]	; 0x30
 800a06e:	e002      	b.n	800a076 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d107      	bne.n	800a08e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a08c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	f003 0204 	and.w	r2, r3, #4
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a0b4:	ea42 0103 	orr.w	r1, r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ce:	d105      	bne.n	800a0dc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	69da      	ldr	r2, [r3, #28]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <LL_PWR_SetRadioBusyTrigger>:
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a10c:	4b06      	ldr	r3, [pc, #24]	; (800a128 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a114:	4904      	ldr	r1, [pc, #16]	; (800a128 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4313      	orrs	r3, r2
 800a11a:	608b      	str	r3, [r1, #8]
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	58000400 	.word	0x58000400

0800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a130:	4b05      	ldr	r3, [pc, #20]	; (800a148 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a136:	4a04      	ldr	r2, [pc, #16]	; (800a148 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a13c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a140:	bf00      	nop
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr
 800a148:	58000400 	.word	0x58000400

0800a14c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a156:	4a04      	ldr	r2, [pc, #16]	; (800a168 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a15c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a160:	bf00      	nop
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr
 800a168:	58000400 	.word	0x58000400

0800a16c <LL_PWR_ClearFlag_RFBUSY>:
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a170:	4b03      	ldr	r3, [pc, #12]	; (800a180 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a176:	619a      	str	r2, [r3, #24]
}
 800a178:	bf00      	nop
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bc80      	pop	{r7}
 800a17e:	4770      	bx	lr
 800a180:	58000400 	.word	0x58000400

0800a184 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b02      	cmp	r3, #2
 800a192:	d101      	bne.n	800a198 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a194:	2301      	movs	r3, #1
 800a196:	e000      	b.n	800a19a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	58000400 	.word	0x58000400

0800a1a8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d101      	bne.n	800a1bc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	58000400 	.word	0x58000400

0800a1cc <LL_RCC_RF_DisableReset>:
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a1d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a1e4:	bf00      	nop
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <LL_RCC_IsRFUnderReset>:
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a1f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a200:	d101      	bne.n	800a206 <LL_RCC_IsRFUnderReset+0x1a>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <LL_RCC_IsRFUnderReset+0x1c>
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr

0800a210 <LL_EXTI_EnableIT_32_63>:
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a218:	4b06      	ldr	r3, [pc, #24]	; (800a234 <LL_EXTI_EnableIT_32_63+0x24>)
 800a21a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a21e:	4905      	ldr	r1, [pc, #20]	; (800a234 <LL_EXTI_EnableIT_32_63+0x24>)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4313      	orrs	r3, r2
 800a224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	58000800 	.word	0x58000800

0800a238 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d103      	bne.n	800a24e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	73fb      	strb	r3, [r7, #15]
    return status;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	e052      	b.n	800a2f4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	799b      	ldrb	r3, [r3, #6]
 800a256:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_SUBGHZ_Init+0x2c>
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	2b03      	cmp	r3, #3
 800a262:	d109      	bne.n	800a278 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f8 fb2a 	bl	80028c4 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a270:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a274:	f7ff ffcc 	bl	800a210 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d126      	bne.n	800a2cc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800a284:	f7ff ffa2 	bl	800a1cc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a288:	4b1c      	ldr	r3, [pc, #112]	; (800a2fc <HAL_SUBGHZ_Init+0xc4>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	4613      	mov	r3, r2
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	0cdb      	lsrs	r3, r3, #19
 800a296:	2264      	movs	r2, #100	; 0x64
 800a298:	fb02 f303 	mul.w	r3, r2, r3
 800a29c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	609a      	str	r2, [r3, #8]
        break;
 800a2ae:	e007      	b.n	800a2c0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a2b6:	f7ff ff99 	bl	800a1ec <LL_RCC_IsRFUnderReset>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1ee      	bne.n	800a29e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2c0:	f7ff ff34 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a2c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2c8:	f7ff ff1c 	bl	800a104 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a2cc:	f7ff ff4e 	bl	800a16c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 faac 	bl	800a838 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	719a      	strb	r2, [r3, #6]

  return status;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20000004 	.word	0x20000004

0800a300 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	607a      	str	r2, [r7, #4]
 800a30a:	461a      	mov	r2, r3
 800a30c:	460b      	mov	r3, r1
 800a30e:	817b      	strh	r3, [r7, #10]
 800a310:	4613      	mov	r3, r2
 800a312:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	799b      	ldrb	r3, [r3, #6]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d14a      	bne.n	800a3b4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	795b      	ldrb	r3, [r3, #5]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a326:	2302      	movs	r3, #2
 800a328:	e045      	b.n	800a3b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2202      	movs	r2, #2
 800a334:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 fb4c 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a33c:	f7ff ff06 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a340:	210d      	movs	r1, #13
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 fa98 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a348:	897b      	ldrh	r3, [r7, #10]
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	4619      	mov	r1, r3
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 fa90 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a358:	897b      	ldrh	r3, [r7, #10]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 fa8a 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a364:	2300      	movs	r3, #0
 800a366:	82bb      	strh	r3, [r7, #20]
 800a368:	e00a      	b.n	800a380 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a36a:	8abb      	ldrh	r3, [r7, #20]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fa7f 	bl	800a878 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a37a:	8abb      	ldrh	r3, [r7, #20]
 800a37c:	3301      	adds	r3, #1
 800a37e:	82bb      	strh	r3, [r7, #20]
 800a380:	8aba      	ldrh	r2, [r7, #20]
 800a382:	893b      	ldrh	r3, [r7, #8]
 800a384:	429a      	cmp	r2, r3
 800a386:	d3f0      	bcc.n	800a36a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a388:	f7ff fed0 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fb45 	bl	800aa1c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
 800a39e:	e001      	b.n	800a3a4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	715a      	strb	r2, [r3, #5]

    return status;
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	e000      	b.n	800a3b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
  }
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b088      	sub	sp, #32
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	817b      	strh	r3, [r7, #10]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	799b      	ldrb	r3, [r3, #6]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d14a      	bne.n	800a476 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	795b      	ldrb	r3, [r3, #5]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e045      	b.n	800a478 <HAL_SUBGHZ_ReadRegisters+0xba>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 faee 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a3f8:	f7ff fea8 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a3fc:	211d      	movs	r1, #29
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 fa3a 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a404:	897b      	ldrh	r3, [r7, #10]
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	b29b      	uxth	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fa32 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a414:	897b      	ldrh	r3, [r7, #10]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	4619      	mov	r1, r3
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 fa2c 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a420:	2100      	movs	r1, #0
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fa28 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a428:	2300      	movs	r3, #0
 800a42a:	82fb      	strh	r3, [r7, #22]
 800a42c:	e009      	b.n	800a442 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a42e:	69b9      	ldr	r1, [r7, #24]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fa77 	bl	800a924 <SUBGHZSPI_Receive>
      pData++;
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	3301      	adds	r3, #1
 800a43a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a43c:	8afb      	ldrh	r3, [r7, #22]
 800a43e:	3301      	adds	r3, #1
 800a440:	82fb      	strh	r3, [r7, #22]
 800a442:	8afa      	ldrh	r2, [r7, #22]
 800a444:	893b      	ldrh	r3, [r7, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	d3f1      	bcc.n	800a42e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a44a:	f7ff fe6f 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fae4 	bl	800aa1c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e001      	b.n	800a466 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	715a      	strb	r2, [r3, #5]

    return status;
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	e000      	b.n	800a478 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a476:	2302      	movs	r3, #2
  }
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3720      	adds	r7, #32
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	461a      	mov	r2, r3
 800a48c:	460b      	mov	r3, r1
 800a48e:	72fb      	strb	r3, [r7, #11]
 800a490:	4613      	mov	r3, r2
 800a492:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	799b      	ldrb	r3, [r3, #6]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d14a      	bne.n	800a534 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	795b      	ldrb	r3, [r3, #5]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d101      	bne.n	800a4aa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	e045      	b.n	800a536 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fa8f 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	2b84      	cmp	r3, #132	; 0x84
 800a4ba:	d002      	beq.n	800a4c2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a4bc:	7afb      	ldrb	r3, [r7, #11]
 800a4be:	2b94      	cmp	r3, #148	; 0x94
 800a4c0:	d103      	bne.n	800a4ca <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	711a      	strb	r2, [r3, #4]
 800a4c8:	e002      	b.n	800a4d0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a4d0:	f7ff fe3c 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f9cd 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a4de:	2300      	movs	r3, #0
 800a4e0:	82bb      	strh	r3, [r7, #20]
 800a4e2:	e00a      	b.n	800a4fa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a4e4:	8abb      	ldrh	r3, [r7, #20]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 f9c2 	bl	800a878 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a4f4:	8abb      	ldrh	r3, [r7, #20]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	82bb      	strh	r3, [r7, #20]
 800a4fa:	8aba      	ldrh	r2, [r7, #20]
 800a4fc:	893b      	ldrh	r3, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d3f0      	bcc.n	800a4e4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a502:	f7ff fe13 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	2b84      	cmp	r3, #132	; 0x84
 800a50a:	d002      	beq.n	800a512 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 fa85 	bl	800aa1c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]
 800a51e:	e001      	b.n	800a524 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	715a      	strb	r2, [r3, #5]

    return status;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	e000      	b.n	800a536 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a534:	2302      	movs	r3, #2
  }
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b088      	sub	sp, #32
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	461a      	mov	r2, r3
 800a54a:	460b      	mov	r3, r1
 800a54c:	72fb      	strb	r3, [r7, #11]
 800a54e:	4613      	mov	r3, r2
 800a550:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	799b      	ldrb	r3, [r3, #6]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d13d      	bne.n	800a5dc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	795b      	ldrb	r3, [r3, #5]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d101      	bne.n	800a56c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a568:	2302      	movs	r3, #2
 800a56a:	e038      	b.n	800a5de <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2201      	movs	r2, #1
 800a570:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fa2e 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a578:	f7ff fde8 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 f979 	bl	800a878 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a586:	2100      	movs	r1, #0
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 f975 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a58e:	2300      	movs	r3, #0
 800a590:	82fb      	strh	r3, [r7, #22]
 800a592:	e009      	b.n	800a5a8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a594:	69b9      	ldr	r1, [r7, #24]
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 f9c4 	bl	800a924 <SUBGHZSPI_Receive>
      pData++;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a5a2:	8afb      	ldrh	r3, [r7, #22]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	82fb      	strh	r3, [r7, #22]
 800a5a8:	8afa      	ldrh	r2, [r7, #22]
 800a5aa:	893b      	ldrh	r3, [r7, #8]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d3f1      	bcc.n	800a594 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5b0:	f7ff fdbc 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 fa31 	bl	800aa1c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	77fb      	strb	r3, [r7, #31]
 800a5c6:	e001      	b.n	800a5cc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	715a      	strb	r2, [r3, #5]

    return status;
 800a5d8:	7ffb      	ldrb	r3, [r7, #31]
 800a5da:	e000      	b.n	800a5de <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a5dc:	2302      	movs	r3, #2
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b086      	sub	sp, #24
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	72fb      	strb	r3, [r7, #11]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	799b      	ldrb	r3, [r3, #6]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b01      	cmp	r3, #1
 800a602:	d13e      	bne.n	800a682 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	795b      	ldrb	r3, [r3, #5]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d101      	bne.n	800a610 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a60c:	2302      	movs	r3, #2
 800a60e:	e039      	b.n	800a684 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 f9dc 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a61c:	f7ff fd96 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a620:	210e      	movs	r1, #14
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f928 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a628:	7afb      	ldrb	r3, [r7, #11]
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f923 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a632:	2300      	movs	r3, #0
 800a634:	82bb      	strh	r3, [r7, #20]
 800a636:	e00a      	b.n	800a64e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a638:	8abb      	ldrh	r3, [r7, #20]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	4619      	mov	r1, r3
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f918 	bl	800a878 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a648:	8abb      	ldrh	r3, [r7, #20]
 800a64a:	3301      	adds	r3, #1
 800a64c:	82bb      	strh	r3, [r7, #20]
 800a64e:	8aba      	ldrh	r2, [r7, #20]
 800a650:	893b      	ldrh	r3, [r7, #8]
 800a652:	429a      	cmp	r2, r3
 800a654:	d3f0      	bcc.n	800a638 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a656:	f7ff fd69 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f9de 	bl	800aa1c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
 800a66c:	e001      	b.n	800a672 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	715a      	strb	r2, [r3, #5]

    return status;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	e000      	b.n	800a684 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a682:	2302      	movs	r3, #2
  }
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b088      	sub	sp, #32
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	461a      	mov	r2, r3
 800a698:	460b      	mov	r3, r1
 800a69a:	72fb      	strb	r3, [r7, #11]
 800a69c:	4613      	mov	r3, r2
 800a69e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	799b      	ldrb	r3, [r3, #6]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d141      	bne.n	800a732 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	795b      	ldrb	r3, [r3, #5]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	e03c      	b.n	800a734 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f987 	bl	800a9d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a6c6:	f7ff fd41 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a6ca:	211e      	movs	r1, #30
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 f8d3 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f8ce 	bl	800a878 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a6dc:	2100      	movs	r1, #0
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 f8ca 	bl	800a878 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	82fb      	strh	r3, [r7, #22]
 800a6e8:	e009      	b.n	800a6fe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a6ea:	69b9      	ldr	r1, [r7, #24]
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f919 	bl	800a924 <SUBGHZSPI_Receive>
      pData++;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a6f8:	8afb      	ldrh	r3, [r7, #22]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	82fb      	strh	r3, [r7, #22]
 800a6fe:	8afa      	ldrh	r2, [r7, #22]
 800a700:	893b      	ldrh	r3, [r7, #8]
 800a702:	429a      	cmp	r2, r3
 800a704:	d3f1      	bcc.n	800a6ea <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a706:	f7ff fd11 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f986 	bl	800aa1c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	77fb      	strb	r3, [r7, #31]
 800a71c:	e001      	b.n	800a722 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2201      	movs	r2, #1
 800a726:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	715a      	strb	r2, [r3, #5]

    return status;
 800a72e:	7ffb      	ldrb	r3, [r7, #31]
 800a730:	e000      	b.n	800a734 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a732:	2302      	movs	r3, #2
  }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3720      	adds	r7, #32
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a744:	2300      	movs	r3, #0
 800a746:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a748:	f107 020c 	add.w	r2, r7, #12
 800a74c:	2302      	movs	r3, #2
 800a74e:	2112      	movs	r1, #18
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fef4 	bl	800a53e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a756:	7b3b      	ldrb	r3, [r7, #12]
 800a758:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a75a:	89fb      	ldrh	r3, [r7, #14]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	b21a      	sxth	r2, r3
 800a760:	7b7b      	ldrb	r3, [r7, #13]
 800a762:	b21b      	sxth	r3, r3
 800a764:	4313      	orrs	r3, r2
 800a766:	b21b      	sxth	r3, r3
 800a768:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a76a:	f107 020c 	add.w	r2, r7, #12
 800a76e:	2302      	movs	r3, #2
 800a770:	2102      	movs	r1, #2
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fe84 	bl	800a480 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a778:	89fb      	ldrh	r3, [r7, #14]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f012 fc34 	bl	801cff0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a788:	89fb      	ldrh	r3, [r7, #14]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f012 fc3a 	bl	801d00c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a798:	89fb      	ldrh	r3, [r7, #14]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f012 fc8a 	bl	801d0bc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f012 fc90 	bl	801d0d8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a7b8:	89fb      	ldrh	r3, [r7, #14]
 800a7ba:	f003 0310 	and.w	r3, r3, #16
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f012 fc96 	bl	801d0f4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a7c8:	89fb      	ldrh	r3, [r7, #14]
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f012 fc64 	bl	801d0a0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a7d8:	89fb      	ldrh	r3, [r7, #14]
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f012 fc20 	bl	801d028 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a7e8:	89fb      	ldrh	r3, [r7, #14]
 800a7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00d      	beq.n	800a80e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a7f2:	89fb      	ldrh	r3, [r7, #14]
 800a7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f012 fc20 	bl	801d044 <HAL_SUBGHZ_CADStatusCallback>
 800a804:	e003      	b.n	800a80e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a806:	2100      	movs	r1, #0
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f012 fc1b 	bl	801d044 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a80e:	89fb      	ldrh	r3, [r7, #14]
 800a810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f012 fc31 	bl	801d080 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a81e:	89fb      	ldrh	r3, [r7, #14]
 800a820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f012 fc71 	bl	801d110 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a0b      	ldr	r2, [pc, #44]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a84a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a84c:	4a09      	ldr	r2, [pc, #36]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a854:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a856:	4b07      	ldr	r3, [pc, #28]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a858:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a85c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a04      	ldr	r2, [pc, #16]	; (800a874 <SUBGHZSPI_Init+0x3c>)
 800a864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a868:	6013      	str	r3, [r2, #0]
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	bc80      	pop	{r7}
 800a872:	4770      	bx	lr
 800a874:	58010000 	.word	0x58010000

0800a878 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a888:	4b23      	ldr	r3, [pc, #140]	; (800a918 <SUBGHZSPI_Transmit+0xa0>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	4613      	mov	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	1a9b      	subs	r3, r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	0cdb      	lsrs	r3, r3, #19
 800a896:	2264      	movs	r2, #100	; 0x64
 800a898:	fb02 f303 	mul.w	r3, r2, r3
 800a89c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	609a      	str	r2, [r3, #8]
      break;
 800a8ae:	e008      	b.n	800a8c2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a8b6:	4b19      	ldr	r3, [pc, #100]	; (800a91c <SUBGHZSPI_Transmit+0xa4>)
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d1ed      	bne.n	800a89e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a8c2:	4b17      	ldr	r3, [pc, #92]	; (800a920 <SUBGHZSPI_Transmit+0xa8>)
 800a8c4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	78fa      	ldrb	r2, [r7, #3]
 800a8ca:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a8cc:	4b12      	ldr	r3, [pc, #72]	; (800a918 <SUBGHZSPI_Transmit+0xa0>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	0cdb      	lsrs	r3, r3, #19
 800a8da:	2264      	movs	r2, #100	; 0x64
 800a8dc:	fb02 f303 	mul.w	r3, r2, r3
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	609a      	str	r2, [r3, #8]
      break;
 800a8f2:	e008      	b.n	800a906 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a8fa:	4b08      	ldr	r3, [pc, #32]	; (800a91c <SUBGHZSPI_Transmit+0xa4>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b01      	cmp	r3, #1
 800a904:	d1ed      	bne.n	800a8e2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <SUBGHZSPI_Transmit+0xa4>)
 800a908:	68db      	ldr	r3, [r3, #12]

  return status;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	20000004 	.word	0x20000004
 800a91c:	58010000 	.word	0x58010000
 800a920:	5801000c 	.word	0x5801000c

0800a924 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a932:	4b25      	ldr	r3, [pc, #148]	; (800a9c8 <SUBGHZSPI_Receive+0xa4>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4613      	mov	r3, r2
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	0cdb      	lsrs	r3, r3, #19
 800a940:	2264      	movs	r2, #100	; 0x64
 800a942:	fb02 f303 	mul.w	r3, r2, r3
 800a946:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	609a      	str	r2, [r3, #8]
      break;
 800a958:	e008      	b.n	800a96c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a960:	4b1a      	ldr	r3, [pc, #104]	; (800a9cc <SUBGHZSPI_Receive+0xa8>)
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d1ed      	bne.n	800a948 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a96c:	4b18      	ldr	r3, [pc, #96]	; (800a9d0 <SUBGHZSPI_Receive+0xac>)
 800a96e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	22ff      	movs	r2, #255	; 0xff
 800a974:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a976:	4b14      	ldr	r3, [pc, #80]	; (800a9c8 <SUBGHZSPI_Receive+0xa4>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4613      	mov	r3, r2
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	0cdb      	lsrs	r3, r3, #19
 800a984:	2264      	movs	r2, #100	; 0x64
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d105      	bne.n	800a99e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	609a      	str	r2, [r3, #8]
      break;
 800a99c:	e008      	b.n	800a9b0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <SUBGHZSPI_Receive+0xa8>)
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d1ed      	bne.n	800a98c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <SUBGHZSPI_Receive+0xa8>)
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	701a      	strb	r2, [r3, #0]

  return status;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bc80      	pop	{r7}
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000004 	.word	0x20000004
 800a9cc:	58010000 	.word	0x58010000
 800a9d0:	5801000c 	.word	0x5801000c

0800a9d4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	791b      	ldrb	r3, [r3, #4]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d111      	bne.n	800aa08 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <SUBGHZ_CheckDeviceReady+0x44>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	0c1b      	lsrs	r3, r3, #16
 800a9f2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a9f4:	f7ff fbaa 	bl	800a14c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f9      	bne.n	800a9f8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800aa04:	f7ff fb92 	bl	800a12c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f807 	bl	800aa1c <SUBGHZ_WaitOnBusy>
 800aa0e:	4603      	mov	r3, r0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	20000004 	.word	0x20000004

0800aa1c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <SUBGHZ_WaitOnBusy+0x58>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	4413      	add	r3, r2
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	0d1b      	lsrs	r3, r3, #20
 800aa36:	2264      	movs	r2, #100	; 0x64
 800aa38:	fb02 f303 	mul.w	r3, r2, r3
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800aa3e:	f7ff fbb3 	bl	800a1a8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800aa42:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d105      	bne.n	800aa56 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2202      	movs	r2, #2
 800aa52:	609a      	str	r2, [r3, #8]
      break;
 800aa54:	e009      	b.n	800aa6a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800aa5c:	f7ff fb92 	bl	800a184 <LL_PWR_IsActiveFlag_RFBUSYS>
 800aa60:	4602      	mov	r2, r0
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	4013      	ands	r3, r2
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d0e9      	beq.n	800aa3e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000004 	.word	0x20000004

0800aa78 <LL_RCC_GetUSARTClockSource>:
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800aa80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	401a      	ands	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	041b      	lsls	r3, r3, #16
 800aa90:	4313      	orrs	r3, r2
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bc80      	pop	{r7}
 800aa9a:	4770      	bx	lr

0800aa9c <LL_RCC_GetLPUARTClockSource>:
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800aaa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4013      	ands	r3, r2
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr

0800aaba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e042      	b.n	800ab52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7f8 fc72 	bl	80033c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2224      	movs	r2, #36	; 0x24
 800aae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0201 	bic.w	r2, r2, #1
 800aafa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fc3b 	bl	800b378 <UART_SetConfig>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e022      	b.n	800ab52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fea3 	bl	800b860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0201 	orr.w	r2, r2, #1
 800ab48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 ff29 	bl	800b9a2 <UART_CheckIdleState>
 800ab50:	4603      	mov	r3, r0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08a      	sub	sp, #40	; 0x28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d137      	bne.n	800abe4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <HAL_UART_Receive_IT+0x24>
 800ab7a:	88fb      	ldrh	r3, [r7, #6]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e030      	b.n	800abe6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a18      	ldr	r2, [pc, #96]	; (800abf0 <HAL_UART_Receive_IT+0x94>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d01f      	beq.n	800abd4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d018      	beq.n	800abd4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	613b      	str	r3, [r7, #16]
   return(result);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	69f9      	ldr	r1, [r7, #28]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e6      	bne.n	800aba2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	461a      	mov	r2, r3
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 fff8 	bl	800bbd0 <UART_Start_Receive_IT>
 800abe0:	4603      	mov	r3, r0
 800abe2:	e000      	b.n	800abe6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abe4:	2302      	movs	r3, #2
  }
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3728      	adds	r7, #40	; 0x28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40008000 	.word	0x40008000

0800abf4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	4613      	mov	r3, r2
 800ac00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d167      	bne.n	800acdc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <HAL_UART_Transmit_DMA+0x24>
 800ac12:	88fb      	ldrh	r3, [r7, #6]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e060      	b.n	800acde <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	88fa      	ldrh	r2, [r7, #6]
 800ac26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	88fa      	ldrh	r2, [r7, #6]
 800ac2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2221      	movs	r2, #33	; 0x21
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d028      	beq.n	800ac9c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac4e:	4a26      	ldr	r2, [pc, #152]	; (800ace8 <HAL_UART_Transmit_DMA+0xf4>)
 800ac50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac56:	4a25      	ldr	r2, [pc, #148]	; (800acec <HAL_UART_Transmit_DMA+0xf8>)
 800ac58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac5e:	4a24      	ldr	r2, [pc, #144]	; (800acf0 <HAL_UART_Transmit_DMA+0xfc>)
 800ac60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac66:	2200      	movs	r2, #0
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac72:	4619      	mov	r1, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3328      	adds	r3, #40	; 0x28
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	f7fa fa23 	bl	80050c8 <HAL_DMA_Start_IT>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d009      	beq.n	800ac9c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2210      	movs	r2, #16
 800ac8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e020      	b.n	800acde <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2240      	movs	r2, #64	; 0x40
 800aca2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3308      	adds	r3, #8
 800acaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	613b      	str	r3, [r7, #16]
   return(result);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3308      	adds	r3, #8
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	623a      	str	r2, [r7, #32]
 800acc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	69f9      	ldr	r1, [r7, #28]
 800acca:	6a3a      	ldr	r2, [r7, #32]
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e5      	bne.n	800aca4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	e000      	b.n	800acde <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800acdc:	2302      	movs	r3, #2
  }
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3728      	adds	r7, #40	; 0x28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	0800bf5b 	.word	0x0800bf5b
 800acec:	0800bff5 	.word	0x0800bff5
 800acf0:	0800c011 	.word	0x0800c011

0800acf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b0ba      	sub	sp, #232	; 0xe8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad1e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad22:	4013      	ands	r3, r2
 800ad24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11b      	bne.n	800ad68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d015      	beq.n	800ad68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad40:	f003 0320 	and.w	r3, r3, #32
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 82e3 	beq.w	800b324 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	4798      	blx	r3
      }
      return;
 800ad66:	e2dd      	b.n	800b324 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 8123 	beq.w	800afb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad76:	4b8d      	ldr	r3, [pc, #564]	; (800afac <HAL_UART_IRQHandler+0x2b8>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d106      	bne.n	800ad8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad82:	4b8b      	ldr	r3, [pc, #556]	; (800afb0 <HAL_UART_IRQHandler+0x2bc>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8116 	beq.w	800afb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d011      	beq.n	800adbc <HAL_UART_IRQHandler+0xc8>
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2201      	movs	r2, #1
 800adaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb2:	f043 0201 	orr.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d011      	beq.n	800adec <HAL_UART_IRQHandler+0xf8>
 800adc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2202      	movs	r2, #2
 800adda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade2:	f043 0204 	orr.w	r2, r3, #4
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d011      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
 800adf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae12:	f043 0202 	orr.w	r2, r3, #2
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d017      	beq.n	800ae58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae38:	4b5c      	ldr	r3, [pc, #368]	; (800afac <HAL_UART_IRQHandler+0x2b8>)
 800ae3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00b      	beq.n	800ae58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4e:	f043 0208 	orr.w	r2, r3, #8
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d012      	beq.n	800ae8a <HAL_UART_IRQHandler+0x196>
 800ae64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00c      	beq.n	800ae8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae80:	f043 0220 	orr.w	r2, r3, #32
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 8249 	beq.w	800b328 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d013      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d105      	bne.n	800aeba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aede:	2b40      	cmp	r3, #64	; 0x40
 800aee0:	d005      	beq.n	800aeee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d054      	beq.n	800af98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 ffce 	bl	800be90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d146      	bne.n	800af90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3308      	adds	r3, #8
 800af08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1d9      	bne.n	800af02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af54:	2b00      	cmp	r3, #0
 800af56:	d017      	beq.n	800af88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af5e:	4a15      	ldr	r2, [pc, #84]	; (800afb4 <HAL_UART_IRQHandler+0x2c0>)
 800af60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa f989 	bl	8005280 <HAL_DMA_Abort_IT>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d019      	beq.n	800afa8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800af82:	4610      	mov	r0, r2
 800af84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af86:	e00f      	b.n	800afa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f9e0 	bl	800b34e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8e:	e00b      	b.n	800afa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f9dc 	bl	800b34e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af96:	e007      	b.n	800afa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f9d8 	bl	800b34e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800afa6:	e1bf      	b.n	800b328 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa8:	bf00      	nop
    return;
 800afaa:	e1bd      	b.n	800b328 <HAL_UART_IRQHandler+0x634>
 800afac:	10000001 	.word	0x10000001
 800afb0:	04000120 	.word	0x04000120
 800afb4:	0800c091 	.word	0x0800c091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	f040 8153 	bne.w	800b268 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc6:	f003 0310 	and.w	r3, r3, #16
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 814c 	beq.w	800b268 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afd4:	f003 0310 	and.w	r3, r3, #16
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 8145 	beq.w	800b268 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2210      	movs	r2, #16
 800afe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff0:	2b40      	cmp	r3, #64	; 0x40
 800aff2:	f040 80bb 	bne.w	800b16c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 818f 	beq.w	800b32c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b018:	429a      	cmp	r2, r3
 800b01a:	f080 8187 	bcs.w	800b32c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	f040 8087 	bne.w	800b14a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	461a      	mov	r2, r3
 800b062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b06a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b07e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1da      	bne.n	800b03c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b098:	f023 0301 	bic.w	r3, r3, #1
 800b09c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1e1      	bne.n	800b086 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e3      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b118:	f023 0310 	bic.w	r3, r3, #16
 800b11c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b12a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b12c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b132:	e841 2300 	strex	r3, r2, [r1]
 800b136:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1e4      	bne.n	800b108 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b144:	4618      	mov	r0, r3
 800b146:	f7fa f83d 	bl	80051c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2202      	movs	r2, #2
 800b14e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	b29b      	uxth	r3, r3
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f8fb 	bl	800b360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b16a:	e0df      	b.n	800b32c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b178:	b29b      	uxth	r3, r3
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b186:	b29b      	uxth	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 80d1 	beq.w	800b330 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b18e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 80cc 	beq.w	800b330 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b1bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e4      	bne.n	800b198 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1f6:	633a      	str	r2, [r7, #48]	; 0x30
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e1      	bne.n	800b1ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	e853 3f00 	ldrex	r3, [r3]
 800b22a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0310 	bic.w	r3, r3, #16
 800b232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b240:	61fb      	str	r3, [r7, #28]
 800b242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	69b9      	ldr	r1, [r7, #24]
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	e841 2300 	strex	r3, r2, [r1]
 800b24c:	617b      	str	r3, [r7, #20]
   return(result);
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e4      	bne.n	800b21e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b25a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f87d 	bl	800b360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b266:	e063      	b.n	800b330 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00e      	beq.n	800b292 <HAL_UART_IRQHandler+0x59e>
 800b274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d008      	beq.n	800b292 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 fc5e 	bl	800cb4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b290:	e051      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d014      	beq.n	800b2c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d008      	beq.n	800b2c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d03a      	beq.n	800b334 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	4798      	blx	r3
    }
    return;
 800b2c6:	e035      	b.n	800b334 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d009      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x5f4>
 800b2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 feeb 	bl	800c0bc <UART_EndTransmit_IT>
    return;
 800b2e6:	e026      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d009      	beq.n	800b308 <HAL_UART_IRQHandler+0x614>
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fc35 	bl	800cb70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b306:	e016      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b30c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d010      	beq.n	800b336 <HAL_UART_IRQHandler+0x642>
 800b314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	da0c      	bge.n	800b336 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fc1e 	bl	800cb5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b322:	e008      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
      return;
 800b324:	bf00      	nop
 800b326:	e006      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
    return;
 800b328:	bf00      	nop
 800b32a:	e004      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
      return;
 800b32c:	bf00      	nop
 800b32e:	e002      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
      return;
 800b330:	bf00      	nop
 800b332:	e000      	b.n	800b336 <HAL_UART_IRQHandler+0x642>
    return;
 800b334:	bf00      	nop
  }
}
 800b336:	37e8      	adds	r7, #232	; 0xe8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr

0800b34e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bc80      	pop	{r7}
 800b35e:	4770      	bx	lr

0800b360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	bc80      	pop	{r7}
 800b374:	4770      	bx	lr
	...

0800b378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b37c:	b08c      	sub	sp, #48	; 0x30
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	431a      	orrs	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	431a      	orrs	r2, r3
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	4b94      	ldr	r3, [pc, #592]	; (800b5f8 <UART_SetConfig+0x280>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a89      	ldr	r2, [pc, #548]	; (800b5fc <UART_SetConfig+0x284>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d004      	beq.n	800b3e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	f023 010f 	bic.w	r1, r3, #15
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a7a      	ldr	r2, [pc, #488]	; (800b600 <UART_SetConfig+0x288>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d127      	bne.n	800b46c <UART_SetConfig+0xf4>
 800b41c:	2003      	movs	r0, #3
 800b41e:	f7ff fb2b 	bl	800aa78 <LL_RCC_GetUSARTClockSource>
 800b422:	4603      	mov	r3, r0
 800b424:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d81b      	bhi.n	800b464 <UART_SetConfig+0xec>
 800b42c:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0xbc>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b445 	.word	0x0800b445
 800b438:	0800b455 	.word	0x0800b455
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b45d 	.word	0x0800b45d
 800b444:	2301      	movs	r3, #1
 800b446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44a:	e080      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b44c:	2302      	movs	r3, #2
 800b44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b452:	e07c      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b454:	2304      	movs	r3, #4
 800b456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b45a:	e078      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b45c:	2308      	movs	r3, #8
 800b45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b462:	e074      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b464:	2310      	movs	r3, #16
 800b466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b46a:	e070      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a64      	ldr	r2, [pc, #400]	; (800b604 <UART_SetConfig+0x28c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d138      	bne.n	800b4e8 <UART_SetConfig+0x170>
 800b476:	200c      	movs	r0, #12
 800b478:	f7ff fafe 	bl	800aa78 <LL_RCC_GetUSARTClockSource>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b482:	2b0c      	cmp	r3, #12
 800b484:	d82c      	bhi.n	800b4e0 <UART_SetConfig+0x168>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <UART_SetConfig+0x114>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b4c1 	.word	0x0800b4c1
 800b490:	0800b4e1 	.word	0x0800b4e1
 800b494:	0800b4e1 	.word	0x0800b4e1
 800b498:	0800b4e1 	.word	0x0800b4e1
 800b49c:	0800b4d1 	.word	0x0800b4d1
 800b4a0:	0800b4e1 	.word	0x0800b4e1
 800b4a4:	0800b4e1 	.word	0x0800b4e1
 800b4a8:	0800b4e1 	.word	0x0800b4e1
 800b4ac:	0800b4c9 	.word	0x0800b4c9
 800b4b0:	0800b4e1 	.word	0x0800b4e1
 800b4b4:	0800b4e1 	.word	0x0800b4e1
 800b4b8:	0800b4e1 	.word	0x0800b4e1
 800b4bc:	0800b4d9 	.word	0x0800b4d9
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c6:	e042      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ce:	e03e      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d6:	e03a      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b4d8:	2308      	movs	r3, #8
 800b4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4de:	e036      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e6:	e032      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a43      	ldr	r2, [pc, #268]	; (800b5fc <UART_SetConfig+0x284>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d12a      	bne.n	800b548 <UART_SetConfig+0x1d0>
 800b4f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4f6:	f7ff fad1 	bl	800aa9c <LL_RCC_GetLPUARTClockSource>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b500:	d01a      	beq.n	800b538 <UART_SetConfig+0x1c0>
 800b502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b506:	d81b      	bhi.n	800b540 <UART_SetConfig+0x1c8>
 800b508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b50c:	d00c      	beq.n	800b528 <UART_SetConfig+0x1b0>
 800b50e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b512:	d815      	bhi.n	800b540 <UART_SetConfig+0x1c8>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d003      	beq.n	800b520 <UART_SetConfig+0x1a8>
 800b518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b51c:	d008      	beq.n	800b530 <UART_SetConfig+0x1b8>
 800b51e:	e00f      	b.n	800b540 <UART_SetConfig+0x1c8>
 800b520:	2300      	movs	r3, #0
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b526:	e012      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b528:	2302      	movs	r3, #2
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b52e:	e00e      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b530:	2304      	movs	r3, #4
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b536:	e00a      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b538:	2308      	movs	r3, #8
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b53e:	e006      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b540:	2310      	movs	r3, #16
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b546:	e002      	b.n	800b54e <UART_SetConfig+0x1d6>
 800b548:	2310      	movs	r3, #16
 800b54a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a2a      	ldr	r2, [pc, #168]	; (800b5fc <UART_SetConfig+0x284>)
 800b554:	4293      	cmp	r3, r2
 800b556:	f040 80a4 	bne.w	800b6a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b55a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b55e:	2b08      	cmp	r3, #8
 800b560:	d823      	bhi.n	800b5aa <UART_SetConfig+0x232>
 800b562:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <UART_SetConfig+0x1f0>)
 800b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b568:	0800b58d 	.word	0x0800b58d
 800b56c:	0800b5ab 	.word	0x0800b5ab
 800b570:	0800b595 	.word	0x0800b595
 800b574:	0800b5ab 	.word	0x0800b5ab
 800b578:	0800b59b 	.word	0x0800b59b
 800b57c:	0800b5ab 	.word	0x0800b5ab
 800b580:	0800b5ab 	.word	0x0800b5ab
 800b584:	0800b5ab 	.word	0x0800b5ab
 800b588:	0800b5a3 	.word	0x0800b5a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b58c:	f7fd fe76 	bl	800927c <HAL_RCC_GetPCLK1Freq>
 800b590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b592:	e010      	b.n	800b5b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b594:	4b1c      	ldr	r3, [pc, #112]	; (800b608 <UART_SetConfig+0x290>)
 800b596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b598:	e00d      	b.n	800b5b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b59a:	f7fd fdbb 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b59e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b5a0:	e009      	b.n	800b5b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5a8:	e005      	b.n	800b5b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b5b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8137 	beq.w	800b82c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	4a12      	ldr	r2, [pc, #72]	; (800b60c <UART_SetConfig+0x294>)
 800b5c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4413      	add	r3, r2
 800b5dc:	69ba      	ldr	r2, [r7, #24]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d305      	bcc.n	800b5ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d910      	bls.n	800b610 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5f4:	e11a      	b.n	800b82c <UART_SetConfig+0x4b4>
 800b5f6:	bf00      	nop
 800b5f8:	cfff69f3 	.word	0xcfff69f3
 800b5fc:	40008000 	.word	0x40008000
 800b600:	40013800 	.word	0x40013800
 800b604:	40004400 	.word	0x40004400
 800b608:	00f42400 	.word	0x00f42400
 800b60c:	0801f624 	.word	0x0801f624
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	2200      	movs	r2, #0
 800b614:	60bb      	str	r3, [r7, #8]
 800b616:	60fa      	str	r2, [r7, #12]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	4a8e      	ldr	r2, [pc, #568]	; (800b858 <UART_SetConfig+0x4e0>)
 800b61e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b622:	b29b      	uxth	r3, r3
 800b624:	2200      	movs	r2, #0
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b62e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b632:	f7f5 fbab 	bl	8000d8c <__aeabi_uldivmod>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4610      	mov	r0, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	f04f 0300 	mov.w	r3, #0
 800b646:	020b      	lsls	r3, r1, #8
 800b648:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b64c:	0202      	lsls	r2, r0, #8
 800b64e:	6979      	ldr	r1, [r7, #20]
 800b650:	6849      	ldr	r1, [r1, #4]
 800b652:	0849      	lsrs	r1, r1, #1
 800b654:	2000      	movs	r0, #0
 800b656:	460c      	mov	r4, r1
 800b658:	4605      	mov	r5, r0
 800b65a:	eb12 0804 	adds.w	r8, r2, r4
 800b65e:	eb43 0905 	adc.w	r9, r3, r5
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	469a      	mov	sl, r3
 800b66a:	4693      	mov	fp, r2
 800b66c:	4652      	mov	r2, sl
 800b66e:	465b      	mov	r3, fp
 800b670:	4640      	mov	r0, r8
 800b672:	4649      	mov	r1, r9
 800b674:	f7f5 fb8a 	bl	8000d8c <__aeabi_uldivmod>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4613      	mov	r3, r2
 800b67e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b680:	6a3b      	ldr	r3, [r7, #32]
 800b682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b686:	d308      	bcc.n	800b69a <UART_SetConfig+0x322>
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b68e:	d204      	bcs.n	800b69a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6a3a      	ldr	r2, [r7, #32]
 800b696:	60da      	str	r2, [r3, #12]
 800b698:	e0c8      	b.n	800b82c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b6a0:	e0c4      	b.n	800b82c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6aa:	d167      	bne.n	800b77c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b6ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	d828      	bhi.n	800b706 <UART_SetConfig+0x38e>
 800b6b4:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <UART_SetConfig+0x344>)
 800b6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ba:	bf00      	nop
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b6e9 	.word	0x0800b6e9
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	0800b707 	.word	0x0800b707
 800b6cc:	0800b6f7 	.word	0x0800b6f7
 800b6d0:	0800b707 	.word	0x0800b707
 800b6d4:	0800b707 	.word	0x0800b707
 800b6d8:	0800b707 	.word	0x0800b707
 800b6dc:	0800b6ff 	.word	0x0800b6ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e0:	f7fd fdcc 	bl	800927c <HAL_RCC_GetPCLK1Freq>
 800b6e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6e6:	e014      	b.n	800b712 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6e8:	f7fd fdda 	bl	80092a0 <HAL_RCC_GetPCLK2Freq>
 800b6ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6ee:	e010      	b.n	800b712 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6f0:	4b5a      	ldr	r3, [pc, #360]	; (800b85c <UART_SetConfig+0x4e4>)
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6f4:	e00d      	b.n	800b712 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6f6:	f7fd fd0d 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b6fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6fc:	e009      	b.n	800b712 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b704:	e005      	b.n	800b712 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 8089 	beq.w	800b82c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	4a4e      	ldr	r2, [pc, #312]	; (800b858 <UART_SetConfig+0x4e0>)
 800b720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b724:	461a      	mov	r2, r3
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	fbb3 f3f2 	udiv	r3, r3, r2
 800b72c:	005a      	lsls	r2, r3, #1
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	085b      	lsrs	r3, r3, #1
 800b734:	441a      	add	r2, r3
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b73e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	2b0f      	cmp	r3, #15
 800b744:	d916      	bls.n	800b774 <UART_SetConfig+0x3fc>
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b74c:	d212      	bcs.n	800b774 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	b29b      	uxth	r3, r3
 800b752:	f023 030f 	bic.w	r3, r3, #15
 800b756:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	085b      	lsrs	r3, r3, #1
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f003 0307 	and.w	r3, r3, #7
 800b762:	b29a      	uxth	r2, r3
 800b764:	8bfb      	ldrh	r3, [r7, #30]
 800b766:	4313      	orrs	r3, r2
 800b768:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	8bfa      	ldrh	r2, [r7, #30]
 800b770:	60da      	str	r2, [r3, #12]
 800b772:	e05b      	b.n	800b82c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b77a:	e057      	b.n	800b82c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b77c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b780:	2b08      	cmp	r3, #8
 800b782:	d828      	bhi.n	800b7d6 <UART_SetConfig+0x45e>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <UART_SetConfig+0x414>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7b1 	.word	0x0800b7b1
 800b790:	0800b7b9 	.word	0x0800b7b9
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	0800b7d7 	.word	0x0800b7d7
 800b79c:	0800b7c7 	.word	0x0800b7c7
 800b7a0:	0800b7d7 	.word	0x0800b7d7
 800b7a4:	0800b7d7 	.word	0x0800b7d7
 800b7a8:	0800b7d7 	.word	0x0800b7d7
 800b7ac:	0800b7cf 	.word	0x0800b7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b0:	f7fd fd64 	bl	800927c <HAL_RCC_GetPCLK1Freq>
 800b7b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7b6:	e014      	b.n	800b7e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7b8:	f7fd fd72 	bl	80092a0 <HAL_RCC_GetPCLK2Freq>
 800b7bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7be:	e010      	b.n	800b7e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7c0:	4b26      	ldr	r3, [pc, #152]	; (800b85c <UART_SetConfig+0x4e4>)
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7c4:	e00d      	b.n	800b7e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7c6:	f7fd fca5 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b7ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7cc:	e009      	b.n	800b7e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7d4:	e005      	b.n	800b7e2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7e0:	bf00      	nop
    }

    if (pclk != 0U)
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d021      	beq.n	800b82c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	4a1a      	ldr	r2, [pc, #104]	; (800b858 <UART_SetConfig+0x4e0>)
 800b7ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	085b      	lsrs	r3, r3, #1
 800b800:	441a      	add	r2, r3
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b0f      	cmp	r3, #15
 800b810:	d909      	bls.n	800b826 <UART_SetConfig+0x4ae>
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b818:	d205      	bcs.n	800b826 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60da      	str	r2, [r3, #12]
 800b824:	e002      	b.n	800b82c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	2201      	movs	r2, #1
 800b830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2201      	movs	r2, #1
 800b838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2200      	movs	r2, #0
 800b840:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2200      	movs	r2, #0
 800b846:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b848:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3730      	adds	r7, #48	; 0x30
 800b850:	46bd      	mov	sp, r7
 800b852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b856:	bf00      	nop
 800b858:	0801f624 	.word	0x0801f624
 800b85c:	00f42400 	.word	0x00f42400

0800b860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00a      	beq.n	800b88a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00a      	beq.n	800b8ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	f003 0308 	and.w	r3, r3, #8
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	430a      	orrs	r2, r1
 800b8ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f4:	f003 0310 	and.w	r3, r3, #16
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00a      	beq.n	800b912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	f003 0320 	and.w	r3, r3, #32
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01a      	beq.n	800b976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b95e:	d10a      	bne.n	800b976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00a      	beq.n	800b998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	605a      	str	r2, [r3, #4]
  }
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bc80      	pop	{r7}
 800b9a0:	4770      	bx	lr

0800b9a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b086      	sub	sp, #24
 800b9a6:	af02      	add	r7, sp, #8
 800b9a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9b2:	f7f7 f92f 	bl	8002c14 <HAL_GetTick>
 800b9b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0308 	and.w	r3, r3, #8
 800b9c2:	2b08      	cmp	r3, #8
 800b9c4:	d10e      	bne.n	800b9e4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f832 	bl	800ba3e <UART_WaitOnFlagUntilTimeout>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e028      	b.n	800ba36 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d10e      	bne.n	800ba10 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f81c 	bl	800ba3e <UART_WaitOnFlagUntilTimeout>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e012      	b.n	800ba36 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b09c      	sub	sp, #112	; 0x70
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	603b      	str	r3, [r7, #0]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba4e:	e0a9      	b.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba56:	f000 80a5 	beq.w	800bba4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba5a:	f7f7 f8db 	bl	8002c14 <HAL_GetTick>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d302      	bcc.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d140      	bne.n	800baf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba84:	667b      	str	r3, [r7, #100]	; 0x64
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba96:	e841 2300 	strex	r3, r2, [r1]
 800ba9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1e6      	bne.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3308      	adds	r3, #8
 800baa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baac:	e853 3f00 	ldrex	r3, [r3]
 800bab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f023 0301 	bic.w	r3, r3, #1
 800bab8:	663b      	str	r3, [r7, #96]	; 0x60
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3308      	adds	r3, #8
 800bac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bac2:	64ba      	str	r2, [r7, #72]	; 0x48
 800bac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e5      	bne.n	800baa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2220      	movs	r2, #32
 800bada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e069      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d051      	beq.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb0e:	d149      	bne.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb38:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e6      	bne.n	800bb1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3308      	adds	r3, #8
 800bb52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f023 0301 	bic.w	r3, r3, #1
 800bb62:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3308      	adds	r3, #8
 800bb6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb6c:	623a      	str	r2, [r7, #32]
 800bb6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	69f9      	ldr	r1, [r7, #28]
 800bb72:	6a3a      	ldr	r2, [r7, #32]
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e5      	bne.n	800bb4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2220      	movs	r2, #32
 800bb84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e010      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	69da      	ldr	r2, [r3, #28]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	4013      	ands	r3, r2
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	bf0c      	ite	eq
 800bbb4:	2301      	moveq	r3, #1
 800bbb6:	2300      	movne	r3, #0
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	461a      	mov	r2, r3
 800bbbc:	79fb      	ldrb	r3, [r7, #7]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	f43f af46 	beq.w	800ba50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3770      	adds	r7, #112	; 0x70
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
	...

0800bbd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b0a3      	sub	sp, #140	; 0x8c
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	88fa      	ldrh	r2, [r7, #6]
 800bbe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	88fa      	ldrh	r2, [r7, #6]
 800bbf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc02:	d10e      	bne.n	800bc22 <UART_Start_Receive_IT+0x52>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d105      	bne.n	800bc18 <UART_Start_Receive_IT+0x48>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc16:	e02d      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	22ff      	movs	r2, #255	; 0xff
 800bc1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc20:	e028      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10d      	bne.n	800bc46 <UART_Start_Receive_IT+0x76>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d104      	bne.n	800bc3c <UART_Start_Receive_IT+0x6c>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	22ff      	movs	r2, #255	; 0xff
 800bc36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc3a:	e01b      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	227f      	movs	r2, #127	; 0x7f
 800bc40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc44:	e016      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc4e:	d10d      	bne.n	800bc6c <UART_Start_Receive_IT+0x9c>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <UART_Start_Receive_IT+0x92>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	227f      	movs	r2, #127	; 0x7f
 800bc5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc60:	e008      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	223f      	movs	r2, #63	; 0x3f
 800bc66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc6a:	e003      	b.n	800bc74 <UART_Start_Receive_IT+0xa4>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2222      	movs	r2, #34	; 0x22
 800bc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	3308      	adds	r3, #8
 800bc8a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc8e:	e853 3f00 	ldrex	r3, [r3]
 800bc92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bc94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc96:	f043 0301 	orr.w	r3, r3, #1
 800bc9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3308      	adds	r3, #8
 800bca4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bca8:	673a      	str	r2, [r7, #112]	; 0x70
 800bcaa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bcae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bcb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e3      	bne.n	800bc84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc4:	d14f      	bne.n	800bd66 <UART_Start_Receive_IT+0x196>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bccc:	88fa      	ldrh	r2, [r7, #6]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d349      	bcc.n	800bd66 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcda:	d107      	bne.n	800bcec <UART_Start_Receive_IT+0x11c>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d103      	bne.n	800bcec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4a46      	ldr	r2, [pc, #280]	; (800be00 <UART_Start_Receive_IT+0x230>)
 800bce8:	675a      	str	r2, [r3, #116]	; 0x74
 800bcea:	e002      	b.n	800bcf2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4a45      	ldr	r2, [pc, #276]	; (800be04 <UART_Start_Receive_IT+0x234>)
 800bcf0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01a      	beq.n	800bd30 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd1e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e4      	bne.n	800bcfa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd46:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd50:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e5      	bne.n	800bd30 <UART_Start_Receive_IT+0x160>
 800bd64:	e046      	b.n	800bdf4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd6e:	d107      	bne.n	800bd80 <UART_Start_Receive_IT+0x1b0>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4a23      	ldr	r2, [pc, #140]	; (800be08 <UART_Start_Receive_IT+0x238>)
 800bd7c:	675a      	str	r2, [r3, #116]	; 0x74
 800bd7e:	e002      	b.n	800bd86 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4a22      	ldr	r2, [pc, #136]	; (800be0c <UART_Start_Receive_IT+0x23c>)
 800bd84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d019      	beq.n	800bdc2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bda2:	677b      	str	r3, [r7, #116]	; 0x74
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
 800bdae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e6      	bne.n	800bd8e <UART_Start_Receive_IT+0x1be>
 800bdc0:	e018      	b.n	800bdf4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	e853 3f00 	ldrex	r3, [r3]
 800bdce:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f043 0320 	orr.w	r3, r3, #32
 800bdd6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	461a      	mov	r2, r3
 800bdde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bde0:	623b      	str	r3, [r7, #32]
 800bde2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde4:	69f9      	ldr	r1, [r7, #28]
 800bde6:	6a3a      	ldr	r2, [r7, #32]
 800bde8:	e841 2300 	strex	r3, r2, [r1]
 800bdec:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e6      	bne.n	800bdc2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	378c      	adds	r7, #140	; 0x8c
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bc80      	pop	{r7}
 800bdfe:	4770      	bx	lr
 800be00:	0800c7e5 	.word	0x0800c7e5
 800be04:	0800c485 	.word	0x0800c485
 800be08:	0800c2cd 	.word	0x0800c2cd
 800be0c:	0800c115 	.word	0x0800c115

0800be10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b08f      	sub	sp, #60	; 0x3c
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	61fb      	str	r3, [r7, #28]
   return(result);
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e6      	bne.n	800be18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3308      	adds	r3, #8
 800be50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	60bb      	str	r3, [r7, #8]
   return(result);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be60:	633b      	str	r3, [r7, #48]	; 0x30
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	61ba      	str	r2, [r7, #24]
 800be6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6979      	ldr	r1, [r7, #20]
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	613b      	str	r3, [r7, #16]
   return(result);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2220      	movs	r2, #32
 800be82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800be86:	bf00      	nop
 800be88:	373c      	adds	r7, #60	; 0x3c
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b095      	sub	sp, #84	; 0x54
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb6:	643b      	str	r3, [r7, #64]	; 0x40
 800beb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e6      	bne.n	800be98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3308      	adds	r3, #8
 800bed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	61fb      	str	r3, [r7, #28]
   return(result);
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e3      	bne.n	800beca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d118      	bne.n	800bf3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	f023 0310 	bic.w	r3, r3, #16
 800bf1e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf28:	61bb      	str	r3, [r7, #24]
 800bf2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2c:	6979      	ldr	r1, [r7, #20]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	e841 2300 	strex	r3, r2, [r1]
 800bf34:	613b      	str	r3, [r7, #16]
   return(result);
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e6      	bne.n	800bf0a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bf50:	bf00      	nop
 800bf52:	3754      	adds	r7, #84	; 0x54
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr

0800bf5a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b090      	sub	sp, #64	; 0x40
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d137      	bne.n	800bfe6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	e853 3f00 	ldrex	r3, [r3]
 800bf8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf9e:	633a      	str	r2, [r7, #48]	; 0x30
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa6:	e841 2300 	strex	r3, r2, [r1]
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1e5      	bne.n	800bf7e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	69b9      	ldr	r1, [r7, #24]
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	617b      	str	r3, [r7, #20]
   return(result);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e6      	bne.n	800bfb2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfe4:	e002      	b.n	800bfec <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bfe6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfe8:	f7f7 fc02 	bl	80037f0 <HAL_UART_TxCpltCallback>
}
 800bfec:	bf00      	nop
 800bfee:	3740      	adds	r7, #64	; 0x40
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c000:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7ff f99a 	bl	800b33c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c008:	bf00      	nop
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c024:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c038:	2b80      	cmp	r3, #128	; 0x80
 800c03a:	d109      	bne.n	800c050 <UART_DMAError+0x40>
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	2b21      	cmp	r3, #33	; 0x21
 800c040:	d106      	bne.n	800c050 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2200      	movs	r2, #0
 800c046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c04a:	6978      	ldr	r0, [r7, #20]
 800c04c:	f7ff fee0 	bl	800be10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05a:	2b40      	cmp	r3, #64	; 0x40
 800c05c:	d109      	bne.n	800c072 <UART_DMAError+0x62>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b22      	cmp	r3, #34	; 0x22
 800c062:	d106      	bne.n	800c072 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2200      	movs	r2, #0
 800c068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c06c:	6978      	ldr	r0, [r7, #20]
 800c06e:	f7ff ff0f 	bl	800be90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c078:	f043 0210 	orr.w	r2, r3, #16
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c082:	6978      	ldr	r0, [r7, #20]
 800c084:	f7ff f963 	bl	800b34e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c088:	bf00      	nop
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff f94d 	bl	800b34e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0b4:	bf00      	nop
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	e853 3f00 	ldrex	r3, [r3]
 800c0d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	61bb      	str	r3, [r7, #24]
 800c0e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e6:	6979      	ldr	r1, [r7, #20]
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	e841 2300 	strex	r3, r2, [r1]
 800c0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1e6      	bne.n	800c0c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2220      	movs	r2, #32
 800c0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7f7 fb73 	bl	80037f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c10a:	bf00      	nop
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b09c      	sub	sp, #112	; 0x70
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c122:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12c:	2b22      	cmp	r3, #34	; 0x22
 800c12e:	f040 80be 	bne.w	800c2ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c13c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c140:	b2d9      	uxtb	r1, r3
 800c142:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c146:	b2da      	uxtb	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c14c:	400a      	ands	r2, r1
 800c14e:	b2d2      	uxtb	r2, r2
 800c150:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b01      	subs	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c174:	b29b      	uxth	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	f040 80a1 	bne.w	800c2be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c18c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c190:	66bb      	str	r3, [r7, #104]	; 0x68
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c19a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c19c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1a2:	e841 2300 	strex	r3, r2, [r1]
 800c1a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e6      	bne.n	800c17c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	e853 3f00 	ldrex	r3, [r3]
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c0:	f023 0301 	bic.w	r3, r3, #1
 800c1c4:	667b      	str	r3, [r7, #100]	; 0x64
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3308      	adds	r3, #8
 800c1cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ce:	647a      	str	r2, [r7, #68]	; 0x44
 800c1d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1d6:	e841 2300 	strex	r3, r2, [r1]
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e5      	bne.n	800c1ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a33      	ldr	r2, [pc, #204]	; (800c2c8 <UART_RxISR_8BIT+0x1b4>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d01f      	beq.n	800c240 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d018      	beq.n	800c240 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	623b      	str	r3, [r7, #32]
   return(result);
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c222:	663b      	str	r3, [r7, #96]	; 0x60
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c22c:	633b      	str	r3, [r7, #48]	; 0x30
 800c22e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e6      	bne.n	800c20e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d12e      	bne.n	800c2a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f023 0310 	bic.w	r3, r3, #16
 800c262:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	461a      	mov	r2, r3
 800c26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c26c:	61fb      	str	r3, [r7, #28]
 800c26e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c270:	69b9      	ldr	r1, [r7, #24]
 800c272:	69fa      	ldr	r2, [r7, #28]
 800c274:	e841 2300 	strex	r3, r2, [r1]
 800c278:	617b      	str	r3, [r7, #20]
   return(result);
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1e6      	bne.n	800c24e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	f003 0310 	and.w	r3, r3, #16
 800c28a:	2b10      	cmp	r3, #16
 800c28c:	d103      	bne.n	800c296 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2210      	movs	r2, #16
 800c294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7ff f85e 	bl	800b360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2a4:	e00b      	b.n	800c2be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7f7 fab8 	bl	800381c <HAL_UART_RxCpltCallback>
}
 800c2ac:	e007      	b.n	800c2be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	699a      	ldr	r2, [r3, #24]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0208 	orr.w	r2, r2, #8
 800c2bc:	619a      	str	r2, [r3, #24]
}
 800c2be:	bf00      	nop
 800c2c0:	3770      	adds	r7, #112	; 0x70
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	40008000 	.word	0x40008000

0800c2cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b09c      	sub	sp, #112	; 0x70
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e4:	2b22      	cmp	r3, #34	; 0x22
 800c2e6:	f040 80be 	bne.w	800c466 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c2fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c302:	4013      	ands	r3, r2
 800c304:	b29a      	uxth	r2, r3
 800c306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	1c9a      	adds	r2, r3, #2
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	3b01      	subs	r3, #1
 800c31e:	b29a      	uxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f040 80a1 	bne.w	800c476 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c348:	667b      	str	r3, [r7, #100]	; 0x64
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c352:	657b      	str	r3, [r7, #84]	; 0x54
 800c354:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c35a:	e841 2300 	strex	r3, r2, [r1]
 800c35e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e6      	bne.n	800c334 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3308      	adds	r3, #8
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	f023 0301 	bic.w	r3, r3, #1
 800c37c:	663b      	str	r3, [r7, #96]	; 0x60
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3308      	adds	r3, #8
 800c384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c386:	643a      	str	r2, [r7, #64]	; 0x40
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c38c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e5      	bne.n	800c366 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a33      	ldr	r2, [pc, #204]	; (800c480 <UART_RxISR_16BIT+0x1b4>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d01f      	beq.n	800c3f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d018      	beq.n	800c3f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	e853 3f00 	ldrex	r3, [r3]
 800c3d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ec:	e841 2300 	strex	r3, r2, [r1]
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e6      	bne.n	800c3c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d12e      	bne.n	800c45e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	e853 3f00 	ldrex	r3, [r3]
 800c412:	60bb      	str	r3, [r7, #8]
   return(result);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f023 0310 	bic.w	r3, r3, #16
 800c41a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c424:	61bb      	str	r3, [r7, #24]
 800c426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	6979      	ldr	r1, [r7, #20]
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	613b      	str	r3, [r7, #16]
   return(result);
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e6      	bne.n	800c406 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	f003 0310 	and.w	r3, r3, #16
 800c442:	2b10      	cmp	r3, #16
 800c444:	d103      	bne.n	800c44e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2210      	movs	r2, #16
 800c44c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7fe ff82 	bl	800b360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c45c:	e00b      	b.n	800c476 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7f7 f9dc 	bl	800381c <HAL_UART_RxCpltCallback>
}
 800c464:	e007      	b.n	800c476 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	699a      	ldr	r2, [r3, #24]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f042 0208 	orr.w	r2, r2, #8
 800c474:	619a      	str	r2, [r3, #24]
}
 800c476:	bf00      	nop
 800c478:	3770      	adds	r7, #112	; 0x70
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	40008000 	.word	0x40008000

0800c484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b0ac      	sub	sp, #176	; 0xb0
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c492:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	69db      	ldr	r3, [r3, #28]
 800c49c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ba:	2b22      	cmp	r3, #34	; 0x22
 800c4bc:	f040 8182 	bne.w	800c7c4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4ca:	e125      	b.n	800c718 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c4da:	b2d9      	uxtb	r1, r3
 800c4dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e6:	400a      	ands	r2, r1
 800c4e8:	b2d2      	uxtb	r2, r2
 800c4ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	3b01      	subs	r3, #1
 800c500:	b29a      	uxth	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d053      	beq.n	800c5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d011      	beq.n	800c54e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c52a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2201      	movs	r2, #1
 800c53c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c544:	f043 0201 	orr.w	r2, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d011      	beq.n	800c57e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c55a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00b      	beq.n	800c57e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2202      	movs	r2, #2
 800c56c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c574:	f043 0204 	orr.w	r2, r3, #4
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c582:	f003 0304 	and.w	r3, r3, #4
 800c586:	2b00      	cmp	r3, #0
 800c588:	d011      	beq.n	800c5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00b      	beq.n	800c5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2204      	movs	r2, #4
 800c59c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a4:	f043 0202 	orr.w	r2, r3, #2
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d006      	beq.n	800c5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7fe fec8 	bl	800b34e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 80a2 	bne.w	800c718 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c5fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e4      	bne.n	800c5d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3308      	adds	r3, #8
 800c610:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c61c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c620:	f023 0301 	bic.w	r3, r3, #1
 800c624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3308      	adds	r3, #8
 800c62e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c632:	66ba      	str	r2, [r7, #104]	; 0x68
 800c634:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c638:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c63a:	e841 2300 	strex	r3, r2, [r1]
 800c63e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e1      	bne.n	800c60a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a5f      	ldr	r2, [pc, #380]	; (800c7dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d021      	beq.n	800c6a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01a      	beq.n	800c6a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c694:	657b      	str	r3, [r7, #84]	; 0x54
 800c696:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c69a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c69c:	e841 2300 	strex	r3, r2, [r1]
 800c6a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e4      	bne.n	800c672 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d130      	bne.n	800c712 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	f023 0310 	bic.w	r3, r3, #16
 800c6ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c6da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1e4      	bne.n	800c6b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	f003 0310 	and.w	r3, r3, #16
 800c6f6:	2b10      	cmp	r3, #16
 800c6f8:	d103      	bne.n	800c702 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2210      	movs	r2, #16
 800c700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c708:	4619      	mov	r1, r3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7fe fe28 	bl	800b360 <HAL_UARTEx_RxEventCallback>
 800c710:	e002      	b.n	800c718 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7f7 f882 	bl	800381c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c718:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d006      	beq.n	800c72e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c724:	f003 0320 	and.w	r3, r3, #32
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f47f aecf 	bne.w	800c4cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c734:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c738:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d049      	beq.n	800c7d4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c746:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d242      	bcs.n	800c7d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3308      	adds	r3, #8
 800c754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3308      	adds	r3, #8
 800c76e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c772:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e3      	bne.n	800c74e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a15      	ldr	r2, [pc, #84]	; (800c7e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c78a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	60bb      	str	r3, [r7, #8]
   return(result);
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f043 0320 	orr.w	r3, r3, #32
 800c7a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7ae:	61bb      	str	r3, [r7, #24]
 800c7b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b2:	6979      	ldr	r1, [r7, #20]
 800c7b4:	69ba      	ldr	r2, [r7, #24]
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1e4      	bne.n	800c78c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7c2:	e007      	b.n	800c7d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	699a      	ldr	r2, [r3, #24]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f042 0208 	orr.w	r2, r2, #8
 800c7d2:	619a      	str	r2, [r3, #24]
}
 800c7d4:	bf00      	nop
 800c7d6:	37b0      	adds	r7, #176	; 0xb0
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	40008000 	.word	0x40008000
 800c7e0:	0800c115 	.word	0x0800c115

0800c7e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b0ae      	sub	sp, #184	; 0xb8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c81a:	2b22      	cmp	r3, #34	; 0x22
 800c81c:	f040 8186 	bne.w	800cb2c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c826:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c82a:	e129      	b.n	800ca80 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c83e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c842:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c846:	4013      	ands	r3, r2
 800c848:	b29a      	uxth	r2, r3
 800c84a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c84e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c854:	1c9a      	adds	r2, r3, #2
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	b29a      	uxth	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c87a:	f003 0307 	and.w	r3, r3, #7
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d053      	beq.n	800c92a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d011      	beq.n	800c8b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c88e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00b      	beq.n	800c8b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8a8:	f043 0201 	orr.w	r2, r3, #1
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d011      	beq.n	800c8e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c8be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00b      	beq.n	800c8e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8d8:	f043 0204 	orr.w	r2, r3, #4
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8e6:	f003 0304 	and.w	r3, r3, #4
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d011      	beq.n	800c912 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c8ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00b      	beq.n	800c912 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2204      	movs	r2, #4
 800c900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c908:	f043 0202 	orr.w	r2, r3, #2
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d006      	beq.n	800c92a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7fe fd16 	bl	800b34e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c930:	b29b      	uxth	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	f040 80a4 	bne.w	800ca80 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c94c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	461a      	mov	r2, r3
 800c956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c95a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c95e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c966:	e841 2300 	strex	r3, r2, [r1]
 800c96a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1e2      	bne.n	800c938 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c97c:	e853 3f00 	ldrex	r3, [r3]
 800c980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c988:	f023 0301 	bic.w	r3, r3, #1
 800c98c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3308      	adds	r3, #8
 800c996:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c99a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c99c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e1      	bne.n	800c972 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2220      	movs	r2, #32
 800c9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a5f      	ldr	r2, [pc, #380]	; (800cb44 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d021      	beq.n	800ca10 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01a      	beq.n	800ca10 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e4      	bne.n	800c9da <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d130      	bne.n	800ca7a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	e853 3f00 	ldrex	r3, [r3]
 800ca2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2e:	f023 0310 	bic.w	r3, r3, #16
 800ca32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca40:	647b      	str	r3, [r7, #68]	; 0x44
 800ca42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca48:	e841 2300 	strex	r3, r2, [r1]
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e4      	bne.n	800ca1e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	f003 0310 	and.w	r3, r3, #16
 800ca5e:	2b10      	cmp	r3, #16
 800ca60:	d103      	bne.n	800ca6a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2210      	movs	r2, #16
 800ca68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7fe fc74 	bl	800b360 <HAL_UARTEx_RxEventCallback>
 800ca78:	e002      	b.n	800ca80 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7f6 fece 	bl	800381c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca80:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d006      	beq.n	800ca96 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800ca88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca8c:	f003 0320 	and.w	r3, r3, #32
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f47f aecb 	bne.w	800c82c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca9c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800caa0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d049      	beq.n	800cb3c <UART_RxISR_16BIT_FIFOEN+0x358>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800caae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d242      	bcs.n	800cb3c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3308      	adds	r3, #8
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	e853 3f00 	ldrex	r3, [r3]
 800cac4:	623b      	str	r3, [r7, #32]
   return(result);
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cacc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3308      	adds	r3, #8
 800cad6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cada:	633a      	str	r2, [r7, #48]	; 0x30
 800cadc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae2:	e841 2300 	strex	r3, r2, [r1]
 800cae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e3      	bne.n	800cab6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800caf2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f043 0320 	orr.w	r3, r3, #32
 800cb08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	461a      	mov	r2, r3
 800cb12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	69b9      	ldr	r1, [r7, #24]
 800cb1c:	69fa      	ldr	r2, [r7, #28]
 800cb1e:	e841 2300 	strex	r3, r2, [r1]
 800cb22:	617b      	str	r3, [r7, #20]
   return(result);
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1e4      	bne.n	800caf4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb2a:	e007      	b.n	800cb3c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	699a      	ldr	r2, [r3, #24]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f042 0208 	orr.w	r2, r2, #8
 800cb3a:	619a      	str	r2, [r3, #24]
}
 800cb3c:	bf00      	nop
 800cb3e:	37b8      	adds	r7, #184	; 0xb8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	40008000 	.word	0x40008000
 800cb48:	0800c2cd 	.word	0x0800c2cd

0800cb4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bc80      	pop	{r7}
 800cb5c:	4770      	bx	lr

0800cb5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb66:	bf00      	nop
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bc80      	pop	{r7}
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bc80      	pop	{r7}
 800cb80:	4770      	bx	lr

0800cb82 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	1d3b      	adds	r3, r7, #4
 800cb8c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d101      	bne.n	800cba2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cb9e:	2302      	movs	r3, #2
 800cba0:	e046      	b.n	800cc30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2224      	movs	r2, #36	; 0x24
 800cbae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0201 	bic.w	r2, r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d105      	bne.n	800cbe8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cbdc:	1d3b      	adds	r3, r7, #4
 800cbde:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 fa4b 	bl	800d07e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f042 0201 	orr.w	r2, r2, #1
 800cbf6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbf8:	f7f6 f80c 	bl	8002c14 <HAL_GetTick>
 800cbfc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7fe ff16 	bl	800ba3e <UART_WaitOnFlagUntilTimeout>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	75fb      	strb	r3, [r7, #23]
 800cc1c:	e003      	b.n	800cc26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b089      	sub	sp, #36	; 0x24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d101      	bne.n	800cc4e <HAL_UARTEx_EnableStopMode+0x16>
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	e021      	b.n	800cc92 <HAL_UARTEx_EnableStopMode+0x5a>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f043 0302 	orr.w	r3, r3, #2
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	61bb      	str	r3, [r7, #24]
 800cc76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6979      	ldr	r1, [r7, #20]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	613b      	str	r3, [r7, #16]
   return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e6      	bne.n	800cc56 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3724      	adds	r7, #36	; 0x24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bc80      	pop	{r7}
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d101      	bne.n	800ccb2 <HAL_UARTEx_EnableFifoMode+0x16>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e02b      	b.n	800cd0a <HAL_UARTEx_EnableFifoMode+0x6e>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2224      	movs	r2, #36	; 0x24
 800ccbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f022 0201 	bic.w	r2, r2, #1
 800ccd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cce8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f9e6 	bl	800d0c4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d101      	bne.n	800cd28 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd24:	2302      	movs	r3, #2
 800cd26:	e027      	b.n	800cd78 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2224      	movs	r2, #36	; 0x24
 800cd34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 0201 	bic.w	r2, r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2220      	movs	r2, #32
 800cd6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bc80      	pop	{r7}
 800cd80:	4770      	bx	lr

0800cd82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd96:	2302      	movs	r3, #2
 800cd98:	e02d      	b.n	800cdf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2224      	movs	r2, #36	; 0x24
 800cda6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f022 0201 	bic.w	r2, r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	430a      	orrs	r2, r1
 800cdd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f974 	bl	800d0c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2220      	movs	r2, #32
 800cde8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d101      	bne.n	800ce16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce12:	2302      	movs	r3, #2
 800ce14:	e02d      	b.n	800ce72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2224      	movs	r2, #36	; 0x24
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 0201 	bic.w	r2, r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	430a      	orrs	r2, r1
 800ce50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f936 	bl	800d0c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2220      	movs	r2, #32
 800ce64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b088      	sub	sp, #32
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60f8      	str	r0, [r7, #12]
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	603b      	str	r3, [r7, #0]
 800ce86:	4613      	mov	r3, r2
 800ce88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce90:	2b20      	cmp	r3, #32
 800ce92:	f040 80ef 	bne.w	800d074 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <HAL_UARTEx_ReceiveToIdle+0x28>
 800ce9c:	88fb      	ldrh	r3, [r7, #6]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e0e7      	b.n	800d076 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2222      	movs	r2, #34	; 0x22
 800ceb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cec2:	f7f5 fea7 	bl	8002c14 <HAL_GetTick>
 800cec6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	88fa      	ldrh	r2, [r7, #6]
 800cecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	88fa      	ldrh	r2, [r7, #6]
 800ced4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cee0:	d10e      	bne.n	800cf00 <HAL_UARTEx_ReceiveToIdle+0x86>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cef4:	e02d      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	22ff      	movs	r2, #255	; 0xff
 800cefa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cefe:	e028      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10d      	bne.n	800cf24 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <HAL_UARTEx_ReceiveToIdle+0xa0>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	22ff      	movs	r2, #255	; 0xff
 800cf14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf18:	e01b      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	227f      	movs	r2, #127	; 0x7f
 800cf1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf22:	e016      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf2c:	d10d      	bne.n	800cf4a <HAL_UARTEx_ReceiveToIdle+0xd0>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d104      	bne.n	800cf40 <HAL_UARTEx_ReceiveToIdle+0xc6>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	227f      	movs	r2, #127	; 0x7f
 800cf3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf3e:	e008      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	223f      	movs	r2, #63	; 0x3f
 800cf44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf48:	e003      	b.n	800cf52 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf58:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf62:	d108      	bne.n	800cf76 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d104      	bne.n	800cf76 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	61bb      	str	r3, [r7, #24]
 800cf74:	e003      	b.n	800cf7e <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2200      	movs	r2, #0
 800cf82:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cf84:	e05f      	b.n	800d046 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f003 0310 	and.w	r3, r3, #16
 800cf90:	2b10      	cmp	r3, #16
 800cf92:	d110      	bne.n	800cfb6 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2210      	movs	r2, #16
 800cf9a:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2220      	movs	r2, #32
 800cfae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e05f      	b.n	800d076 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69db      	ldr	r3, [r3, #28]
 800cfbc:	f003 0320 	and.w	r3, r3, #32
 800cfc0:	2b20      	cmp	r3, #32
 800cfc2:	d12b      	bne.n	800d01c <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10c      	bne.n	800cfe4 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	8a7b      	ldrh	r3, [r7, #18]
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	3302      	adds	r3, #2
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	e00c      	b.n	800cffe <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	8a7b      	ldrh	r3, [r7, #18]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	4013      	ands	r3, r2
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	3301      	adds	r3, #1
 800cffc:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	b29a      	uxth	r2, r3
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d010:	b29b      	uxth	r3, r3
 800d012:	3b01      	subs	r3, #1
 800d014:	b29a      	uxth	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d010      	beq.n	800d046 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d024:	f7f5 fdf6 	bl	8002c14 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d030:	429a      	cmp	r2, r3
 800d032:	d302      	bcc.n	800d03a <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e017      	b.n	800d076 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d199      	bne.n	800cf86 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d05e:	b29b      	uxth	r3, r3
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	b29a      	uxth	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2220      	movs	r2, #32
 800d06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	e000      	b.n	800d076 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800d074:	2302      	movs	r3, #2
  }
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d07e:	b480      	push	{r7}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	60f8      	str	r0, [r7, #12]
 800d086:	1d3b      	adds	r3, r7, #4
 800d088:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f023 0210 	bic.w	r2, r3, #16
 800d096:	893b      	ldrh	r3, [r7, #8]
 800d098:	4619      	mov	r1, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d0ac:	7abb      	ldrb	r3, [r7, #10]
 800d0ae:	061a      	lsls	r2, r3, #24
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	430a      	orrs	r2, r1
 800d0b6:	605a      	str	r2, [r3, #4]
}
 800d0b8:	bf00      	nop
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bc80      	pop	{r7}
 800d0c0:	4770      	bx	lr
	...

0800d0c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d108      	bne.n	800d0e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0e4:	e031      	b.n	800d14a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0ea:	2308      	movs	r3, #8
 800d0ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	0e5b      	lsrs	r3, r3, #25
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	f003 0307 	and.w	r3, r3, #7
 800d0fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	0f5b      	lsrs	r3, r3, #29
 800d106:	b2db      	uxtb	r3, r3
 800d108:	f003 0307 	and.w	r3, r3, #7
 800d10c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	7b3a      	ldrb	r2, [r7, #12]
 800d112:	4910      	ldr	r1, [pc, #64]	; (800d154 <UARTEx_SetNbDataToProcess+0x90>)
 800d114:	5c8a      	ldrb	r2, [r1, r2]
 800d116:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d11a:	7b3a      	ldrb	r2, [r7, #12]
 800d11c:	490e      	ldr	r1, [pc, #56]	; (800d158 <UARTEx_SetNbDataToProcess+0x94>)
 800d11e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d120:	fb93 f3f2 	sdiv	r3, r3, r2
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	7b7a      	ldrb	r2, [r7, #13]
 800d130:	4908      	ldr	r1, [pc, #32]	; (800d154 <UARTEx_SetNbDataToProcess+0x90>)
 800d132:	5c8a      	ldrb	r2, [r1, r2]
 800d134:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d138:	7b7a      	ldrb	r2, [r7, #13]
 800d13a:	4907      	ldr	r1, [pc, #28]	; (800d158 <UARTEx_SetNbDataToProcess+0x94>)
 800d13c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d13e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d14a:	bf00      	nop
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	bc80      	pop	{r7}
 800d152:	4770      	bx	lr
 800d154:	0801f63c 	.word	0x0801f63c
 800d158:	0801f644 	.word	0x0801f644

0800d15c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d160:	f7f5 fbf8 	bl	8002954 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d164:	f000 f820 	bl	800d1a8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d168:	bf00      	nop
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d170:	f04f 30ff 	mov.w	r0, #4294967295
 800d174:	f010 fdbc 	bl	801dcf0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d178:	bf00      	nop
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d180:	f3bf 8f4f 	dsb	sy
}
 800d184:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d186:	4b06      	ldr	r3, [pc, #24]	; (800d1a0 <__NVIC_SystemReset+0x24>)
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d18e:	4904      	ldr	r1, [pc, #16]	; (800d1a0 <__NVIC_SystemReset+0x24>)
 800d190:	4b04      	ldr	r3, [pc, #16]	; (800d1a4 <__NVIC_SystemReset+0x28>)
 800d192:	4313      	orrs	r3, r2
 800d194:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d196:	f3bf 8f4f 	dsb	sy
}
 800d19a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d19c:	bf00      	nop
 800d19e:	e7fd      	b.n	800d19c <__NVIC_SystemReset+0x20>
 800d1a0:	e000ed00 	.word	0xe000ed00
 800d1a4:	05fa0004 	.word	0x05fa0004

0800d1a8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	4b59      	ldr	r3, [pc, #356]	; (800d324 <LoRaWAN_Init+0x17c>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	2002      	movs	r0, #2
 800d1c6:	f011 f9e1 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9302      	str	r3, [sp, #8]
 800d1ce:	2305      	movs	r3, #5
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	4b54      	ldr	r3, [pc, #336]	; (800d328 <LoRaWAN_Init+0x180>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	2002      	movs	r0, #2
 800d1de:	f011 f9d5 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9302      	str	r3, [sp, #8]
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	9301      	str	r3, [sp, #4]
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	4b4f      	ldr	r3, [pc, #316]	; (800d32c <LoRaWAN_Init+0x184>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	2002      	movs	r0, #2
 800d1f6:	f011 f9c9 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d1fa:	1d3b      	adds	r3, r7, #4
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	2000      	movs	r0, #0
 800d200:	f003 f97a 	bl	80104f8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	0e1b      	lsrs	r3, r3, #24
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	461a      	mov	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	b2db      	uxtb	r3, r3
 800d212:	4619      	mov	r1, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	9302      	str	r3, [sp, #8]
 800d21c:	9101      	str	r1, [sp, #4]
 800d21e:	9200      	str	r2, [sp, #0]
 800d220:	4b43      	ldr	r3, [pc, #268]	; (800d330 <LoRaWAN_Init+0x188>)
 800d222:	2200      	movs	r2, #0
 800d224:	2100      	movs	r1, #0
 800d226:	2002      	movs	r0, #2
 800d228:	f011 f9b0 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d22c:	1d3b      	adds	r3, r7, #4
 800d22e:	4619      	mov	r1, r3
 800d230:	2001      	movs	r0, #1
 800d232:	f003 f961 	bl	80104f8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	0e1b      	lsrs	r3, r3, #24
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	461a      	mov	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	0c1b      	lsrs	r3, r3, #16
 800d242:	b2db      	uxtb	r3, r3
 800d244:	4619      	mov	r1, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	0a1b      	lsrs	r3, r3, #8
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	b2c0      	uxtb	r0, r0
 800d250:	9003      	str	r0, [sp, #12]
 800d252:	9302      	str	r3, [sp, #8]
 800d254:	9101      	str	r1, [sp, #4]
 800d256:	9200      	str	r2, [sp, #0]
 800d258:	4b36      	ldr	r3, [pc, #216]	; (800d334 <LoRaWAN_Init+0x18c>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	2100      	movs	r1, #0
 800d25e:	2002      	movs	r0, #2
 800d260:	f011 f994 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d264:	2300      	movs	r3, #0
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4b33      	ldr	r3, [pc, #204]	; (800d338 <LoRaWAN_Init+0x190>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d270:	4832      	ldr	r0, [pc, #200]	; (800d33c <LoRaWAN_Init+0x194>)
 800d272:	f010 fedd 	bl	801e030 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d276:	2300      	movs	r3, #0
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	4b31      	ldr	r3, [pc, #196]	; (800d340 <LoRaWAN_Init+0x198>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d282:	4830      	ldr	r0, [pc, #192]	; (800d344 <LoRaWAN_Init+0x19c>)
 800d284:	f010 fed4 	bl	801e030 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d288:	2300      	movs	r3, #0
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	4b2e      	ldr	r3, [pc, #184]	; (800d348 <LoRaWAN_Init+0x1a0>)
 800d28e:	2201      	movs	r2, #1
 800d290:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d294:	482d      	ldr	r0, [pc, #180]	; (800d34c <LoRaWAN_Init+0x1a4>)
 800d296:	f010 fecb 	bl	801e030 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d29a:	2300      	movs	r3, #0
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	4b2c      	ldr	r3, [pc, #176]	; (800d350 <LoRaWAN_Init+0x1a8>)
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d2a6:	482b      	ldr	r0, [pc, #172]	; (800d354 <LoRaWAN_Init+0x1ac>)
 800d2a8:	f010 fec2 	bl	801e030 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d2ac:	4a2a      	ldr	r2, [pc, #168]	; (800d358 <LoRaWAN_Init+0x1b0>)
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f010 fe19 	bl	801dee8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d2b6:	4a29      	ldr	r2, [pc, #164]	; (800d35c <LoRaWAN_Init+0x1b4>)
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	2002      	movs	r0, #2
 800d2bc:	f010 fe14 	bl	801dee8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d2c0:	4a27      	ldr	r2, [pc, #156]	; (800d360 <LoRaWAN_Init+0x1b8>)
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	2004      	movs	r0, #4
 800d2c6:	f010 fe0f 	bl	801dee8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d2ca:	4a26      	ldr	r2, [pc, #152]	; (800d364 <LoRaWAN_Init+0x1bc>)
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	2008      	movs	r0, #8
 800d2d0:	f010 fe0a 	bl	801dee8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d2d4:	f000 fcfc 	bl	800dcd0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d2d8:	4923      	ldr	r1, [pc, #140]	; (800d368 <LoRaWAN_Init+0x1c0>)
 800d2da:	4824      	ldr	r0, [pc, #144]	; (800d36c <LoRaWAN_Init+0x1c4>)
 800d2dc:	f002 fa22 	bl	800f724 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d2e0:	4823      	ldr	r0, [pc, #140]	; (800d370 <LoRaWAN_Init+0x1c8>)
 800d2e2:	f002 fa7b 	bl	800f7dc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d2e6:	4819      	ldr	r0, [pc, #100]	; (800d34c <LoRaWAN_Init+0x1a4>)
 800d2e8:	f010 fed8 	bl	801e09c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d2ec:	4b21      	ldr	r3, [pc, #132]	; (800d374 <LoRaWAN_Init+0x1cc>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	4a21      	ldr	r2, [pc, #132]	; (800d378 <LoRaWAN_Init+0x1d0>)
 800d2f2:	7812      	ldrb	r2, [r2, #0]
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f002 fb3e 	bl	800f978 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d2fc:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <LoRaWAN_Init+0x1d4>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10b      	bne.n	800d31c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d304:	4b1e      	ldr	r3, [pc, #120]	; (800d380 <LoRaWAN_Init+0x1d8>)
 800d306:	6819      	ldr	r1, [r3, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <LoRaWAN_Init+0x1dc>)
 800d30e:	2200      	movs	r2, #0
 800d310:	481d      	ldr	r0, [pc, #116]	; (800d388 <LoRaWAN_Init+0x1e0>)
 800d312:	f010 fe8d 	bl	801e030 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d316:	481c      	ldr	r0, [pc, #112]	; (800d388 <LoRaWAN_Init+0x1e0>)
 800d318:	f010 fec0 	bl	801e09c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	0801ed00 	.word	0x0801ed00
 800d328:	0801ed24 	.word	0x0801ed24
 800d32c:	0801ed44 	.word	0x0801ed44
 800d330:	0801ed64 	.word	0x0801ed64
 800d334:	0801ed88 	.word	0x0801ed88
 800d338:	0800d7f9 	.word	0x0800d7f9
 800d33c:	20000730 	.word	0x20000730
 800d340:	0800d80b 	.word	0x0800d80b
 800d344:	20000748 	.word	0x20000748
 800d348:	0800d81d 	.word	0x0800d81d
 800d34c:	20000760 	.word	0x20000760
 800d350:	0800dbd1 	.word	0x0800dbd1
 800d354:	20000624 	.word	0x20000624
 800d358:	0800f94d 	.word	0x0800f94d
 800d35c:	0800d4d5 	.word	0x0800d4d5
 800d360:	0800dbf5 	.word	0x0800dbf5
 800d364:	0800db51 	.word	0x0800db51
 800d368:	01030000 	.word	0x01030000
 800d36c:	2000002c 	.word	0x2000002c
 800d370:	20000078 	.word	0x20000078
 800d374:	20000028 	.word	0x20000028
 800d378:	20000029 	.word	0x20000029
 800d37c:	20000608 	.word	0x20000608
 800d380:	20000090 	.word	0x20000090
 800d384:	0800d7d5 	.word	0x0800d7d5
 800d388:	2000060c 	.word	0x2000060c

0800d38c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d38c:	b5b0      	push	{r4, r5, r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af06      	add	r7, sp, #24
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 8086 	beq.w	800d4ae <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d3a2:	4845      	ldr	r0, [pc, #276]	; (800d4b8 <OnRxData+0x12c>)
 800d3a4:	f010 fe7a 	bl	801e09c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d05a      	beq.n	800d466 <OnRxData+0xda>
    {
      if (appData != NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d057      	beq.n	800d466 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d050      	beq.n	800d466 <OnRxData+0xda>
        {
    switch (appData->Port)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d01f      	beq.n	800d40c <OnRxData+0x80>
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d145      	bne.n	800d45c <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	785b      	ldrb	r3, [r3, #1]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d143      	bne.n	800d460 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d00e      	beq.n	800d400 <OnRxData+0x74>
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	dc10      	bgt.n	800d408 <OnRxData+0x7c>
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d002      	beq.n	800d3f0 <OnRxData+0x64>
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d004      	beq.n	800d3f8 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d3ee:	e00b      	b.n	800d408 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	f002 fc89 	bl	800fd08 <LmHandlerRequestClass>
              break;
 800d3f6:	e008      	b.n	800d40a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	f002 fc85 	bl	800fd08 <LmHandlerRequestClass>
              break;
 800d3fe:	e004      	b.n	800d40a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d400:	2002      	movs	r0, #2
 800d402:	f002 fc81 	bl	800fd08 <LmHandlerRequestClass>
              break;
 800d406:	e000      	b.n	800d40a <OnRxData+0x7e>
              break;
 800d408:	bf00      	nop
          }
        }
        break;
 800d40a:	e029      	b.n	800d460 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	785b      	ldrb	r3, [r3, #1]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d127      	bne.n	800d464 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	4b26      	ldr	r3, [pc, #152]	; (800d4bc <OnRxData+0x130>)
 800d422:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d424:	4b25      	ldr	r3, [pc, #148]	; (800d4bc <OnRxData+0x130>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10b      	bne.n	800d444 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d42c:	4b24      	ldr	r3, [pc, #144]	; (800d4c0 <OnRxData+0x134>)
 800d42e:	2200      	movs	r2, #0
 800d430:	2100      	movs	r1, #0
 800d432:	2003      	movs	r0, #3
 800d434:	f011 f8aa 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d438:	2201      	movs	r2, #1
 800d43a:	2120      	movs	r1, #32
 800d43c:	4821      	ldr	r0, [pc, #132]	; (800d4c4 <OnRxData+0x138>)
 800d43e:	f7f8 fdd5 	bl	8005fec <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d442:	e00f      	b.n	800d464 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d444:	4b20      	ldr	r3, [pc, #128]	; (800d4c8 <OnRxData+0x13c>)
 800d446:	2200      	movs	r2, #0
 800d448:	2100      	movs	r1, #0
 800d44a:	2003      	movs	r0, #3
 800d44c:	f011 f89e 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d450:	2200      	movs	r2, #0
 800d452:	2120      	movs	r1, #32
 800d454:	481b      	ldr	r0, [pc, #108]	; (800d4c4 <OnRxData+0x138>)
 800d456:	f7f8 fdc9 	bl	8005fec <HAL_GPIO_WritePin>
        break;
 800d45a:	e003      	b.n	800d464 <OnRxData+0xd8>

      default:

        break;
 800d45c:	bf00      	nop
 800d45e:	e002      	b.n	800d466 <OnRxData+0xda>
        break;
 800d460:	bf00      	nop
 800d462:	e000      	b.n	800d466 <OnRxData+0xda>
        break;
 800d464:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	7c1b      	ldrb	r3, [r3, #16]
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	d81f      	bhi.n	800d4ae <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	7bfa      	ldrb	r2, [r7, #15]
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d47a:	460c      	mov	r4, r1
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	7c09      	ldrb	r1, [r1, #16]
 800d480:	4608      	mov	r0, r1
 800d482:	4912      	ldr	r1, [pc, #72]	; (800d4cc <OnRxData+0x140>)
 800d484:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d488:	6838      	ldr	r0, [r7, #0]
 800d48a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d48e:	4605      	mov	r5, r0
 800d490:	6838      	ldr	r0, [r7, #0]
 800d492:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d496:	9005      	str	r0, [sp, #20]
 800d498:	9504      	str	r5, [sp, #16]
 800d49a:	9103      	str	r1, [sp, #12]
 800d49c:	9402      	str	r4, [sp, #8]
 800d49e:	9201      	str	r2, [sp, #4]
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <OnRxData+0x144>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	2003      	movs	r0, #3
 800d4aa:	f011 f86f 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000748 	.word	0x20000748
 800d4bc:	2000072e 	.word	0x2000072e
 800d4c0:	0801edac 	.word	0x0801edac
 800d4c4:	48000400 	.word	0x48000400
 800d4c8:	0801edb8 	.word	0x0801edb8
 800d4cc:	20000010 	.word	0x20000010
 800d4d0:	0801edc4 	.word	0x0801edc4

0800d4d4 <SendTxData>:

static void SendTxData(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d4da:	23ff      	movs	r3, #255	; 0xff
 800d4dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  extBattery = GetBatteryLevel();
 800d4e0:	f7f5 fa68 	bl	80029b4 <GetBatteryLevel>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4ba7      	ldr	r3, [pc, #668]	; (800d788 <SendTxData+0x2b4>)
 800d4ea:	601a      	str	r2, [r3, #0]
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", extBattery);
 800d4f8:	4ba3      	ldr	r3, [pc, #652]	; (800d788 <SendTxData+0x2b4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	4ba3      	ldr	r3, [pc, #652]	; (800d78c <SendTxData+0x2b8>)
 800d500:	2201      	movs	r2, #1
 800d502:	2100      	movs	r1, #0
 800d504:	2002      	movs	r0, #2
 800d506:	f011 f841 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d50a:	4ba1      	ldr	r3, [pc, #644]	; (800d790 <SendTxData+0x2bc>)
 800d50c:	2202      	movs	r2, #2
 800d50e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 800d510:	4ba0      	ldr	r3, [pc, #640]	; (800d794 <SendTxData+0x2c0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4aa0      	ldr	r2, [pc, #640]	; (800d798 <SendTxData+0x2c4>)
 800d516:	fba2 2303 	umull	r2, r3, r2, r3
 800d51a:	095b      	lsrs	r3, r3, #5
 800d51c:	0a18      	lsrs	r0, r3, #8
 800d51e:	4b9c      	ldr	r3, [pc, #624]	; (800d790 <SendTxData+0x2bc>)
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	1c59      	adds	r1, r3, #1
 800d526:	61f9      	str	r1, [r7, #28]
 800d528:	4413      	add	r3, r2
 800d52a:	b2c2      	uxtb	r2, r0
 800d52c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 800d52e:	4b99      	ldr	r3, [pc, #612]	; (800d794 <SendTxData+0x2c0>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a99      	ldr	r2, [pc, #612]	; (800d798 <SendTxData+0x2c4>)
 800d534:	fba2 2303 	umull	r2, r3, r2, r3
 800d538:	0958      	lsrs	r0, r3, #5
 800d53a:	4b95      	ldr	r3, [pc, #596]	; (800d790 <SendTxData+0x2bc>)
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	1c59      	adds	r1, r3, #1
 800d542:	61f9      	str	r1, [r7, #28]
 800d544:	4413      	add	r3, r2
 800d546:	b2c2      	uxtb	r2, r0
 800d548:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 800d54a:	4b94      	ldr	r3, [pc, #592]	; (800d79c <SendTxData+0x2c8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a92      	ldr	r2, [pc, #584]	; (800d798 <SendTxData+0x2c4>)
 800d550:	fba2 2303 	umull	r2, r3, r2, r3
 800d554:	095b      	lsrs	r3, r3, #5
 800d556:	0a18      	lsrs	r0, r3, #8
 800d558:	4b8d      	ldr	r3, [pc, #564]	; (800d790 <SendTxData+0x2bc>)
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	1c59      	adds	r1, r3, #1
 800d560:	61f9      	str	r1, [r7, #28]
 800d562:	4413      	add	r3, r2
 800d564:	b2c2      	uxtb	r2, r0
 800d566:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 800d568:	4b8c      	ldr	r3, [pc, #560]	; (800d79c <SendTxData+0x2c8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a8a      	ldr	r2, [pc, #552]	; (800d798 <SendTxData+0x2c4>)
 800d56e:	fba2 2303 	umull	r2, r3, r2, r3
 800d572:	0958      	lsrs	r0, r3, #5
 800d574:	4b86      	ldr	r3, [pc, #536]	; (800d790 <SendTxData+0x2bc>)
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	1c59      	adds	r1, r3, #1
 800d57c:	61f9      	str	r1, [r7, #28]
 800d57e:	4413      	add	r3, r2
 800d580:	b2c2      	uxtb	r2, r0
 800d582:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)>>8;
 800d584:	4b86      	ldr	r3, [pc, #536]	; (800d7a0 <SendTxData+0x2cc>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a83      	ldr	r2, [pc, #524]	; (800d798 <SendTxData+0x2c4>)
 800d58a:	fba2 2303 	umull	r2, r3, r2, r3
 800d58e:	095b      	lsrs	r3, r3, #5
 800d590:	0a18      	lsrs	r0, r3, #8
 800d592:	4b7f      	ldr	r3, [pc, #508]	; (800d790 <SendTxData+0x2bc>)
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	1c59      	adds	r1, r3, #1
 800d59a:	61f9      	str	r1, [r7, #28]
 800d59c:	4413      	add	r3, r2
 800d59e:	b2c2      	uxtb	r2, r0
 800d5a0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)%256;
 800d5a2:	4b7f      	ldr	r3, [pc, #508]	; (800d7a0 <SendTxData+0x2cc>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a7c      	ldr	r2, [pc, #496]	; (800d798 <SendTxData+0x2c4>)
 800d5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ac:	0958      	lsrs	r0, r3, #5
 800d5ae:	4b78      	ldr	r3, [pc, #480]	; (800d790 <SendTxData+0x2bc>)
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	1c59      	adds	r1, r3, #1
 800d5b6:	61f9      	str	r1, [r7, #28]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	b2c2      	uxtb	r2, r0
 800d5bc:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d5be:	4b79      	ldr	r3, [pc, #484]	; (800d7a4 <SendTxData+0x2d0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f2 ff44 	bl	8000450 <__aeabi_f2d>
 800d5c8:	f04f 0200 	mov.w	r2, #0
 800d5cc:	4b76      	ldr	r3, [pc, #472]	; (800d7a8 <SendTxData+0x2d4>)
 800d5ce:	f7f2 ff97 	bl	8000500 <__aeabi_dmul>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f7f3 fa2b 	bl	8000a34 <__aeabi_d2iz>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d5e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d5e6:	4a6c      	ldr	r2, [pc, #432]	; (800d798 <SendTxData+0x2c4>)
 800d5e8:	fb82 1203 	smull	r1, r2, r2, r3
 800d5ec:	1152      	asrs	r2, r2, #5
 800d5ee:	17db      	asrs	r3, r3, #31
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	b218      	sxth	r0, r3
 800d5f4:	4b66      	ldr	r3, [pc, #408]	; (800d790 <SendTxData+0x2bc>)
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	1c59      	adds	r1, r3, #1
 800d5fc:	61f9      	str	r1, [r7, #28]
 800d5fe:	4413      	add	r3, r2
 800d600:	b2c2      	uxtb	r2, r0
 800d602:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d604:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d608:	4a63      	ldr	r2, [pc, #396]	; (800d798 <SendTxData+0x2c4>)
 800d60a:	fb82 1203 	smull	r1, r2, r2, r3
 800d60e:	1151      	asrs	r1, r2, #5
 800d610:	17da      	asrs	r2, r3, #31
 800d612:	1a8a      	subs	r2, r1, r2
 800d614:	2164      	movs	r1, #100	; 0x64
 800d616:	fb01 f202 	mul.w	r2, r1, r2
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	b218      	sxth	r0, r3
 800d61e:	4b5c      	ldr	r3, [pc, #368]	; (800d790 <SendTxData+0x2bc>)
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	1c59      	adds	r1, r3, #1
 800d626:	61f9      	str	r1, [r7, #28]
 800d628:	4413      	add	r3, r2
 800d62a:	b2c2      	uxtb	r2, r0
 800d62c:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d62e:	4b5f      	ldr	r3, [pc, #380]	; (800d7ac <SendTxData+0x2d8>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4618      	mov	r0, r3
 800d634:	f7f2 ff0c 	bl	8000450 <__aeabi_f2d>
 800d638:	f04f 0200 	mov.w	r2, #0
 800d63c:	4b5a      	ldr	r3, [pc, #360]	; (800d7a8 <SendTxData+0x2d4>)
 800d63e:	f7f2 ff5f 	bl	8000500 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4610      	mov	r0, r2
 800d648:	4619      	mov	r1, r3
 800d64a:	f7f3 f9f3 	bl	8000a34 <__aeabi_d2iz>
 800d64e:	4603      	mov	r3, r0
 800d650:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d652:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d656:	4a50      	ldr	r2, [pc, #320]	; (800d798 <SendTxData+0x2c4>)
 800d658:	fb82 1203 	smull	r1, r2, r2, r3
 800d65c:	1152      	asrs	r2, r2, #5
 800d65e:	17db      	asrs	r3, r3, #31
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	b218      	sxth	r0, r3
 800d664:	4b4a      	ldr	r3, [pc, #296]	; (800d790 <SendTxData+0x2bc>)
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	61f9      	str	r1, [r7, #28]
 800d66e:	4413      	add	r3, r2
 800d670:	b2c2      	uxtb	r2, r0
 800d672:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d674:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d678:	4a47      	ldr	r2, [pc, #284]	; (800d798 <SendTxData+0x2c4>)
 800d67a:	fb82 1203 	smull	r1, r2, r2, r3
 800d67e:	1151      	asrs	r1, r2, #5
 800d680:	17da      	asrs	r2, r3, #31
 800d682:	1a8a      	subs	r2, r1, r2
 800d684:	2164      	movs	r1, #100	; 0x64
 800d686:	fb01 f202 	mul.w	r2, r1, r2
 800d68a:	1a9b      	subs	r3, r3, r2
 800d68c:	b218      	sxth	r0, r3
 800d68e:	4b40      	ldr	r3, [pc, #256]	; (800d790 <SendTxData+0x2bc>)
 800d690:	685a      	ldr	r2, [r3, #4]
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	1c59      	adds	r1, r3, #1
 800d696:	61f9      	str	r1, [r7, #28]
 800d698:	4413      	add	r3, r2
 800d69a:	b2c2      	uxtb	r2, r0
 800d69c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB/256;
 800d69e:	4b44      	ldr	r3, [pc, #272]	; (800d7b0 <SendTxData+0x2dc>)
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	0a1b      	lsrs	r3, r3, #8
 800d6a4:	b298      	uxth	r0, r3
 800d6a6:	4b3a      	ldr	r3, [pc, #232]	; (800d790 <SendTxData+0x2bc>)
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	1c59      	adds	r1, r3, #1
 800d6ae:	61f9      	str	r1, [r7, #28]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b2c2      	uxtb	r2, r0
 800d6b4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB%256;
 800d6b6:	4b3e      	ldr	r3, [pc, #248]	; (800d7b0 <SendTxData+0x2dc>)
 800d6b8:	8818      	ldrh	r0, [r3, #0]
 800d6ba:	4b35      	ldr	r3, [pc, #212]	; (800d790 <SendTxData+0x2bc>)
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	1c59      	adds	r1, r3, #1
 800d6c2:	61f9      	str	r1, [r7, #28]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	b2c2      	uxtb	r2, r0
 800d6c8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = extBattery;
 800d6ca:	4b2f      	ldr	r3, [pc, #188]	; (800d788 <SendTxData+0x2b4>)
 800d6cc:	6818      	ldr	r0, [r3, #0]
 800d6ce:	4b30      	ldr	r3, [pc, #192]	; (800d790 <SendTxData+0x2bc>)
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	1c59      	adds	r1, r3, #1
 800d6d6:	61f9      	str	r1, [r7, #28]
 800d6d8:	4413      	add	r3, r2
 800d6da:	b2c2      	uxtb	r2, r0
 800d6dc:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	4b2b      	ldr	r3, [pc, #172]	; (800d790 <SendTxData+0x2bc>)
 800d6e4:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6e6:	4b33      	ldr	r3, [pc, #204]	; (800d7b4 <SendTxData+0x2e0>)
 800d6e8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d007      	beq.n	800d6fe <SendTxData+0x22a>
 800d6ee:	f002 f9e7 	bl	800fac0 <LmHandlerJoinStatus>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d102      	bne.n	800d6fe <SendTxData+0x22a>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d6f8:	482e      	ldr	r0, [pc, #184]	; (800d7b4 <SendTxData+0x2e0>)
 800d6fa:	f010 fd3d 	bl	801e178 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d6fe:	4b2e      	ldr	r3, [pc, #184]	; (800d7b8 <SendTxData+0x2e4>)
 800d700:	78db      	ldrb	r3, [r3, #3]
 800d702:	2200      	movs	r2, #0
 800d704:	4619      	mov	r1, r3
 800d706:	4822      	ldr	r0, [pc, #136]	; (800d790 <SendTxData+0x2bc>)
 800d708:	f002 f9f6 	bl	800faf8 <LmHandlerSend>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d712:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d716:	2b00      	cmp	r3, #0
 800d718:	d106      	bne.n	800d728 <SendTxData+0x254>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d71a:	4b28      	ldr	r3, [pc, #160]	; (800d7bc <SendTxData+0x2e8>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	2100      	movs	r1, #0
 800d720:	2001      	movs	r0, #1
 800d722:	f010 ff33 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800d726:	e016      	b.n	800d756 <SendTxData+0x282>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d728:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d72c:	f113 0f06 	cmn.w	r3, #6
 800d730:	d111      	bne.n	800d756 <SendTxData+0x282>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d732:	f002 f917 	bl	800f964 <LmHandlerGetDutyCycleWaitTime>
 800d736:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <SendTxData+0x282>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	4a1f      	ldr	r2, [pc, #124]	; (800d7c0 <SendTxData+0x2ec>)
 800d742:	fba2 2303 	umull	r2, r3, r2, r3
 800d746:	099b      	lsrs	r3, r3, #6
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	4b1e      	ldr	r3, [pc, #120]	; (800d7c4 <SendTxData+0x2f0>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	2100      	movs	r1, #0
 800d750:	2001      	movs	r0, #1
 800d752:	f010 ff1b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d756:	4b1c      	ldr	r3, [pc, #112]	; (800d7c8 <SendTxData+0x2f4>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10f      	bne.n	800d77e <SendTxData+0x2aa>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d75e:	481b      	ldr	r0, [pc, #108]	; (800d7cc <SendTxData+0x2f8>)
 800d760:	f010 fd0a 	bl	801e178 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d764:	4b1a      	ldr	r3, [pc, #104]	; (800d7d0 <SendTxData+0x2fc>)
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	4293      	cmp	r3, r2
 800d76c:	bf38      	it	cc
 800d76e:	4613      	movcc	r3, r2
 800d770:	4619      	mov	r1, r3
 800d772:	4816      	ldr	r0, [pc, #88]	; (800d7cc <SendTxData+0x2f8>)
 800d774:	f010 fd70 	bl	801e258 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d778:	4814      	ldr	r0, [pc, #80]	; (800d7cc <SendTxData+0x2f8>)
 800d77a:	f010 fc8f 	bl	801e09c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d77e:	bf00      	nop
 800d780:	3728      	adds	r7, #40	; 0x28
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20000292 	.word	0x20000292
 800d78c:	0801ee0c 	.word	0x0801ee0c
 800d790:	20000094 	.word	0x20000094
 800d794:	20000288 	.word	0x20000288
 800d798:	51eb851f 	.word	0x51eb851f
 800d79c:	20000284 	.word	0x20000284
 800d7a0:	2000028c 	.word	0x2000028c
 800d7a4:	20000294 	.word	0x20000294
 800d7a8:	40590000 	.word	0x40590000
 800d7ac:	20000298 	.word	0x20000298
 800d7b0:	20000290 	.word	0x20000290
 800d7b4:	20000760 	.word	0x20000760
 800d7b8:	20000078 	.word	0x20000078
 800d7bc:	0801ee18 	.word	0x0801ee18
 800d7c0:	10624dd3 	.word	0x10624dd3
 800d7c4:	0801ee28 	.word	0x0801ee28
 800d7c8:	20000608 	.word	0x20000608
 800d7cc:	2000060c 	.word	0x2000060c
 800d7d0:	20000090 	.word	0x20000090

0800d7d4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d7dc:	2100      	movs	r1, #0
 800d7de:	2002      	movs	r0, #2
 800d7e0:	f010 fba4 	bl	801df2c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d7e4:	4803      	ldr	r0, [pc, #12]	; (800d7f4 <OnTxTimerEvent+0x20>)
 800d7e6:	f010 fc59 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	2000060c 	.word	0x2000060c

0800d7f8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	bc80      	pop	{r7}
 800d808:	4770      	bx	lr

0800d80a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	bc80      	pop	{r7}
 800d81a:	4770      	bx	lr

0800d81c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	bc80      	pop	{r7}
 800d82c:	4770      	bx	lr
	...

0800d830 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af04      	add	r7, sp, #16
 800d836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d041      	beq.n	800d8c2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d03d      	beq.n	800d8c2 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d846:	4821      	ldr	r0, [pc, #132]	; (800d8cc <OnTxData+0x9c>)
 800d848:	f010 fc28 	bl	801e09c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d84c:	4b20      	ldr	r3, [pc, #128]	; (800d8d0 <OnTxData+0xa0>)
 800d84e:	2200      	movs	r2, #0
 800d850:	2100      	movs	r1, #0
 800d852:	2002      	movs	r0, #2
 800d854:	f010 fe9a 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	7c12      	ldrb	r2, [r2, #16]
 800d860:	4611      	mov	r1, r2
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d868:	4610      	mov	r0, r2
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d870:	9203      	str	r2, [sp, #12]
 800d872:	9002      	str	r0, [sp, #8]
 800d874:	9101      	str	r1, [sp, #4]
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	4b16      	ldr	r3, [pc, #88]	; (800d8d4 <OnTxData+0xa4>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	2100      	movs	r1, #0
 800d87e:	2003      	movs	r0, #3
 800d880:	f010 fe84 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d884:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <OnTxData+0xa8>)
 800d886:	2200      	movs	r2, #0
 800d888:	2100      	movs	r1, #0
 800d88a:	2003      	movs	r0, #3
 800d88c:	f010 fe7e 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7a1b      	ldrb	r3, [r3, #8]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d10e      	bne.n	800d8b6 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7a5b      	ldrb	r3, [r3, #9]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <OnTxData+0x74>
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	; (800d8dc <OnTxData+0xac>)
 800d8a2:	e000      	b.n	800d8a6 <OnTxData+0x76>
 800d8a4:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <OnTxData+0xb0>)
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <OnTxData+0xb4>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	2003      	movs	r0, #3
 800d8b0:	f010 fe6c 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d8b4:	e005      	b.n	800d8c2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d8b6:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <OnTxData+0xb8>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	2003      	movs	r0, #3
 800d8be:	f010 fe65 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20000730 	.word	0x20000730
 800d8d0:	0801ee48 	.word	0x0801ee48
 800d8d4:	0801ee7c 	.word	0x0801ee7c
 800d8d8:	0801eeb0 	.word	0x0801eeb0
 800d8dc:	0801eec0 	.word	0x0801eec0
 800d8e0:	0801eec4 	.word	0x0801eec4
 800d8e4:	0801eecc 	.word	0x0801eecc
 800d8e8:	0801eee0 	.word	0x0801eee0

0800d8ec <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d035      	beq.n	800d966 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d11a      	bne.n	800d93a <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d904:	481a      	ldr	r0, [pc, #104]	; (800d970 <OnJoinRequest+0x84>)
 800d906:	f010 fc37 	bl	801e178 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d90a:	4b1a      	ldr	r3, [pc, #104]	; (800d974 <OnJoinRequest+0x88>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	2100      	movs	r1, #0
 800d910:	2002      	movs	r0, #2
 800d912:	f010 fe3b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	79db      	ldrb	r3, [r3, #7]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d106      	bne.n	800d92c <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d91e:	4b16      	ldr	r3, [pc, #88]	; (800d978 <OnJoinRequest+0x8c>)
 800d920:	2200      	movs	r2, #0
 800d922:	2100      	movs	r1, #0
 800d924:	2002      	movs	r0, #2
 800d926:	f010 fe31 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d92a:	e01c      	b.n	800d966 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d92c:	4b13      	ldr	r3, [pc, #76]	; (800d97c <OnJoinRequest+0x90>)
 800d92e:	2200      	movs	r2, #0
 800d930:	2100      	movs	r1, #0
 800d932:	2002      	movs	r0, #2
 800d934:	f010 fe2a 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800d938:	e015      	b.n	800d966 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <OnJoinRequest+0x94>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	2100      	movs	r1, #0
 800d940:	2002      	movs	r0, #2
 800d942:	f010 fe23 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	79db      	ldrb	r3, [r3, #7]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d10b      	bne.n	800d966 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d94e:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <OnJoinRequest+0x98>)
 800d950:	2200      	movs	r2, #0
 800d952:	2100      	movs	r1, #0
 800d954:	2002      	movs	r0, #2
 800d956:	f010 fe19 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d95a:	4b0b      	ldr	r3, [pc, #44]	; (800d988 <OnJoinRequest+0x9c>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2101      	movs	r1, #1
 800d960:	4618      	mov	r0, r3
 800d962:	f002 f809 	bl	800f978 <LmHandlerJoin>
}
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20000760 	.word	0x20000760
 800d974:	0801eef0 	.word	0x0801eef0
 800d978:	0801ef08 	.word	0x0801ef08
 800d97c:	0801ef28 	.word	0x0801ef28
 800d980:	0801ef48 	.word	0x0801ef48
 800d984:	0801ef64 	.word	0x0801ef64
 800d988:	20000028 	.word	0x20000028

0800d98c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	b093      	sub	sp, #76	; 0x4c
 800d990:	af0c      	add	r7, sp, #48	; 0x30
 800d992:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d056      	beq.n	800da48 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	785b      	ldrb	r3, [r3, #1]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d008      	beq.n	800d9b4 <OnBeaconStatusChange+0x28>
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d049      	beq.n	800da3a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d9a6:	4b2a      	ldr	r3, [pc, #168]	; (800da50 <OnBeaconStatusChange+0xc4>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	2002      	movs	r0, #2
 800d9ae:	f010 fded 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d9b2:	e049      	b.n	800da48 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	7c1b      	ldrb	r3, [r3, #16]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d9c0:	461c      	mov	r4, r3
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d9c8:	461d      	mov	r5, r3
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	6852      	ldr	r2, [r2, #4]
 800d9d2:	6979      	ldr	r1, [r7, #20]
 800d9d4:	7d49      	ldrb	r1, [r1, #21]
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	6979      	ldr	r1, [r7, #20]
 800d9da:	7d89      	ldrb	r1, [r1, #22]
 800d9dc:	6139      	str	r1, [r7, #16]
 800d9de:	6979      	ldr	r1, [r7, #20]
 800d9e0:	7dc9      	ldrb	r1, [r1, #23]
 800d9e2:	60f9      	str	r1, [r7, #12]
 800d9e4:	6979      	ldr	r1, [r7, #20]
 800d9e6:	7e09      	ldrb	r1, [r1, #24]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	6979      	ldr	r1, [r7, #20]
 800d9ec:	7e49      	ldrb	r1, [r1, #25]
 800d9ee:	6079      	str	r1, [r7, #4]
 800d9f0:	6979      	ldr	r1, [r7, #20]
 800d9f2:	7e89      	ldrb	r1, [r1, #26]
 800d9f4:	6039      	str	r1, [r7, #0]
 800d9f6:	6979      	ldr	r1, [r7, #20]
 800d9f8:	7ec9      	ldrb	r1, [r1, #27]
 800d9fa:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9fc:	f8d7 c000 	ldr.w	ip, [r7]
 800da00:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800da04:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800da08:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800da0c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800da10:	f8cd c020 	str.w	ip, [sp, #32]
 800da14:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800da18:	f8cd c01c 	str.w	ip, [sp, #28]
 800da1c:	6939      	ldr	r1, [r7, #16]
 800da1e:	9106      	str	r1, [sp, #24]
 800da20:	9605      	str	r6, [sp, #20]
 800da22:	9204      	str	r2, [sp, #16]
 800da24:	9303      	str	r3, [sp, #12]
 800da26:	9502      	str	r5, [sp, #8]
 800da28:	9401      	str	r4, [sp, #4]
 800da2a:	9000      	str	r0, [sp, #0]
 800da2c:	4b09      	ldr	r3, [pc, #36]	; (800da54 <OnBeaconStatusChange+0xc8>)
 800da2e:	2200      	movs	r2, #0
 800da30:	2100      	movs	r1, #0
 800da32:	2002      	movs	r0, #2
 800da34:	f010 fdaa 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800da38:	e006      	b.n	800da48 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <OnBeaconStatusChange+0xcc>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	2100      	movs	r1, #0
 800da40:	2002      	movs	r0, #2
 800da42:	f010 fda3 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800da46:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800da48:	bf00      	nop
 800da4a:	371c      	adds	r7, #28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da50:	0801ef88 	.word	0x0801ef88
 800da54:	0801efa0 	.word	0x0801efa0
 800da58:	0801f014 	.word	0x0801f014

0800da5c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800da60:	bf00      	nop
 800da62:	46bd      	mov	sp, r7
 800da64:	bc80      	pop	{r7}
 800da66:	4770      	bx	lr

0800da68 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	4603      	mov	r3, r0
 800da70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	4a06      	ldr	r2, [pc, #24]	; (800da90 <OnClassChange+0x28>)
 800da76:	5cd3      	ldrb	r3, [r2, r3]
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	4b06      	ldr	r3, [pc, #24]	; (800da94 <OnClassChange+0x2c>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	2002      	movs	r0, #2
 800da82:	f010 fd83 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800da86:	bf00      	nop
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	0801f050 	.word	0x0801f050
 800da94:	0801f034 	.word	0x0801f034

0800da98 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800da9c:	2100      	movs	r1, #0
 800da9e:	2001      	movs	r0, #1
 800daa0:	f010 fa44 	bl	801df2c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800daa4:	bf00      	nop
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800dab0:	4a0d      	ldr	r2, [pc, #52]	; (800dae8 <OnTxPeriodicityChanged+0x40>)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800dab6:	4b0c      	ldr	r3, [pc, #48]	; (800dae8 <OnTxPeriodicityChanged+0x40>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d103      	bne.n	800dac6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800dabe:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <OnTxPeriodicityChanged+0x40>)
 800dac0:	f242 7210 	movw	r2, #10000	; 0x2710
 800dac4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800dac6:	4809      	ldr	r0, [pc, #36]	; (800daec <OnTxPeriodicityChanged+0x44>)
 800dac8:	f010 fb56 	bl	801e178 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800dacc:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <OnTxPeriodicityChanged+0x40>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4619      	mov	r1, r3
 800dad2:	4806      	ldr	r0, [pc, #24]	; (800daec <OnTxPeriodicityChanged+0x44>)
 800dad4:	f010 fbc0 	bl	801e258 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800dad8:	4804      	ldr	r0, [pc, #16]	; (800daec <OnTxPeriodicityChanged+0x44>)
 800dada:	f010 fadf 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800dade:	bf00      	nop
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20000090 	.word	0x20000090
 800daec:	2000060c 	.word	0x2000060c

0800daf0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800dafa:	4a04      	ldr	r2, [pc, #16]	; (800db0c <OnTxFrameCtrlChanged+0x1c>)
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	bc80      	pop	{r7}
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	20000078 	.word	0x20000078

0800db10 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800db1a:	4a04      	ldr	r2, [pc, #16]	; (800db2c <OnPingSlotPeriodicityChanged+0x1c>)
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	bc80      	pop	{r7}
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	20000078 	.word	0x20000078

0800db30 <OnSystemReset>:

static void OnSystemReset(void)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800db34:	f002 fd11 	bl	801055a <LmHandlerHalt>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <OnSystemReset+0x1c>
 800db3e:	f001 ffbf 	bl	800fac0 <LmHandlerJoinStatus>
 800db42:	4603      	mov	r3, r0
 800db44:	2b01      	cmp	r3, #1
 800db46:	d101      	bne.n	800db4c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800db48:	f7ff fb18 	bl	800d17c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800db4c:	bf00      	nop
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <StopJoin>:

static void StopJoin(void)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800db54:	4817      	ldr	r0, [pc, #92]	; (800dbb4 <StopJoin+0x64>)
 800db56:	f010 fb0f 	bl	801e178 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800db5a:	f002 fcf1 	bl	8010540 <LmHandlerStop>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800db64:	4b14      	ldr	r3, [pc, #80]	; (800dbb8 <StopJoin+0x68>)
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	2002      	movs	r0, #2
 800db6c:	f010 fd0e 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800db70:	e01a      	b.n	800dba8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <StopJoin+0x6c>)
 800db74:	2200      	movs	r2, #0
 800db76:	2100      	movs	r1, #0
 800db78:	2002      	movs	r0, #2
 800db7a:	f010 fd07 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800db7e:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <StopJoin+0x70>)
 800db80:	2201      	movs	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <StopJoin+0x74>)
 800db86:	2200      	movs	r2, #0
 800db88:	2100      	movs	r1, #0
 800db8a:	2002      	movs	r0, #2
 800db8c:	f010 fcfe 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800db90:	480d      	ldr	r0, [pc, #52]	; (800dbc8 <StopJoin+0x78>)
 800db92:	f001 fe23 	bl	800f7dc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800db96:	4b0a      	ldr	r3, [pc, #40]	; (800dbc0 <StopJoin+0x70>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2101      	movs	r1, #1
 800db9c:	4618      	mov	r0, r3
 800db9e:	f001 feeb 	bl	800f978 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800dba2:	4804      	ldr	r0, [pc, #16]	; (800dbb4 <StopJoin+0x64>)
 800dba4:	f010 fa7a 	bl	801e09c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800dba8:	4808      	ldr	r0, [pc, #32]	; (800dbcc <StopJoin+0x7c>)
 800dbaa:	f010 fa77 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800dbae:	bf00      	nop
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	2000060c 	.word	0x2000060c
 800dbb8:	0801f054 	.word	0x0801f054
 800dbbc:	0801f074 	.word	0x0801f074
 800dbc0:	20000028 	.word	0x20000028
 800dbc4:	0801f088 	.word	0x0801f088
 800dbc8:	20000078 	.word	0x20000078
 800dbcc:	20000624 	.word	0x20000624

0800dbd0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800dbd8:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <OnStopJoinTimerEvent+0x20>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	d103      	bne.n	800dbe8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	2008      	movs	r0, #8
 800dbe4:	f010 f9a2 	bl	801df2c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20000028 	.word	0x20000028

0800dbf4 <StoreContext>:

static void StoreContext(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dbfa:	23ff      	movs	r3, #255	; 0xff
 800dbfc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800dbfe:	f002 fce1 	bl	80105c4 <LmHandlerNvmDataStore>
 800dc02:	4603      	mov	r3, r0
 800dc04:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800dc06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc0a:	f113 0f08 	cmn.w	r3, #8
 800dc0e:	d106      	bne.n	800dc1e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800dc10:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <StoreContext+0x48>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	2100      	movs	r1, #0
 800dc16:	2002      	movs	r0, #2
 800dc18:	f010 fcb8 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800dc1c:	e00a      	b.n	800dc34 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800dc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d105      	bne.n	800dc34 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <StoreContext+0x4c>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	2002      	movs	r0, #2
 800dc30:	f010 fcac 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	0801f0a8 	.word	0x0801f0a8
 800dc40:	0801f0c0 	.word	0x0801f0c0

0800dc44 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d106      	bne.n	800dc62 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dc54:	4b08      	ldr	r3, [pc, #32]	; (800dc78 <OnNvmDataChange+0x34>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	2100      	movs	r1, #0
 800dc5a:	2002      	movs	r0, #2
 800dc5c:	f010 fc96 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dc60:	e005      	b.n	800dc6e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dc62:	4b06      	ldr	r3, [pc, #24]	; (800dc7c <OnNvmDataChange+0x38>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	2100      	movs	r1, #0
 800dc68:	2002      	movs	r0, #2
 800dc6a:	f010 fc8f 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	0801f0d8 	.word	0x0801f0d8
 800dc7c:	0801f0ec 	.word	0x0801f0ec

0800dc80 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dc8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc8e:	4807      	ldr	r0, [pc, #28]	; (800dcac <OnStoreContextRequest+0x2c>)
 800dc90:	f7f3 fc18 	bl	80014c4 <FLASH_IF_Erase>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d104      	bne.n	800dca4 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	4803      	ldr	r0, [pc, #12]	; (800dcac <OnStoreContextRequest+0x2c>)
 800dca0:	f7f3 fbc0 	bl	8001424 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	0803f000 	.word	0x0803f000

0800dcb0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	4903      	ldr	r1, [pc, #12]	; (800dccc <OnRestoreContextRequest+0x1c>)
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7f3 fbd8 	bl	8001474 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dcc4:	bf00      	nop
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	0803f000 	.word	0x0803f000

0800dcd0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dcd4:	4b15      	ldr	r3, [pc, #84]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dcda:	4b14      	ldr	r3, [pc, #80]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dce0:	4b12      	ldr	r3, [pc, #72]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dce6:	4b11      	ldr	r3, [pc, #68]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	f043 0320 	orr.w	r3, r3, #32
 800dcf4:	4a0d      	ldr	r2, [pc, #52]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dcf6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10c      	bne.n	800dd1a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <LoraInfo_Init+0x60>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	2100      	movs	r1, #0
 800dd06:	2000      	movs	r0, #0
 800dd08:	f010 fc40 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dd0c:	bf00      	nop
 800dd0e:	f010 fc2b 	bl	801e568 <UTIL_ADV_TRACE_IsBufferEmpty>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d1fa      	bne.n	800dd0e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dd18:	e7fe      	b.n	800dd18 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dd1a:	4b04      	ldr	r3, [pc, #16]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dd20:	4b02      	ldr	r3, [pc, #8]	; (800dd2c <LoraInfo_Init+0x5c>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dd26:	bf00      	nop
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000778 	.word	0x20000778
 800dd30:	0801f100 	.word	0x0801f100

0800dd34 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dd34:	b480      	push	{r7}
 800dd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <LoraInfo_GetPtr+0x10>)
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bc80      	pop	{r7}
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	20000778 	.word	0x20000778

0800dd48 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dd4c:	f7f5 fdc3 	bl	80038d6 <BSP_RADIO_Init>
 800dd50:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b082      	sub	sp, #8
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dd60:	79fb      	ldrb	r3, [r7, #7]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f5 fde8 	bl	8003938 <BSP_RADIO_ConfigRFSwitch>
 800dd68:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dd76:	f7f5 fe2d 	bl	80039d4 <BSP_RADIO_GetTxConfig>
 800dd7a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dd84:	f7f5 fe2d 	bl	80039e2 <BSP_RADIO_IsTCXO>
 800dd88:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dd92:	f7f5 fe2d 	bl	80039f0 <BSP_RADIO_IsDCDC>
 800dd96:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f5 fe28 	bl	80039fe <BSP_RADIO_GetRFOMaxPowerConfig>
 800ddae:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	33f1      	adds	r3, #241	; 0xf1
 800ddc4:	2210      	movs	r2, #16
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f00c f875 	bl	8019eb8 <memset1>
    ctx->M_n = 0;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	22f0      	movs	r2, #240	; 0xf0
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f00c f86b 	bl	8019eb8 <memset1>
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b082      	sub	sp, #8
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	2110      	movs	r1, #16
 800ddfa:	6838      	ldr	r0, [r7, #0]
 800ddfc:	f000 fe5c 	bl	800eab8 <lorawan_aes_set_key>
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08c      	sub	sp, #48	; 0x30
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 80a1 	beq.w	800df62 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de26:	f1c3 0310 	rsb	r3, r3, #16
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	4293      	cmp	r3, r2
 800de2e:	bf28      	it	cs
 800de30:	4613      	movcs	r3, r2
 800de32:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f203 1201 	addw	r2, r3, #257	; 0x101
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de40:	4413      	add	r3, r2
 800de42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de44:	b292      	uxth	r2, r2
 800de46:	68b9      	ldr	r1, [r7, #8]
 800de48:	4618      	mov	r0, r3
 800de4a:	f00b fffa 	bl	8019e42 <memcpy1>
        ctx->M_n += mlen;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	441a      	add	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de64:	2b0f      	cmp	r3, #15
 800de66:	f240 808d 	bls.w	800df84 <AES_CMAC_Update+0x17c>
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	429a      	cmp	r2, r3
 800de70:	f000 8088 	beq.w	800df84 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800de74:	2300      	movs	r3, #0
 800de76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de78:	e015      	b.n	800dea6 <AES_CMAC_Update+0x9e>
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7e:	4413      	add	r3, r2
 800de80:	33f1      	adds	r3, #241	; 0xf1
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	68f9      	ldr	r1, [r7, #12]
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	440b      	add	r3, r1
 800de8a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	4053      	eors	r3, r2
 800de92:	b2d9      	uxtb	r1, r3
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	4413      	add	r3, r2
 800de9a:	33f1      	adds	r3, #241	; 0xf1
 800de9c:	460a      	mov	r2, r1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	3301      	adds	r3, #1
 800dea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	2b0f      	cmp	r3, #15
 800deaa:	dde6      	ble.n	800de7a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800deb2:	f107 0314 	add.w	r3, r7, #20
 800deb6:	2210      	movs	r2, #16
 800deb8:	4618      	mov	r0, r3
 800deba:	f00b ffc2 	bl	8019e42 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	f107 0114 	add.w	r1, r7, #20
 800dec4:	f107 0314 	add.w	r3, r7, #20
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 fed3 	bl	800ec74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	33f1      	adds	r3, #241	; 0xf1
 800ded2:	f107 0114 	add.w	r1, r7, #20
 800ded6:	2210      	movs	r2, #16
 800ded8:	4618      	mov	r0, r3
 800deda:	f00b ffb2 	bl	8019e42 <memcpy1>

        data += mlen;
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	4413      	add	r3, r2
 800dee4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800deee:	e038      	b.n	800df62 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800def0:	2300      	movs	r3, #0
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28
 800def4:	e013      	b.n	800df1e <AES_CMAC_Update+0x116>
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	4413      	add	r3, r2
 800defc:	33f1      	adds	r3, #241	; 0xf1
 800defe:	781a      	ldrb	r2, [r3, #0]
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	440b      	add	r3, r1
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	4053      	eors	r3, r2
 800df0a:	b2d9      	uxtb	r1, r3
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	4413      	add	r3, r2
 800df12:	33f1      	adds	r3, #241	; 0xf1
 800df14:	460a      	mov	r2, r1
 800df16:	701a      	strb	r2, [r3, #0]
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	3301      	adds	r3, #1
 800df1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df20:	2b0f      	cmp	r3, #15
 800df22:	dde8      	ble.n	800def6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800df2a:	f107 0314 	add.w	r3, r7, #20
 800df2e:	2210      	movs	r2, #16
 800df30:	4618      	mov	r0, r3
 800df32:	f00b ff86 	bl	8019e42 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	f107 0114 	add.w	r1, r7, #20
 800df3c:	f107 0314 	add.w	r3, r7, #20
 800df40:	4618      	mov	r0, r3
 800df42:	f000 fe97 	bl	800ec74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	33f1      	adds	r3, #241	; 0xf1
 800df4a:	f107 0114 	add.w	r1, r7, #20
 800df4e:	2210      	movs	r2, #16
 800df50:	4618      	mov	r0, r3
 800df52:	f00b ff76 	bl	8019e42 <memcpy1>

        data += 16;
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	3310      	adds	r3, #16
 800df5a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3b10      	subs	r3, #16
 800df60:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b10      	cmp	r3, #16
 800df66:	d8c3      	bhi.n	800def0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	b292      	uxth	r2, r2
 800df72:	68b9      	ldr	r1, [r7, #8]
 800df74:	4618      	mov	r0, r3
 800df76:	f00b ff64 	bl	8019e42 <memcpy1>
    ctx->M_n = len;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800df82:	e000      	b.n	800df86 <AES_CMAC_Update+0x17e>
            return;
 800df84:	bf00      	nop
}
 800df86:	3730      	adds	r7, #48	; 0x30
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b092      	sub	sp, #72	; 0x48
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800df96:	f107 031c 	add.w	r3, r7, #28
 800df9a:	2210      	movs	r2, #16
 800df9c:	2100      	movs	r1, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f00b ff8a 	bl	8019eb8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	f107 011c 	add.w	r1, r7, #28
 800dfaa:	f107 031c 	add.w	r3, r7, #28
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fe60 	bl	800ec74 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800dfb4:	7f3b      	ldrb	r3, [r7, #28]
 800dfb6:	b25b      	sxtb	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	da30      	bge.n	800e01e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc0:	e01b      	b.n	800dffa <AES_CMAC_Final+0x6e>
 800dfc2:	f107 021c 	add.w	r2, r7, #28
 800dfc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	b25a      	sxtb	r2, r3
 800dfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	3348      	adds	r3, #72	; 0x48
 800dfd6:	443b      	add	r3, r7
 800dfd8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dfdc:	09db      	lsrs	r3, r3, #7
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	b25b      	sxtb	r3, r3
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	b25b      	sxtb	r3, r3
 800dfe6:	b2d9      	uxtb	r1, r3
 800dfe8:	f107 021c 	add.w	r2, r7, #28
 800dfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfee:	4413      	add	r3, r2
 800dff0:	460a      	mov	r2, r1
 800dff2:	701a      	strb	r2, [r3, #0]
 800dff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dff6:	3301      	adds	r3, #1
 800dff8:	647b      	str	r3, [r7, #68]	; 0x44
 800dffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffc:	2b0e      	cmp	r3, #14
 800dffe:	dde0      	ble.n	800dfc2 <AES_CMAC_Final+0x36>
 800e000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800e00c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e010:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e014:	43db      	mvns	r3, r3
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e01c:	e027      	b.n	800e06e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800e01e:	2300      	movs	r3, #0
 800e020:	643b      	str	r3, [r7, #64]	; 0x40
 800e022:	e01b      	b.n	800e05c <AES_CMAC_Final+0xd0>
 800e024:	f107 021c 	add.w	r2, r7, #28
 800e028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e02a:	4413      	add	r3, r2
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	005b      	lsls	r3, r3, #1
 800e030:	b25a      	sxtb	r2, r3
 800e032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e034:	3301      	adds	r3, #1
 800e036:	3348      	adds	r3, #72	; 0x48
 800e038:	443b      	add	r3, r7
 800e03a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e03e:	09db      	lsrs	r3, r3, #7
 800e040:	b2db      	uxtb	r3, r3
 800e042:	b25b      	sxtb	r3, r3
 800e044:	4313      	orrs	r3, r2
 800e046:	b25b      	sxtb	r3, r3
 800e048:	b2d9      	uxtb	r1, r3
 800e04a:	f107 021c 	add.w	r2, r7, #28
 800e04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e050:	4413      	add	r3, r2
 800e052:	460a      	mov	r2, r1
 800e054:	701a      	strb	r2, [r3, #0]
 800e056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e058:	3301      	adds	r3, #1
 800e05a:	643b      	str	r3, [r7, #64]	; 0x40
 800e05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05e:	2b0e      	cmp	r3, #14
 800e060:	dde0      	ble.n	800e024 <AES_CMAC_Final+0x98>
 800e062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e074:	2b10      	cmp	r3, #16
 800e076:	d11d      	bne.n	800e0b4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e078:	2300      	movs	r3, #0
 800e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e07c:	e016      	b.n	800e0ac <AES_CMAC_Final+0x120>
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e082:	4413      	add	r3, r2
 800e084:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	f107 011c 	add.w	r1, r7, #28
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	440b      	add	r3, r1
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	4053      	eors	r3, r2
 800e096:	b2d9      	uxtb	r1, r3
 800e098:	683a      	ldr	r2, [r7, #0]
 800e09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09c:	4413      	add	r3, r2
 800e09e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e0a2:	460a      	mov	r2, r1
 800e0a4:	701a      	strb	r2, [r3, #0]
 800e0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ae:	2b0f      	cmp	r3, #15
 800e0b0:	dde5      	ble.n	800e07e <AES_CMAC_Final+0xf2>
 800e0b2:	e096      	b.n	800e1e2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e0b4:	7f3b      	ldrb	r3, [r7, #28]
 800e0b6:	b25b      	sxtb	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	da30      	bge.n	800e11e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e0bc:	2300      	movs	r3, #0
 800e0be:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0c0:	e01b      	b.n	800e0fa <AES_CMAC_Final+0x16e>
 800e0c2:	f107 021c 	add.w	r2, r7, #28
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	4413      	add	r3, r2
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	b25a      	sxtb	r2, r3
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	3348      	adds	r3, #72	; 0x48
 800e0d6:	443b      	add	r3, r7
 800e0d8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0dc:	09db      	lsrs	r3, r3, #7
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	b25b      	sxtb	r3, r3
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	b25b      	sxtb	r3, r3
 800e0e6:	b2d9      	uxtb	r1, r3
 800e0e8:	f107 021c 	add.w	r2, r7, #28
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ee:	4413      	add	r3, r2
 800e0f0:	460a      	mov	r2, r1
 800e0f2:	701a      	strb	r2, [r3, #0]
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	2b0e      	cmp	r3, #14
 800e0fe:	dde0      	ble.n	800e0c2 <AES_CMAC_Final+0x136>
 800e100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e10c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e110:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e114:	43db      	mvns	r3, r3
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e11c:	e027      	b.n	800e16e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e11e:	2300      	movs	r3, #0
 800e120:	637b      	str	r3, [r7, #52]	; 0x34
 800e122:	e01b      	b.n	800e15c <AES_CMAC_Final+0x1d0>
 800e124:	f107 021c 	add.w	r2, r7, #28
 800e128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12a:	4413      	add	r3, r2
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	005b      	lsls	r3, r3, #1
 800e130:	b25a      	sxtb	r2, r3
 800e132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e134:	3301      	adds	r3, #1
 800e136:	3348      	adds	r3, #72	; 0x48
 800e138:	443b      	add	r3, r7
 800e13a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e13e:	09db      	lsrs	r3, r3, #7
 800e140:	b2db      	uxtb	r3, r3
 800e142:	b25b      	sxtb	r3, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	b25b      	sxtb	r3, r3
 800e148:	b2d9      	uxtb	r1, r3
 800e14a:	f107 021c 	add.w	r2, r7, #28
 800e14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e150:	4413      	add	r3, r2
 800e152:	460a      	mov	r2, r1
 800e154:	701a      	strb	r2, [r3, #0]
 800e156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e158:	3301      	adds	r3, #1
 800e15a:	637b      	str	r3, [r7, #52]	; 0x34
 800e15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15e:	2b0e      	cmp	r3, #14
 800e160:	dde0      	ble.n	800e124 <AES_CMAC_Final+0x198>
 800e162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	4413      	add	r3, r2
 800e178:	2280      	movs	r2, #128	; 0x80
 800e17a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e17e:	e007      	b.n	800e190 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	4413      	add	r3, r2
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e1a4:	2b0f      	cmp	r3, #15
 800e1a6:	d9eb      	bls.n	800e180 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ac:	e016      	b.n	800e1dc <AES_CMAC_Final+0x250>
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1b8:	781a      	ldrb	r2, [r3, #0]
 800e1ba:	f107 011c 	add.w	r1, r7, #28
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	440b      	add	r3, r1
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	4053      	eors	r3, r2
 800e1c6:	b2d9      	uxtb	r1, r3
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	4413      	add	r3, r2
 800e1ce:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1d2:	460a      	mov	r2, r1
 800e1d4:	701a      	strb	r2, [r3, #0]
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	3301      	adds	r3, #1
 800e1da:	633b      	str	r3, [r7, #48]	; 0x30
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	2b0f      	cmp	r3, #15
 800e1e0:	dde5      	ble.n	800e1ae <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e6:	e015      	b.n	800e214 <AES_CMAC_Final+0x288>
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	4413      	add	r3, r2
 800e1ee:	33f1      	adds	r3, #241	; 0xf1
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	440b      	add	r3, r1
 800e1f8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	4053      	eors	r3, r2
 800e200:	b2d9      	uxtb	r1, r3
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	4413      	add	r3, r2
 800e208:	33f1      	adds	r3, #241	; 0xf1
 800e20a:	460a      	mov	r2, r1
 800e20c:	701a      	strb	r2, [r3, #0]
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	3301      	adds	r3, #1
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	2b0f      	cmp	r3, #15
 800e218:	dde6      	ble.n	800e1e8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e220:	f107 030c 	add.w	r3, r7, #12
 800e224:	2210      	movs	r2, #16
 800e226:	4618      	mov	r0, r3
 800e228:	f00b fe0b 	bl	8019e42 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e22c:	683a      	ldr	r2, [r7, #0]
 800e22e:	f107 030c 	add.w	r3, r7, #12
 800e232:	6879      	ldr	r1, [r7, #4]
 800e234:	4618      	mov	r0, r3
 800e236:	f000 fd1d 	bl	800ec74 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e23a:	f107 031c 	add.w	r3, r7, #28
 800e23e:	2210      	movs	r2, #16
 800e240:	2100      	movs	r1, #0
 800e242:	4618      	mov	r0, r3
 800e244:	f00b fe38 	bl	8019eb8 <memset1>
}
 800e248:	bf00      	nop
 800e24a:	3748      	adds	r7, #72	; 0x48
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	3301      	adds	r3, #1
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	7852      	ldrb	r2, [r2, #1]
 800e26a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3302      	adds	r3, #2
 800e270:	683a      	ldr	r2, [r7, #0]
 800e272:	7892      	ldrb	r2, [r2, #2]
 800e274:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	3303      	adds	r3, #3
 800e27a:	683a      	ldr	r2, [r7, #0]
 800e27c:	78d2      	ldrb	r2, [r2, #3]
 800e27e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	7912      	ldrb	r2, [r2, #4]
 800e288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3305      	adds	r3, #5
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	7952      	ldrb	r2, [r2, #5]
 800e292:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	3306      	adds	r3, #6
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	7992      	ldrb	r2, [r2, #6]
 800e29c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	79d2      	ldrb	r2, [r2, #7]
 800e2a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	7a12      	ldrb	r2, [r2, #8]
 800e2b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3309      	adds	r3, #9
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	7a52      	ldrb	r2, [r2, #9]
 800e2ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	330a      	adds	r3, #10
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	7a92      	ldrb	r2, [r2, #10]
 800e2c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	330b      	adds	r3, #11
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	7ad2      	ldrb	r2, [r2, #11]
 800e2ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	330c      	adds	r3, #12
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	7b12      	ldrb	r2, [r2, #12]
 800e2d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	330d      	adds	r3, #13
 800e2de:	683a      	ldr	r2, [r7, #0]
 800e2e0:	7b52      	ldrb	r2, [r2, #13]
 800e2e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	330e      	adds	r3, #14
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	7b92      	ldrb	r2, [r2, #14]
 800e2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	330f      	adds	r3, #15
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	7bd2      	ldrb	r2, [r2, #15]
 800e2f6:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bc80      	pop	{r7}
 800e300:	4770      	bx	lr

0800e302 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	60f8      	str	r0, [r7, #12]
 800e30a:	60b9      	str	r1, [r7, #8]
 800e30c:	4613      	mov	r3, r2
 800e30e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e310:	e007      	b.n	800e322 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	1c53      	adds	r3, r2, #1
 800e316:	60bb      	str	r3, [r7, #8]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	1c59      	adds	r1, r3, #1
 800e31c:	60f9      	str	r1, [r7, #12]
 800e31e:	7812      	ldrb	r2, [r2, #0]
 800e320:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	1e5a      	subs	r2, r3, #1
 800e326:	71fa      	strb	r2, [r7, #7]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1f2      	bne.n	800e312 <copy_block_nn+0x10>
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	bc80      	pop	{r7}
 800e336:	4770      	bx	lr

0800e338 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	4053      	eors	r3, r2
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	3301      	adds	r3, #1
 800e356:	7819      	ldrb	r1, [r3, #0]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	3301      	adds	r3, #1
 800e35c:	781a      	ldrb	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3301      	adds	r3, #1
 800e362:	404a      	eors	r2, r1
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3302      	adds	r3, #2
 800e36c:	7819      	ldrb	r1, [r3, #0]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	3302      	adds	r3, #2
 800e372:	781a      	ldrb	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3302      	adds	r3, #2
 800e378:	404a      	eors	r2, r1
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3303      	adds	r3, #3
 800e382:	7819      	ldrb	r1, [r3, #0]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	3303      	adds	r3, #3
 800e388:	781a      	ldrb	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3303      	adds	r3, #3
 800e38e:	404a      	eors	r2, r1
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3304      	adds	r3, #4
 800e398:	7819      	ldrb	r1, [r3, #0]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	3304      	adds	r3, #4
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	404a      	eors	r2, r1
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3305      	adds	r3, #5
 800e3ae:	7819      	ldrb	r1, [r3, #0]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	3305      	adds	r3, #5
 800e3b4:	781a      	ldrb	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3305      	adds	r3, #5
 800e3ba:	404a      	eors	r2, r1
 800e3bc:	b2d2      	uxtb	r2, r2
 800e3be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3306      	adds	r3, #6
 800e3c4:	7819      	ldrb	r1, [r3, #0]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	3306      	adds	r3, #6
 800e3ca:	781a      	ldrb	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3306      	adds	r3, #6
 800e3d0:	404a      	eors	r2, r1
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3307      	adds	r3, #7
 800e3da:	7819      	ldrb	r1, [r3, #0]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	3307      	adds	r3, #7
 800e3e0:	781a      	ldrb	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3307      	adds	r3, #7
 800e3e6:	404a      	eors	r2, r1
 800e3e8:	b2d2      	uxtb	r2, r2
 800e3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	7819      	ldrb	r1, [r3, #0]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	3308      	adds	r3, #8
 800e3f6:	781a      	ldrb	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	404a      	eors	r2, r1
 800e3fe:	b2d2      	uxtb	r2, r2
 800e400:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3309      	adds	r3, #9
 800e406:	7819      	ldrb	r1, [r3, #0]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	3309      	adds	r3, #9
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	3309      	adds	r3, #9
 800e412:	404a      	eors	r2, r1
 800e414:	b2d2      	uxtb	r2, r2
 800e416:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	330a      	adds	r3, #10
 800e41c:	7819      	ldrb	r1, [r3, #0]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	330a      	adds	r3, #10
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	330a      	adds	r3, #10
 800e428:	404a      	eors	r2, r1
 800e42a:	b2d2      	uxtb	r2, r2
 800e42c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	330b      	adds	r3, #11
 800e432:	7819      	ldrb	r1, [r3, #0]
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	330b      	adds	r3, #11
 800e438:	781a      	ldrb	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	330b      	adds	r3, #11
 800e43e:	404a      	eors	r2, r1
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	330c      	adds	r3, #12
 800e448:	7819      	ldrb	r1, [r3, #0]
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	330c      	adds	r3, #12
 800e44e:	781a      	ldrb	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	330c      	adds	r3, #12
 800e454:	404a      	eors	r2, r1
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	330d      	adds	r3, #13
 800e45e:	7819      	ldrb	r1, [r3, #0]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	330d      	adds	r3, #13
 800e464:	781a      	ldrb	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	330d      	adds	r3, #13
 800e46a:	404a      	eors	r2, r1
 800e46c:	b2d2      	uxtb	r2, r2
 800e46e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	330e      	adds	r3, #14
 800e474:	7819      	ldrb	r1, [r3, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	330e      	adds	r3, #14
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	330e      	adds	r3, #14
 800e480:	404a      	eors	r2, r1
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	330f      	adds	r3, #15
 800e48a:	7819      	ldrb	r1, [r3, #0]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	330f      	adds	r3, #15
 800e490:	781a      	ldrb	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	330f      	adds	r3, #15
 800e496:	404a      	eors	r2, r1
 800e498:	b2d2      	uxtb	r2, r2
 800e49a:	701a      	strb	r2, [r3, #0]
#endif
}
 800e49c:	bf00      	nop
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bc80      	pop	{r7}
 800e4a4:	4770      	bx	lr

0800e4a6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b085      	sub	sp, #20
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	60f8      	str	r0, [r7, #12]
 800e4ae:	60b9      	str	r1, [r7, #8]
 800e4b0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	781a      	ldrb	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	4053      	eors	r3, r2
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	7819      	ldrb	r1, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	404a      	eors	r2, r1
 800e4d4:	b2d2      	uxtb	r2, r2
 800e4d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	3302      	adds	r3, #2
 800e4dc:	7819      	ldrb	r1, [r3, #0]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3302      	adds	r3, #2
 800e4e2:	781a      	ldrb	r2, [r3, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3302      	adds	r3, #2
 800e4e8:	404a      	eors	r2, r1
 800e4ea:	b2d2      	uxtb	r2, r2
 800e4ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	3303      	adds	r3, #3
 800e4f2:	7819      	ldrb	r1, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3303      	adds	r3, #3
 800e4f8:	781a      	ldrb	r2, [r3, #0]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3303      	adds	r3, #3
 800e4fe:	404a      	eors	r2, r1
 800e500:	b2d2      	uxtb	r2, r2
 800e502:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	3304      	adds	r3, #4
 800e508:	7819      	ldrb	r1, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	3304      	adds	r3, #4
 800e50e:	781a      	ldrb	r2, [r3, #0]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3304      	adds	r3, #4
 800e514:	404a      	eors	r2, r1
 800e516:	b2d2      	uxtb	r2, r2
 800e518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	3305      	adds	r3, #5
 800e51e:	7819      	ldrb	r1, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3305      	adds	r3, #5
 800e524:	781a      	ldrb	r2, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3305      	adds	r3, #5
 800e52a:	404a      	eors	r2, r1
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	3306      	adds	r3, #6
 800e534:	7819      	ldrb	r1, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	3306      	adds	r3, #6
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	3306      	adds	r3, #6
 800e540:	404a      	eors	r2, r1
 800e542:	b2d2      	uxtb	r2, r2
 800e544:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	3307      	adds	r3, #7
 800e54a:	7819      	ldrb	r1, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3307      	adds	r3, #7
 800e550:	781a      	ldrb	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3307      	adds	r3, #7
 800e556:	404a      	eors	r2, r1
 800e558:	b2d2      	uxtb	r2, r2
 800e55a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	3308      	adds	r3, #8
 800e560:	7819      	ldrb	r1, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3308      	adds	r3, #8
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3308      	adds	r3, #8
 800e56c:	404a      	eors	r2, r1
 800e56e:	b2d2      	uxtb	r2, r2
 800e570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	3309      	adds	r3, #9
 800e576:	7819      	ldrb	r1, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3309      	adds	r3, #9
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	3309      	adds	r3, #9
 800e582:	404a      	eors	r2, r1
 800e584:	b2d2      	uxtb	r2, r2
 800e586:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	330a      	adds	r3, #10
 800e58c:	7819      	ldrb	r1, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	330a      	adds	r3, #10
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	330a      	adds	r3, #10
 800e598:	404a      	eors	r2, r1
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	330b      	adds	r3, #11
 800e5a2:	7819      	ldrb	r1, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	330b      	adds	r3, #11
 800e5a8:	781a      	ldrb	r2, [r3, #0]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	330b      	adds	r3, #11
 800e5ae:	404a      	eors	r2, r1
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	330c      	adds	r3, #12
 800e5b8:	7819      	ldrb	r1, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	330c      	adds	r3, #12
 800e5be:	781a      	ldrb	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	330c      	adds	r3, #12
 800e5c4:	404a      	eors	r2, r1
 800e5c6:	b2d2      	uxtb	r2, r2
 800e5c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	330d      	adds	r3, #13
 800e5ce:	7819      	ldrb	r1, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	330d      	adds	r3, #13
 800e5d4:	781a      	ldrb	r2, [r3, #0]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	330d      	adds	r3, #13
 800e5da:	404a      	eors	r2, r1
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	330e      	adds	r3, #14
 800e5e4:	7819      	ldrb	r1, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	330e      	adds	r3, #14
 800e5ea:	781a      	ldrb	r2, [r3, #0]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	330e      	adds	r3, #14
 800e5f0:	404a      	eors	r2, r1
 800e5f2:	b2d2      	uxtb	r2, r2
 800e5f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	330f      	adds	r3, #15
 800e5fa:	7819      	ldrb	r1, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	330f      	adds	r3, #15
 800e600:	781a      	ldrb	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	330f      	adds	r3, #15
 800e606:	404a      	eors	r2, r1
 800e608:	b2d2      	uxtb	r2, r2
 800e60a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e60c:	bf00      	nop
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	bc80      	pop	{r7}
 800e614:	4770      	bx	lr

0800e616 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b082      	sub	sp, #8
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff fe88 	bl	800e338 <xor_block>
}
 800e628:	bf00      	nop
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	461a      	mov	r2, r3
 800e63e:	4b48      	ldr	r3, [pc, #288]	; (800e760 <shift_sub_rows+0x130>)
 800e640:	5c9a      	ldrb	r2, [r3, r2]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	3304      	adds	r3, #4
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	4619      	mov	r1, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3304      	adds	r3, #4
 800e652:	4a43      	ldr	r2, [pc, #268]	; (800e760 <shift_sub_rows+0x130>)
 800e654:	5c52      	ldrb	r2, [r2, r1]
 800e656:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3308      	adds	r3, #8
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	4619      	mov	r1, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3308      	adds	r3, #8
 800e664:	4a3e      	ldr	r2, [pc, #248]	; (800e760 <shift_sub_rows+0x130>)
 800e666:	5c52      	ldrb	r2, [r2, r1]
 800e668:	701a      	strb	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	330c      	adds	r3, #12
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	4619      	mov	r1, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	330c      	adds	r3, #12
 800e676:	4a3a      	ldr	r2, [pc, #232]	; (800e760 <shift_sub_rows+0x130>)
 800e678:	5c52      	ldrb	r2, [r2, r1]
 800e67a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	785b      	ldrb	r3, [r3, #1]
 800e680:	73fb      	strb	r3, [r7, #15]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3305      	adds	r3, #5
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	4619      	mov	r1, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3301      	adds	r3, #1
 800e68e:	4a34      	ldr	r2, [pc, #208]	; (800e760 <shift_sub_rows+0x130>)
 800e690:	5c52      	ldrb	r2, [r2, r1]
 800e692:	701a      	strb	r2, [r3, #0]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	3309      	adds	r3, #9
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	3305      	adds	r3, #5
 800e6a0:	4a2f      	ldr	r2, [pc, #188]	; (800e760 <shift_sub_rows+0x130>)
 800e6a2:	5c52      	ldrb	r2, [r2, r1]
 800e6a4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	330d      	adds	r3, #13
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	3309      	adds	r3, #9
 800e6b2:	4a2b      	ldr	r2, [pc, #172]	; (800e760 <shift_sub_rows+0x130>)
 800e6b4:	5c52      	ldrb	r2, [r2, r1]
 800e6b6:	701a      	strb	r2, [r3, #0]
 800e6b8:	7bfa      	ldrb	r2, [r7, #15]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	330d      	adds	r3, #13
 800e6be:	4928      	ldr	r1, [pc, #160]	; (800e760 <shift_sub_rows+0x130>)
 800e6c0:	5c8a      	ldrb	r2, [r1, r2]
 800e6c2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	789b      	ldrb	r3, [r3, #2]
 800e6c8:	73fb      	strb	r3, [r7, #15]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	330a      	adds	r3, #10
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	3302      	adds	r3, #2
 800e6d6:	4a22      	ldr	r2, [pc, #136]	; (800e760 <shift_sub_rows+0x130>)
 800e6d8:	5c52      	ldrb	r2, [r2, r1]
 800e6da:	701a      	strb	r2, [r3, #0]
 800e6dc:	7bfa      	ldrb	r2, [r7, #15]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	330a      	adds	r3, #10
 800e6e2:	491f      	ldr	r1, [pc, #124]	; (800e760 <shift_sub_rows+0x130>)
 800e6e4:	5c8a      	ldrb	r2, [r1, r2]
 800e6e6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	799b      	ldrb	r3, [r3, #6]
 800e6ec:	73fb      	strb	r3, [r7, #15]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	330e      	adds	r3, #14
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3306      	adds	r3, #6
 800e6fa:	4a19      	ldr	r2, [pc, #100]	; (800e760 <shift_sub_rows+0x130>)
 800e6fc:	5c52      	ldrb	r2, [r2, r1]
 800e6fe:	701a      	strb	r2, [r3, #0]
 800e700:	7bfa      	ldrb	r2, [r7, #15]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	330e      	adds	r3, #14
 800e706:	4916      	ldr	r1, [pc, #88]	; (800e760 <shift_sub_rows+0x130>)
 800e708:	5c8a      	ldrb	r2, [r1, r2]
 800e70a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	7bdb      	ldrb	r3, [r3, #15]
 800e710:	73fb      	strb	r3, [r7, #15]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	330b      	adds	r3, #11
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	4619      	mov	r1, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	330f      	adds	r3, #15
 800e71e:	4a10      	ldr	r2, [pc, #64]	; (800e760 <shift_sub_rows+0x130>)
 800e720:	5c52      	ldrb	r2, [r2, r1]
 800e722:	701a      	strb	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3307      	adds	r3, #7
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	4619      	mov	r1, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	330b      	adds	r3, #11
 800e730:	4a0b      	ldr	r2, [pc, #44]	; (800e760 <shift_sub_rows+0x130>)
 800e732:	5c52      	ldrb	r2, [r2, r1]
 800e734:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	3303      	adds	r3, #3
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	4619      	mov	r1, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3307      	adds	r3, #7
 800e742:	4a07      	ldr	r2, [pc, #28]	; (800e760 <shift_sub_rows+0x130>)
 800e744:	5c52      	ldrb	r2, [r2, r1]
 800e746:	701a      	strb	r2, [r3, #0]
 800e748:	7bfa      	ldrb	r2, [r7, #15]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3303      	adds	r3, #3
 800e74e:	4904      	ldr	r1, [pc, #16]	; (800e760 <shift_sub_rows+0x130>)
 800e750:	5c8a      	ldrb	r2, [r1, r2]
 800e752:	701a      	strb	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	bc80      	pop	{r7}
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	0801f64c 	.word	0x0801f64c

0800e764 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e76c:	f107 0308 	add.w	r3, r7, #8
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4618      	mov	r0, r3
 800e774:	f7ff fd6c 	bl	800e250 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e778:	7a3b      	ldrb	r3, [r7, #8]
 800e77a:	461a      	mov	r2, r3
 800e77c:	4b9a      	ldr	r3, [pc, #616]	; (800e9e8 <mix_sub_columns+0x284>)
 800e77e:	5c9a      	ldrb	r2, [r3, r2]
 800e780:	7b7b      	ldrb	r3, [r7, #13]
 800e782:	4619      	mov	r1, r3
 800e784:	4b99      	ldr	r3, [pc, #612]	; (800e9ec <mix_sub_columns+0x288>)
 800e786:	5c5b      	ldrb	r3, [r3, r1]
 800e788:	4053      	eors	r3, r2
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	7cbb      	ldrb	r3, [r7, #18]
 800e78e:	4619      	mov	r1, r3
 800e790:	4b97      	ldr	r3, [pc, #604]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e792:	5c5b      	ldrb	r3, [r3, r1]
 800e794:	4053      	eors	r3, r2
 800e796:	b2da      	uxtb	r2, r3
 800e798:	7dfb      	ldrb	r3, [r7, #23]
 800e79a:	4619      	mov	r1, r3
 800e79c:	4b94      	ldr	r3, [pc, #592]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e79e:	5c5b      	ldrb	r3, [r3, r1]
 800e7a0:	4053      	eors	r3, r2
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e7a8:	7a3b      	ldrb	r3, [r7, #8]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4b90      	ldr	r3, [pc, #576]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e7ae:	5c9a      	ldrb	r2, [r3, r2]
 800e7b0:	7b7b      	ldrb	r3, [r7, #13]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4b8c      	ldr	r3, [pc, #560]	; (800e9e8 <mix_sub_columns+0x284>)
 800e7b6:	5c5b      	ldrb	r3, [r3, r1]
 800e7b8:	4053      	eors	r3, r2
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	7cbb      	ldrb	r3, [r7, #18]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4b8a      	ldr	r3, [pc, #552]	; (800e9ec <mix_sub_columns+0x288>)
 800e7c2:	5c5b      	ldrb	r3, [r3, r1]
 800e7c4:	4053      	eors	r3, r2
 800e7c6:	b2d9      	uxtb	r1, r3
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	4b88      	ldr	r3, [pc, #544]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e7ce:	5c9a      	ldrb	r2, [r3, r2]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	404a      	eors	r2, r1
 800e7d6:	b2d2      	uxtb	r2, r2
 800e7d8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e7da:	7a3b      	ldrb	r3, [r7, #8]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4b84      	ldr	r3, [pc, #528]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e7e0:	5c9a      	ldrb	r2, [r3, r2]
 800e7e2:	7b7b      	ldrb	r3, [r7, #13]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4b82      	ldr	r3, [pc, #520]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e7e8:	5c5b      	ldrb	r3, [r3, r1]
 800e7ea:	4053      	eors	r3, r2
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	7cbb      	ldrb	r3, [r7, #18]
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	4b7d      	ldr	r3, [pc, #500]	; (800e9e8 <mix_sub_columns+0x284>)
 800e7f4:	5c5b      	ldrb	r3, [r3, r1]
 800e7f6:	4053      	eors	r3, r2
 800e7f8:	b2d9      	uxtb	r1, r3
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4b7b      	ldr	r3, [pc, #492]	; (800e9ec <mix_sub_columns+0x288>)
 800e800:	5c9a      	ldrb	r2, [r3, r2]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3302      	adds	r3, #2
 800e806:	404a      	eors	r2, r1
 800e808:	b2d2      	uxtb	r2, r2
 800e80a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e80c:	7a3b      	ldrb	r3, [r7, #8]
 800e80e:	461a      	mov	r2, r3
 800e810:	4b76      	ldr	r3, [pc, #472]	; (800e9ec <mix_sub_columns+0x288>)
 800e812:	5c9a      	ldrb	r2, [r3, r2]
 800e814:	7b7b      	ldrb	r3, [r7, #13]
 800e816:	4619      	mov	r1, r3
 800e818:	4b75      	ldr	r3, [pc, #468]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e81a:	5c5b      	ldrb	r3, [r3, r1]
 800e81c:	4053      	eors	r3, r2
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	7cbb      	ldrb	r3, [r7, #18]
 800e822:	4619      	mov	r1, r3
 800e824:	4b72      	ldr	r3, [pc, #456]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e826:	5c5b      	ldrb	r3, [r3, r1]
 800e828:	4053      	eors	r3, r2
 800e82a:	b2d9      	uxtb	r1, r3
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	461a      	mov	r2, r3
 800e830:	4b6d      	ldr	r3, [pc, #436]	; (800e9e8 <mix_sub_columns+0x284>)
 800e832:	5c9a      	ldrb	r2, [r3, r2]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3303      	adds	r3, #3
 800e838:	404a      	eors	r2, r1
 800e83a:	b2d2      	uxtb	r2, r2
 800e83c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e83e:	7b3b      	ldrb	r3, [r7, #12]
 800e840:	461a      	mov	r2, r3
 800e842:	4b69      	ldr	r3, [pc, #420]	; (800e9e8 <mix_sub_columns+0x284>)
 800e844:	5c9a      	ldrb	r2, [r3, r2]
 800e846:	7c7b      	ldrb	r3, [r7, #17]
 800e848:	4619      	mov	r1, r3
 800e84a:	4b68      	ldr	r3, [pc, #416]	; (800e9ec <mix_sub_columns+0x288>)
 800e84c:	5c5b      	ldrb	r3, [r3, r1]
 800e84e:	4053      	eors	r3, r2
 800e850:	b2da      	uxtb	r2, r3
 800e852:	7dbb      	ldrb	r3, [r7, #22]
 800e854:	4619      	mov	r1, r3
 800e856:	4b66      	ldr	r3, [pc, #408]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e858:	5c5b      	ldrb	r3, [r3, r1]
 800e85a:	4053      	eors	r3, r2
 800e85c:	b2d9      	uxtb	r1, r3
 800e85e:	7afb      	ldrb	r3, [r7, #11]
 800e860:	461a      	mov	r2, r3
 800e862:	4b63      	ldr	r3, [pc, #396]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e864:	5c9a      	ldrb	r2, [r3, r2]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	3304      	adds	r3, #4
 800e86a:	404a      	eors	r2, r1
 800e86c:	b2d2      	uxtb	r2, r2
 800e86e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e870:	7b3b      	ldrb	r3, [r7, #12]
 800e872:	461a      	mov	r2, r3
 800e874:	4b5e      	ldr	r3, [pc, #376]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e876:	5c9a      	ldrb	r2, [r3, r2]
 800e878:	7c7b      	ldrb	r3, [r7, #17]
 800e87a:	4619      	mov	r1, r3
 800e87c:	4b5a      	ldr	r3, [pc, #360]	; (800e9e8 <mix_sub_columns+0x284>)
 800e87e:	5c5b      	ldrb	r3, [r3, r1]
 800e880:	4053      	eors	r3, r2
 800e882:	b2da      	uxtb	r2, r3
 800e884:	7dbb      	ldrb	r3, [r7, #22]
 800e886:	4619      	mov	r1, r3
 800e888:	4b58      	ldr	r3, [pc, #352]	; (800e9ec <mix_sub_columns+0x288>)
 800e88a:	5c5b      	ldrb	r3, [r3, r1]
 800e88c:	4053      	eors	r3, r2
 800e88e:	b2d9      	uxtb	r1, r3
 800e890:	7afb      	ldrb	r3, [r7, #11]
 800e892:	461a      	mov	r2, r3
 800e894:	4b56      	ldr	r3, [pc, #344]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e896:	5c9a      	ldrb	r2, [r3, r2]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	3305      	adds	r3, #5
 800e89c:	404a      	eors	r2, r1
 800e89e:	b2d2      	uxtb	r2, r2
 800e8a0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e8a2:	7b3b      	ldrb	r3, [r7, #12]
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4b52      	ldr	r3, [pc, #328]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e8a8:	5c9a      	ldrb	r2, [r3, r2]
 800e8aa:	7c7b      	ldrb	r3, [r7, #17]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4b50      	ldr	r3, [pc, #320]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e8b0:	5c5b      	ldrb	r3, [r3, r1]
 800e8b2:	4053      	eors	r3, r2
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	7dbb      	ldrb	r3, [r7, #22]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4b4b      	ldr	r3, [pc, #300]	; (800e9e8 <mix_sub_columns+0x284>)
 800e8bc:	5c5b      	ldrb	r3, [r3, r1]
 800e8be:	4053      	eors	r3, r2
 800e8c0:	b2d9      	uxtb	r1, r3
 800e8c2:	7afb      	ldrb	r3, [r7, #11]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4b49      	ldr	r3, [pc, #292]	; (800e9ec <mix_sub_columns+0x288>)
 800e8c8:	5c9a      	ldrb	r2, [r3, r2]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3306      	adds	r3, #6
 800e8ce:	404a      	eors	r2, r1
 800e8d0:	b2d2      	uxtb	r2, r2
 800e8d2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e8d4:	7b3b      	ldrb	r3, [r7, #12]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	4b44      	ldr	r3, [pc, #272]	; (800e9ec <mix_sub_columns+0x288>)
 800e8da:	5c9a      	ldrb	r2, [r3, r2]
 800e8dc:	7c7b      	ldrb	r3, [r7, #17]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4b43      	ldr	r3, [pc, #268]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e8e2:	5c5b      	ldrb	r3, [r3, r1]
 800e8e4:	4053      	eors	r3, r2
 800e8e6:	b2da      	uxtb	r2, r3
 800e8e8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	4b40      	ldr	r3, [pc, #256]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e8ee:	5c5b      	ldrb	r3, [r3, r1]
 800e8f0:	4053      	eors	r3, r2
 800e8f2:	b2d9      	uxtb	r1, r3
 800e8f4:	7afb      	ldrb	r3, [r7, #11]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	4b3b      	ldr	r3, [pc, #236]	; (800e9e8 <mix_sub_columns+0x284>)
 800e8fa:	5c9a      	ldrb	r2, [r3, r2]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3307      	adds	r3, #7
 800e900:	404a      	eors	r2, r1
 800e902:	b2d2      	uxtb	r2, r2
 800e904:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e906:	7c3b      	ldrb	r3, [r7, #16]
 800e908:	461a      	mov	r2, r3
 800e90a:	4b37      	ldr	r3, [pc, #220]	; (800e9e8 <mix_sub_columns+0x284>)
 800e90c:	5c9a      	ldrb	r2, [r3, r2]
 800e90e:	7d7b      	ldrb	r3, [r7, #21]
 800e910:	4619      	mov	r1, r3
 800e912:	4b36      	ldr	r3, [pc, #216]	; (800e9ec <mix_sub_columns+0x288>)
 800e914:	5c5b      	ldrb	r3, [r3, r1]
 800e916:	4053      	eors	r3, r2
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	7abb      	ldrb	r3, [r7, #10]
 800e91c:	4619      	mov	r1, r3
 800e91e:	4b34      	ldr	r3, [pc, #208]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e920:	5c5b      	ldrb	r3, [r3, r1]
 800e922:	4053      	eors	r3, r2
 800e924:	b2d9      	uxtb	r1, r3
 800e926:	7bfb      	ldrb	r3, [r7, #15]
 800e928:	461a      	mov	r2, r3
 800e92a:	4b31      	ldr	r3, [pc, #196]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e92c:	5c9a      	ldrb	r2, [r3, r2]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	3308      	adds	r3, #8
 800e932:	404a      	eors	r2, r1
 800e934:	b2d2      	uxtb	r2, r2
 800e936:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e938:	7c3b      	ldrb	r3, [r7, #16]
 800e93a:	461a      	mov	r2, r3
 800e93c:	4b2c      	ldr	r3, [pc, #176]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e93e:	5c9a      	ldrb	r2, [r3, r2]
 800e940:	7d7b      	ldrb	r3, [r7, #21]
 800e942:	4619      	mov	r1, r3
 800e944:	4b28      	ldr	r3, [pc, #160]	; (800e9e8 <mix_sub_columns+0x284>)
 800e946:	5c5b      	ldrb	r3, [r3, r1]
 800e948:	4053      	eors	r3, r2
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	7abb      	ldrb	r3, [r7, #10]
 800e94e:	4619      	mov	r1, r3
 800e950:	4b26      	ldr	r3, [pc, #152]	; (800e9ec <mix_sub_columns+0x288>)
 800e952:	5c5b      	ldrb	r3, [r3, r1]
 800e954:	4053      	eors	r3, r2
 800e956:	b2d9      	uxtb	r1, r3
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	461a      	mov	r2, r3
 800e95c:	4b24      	ldr	r3, [pc, #144]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e95e:	5c9a      	ldrb	r2, [r3, r2]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3309      	adds	r3, #9
 800e964:	404a      	eors	r2, r1
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e96a:	7c3b      	ldrb	r3, [r7, #16]
 800e96c:	461a      	mov	r2, r3
 800e96e:	4b20      	ldr	r3, [pc, #128]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e970:	5c9a      	ldrb	r2, [r3, r2]
 800e972:	7d7b      	ldrb	r3, [r7, #21]
 800e974:	4619      	mov	r1, r3
 800e976:	4b1e      	ldr	r3, [pc, #120]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e978:	5c5b      	ldrb	r3, [r3, r1]
 800e97a:	4053      	eors	r3, r2
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	7abb      	ldrb	r3, [r7, #10]
 800e980:	4619      	mov	r1, r3
 800e982:	4b19      	ldr	r3, [pc, #100]	; (800e9e8 <mix_sub_columns+0x284>)
 800e984:	5c5b      	ldrb	r3, [r3, r1]
 800e986:	4053      	eors	r3, r2
 800e988:	b2d9      	uxtb	r1, r3
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
 800e98c:	461a      	mov	r2, r3
 800e98e:	4b17      	ldr	r3, [pc, #92]	; (800e9ec <mix_sub_columns+0x288>)
 800e990:	5c9a      	ldrb	r2, [r3, r2]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	330a      	adds	r3, #10
 800e996:	404a      	eors	r2, r1
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e99c:	7c3b      	ldrb	r3, [r7, #16]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	4b12      	ldr	r3, [pc, #72]	; (800e9ec <mix_sub_columns+0x288>)
 800e9a2:	5c9a      	ldrb	r2, [r3, r2]
 800e9a4:	7d7b      	ldrb	r3, [r7, #21]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e9aa:	5c5b      	ldrb	r3, [r3, r1]
 800e9ac:	4053      	eors	r3, r2
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	7abb      	ldrb	r3, [r7, #10]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4b0e      	ldr	r3, [pc, #56]	; (800e9f0 <mix_sub_columns+0x28c>)
 800e9b6:	5c5b      	ldrb	r3, [r3, r1]
 800e9b8:	4053      	eors	r3, r2
 800e9ba:	b2d9      	uxtb	r1, r3
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <mix_sub_columns+0x284>)
 800e9c2:	5c9a      	ldrb	r2, [r3, r2]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	330b      	adds	r3, #11
 800e9c8:	404a      	eors	r2, r1
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e9ce:	7d3b      	ldrb	r3, [r7, #20]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <mix_sub_columns+0x284>)
 800e9d4:	5c9a      	ldrb	r2, [r3, r2]
 800e9d6:	7a7b      	ldrb	r3, [r7, #9]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <mix_sub_columns+0x288>)
 800e9dc:	5c5b      	ldrb	r3, [r3, r1]
 800e9de:	4053      	eors	r3, r2
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	7bbb      	ldrb	r3, [r7, #14]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	e005      	b.n	800e9f4 <mix_sub_columns+0x290>
 800e9e8:	0801f74c 	.word	0x0801f74c
 800e9ec:	0801f84c 	.word	0x0801f84c
 800e9f0:	0801f64c 	.word	0x0801f64c
 800e9f4:	4b2d      	ldr	r3, [pc, #180]	; (800eaac <mix_sub_columns+0x348>)
 800e9f6:	5c5b      	ldrb	r3, [r3, r1]
 800e9f8:	4053      	eors	r3, r2
 800e9fa:	b2d9      	uxtb	r1, r3
 800e9fc:	7cfb      	ldrb	r3, [r7, #19]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4b2a      	ldr	r3, [pc, #168]	; (800eaac <mix_sub_columns+0x348>)
 800ea02:	5c9a      	ldrb	r2, [r3, r2]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	330c      	adds	r3, #12
 800ea08:	404a      	eors	r2, r1
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ea0e:	7d3b      	ldrb	r3, [r7, #20]
 800ea10:	461a      	mov	r2, r3
 800ea12:	4b26      	ldr	r3, [pc, #152]	; (800eaac <mix_sub_columns+0x348>)
 800ea14:	5c9a      	ldrb	r2, [r3, r2]
 800ea16:	7a7b      	ldrb	r3, [r7, #9]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4b25      	ldr	r3, [pc, #148]	; (800eab0 <mix_sub_columns+0x34c>)
 800ea1c:	5c5b      	ldrb	r3, [r3, r1]
 800ea1e:	4053      	eors	r3, r2
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	7bbb      	ldrb	r3, [r7, #14]
 800ea24:	4619      	mov	r1, r3
 800ea26:	4b23      	ldr	r3, [pc, #140]	; (800eab4 <mix_sub_columns+0x350>)
 800ea28:	5c5b      	ldrb	r3, [r3, r1]
 800ea2a:	4053      	eors	r3, r2
 800ea2c:	b2d9      	uxtb	r1, r3
 800ea2e:	7cfb      	ldrb	r3, [r7, #19]
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b1e      	ldr	r3, [pc, #120]	; (800eaac <mix_sub_columns+0x348>)
 800ea34:	5c9a      	ldrb	r2, [r3, r2]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	330d      	adds	r3, #13
 800ea3a:	404a      	eors	r2, r1
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ea40:	7d3b      	ldrb	r3, [r7, #20]
 800ea42:	461a      	mov	r2, r3
 800ea44:	4b19      	ldr	r3, [pc, #100]	; (800eaac <mix_sub_columns+0x348>)
 800ea46:	5c9a      	ldrb	r2, [r3, r2]
 800ea48:	7a7b      	ldrb	r3, [r7, #9]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	4b17      	ldr	r3, [pc, #92]	; (800eaac <mix_sub_columns+0x348>)
 800ea4e:	5c5b      	ldrb	r3, [r3, r1]
 800ea50:	4053      	eors	r3, r2
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	7bbb      	ldrb	r3, [r7, #14]
 800ea56:	4619      	mov	r1, r3
 800ea58:	4b15      	ldr	r3, [pc, #84]	; (800eab0 <mix_sub_columns+0x34c>)
 800ea5a:	5c5b      	ldrb	r3, [r3, r1]
 800ea5c:	4053      	eors	r3, r2
 800ea5e:	b2d9      	uxtb	r1, r3
 800ea60:	7cfb      	ldrb	r3, [r7, #19]
 800ea62:	461a      	mov	r2, r3
 800ea64:	4b13      	ldr	r3, [pc, #76]	; (800eab4 <mix_sub_columns+0x350>)
 800ea66:	5c9a      	ldrb	r2, [r3, r2]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	330e      	adds	r3, #14
 800ea6c:	404a      	eors	r2, r1
 800ea6e:	b2d2      	uxtb	r2, r2
 800ea70:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ea72:	7d3b      	ldrb	r3, [r7, #20]
 800ea74:	461a      	mov	r2, r3
 800ea76:	4b0f      	ldr	r3, [pc, #60]	; (800eab4 <mix_sub_columns+0x350>)
 800ea78:	5c9a      	ldrb	r2, [r3, r2]
 800ea7a:	7a7b      	ldrb	r3, [r7, #9]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <mix_sub_columns+0x348>)
 800ea80:	5c5b      	ldrb	r3, [r3, r1]
 800ea82:	4053      	eors	r3, r2
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	7bbb      	ldrb	r3, [r7, #14]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4b08      	ldr	r3, [pc, #32]	; (800eaac <mix_sub_columns+0x348>)
 800ea8c:	5c5b      	ldrb	r3, [r3, r1]
 800ea8e:	4053      	eors	r3, r2
 800ea90:	b2d9      	uxtb	r1, r3
 800ea92:	7cfb      	ldrb	r3, [r7, #19]
 800ea94:	461a      	mov	r2, r3
 800ea96:	4b06      	ldr	r3, [pc, #24]	; (800eab0 <mix_sub_columns+0x34c>)
 800ea98:	5c9a      	ldrb	r2, [r3, r2]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	330f      	adds	r3, #15
 800ea9e:	404a      	eors	r2, r1
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	701a      	strb	r2, [r3, #0]
  }
 800eaa4:	bf00      	nop
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	0801f64c 	.word	0x0801f64c
 800eab0:	0801f74c 	.word	0x0801f74c
 800eab4:	0801f84c 	.word	0x0801f84c

0800eab8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	460b      	mov	r3, r1
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	3b10      	subs	r3, #16
 800eaca:	2b10      	cmp	r3, #16
 800eacc:	bf8c      	ite	hi
 800eace:	2201      	movhi	r2, #1
 800ead0:	2200      	movls	r2, #0
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	2a00      	cmp	r2, #0
 800ead6:	d10b      	bne.n	800eaf0 <lorawan_aes_set_key+0x38>
 800ead8:	4a64      	ldr	r2, [pc, #400]	; (800ec6c <lorawan_aes_set_key+0x1b4>)
 800eada:	fa22 f303 	lsr.w	r3, r2, r3
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	bf14      	ite	ne
 800eae6:	2301      	movne	r3, #1
 800eae8:	2300      	moveq	r3, #0
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d105      	bne.n	800eafc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800eaf8:	23ff      	movs	r3, #255	; 0xff
 800eafa:	e0b2      	b.n	800ec62 <lorawan_aes_set_key+0x1aa>
        break;
 800eafc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7afa      	ldrb	r2, [r7, #11]
 800eb02:	68f9      	ldr	r1, [r7, #12]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fbfc 	bl	800e302 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800eb0a:	7afb      	ldrb	r3, [r7, #11]
 800eb0c:	331c      	adds	r3, #28
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800eb14:	7c7b      	ldrb	r3, [r7, #17]
 800eb16:	091b      	lsrs	r3, r3, #4
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	75fb      	strb	r3, [r7, #23]
 800eb28:	2301      	movs	r3, #1
 800eb2a:	75bb      	strb	r3, [r7, #22]
 800eb2c:	e093      	b.n	800ec56 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
 800eb30:	3b04      	subs	r3, #4
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	5cd3      	ldrb	r3, [r2, r3]
 800eb36:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
 800eb3a:	3b03      	subs	r3, #3
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	5cd3      	ldrb	r3, [r2, r3]
 800eb40:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800eb42:	7dfb      	ldrb	r3, [r7, #23]
 800eb44:	3b02      	subs	r3, #2
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	5cd3      	ldrb	r3, [r2, r3]
 800eb4a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	5cd3      	ldrb	r3, [r2, r3]
 800eb54:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eb56:	7dfb      	ldrb	r3, [r7, #23]
 800eb58:	7afa      	ldrb	r2, [r7, #11]
 800eb5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb5e:	fb01 f202 	mul.w	r2, r1, r2
 800eb62:	1a9b      	subs	r3, r3, r2
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d127      	bne.n	800ebba <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eb6a:	7d7b      	ldrb	r3, [r7, #21]
 800eb6c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eb6e:	7d3b      	ldrb	r3, [r7, #20]
 800eb70:	4a3f      	ldr	r2, [pc, #252]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800eb72:	5cd2      	ldrb	r2, [r2, r3]
 800eb74:	7dbb      	ldrb	r3, [r7, #22]
 800eb76:	4053      	eors	r3, r2
 800eb78:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eb7a:	7cfb      	ldrb	r3, [r7, #19]
 800eb7c:	4a3c      	ldr	r2, [pc, #240]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800eb7e:	5cd3      	ldrb	r3, [r2, r3]
 800eb80:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800eb82:	7cbb      	ldrb	r3, [r7, #18]
 800eb84:	4a3a      	ldr	r2, [pc, #232]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800eb86:	5cd3      	ldrb	r3, [r2, r3]
 800eb88:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eb8a:	7c3b      	ldrb	r3, [r7, #16]
 800eb8c:	4a38      	ldr	r2, [pc, #224]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800eb8e:	5cd3      	ldrb	r3, [r2, r3]
 800eb90:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eb92:	7dbb      	ldrb	r3, [r7, #22]
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	b25a      	sxtb	r2, r3
 800eb98:	7dbb      	ldrb	r3, [r7, #22]
 800eb9a:	09db      	lsrs	r3, r3, #7
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	4619      	mov	r1, r3
 800eba0:	0049      	lsls	r1, r1, #1
 800eba2:	440b      	add	r3, r1
 800eba4:	4619      	mov	r1, r3
 800eba6:	00c8      	lsls	r0, r1, #3
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4603      	mov	r3, r0
 800ebac:	440b      	add	r3, r1
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	b25b      	sxtb	r3, r3
 800ebb2:	4053      	eors	r3, r2
 800ebb4:	b25b      	sxtb	r3, r3
 800ebb6:	75bb      	strb	r3, [r7, #22]
 800ebb8:	e01c      	b.n	800ebf4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ebba:	7afb      	ldrb	r3, [r7, #11]
 800ebbc:	2b18      	cmp	r3, #24
 800ebbe:	d919      	bls.n	800ebf4 <lorawan_aes_set_key+0x13c>
 800ebc0:	7dfb      	ldrb	r3, [r7, #23]
 800ebc2:	7afa      	ldrb	r2, [r7, #11]
 800ebc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebc8:	fb01 f202 	mul.w	r2, r1, r2
 800ebcc:	1a9b      	subs	r3, r3, r2
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b10      	cmp	r3, #16
 800ebd2:	d10f      	bne.n	800ebf4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800ebd4:	7d7b      	ldrb	r3, [r7, #21]
 800ebd6:	4a26      	ldr	r2, [pc, #152]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800ebd8:	5cd3      	ldrb	r3, [r2, r3]
 800ebda:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ebdc:	7d3b      	ldrb	r3, [r7, #20]
 800ebde:	4a24      	ldr	r2, [pc, #144]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800ebe0:	5cd3      	ldrb	r3, [r2, r3]
 800ebe2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ebe4:	7cfb      	ldrb	r3, [r7, #19]
 800ebe6:	4a22      	ldr	r2, [pc, #136]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800ebe8:	5cd3      	ldrb	r3, [r2, r3]
 800ebea:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ebec:	7cbb      	ldrb	r3, [r7, #18]
 800ebee:	4a20      	ldr	r2, [pc, #128]	; (800ec70 <lorawan_aes_set_key+0x1b8>)
 800ebf0:	5cd3      	ldrb	r3, [r2, r3]
 800ebf2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ebf4:	7dfa      	ldrb	r2, [r7, #23]
 800ebf6:	7afb      	ldrb	r3, [r7, #11]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ebfc:	7c3b      	ldrb	r3, [r7, #16]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	5cd1      	ldrb	r1, [r2, r3]
 800ec02:	7dfb      	ldrb	r3, [r7, #23]
 800ec04:	7d7a      	ldrb	r2, [r7, #21]
 800ec06:	404a      	eors	r2, r1
 800ec08:	b2d1      	uxtb	r1, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ec0e:	7c3b      	ldrb	r3, [r7, #16]
 800ec10:	3301      	adds	r3, #1
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	5cd1      	ldrb	r1, [r2, r3]
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	7d3a      	ldrb	r2, [r7, #20]
 800ec1c:	404a      	eors	r2, r1
 800ec1e:	b2d1      	uxtb	r1, r2
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ec24:	7c3b      	ldrb	r3, [r7, #16]
 800ec26:	3302      	adds	r3, #2
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	5cd1      	ldrb	r1, [r2, r3]
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	3302      	adds	r3, #2
 800ec30:	7cfa      	ldrb	r2, [r7, #19]
 800ec32:	404a      	eors	r2, r1
 800ec34:	b2d1      	uxtb	r1, r2
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ec3a:	7c3b      	ldrb	r3, [r7, #16]
 800ec3c:	3303      	adds	r3, #3
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	5cd1      	ldrb	r1, [r2, r3]
 800ec42:	7dfb      	ldrb	r3, [r7, #23]
 800ec44:	3303      	adds	r3, #3
 800ec46:	7cba      	ldrb	r2, [r7, #18]
 800ec48:	404a      	eors	r2, r1
 800ec4a:	b2d1      	uxtb	r1, r2
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	3304      	adds	r3, #4
 800ec54:	75fb      	strb	r3, [r7, #23]
 800ec56:	7dfa      	ldrb	r2, [r7, #23]
 800ec58:	7c7b      	ldrb	r3, [r7, #17]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	f4ff af67 	bcc.w	800eb2e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	00010101 	.word	0x00010101
 800ec70:	0801f64c 	.word	0x0801f64c

0800ec74 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d038      	beq.n	800ecfc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	f107 0314 	add.w	r3, r7, #20
 800ec90:	68f9      	ldr	r1, [r7, #12]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff fc07 	bl	800e4a6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec98:	2301      	movs	r3, #1
 800ec9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec9e:	e014      	b.n	800ecca <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800eca0:	f107 0314 	add.w	r3, r7, #20
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff fd5d 	bl	800e764 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecb0:	0112      	lsls	r2, r2, #4
 800ecb2:	441a      	add	r2, r3
 800ecb4:	f107 0314 	add.w	r3, r7, #20
 800ecb8:	4611      	mov	r1, r2
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff fcab 	bl	800e616 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ecc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ecd0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d3e3      	bcc.n	800eca0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ecd8:	f107 0314 	add.w	r3, r7, #20
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7ff fca7 	bl	800e630 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ece8:	0112      	lsls	r2, r2, #4
 800ecea:	441a      	add	r2, r3
 800ecec:	f107 0314 	add.w	r3, r7, #20
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68b8      	ldr	r0, [r7, #8]
 800ecf4:	f7ff fbd7 	bl	800e4a6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	e000      	b.n	800ecfe <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ecfc:	23ff      	movs	r3, #255	; 0xff
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3728      	adds	r7, #40	; 0x28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
	...

0800ed08 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ed08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed0a:	b0a1      	sub	sp, #132	; 0x84
 800ed0c:	af12      	add	r7, sp, #72	; 0x48
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ed14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ed18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 fa12 	bl	800f148 <SecureElementGetKeyByID>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d174      	bne.n	800ee14 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed30:	e06c      	b.n	800ee0c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ed32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed36:	4939      	ldr	r1, [pc, #228]	; (800ee1c <PrintKey+0x114>)
 800ed38:	4613      	mov	r3, r2
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	440b      	add	r3, r1
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d15a      	bne.n	800ee02 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ed4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed50:	4932      	ldr	r1, [pc, #200]	; (800ee1c <PrintKey+0x114>)
 800ed52:	4613      	mov	r3, r2
 800ed54:	005b      	lsls	r3, r3, #1
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	440b      	add	r3, r1
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	6819      	ldr	r1, [r3, #0]
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	785b      	ldrb	r3, [r3, #1]
 800ed64:	461d      	mov	r5, r3
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	789b      	ldrb	r3, [r3, #2]
 800ed6a:	461e      	mov	r6, r3
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	78db      	ldrb	r3, [r3, #3]
 800ed70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	791b      	ldrb	r3, [r3, #4]
 800ed76:	627b      	str	r3, [r7, #36]	; 0x24
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	795b      	ldrb	r3, [r3, #5]
 800ed7c:	623b      	str	r3, [r7, #32]
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	799b      	ldrb	r3, [r3, #6]
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	79db      	ldrb	r3, [r3, #7]
 800ed88:	61bb      	str	r3, [r7, #24]
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	7a1b      	ldrb	r3, [r3, #8]
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	7a5b      	ldrb	r3, [r3, #9]
 800ed94:	613b      	str	r3, [r7, #16]
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	7a9b      	ldrb	r3, [r3, #10]
 800ed9a:	60fb      	str	r3, [r7, #12]
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	7adb      	ldrb	r3, [r3, #11]
 800eda0:	60bb      	str	r3, [r7, #8]
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	7b1b      	ldrb	r3, [r3, #12]
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	7b5b      	ldrb	r3, [r3, #13]
 800edac:	461c      	mov	r4, r3
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	7b9b      	ldrb	r3, [r3, #14]
 800edb2:	4618      	mov	r0, r3
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	7bdb      	ldrb	r3, [r3, #15]
 800edb8:	461a      	mov	r2, r3
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	7c1b      	ldrb	r3, [r3, #16]
 800edbe:	9310      	str	r3, [sp, #64]	; 0x40
 800edc0:	920f      	str	r2, [sp, #60]	; 0x3c
 800edc2:	900e      	str	r0, [sp, #56]	; 0x38
 800edc4:	940d      	str	r4, [sp, #52]	; 0x34
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	920c      	str	r2, [sp, #48]	; 0x30
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	920b      	str	r2, [sp, #44]	; 0x2c
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	920a      	str	r2, [sp, #40]	; 0x28
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	9209      	str	r2, [sp, #36]	; 0x24
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	9208      	str	r2, [sp, #32]
 800edda:	69ba      	ldr	r2, [r7, #24]
 800eddc:	9207      	str	r2, [sp, #28]
 800edde:	69fa      	ldr	r2, [r7, #28]
 800ede0:	9206      	str	r2, [sp, #24]
 800ede2:	6a3a      	ldr	r2, [r7, #32]
 800ede4:	9205      	str	r2, [sp, #20]
 800ede6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede8:	9204      	str	r2, [sp, #16]
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	9303      	str	r3, [sp, #12]
 800edee:	9602      	str	r6, [sp, #8]
 800edf0:	9501      	str	r5, [sp, #4]
 800edf2:	9100      	str	r1, [sp, #0]
 800edf4:	4b0a      	ldr	r3, [pc, #40]	; (800ee20 <PrintKey+0x118>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	2100      	movs	r1, #0
 800edfa:	2002      	movs	r0, #2
 800edfc:	f00f fbc6 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800ee00:	e008      	b.n	800ee14 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee06:	3301      	adds	r3, #1
 800ee08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee10:	2b0a      	cmp	r3, #10
 800ee12:	d98e      	bls.n	800ed32 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ee14:	373c      	adds	r7, #60	; 0x3c
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	0801f94c 	.word	0x0801f94c
 800ee20:	0801f1e4 	.word	0x0801f1e4

0800ee24 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ee24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee26:	b091      	sub	sp, #68	; 0x44
 800ee28:	af08      	add	r7, sp, #32
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ee32:	f107 0310 	add.w	r3, r7, #16
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 fbf0 	bl	800f61c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ee3c:	7c3b      	ldrb	r3, [r7, #16]
 800ee3e:	7c7a      	ldrb	r2, [r7, #17]
 800ee40:	7cb9      	ldrb	r1, [r7, #18]
 800ee42:	7cf8      	ldrb	r0, [r7, #19]
 800ee44:	7d3c      	ldrb	r4, [r7, #20]
 800ee46:	7d7d      	ldrb	r5, [r7, #21]
 800ee48:	7dbe      	ldrb	r6, [r7, #22]
 800ee4a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ee4e:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee52:	9606      	str	r6, [sp, #24]
 800ee54:	9505      	str	r5, [sp, #20]
 800ee56:	9404      	str	r4, [sp, #16]
 800ee58:	9003      	str	r0, [sp, #12]
 800ee5a:	9102      	str	r1, [sp, #8]
 800ee5c:	9201      	str	r2, [sp, #4]
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	4b24      	ldr	r3, [pc, #144]	; (800eef4 <PrintIds+0xd0>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	2100      	movs	r1, #0
 800ee66:	2002      	movs	r0, #2
 800ee68:	f00f fb90 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ee6c:	f107 0318 	add.w	r3, r7, #24
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 fc03 	bl	800f67c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee76:	7e3b      	ldrb	r3, [r7, #24]
 800ee78:	7e7a      	ldrb	r2, [r7, #25]
 800ee7a:	7eb9      	ldrb	r1, [r7, #26]
 800ee7c:	7ef8      	ldrb	r0, [r7, #27]
 800ee7e:	7f3c      	ldrb	r4, [r7, #28]
 800ee80:	7f7d      	ldrb	r5, [r7, #29]
 800ee82:	7fbe      	ldrb	r6, [r7, #30]
 800ee84:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ee88:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee8c:	9606      	str	r6, [sp, #24]
 800ee8e:	9505      	str	r5, [sp, #20]
 800ee90:	9404      	str	r4, [sp, #16]
 800ee92:	9003      	str	r0, [sp, #12]
 800ee94:	9102      	str	r1, [sp, #8]
 800ee96:	9201      	str	r2, [sp, #4]
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	4b17      	ldr	r3, [pc, #92]	; (800eef8 <PrintIds+0xd4>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2100      	movs	r1, #0
 800eea0:	2002      	movs	r0, #2
 800eea2:	f00f fb73 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800eea6:	f107 020c 	add.w	r2, r7, #12
 800eeaa:	79fb      	ldrb	r3, [r7, #7]
 800eeac:	4611      	mov	r1, r2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f000 fc16 	bl	800f6e0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800eeb4:	f107 030c 	add.w	r3, r7, #12
 800eeb8:	3303      	adds	r3, #3
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	461a      	mov	r2, r3
 800eebe:	f107 030c 	add.w	r3, r7, #12
 800eec2:	3302      	adds	r3, #2
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	4619      	mov	r1, r3
 800eec8:	f107 030c 	add.w	r3, r7, #12
 800eecc:	3301      	adds	r3, #1
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	4618      	mov	r0, r3
 800eed2:	f107 030c 	add.w	r3, r7, #12
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	9303      	str	r3, [sp, #12]
 800eeda:	9002      	str	r0, [sp, #8]
 800eedc:	9101      	str	r1, [sp, #4]
 800eede:	9200      	str	r2, [sp, #0]
 800eee0:	4b06      	ldr	r3, [pc, #24]	; (800eefc <PrintIds+0xd8>)
 800eee2:	2200      	movs	r2, #0
 800eee4:	2100      	movs	r1, #0
 800eee6:	2002      	movs	r0, #2
 800eee8:	f00f fb50 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800eeec:	bf00      	nop
 800eeee:	3724      	adds	r7, #36	; 0x24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef4:	0801f240 	.word	0x0801f240
 800eef8:	0801f280 	.word	0x0801f280
 800eefc:	0801f2c0 	.word	0x0801f2c0

0800ef00 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	6039      	str	r1, [r7, #0]
 800ef0a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73fb      	strb	r3, [r7, #15]
 800ef10:	e01a      	b.n	800ef48 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ef12:	4b12      	ldr	r3, [pc, #72]	; (800ef5c <GetKeyByID+0x5c>)
 800ef14:	6819      	ldr	r1, [r3, #0]
 800ef16:	7bfa      	ldrb	r2, [r7, #15]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	011b      	lsls	r3, r3, #4
 800ef1c:	4413      	add	r3, r2
 800ef1e:	440b      	add	r3, r1
 800ef20:	3318      	adds	r3, #24
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	79fa      	ldrb	r2, [r7, #7]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d10b      	bne.n	800ef42 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ef2a:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <GetKeyByID+0x5c>)
 800ef2c:	6819      	ldr	r1, [r3, #0]
 800ef2e:	7bfa      	ldrb	r2, [r7, #15]
 800ef30:	4613      	mov	r3, r2
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	4413      	add	r3, r2
 800ef36:	3318      	adds	r3, #24
 800ef38:	18ca      	adds	r2, r1, r3
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	e006      	b.n	800ef50 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	3301      	adds	r3, #1
 800ef46:	73fb      	strb	r3, [r7, #15]
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	2b0a      	cmp	r3, #10
 800ef4c:	d9e1      	bls.n	800ef12 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef4e:	2303      	movs	r3, #3
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3714      	adds	r7, #20
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bc80      	pop	{r7}
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20000788 	.word	0x20000788

0800ef60 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef60:	b590      	push	{r4, r7, lr}
 800ef62:	b0d1      	sub	sp, #324	; 0x144
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ef6a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ef6e:	6020      	str	r0, [r4, #0]
 800ef70:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ef74:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ef78:	6001      	str	r1, [r0, #0]
 800ef7a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ef7e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ef82:	600a      	str	r2, [r1, #0]
 800ef84:	461a      	mov	r2, r3
 800ef86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef8a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef8e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <ComputeCmac+0x46>
 800ef9e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efa6:	2302      	movs	r3, #2
 800efa8:	e05d      	b.n	800f066 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800efaa:	f107 0314 	add.w	r3, r7, #20
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe ff02 	bl	800ddb8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800efb4:	f107 0210 	add.w	r2, r7, #16
 800efb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efbc:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff ff9b 	bl	800ef00 <GetKeyByID>
 800efca:	4603      	mov	r3, r0
 800efcc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800efd0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d144      	bne.n	800f062 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800efd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe fefd 	bl	800ddea <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800eff0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eff4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d009      	beq.n	800f012 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800effe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f002:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f006:	f107 0014 	add.w	r0, r7, #20
 800f00a:	2210      	movs	r2, #16
 800f00c:	6819      	ldr	r1, [r3, #0]
 800f00e:	f7fe fefb 	bl	800de08 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f012:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f016:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800f01a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f01e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f022:	f107 0014 	add.w	r0, r7, #20
 800f026:	6812      	ldr	r2, [r2, #0]
 800f028:	6819      	ldr	r1, [r3, #0]
 800f02a:	f7fe feed 	bl	800de08 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f02e:	f107 0214 	add.w	r2, r7, #20
 800f032:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe ffa7 	bl	800df8c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f03e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800f042:	461a      	mov	r2, r3
 800f044:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f048:	021b      	lsls	r3, r3, #8
 800f04a:	431a      	orrs	r2, r3
 800f04c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f050:	041b      	lsls	r3, r3, #16
 800f052:	431a      	orrs	r2, r3
 800f054:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f058:	061b      	lsls	r3, r3, #24
 800f05a:	431a      	orrs	r2, r3
 800f05c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f060:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f062:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f066:	4618      	mov	r0, r3
 800f068:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd90      	pop	{r4, r7, pc}

0800f070 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f07e:	2302      	movs	r3, #2
 800f080:	e00a      	b.n	800f098 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f082:	4a07      	ldr	r2, [pc, #28]	; (800f0a0 <SecureElementInit+0x30>)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f088:	4b05      	ldr	r3, [pc, #20]	; (800f0a0 <SecureElementInit+0x30>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	22d8      	movs	r2, #216	; 0xd8
 800f08e:	4905      	ldr	r1, [pc, #20]	; (800f0a4 <SecureElementInit+0x34>)
 800f090:	4618      	mov	r0, r3
 800f092:	f00a fed6 	bl	8019e42 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	20000788 	.word	0x20000788
 800f0a4:	0801fb68 	.word	0x0801fb68

0800f0a8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f0b6:	f107 030c 	add.w	r3, r7, #12
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 faae 	bl	800f61c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f0c0:	f107 0308 	add.w	r3, r7, #8
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	f000 fb0a 	bl	800f6e0 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d024      	beq.n	800f11c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	75bb      	strb	r3, [r7, #22]
 800f0da:	e00c      	b.n	800f0f6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f0dc:	7dbb      	ldrb	r3, [r7, #22]
 800f0de:	3318      	adds	r3, #24
 800f0e0:	443b      	add	r3, r7
 800f0e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	75fb      	strb	r3, [r7, #23]
                break;
 800f0ee:	e005      	b.n	800f0fc <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0f0:	7dbb      	ldrb	r3, [r7, #22]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	75bb      	strb	r3, [r7, #22]
 800f0f6:	7dbb      	ldrb	r3, [r7, #22]
 800f0f8:	2b07      	cmp	r3, #7
 800f0fa:	d9ef      	bls.n	800f0dc <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	f083 0301 	eor.w	r3, r3, #1
 800f102:	b2db      	uxtb	r3, r3
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f108:	f107 020c 	add.w	r2, r7, #12
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4610      	mov	r0, r2
 800f110:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f112:	f107 030c 	add.w	r3, r7, #12
 800f116:	4618      	mov	r0, r3
 800f118:	f000 fa68 	bl	800f5ec <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00c      	beq.n	800f13c <SecureElementInitMcuID+0x94>
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d109      	bne.n	800f13c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f128:	f107 0208 	add.w	r2, r7, #8
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	4610      	mov	r0, r2
 800f130:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	4619      	mov	r1, r3
 800f136:	2001      	movs	r0, #1
 800f138:	f000 fab8 	bl	800f6ac <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
	...

0800f148 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	6039      	str	r1, [r7, #0]
 800f152:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
 800f158:	e01a      	b.n	800f190 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f15a:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <SecureElementGetKeyByID+0x5c>)
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	7bfa      	ldrb	r2, [r7, #15]
 800f160:	4613      	mov	r3, r2
 800f162:	011b      	lsls	r3, r3, #4
 800f164:	4413      	add	r3, r2
 800f166:	440b      	add	r3, r1
 800f168:	3318      	adds	r3, #24
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d10b      	bne.n	800f18a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f172:	4b0c      	ldr	r3, [pc, #48]	; (800f1a4 <SecureElementGetKeyByID+0x5c>)
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	7bfa      	ldrb	r2, [r7, #15]
 800f178:	4613      	mov	r3, r2
 800f17a:	011b      	lsls	r3, r3, #4
 800f17c:	4413      	add	r3, r2
 800f17e:	3318      	adds	r3, #24
 800f180:	18ca      	adds	r2, r1, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f186:	2300      	movs	r3, #0
 800f188:	e006      	b.n	800f198 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	3301      	adds	r3, #1
 800f18e:	73fb      	strb	r3, [r7, #15]
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	2b0a      	cmp	r3, #10
 800f194:	d9e1      	bls.n	800f15a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f196:	2303      	movs	r3, #3
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bc80      	pop	{r7}
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	20000788 	.word	0x20000788

0800f1a8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	f7ff fdab 	bl	800ed08 <PrintKey>
    PrintKey( NWK_KEY );
 800f1b2:	2001      	movs	r0, #1
 800f1b4:	f7ff fda8 	bl	800ed08 <PrintKey>
    PrintKey( APP_S_KEY );
 800f1b8:	2009      	movs	r0, #9
 800f1ba:	f7ff fda5 	bl	800ed08 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1be:	2008      	movs	r0, #8
 800f1c0:	f7ff fda2 	bl	800ed08 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	f7ff fe2d 	bl	800ee24 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f1da:	200b      	movs	r0, #11
 800f1dc:	f7ff fd94 	bl	800ed08 <PrintKey>
    PrintKey( MC_KE_KEY );
 800f1e0:	200c      	movs	r0, #12
 800f1e2:	f7ff fd91 	bl	800ed08 <PrintKey>
    PrintKey( APP_S_KEY );
 800f1e6:	2009      	movs	r0, #9
 800f1e8:	f7ff fd8e 	bl	800ed08 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1ec:	2008      	movs	r0, #8
 800f1ee:	f7ff fd8b 	bl	800ed08 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f1f2:	200a      	movs	r0, #10
 800f1f4:	f7ff fd88 	bl	800ed08 <PrintKey>
    PrintIds( mode );
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7ff fe12 	bl	800ee24 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	4603      	mov	r3, r0
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d101      	bne.n	800f222 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f21e:	2302      	movs	r3, #2
 800f220:	e04c      	b.n	800f2bc <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f222:	2300      	movs	r3, #0
 800f224:	77fb      	strb	r3, [r7, #31]
 800f226:	e045      	b.n	800f2b4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f228:	4b26      	ldr	r3, [pc, #152]	; (800f2c4 <SecureElementSetKey+0xb8>)
 800f22a:	6819      	ldr	r1, [r3, #0]
 800f22c:	7ffa      	ldrb	r2, [r7, #31]
 800f22e:	4613      	mov	r3, r2
 800f230:	011b      	lsls	r3, r3, #4
 800f232:	4413      	add	r3, r2
 800f234:	440b      	add	r3, r1
 800f236:	3318      	adds	r3, #24
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	79fa      	ldrb	r2, [r7, #7]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d136      	bne.n	800f2ae <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f240:	79fb      	ldrb	r3, [r7, #7]
 800f242:	2b0d      	cmp	r3, #13
 800f244:	d123      	bne.n	800f28e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f246:	2306      	movs	r3, #6
 800f248:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f24a:	2300      	movs	r3, #0
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]
 800f256:	605a      	str	r2, [r3, #4]
 800f258:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f25a:	f107 030c 	add.w	r3, r7, #12
 800f25e:	220c      	movs	r2, #12
 800f260:	2110      	movs	r1, #16
 800f262:	6838      	ldr	r0, [r7, #0]
 800f264:	f000 f876 	bl	800f354 <SecureElementAesEncrypt>
 800f268:	4603      	mov	r3, r0
 800f26a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f26c:	4b15      	ldr	r3, [pc, #84]	; (800f2c4 <SecureElementSetKey+0xb8>)
 800f26e:	6819      	ldr	r1, [r3, #0]
 800f270:	7ffa      	ldrb	r2, [r7, #31]
 800f272:	4613      	mov	r3, r2
 800f274:	011b      	lsls	r3, r3, #4
 800f276:	4413      	add	r3, r2
 800f278:	3318      	adds	r3, #24
 800f27a:	440b      	add	r3, r1
 800f27c:	3301      	adds	r3, #1
 800f27e:	f107 010c 	add.w	r1, r7, #12
 800f282:	2210      	movs	r2, #16
 800f284:	4618      	mov	r0, r3
 800f286:	f00a fddc 	bl	8019e42 <memcpy1>
                return retval;
 800f28a:	7fbb      	ldrb	r3, [r7, #30]
 800f28c:	e016      	b.n	800f2bc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f28e:	4b0d      	ldr	r3, [pc, #52]	; (800f2c4 <SecureElementSetKey+0xb8>)
 800f290:	6819      	ldr	r1, [r3, #0]
 800f292:	7ffa      	ldrb	r2, [r7, #31]
 800f294:	4613      	mov	r3, r2
 800f296:	011b      	lsls	r3, r3, #4
 800f298:	4413      	add	r3, r2
 800f29a:	3318      	adds	r3, #24
 800f29c:	440b      	add	r3, r1
 800f29e:	3301      	adds	r3, #1
 800f2a0:	2210      	movs	r2, #16
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f00a fdcc 	bl	8019e42 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e006      	b.n	800f2bc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f2ae:	7ffb      	ldrb	r3, [r7, #31]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	77fb      	strb	r3, [r7, #31]
 800f2b4:	7ffb      	ldrb	r3, [r7, #31]
 800f2b6:	2b0a      	cmp	r3, #10
 800f2b8:	d9b6      	bls.n	800f228 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2ba:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3720      	adds	r7, #32
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	20000788 	.word	0x20000788

0800f2c8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af02      	add	r7, sp, #8
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f2d6:	78fb      	ldrb	r3, [r7, #3]
 800f2d8:	2b0b      	cmp	r3, #11
 800f2da:	d901      	bls.n	800f2e0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	e009      	b.n	800f2f4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f2e0:	78fa      	ldrb	r2, [r7, #3]
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f7ff fe37 	bl	800ef60 <ComputeCmac>
 800f2f2:	4603      	mov	r3, r0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b088      	sub	sp, #32
 800f300:	af02      	add	r7, sp, #8
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f310:	2302      	movs	r3, #2
 800f312:	e01b      	b.n	800f34c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f314:	2306      	movs	r3, #6
 800f316:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f31c:	78fa      	ldrb	r2, [r7, #3]
 800f31e:	f107 0310 	add.w	r3, r7, #16
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	4613      	mov	r3, r2
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	68f9      	ldr	r1, [r7, #12]
 800f32a:	2000      	movs	r0, #0
 800f32c:	f7ff fe18 	bl	800ef60 <ComputeCmac>
 800f330:	4603      	mov	r3, r0
 800f332:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f334:	7dfb      	ldrb	r3, [r7, #23]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
 800f33c:	e006      	b.n	800f34c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d001      	beq.n	800f34a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f346:	2301      	movs	r3, #1
 800f348:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b0c2      	sub	sp, #264	; 0x108
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f360:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f364:	6001      	str	r1, [r0, #0]
 800f366:	4611      	mov	r1, r2
 800f368:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f36c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f370:	6013      	str	r3, [r2, #0]
 800f372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f376:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f37a:	460a      	mov	r2, r1
 800f37c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d006      	beq.n	800f392 <SecureElementAesEncrypt+0x3e>
 800f384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f392:	2302      	movs	r3, #2
 800f394:	e059      	b.n	800f44a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f39a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 030f 	and.w	r3, r3, #15
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f3a8:	2305      	movs	r3, #5
 800f3aa:	e04e      	b.n	800f44a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f3ac:	f107 0314 	add.w	r3, r7, #20
 800f3b0:	22f0      	movs	r2, #240	; 0xf0
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f00a fd7f 	bl	8019eb8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f3ba:	f107 0210 	add.w	r2, r7, #16
 800f3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fd98 	bl	800ef00 <GetKeyByID>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f3d6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d133      	bne.n	800f446 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	f107 0214 	add.w	r2, r7, #20
 800f3e6:	2110      	movs	r1, #16
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff fb65 	bl	800eab8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f3f4:	e020      	b.n	800f438 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3f6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	18d0      	adds	r0, r2, r3
 800f3fe:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f402:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f406:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	4413      	add	r3, r2
 800f40e:	f107 0214 	add.w	r2, r7, #20
 800f412:	4619      	mov	r1, r3
 800f414:	f7ff fc2e 	bl	800ec74 <lorawan_aes_encrypt>
            block = block + 16;
 800f418:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f41c:	3310      	adds	r3, #16
 800f41e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f426:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f42a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f42e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f432:	6812      	ldr	r2, [r2, #0]
 800f434:	3a10      	subs	r2, #16
 800f436:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f43c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1d7      	bne.n	800f3f6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f446:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b088      	sub	sp, #32
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	70fb      	strb	r3, [r7, #3]
 800f460:	4613      	mov	r3, r2
 800f462:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f46a:	2302      	movs	r3, #2
 800f46c:	e02e      	b.n	800f4cc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f46e:	2306      	movs	r3, #6
 800f470:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f472:	78bb      	ldrb	r3, [r7, #2]
 800f474:	2b0c      	cmp	r3, #12
 800f476:	d104      	bne.n	800f482 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f478:	78fb      	ldrb	r3, [r7, #3]
 800f47a:	2b0b      	cmp	r3, #11
 800f47c:	d001      	beq.n	800f482 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f47e:	2303      	movs	r3, #3
 800f480:	e024      	b.n	800f4cc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f482:	2300      	movs	r3, #0
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	f107 0310 	add.w	r3, r7, #16
 800f48a:	2200      	movs	r2, #0
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	605a      	str	r2, [r3, #4]
 800f490:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f492:	f107 030c 	add.w	r3, r7, #12
 800f496:	78fa      	ldrb	r2, [r7, #3]
 800f498:	2110      	movs	r1, #16
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff ff5a 	bl	800f354 <SecureElementAesEncrypt>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f4a4:	7ffb      	ldrb	r3, [r7, #31]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f4aa:	7ffb      	ldrb	r3, [r7, #31]
 800f4ac:	e00e      	b.n	800f4cc <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f4ae:	f107 020c 	add.w	r2, r7, #12
 800f4b2:	78bb      	ldrb	r3, [r7, #2]
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff fea8 	bl	800f20c <SecureElementSetKey>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f4c0:	7ffb      	ldrb	r3, [r7, #31]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
 800f4c8:	e000      	b.n	800f4cc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f4ca:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3720      	adds	r7, #32
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	607b      	str	r3, [r7, #4]
 800f4de:	4603      	mov	r3, r0
 800f4e0:	73fb      	strb	r3, [r7, #15]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d005      	beq.n	800f4f8 <SecureElementProcessJoinAccept+0x24>
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <SecureElementProcessJoinAccept+0x24>
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e05c      	b.n	800f5b6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f500:	2b21      	cmp	r3, #33	; 0x21
 800f502:	d901      	bls.n	800f508 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f504:	2305      	movs	r3, #5
 800f506:	e056      	b.n	800f5b6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f508:	2301      	movs	r3, #1
 800f50a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f50c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f510:	b29b      	uxth	r3, r3
 800f512:	461a      	mov	r2, r3
 800f514:	6879      	ldr	r1, [r7, #4]
 800f516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f518:	f00a fc93 	bl	8019e42 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	1c58      	adds	r0, r3, #1
 800f520:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f524:	3b01      	subs	r3, #1
 800f526:	4619      	mov	r1, r3
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	3301      	adds	r3, #1
 800f52c:	7dfa      	ldrb	r2, [r7, #23]
 800f52e:	f7ff ff11 	bl	800f354 <SecureElementAesEncrypt>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f538:	2307      	movs	r3, #7
 800f53a:	e03c      	b.n	800f5b6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	330b      	adds	r3, #11
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	09db      	lsrs	r3, r3, #7
 800f544:	b2da      	uxtb	r2, r3
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f54e:	3b04      	subs	r3, #4
 800f550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f552:	4413      	add	r3, r2
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	4619      	mov	r1, r3
 800f558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f55c:	3b03      	subs	r3, #3
 800f55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f560:	4413      	add	r3, r2
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	021b      	lsls	r3, r3, #8
 800f566:	ea41 0203 	orr.w	r2, r1, r3
 800f56a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f56e:	3b02      	subs	r3, #2
 800f570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f572:	440b      	add	r3, r1
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	041b      	lsls	r3, r3, #16
 800f578:	431a      	orrs	r2, r3
 800f57a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f57e:	3b01      	subs	r3, #1
 800f580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f582:	440b      	add	r3, r1
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	061b      	lsls	r3, r3, #24
 800f588:	4313      	orrs	r3, r2
 800f58a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10d      	bne.n	800f5b0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f594:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f598:	3b04      	subs	r3, #4
 800f59a:	4619      	mov	r1, r3
 800f59c:	2301      	movs	r3, #1
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5a2:	f7ff feab 	bl	800f2fc <SecureElementVerifyAesCmac>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e002      	b.n	800f5b6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f5b0:	2304      	movs	r3, #4
 800f5b2:	e000      	b.n	800f5b6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d101      	bne.n	800f5d2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	e006      	b.n	800f5e0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f5d2:	4b05      	ldr	r3, [pc, #20]	; (800f5e8 <SecureElementRandomNumber+0x28>)
 800f5d4:	695b      	ldr	r3, [r3, #20]
 800f5d6:	4798      	blx	r3
 800f5d8:	4602      	mov	r2, r0
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	0801fa18 	.word	0x0801fa18

0800f5ec <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d101      	bne.n	800f5fe <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5fa:	2302      	movs	r3, #2
 800f5fc:	e007      	b.n	800f60e <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f5fe:	4b06      	ldr	r3, [pc, #24]	; (800f618 <SecureElementSetDevEui+0x2c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2208      	movs	r2, #8
 800f604:	6879      	ldr	r1, [r7, #4]
 800f606:	4618      	mov	r0, r3
 800f608:	f00a fc1b 	bl	8019e42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f60c:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	20000788 	.word	0x20000788

0800f61c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f62a:	2302      	movs	r3, #2
 800f62c:	e007      	b.n	800f63e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f62e:	4b06      	ldr	r3, [pc, #24]	; (800f648 <SecureElementGetDevEui+0x2c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2208      	movs	r2, #8
 800f634:	4619      	mov	r1, r3
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f00a fc03 	bl	8019e42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f63c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	20000788 	.word	0x20000788

0800f64c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f65a:	2302      	movs	r3, #2
 800f65c:	e008      	b.n	800f670 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f65e:	4b06      	ldr	r3, [pc, #24]	; (800f678 <SecureElementSetJoinEui+0x2c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	2208      	movs	r2, #8
 800f666:	6879      	ldr	r1, [r7, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	f00a fbea 	bl	8019e42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f66e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	20000788 	.word	0x20000788

0800f67c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d101      	bne.n	800f68e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f68a:	2302      	movs	r3, #2
 800f68c:	e008      	b.n	800f6a0 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f68e:	4b06      	ldr	r3, [pc, #24]	; (800f6a8 <SecureElementGetJoinEui+0x2c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	3308      	adds	r3, #8
 800f694:	2208      	movs	r2, #8
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f00a fbd2 	bl	8019e42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f69e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	20000788 	.word	0x20000788

0800f6ac <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	6039      	str	r1, [r7, #0]
 800f6b6:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d104      	bne.n	800f6c8 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f6be:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <SecureElementSetDevAddr+0x30>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	683a      	ldr	r2, [r7, #0]
 800f6c4:	611a      	str	r2, [r3, #16]
 800f6c6:	e003      	b.n	800f6d0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f6c8:	4b04      	ldr	r3, [pc, #16]	; (800f6dc <SecureElementSetDevAddr+0x30>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f6d0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bc80      	pop	{r7}
 800f6da:	4770      	bx	lr
 800f6dc:	20000788 	.word	0x20000788

0800f6e0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	6039      	str	r1, [r7, #0]
 800f6ea:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	e00e      	b.n	800f714 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d105      	bne.n	800f708 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6fc:	4b08      	ldr	r3, [pc, #32]	; (800f720 <SecureElementGetDevAddr+0x40>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	691a      	ldr	r2, [r3, #16]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	e004      	b.n	800f712 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f708:	4b05      	ldr	r3, [pc, #20]	; (800f720 <SecureElementGetDevAddr+0x40>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	695a      	ldr	r2, [r3, #20]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f712:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	bc80      	pop	{r7}
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	20000788 	.word	0x20000788

0800f724 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f72e:	4a22      	ldr	r2, [pc, #136]	; (800f7b8 <LmHandlerInit+0x94>)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f734:	4b21      	ldr	r3, [pc, #132]	; (800f7bc <LmHandlerInit+0x98>)
 800f736:	4a22      	ldr	r2, [pc, #136]	; (800f7c0 <LmHandlerInit+0x9c>)
 800f738:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f73a:	4b20      	ldr	r3, [pc, #128]	; (800f7bc <LmHandlerInit+0x98>)
 800f73c:	4a21      	ldr	r2, [pc, #132]	; (800f7c4 <LmHandlerInit+0xa0>)
 800f73e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f740:	4b1e      	ldr	r3, [pc, #120]	; (800f7bc <LmHandlerInit+0x98>)
 800f742:	4a21      	ldr	r2, [pc, #132]	; (800f7c8 <LmHandlerInit+0xa4>)
 800f744:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f746:	4b1d      	ldr	r3, [pc, #116]	; (800f7bc <LmHandlerInit+0x98>)
 800f748:	4a20      	ldr	r2, [pc, #128]	; (800f7cc <LmHandlerInit+0xa8>)
 800f74a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f74c:	4b1a      	ldr	r3, [pc, #104]	; (800f7b8 <LmHandlerInit+0x94>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <LmHandlerInit+0xac>)
 800f754:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f756:	4b18      	ldr	r3, [pc, #96]	; (800f7b8 <LmHandlerInit+0x94>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4a1c      	ldr	r2, [pc, #112]	; (800f7d0 <LmHandlerInit+0xac>)
 800f75e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f760:	4b15      	ldr	r3, [pc, #84]	; (800f7b8 <LmHandlerInit+0x94>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	4a1a      	ldr	r2, [pc, #104]	; (800f7d0 <LmHandlerInit+0xac>)
 800f768:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f76a:	4b13      	ldr	r3, [pc, #76]	; (800f7b8 <LmHandlerInit+0x94>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	4a17      	ldr	r2, [pc, #92]	; (800f7d0 <LmHandlerInit+0xac>)
 800f772:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f774:	4b16      	ldr	r3, [pc, #88]	; (800f7d0 <LmHandlerInit+0xac>)
 800f776:	4a17      	ldr	r2, [pc, #92]	; (800f7d4 <LmHandlerInit+0xb0>)
 800f778:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f77a:	4b0f      	ldr	r3, [pc, #60]	; (800f7b8 <LmHandlerInit+0x94>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	4a13      	ldr	r2, [pc, #76]	; (800f7d0 <LmHandlerInit+0xac>)
 800f782:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f784:	4914      	ldr	r1, [pc, #80]	; (800f7d8 <LmHandlerInit+0xb4>)
 800f786:	2000      	movs	r0, #0
 800f788:	f000 fd44 	bl	8010214 <LmHandlerPackageRegister>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d002      	beq.n	800f798 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f792:	f04f 33ff 	mov.w	r3, #4294967295
 800f796:	e00a      	b.n	800f7ae <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f798:	463b      	mov	r3, r7
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 fa30 	bl	8010c00 <LmhpPackagesRegistrationInit>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7aa:	e000      	b.n	800f7ae <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	200007d0 	.word	0x200007d0
 800f7bc:	200007d4 	.word	0x200007d4
 800f7c0:	0800fed9 	.word	0x0800fed9
 800f7c4:	0800ff4d 	.word	0x0800ff4d
 800f7c8:	0801002d 	.word	0x0801002d
 800f7cc:	08010181 	.word	0x08010181
 800f7d0:	200007e4 	.word	0x200007e4
 800f7d4:	080105d5 	.word	0x080105d5
 800f7d8:	2000009c 	.word	0x2000009c

0800f7dc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b090      	sub	sp, #64	; 0x40
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f7e4:	2218      	movs	r2, #24
 800f7e6:	6879      	ldr	r1, [r7, #4]
 800f7e8:	4852      	ldr	r0, [pc, #328]	; (800f934 <LmHandlerConfigure+0x158>)
 800f7ea:	f00a fb2a 	bl	8019e42 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f7ee:	f7fe faa1 	bl	800dd34 <LoraInfo_GetPtr>
 800f7f2:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f7f4:	4b4f      	ldr	r3, [pc, #316]	; (800f934 <LmHandlerConfigure+0x158>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4093      	lsls	r3, r2
 800f7fe:	461a      	mov	r2, r3
 800f800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	4013      	ands	r3, r2
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f80a:	4b4b      	ldr	r3, [pc, #300]	; (800f938 <LmHandlerConfigure+0x15c>)
 800f80c:	2201      	movs	r2, #1
 800f80e:	2100      	movs	r1, #0
 800f810:	2000      	movs	r0, #0
 800f812:	f00e febb 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f816:	e7fe      	b.n	800f816 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f818:	4b46      	ldr	r3, [pc, #280]	; (800f934 <LmHandlerConfigure+0x158>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	461a      	mov	r2, r3
 800f81e:	4947      	ldr	r1, [pc, #284]	; (800f93c <LmHandlerConfigure+0x160>)
 800f820:	4847      	ldr	r0, [pc, #284]	; (800f940 <LmHandlerConfigure+0x164>)
 800f822:	f004 fbc3 	bl	8013fac <LoRaMacInitialization>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f82c:	f04f 33ff 	mov.w	r3, #4294967295
 800f830:	e07c      	b.n	800f92c <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f832:	2305      	movs	r3, #5
 800f834:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f836:	2300      	movs	r3, #0
 800f838:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f83a:	f107 0314 	add.w	r3, r7, #20
 800f83e:	4618      	mov	r0, r3
 800f840:	f005 f902 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f844:	4b3d      	ldr	r3, [pc, #244]	; (800f93c <LmHandlerConfigure+0x160>)
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	4a3c      	ldr	r2, [pc, #240]	; (800f93c <LmHandlerConfigure+0x160>)
 800f84a:	68d2      	ldr	r2, [r2, #12]
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fc2a 	bl	800f0a8 <SecureElementInitMcuID>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d002      	beq.n	800f860 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f85a:	f04f 33ff 	mov.w	r3, #4294967295
 800f85e:	e065      	b.n	800f92c <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f860:	2306      	movs	r3, #6
 800f862:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f864:	f107 0314 	add.w	r3, r7, #20
 800f868:	4618      	mov	r0, r3
 800f86a:	f004 ff37 	bl	80146dc <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	4a34      	ldr	r2, [pc, #208]	; (800f944 <LmHandlerConfigure+0x168>)
 800f872:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f874:	f107 0314 	add.w	r3, r7, #20
 800f878:	4618      	mov	r0, r3
 800f87a:	f005 f8e5 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f87e:	2302      	movs	r3, #2
 800f880:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f882:	4b30      	ldr	r3, [pc, #192]	; (800f944 <LmHandlerConfigure+0x168>)
 800f884:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f886:	f107 0314 	add.w	r3, r7, #20
 800f88a:	4618      	mov	r0, r3
 800f88c:	f004 ff26 	bl	80146dc <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f890:	2303      	movs	r3, #3
 800f892:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f894:	4b2c      	ldr	r3, [pc, #176]	; (800f948 <LmHandlerConfigure+0x16c>)
 800f896:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4618      	mov	r0, r3
 800f89e:	f004 ff1d 	bl	80146dc <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f8a2:	f7ff fc81 	bl	800f1a8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f8a6:	230f      	movs	r3, #15
 800f8a8:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8ae:	f107 0314 	add.w	r3, r7, #20
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f005 f8c8 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f8b8:	2310      	movs	r3, #16
 800f8ba:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8c0:	f107 0314 	add.w	r3, r7, #20
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f005 f8bf 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f8ca:	2304      	movs	r3, #4
 800f8cc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f8ce:	4b19      	ldr	r3, [pc, #100]	; (800f934 <LmHandlerConfigure+0x158>)
 800f8d0:	789b      	ldrb	r3, [r3, #2]
 800f8d2:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8d4:	f107 0314 	add.w	r3, r7, #20
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f005 f8b5 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f8de:	2339      	movs	r3, #57	; 0x39
 800f8e0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f8e2:	4b14      	ldr	r3, [pc, #80]	; (800f934 <LmHandlerConfigure+0x158>)
 800f8e4:	695b      	ldr	r3, [r3, #20]
 800f8e6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8e8:	f107 0314 	add.w	r3, r7, #20
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f005 f8ab 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f8f2:	230f      	movs	r3, #15
 800f8f4:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <LmHandlerConfigure+0x158>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	f107 020c 	add.w	r2, r7, #12
 800f8fe:	4611      	mov	r1, r2
 800f900:	4618      	mov	r0, r3
 800f902:	f007 ff84 	bl	801780e <RegionGetPhyParam>
 800f906:	4603      	mov	r3, r0
 800f908:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	bf14      	ite	ne
 800f910:	2301      	movne	r3, #1
 800f912:	2300      	moveq	r3, #0
 800f914:	b2da      	uxtb	r2, r3
 800f916:	4b07      	ldr	r3, [pc, #28]	; (800f934 <LmHandlerConfigure+0x158>)
 800f918:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f91a:	2014      	movs	r0, #20
 800f91c:	f000 fac4 	bl	800fea8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <LmHandlerConfigure+0x158>)
 800f922:	79db      	ldrb	r3, [r3, #7]
 800f924:	4618      	mov	r0, r3
 800f926:	f005 fe6b 	bl	8015600 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3740      	adds	r7, #64	; 0x40
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	200007b8 	.word	0x200007b8
 800f938:	0801f2ec 	.word	0x0801f2ec
 800f93c:	200007e4 	.word	0x200007e4
 800f940:	200007d4 	.word	0x200007d4
 800f944:	2000078c 	.word	0x2000078c
 800f948:	20000794 	.word	0x20000794

0800f94c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f950:	f002 fb36 	bl	8011fc0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f954:	f000 fd9c 	bl	8010490 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f958:	f000 fd6c 	bl	8010434 <LmHandlerPackageIsTxPending>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f964:	b480      	push	{r7}
 800f966:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f968:	4b02      	ldr	r3, [pc, #8]	; (800f974 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f96a:	681b      	ldr	r3, [r3, #0]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	46bd      	mov	sp, r7
 800f970:	bc80      	pop	{r7}
 800f972:	4770      	bx	lr
 800f974:	200007fc 	.word	0x200007fc

0800f978 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b092      	sub	sp, #72	; 0x48
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	4603      	mov	r3, r0
 800f980:	460a      	mov	r2, r1
 800f982:	71fb      	strb	r3, [r7, #7]
 800f984:	4613      	mov	r3, r2
 800f986:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f988:	2301      	movs	r3, #1
 800f98a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f98e:	4b47      	ldr	r3, [pc, #284]	; (800faac <LmHandlerJoin+0x134>)
 800f990:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f994:	b2db      	uxtb	r3, r3
 800f996:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f99a:	4b44      	ldr	r3, [pc, #272]	; (800faac <LmHandlerJoin+0x134>)
 800f99c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f9a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d110      	bne.n	800f9cc <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f9b0:	4b3f      	ldr	r3, [pc, #252]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f9b6:	4a3e      	ldr	r2, [pc, #248]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9b8:	79bb      	ldrb	r3, [r7, #6]
 800f9ba:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f9bc:	f004 fda8 	bl	8014510 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f9c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f005 fbd3 	bl	8015170 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f9ca:	e06b      	b.n	800faa4 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f9d2:	4b37      	ldr	r3, [pc, #220]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f9d8:	4b34      	ldr	r3, [pc, #208]	; (800faac <LmHandlerJoin+0x134>)
 800f9da:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f9de:	4b34      	ldr	r3, [pc, #208]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9e0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f9e2:	4b32      	ldr	r3, [pc, #200]	; (800faac <LmHandlerJoin+0x134>)
 800f9e4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f9e8:	4b31      	ldr	r3, [pc, #196]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9ea:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f9ec:	4b30      	ldr	r3, [pc, #192]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f9f2:	4a2f      	ldr	r2, [pc, #188]	; (800fab0 <LmHandlerJoin+0x138>)
 800f9f4:	79bb      	ldrb	r3, [r7, #6]
 800f9f6:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f9f8:	4b2e      	ldr	r3, [pc, #184]	; (800fab4 <LmHandlerJoin+0x13c>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	f083 0301 	eor.w	r3, r3, #1
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d034      	beq.n	800fa70 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800fa06:	231e      	movs	r3, #30
 800fa08:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800fa0a:	4b28      	ldr	r3, [pc, #160]	; (800faac <LmHandlerJoin+0x134>)
 800fa0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa10:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa12:	f107 030c 	add.w	r3, r7, #12
 800fa16:	4618      	mov	r0, r3
 800fa18:	f005 f816 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800fa1c:	231f      	movs	r3, #31
 800fa1e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800fa20:	4b22      	ldr	r3, [pc, #136]	; (800faac <LmHandlerJoin+0x134>)
 800fa22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa26:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa28:	f107 030c 	add.w	r3, r7, #12
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f005 f80b 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800fa32:	2321      	movs	r3, #33	; 0x21
 800fa34:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800fa36:	4b1d      	ldr	r3, [pc, #116]	; (800faac <LmHandlerJoin+0x134>)
 800fa38:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa3c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa3e:	f107 030c 	add.w	r3, r7, #12
 800fa42:	4618      	mov	r0, r3
 800fa44:	f005 f800 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fa48:	2320      	movs	r3, #32
 800fa4a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800fa4c:	4b17      	ldr	r3, [pc, #92]	; (800faac <LmHandlerJoin+0x134>)
 800fa4e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa52:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa54:	f107 030c 	add.w	r3, r7, #12
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f004 fff5 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fa5e:	2328      	movs	r3, #40	; 0x28
 800fa60:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fa62:	4b15      	ldr	r3, [pc, #84]	; (800fab8 <LmHandlerJoin+0x140>)
 800fa64:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa66:	f107 030c 	add.w	r3, r7, #12
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f004 ffec 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fa70:	f004 fd4e 	bl	8014510 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa74:	2301      	movs	r3, #1
 800fa76:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fa7c:	f107 030c 	add.w	r3, r7, #12
 800fa80:	4618      	mov	r0, r3
 800fa82:	f004 ffe1 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fa86:	4b0d      	ldr	r3, [pc, #52]	; (800fabc <LmHandlerJoin+0x144>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d004      	beq.n	800fa9a <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fa90:	4b0a      	ldr	r3, [pc, #40]	; (800fabc <LmHandlerJoin+0x144>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa96:	4806      	ldr	r0, [pc, #24]	; (800fab0 <LmHandlerJoin+0x138>)
 800fa98:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fa9a:	4b04      	ldr	r3, [pc, #16]	; (800faac <LmHandlerJoin+0x134>)
 800fa9c:	785b      	ldrb	r3, [r3, #1]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 f932 	bl	800fd08 <LmHandlerRequestClass>
}
 800faa4:	bf00      	nop
 800faa6:	3748      	adds	r7, #72	; 0x48
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	200007b8 	.word	0x200007b8
 800fab0:	200000a8 	.word	0x200000a8
 800fab4:	200008f2 	.word	0x200008f2
 800fab8:	01000300 	.word	0x01000300
 800fabc:	200007d0 	.word	0x200007d0

0800fac0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08c      	sub	sp, #48	; 0x30
 800fac4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fac6:	2301      	movs	r3, #1
 800fac8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800faca:	1d3b      	adds	r3, r7, #4
 800facc:	4618      	mov	r0, r3
 800face:	f004 fe05 	bl	80146dc <LoRaMacMibGetRequestConfirm>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800fad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d106      	bne.n	800faee <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fae0:	7a3b      	ldrb	r3, [r7, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e002      	b.n	800faf0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800faea:	2301      	movs	r3, #1
 800faec:	e000      	b.n	800faf0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800faee:	2300      	movs	r3, #0
    }
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3730      	adds	r7, #48	; 0x30
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08a      	sub	sp, #40	; 0x28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70fb      	strb	r3, [r7, #3]
 800fb04:	4613      	mov	r3, r2
 800fb06:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fb08:	23ff      	movs	r3, #255	; 0xff
 800fb0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800fb0e:	f001 ffe3 	bl	8011ad8 <LoRaMacIsBusy>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fb18:	f06f 0301 	mvn.w	r3, #1
 800fb1c:	e0be      	b.n	800fc9c <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800fb1e:	f001 fff7 	bl	8011b10 <LoRaMacIsStopped>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d002      	beq.n	800fb2e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb28:	f06f 0302 	mvn.w	r3, #2
 800fb2c:	e0b6      	b.n	800fc9c <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fb2e:	f7ff ffc7 	bl	800fac0 <LmHandlerJoinStatus>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d00a      	beq.n	800fb4e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fb38:	4b5a      	ldr	r3, [pc, #360]	; (800fca4 <LmHandlerSend+0x1ac>)
 800fb3a:	79db      	ldrb	r3, [r3, #7]
 800fb3c:	4a59      	ldr	r2, [pc, #356]	; (800fca4 <LmHandlerSend+0x1ac>)
 800fb3e:	7a12      	ldrb	r2, [r2, #8]
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff ff18 	bl	800f978 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb48:	f06f 0302 	mvn.w	r3, #2
 800fb4c:	e0a6      	b.n	800fc9c <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800fb4e:	4b56      	ldr	r3, [pc, #344]	; (800fca8 <LmHandlerSend+0x1b0>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	4798      	blx	r3
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00d      	beq.n	800fb78 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	781a      	ldrb	r2, [r3, #0]
 800fb60:	4b51      	ldr	r3, [pc, #324]	; (800fca8 <LmHandlerSend+0x1b0>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d006      	beq.n	800fb78 <LmHandlerSend+0x80>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fb72:	f06f 0303 	mvn.w	r3, #3
 800fb76:	e091      	b.n	800fc9c <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fb78:	4a4c      	ldr	r2, [pc, #304]	; (800fcac <LmHandlerSend+0x1b4>)
 800fb7a:	78fb      	ldrb	r3, [r7, #3]
 800fb7c:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fb7e:	78fb      	ldrb	r3, [r7, #3]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	bf14      	ite	ne
 800fb84:	2301      	movne	r3, #1
 800fb86:	2300      	moveq	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fb8c:	4b48      	ldr	r3, [pc, #288]	; (800fcb0 <LmHandlerSend+0x1b8>)
 800fb8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb92:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	f107 020c 	add.w	r2, r7, #12
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f004 fd16 	bl	80145d0 <LoRaMacQueryTxPossible>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d009      	beq.n	800fbbe <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fbb6:	23f9      	movs	r3, #249	; 0xf9
 800fbb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbbc:	e009      	b.n	800fbd2 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	785b      	ldrb	r3, [r3, #1]
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fbd2:	4b36      	ldr	r3, [pc, #216]	; (800fcac <LmHandlerSend+0x1b4>)
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	3310      	adds	r3, #16
 800fbd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbdc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fbe0:	4b33      	ldr	r3, [pc, #204]	; (800fcb0 <LmHandlerSend+0x1b8>)
 800fbe2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fbe6:	4b31      	ldr	r3, [pc, #196]	; (800fcac <LmHandlerSend+0x1b4>)
 800fbe8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fbea:	78ba      	ldrb	r2, [r7, #2]
 800fbec:	f107 0310 	add.w	r3, r7, #16
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f005 fc0e 	bl	8015414 <LoRaMacMcpsRequest>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	4a2c      	ldr	r2, [pc, #176]	; (800fcb4 <LmHandlerSend+0x1bc>)
 800fc02:	6013      	str	r3, [r2, #0]

    switch( status )
 800fc04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc08:	2b11      	cmp	r3, #17
 800fc0a:	d840      	bhi.n	800fc8e <LmHandlerSend+0x196>
 800fc0c:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <LmHandlerSend+0x11c>)
 800fc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc12:	bf00      	nop
 800fc14:	0800fc5d 	.word	0x0800fc5d
 800fc18:	0800fc6f 	.word	0x0800fc6f
 800fc1c:	0800fc8f 	.word	0x0800fc8f
 800fc20:	0800fc8f 	.word	0x0800fc8f
 800fc24:	0800fc8f 	.word	0x0800fc8f
 800fc28:	0800fc8f 	.word	0x0800fc8f
 800fc2c:	0800fc8f 	.word	0x0800fc8f
 800fc30:	0800fc77 	.word	0x0800fc77
 800fc34:	0800fc8f 	.word	0x0800fc8f
 800fc38:	0800fc8f 	.word	0x0800fc8f
 800fc3c:	0800fc8f 	.word	0x0800fc8f
 800fc40:	0800fc87 	.word	0x0800fc87
 800fc44:	0800fc8f 	.word	0x0800fc8f
 800fc48:	0800fc8f 	.word	0x0800fc8f
 800fc4c:	0800fc6f 	.word	0x0800fc6f
 800fc50:	0800fc6f 	.word	0x0800fc6f
 800fc54:	0800fc6f 	.word	0x0800fc6f
 800fc58:	0800fc7f 	.word	0x0800fc7f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fc5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc60:	f113 0f07 	cmn.w	r3, #7
 800fc64:	d017      	beq.n	800fc96 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fc66:	2300      	movs	r3, #0
 800fc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fc6c:	e013      	b.n	800fc96 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fc6e:	23fe      	movs	r3, #254	; 0xfe
 800fc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc74:	e010      	b.n	800fc98 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc76:	23fd      	movs	r3, #253	; 0xfd
 800fc78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc7c:	e00c      	b.n	800fc98 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fc7e:	23fb      	movs	r3, #251	; 0xfb
 800fc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc84:	e008      	b.n	800fc98 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fc86:	23fa      	movs	r3, #250	; 0xfa
 800fc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc8c:	e004      	b.n	800fc98 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fc8e:	23ff      	movs	r3, #255	; 0xff
 800fc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc94:	e000      	b.n	800fc98 <LmHandlerSend+0x1a0>
            break;
 800fc96:	bf00      	nop
    }

    return lmhStatus;
 800fc98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3728      	adds	r7, #40	; 0x28
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	200000a8 	.word	0x200000a8
 800fca8:	200007a4 	.word	0x200007a4
 800fcac:	200000b4 	.word	0x200000b4
 800fcb0:	200007b8 	.word	0x200007b8
 800fcb4:	200007fc 	.word	0x200007fc

0800fcb8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fcbe:	230a      	movs	r3, #10
 800fcc0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fcc2:	463b      	mov	r3, r7
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f005 fa53 	bl	8015170 <LoRaMacMlmeRequest>
 800fcca:	4603      	mov	r3, r0
 800fccc:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	4a06      	ldr	r2, [pc, #24]	; (800fcec <LmHandlerDeviceTimeReq+0x34>)
 800fcd2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e001      	b.n	800fce2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fcde:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	200007fc 	.word	0x200007fc

0800fcf0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fcfa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	370c      	adds	r7, #12
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bc80      	pop	{r7}
 800fd06:	4770      	bx	lr

0800fd08 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08e      	sub	sp, #56	; 0x38
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fd18:	f001 fede 	bl	8011ad8 <LoRaMacIsBusy>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d002      	beq.n	800fd28 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd22:	f06f 0301 	mvn.w	r3, #1
 800fd26:	e071      	b.n	800fe0c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fd28:	f7ff feca 	bl	800fac0 <LmHandlerJoinStatus>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d002      	beq.n	800fd38 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fd32:	f06f 0302 	mvn.w	r3, #2
 800fd36:	e069      	b.n	800fe0c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd3c:	f107 030c 	add.w	r3, r7, #12
 800fd40:	4618      	mov	r0, r3
 800fd42:	f004 fccb 	bl	80146dc <LoRaMacMibGetRequestConfirm>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d002      	beq.n	800fd52 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	e05c      	b.n	800fe0c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fd52:	7c3b      	ldrb	r3, [r7, #16]
 800fd54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fd58:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d052      	beq.n	800fe08 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	2b02      	cmp	r3, #2
 800fd66:	d028      	beq.n	800fdba <LmHandlerRequestClass+0xb2>
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	dc48      	bgt.n	800fdfe <LmHandlerRequestClass+0xf6>
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <LmHandlerRequestClass+0x6e>
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d01e      	beq.n	800fdb2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fd74:	e043      	b.n	800fdfe <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fd76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d041      	beq.n	800fe02 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd82:	f107 030c 	add.w	r3, r7, #12
 800fd86:	4618      	mov	r0, r3
 800fd88:	f004 fe5e 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10b      	bne.n	800fdaa <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd92:	4b20      	ldr	r3, [pc, #128]	; (800fe14 <LmHandlerRequestClass+0x10c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d032      	beq.n	800fe02 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd9c:	4b1d      	ldr	r3, [pc, #116]	; (800fe14 <LmHandlerRequestClass+0x10c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda2:	79fa      	ldrb	r2, [r7, #7]
 800fda4:	4610      	mov	r0, r2
 800fda6:	4798      	blx	r3
                break;
 800fda8:	e02b      	b.n	800fe02 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdaa:	23ff      	movs	r3, #255	; 0xff
 800fdac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdb0:	e027      	b.n	800fe02 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fdb2:	23ff      	movs	r3, #255	; 0xff
 800fdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdb8:	e026      	b.n	800fe08 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fdba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fdc2:	23ff      	movs	r3, #255	; 0xff
 800fdc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdc8:	e01d      	b.n	800fe06 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fdce:	f107 030c 	add.w	r3, r7, #12
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f004 fe38 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10b      	bne.n	800fdf6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fdde:	4b0d      	ldr	r3, [pc, #52]	; (800fe14 <LmHandlerRequestClass+0x10c>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00e      	beq.n	800fe06 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <LmHandlerRequestClass+0x10c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdee:	79fa      	ldrb	r2, [r7, #7]
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	4798      	blx	r3
                break;
 800fdf4:	e007      	b.n	800fe06 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdf6:	23ff      	movs	r3, #255	; 0xff
 800fdf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdfc:	e003      	b.n	800fe06 <LmHandlerRequestClass+0xfe>
                break;
 800fdfe:	bf00      	nop
 800fe00:	e002      	b.n	800fe08 <LmHandlerRequestClass+0x100>
                break;
 800fe02:	bf00      	nop
 800fe04:	e000      	b.n	800fe08 <LmHandlerRequestClass+0x100>
                break;
 800fe06:	bf00      	nop
        }
    }
    return errorStatus;
 800fe08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3738      	adds	r7, #56	; 0x38
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	200007d0 	.word	0x200007d0

0800fe18 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b08c      	sub	sp, #48	; 0x30
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d102      	bne.n	800fe2c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe26:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2a:	e010      	b.n	800fe4e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe30:	f107 0308 	add.w	r3, r7, #8
 800fe34:	4618      	mov	r0, r3
 800fe36:	f004 fc51 	bl	80146dc <LoRaMacMibGetRequestConfirm>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe40:	f04f 33ff 	mov.w	r3, #4294967295
 800fe44:	e003      	b.n	800fe4e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fe46:	7b3a      	ldrb	r2, [r7, #12]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3730      	adds	r7, #48	; 0x30
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
	...

0800fe58 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08c      	sub	sp, #48	; 0x30
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d102      	bne.n	800fe6c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe66:	f04f 33ff 	mov.w	r3, #4294967295
 800fe6a:	e016      	b.n	800fe9a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fe6c:	231f      	movs	r3, #31
 800fe6e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fe70:	f107 0308 	add.w	r3, r7, #8
 800fe74:	4618      	mov	r0, r3
 800fe76:	f004 fc31 	bl	80146dc <LoRaMacMibGetRequestConfirm>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295
 800fe84:	e009      	b.n	800fe9a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fe86:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f993 2000 	ldrsb.w	r2, [r3]
 800fe94:	4b03      	ldr	r3, [pc, #12]	; (800fea4 <LmHandlerGetTxDatarate+0x4c>)
 800fe96:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3730      	adds	r7, #48	; 0x30
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	200007b8 	.word	0x200007b8

0800fea8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b08c      	sub	sp, #48	; 0x30
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800feb0:	2322      	movs	r3, #34	; 0x22
 800feb2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800feb8:	f107 0308 	add.w	r3, r7, #8
 800febc:	4618      	mov	r0, r3
 800febe:	f004 fdc3 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fec8:	f04f 33ff 	mov.w	r3, #4294967295
 800fecc:	e000      	b.n	800fed0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3730      	adds	r7, #48	; 0x30
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fee0:	4b18      	ldr	r3, [pc, #96]	; (800ff44 <McpsConfirm+0x6c>)
 800fee2:	2201      	movs	r2, #1
 800fee4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	785a      	ldrb	r2, [r3, #1]
 800feea:	4b16      	ldr	r3, [pc, #88]	; (800ff44 <McpsConfirm+0x6c>)
 800feec:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	789b      	ldrb	r3, [r3, #2]
 800fef2:	b25a      	sxtb	r2, r3
 800fef4:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <McpsConfirm+0x6c>)
 800fef6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	4a11      	ldr	r2, [pc, #68]	; (800ff44 <McpsConfirm+0x6c>)
 800fefe:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ff06:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <McpsConfirm+0x6c>)
 800ff08:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	4b0c      	ldr	r3, [pc, #48]	; (800ff44 <McpsConfirm+0x6c>)
 800ff12:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	791b      	ldrb	r3, [r3, #4]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4b0a      	ldr	r3, [pc, #40]	; (800ff44 <McpsConfirm+0x6c>)
 800ff1c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800ff1e:	4b0a      	ldr	r3, [pc, #40]	; (800ff48 <McpsConfirm+0x70>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d004      	beq.n	800ff32 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ff28:	4b07      	ldr	r3, [pc, #28]	; (800ff48 <McpsConfirm+0x70>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2e:	4805      	ldr	r0, [pc, #20]	; (800ff44 <McpsConfirm+0x6c>)
 800ff30:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	2000      	movs	r0, #0
 800ff36:	f000 f9eb 	bl	8010310 <LmHandlerPackagesNotify>
}
 800ff3a:	bf00      	nop
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	200000b4 	.word	0x200000b4
 800ff48:	200007d0 	.word	0x200007d0

0800ff4c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b088      	sub	sp, #32
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ff56:	2300      	movs	r3, #0
 800ff58:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ff5a:	4b32      	ldr	r3, [pc, #200]	; (8010024 <McpsIndication+0xd8>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	785a      	ldrb	r2, [r3, #1]
 800ff64:	4b2f      	ldr	r3, [pc, #188]	; (8010024 <McpsIndication+0xd8>)
 800ff66:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ff68:	4b2e      	ldr	r3, [pc, #184]	; (8010024 <McpsIndication+0xd8>)
 800ff6a:	785b      	ldrb	r3, [r3, #1]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d155      	bne.n	801001c <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	791b      	ldrb	r3, [r3, #4]
 800ff74:	b25a      	sxtb	r2, r3
 800ff76:	4b2b      	ldr	r3, [pc, #172]	; (8010024 <McpsIndication+0xd8>)
 800ff78:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff80:	b25a      	sxtb	r2, r3
 800ff82:	4b28      	ldr	r3, [pc, #160]	; (8010024 <McpsIndication+0xd8>)
 800ff84:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ff8c:	4b25      	ldr	r3, [pc, #148]	; (8010024 <McpsIndication+0xd8>)
 800ff8e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	78da      	ldrb	r2, [r3, #3]
 800ff94:	4b23      	ldr	r3, [pc, #140]	; (8010024 <McpsIndication+0xd8>)
 800ff96:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	4a21      	ldr	r2, [pc, #132]	; (8010024 <McpsIndication+0xd8>)
 800ff9e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	78db      	ldrb	r3, [r3, #3]
 800ffa4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	7b1b      	ldrb	r3, [r3, #12]
 800ffaa:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ffb2:	4b1d      	ldr	r3, [pc, #116]	; (8010028 <McpsIndication+0xdc>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d007      	beq.n	800ffcc <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ffbc:	4b1a      	ldr	r3, [pc, #104]	; (8010028 <McpsIndication+0xdc>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	f107 0218 	add.w	r2, r7, #24
 800ffc6:	4917      	ldr	r1, [pc, #92]	; (8010024 <McpsIndication+0xd8>)
 800ffc8:	4610      	mov	r0, r2
 800ffca:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ffcc:	4b16      	ldr	r3, [pc, #88]	; (8010028 <McpsIndication+0xdc>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d007      	beq.n	800ffe6 <McpsIndication+0x9a>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7e1b      	ldrb	r3, [r3, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d003      	beq.n	800ffe6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ffde:	4b12      	ldr	r3, [pc, #72]	; (8010028 <McpsIndication+0xdc>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ffe6:	6879      	ldr	r1, [r7, #4]
 800ffe8:	2001      	movs	r0, #1
 800ffea:	f000 f991 	bl	8010310 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ffee:	f107 0317 	add.w	r3, r7, #23
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff ff10 	bl	800fe18 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	795b      	ldrb	r3, [r3, #5]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00e      	beq.n	801001e <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010000:	2300      	movs	r3, #0
 8010002:	733b      	strb	r3, [r7, #12]
 8010004:	2300      	movs	r3, #0
 8010006:	737b      	strb	r3, [r7, #13]
 8010008:	2300      	movs	r3, #0
 801000a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	2201      	movs	r2, #1
 8010012:	2100      	movs	r1, #0
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff fd6f 	bl	800faf8 <LmHandlerSend>
 801001a:	e000      	b.n	801001e <McpsIndication+0xd2>
        return;
 801001c:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 801001e:	3720      	adds	r7, #32
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	200000d0 	.word	0x200000d0
 8010028:	200007d0 	.word	0x200007d0

0801002c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08c      	sub	sp, #48	; 0x30
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010034:	4b4a      	ldr	r3, [pc, #296]	; (8010160 <MlmeConfirm+0x134>)
 8010036:	2200      	movs	r2, #0
 8010038:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	785a      	ldrb	r2, [r3, #1]
 801003e:	4b48      	ldr	r3, [pc, #288]	; (8010160 <MlmeConfirm+0x134>)
 8010040:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8010042:	4b48      	ldr	r3, [pc, #288]	; (8010164 <MlmeConfirm+0x138>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010048:	2b00      	cmp	r3, #0
 801004a:	d004      	beq.n	8010056 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 801004c:	4b45      	ldr	r3, [pc, #276]	; (8010164 <MlmeConfirm+0x138>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010052:	4843      	ldr	r0, [pc, #268]	; (8010160 <MlmeConfirm+0x134>)
 8010054:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010056:	6879      	ldr	r1, [r7, #4]
 8010058:	2002      	movs	r0, #2
 801005a:	f000 f959 	bl	8010310 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	3b01      	subs	r3, #1
 8010064:	2b0c      	cmp	r3, #12
 8010066:	d874      	bhi.n	8010152 <MlmeConfirm+0x126>
 8010068:	a201      	add	r2, pc, #4	; (adr r2, 8010070 <MlmeConfirm+0x44>)
 801006a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801006e:	bf00      	nop
 8010070:	080100a5 	.word	0x080100a5
 8010074:	08010153 	.word	0x08010153
 8010078:	08010153 	.word	0x08010153
 801007c:	08010153 	.word	0x08010153
 8010080:	08010121 	.word	0x08010121
 8010084:	08010153 	.word	0x08010153
 8010088:	08010153 	.word	0x08010153
 801008c:	08010153 	.word	0x08010153
 8010090:	08010153 	.word	0x08010153
 8010094:	08010153 	.word	0x08010153
 8010098:	08010153 	.word	0x08010153
 801009c:	08010139 	.word	0x08010139
 80100a0:	08010153 	.word	0x08010153
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 80100a4:	2306      	movs	r3, #6
 80100a6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80100a8:	f107 0308 	add.w	r3, r7, #8
 80100ac:	4618      	mov	r0, r3
 80100ae:	f004 fb15 	bl	80146dc <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80100b2:	4b2d      	ldr	r3, [pc, #180]	; (8010168 <MlmeConfirm+0x13c>)
 80100b4:	79db      	ldrb	r3, [r3, #7]
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	4611      	mov	r1, r2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff faf6 	bl	800f6ac <SecureElementSetDevAddr>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	4a28      	ldr	r2, [pc, #160]	; (801016c <MlmeConfirm+0x140>)
 80100ca:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80100cc:	4828      	ldr	r0, [pc, #160]	; (8010170 <MlmeConfirm+0x144>)
 80100ce:	f7ff fec3 	bl	800fe58 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80100d2:	4828      	ldr	r0, [pc, #160]	; (8010174 <MlmeConfirm+0x148>)
 80100d4:	f000 fa4e 	bl	8010574 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100d8:	4b21      	ldr	r3, [pc, #132]	; (8010160 <MlmeConfirm+0x134>)
 80100da:	785b      	ldrb	r3, [r3, #1]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d108      	bne.n	80100f2 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80100e0:	4b21      	ldr	r3, [pc, #132]	; (8010168 <MlmeConfirm+0x13c>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80100e6:	4b24      	ldr	r3, [pc, #144]	; (8010178 <MlmeConfirm+0x14c>)
 80100e8:	785b      	ldrb	r3, [r3, #1]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7ff fe0c 	bl	800fd08 <LmHandlerRequestClass>
 80100f0:	e002      	b.n	80100f8 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80100f2:	4b1d      	ldr	r3, [pc, #116]	; (8010168 <MlmeConfirm+0x13c>)
 80100f4:	22ff      	movs	r2, #255	; 0xff
 80100f6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80100f8:	4b1a      	ldr	r3, [pc, #104]	; (8010164 <MlmeConfirm+0x138>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d004      	beq.n	801010c <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8010102:	4b18      	ldr	r3, [pc, #96]	; (8010164 <MlmeConfirm+0x138>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	4817      	ldr	r0, [pc, #92]	; (8010168 <MlmeConfirm+0x13c>)
 801010a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801010c:	4b14      	ldr	r3, [pc, #80]	; (8010160 <MlmeConfirm+0x134>)
 801010e:	785b      	ldrb	r3, [r3, #1]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d120      	bne.n	8010156 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8010114:	4b14      	ldr	r3, [pc, #80]	; (8010168 <MlmeConfirm+0x13c>)
 8010116:	79db      	ldrb	r3, [r3, #7]
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff f859 	bl	800f1d0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 801011e:	e01a      	b.n	8010156 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8010120:	4b16      	ldr	r3, [pc, #88]	; (801017c <MlmeConfirm+0x150>)
 8010122:	2201      	movs	r2, #1
 8010124:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	7a1a      	ldrb	r2, [r3, #8]
 801012a:	4b14      	ldr	r3, [pc, #80]	; (801017c <MlmeConfirm+0x150>)
 801012c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	7a5a      	ldrb	r2, [r3, #9]
 8010132:	4b12      	ldr	r3, [pc, #72]	; (801017c <MlmeConfirm+0x150>)
 8010134:	74da      	strb	r2, [r3, #19]
            }
            break;
 8010136:	e00f      	b.n	8010158 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	785b      	ldrb	r3, [r3, #1]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d105      	bne.n	801014c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010140:	4b0d      	ldr	r3, [pc, #52]	; (8010178 <MlmeConfirm+0x14c>)
 8010142:	7c1b      	ldrb	r3, [r3, #16]
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff fdd3 	bl	800fcf0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801014a:	e005      	b.n	8010158 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 801014c:	f7ff fdb4 	bl	800fcb8 <LmHandlerDeviceTimeReq>
            break;
 8010150:	e002      	b.n	8010158 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010152:	bf00      	nop
 8010154:	e000      	b.n	8010158 <MlmeConfirm+0x12c>
            break;
 8010156:	bf00      	nop
    }
}
 8010158:	bf00      	nop
 801015a:	3730      	adds	r7, #48	; 0x30
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200000b4 	.word	0x200000b4
 8010164:	200007d0 	.word	0x200007d0
 8010168:	200000a8 	.word	0x200000a8
 801016c:	2000078c 	.word	0x2000078c
 8010170:	200000ac 	.word	0x200000ac
 8010174:	200000ad 	.word	0x200000ad
 8010178:	200007b8 	.word	0x200007b8
 801017c:	200000d0 	.word	0x200000d0

08010180 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801018a:	4b20      	ldr	r3, [pc, #128]	; (801020c <MlmeIndication+0x8c>)
 801018c:	2200      	movs	r2, #0
 801018e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	785a      	ldrb	r2, [r3, #1]
 8010194:	4b1d      	ldr	r3, [pc, #116]	; (801020c <MlmeIndication+0x8c>)
 8010196:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	789b      	ldrb	r3, [r3, #2]
 801019c:	b25a      	sxtb	r2, r3
 801019e:	4b1b      	ldr	r3, [pc, #108]	; (801020c <MlmeIndication+0x8c>)
 80101a0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80101a8:	b25a      	sxtb	r2, r3
 80101aa:	4b18      	ldr	r3, [pc, #96]	; (801020c <MlmeIndication+0x8c>)
 80101ac:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80101b4:	4b15      	ldr	r3, [pc, #84]	; (801020c <MlmeIndication+0x8c>)
 80101b6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	78da      	ldrb	r2, [r3, #3]
 80101bc:	4b13      	ldr	r3, [pc, #76]	; (801020c <MlmeIndication+0x8c>)
 80101be:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	4a11      	ldr	r2, [pc, #68]	; (801020c <MlmeIndication+0x8c>)
 80101c6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80101c8:	4b11      	ldr	r3, [pc, #68]	; (8010210 <MlmeIndication+0x90>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00d      	beq.n	80101ee <MlmeIndication+0x6e>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b0b      	cmp	r3, #11
 80101d8:	d009      	beq.n	80101ee <MlmeIndication+0x6e>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	2b0f      	cmp	r3, #15
 80101e0:	d005      	beq.n	80101ee <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80101e2:	4b0b      	ldr	r3, [pc, #44]	; (8010210 <MlmeIndication+0x90>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e8:	4908      	ldr	r1, [pc, #32]	; (801020c <MlmeIndication+0x8c>)
 80101ea:	2000      	movs	r0, #0
 80101ec:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80101ee:	6879      	ldr	r1, [r7, #4]
 80101f0:	2003      	movs	r0, #3
 80101f2:	f000 f88d 	bl	8010310 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b0b      	cmp	r3, #11
 80101fc:	d001      	beq.n	8010202 <MlmeIndication+0x82>
 80101fe:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010200:	e000      	b.n	8010204 <MlmeIndication+0x84>
            break;
 8010202:	bf00      	nop
    }
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	200000d0 	.word	0x200000d0
 8010210:	200007d0 	.word	0x200007d0

08010214 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010220:	2300      	movs	r3, #0
 8010222:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d104      	bne.n	8010234 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801022a:	f000 f9dd 	bl	80105e8 <LmhpCompliancePackageFactory>
 801022e:	4603      	mov	r3, r0
 8010230:	60fb      	str	r3, [r7, #12]
                break;
 8010232:	e00d      	b.n	8010250 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010234:	f107 020c 	add.w	r2, r7, #12
 8010238:	79fb      	ldrb	r3, [r7, #7]
 801023a:	4611      	mov	r1, r2
 801023c:	4618      	mov	r0, r3
 801023e:	f000 fce9 	bl	8010c14 <LmhpPackagesRegister>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8010248:	f04f 33ff 	mov.w	r3, #4294967295
 801024c:	e031      	b.n	80102b2 <LmHandlerPackageRegister+0x9e>
                }
                break;
 801024e:	bf00      	nop
            }
    }
    if( package != NULL )
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d02b      	beq.n	80102ae <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	4918      	ldr	r1, [pc, #96]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 801025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010260:	79fb      	ldrb	r3, [r7, #7]
 8010262:	4a16      	ldr	r2, [pc, #88]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 8010264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010268:	4a15      	ldr	r2, [pc, #84]	; (80102c0 <LmHandlerPackageRegister+0xac>)
 801026a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	4a13      	ldr	r2, [pc, #76]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 8010270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010274:	4a13      	ldr	r2, [pc, #76]	; (80102c4 <LmHandlerPackageRegister+0xb0>)
 8010276:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	4a10      	ldr	r2, [pc, #64]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 801027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010280:	4a11      	ldr	r2, [pc, #68]	; (80102c8 <LmHandlerPackageRegister+0xb4>)
 8010282:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010284:	4b11      	ldr	r3, [pc, #68]	; (80102cc <LmHandlerPackageRegister+0xb8>)
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	490c      	ldr	r1, [pc, #48]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 801028c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010290:	6992      	ldr	r2, [r2, #24]
 8010292:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	4a09      	ldr	r2, [pc, #36]	; (80102bc <LmHandlerPackageRegister+0xa8>)
 8010298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	4a0c      	ldr	r2, [pc, #48]	; (80102d0 <LmHandlerPackageRegister+0xbc>)
 80102a0:	6851      	ldr	r1, [r2, #4]
 80102a2:	4a0b      	ldr	r2, [pc, #44]	; (80102d0 <LmHandlerPackageRegister+0xbc>)
 80102a4:	7852      	ldrb	r2, [r2, #1]
 80102a6:	6838      	ldr	r0, [r7, #0]
 80102a8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e001      	b.n	80102b2 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80102ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	200007a4 	.word	0x200007a4
 80102c0:	0800f979 	.word	0x0800f979
 80102c4:	0800faf9 	.word	0x0800faf9
 80102c8:	0800fcb9 	.word	0x0800fcb9
 80102cc:	200007d0 	.word	0x200007d0
 80102d0:	200000e4 	.word	0x200000e4

080102d4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	4603      	mov	r3, r0
 80102dc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b04      	cmp	r3, #4
 80102e2:	d80e      	bhi.n	8010302 <LmHandlerPackageIsInitialized+0x2e>
 80102e4:	79fb      	ldrb	r3, [r7, #7]
 80102e6:	4a09      	ldr	r2, [pc, #36]	; (801030c <LmHandlerPackageIsInitialized+0x38>)
 80102e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d007      	beq.n	8010302 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80102f2:	79fb      	ldrb	r3, [r7, #7]
 80102f4:	4a05      	ldr	r2, [pc, #20]	; (801030c <LmHandlerPackageIsInitialized+0x38>)
 80102f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	4798      	blx	r3
 80102fe:	4603      	mov	r3, r0
 8010300:	e000      	b.n	8010304 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8010302:	2300      	movs	r3, #0
    }
}
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	200007a4 	.word	0x200007a4

08010310 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	6039      	str	r1, [r7, #0]
 801031a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801031c:	2300      	movs	r3, #0
 801031e:	73fb      	strb	r3, [r7, #15]
 8010320:	e07c      	b.n	801041c <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 8010322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010326:	4a42      	ldr	r2, [pc, #264]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 8010328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d06f      	beq.n	8010410 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8010330:	79fb      	ldrb	r3, [r7, #7]
 8010332:	2b03      	cmp	r3, #3
 8010334:	d863      	bhi.n	80103fe <LmHandlerPackagesNotify+0xee>
 8010336:	a201      	add	r2, pc, #4	; (adr r2, 801033c <LmHandlerPackagesNotify+0x2c>)
 8010338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033c:	0801034d 	.word	0x0801034d
 8010340:	0801036f 	.word	0x0801036f
 8010344:	080103bb 	.word	0x080103bb
 8010348:	080103dd 	.word	0x080103dd
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801034c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010350:	4a37      	ldr	r2, [pc, #220]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 8010352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d052      	beq.n	8010402 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801035c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010360:	4a33      	ldr	r2, [pc, #204]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 8010362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010366:	69db      	ldr	r3, [r3, #28]
 8010368:	6838      	ldr	r0, [r7, #0]
 801036a:	4798      	blx	r3
                        }
                        break;
 801036c:	e049      	b.n	8010402 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801036e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010372:	4a2f      	ldr	r2, [pc, #188]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 8010374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d043      	beq.n	8010406 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 801037e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010382:	4a2b      	ldr	r2, [pc, #172]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 8010384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801038e:	429a      	cmp	r2, r3
 8010390:	d00a      	beq.n	80103a8 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8010392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d135      	bne.n	8010406 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 801039a:	4b25      	ldr	r3, [pc, #148]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	4798      	blx	r3
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d02e      	beq.n	8010406 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80103a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ac:	4a20      	ldr	r2, [pc, #128]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 80103ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b2:	6a1b      	ldr	r3, [r3, #32]
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	4798      	blx	r3
                        }
                        break;
 80103b8:	e025      	b.n	8010406 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80103ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103be:	4a1c      	ldr	r2, [pc, #112]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 80103c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d01f      	beq.n	801040a <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80103ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ce:	4a18      	ldr	r2, [pc, #96]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 80103d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d6:	6838      	ldr	r0, [r7, #0]
 80103d8:	4798      	blx	r3
                        }
                        break;
 80103da:	e016      	b.n	801040a <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80103dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e0:	4a13      	ldr	r2, [pc, #76]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 80103e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d010      	beq.n	801040e <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80103ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103f0:	4a0f      	ldr	r2, [pc, #60]	; (8010430 <LmHandlerPackagesNotify+0x120>)
 80103f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f8:	6838      	ldr	r0, [r7, #0]
 80103fa:	4798      	blx	r3
                        }
                        break;
 80103fc:	e007      	b.n	801040e <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80103fe:	bf00      	nop
 8010400:	e006      	b.n	8010410 <LmHandlerPackagesNotify+0x100>
                        break;
 8010402:	bf00      	nop
 8010404:	e004      	b.n	8010410 <LmHandlerPackagesNotify+0x100>
                        break;
 8010406:	bf00      	nop
 8010408:	e002      	b.n	8010410 <LmHandlerPackagesNotify+0x100>
                        break;
 801040a:	bf00      	nop
 801040c:	e000      	b.n	8010410 <LmHandlerPackagesNotify+0x100>
                        break;
 801040e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	3301      	adds	r3, #1
 8010418:	b2db      	uxtb	r3, r3
 801041a:	73fb      	strb	r3, [r7, #15]
 801041c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010420:	2b04      	cmp	r3, #4
 8010422:	f77f af7e 	ble.w	8010322 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 8010426:	bf00      	nop
 8010428:	bf00      	nop
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	200007a4 	.word	0x200007a4

08010434 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801043a:	2300      	movs	r3, #0
 801043c:	71fb      	strb	r3, [r7, #7]
 801043e:	e01c      	b.n	801047a <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8010440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010444:	4a11      	ldr	r2, [pc, #68]	; (801048c <LmHandlerPackageIsTxPending+0x58>)
 8010446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00f      	beq.n	801046e <LmHandlerPackageIsTxPending+0x3a>
 801044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00b      	beq.n	801046e <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8010456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801045a:	4a0c      	ldr	r2, [pc, #48]	; (801048c <LmHandlerPackageIsTxPending+0x58>)
 801045c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	4798      	blx	r3
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 801046a:	2301      	movs	r3, #1
 801046c:	e00a      	b.n	8010484 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801046e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010472:	b2db      	uxtb	r3, r3
 8010474:	3301      	adds	r3, #1
 8010476:	b2db      	uxtb	r3, r3
 8010478:	71fb      	strb	r3, [r7, #7]
 801047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801047e:	2b04      	cmp	r3, #4
 8010480:	ddde      	ble.n	8010440 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	200007a4 	.word	0x200007a4

08010490 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010496:	2300      	movs	r3, #0
 8010498:	71fb      	strb	r3, [r7, #7]
 801049a:	e022      	b.n	80104e2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 801049c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104a0:	4a14      	ldr	r2, [pc, #80]	; (80104f4 <LmHandlerPackagesProcess+0x64>)
 80104a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d015      	beq.n	80104d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80104aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ae:	4a11      	ldr	r2, [pc, #68]	; (80104f4 <LmHandlerPackagesProcess+0x64>)
 80104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b4:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00d      	beq.n	80104d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff ff09 	bl	80102d4 <LmHandlerPackageIsInitialized>
 80104c2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d006      	beq.n	80104d6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80104c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104cc:	4a09      	ldr	r2, [pc, #36]	; (80104f4 <LmHandlerPackagesProcess+0x64>)
 80104ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d2:	695b      	ldr	r3, [r3, #20]
 80104d4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80104d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	3301      	adds	r3, #1
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	71fb      	strb	r3, [r7, #7]
 80104e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e6:	2b04      	cmp	r3, #4
 80104e8:	ddd8      	ble.n	801049c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80104ea:	bf00      	nop
 80104ec:	bf00      	nop
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200007a4 	.word	0x200007a4

080104f8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	4603      	mov	r3, r0
 8010500:	6039      	str	r1, [r7, #0]
 8010502:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d102      	bne.n	8010510 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801050a:	f04f 33ff 	mov.w	r3, #4294967295
 801050e:	e00e      	b.n	801052e <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8010510:	79fb      	ldrb	r3, [r7, #7]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <LmHandlerGetVersion+0x24>
 8010516:	2b01      	cmp	r3, #1
 8010518:	d004      	beq.n	8010524 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 801051a:	e007      	b.n	801052c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	4a06      	ldr	r2, [pc, #24]	; (8010538 <LmHandlerGetVersion+0x40>)
 8010520:	601a      	str	r2, [r3, #0]
            break;
 8010522:	e003      	b.n	801052c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	4a05      	ldr	r2, [pc, #20]	; (801053c <LmHandlerGetVersion+0x44>)
 8010528:	601a      	str	r2, [r3, #0]
            break;
 801052a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	bc80      	pop	{r7}
 8010536:	4770      	bx	lr
 8010538:	01000300 	.word	0x01000300
 801053c:	01010003 	.word	0x01010003

08010540 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010544:	f005 f882 	bl	801564c <LoRaMacDeInitialization>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d101      	bne.n	8010552 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801054e:	2300      	movs	r3, #0
 8010550:	e001      	b.n	8010556 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010552:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010556:	4618      	mov	r0, r3
 8010558:	bd80      	pop	{r7, pc}

0801055a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801055a:	b580      	push	{r7, lr}
 801055c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801055e:	f004 f80d 	bl	801457c <LoRaMacHalt>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010568:	2300      	movs	r3, #0
 801056a:	e001      	b.n	8010570 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801056c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010570:	4618      	mov	r0, r3
 8010572:	bd80      	pop	{r7, pc}

08010574 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08c      	sub	sp, #48	; 0x30
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d102      	bne.n	8010588 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010582:	f04f 33ff 	mov.w	r3, #4294967295
 8010586:	e016      	b.n	80105b6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010588:	2320      	movs	r3, #32
 801058a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801058c:	f107 0308 	add.w	r3, r7, #8
 8010590:	4618      	mov	r0, r3
 8010592:	f004 f8a3 	bl	80146dc <LoRaMacMibGetRequestConfirm>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d002      	beq.n	80105a2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801059c:	f04f 33ff 	mov.w	r3, #4294967295
 80105a0:	e009      	b.n	80105b6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80105a2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f993 2000 	ldrsb.w	r2, [r3]
 80105b0:	4b03      	ldr	r3, [pc, #12]	; (80105c0 <LmHandlerGetTxPower+0x4c>)
 80105b2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3730      	adds	r7, #48	; 0x30
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	200007b8 	.word	0x200007b8

080105c4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80105c4:	b480      	push	{r7}
 80105c6:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 80105c8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bc80      	pop	{r7}
 80105d2:	4770      	bx	lr

080105d4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80105de:	bf00      	nop
 80105e0:	370c      	adds	r7, #12
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bc80      	pop	{r7}
 80105e6:	4770      	bx	lr

080105e8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80105e8:	b480      	push	{r7}
 80105ea:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80105ec:	4b02      	ldr	r3, [pc, #8]	; (80105f8 <LmhpCompliancePackageFactory+0x10>)
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bc80      	pop	{r7}
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	200000ec 	.word	0x200000ec

080105fc <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	4613      	mov	r3, r2
 8010608:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00f      	beq.n	8010630 <LmhpComplianceInit+0x34>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00c      	beq.n	8010630 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8010616:	4a0c      	ldr	r2, [pc, #48]	; (8010648 <LmhpComplianceInit+0x4c>)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 801061c:	4a0b      	ldr	r2, [pc, #44]	; (801064c <LmhpComplianceInit+0x50>)
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010622:	4a0a      	ldr	r2, [pc, #40]	; (801064c <LmhpComplianceInit+0x50>)
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010628:	4b08      	ldr	r3, [pc, #32]	; (801064c <LmhpComplianceInit+0x50>)
 801062a:	2201      	movs	r2, #1
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	e006      	b.n	801063e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010630:	4b05      	ldr	r3, [pc, #20]	; (8010648 <LmhpComplianceInit+0x4c>)
 8010632:	2200      	movs	r2, #0
 8010634:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010636:	4b05      	ldr	r3, [pc, #20]	; (801064c <LmhpComplianceInit+0x50>)
 8010638:	2200      	movs	r2, #0
 801063a:	701a      	strb	r2, [r3, #0]
    }
}
 801063c:	bf00      	nop
 801063e:	bf00      	nop
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	bc80      	pop	{r7}
 8010646:	4770      	bx	lr
 8010648:	20000920 	.word	0x20000920
 801064c:	2000090c 	.word	0x2000090c

08010650 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010650:	b480      	push	{r7}
 8010652:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010654:	4b02      	ldr	r3, [pc, #8]	; (8010660 <LmhpComplianceIsInitialized+0x10>)
 8010656:	781b      	ldrb	r3, [r3, #0]
}
 8010658:	4618      	mov	r0, r3
 801065a:	46bd      	mov	sp, r7
 801065c:	bc80      	pop	{r7}
 801065e:	4770      	bx	lr
 8010660:	2000090c 	.word	0x2000090c

08010664 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010668:	4b07      	ldr	r3, [pc, #28]	; (8010688 <LmhpComplianceIsRunning+0x24>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	f083 0301 	eor.w	r3, r3, #1
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010676:	2300      	movs	r3, #0
 8010678:	e001      	b.n	801067e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801067a:	4b03      	ldr	r3, [pc, #12]	; (8010688 <LmhpComplianceIsRunning+0x24>)
 801067c:	785b      	ldrb	r3, [r3, #1]
}
 801067e:	4618      	mov	r0, r3
 8010680:	46bd      	mov	sp, r7
 8010682:	bc80      	pop	{r7}
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	2000090c 	.word	0x2000090c

0801068c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010694:	4b0f      	ldr	r3, [pc, #60]	; (80106d4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	f083 0301 	eor.w	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d112      	bne.n	80106c8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80106a2:	4b0c      	ldr	r3, [pc, #48]	; (80106d4 <LmhpComplianceOnMcpsConfirm+0x48>)
 80106a4:	785b      	ldrb	r3, [r3, #1]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00f      	beq.n	80106ca <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d10b      	bne.n	80106ca <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d007      	beq.n	80106ca <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80106ba:	4b06      	ldr	r3, [pc, #24]	; (80106d4 <LmhpComplianceOnMcpsConfirm+0x48>)
 80106bc:	899b      	ldrh	r3, [r3, #12]
 80106be:	3301      	adds	r3, #1
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	4b04      	ldr	r3, [pc, #16]	; (80106d4 <LmhpComplianceOnMcpsConfirm+0x48>)
 80106c4:	819a      	strh	r2, [r3, #12]
 80106c6:	e000      	b.n	80106ca <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 80106c8:	bf00      	nop
    }
}
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bc80      	pop	{r7}
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	2000090c 	.word	0x2000090c

080106d8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80106e0:	4b12      	ldr	r3, [pc, #72]	; (801072c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	f083 0301 	eor.w	r3, r3, #1
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d116      	bne.n	801071c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80106ee:	4b0f      	ldr	r3, [pc, #60]	; (801072c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106f0:	785b      	ldrb	r3, [r3, #1]
 80106f2:	f083 0301 	eor.w	r3, r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d111      	bne.n	8010720 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b05      	cmp	r3, #5
 8010702:	d10e      	bne.n	8010722 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010704:	4b09      	ldr	r3, [pc, #36]	; (801072c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010706:	2201      	movs	r2, #1
 8010708:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	7a1a      	ldrb	r2, [r3, #8]
 801070e:	4b07      	ldr	r3, [pc, #28]	; (801072c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010710:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	7a5a      	ldrb	r2, [r3, #9]
 8010716:	4b05      	ldr	r3, [pc, #20]	; (801072c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010718:	741a      	strb	r2, [r3, #16]
 801071a:	e002      	b.n	8010722 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 801071c:	bf00      	nop
 801071e:	e000      	b.n	8010722 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010720:	bf00      	nop
    }
}
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	bc80      	pop	{r7}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	2000090c 	.word	0x2000090c

08010730 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010736:	4b36      	ldr	r3, [pc, #216]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	f083 0301 	eor.w	r3, r3, #1
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010744:	f04f 33ff 	mov.w	r3, #4294967295
 8010748:	e05e      	b.n	8010808 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801074a:	4b31      	ldr	r3, [pc, #196]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801074c:	785b      	ldrb	r3, [r3, #1]
 801074e:	f083 0301 	eor.w	r3, r3, #1
 8010752:	b2db      	uxtb	r3, r3
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010758:	2300      	movs	r3, #0
 801075a:	e055      	b.n	8010808 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 801075c:	4b2c      	ldr	r3, [pc, #176]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801075e:	7b9b      	ldrb	r3, [r3, #14]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d019      	beq.n	8010798 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010764:	4b2a      	ldr	r3, [pc, #168]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010766:	2200      	movs	r2, #0
 8010768:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801076a:	4b29      	ldr	r3, [pc, #164]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801076c:	2203      	movs	r2, #3
 801076e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010770:	4b27      	ldr	r3, [pc, #156]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	2205      	movs	r2, #5
 8010776:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010778:	4b25      	ldr	r3, [pc, #148]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	3301      	adds	r3, #1
 801077e:	4a24      	ldr	r2, [pc, #144]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010780:	7bd2      	ldrb	r2, [r2, #15]
 8010782:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010784:	4b22      	ldr	r3, [pc, #136]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	3302      	adds	r3, #2
 801078a:	4a21      	ldr	r2, [pc, #132]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801078c:	7c12      	ldrb	r2, [r2, #16]
 801078e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010790:	4b1f      	ldr	r3, [pc, #124]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 8010792:	2201      	movs	r2, #1
 8010794:	709a      	strb	r2, [r3, #2]
 8010796:	e01c      	b.n	80107d2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010798:	4b1d      	ldr	r3, [pc, #116]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 801079a:	789b      	ldrb	r3, [r3, #2]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d005      	beq.n	80107ac <LmhpComplianceTxProcess+0x7c>
 80107a0:	2b04      	cmp	r3, #4
 80107a2:	d116      	bne.n	80107d2 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 80107a4:	4b1a      	ldr	r3, [pc, #104]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107a6:	2201      	movs	r2, #1
 80107a8:	709a      	strb	r2, [r3, #2]
                break;
 80107aa:	e012      	b.n	80107d2 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 80107ac:	4b18      	ldr	r3, [pc, #96]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107ae:	2202      	movs	r2, #2
 80107b0:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80107b2:	4b17      	ldr	r3, [pc, #92]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107b4:	899b      	ldrh	r3, [r3, #12]
 80107b6:	0a1b      	lsrs	r3, r3, #8
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	4b15      	ldr	r3, [pc, #84]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	b2d2      	uxtb	r2, r2
 80107c0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80107c2:	4b13      	ldr	r3, [pc, #76]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107c4:	899a      	ldrh	r2, [r3, #12]
 80107c6:	4b12      	ldr	r3, [pc, #72]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	3301      	adds	r3, #1
 80107cc:	b2d2      	uxtb	r2, r2
 80107ce:	701a      	strb	r2, [r3, #0]
                break;
 80107d0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 80107d2:	23e0      	movs	r3, #224	; 0xe0
 80107d4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 80107d6:	4b0e      	ldr	r3, [pc, #56]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107d8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 80107da:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80107dc:	4b0c      	ldr	r3, [pc, #48]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107de:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80107e0:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 80107e2:	480c      	ldr	r0, [pc, #48]	; (8010814 <LmhpComplianceTxProcess+0xe4>)
 80107e4:	f00d fc5a 	bl	801e09c <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80107e8:	4b0b      	ldr	r3, [pc, #44]	; (8010818 <LmhpComplianceTxProcess+0xe8>)
 80107ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d102      	bne.n	80107f6 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 80107f0:	f04f 33ff 	mov.w	r3, #4294967295
 80107f4:	e008      	b.n	8010808 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80107f6:	4b08      	ldr	r3, [pc, #32]	; (8010818 <LmhpComplianceTxProcess+0xe8>)
 80107f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107fa:	4a05      	ldr	r2, [pc, #20]	; (8010810 <LmhpComplianceTxProcess+0xe0>)
 80107fc:	78d2      	ldrb	r2, [r2, #3]
 80107fe:	4611      	mov	r1, r2
 8010800:	4638      	mov	r0, r7
 8010802:	2201      	movs	r2, #1
 8010804:	4798      	blx	r3
 8010806:	4603      	mov	r3, r0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	2000090c 	.word	0x2000090c
 8010814:	200008f4 	.word	0x200008f4
 8010818:	200000ec 	.word	0x200000ec

0801081c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b0a4      	sub	sp, #144	; 0x90
 8010820:	af02      	add	r7, sp, #8
 8010822:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010824:	4ba5      	ldr	r3, [pc, #660]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f083 0301 	eor.w	r3, r3, #1
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	f040 81c6 	bne.w	8010bc0 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	7b5b      	ldrb	r3, [r3, #13]
 8010838:	f083 0301 	eor.w	r3, r3, #1
 801083c:	b2db      	uxtb	r3, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	f040 81c0 	bne.w	8010bc4 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010844:	4b9d      	ldr	r3, [pc, #628]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010846:	785b      	ldrb	r3, [r3, #1]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00c      	beq.n	8010866 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7b9b      	ldrb	r3, [r3, #14]
 8010850:	f083 0301 	eor.w	r3, r3, #1
 8010854:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010856:	2b00      	cmp	r3, #0
 8010858:	d005      	beq.n	8010866 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801085a:	4b98      	ldr	r3, [pc, #608]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 801085c:	899b      	ldrh	r3, [r3, #12]
 801085e:	3301      	adds	r3, #1
 8010860:	b29a      	uxth	r2, r3
 8010862:	4b96      	ldr	r3, [pc, #600]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010864:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	78db      	ldrb	r3, [r3, #3]
 801086a:	2be0      	cmp	r3, #224	; 0xe0
 801086c:	f040 81ac 	bne.w	8010bc8 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010870:	4b92      	ldr	r3, [pc, #584]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010872:	785b      	ldrb	r3, [r3, #1]
 8010874:	f083 0301 	eor.w	r3, r3, #1
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d060      	beq.n	8010940 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	7b1b      	ldrb	r3, [r3, #12]
 8010882:	2b04      	cmp	r3, #4
 8010884:	f040 81a7 	bne.w	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801088e:	2b01      	cmp	r3, #1
 8010890:	f040 81a1 	bne.w	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	3301      	adds	r3, #1
 801089a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 801089c:	2b01      	cmp	r3, #1
 801089e:	f040 819a 	bne.w	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	3302      	adds	r3, #2
 80108a8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	f040 8193 	bne.w	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	3303      	adds	r3, #3
 80108b6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	f040 818c 	bne.w	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 80108be:	4b7f      	ldr	r3, [pc, #508]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108c0:	2200      	movs	r2, #0
 80108c2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 80108c4:	4b7d      	ldr	r3, [pc, #500]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108c6:	22e0      	movs	r2, #224	; 0xe0
 80108c8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80108ca:	4b7c      	ldr	r3, [pc, #496]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108cc:	2202      	movs	r2, #2
 80108ce:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80108d0:	4b7a      	ldr	r3, [pc, #488]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80108d6:	4b79      	ldr	r3, [pc, #484]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108d8:	2200      	movs	r2, #0
 80108da:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80108dc:	4b77      	ldr	r3, [pc, #476]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108de:	2200      	movs	r2, #0
 80108e0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80108e2:	4b76      	ldr	r3, [pc, #472]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80108e8:	4b74      	ldr	r3, [pc, #464]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ea:	2201      	movs	r2, #1
 80108ec:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80108ee:	4b73      	ldr	r3, [pc, #460]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108f0:	2201      	movs	r2, #1
 80108f2:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 80108f4:	2304      	movs	r3, #4
 80108f6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 80108f8:	2301      	movs	r3, #1
 80108fa:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80108fc:	f107 030c 	add.w	r3, r7, #12
 8010900:	4618      	mov	r0, r3
 8010902:	f004 f8a1 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 8010906:	2000      	movs	r0, #0
 8010908:	f004 fe7a 	bl	8015600 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 801090c:	4b6c      	ldr	r3, [pc, #432]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d003      	beq.n	801091e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8010916:	4b6a      	ldr	r3, [pc, #424]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 801091e:	2300      	movs	r3, #0
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	4b68      	ldr	r3, [pc, #416]	; (8010ac4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010924:	2200      	movs	r2, #0
 8010926:	f04f 31ff 	mov.w	r1, #4294967295
 801092a:	4867      	ldr	r0, [pc, #412]	; (8010ac8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 801092c:	f00d fb80 	bl	801e030 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010930:	f241 3188 	movw	r1, #5000	; 0x1388
 8010934:	4864      	ldr	r0, [pc, #400]	; (8010ac8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010936:	f00d fc8f 	bl	801e258 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801093a:	f7ff fef9 	bl	8010730 <LmhpComplianceTxProcess>
 801093e:	e14a      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	781a      	ldrb	r2, [r3, #0]
 8010946:	4b5d      	ldr	r3, [pc, #372]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010948:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801094a:	4b5c      	ldr	r3, [pc, #368]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 801094c:	789b      	ldrb	r3, [r3, #2]
 801094e:	2b0a      	cmp	r3, #10
 8010950:	f200 813c 	bhi.w	8010bcc <LmhpComplianceOnMcpsIndication+0x3b0>
 8010954:	a201      	add	r2, pc, #4	; (adr r2, 801095c <LmhpComplianceOnMcpsIndication+0x140>)
 8010956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801095a:	bf00      	nop
 801095c:	08010989 	.word	0x08010989
 8010960:	080109d3 	.word	0x080109d3
 8010964:	080109db 	.word	0x080109db
 8010968:	080109e9 	.word	0x080109e9
 801096c:	080109f7 	.word	0x080109f7
 8010970:	08010a4f 	.word	0x08010a4f
 8010974:	08010a61 	.word	0x08010a61
 8010978:	08010ad1 	.word	0x08010ad1
 801097c:	08010b79 	.word	0x08010b79
 8010980:	08010b8b 	.word	0x08010b8b
 8010984:	08010ba5 	.word	0x08010ba5
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010988:	484f      	ldr	r0, [pc, #316]	; (8010ac8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 801098a:	f00d fbf5 	bl	801e178 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 801098e:	4b4b      	ldr	r3, [pc, #300]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010990:	2200      	movs	r2, #0
 8010992:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010994:	4b49      	ldr	r3, [pc, #292]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010996:	2200      	movs	r2, #0
 8010998:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 801099a:	2304      	movs	r3, #4
 801099c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801099e:	4b48      	ldr	r3, [pc, #288]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80109a6:	f107 030c 	add.w	r3, r7, #12
 80109aa:	4618      	mov	r0, r3
 80109ac:	f004 f84c 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80109b0:	4b43      	ldr	r3, [pc, #268]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f004 fe22 	bl	8015600 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80109bc:	4b40      	ldr	r3, [pc, #256]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	689b      	ldr	r3, [r3, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	f000 8104 	beq.w	8010bd0 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80109c8:	4b3d      	ldr	r3, [pc, #244]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	4798      	blx	r3
                    }
                }
                break;
 80109d0:	e0fe      	b.n	8010bd0 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 80109d2:	4b3a      	ldr	r3, [pc, #232]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d4:	2202      	movs	r2, #2
 80109d6:	719a      	strb	r2, [r3, #6]
                break;
 80109d8:	e0fd      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 80109da:	4b38      	ldr	r3, [pc, #224]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109dc:	2201      	movs	r2, #1
 80109de:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109e0:	4b36      	ldr	r3, [pc, #216]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109e2:	2201      	movs	r2, #1
 80109e4:	709a      	strb	r2, [r3, #2]
                break;
 80109e6:	e0f6      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 80109e8:	4b34      	ldr	r3, [pc, #208]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ea:	2200      	movs	r2, #0
 80109ec:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109ee:	4b33      	ldr	r3, [pc, #204]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109f0:	2201      	movs	r2, #1
 80109f2:	709a      	strb	r2, [r3, #2]
                break;
 80109f4:	e0ef      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	7b1a      	ldrb	r2, [r3, #12]
 80109fa:	4b30      	ldr	r3, [pc, #192]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109fc:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 80109fe:	4b2f      	ldr	r3, [pc, #188]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	2204      	movs	r2, #4
 8010a04:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010a06:	2301      	movs	r3, #1
 8010a08:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010a0c:	e012      	b.n	8010a34 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	689a      	ldr	r2, [r3, #8]
 8010a12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a16:	4413      	add	r3, r2
 8010a18:	781a      	ldrb	r2, [r3, #0]
 8010a1a:	4b28      	ldr	r3, [pc, #160]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a1c:	6899      	ldr	r1, [r3, #8]
 8010a1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a22:	440b      	add	r3, r1
 8010a24:	3201      	adds	r2, #1
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010a2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a2e:	3301      	adds	r3, #1
 8010a30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010a34:	4b21      	ldr	r3, [pc, #132]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a36:	795a      	ldrb	r2, [r3, #5]
 8010a38:	4b20      	ldr	r3, [pc, #128]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a3a:	799b      	ldrb	r3, [r3, #6]
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	bf28      	it	cs
 8010a40:	4613      	movcs	r3, r2
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d3e0      	bcc.n	8010a0e <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010a4c:	e0c3      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010a4e:	2305      	movs	r3, #5
 8010a50:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010a54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f004 fb89 	bl	8015170 <LoRaMacMlmeRequest>
                }
                break;
 8010a5e:	e0ba      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010a60:	4819      	ldr	r0, [pc, #100]	; (8010ac8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010a62:	f00d fb89 	bl	801e178 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010a66:	4b15      	ldr	r3, [pc, #84]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010a6c:	4b13      	ldr	r3, [pc, #76]	; (8010abc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a6e:	2200      	movs	r2, #0
 8010a70:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010a72:	2304      	movs	r3, #4
 8010a74:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010a76:	4b12      	ldr	r3, [pc, #72]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010a7e:	f107 030c 	add.w	r3, r7, #12
 8010a82:	4618      	mov	r0, r3
 8010a84:	f003 ffe0 	bl	8014a48 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010a88:	4b0d      	ldr	r3, [pc, #52]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	785b      	ldrb	r3, [r3, #1]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f004 fdb6 	bl	8015600 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010a94:	4b0a      	ldr	r3, [pc, #40]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d003      	beq.n	8010aa6 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010a9e:	4b08      	ldr	r3, [pc, #32]	; (8010ac0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010aa6:	4b09      	ldr	r3, [pc, #36]	; (8010acc <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 8092 	beq.w	8010bd4 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010ab0:	4b06      	ldr	r3, [pc, #24]	; (8010acc <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab4:	2101      	movs	r1, #1
 8010ab6:	2002      	movs	r0, #2
 8010ab8:	4798      	blx	r3
                    }
                }
                break;
 8010aba:	e08b      	b.n	8010bd4 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010abc:	2000090c 	.word	0x2000090c
 8010ac0:	20000920 	.word	0x20000920
 8010ac4:	08010bed 	.word	0x08010bed
 8010ac8:	200008f4 	.word	0x200008f4
 8010acc:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	7b1b      	ldrb	r3, [r3, #12]
 8010ad4:	2b03      	cmp	r3, #3
 8010ad6:	d113      	bne.n	8010b00 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010ad8:	2306      	movs	r3, #6
 8010ada:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	021b      	lsls	r3, r3, #8
 8010ae8:	b21a      	sxth	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	3302      	adds	r3, #2
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	b21b      	sxth	r3, r3
 8010af4:	4313      	orrs	r3, r2
 8010af6:	b21b      	sxth	r3, r3
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010afe:	e032      	b.n	8010b66 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7b1b      	ldrb	r3, [r3, #12]
 8010b04:	2b07      	cmp	r3, #7
 8010b06:	d12e      	bne.n	8010b66 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010b08:	2307      	movs	r3, #7
 8010b0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	3301      	adds	r3, #1
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	021b      	lsls	r3, r3, #8
 8010b18:	b21a      	sxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	3302      	adds	r3, #2
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	b21b      	sxth	r3, r3
 8010b24:	4313      	orrs	r3, r2
 8010b26:	b21b      	sxth	r3, r3
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	3303      	adds	r3, #3
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	041a      	lsls	r2, r3, #16
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	021b      	lsls	r3, r3, #8
 8010b42:	4313      	orrs	r3, r2
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	6892      	ldr	r2, [r2, #8]
 8010b48:	3205      	adds	r2, #5
 8010b4a:	7812      	ldrb	r2, [r2, #0]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	461a      	mov	r2, r3
 8010b50:	2364      	movs	r3, #100	; 0x64
 8010b52:	fb02 f303 	mul.w	r3, r2, r3
 8010b56:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	3306      	adds	r3, #6
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	b25b      	sxtb	r3, r3
 8010b62:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010b66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f004 fb00 	bl	8015170 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010b70:	4b1a      	ldr	r3, [pc, #104]	; (8010bdc <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010b72:	2201      	movs	r2, #1
 8010b74:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010b76:	e02e      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010b78:	230a      	movs	r3, #10
 8010b7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b82:	4618      	mov	r0, r3
 8010b84:	f004 faf4 	bl	8015170 <LoRaMacMlmeRequest>
                }
                break;
 8010b88:	e025      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	3301      	adds	r3, #1
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010b98:	f107 030c 	add.w	r3, r7, #12
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f003 ff53 	bl	8014a48 <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010ba2:	e018      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010ba4:	230d      	movs	r3, #13
 8010ba6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	785b      	ldrb	r3, [r3, #1]
 8010bb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f004 fad9 	bl	8015170 <LoRaMacMlmeRequest>
                }
                break;
 8010bbe:	e00a      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010bc0:	bf00      	nop
 8010bc2:	e008      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010bc4:	bf00      	nop
 8010bc6:	e006      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010bc8:	bf00      	nop
 8010bca:	e004      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010bcc:	bf00      	nop
 8010bce:	e002      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010bd0:	bf00      	nop
 8010bd2:	e000      	b.n	8010bd6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010bd4:	bf00      	nop
        }
    }
}
 8010bd6:	3788      	adds	r7, #136	; 0x88
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	2000090c 	.word	0x2000090c

08010be0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010be0:	b480      	push	{r7}
 8010be2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010be4:	bf00      	nop
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bc80      	pop	{r7}
 8010bea:	4770      	bx	lr

08010bec <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010bf4:	f7ff fd9c 	bl	8010730 <LmhpComplianceTxProcess>
}
 8010bf8:	bf00      	nop
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bc80      	pop	{r7}
 8010c12:	4770      	bx	lr

08010c14 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010c20:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bc80      	pop	{r7}
 8010c2c:	4770      	bx	lr
	...

08010c30 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010c30:	b590      	push	{r4, r7, lr}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010c36:	f00d fbb9 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4a0f      	ldr	r2, [pc, #60]	; (8010c7c <OnRadioTxDone+0x4c>)
 8010c3e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c40:	4c0f      	ldr	r4, [pc, #60]	; (8010c80 <OnRadioTxDone+0x50>)
 8010c42:	463b      	mov	r3, r7
 8010c44:	4618      	mov	r0, r3
 8010c46:	f00c fd2f 	bl	801d6a8 <SysTimeGet>
 8010c4a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c4e:	463a      	mov	r2, r7
 8010c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c54:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c58:	4a0a      	ldr	r2, [pc, #40]	; (8010c84 <OnRadioTxDone+0x54>)
 8010c5a:	7813      	ldrb	r3, [r2, #0]
 8010c5c:	f043 0310 	orr.w	r3, r3, #16
 8010c60:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c62:	f003 f8e1 	bl	8013e28 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c66:	4b08      	ldr	r3, [pc, #32]	; (8010c88 <OnRadioTxDone+0x58>)
 8010c68:	2201      	movs	r2, #1
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	2002      	movs	r0, #2
 8010c6e:	f00d fc8d 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010c72:	bf00      	nop
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd90      	pop	{r4, r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20001598 	.word	0x20001598
 8010c80:	20000924 	.word	0x20000924
 8010c84:	20001594 	.word	0x20001594
 8010c88:	0801f338 	.word	0x0801f338

08010c8c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	4608      	mov	r0, r1
 8010c96:	4611      	mov	r1, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	817b      	strh	r3, [r7, #10]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	813b      	strh	r3, [r7, #8]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010ca6:	f00d fb81 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4a0f      	ldr	r2, [pc, #60]	; (8010cec <OnRadioRxDone+0x60>)
 8010cae:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010cb0:	4a0e      	ldr	r2, [pc, #56]	; (8010cec <OnRadioRxDone+0x60>)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010cb6:	4a0d      	ldr	r2, [pc, #52]	; (8010cec <OnRadioRxDone+0x60>)
 8010cb8:	897b      	ldrh	r3, [r7, #10]
 8010cba:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010cbc:	4a0b      	ldr	r2, [pc, #44]	; (8010cec <OnRadioRxDone+0x60>)
 8010cbe:	893b      	ldrh	r3, [r7, #8]
 8010cc0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010cc2:	4a0a      	ldr	r2, [pc, #40]	; (8010cec <OnRadioRxDone+0x60>)
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010cc8:	4a09      	ldr	r2, [pc, #36]	; (8010cf0 <OnRadioRxDone+0x64>)
 8010cca:	7813      	ldrb	r3, [r2, #0]
 8010ccc:	f043 0308 	orr.w	r3, r3, #8
 8010cd0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010cd2:	f003 f8a9 	bl	8013e28 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010cd6:	4b07      	ldr	r3, [pc, #28]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cd8:	2201      	movs	r2, #1
 8010cda:	2100      	movs	r1, #0
 8010cdc:	2002      	movs	r0, #2
 8010cde:	f00d fc55 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010ce2:	bf00      	nop
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	2000159c 	.word	0x2000159c
 8010cf0:	20001594 	.word	0x20001594
 8010cf4:	0801f348 	.word	0x0801f348

08010cf8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010cfc:	4a07      	ldr	r2, [pc, #28]	; (8010d1c <OnRadioTxTimeout+0x24>)
 8010cfe:	7813      	ldrb	r3, [r2, #0]
 8010d00:	f043 0304 	orr.w	r3, r3, #4
 8010d04:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d06:	f003 f88f 	bl	8013e28 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010d0a:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <OnRadioTxTimeout+0x28>)
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	2100      	movs	r1, #0
 8010d10:	2002      	movs	r0, #2
 8010d12:	f00d fc3b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d16:	bf00      	nop
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20001594 	.word	0x20001594
 8010d20:	0801f358 	.word	0x0801f358

08010d24 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010d28:	4a04      	ldr	r2, [pc, #16]	; (8010d3c <OnRadioRxError+0x18>)
 8010d2a:	7813      	ldrb	r3, [r2, #0]
 8010d2c:	f043 0302 	orr.w	r3, r3, #2
 8010d30:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d32:	f003 f879 	bl	8013e28 <OnMacProcessNotify>
}
 8010d36:	bf00      	nop
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	20001594 	.word	0x20001594

08010d40 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d44:	4a07      	ldr	r2, [pc, #28]	; (8010d64 <OnRadioRxTimeout+0x24>)
 8010d46:	7813      	ldrb	r3, [r2, #0]
 8010d48:	f043 0301 	orr.w	r3, r3, #1
 8010d4c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d4e:	f003 f86b 	bl	8013e28 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d52:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <OnRadioRxTimeout+0x28>)
 8010d54:	2201      	movs	r2, #1
 8010d56:	2100      	movs	r1, #0
 8010d58:	2002      	movs	r0, #2
 8010d5a:	f00d fc17 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d5e:	bf00      	nop
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	20001594 	.word	0x20001594
 8010d68:	0801f368 	.word	0x0801f368

08010d6c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d70:	4b08      	ldr	r3, [pc, #32]	; (8010d94 <UpdateRxSlotIdleState+0x28>)
 8010d72:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d76:	2b02      	cmp	r3, #2
 8010d78:	d004      	beq.n	8010d84 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d7a:	4b07      	ldr	r3, [pc, #28]	; (8010d98 <UpdateRxSlotIdleState+0x2c>)
 8010d7c:	2206      	movs	r2, #6
 8010d7e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d82:	e003      	b.n	8010d8c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d84:	4b04      	ldr	r3, [pc, #16]	; (8010d98 <UpdateRxSlotIdleState+0x2c>)
 8010d86:	2202      	movs	r2, #2
 8010d88:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010d8c:	bf00      	nop
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bc80      	pop	{r7}
 8010d92:	4770      	bx	lr
 8010d94:	20000e2c 	.word	0x20000e2c
 8010d98:	20000924 	.word	0x20000924

08010d9c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b092      	sub	sp, #72	; 0x48
 8010da0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010da2:	4b50      	ldr	r3, [pc, #320]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010da4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d002      	beq.n	8010db2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010dac:	4b4e      	ldr	r3, [pc, #312]	; (8010ee8 <ProcessRadioTxDone+0x14c>)
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010db2:	f3ef 8310 	mrs	r3, PRIMASK
 8010db6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010dbc:	b672      	cpsid	i
}
 8010dbe:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010dc0:	f00d faf4 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	4b49      	ldr	r3, [pc, #292]	; (8010eec <ProcessRadioTxDone+0x150>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010dce:	4b48      	ldr	r3, [pc, #288]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010dd0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4846      	ldr	r0, [pc, #280]	; (8010ef4 <ProcessRadioTxDone+0x158>)
 8010ddc:	f00d fa3c 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010de0:	4844      	ldr	r0, [pc, #272]	; (8010ef4 <ProcessRadioTxDone+0x158>)
 8010de2:	f00d f95b 	bl	801e09c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010de6:	4b42      	ldr	r3, [pc, #264]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010de8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	4619      	mov	r1, r3
 8010df2:	4841      	ldr	r0, [pc, #260]	; (8010ef8 <ProcessRadioTxDone+0x15c>)
 8010df4:	f00d fa30 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010df8:	483f      	ldr	r0, [pc, #252]	; (8010ef8 <ProcessRadioTxDone+0x15c>)
 8010dfa:	f00d f94f 	bl	801e09c <UTIL_TIMER_Start>
 8010dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e00:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e04:	f383 8810 	msr	PRIMASK, r3
}
 8010e08:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010e0a:	4b36      	ldr	r3, [pc, #216]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010e0c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d004      	beq.n	8010e1e <ProcessRadioTxDone+0x82>
 8010e14:	4b36      	ldr	r3, [pc, #216]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010e16:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d019      	beq.n	8010e52 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010e1e:	2316      	movs	r3, #22
 8010e20:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e24:	4b2f      	ldr	r3, [pc, #188]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010e26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e2a:	f107 0220 	add.w	r2, r7, #32
 8010e2e:	4611      	mov	r1, r2
 8010e30:	4618      	mov	r0, r3
 8010e32:	f006 fcec 	bl	801780e <RegionGetPhyParam>
 8010e36:	4603      	mov	r3, r0
 8010e38:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e3a:	4b2d      	ldr	r3, [pc, #180]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010e3c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	4413      	add	r3, r2
 8010e44:	4619      	mov	r1, r3
 8010e46:	482d      	ldr	r0, [pc, #180]	; (8010efc <ProcessRadioTxDone+0x160>)
 8010e48:	f00d fa06 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010e4c:	482b      	ldr	r0, [pc, #172]	; (8010efc <ProcessRadioTxDone+0x160>)
 8010e4e:	f00d f925 	bl	801e09c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e52:	4b26      	ldr	r3, [pc, #152]	; (8010eec <ProcessRadioTxDone+0x150>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a23      	ldr	r2, [pc, #140]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e5a:	4b25      	ldr	r3, [pc, #148]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010e5c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010e60:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e62:	4b22      	ldr	r3, [pc, #136]	; (8010eec <ProcessRadioTxDone+0x150>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f00c fc53 	bl	801d718 <SysTimeGetMcuTime>
 8010e72:	4638      	mov	r0, r7
 8010e74:	4b1b      	ldr	r3, [pc, #108]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010e76:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010e7a:	9200      	str	r2, [sp, #0]
 8010e7c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e84:	ca06      	ldmia	r2, {r1, r2}
 8010e86:	f00c fba8 	bl	801d5da <SysTimeSub>
 8010e8a:	f107 0314 	add.w	r3, r7, #20
 8010e8e:	463a      	mov	r2, r7
 8010e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e94:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e98:	4b15      	ldr	r3, [pc, #84]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010e9a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010e9e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010ea4:	4b0f      	ldr	r3, [pc, #60]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010ea6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010eb2:	4b0c      	ldr	r3, [pc, #48]	; (8010ee4 <ProcessRadioTxDone+0x148>)
 8010eb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010eb8:	f107 0208 	add.w	r2, r7, #8
 8010ebc:	4611      	mov	r1, r2
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f006 fcbd 	bl	801783e <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010ec4:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010ec6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010eca:	f083 0301 	eor.w	r3, r3, #1
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d003      	beq.n	8010edc <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ed4:	4b06      	ldr	r3, [pc, #24]	; (8010ef0 <ProcessRadioTxDone+0x154>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010edc:	bf00      	nop
 8010ede:	3740      	adds	r7, #64	; 0x40
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	20000e2c 	.word	0x20000e2c
 8010ee8:	0801fa18 	.word	0x0801fa18
 8010eec:	20001598 	.word	0x20001598
 8010ef0:	20000924 	.word	0x20000924
 8010ef4:	20000ca4 	.word	0x20000ca4
 8010ef8:	20000cbc 	.word	0x20000cbc
 8010efc:	20000d18 	.word	0x20000d18

08010f00 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010f04:	4b10      	ldr	r3, [pc, #64]	; (8010f48 <PrepareRxDoneAbort+0x48>)
 8010f06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f0e:	4a0e      	ldr	r2, [pc, #56]	; (8010f48 <PrepareRxDoneAbort+0x48>)
 8010f10:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010f14:	4b0c      	ldr	r3, [pc, #48]	; (8010f48 <PrepareRxDoneAbort+0x48>)
 8010f16:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d002      	beq.n	8010f24 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010f1e:	2000      	movs	r0, #0
 8010f20:	f001 f950 	bl	80121c4 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010f24:	4a08      	ldr	r2, [pc, #32]	; (8010f48 <PrepareRxDoneAbort+0x48>)
 8010f26:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f2a:	f043 0302 	orr.w	r3, r3, #2
 8010f2e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010f32:	4a05      	ldr	r2, [pc, #20]	; (8010f48 <PrepareRxDoneAbort+0x48>)
 8010f34:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f38:	f043 0310 	orr.w	r3, r3, #16
 8010f3c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010f40:	f7ff ff14 	bl	8010d6c <UpdateRxSlotIdleState>
}
 8010f44:	bf00      	nop
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	20000924 	.word	0x20000924

08010f4c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f4c:	b5b0      	push	{r4, r5, r7, lr}
 8010f4e:	b0aa      	sub	sp, #168	; 0xa8
 8010f50:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f52:	2313      	movs	r3, #19
 8010f54:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f58:	4b78      	ldr	r3, [pc, #480]	; (801113c <ProcessRadioRxDone+0x1f0>)
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010f60:	4b76      	ldr	r3, [pc, #472]	; (801113c <ProcessRadioRxDone+0x1f0>)
 8010f62:	891b      	ldrh	r3, [r3, #8]
 8010f64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010f68:	4b74      	ldr	r3, [pc, #464]	; (801113c <ProcessRadioRxDone+0x1f0>)
 8010f6a:	895b      	ldrh	r3, [r3, #10]
 8010f6c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010f70:	4b72      	ldr	r3, [pc, #456]	; (801113c <ProcessRadioRxDone+0x1f0>)
 8010f72:	7b1b      	ldrb	r3, [r3, #12]
 8010f74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f82:	4b6f      	ldr	r3, [pc, #444]	; (8011140 <ProcessRadioRxDone+0x1f4>)
 8010f84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f92:	2301      	movs	r3, #1
 8010f94:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f9e:	4b69      	ldr	r3, [pc, #420]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010fa6:	4a67      	ldr	r2, [pc, #412]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fa8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010fac:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010fb0:	4a64      	ldr	r2, [pc, #400]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010fb6:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010fba:	4b62      	ldr	r3, [pc, #392]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fbc:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010fc0:	4b60      	ldr	r3, [pc, #384]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fc2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010fc6:	4b5f      	ldr	r3, [pc, #380]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010fce:	4b5d      	ldr	r3, [pc, #372]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010fd6:	4b5b      	ldr	r3, [pc, #364]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010fde:	4b59      	ldr	r3, [pc, #356]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010fe6:	4b57      	ldr	r3, [pc, #348]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010fee:	4b55      	ldr	r3, [pc, #340]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010ff6:	4b53      	ldr	r3, [pc, #332]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010ffe:	4b51      	ldr	r3, [pc, #324]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011000:	2200      	movs	r2, #0
 8011002:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011006:	4b4f      	ldr	r3, [pc, #316]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011008:	2200      	movs	r2, #0
 801100a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 801100e:	4b4d      	ldr	r3, [pc, #308]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011010:	2200      	movs	r2, #0
 8011012:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011016:	4b4b      	ldr	r3, [pc, #300]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011018:	2200      	movs	r2, #0
 801101a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801101e:	4b4a      	ldr	r3, [pc, #296]	; (8011148 <ProcessRadioRxDone+0x1fc>)
 8011020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011022:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011024:	4849      	ldr	r0, [pc, #292]	; (801114c <ProcessRadioRxDone+0x200>)
 8011026:	f00d f8a7 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801102a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801102e:	4619      	mov	r1, r3
 8011030:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011034:	f004 fc4b 	bl	80158ce <LoRaMacClassBRxBeacon>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00b      	beq.n	8011056 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801103e:	4a41      	ldr	r2, [pc, #260]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011040:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011044:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011048:	4a3e      	ldr	r2, [pc, #248]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 801104a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801104e:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8011052:	f000 bc1f 	b.w	8011894 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011056:	4b3a      	ldr	r3, [pc, #232]	; (8011140 <ProcessRadioRxDone+0x1f4>)
 8011058:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801105c:	2b01      	cmp	r3, #1
 801105e:	d11e      	bne.n	801109e <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011060:	f004 fc48 	bl	80158f4 <LoRaMacClassBIsPingExpected>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00a      	beq.n	8011080 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801106a:	2000      	movs	r0, #0
 801106c:	f004 fbf9 	bl	8015862 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011070:	2000      	movs	r0, #0
 8011072:	f004 fc1a 	bl	80158aa <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011076:	4b33      	ldr	r3, [pc, #204]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011078:	2204      	movs	r2, #4
 801107a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 801107e:	e00e      	b.n	801109e <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011080:	f004 fc3f 	bl	8015902 <LoRaMacClassBIsMulticastExpected>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d009      	beq.n	801109e <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801108a:	2000      	movs	r0, #0
 801108c:	f004 fbf3 	bl	8015876 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011090:	2000      	movs	r0, #0
 8011092:	f004 fc13 	bl	80158bc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011096:	4b2b      	ldr	r3, [pc, #172]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011098:	2205      	movs	r2, #5
 801109a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801109e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d106      	bne.n	80110b4 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110a6:	4b27      	ldr	r3, [pc, #156]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 80110a8:	2201      	movs	r2, #1
 80110aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 80110ae:	f7ff ff27 	bl	8010f00 <PrepareRxDoneAbort>
        return;
 80110b2:	e3ef      	b.n	8011894 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 80110b4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 80110be:	461a      	mov	r2, r3
 80110c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110c4:	4413      	add	r3, r2
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80110cc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	3b01      	subs	r3, #1
 80110d8:	2b06      	cmp	r3, #6
 80110da:	f200 83b4 	bhi.w	8011846 <ProcessRadioRxDone+0x8fa>
 80110de:	a201      	add	r2, pc, #4	; (adr r2, 80110e4 <ProcessRadioRxDone+0x198>)
 80110e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e4:	08011101 	.word	0x08011101
 80110e8:	08011847 	.word	0x08011847
 80110ec:	080112e1 	.word	0x080112e1
 80110f0:	08011847 	.word	0x08011847
 80110f4:	080112d9 	.word	0x080112d9
 80110f8:	08011847 	.word	0x08011847
 80110fc:	080117eb 	.word	0x080117eb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011104:	2b10      	cmp	r3, #16
 8011106:	d806      	bhi.n	8011116 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011108:	4b0e      	ldr	r3, [pc, #56]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 801110a:	2201      	movs	r2, #1
 801110c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011110:	f7ff fef6 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 8011114:	e3be      	b.n	8011894 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 8011116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801111a:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 801111c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011120:	b2db      	uxtb	r3, r3
 8011122:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011124:	4b06      	ldr	r3, [pc, #24]	; (8011140 <ProcessRadioRxDone+0x1f4>)
 8011126:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801112a:	2b00      	cmp	r3, #0
 801112c:	d010      	beq.n	8011150 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801112e:	4b05      	ldr	r3, [pc, #20]	; (8011144 <ProcessRadioRxDone+0x1f8>)
 8011130:	2201      	movs	r2, #1
 8011132:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011136:	f7ff fee3 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 801113a:	e3ab      	b.n	8011894 <ProcessRadioRxDone+0x948>
 801113c:	2000159c 	.word	0x2000159c
 8011140:	20000e2c 	.word	0x20000e2c
 8011144:	20000924 	.word	0x20000924
 8011148:	0801fa18 	.word	0x0801fa18
 801114c:	20000cbc 	.word	0x20000cbc
            }

            SecureElementGetJoinEui( joinEui );
 8011150:	1d3b      	adds	r3, r7, #4
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fa92 	bl	800f67c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8011158:	f107 0214 	add.w	r2, r7, #20
 801115c:	1d3b      	adds	r3, r7, #4
 801115e:	4619      	mov	r1, r3
 8011160:	20ff      	movs	r0, #255	; 0xff
 8011162:	f005 fdd5 	bl	8016d10 <LoRaMacCryptoHandleJoinAccept>
 8011166:	4603      	mov	r3, r0
 8011168:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 801116c:	2300      	movs	r3, #0
 801116e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011176:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801117a:	b2db      	uxtb	r3, r3
 801117c:	b25b      	sxtb	r3, r3
 801117e:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011180:	4bbb      	ldr	r3, [pc, #748]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011182:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011186:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8011188:	4bb9      	ldr	r3, [pc, #740]	; (8011470 <ProcessRadioRxDone+0x524>)
 801118a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801118e:	4639      	mov	r1, r7
 8011190:	2207      	movs	r2, #7
 8011192:	4618      	mov	r0, r3
 8011194:	f006 fb76 	bl	8017884 <RegionVerify>
 8011198:	4603      	mov	r3, r0
 801119a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801119e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f040 808c 	bne.w	80112c0 <ProcessRadioRxDone+0x374>
 80111a8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 8087 	beq.w	80112c0 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80111b2:	7f7b      	ldrb	r3, [r7, #29]
 80111b4:	461a      	mov	r2, r3
 80111b6:	4bae      	ldr	r3, [pc, #696]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80111bc:	4bac      	ldr	r3, [pc, #688]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111c2:	7fbb      	ldrb	r3, [r7, #30]
 80111c4:	021b      	lsls	r3, r3, #8
 80111c6:	4313      	orrs	r3, r2
 80111c8:	4aa9      	ldr	r2, [pc, #676]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80111ce:	4ba8      	ldr	r3, [pc, #672]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111d4:	7ffb      	ldrb	r3, [r7, #31]
 80111d6:	041b      	lsls	r3, r3, #16
 80111d8:	4313      	orrs	r3, r2
 80111da:	4aa5      	ldr	r2, [pc, #660]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80111e0:	6a3b      	ldr	r3, [r7, #32]
 80111e2:	4aa3      	ldr	r2, [pc, #652]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111e8:	4ba1      	ldr	r3, [pc, #644]	; (8011470 <ProcessRadioRxDone+0x524>)
 80111ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111ee:	4619      	mov	r1, r3
 80111f0:	2002      	movs	r0, #2
 80111f2:	f7fe fa5b 	bl	800f6ac <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	461a      	mov	r2, r3
 8011202:	4b9b      	ldr	r3, [pc, #620]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011204:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801120c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011210:	b2db      	uxtb	r3, r3
 8011212:	461a      	mov	r2, r3
 8011214:	4b96      	ldr	r3, [pc, #600]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801121a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801121e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011222:	b2db      	uxtb	r3, r3
 8011224:	461a      	mov	r2, r3
 8011226:	4b92      	ldr	r3, [pc, #584]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011228:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801122c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011230:	461a      	mov	r2, r3
 8011232:	4b8f      	ldr	r3, [pc, #572]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011234:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011236:	4b8e      	ldr	r3, [pc, #568]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801123a:	2b00      	cmp	r3, #0
 801123c:	d102      	bne.n	8011244 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801123e:	4b8c      	ldr	r3, [pc, #560]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011240:	2201      	movs	r2, #1
 8011242:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011244:	4b8a      	ldr	r3, [pc, #552]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801124c:	fb02 f303 	mul.w	r3, r2, r3
 8011250:	4a87      	ldr	r2, [pc, #540]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011252:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011254:	4b86      	ldr	r3, [pc, #536]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011258:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801125c:	4a84      	ldr	r2, [pc, #528]	; (8011470 <ProcessRadioRxDone+0x524>)
 801125e:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8011260:	4b83      	ldr	r3, [pc, #524]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011262:	2201      	movs	r2, #1
 8011264:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011268:	4b81      	ldr	r3, [pc, #516]	; (8011470 <ProcessRadioRxDone+0x524>)
 801126a:	2200      	movs	r2, #0
 801126c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011270:	f107 0314 	add.w	r3, r7, #20
 8011274:	3312      	adds	r3, #18
 8011276:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801127c:	b2db      	uxtb	r3, r3
 801127e:	3b11      	subs	r3, #17
 8011280:	b2db      	uxtb	r3, r3
 8011282:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011286:	4b7a      	ldr	r3, [pc, #488]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011288:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801128c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011290:	4611      	mov	r1, r2
 8011292:	4618      	mov	r0, r3
 8011294:	f006 fb0d 	bl	80178b2 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011298:	4b75      	ldr	r3, [pc, #468]	; (8011470 <ProcessRadioRxDone+0x524>)
 801129a:	2202      	movs	r2, #2
 801129c:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80112a0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80112a4:	4618      	mov	r0, r3
 80112a6:	f005 f80d 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f000 82d2 	beq.w	8011856 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80112b2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80112b6:	4619      	mov	r1, r3
 80112b8:	2000      	movs	r0, #0
 80112ba:	f004 ff77 	bl	80161ac <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80112be:	e2ca      	b.n	8011856 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80112c0:	2001      	movs	r0, #1
 80112c2:	f004 ffff 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 82c3 	beq.w	8011854 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80112ce:	2101      	movs	r1, #1
 80112d0:	2007      	movs	r0, #7
 80112d2:	f004 ff6b 	bl	80161ac <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80112d6:	e2bd      	b.n	8011854 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80112d8:	4b66      	ldr	r3, [pc, #408]	; (8011474 <ProcessRadioRxDone+0x528>)
 80112da:	2201      	movs	r2, #1
 80112dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112e0:	4b63      	ldr	r3, [pc, #396]	; (8011470 <ProcessRadioRxDone+0x524>)
 80112e2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112e6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112ea:	4b62      	ldr	r3, [pc, #392]	; (8011474 <ProcessRadioRxDone+0x528>)
 80112ec:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80112f0:	b25b      	sxtb	r3, r3
 80112f2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112f6:	230d      	movs	r3, #13
 80112f8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112fc:	4b5c      	ldr	r3, [pc, #368]	; (8011470 <ProcessRadioRxDone+0x524>)
 80112fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011306:	230e      	movs	r3, #14
 8011308:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801130c:	4b58      	ldr	r3, [pc, #352]	; (8011470 <ProcessRadioRxDone+0x524>)
 801130e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011312:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011316:	4611      	mov	r1, r2
 8011318:	4618      	mov	r0, r3
 801131a:	f006 fa78 	bl	801780e <RegionGetPhyParam>
 801131e:	4603      	mov	r3, r0
 8011320:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011322:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011326:	3b0d      	subs	r3, #13
 8011328:	b29b      	uxth	r3, r3
 801132a:	b21b      	sxth	r3, r3
 801132c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011330:	b21a      	sxth	r2, r3
 8011332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011334:	b21b      	sxth	r3, r3
 8011336:	429a      	cmp	r2, r3
 8011338:	dc03      	bgt.n	8011342 <ProcessRadioRxDone+0x3f6>
 801133a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801133e:	2b0b      	cmp	r3, #11
 8011340:	d806      	bhi.n	8011350 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011342:	4b4c      	ldr	r3, [pc, #304]	; (8011474 <ProcessRadioRxDone+0x528>)
 8011344:	2201      	movs	r2, #1
 8011346:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801134a:	f7ff fdd9 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 801134e:	e2a1      	b.n	8011894 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8011350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011354:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8011356:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801135a:	b2db      	uxtb	r3, r3
 801135c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011360:	4b45      	ldr	r3, [pc, #276]	; (8011478 <ProcessRadioRxDone+0x52c>)
 8011362:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011364:	23ff      	movs	r3, #255	; 0xff
 8011366:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801136a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801136e:	4618      	mov	r0, r3
 8011370:	f005 ffd0 	bl	8017314 <LoRaMacParserData>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d006      	beq.n	8011388 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801137a:	4b3e      	ldr	r3, [pc, #248]	; (8011474 <ProcessRadioRxDone+0x528>)
 801137c:	2201      	movs	r2, #1
 801137e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011382:	f7ff fdbd 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 8011386:	e285      	b.n	8011894 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801138a:	4a3a      	ldr	r2, [pc, #232]	; (8011474 <ProcessRadioRxDone+0x528>)
 801138c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011390:	f107 020e 	add.w	r2, r7, #14
 8011394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011398:	4611      	mov	r1, r2
 801139a:	4618      	mov	r0, r3
 801139c:	f002 fc6b 	bl	8013c76 <DetermineFrameType>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113a6:	4b33      	ldr	r3, [pc, #204]	; (8011474 <ProcessRadioRxDone+0x528>)
 80113a8:	2201      	movs	r2, #1
 80113aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80113ae:	f7ff fda7 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 80113b2:	e26f      	b.n	8011894 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 80113b4:	2300      	movs	r3, #0
 80113b6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80113be:	2300      	movs	r3, #0
 80113c0:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80113c4:	e04f      	b.n	8011466 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113c6:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113ca:	4929      	ldr	r1, [pc, #164]	; (8011470 <ProcessRadioRxDone+0x524>)
 80113cc:	4613      	mov	r3, r2
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	4413      	add	r3, r2
 80113d2:	011b      	lsls	r3, r3, #4
 80113d4:	440b      	add	r3, r1
 80113d6:	33ec      	adds	r3, #236	; 0xec
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113dc:	429a      	cmp	r2, r3
 80113de:	d13d      	bne.n	801145c <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80113e0:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113e4:	4922      	ldr	r1, [pc, #136]	; (8011470 <ProcessRadioRxDone+0x524>)
 80113e6:	4613      	mov	r3, r2
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	4413      	add	r3, r2
 80113ec:	011b      	lsls	r3, r3, #4
 80113ee:	440b      	add	r3, r1
 80113f0:	33e9      	adds	r3, #233	; 0xe9
 80113f2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d031      	beq.n	801145c <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 80113f8:	2301      	movs	r3, #1
 80113fa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80113fe:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011402:	491b      	ldr	r1, [pc, #108]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011404:	4613      	mov	r3, r2
 8011406:	005b      	lsls	r3, r3, #1
 8011408:	4413      	add	r3, r2
 801140a:	011b      	lsls	r3, r3, #4
 801140c:	440b      	add	r3, r1
 801140e:	33ea      	adds	r3, #234	; 0xea
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011416:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801141a:	4915      	ldr	r1, [pc, #84]	; (8011470 <ProcessRadioRxDone+0x524>)
 801141c:	4613      	mov	r3, r2
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	4413      	add	r3, r2
 8011422:	011b      	lsls	r3, r3, #4
 8011424:	440b      	add	r3, r1
 8011426:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011430:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011434:	490e      	ldr	r1, [pc, #56]	; (8011470 <ProcessRadioRxDone+0x524>)
 8011436:	4613      	mov	r3, r2
 8011438:	005b      	lsls	r3, r3, #1
 801143a:	4413      	add	r3, r2
 801143c:	011b      	lsls	r3, r3, #4
 801143e:	440b      	add	r3, r1
 8011440:	33ec      	adds	r3, #236	; 0xec
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011448:	4b09      	ldr	r3, [pc, #36]	; (8011470 <ProcessRadioRxDone+0x524>)
 801144a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801144e:	2b02      	cmp	r3, #2
 8011450:	d114      	bne.n	801147c <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011452:	4b08      	ldr	r3, [pc, #32]	; (8011474 <ProcessRadioRxDone+0x528>)
 8011454:	2203      	movs	r2, #3
 8011456:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 801145a:	e00f      	b.n	801147c <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801145c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8011460:	3301      	adds	r3, #1
 8011462:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011466:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801146a:	2b00      	cmp	r3, #0
 801146c:	d0ab      	beq.n	80113c6 <ProcessRadioRxDone+0x47a>
 801146e:	e006      	b.n	801147e <ProcessRadioRxDone+0x532>
 8011470:	20000e2c 	.word	0x20000e2c
 8011474:	20000924 	.word	0x20000924
 8011478:	20000b5c 	.word	0x20000b5c
                    break;
 801147c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801147e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011482:	2b01      	cmp	r3, #1
 8011484:	d117      	bne.n	80114b6 <ProcessRadioRxDone+0x56a>
 8011486:	7bbb      	ldrb	r3, [r7, #14]
 8011488:	2b03      	cmp	r3, #3
 801148a:	d10d      	bne.n	80114a8 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801148c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011490:	f003 0320 	and.w	r3, r3, #32
 8011494:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011496:	2b00      	cmp	r3, #0
 8011498:	d106      	bne.n	80114a8 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801149a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114a2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d006      	beq.n	80114b6 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114a8:	4bb3      	ldr	r3, [pc, #716]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80114aa:	2201      	movs	r2, #1
 80114ac:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80114b0:	f7ff fd26 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 80114b4:	e1ee      	b.n	8011894 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80114b6:	2315      	movs	r3, #21
 80114b8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114bc:	4baf      	ldr	r3, [pc, #700]	; (801177c <ProcessRadioRxDone+0x830>)
 80114be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80114c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80114c6:	4611      	mov	r1, r2
 80114c8:	4618      	mov	r0, r3
 80114ca:	f006 f9a0 	bl	801780e <RegionGetPhyParam>
 80114ce:	4603      	mov	r3, r0
 80114d0:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80114d2:	7bb9      	ldrb	r1, [r7, #14]
 80114d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4da8      	ldr	r5, [pc, #672]	; (801177c <ProcessRadioRxDone+0x830>)
 80114da:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80114de:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80114e2:	f107 0210 	add.w	r2, r7, #16
 80114e6:	9202      	str	r2, [sp, #8]
 80114e8:	f107 020f 	add.w	r2, r7, #15
 80114ec:	9201      	str	r2, [sp, #4]
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80114f4:	4622      	mov	r2, r4
 80114f6:	f000 fe8d 	bl	8012214 <GetFCntDown>
 80114fa:	4603      	mov	r3, r0
 80114fc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011500:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011504:	2b00      	cmp	r3, #0
 8011506:	d035      	beq.n	8011574 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011508:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801150c:	2b07      	cmp	r3, #7
 801150e:	d119      	bne.n	8011544 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011510:	4b99      	ldr	r3, [pc, #612]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011512:	2208      	movs	r2, #8
 8011514:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8011518:	4b98      	ldr	r3, [pc, #608]	; (801177c <ProcessRadioRxDone+0x830>)
 801151a:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 801151e:	2b00      	cmp	r3, #0
 8011520:	d11d      	bne.n	801155e <ProcessRadioRxDone+0x612>
 8011522:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011526:	f023 031f 	bic.w	r3, r3, #31
 801152a:	b2db      	uxtb	r3, r3
 801152c:	2ba0      	cmp	r3, #160	; 0xa0
 801152e:	d116      	bne.n	801155e <ProcessRadioRxDone+0x612>
 8011530:	4b92      	ldr	r3, [pc, #584]	; (801177c <ProcessRadioRxDone+0x830>)
 8011532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011536:	429a      	cmp	r2, r3
 8011538:	d111      	bne.n	801155e <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801153a:	4b90      	ldr	r3, [pc, #576]	; (801177c <ProcessRadioRxDone+0x830>)
 801153c:	2201      	movs	r2, #1
 801153e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011542:	e00c      	b.n	801155e <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011544:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011548:	2b08      	cmp	r3, #8
 801154a:	d104      	bne.n	8011556 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801154c:	4b8a      	ldr	r3, [pc, #552]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801154e:	220a      	movs	r2, #10
 8011550:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011554:	e003      	b.n	801155e <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011556:	4b88      	ldr	r3, [pc, #544]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011558:	2201      	movs	r2, #1
 801155a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	4a85      	ldr	r2, [pc, #532]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011562:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	4a83      	ldr	r2, [pc, #524]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801156a:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 801156e:	f7ff fcc7 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 8011572:	e18f      	b.n	8011894 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011574:	7bfa      	ldrb	r2, [r7, #15]
 8011576:	6939      	ldr	r1, [r7, #16]
 8011578:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 801157c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011580:	9300      	str	r3, [sp, #0]
 8011582:	460b      	mov	r3, r1
 8011584:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011588:	f005 fd24 	bl	8016fd4 <LoRaMacCryptoUnsecureMessage>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011592:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00f      	beq.n	80115ba <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801159a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801159e:	2b02      	cmp	r3, #2
 80115a0:	d104      	bne.n	80115ac <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80115a2:	4b75      	ldr	r3, [pc, #468]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115a4:	220b      	movs	r2, #11
 80115a6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80115aa:	e003      	b.n	80115b4 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80115ac:	4b72      	ldr	r3, [pc, #456]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115ae:	220c      	movs	r2, #12
 80115b0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 80115b4:	f7ff fca4 	bl	8010f00 <PrepareRxDoneAbort>
                return;
 80115b8:	e16c      	b.n	8011894 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115ba:	4b6f      	ldr	r3, [pc, #444]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 80115c2:	4a6d      	ldr	r2, [pc, #436]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115c4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80115c8:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 80115cc:	4b6a      	ldr	r3, [pc, #424]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115ce:	2200      	movs	r2, #0
 80115d0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80115d4:	4b68      	ldr	r3, [pc, #416]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	4a66      	ldr	r2, [pc, #408]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115e0:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	4a64      	ldr	r2, [pc, #400]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80115e8:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115ec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	bf14      	ite	ne
 80115fa:	2301      	movne	r3, #1
 80115fc:	2300      	moveq	r3, #0
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	4b5d      	ldr	r3, [pc, #372]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011602:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011606:	4b5c      	ldr	r3, [pc, #368]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011608:	2200      	movs	r2, #0
 801160a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801160e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011612:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b00      	cmp	r3, #0
 801161a:	bf14      	ite	ne
 801161c:	2301      	movne	r3, #1
 801161e:	2300      	moveq	r3, #0
 8011620:	b2da      	uxtb	r2, r3
 8011622:	4b55      	ldr	r3, [pc, #340]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011624:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011628:	4b53      	ldr	r3, [pc, #332]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801162a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801162e:	2b00      	cmp	r3, #0
 8011630:	d004      	beq.n	801163c <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011632:	4b51      	ldr	r3, [pc, #324]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011634:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011638:	2b01      	cmp	r3, #1
 801163a:	d102      	bne.n	8011642 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801163c:	4b4f      	ldr	r3, [pc, #316]	; (801177c <ProcessRadioRxDone+0x830>)
 801163e:	2200      	movs	r2, #0
 8011640:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011642:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011646:	2b01      	cmp	r3, #1
 8011648:	d104      	bne.n	8011654 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801164a:	4b4b      	ldr	r3, [pc, #300]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801164c:	2202      	movs	r2, #2
 801164e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011652:	e01f      	b.n	8011694 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011654:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011658:	f023 031f 	bic.w	r3, r3, #31
 801165c:	b2db      	uxtb	r3, r3
 801165e:	2ba0      	cmp	r3, #160	; 0xa0
 8011660:	d110      	bne.n	8011684 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011662:	4b46      	ldr	r3, [pc, #280]	; (801177c <ProcessRadioRxDone+0x830>)
 8011664:	2201      	movs	r2, #1
 8011666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801166a:	4b44      	ldr	r3, [pc, #272]	; (801177c <ProcessRadioRxDone+0x830>)
 801166c:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011676:	4a41      	ldr	r2, [pc, #260]	; (801177c <ProcessRadioRxDone+0x830>)
 8011678:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801167a:	4b3f      	ldr	r3, [pc, #252]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801167c:	2201      	movs	r2, #1
 801167e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011682:	e007      	b.n	8011694 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011684:	4b3d      	ldr	r3, [pc, #244]	; (801177c <ProcessRadioRxDone+0x830>)
 8011686:	2200      	movs	r2, #0
 8011688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801168c:	4b3a      	ldr	r3, [pc, #232]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801168e:	2200      	movs	r2, #0
 8011690:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011694:	4b39      	ldr	r3, [pc, #228]	; (801177c <ProcessRadioRxDone+0x830>)
 8011696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801169a:	2b00      	cmp	r3, #0
 801169c:	d106      	bne.n	80116ac <ProcessRadioRxDone+0x760>
 801169e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116a2:	f003 0310 	and.w	r3, r3, #16
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d008      	beq.n	80116be <ProcessRadioRxDone+0x772>
 80116ac:	4b33      	ldr	r3, [pc, #204]	; (801177c <ProcessRadioRxDone+0x830>)
 80116ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80116b6:	4b30      	ldr	r3, [pc, #192]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80116b8:	2201      	movs	r2, #1
 80116ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80116be:	4b2e      	ldr	r3, [pc, #184]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80116c0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116c4:	4a2c      	ldr	r2, [pc, #176]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80116c6:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 80116ca:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80116ce:	4618      	mov	r0, r3
 80116d0:	f001 fef2 	bl	80134b8 <RemoveMacCommands>

            switch( fType )
 80116d4:	7bbb      	ldrb	r3, [r7, #14]
 80116d6:	2b03      	cmp	r3, #3
 80116d8:	d878      	bhi.n	80117cc <ProcessRadioRxDone+0x880>
 80116da:	a201      	add	r2, pc, #4	; (adr r2, 80116e0 <ProcessRadioRxDone+0x794>)
 80116dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e0:	080116f1 	.word	0x080116f1
 80116e4:	08011741 	.word	0x08011741
 80116e8:	08011781 	.word	0x08011781
 80116ec:	080117a7 	.word	0x080117a7
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116f0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	461c      	mov	r4, r3
 80116fc:	4b1e      	ldr	r3, [pc, #120]	; (8011778 <ProcessRadioRxDone+0x82c>)
 80116fe:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011702:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011706:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801170a:	f102 0010 	add.w	r0, r2, #16
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	460b      	mov	r3, r1
 8011712:	4622      	mov	r2, r4
 8011714:	2100      	movs	r1, #0
 8011716:	f000 fef7 	bl	8012508 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801171a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801171e:	4b16      	ldr	r3, [pc, #88]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011720:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011726:	4a14      	ldr	r2, [pc, #80]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011728:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801172c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011730:	4b11      	ldr	r3, [pc, #68]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011732:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011736:	4b10      	ldr	r3, [pc, #64]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011738:	2201      	movs	r2, #1
 801173a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801173e:	e04c      	b.n	80117da <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011740:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011744:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011748:	b2db      	uxtb	r3, r3
 801174a:	461c      	mov	r4, r3
 801174c:	4b0a      	ldr	r3, [pc, #40]	; (8011778 <ProcessRadioRxDone+0x82c>)
 801174e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011752:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011756:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801175a:	f102 0010 	add.w	r0, r2, #16
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	460b      	mov	r3, r1
 8011762:	4622      	mov	r2, r4
 8011764:	2100      	movs	r1, #0
 8011766:	f000 fecf 	bl	8012508 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801176a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801176e:	4b02      	ldr	r3, [pc, #8]	; (8011778 <ProcessRadioRxDone+0x82c>)
 8011770:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011774:	e031      	b.n	80117da <ProcessRadioRxDone+0x88e>
 8011776:	bf00      	nop
 8011778:	20000924 	.word	0x20000924
 801177c:	20000e2c 	.word	0x20000e2c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011780:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011782:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011786:	4b45      	ldr	r3, [pc, #276]	; (801189c <ProcessRadioRxDone+0x950>)
 8011788:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801178c:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	460b      	mov	r3, r1
 8011794:	2100      	movs	r1, #0
 8011796:	f000 feb7 	bl	8012508 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801179a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801179e:	4b3f      	ldr	r3, [pc, #252]	; (801189c <ProcessRadioRxDone+0x950>)
 80117a0:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80117a4:	e019      	b.n	80117da <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80117a6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80117aa:	4b3c      	ldr	r3, [pc, #240]	; (801189c <ProcessRadioRxDone+0x950>)
 80117ac:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80117b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117b2:	4a3a      	ldr	r2, [pc, #232]	; (801189c <ProcessRadioRxDone+0x950>)
 80117b4:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80117b8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80117bc:	4b37      	ldr	r3, [pc, #220]	; (801189c <ProcessRadioRxDone+0x950>)
 80117be:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 80117c2:	4b36      	ldr	r3, [pc, #216]	; (801189c <ProcessRadioRxDone+0x950>)
 80117c4:	2201      	movs	r2, #1
 80117c6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 80117ca:	e006      	b.n	80117da <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117cc:	4b33      	ldr	r3, [pc, #204]	; (801189c <ProcessRadioRxDone+0x950>)
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 80117d4:	f7ff fb94 	bl	8010f00 <PrepareRxDoneAbort>
                    break;
 80117d8:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80117da:	4a30      	ldr	r2, [pc, #192]	; (801189c <ProcessRadioRxDone+0x950>)
 80117dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117e0:	f043 0302 	orr.w	r3, r3, #2
 80117e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80117e8:	e035      	b.n	8011856 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80117ea:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117f2:	18d1      	adds	r1, r2, r3
 80117f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	b29b      	uxth	r3, r3
 8011802:	461a      	mov	r2, r3
 8011804:	4826      	ldr	r0, [pc, #152]	; (80118a0 <ProcessRadioRxDone+0x954>)
 8011806:	f008 fb1c 	bl	8019e42 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801180a:	4b24      	ldr	r3, [pc, #144]	; (801189c <ProcessRadioRxDone+0x950>)
 801180c:	2203      	movs	r2, #3
 801180e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011812:	4b22      	ldr	r3, [pc, #136]	; (801189c <ProcessRadioRxDone+0x950>)
 8011814:	2200      	movs	r2, #0
 8011816:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801181a:	4b20      	ldr	r3, [pc, #128]	; (801189c <ProcessRadioRxDone+0x950>)
 801181c:	4a20      	ldr	r2, [pc, #128]	; (80118a0 <ProcessRadioRxDone+0x954>)
 801181e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011822:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011826:	b2da      	uxtb	r2, r3
 8011828:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	b2da      	uxtb	r2, r3
 8011830:	4b1a      	ldr	r3, [pc, #104]	; (801189c <ProcessRadioRxDone+0x950>)
 8011832:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011836:	4a19      	ldr	r2, [pc, #100]	; (801189c <ProcessRadioRxDone+0x950>)
 8011838:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801183c:	f043 0302 	orr.w	r3, r3, #2
 8011840:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011844:	e007      	b.n	8011856 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011846:	4b15      	ldr	r3, [pc, #84]	; (801189c <ProcessRadioRxDone+0x950>)
 8011848:	2201      	movs	r2, #1
 801184a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 801184e:	f7ff fb57 	bl	8010f00 <PrepareRxDoneAbort>
            break;
 8011852:	e000      	b.n	8011856 <ProcessRadioRxDone+0x90a>
            break;
 8011854:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <ProcessRadioRxDone+0x950>)
 8011858:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801185c:	2b00      	cmp	r3, #0
 801185e:	d008      	beq.n	8011872 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011860:	4b0e      	ldr	r3, [pc, #56]	; (801189c <ProcessRadioRxDone+0x950>)
 8011862:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00b      	beq.n	8011882 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801186a:	2000      	movs	r0, #0
 801186c:	f000 fcaa 	bl	80121c4 <OnAckTimeoutTimerEvent>
 8011870:	e007      	b.n	8011882 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011872:	4b0c      	ldr	r3, [pc, #48]	; (80118a4 <ProcessRadioRxDone+0x958>)
 8011874:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011878:	2b02      	cmp	r3, #2
 801187a:	d102      	bne.n	8011882 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801187c:	2000      	movs	r0, #0
 801187e:	f000 fca1 	bl	80121c4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011882:	4a06      	ldr	r2, [pc, #24]	; (801189c <ProcessRadioRxDone+0x950>)
 8011884:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011888:	f043 0310 	orr.w	r3, r3, #16
 801188c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011890:	f7ff fa6c 	bl	8010d6c <UpdateRxSlotIdleState>
}
 8011894:	3798      	adds	r7, #152	; 0x98
 8011896:	46bd      	mov	sp, r7
 8011898:	bdb0      	pop	{r4, r5, r7, pc}
 801189a:	bf00      	nop
 801189c:	20000924 	.word	0x20000924
 80118a0:	20000b5c 	.word	0x20000b5c
 80118a4:	20000e2c 	.word	0x20000e2c

080118a8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80118ac:	4b11      	ldr	r3, [pc, #68]	; (80118f4 <ProcessRadioTxTimeout+0x4c>)
 80118ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	d002      	beq.n	80118bc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80118b6:	4b10      	ldr	r3, [pc, #64]	; (80118f8 <ProcessRadioTxTimeout+0x50>)
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 80118bc:	f7ff fa56 	bl	8010d6c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80118c0:	4b0e      	ldr	r3, [pc, #56]	; (80118fc <ProcessRadioTxTimeout+0x54>)
 80118c2:	2202      	movs	r2, #2
 80118c4:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80118c8:	2002      	movs	r0, #2
 80118ca:	f004 fcc7 	bl	801625c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80118ce:	4b0b      	ldr	r3, [pc, #44]	; (80118fc <ProcessRadioTxTimeout+0x54>)
 80118d0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d003      	beq.n	80118e0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80118d8:	4b08      	ldr	r3, [pc, #32]	; (80118fc <ProcessRadioTxTimeout+0x54>)
 80118da:	2201      	movs	r2, #1
 80118dc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80118e0:	4a06      	ldr	r2, [pc, #24]	; (80118fc <ProcessRadioTxTimeout+0x54>)
 80118e2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118e6:	f043 0310 	orr.w	r3, r3, #16
 80118ea:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80118ee:	bf00      	nop
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20000e2c 	.word	0x20000e2c
 80118f8:	0801fa18 	.word	0x0801fa18
 80118fc:	20000924 	.word	0x20000924

08011900 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b084      	sub	sp, #16
 8011904:	af00      	add	r7, sp, #0
 8011906:	4603      	mov	r3, r0
 8011908:	460a      	mov	r2, r1
 801190a:	71fb      	strb	r3, [r7, #7]
 801190c:	4613      	mov	r3, r2
 801190e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011910:	2300      	movs	r3, #0
 8011912:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011914:	4b40      	ldr	r3, [pc, #256]	; (8011a18 <HandleRadioRxErrorTimeout+0x118>)
 8011916:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801191a:	2b02      	cmp	r3, #2
 801191c:	d002      	beq.n	8011924 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801191e:	4b3f      	ldr	r3, [pc, #252]	; (8011a1c <HandleRadioRxErrorTimeout+0x11c>)
 8011920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011922:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011924:	f003 ffdf 	bl	80158e6 <LoRaMacClassBIsBeaconExpected>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d007      	beq.n	801193e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801192e:	2002      	movs	r0, #2
 8011930:	f003 ff8d 	bl	801584e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011934:	2000      	movs	r0, #0
 8011936:	f003 ffaf 	bl	8015898 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801193a:	2301      	movs	r3, #1
 801193c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801193e:	4b36      	ldr	r3, [pc, #216]	; (8011a18 <HandleRadioRxErrorTimeout+0x118>)
 8011940:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011944:	2b01      	cmp	r3, #1
 8011946:	d119      	bne.n	801197c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011948:	f003 ffd4 	bl	80158f4 <LoRaMacClassBIsPingExpected>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d007      	beq.n	8011962 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011952:	2000      	movs	r0, #0
 8011954:	f003 ff85 	bl	8015862 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011958:	2000      	movs	r0, #0
 801195a:	f003 ffa6 	bl	80158aa <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801195e:	2301      	movs	r3, #1
 8011960:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011962:	f003 ffce 	bl	8015902 <LoRaMacClassBIsMulticastExpected>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d007      	beq.n	801197c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801196c:	2000      	movs	r0, #0
 801196e:	f003 ff82 	bl	8015876 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011972:	2000      	movs	r0, #0
 8011974:	f003 ffa2 	bl	80158bc <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011978:	2301      	movs	r3, #1
 801197a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 801197c:	7bfb      	ldrb	r3, [r7, #15]
 801197e:	f083 0301 	eor.w	r3, r3, #1
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d040      	beq.n	8011a0a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011988:	4b25      	ldr	r3, [pc, #148]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 801198a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801198e:	2b00      	cmp	r3, #0
 8011990:	d122      	bne.n	80119d8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011992:	4b23      	ldr	r3, [pc, #140]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 8011994:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011998:	2b00      	cmp	r3, #0
 801199a:	d003      	beq.n	80119a4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 801199c:	4a20      	ldr	r2, [pc, #128]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 801199e:	79fb      	ldrb	r3, [r7, #7]
 80119a0:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80119a4:	79fb      	ldrb	r3, [r7, #7]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f004 fc58 	bl	801625c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80119ac:	4b1a      	ldr	r3, [pc, #104]	; (8011a18 <HandleRadioRxErrorTimeout+0x118>)
 80119ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b0:	4618      	mov	r0, r3
 80119b2:	f00c fd0d 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 80119b6:	4602      	mov	r2, r0
 80119b8:	4b19      	ldr	r3, [pc, #100]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 80119ba:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80119be:	429a      	cmp	r2, r3
 80119c0:	d323      	bcc.n	8011a0a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80119c2:	4818      	ldr	r0, [pc, #96]	; (8011a24 <HandleRadioRxErrorTimeout+0x124>)
 80119c4:	f00c fbd8 	bl	801e178 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119c8:	4a15      	ldr	r2, [pc, #84]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 80119ca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119ce:	f043 0310 	orr.w	r3, r3, #16
 80119d2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80119d6:	e018      	b.n	8011a0a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80119d8:	4b11      	ldr	r3, [pc, #68]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 80119da:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d003      	beq.n	80119ea <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80119e2:	4a0f      	ldr	r2, [pc, #60]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 80119e4:	79bb      	ldrb	r3, [r7, #6]
 80119e6:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80119ea:	79bb      	ldrb	r3, [r7, #6]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f004 fc35 	bl	801625c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119f2:	4b09      	ldr	r3, [pc, #36]	; (8011a18 <HandleRadioRxErrorTimeout+0x118>)
 80119f4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d006      	beq.n	8011a0a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119fc:	4a08      	ldr	r2, [pc, #32]	; (8011a20 <HandleRadioRxErrorTimeout+0x120>)
 80119fe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a02:	f043 0310 	orr.w	r3, r3, #16
 8011a06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011a0a:	f7ff f9af 	bl	8010d6c <UpdateRxSlotIdleState>
}
 8011a0e:	bf00      	nop
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	20000e2c 	.word	0x20000e2c
 8011a1c:	0801fa18 	.word	0x0801fa18
 8011a20:	20000924 	.word	0x20000924
 8011a24:	20000cbc 	.word	0x20000cbc

08011a28 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011a2c:	2106      	movs	r1, #6
 8011a2e:	2005      	movs	r0, #5
 8011a30:	f7ff ff66 	bl	8011900 <HandleRadioRxErrorTimeout>
}
 8011a34:	bf00      	nop
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011a3c:	2104      	movs	r1, #4
 8011a3e:	2003      	movs	r0, #3
 8011a40:	f7ff ff5e 	bl	8011900 <HandleRadioRxErrorTimeout>
}
 8011a44:	bf00      	nop
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a52:	607b      	str	r3, [r7, #4]
  return(result);
 8011a54:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011a56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a58:	b672      	cpsid	i
}
 8011a5a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011a5c:	4b1d      	ldr	r3, [pc, #116]	; (8011ad4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011a62:	4b1c      	ldr	r3, [pc, #112]	; (8011ad4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	601a      	str	r2, [r3, #0]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	f383 8810 	msr	PRIMASK, r3
}
 8011a72:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d027      	beq.n	8011aca <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011a7a:	783b      	ldrb	r3, [r7, #0]
 8011a7c:	f003 0310 	and.w	r3, r3, #16
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011a86:	f7ff f989 	bl	8010d9c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011a8a:	783b      	ldrb	r3, [r7, #0]
 8011a8c:	f003 0308 	and.w	r3, r3, #8
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011a96:	f7ff fa59 	bl	8010f4c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011a9a:	783b      	ldrb	r3, [r7, #0]
 8011a9c:	f003 0304 	and.w	r3, r3, #4
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011aa6:	f7ff feff 	bl	80118a8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011aaa:	783b      	ldrb	r3, [r7, #0]
 8011aac:	f003 0302 	and.w	r3, r3, #2
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d001      	beq.n	8011aba <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011ab6:	f7ff ffb7 	bl	8011a28 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011aba:	783b      	ldrb	r3, [r7, #0]
 8011abc:	f003 0301 	and.w	r3, r3, #1
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011ac6:	f7ff ffb7 	bl	8011a38 <ProcessRadioRxTimeout>
        }
    }
}
 8011aca:	bf00      	nop
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	20001594 	.word	0x20001594

08011ad8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011ad8:	b480      	push	{r7}
 8011ada:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011adc:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <LoRaMacIsBusy+0x34>)
 8011ade:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d101      	bne.n	8011aea <LoRaMacIsBusy+0x12>
    {
        return false;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e00c      	b.n	8011b04 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011aea:	4b08      	ldr	r3, [pc, #32]	; (8011b0c <LoRaMacIsBusy+0x34>)
 8011aec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d106      	bne.n	8011b02 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011af4:	4b05      	ldr	r3, [pc, #20]	; (8011b0c <LoRaMacIsBusy+0x34>)
 8011af6:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d101      	bne.n	8011b02 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011afe:	2300      	movs	r3, #0
 8011b00:	e000      	b.n	8011b04 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011b02:	2301      	movs	r3, #1
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bc80      	pop	{r7}
 8011b0a:	4770      	bx	lr
 8011b0c:	20000924 	.word	0x20000924

08011b10 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011b10:	b480      	push	{r7}
 8011b12:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011b14:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <LoRaMacIsStopped+0x1c>)
 8011b16:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d101      	bne.n	8011b22 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	e000      	b.n	8011b24 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bc80      	pop	{r7}
 8011b2a:	4770      	bx	lr
 8011b2c:	20000924 	.word	0x20000924

08011b30 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	4603      	mov	r3, r0
 8011b38:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011b3a:	4a04      	ldr	r2, [pc, #16]	; (8011b4c <LoRaMacEnableRequests+0x1c>)
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011b42:	bf00      	nop
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bc80      	pop	{r7}
 8011b4a:	4770      	bx	lr
 8011b4c:	20000924 	.word	0x20000924

08011b50 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011b56:	4b2c      	ldr	r3, [pc, #176]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b58:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b5c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011b5e:	4b2a      	ldr	r3, [pc, #168]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b60:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d14a      	bne.n	8011bfe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011b68:	4b27      	ldr	r3, [pc, #156]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b6a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b6e:	f003 0301 	and.w	r3, r3, #1
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d006      	beq.n	8011b86 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011b78:	4a23      	ldr	r2, [pc, #140]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b7a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b7e:	f36f 0300 	bfc	r3, #0, #1
 8011b82:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b86:	4b20      	ldr	r3, [pc, #128]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b88:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d006      	beq.n	8011ba4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b96:	4a1c      	ldr	r2, [pc, #112]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011b98:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b9c:	f36f 0382 	bfc	r3, #2, #1
 8011ba0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011ba4:	2001      	movs	r0, #1
 8011ba6:	f7ff ffc3 	bl	8011b30 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011baa:	793b      	ldrb	r3, [r7, #4]
 8011bac:	f003 0301 	and.w	r3, r3, #1
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d005      	beq.n	8011bc2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011bb6:	4b14      	ldr	r3, [pc, #80]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011bb8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4813      	ldr	r0, [pc, #76]	; (8011c0c <LoRaMacHandleRequestEvents+0xbc>)
 8011bc0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011bc2:	793b      	ldrb	r3, [r7, #4]
 8011bc4:	f003 0304 	and.w	r3, r3, #4
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00e      	beq.n	8011bec <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011bce:	4810      	ldr	r0, [pc, #64]	; (8011c10 <LoRaMacHandleRequestEvents+0xc0>)
 8011bd0:	f004 fb92 	bl	80162f8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011bd4:	f004 fbe2 	bl	801639c <LoRaMacConfirmQueueGetCnt>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d006      	beq.n	8011bec <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bde:	4a0a      	ldr	r2, [pc, #40]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011be0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011be4:	f043 0304 	orr.w	r3, r3, #4
 8011be8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011bec:	f003 fea7 	bl	801593e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011bf0:	4a05      	ldr	r2, [pc, #20]	; (8011c08 <LoRaMacHandleRequestEvents+0xb8>)
 8011bf2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bf6:	f36f 1304 	bfc	r3, #4, #1
 8011bfa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011bfe:	bf00      	nop
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	20000924 	.word	0x20000924
 8011c0c:	20000d58 	.word	0x20000d58
 8011c10:	20000d6c 	.word	0x20000d6c

08011c14 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011c18:	4b16      	ldr	r3, [pc, #88]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c1a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c1e:	f003 0308 	and.w	r3, r3, #8
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00d      	beq.n	8011c44 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011c28:	4a12      	ldr	r2, [pc, #72]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c2e:	f36f 03c3 	bfc	r3, #3, #1
 8011c32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011c36:	4b0f      	ldr	r3, [pc, #60]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c38:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	490e      	ldr	r1, [pc, #56]	; (8011c78 <LoRaMacHandleIndicationEvents+0x64>)
 8011c40:	480e      	ldr	r0, [pc, #56]	; (8011c7c <LoRaMacHandleIndicationEvents+0x68>)
 8011c42:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011c44:	4b0b      	ldr	r3, [pc, #44]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c46:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c4a:	f003 0302 	and.w	r3, r3, #2
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00d      	beq.n	8011c70 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011c54:	4a07      	ldr	r2, [pc, #28]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c56:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c5a:	f36f 0341 	bfc	r3, #1, #1
 8011c5e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011c62:	4b04      	ldr	r3, [pc, #16]	; (8011c74 <LoRaMacHandleIndicationEvents+0x60>)
 8011c64:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	4903      	ldr	r1, [pc, #12]	; (8011c78 <LoRaMacHandleIndicationEvents+0x64>)
 8011c6c:	4804      	ldr	r0, [pc, #16]	; (8011c80 <LoRaMacHandleIndicationEvents+0x6c>)
 8011c6e:	4798      	blx	r3
    }
}
 8011c70:	bf00      	nop
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	20000924 	.word	0x20000924
 8011c78:	20000da0 	.word	0x20000da0
 8011c7c:	20000d80 	.word	0x20000d80
 8011c80:	20000d3c 	.word	0x20000d3c

08011c84 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c8a:	4b32      	ldr	r3, [pc, #200]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c8c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c90:	f003 0301 	and.w	r3, r3, #1
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d058      	beq.n	8011d4c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011ca2:	4b2c      	ldr	r3, [pc, #176]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ca4:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d004      	beq.n	8011cb6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011cac:	4b29      	ldr	r3, [pc, #164]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cae:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011cb2:	2b03      	cmp	r3, #3
 8011cb4:	d104      	bne.n	8011cc0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011cb6:	f002 f82d 	bl	8013d14 <CheckRetransUnconfirmedUplink>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	71fb      	strb	r3, [r7, #7]
 8011cbe:	e020      	b.n	8011d02 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011cc0:	4b24      	ldr	r3, [pc, #144]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cc2:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d11b      	bne.n	8011d02 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011cca:	4b22      	ldr	r3, [pc, #136]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ccc:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d014      	beq.n	8011cfe <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011cd4:	f002 f84a 	bl	8013d6c <CheckRetransConfirmedUplink>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011cdc:	4b1e      	ldr	r3, [pc, #120]	; (8011d58 <LoRaMacHandleMcpsRequest+0xd4>)
 8011cde:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10d      	bne.n	8011d02 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	f083 0301 	eor.w	r3, r3, #1
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d002      	beq.n	8011cf8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011cf2:	f002 f8cd 	bl	8013e90 <AckTimeoutRetriesProcess>
 8011cf6:	e004      	b.n	8011d02 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011cf8:	f002 f908 	bl	8013f0c <AckTimeoutRetriesFinalize>
 8011cfc:	e001      	b.n	8011d02 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011d02:	79fb      	ldrb	r3, [r7, #7]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00d      	beq.n	8011d24 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011d08:	4814      	ldr	r0, [pc, #80]	; (8011d5c <LoRaMacHandleMcpsRequest+0xd8>)
 8011d0a:	f00c fa35 	bl	801e178 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011d0e:	4b11      	ldr	r3, [pc, #68]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d10:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d14:	f023 0320 	bic.w	r3, r3, #32
 8011d18:	4a0e      	ldr	r2, [pc, #56]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d1a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011d1e:	f002 f847 	bl	8013db0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011d22:	e013      	b.n	8011d4c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011d24:	79bb      	ldrb	r3, [r7, #6]
 8011d26:	f083 0301 	eor.w	r3, r3, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00d      	beq.n	8011d4c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011d30:	4a08      	ldr	r2, [pc, #32]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d32:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d36:	f36f 1304 	bfc	r3, #4, #1
 8011d3a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011d46:	2000      	movs	r0, #0
 8011d48:	f000 f992 	bl	8012070 <OnTxDelayedTimerEvent>
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	20000924 	.word	0x20000924
 8011d58:	20000e2c 	.word	0x20000e2c
 8011d5c:	20000c8c 	.word	0x20000c8c

08011d60 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d64:	4b1b      	ldr	r3, [pc, #108]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d66:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d6a:	f003 0304 	and.w	r3, r3, #4
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d02c      	beq.n	8011dce <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011d74:	2001      	movs	r0, #1
 8011d76:	f004 faa5 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d012      	beq.n	8011da6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011d80:	2001      	movs	r0, #1
 8011d82:	f004 fa41 	bl	8016208 <LoRaMacConfirmQueueGetStatus>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d103      	bne.n	8011d94 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011d8c:	4b11      	ldr	r3, [pc, #68]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d94:	4b0f      	ldr	r3, [pc, #60]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d9a:	f023 0302 	bic.w	r3, r3, #2
 8011d9e:	4a0d      	ldr	r2, [pc, #52]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011da0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011da4:	e013      	b.n	8011dce <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011da6:	2006      	movs	r0, #6
 8011da8:	f004 fa8c 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d105      	bne.n	8011dbe <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011db2:	2007      	movs	r0, #7
 8011db4:	f004 fa86 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8011db8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d007      	beq.n	8011dce <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011dc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dc4:	f023 0302 	bic.w	r3, r3, #2
 8011dc8:	4a02      	ldr	r2, [pc, #8]	; (8011dd4 <LoRaMacHandleMlmeRequest+0x74>)
 8011dca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011dce:	bf00      	nop
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	20000924 	.word	0x20000924

08011dd8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011ddc:	200c      	movs	r0, #12
 8011dde:	f004 fa71 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d019      	beq.n	8011e1c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011de8:	4b0e      	ldr	r3, [pc, #56]	; (8011e24 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dee:	f003 0301 	and.w	r3, r3, #1
 8011df2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d111      	bne.n	8011e1c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dfa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dfe:	f003 0304 	and.w	r3, r3, #4
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d009      	beq.n	8011e1c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e08:	4b06      	ldr	r3, [pc, #24]	; (8011e24 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e0a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e0e:	f023 0302 	bic.w	r3, r3, #2
 8011e12:	4a04      	ldr	r2, [pc, #16]	; (8011e24 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e14:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	e000      	b.n	8011e1e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	20000924 	.word	0x20000924

08011e28 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011e28:	b480      	push	{r7}
 8011e2a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011e2c:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <LoRaMacCheckForRxAbort+0x3c>)
 8011e2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00f      	beq.n	8011e5a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011e3a:	4b0a      	ldr	r3, [pc, #40]	; (8011e64 <LoRaMacCheckForRxAbort+0x3c>)
 8011e3c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e44:	4a07      	ldr	r2, [pc, #28]	; (8011e64 <LoRaMacCheckForRxAbort+0x3c>)
 8011e46:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e4a:	4b06      	ldr	r3, [pc, #24]	; (8011e64 <LoRaMacCheckForRxAbort+0x3c>)
 8011e4c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e50:	f023 0302 	bic.w	r3, r3, #2
 8011e54:	4a03      	ldr	r2, [pc, #12]	; (8011e64 <LoRaMacCheckForRxAbort+0x3c>)
 8011e56:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011e5a:	bf00      	nop
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bc80      	pop	{r7}
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	20000924 	.word	0x20000924

08011e68 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011e74:	2300      	movs	r3, #0
 8011e76:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011e78:	4b50      	ldr	r3, [pc, #320]	; (8011fbc <LoRaMacHandleNvm+0x154>)
 8011e7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f040 8098 	bne.w	8011fb4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2124      	movs	r1, #36	; 0x24
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f008 f82f 	bl	8019eec <Crc32>
 8011e8e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d006      	beq.n	8011ea8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011ea0:	89fb      	ldrh	r3, [r7, #14]
 8011ea2:	f043 0301 	orr.w	r3, r3, #1
 8011ea6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3328      	adds	r3, #40	; 0x28
 8011eac:	211c      	movs	r1, #28
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f008 f81c 	bl	8019eec <Crc32>
 8011eb4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eba:	68ba      	ldr	r2, [r7, #8]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d006      	beq.n	8011ece <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011ec6:	89fb      	ldrh	r3, [r7, #14]
 8011ec8:	f043 0302 	orr.w	r3, r3, #2
 8011ecc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	3348      	adds	r3, #72	; 0x48
 8011ed2:	21fc      	movs	r1, #252	; 0xfc
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f008 f809 	bl	8019eec <Crc32>
 8011eda:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d007      	beq.n	8011ef8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011ef0:	89fb      	ldrh	r3, [r7, #14]
 8011ef2:	f043 0304 	orr.w	r3, r3, #4
 8011ef6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011efe:	21d4      	movs	r1, #212	; 0xd4
 8011f00:	4618      	mov	r0, r3
 8011f02:	f007 fff3 	bl	8019eec <Crc32>
 8011f06:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d007      	beq.n	8011f24 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011f1c:	89fb      	ldrh	r3, [r7, #14]
 8011f1e:	f043 0308 	orr.w	r3, r3, #8
 8011f22:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011f2a:	2190      	movs	r1, #144	; 0x90
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f007 ffdd 	bl	8019eec <Crc32>
 8011f32:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f3a:	68ba      	ldr	r2, [r7, #8]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d007      	beq.n	8011f50 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011f48:	89fb      	ldrh	r3, [r7, #14]
 8011f4a:	f043 0310 	orr.w	r3, r3, #16
 8011f4e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011f56:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f007 ffc6 	bl	8019eec <Crc32>
 8011f60:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011f68:	68ba      	ldr	r2, [r7, #8]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d007      	beq.n	8011f7e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011f76:	89fb      	ldrh	r3, [r7, #14]
 8011f78:	f043 0320 	orr.w	r3, r3, #32
 8011f7c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011f84:	2114      	movs	r1, #20
 8011f86:	4618      	mov	r0, r3
 8011f88:	f007 ffb0 	bl	8019eec <Crc32>
 8011f8c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011f94:	68ba      	ldr	r2, [r7, #8]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d007      	beq.n	8011faa <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	68ba      	ldr	r2, [r7, #8]
 8011f9e:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011fa2:	89fb      	ldrh	r3, [r7, #14]
 8011fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fa8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011faa:	89fb      	ldrh	r3, [r7, #14]
 8011fac:	4618      	mov	r0, r3
 8011fae:	f001 ff51 	bl	8013e54 <CallNvmDataChangeCallback>
 8011fb2:	e000      	b.n	8011fb6 <LoRaMacHandleNvm+0x14e>
        return;
 8011fb4:	bf00      	nop
}
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	20000924 	.word	0x20000924

08011fc0 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011fca:	f7ff fd3d 	bl	8011a48 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011fce:	f003 fd1a 	bl	8015a06 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011fd2:	4b25      	ldr	r3, [pc, #148]	; (8012068 <LoRaMacProcess+0xa8>)
 8011fd4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011fd8:	f003 0310 	and.w	r3, r3, #16
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d023      	beq.n	801202a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f7ff fda4 	bl	8011b30 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011fe8:	f7ff ff1e 	bl	8011e28 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011fec:	f001 ffc2 	bl	8013f74 <IsRequestPending>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d006      	beq.n	8012004 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011ff6:	f7ff feef 	bl	8011dd8 <LoRaMacCheckForBeaconAcquisition>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	79fb      	ldrb	r3, [r7, #7]
 8012000:	4313      	orrs	r3, r2
 8012002:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8012004:	79fb      	ldrb	r3, [r7, #7]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d103      	bne.n	8012012 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801200a:	f7ff fea9 	bl	8011d60 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801200e:	f7ff fe39 	bl	8011c84 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012012:	f7ff fd9d 	bl	8011b50 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012016:	2001      	movs	r0, #1
 8012018:	f7ff fd8a 	bl	8011b30 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801201c:	4a12      	ldr	r2, [pc, #72]	; (8012068 <LoRaMacProcess+0xa8>)
 801201e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012022:	f043 0320 	orr.w	r3, r3, #32
 8012026:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 801202a:	f7ff fdf3 	bl	8011c14 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801202e:	4b0e      	ldr	r3, [pc, #56]	; (8012068 <LoRaMacProcess+0xa8>)
 8012030:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012034:	2b02      	cmp	r3, #2
 8012036:	d101      	bne.n	801203c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8012038:	f001 fbb8 	bl	80137ac <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801203c:	4b0a      	ldr	r3, [pc, #40]	; (8012068 <LoRaMacProcess+0xa8>)
 801203e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012042:	f003 0320 	and.w	r3, r3, #32
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	d009      	beq.n	8012060 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801204c:	4a06      	ldr	r2, [pc, #24]	; (8012068 <LoRaMacProcess+0xa8>)
 801204e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012052:	f36f 1345 	bfc	r3, #5, #1
 8012056:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 801205a:	4804      	ldr	r0, [pc, #16]	; (801206c <LoRaMacProcess+0xac>)
 801205c:	f7ff ff04 	bl	8011e68 <LoRaMacHandleNvm>
    }
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	20000924 	.word	0x20000924
 801206c:	20000e2c 	.word	0x20000e2c

08012070 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012078:	4817      	ldr	r0, [pc, #92]	; (80120d8 <OnTxDelayedTimerEvent+0x68>)
 801207a:	f00c f87d 	bl	801e178 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801207e:	4b17      	ldr	r3, [pc, #92]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 8012080:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012084:	f023 0320 	bic.w	r3, r3, #32
 8012088:	4a14      	ldr	r2, [pc, #80]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 801208a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801208e:	2001      	movs	r0, #1
 8012090:	f001 f8e4 	bl	801325c <ScheduleTx>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d018      	beq.n	80120cc <OnTxDelayedTimerEvent+0x5c>
 801209a:	2b0b      	cmp	r3, #11
 801209c:	d016      	beq.n	80120cc <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801209e:	4b10      	ldr	r3, [pc, #64]	; (80120e0 <OnTxDelayedTimerEvent+0x70>)
 80120a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	4b0d      	ldr	r3, [pc, #52]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 80120a8:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80120ac:	4b0b      	ldr	r3, [pc, #44]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 80120ae:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 80120b2:	4b0a      	ldr	r3, [pc, #40]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 80120b4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80120b8:	4b08      	ldr	r3, [pc, #32]	; (80120dc <OnTxDelayedTimerEvent+0x6c>)
 80120ba:	2209      	movs	r2, #9
 80120bc:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80120c0:	2009      	movs	r0, #9
 80120c2:	f004 f8cb 	bl	801625c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80120c6:	f001 fe73 	bl	8013db0 <StopRetransmission>
            break;
 80120ca:	e000      	b.n	80120ce <OnTxDelayedTimerEvent+0x5e>
            break;
 80120cc:	bf00      	nop
        }
    }
}
 80120ce:	bf00      	nop
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	20000c8c 	.word	0x20000c8c
 80120dc:	20000924 	.word	0x20000924
 80120e0:	20000e2c 	.word	0x20000e2c

080120e4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80120ec:	4b14      	ldr	r3, [pc, #80]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 80120ee:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120f2:	4b13      	ldr	r3, [pc, #76]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 80120f4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80120f8:	4b12      	ldr	r3, [pc, #72]	; (8012144 <OnRxWindow1TimerEvent+0x60>)
 80120fa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80120fe:	b25a      	sxtb	r2, r3
 8012100:	4b0f      	ldr	r3, [pc, #60]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 8012102:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012106:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <OnRxWindow1TimerEvent+0x60>)
 8012108:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801210c:	4b0c      	ldr	r3, [pc, #48]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 801210e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012112:	4b0c      	ldr	r3, [pc, #48]	; (8012144 <OnRxWindow1TimerEvent+0x60>)
 8012114:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012118:	4b09      	ldr	r3, [pc, #36]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 801211a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801211e:	4b08      	ldr	r3, [pc, #32]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 8012120:	2200      	movs	r2, #0
 8012122:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8012126:	4b06      	ldr	r3, [pc, #24]	; (8012140 <OnRxWindow1TimerEvent+0x5c>)
 8012128:	2200      	movs	r2, #0
 801212a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801212e:	4906      	ldr	r1, [pc, #24]	; (8012148 <OnRxWindow1TimerEvent+0x64>)
 8012130:	4806      	ldr	r0, [pc, #24]	; (801214c <OnRxWindow1TimerEvent+0x68>)
 8012132:	f001 fb07 	bl	8013744 <RxWindowSetup>
}
 8012136:	bf00      	nop
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	20000924 	.word	0x20000924
 8012144:	20000e2c 	.word	0x20000e2c
 8012148:	20000cdc 	.word	0x20000cdc
 801214c:	20000ca4 	.word	0x20000ca4

08012150 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 801215a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801215e:	2b00      	cmp	r3, #0
 8012160:	d023      	beq.n	80121aa <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 8012164:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012168:	4b12      	ldr	r3, [pc, #72]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 801216a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801216e:	4b12      	ldr	r3, [pc, #72]	; (80121b8 <OnRxWindow2TimerEvent+0x68>)
 8012170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012172:	4a10      	ldr	r2, [pc, #64]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 8012174:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012178:	4b0f      	ldr	r3, [pc, #60]	; (80121b8 <OnRxWindow2TimerEvent+0x68>)
 801217a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801217e:	4b0d      	ldr	r3, [pc, #52]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 8012180:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012184:	4b0c      	ldr	r3, [pc, #48]	; (80121b8 <OnRxWindow2TimerEvent+0x68>)
 8012186:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801218a:	4b0a      	ldr	r3, [pc, #40]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 801218c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012190:	4b08      	ldr	r3, [pc, #32]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 8012192:	2200      	movs	r2, #0
 8012194:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <OnRxWindow2TimerEvent+0x64>)
 801219a:	2201      	movs	r2, #1
 801219c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80121a0:	4906      	ldr	r1, [pc, #24]	; (80121bc <OnRxWindow2TimerEvent+0x6c>)
 80121a2:	4807      	ldr	r0, [pc, #28]	; (80121c0 <OnRxWindow2TimerEvent+0x70>)
 80121a4:	f001 face 	bl	8013744 <RxWindowSetup>
 80121a8:	e000      	b.n	80121ac <OnRxWindow2TimerEvent+0x5c>
        return;
 80121aa:	bf00      	nop
}
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	20000924 	.word	0x20000924
 80121b8:	20000e2c 	.word	0x20000e2c
 80121bc:	20000cf0 	.word	0x20000cf0
 80121c0:	20000cbc 	.word	0x20000cbc

080121c4 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80121cc:	480e      	ldr	r0, [pc, #56]	; (8012208 <OnAckTimeoutTimerEvent+0x44>)
 80121ce:	f00b ffd3 	bl	801e178 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80121d2:	4b0e      	ldr	r3, [pc, #56]	; (801220c <OnAckTimeoutTimerEvent+0x48>)
 80121d4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d003      	beq.n	80121e4 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80121dc:	4b0b      	ldr	r3, [pc, #44]	; (801220c <OnAckTimeoutTimerEvent+0x48>)
 80121de:	2201      	movs	r2, #1
 80121e0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80121e4:	4b0a      	ldr	r3, [pc, #40]	; (8012210 <OnAckTimeoutTimerEvent+0x4c>)
 80121e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121ea:	2b02      	cmp	r3, #2
 80121ec:	d106      	bne.n	80121fc <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80121ee:	4a07      	ldr	r2, [pc, #28]	; (801220c <OnAckTimeoutTimerEvent+0x48>)
 80121f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80121f4:	f043 0310 	orr.w	r3, r3, #16
 80121f8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80121fc:	f001 fe14 	bl	8013e28 <OnMacProcessNotify>
}
 8012200:	bf00      	nop
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	20000d18 	.word	0x20000d18
 801220c:	20000924 	.word	0x20000924
 8012210:	20000e2c 	.word	0x20000e2c

08012214 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	60ba      	str	r2, [r7, #8]
 801221c:	607b      	str	r3, [r7, #4]
 801221e:	4603      	mov	r3, r0
 8012220:	73fb      	strb	r3, [r7, #15]
 8012222:	460b      	mov	r3, r1
 8012224:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d005      	beq.n	8012238 <GetFCntDown+0x24>
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <GetFCntDown+0x24>
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d101      	bne.n	801223c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012238:	230a      	movs	r3, #10
 801223a:	e029      	b.n	8012290 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801223c:	7bfb      	ldrb	r3, [r7, #15]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d016      	beq.n	8012270 <GetFCntDown+0x5c>
 8012242:	2b01      	cmp	r3, #1
 8012244:	d118      	bne.n	8012278 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012246:	79bb      	ldrb	r3, [r7, #6]
 8012248:	2b01      	cmp	r3, #1
 801224a:	d10d      	bne.n	8012268 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801224c:	7bbb      	ldrb	r3, [r7, #14]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d002      	beq.n	8012258 <GetFCntDown+0x44>
 8012252:	7bbb      	ldrb	r3, [r7, #14]
 8012254:	2b03      	cmp	r3, #3
 8012256:	d103      	bne.n	8012260 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	2202      	movs	r2, #2
 801225c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801225e:	e00d      	b.n	801227c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	2201      	movs	r2, #1
 8012264:	701a      	strb	r2, [r3, #0]
            break;
 8012266:	e009      	b.n	801227c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	2203      	movs	r2, #3
 801226c:	701a      	strb	r2, [r3, #0]
            break;
 801226e:	e005      	b.n	801227c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	2204      	movs	r2, #4
 8012274:	701a      	strb	r2, [r3, #0]
            break;
 8012276:	e001      	b.n	801227c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012278:	2305      	movs	r3, #5
 801227a:	e009      	b.n	8012290 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	7818      	ldrb	r0, [r3, #0]
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	89db      	ldrh	r3, [r3, #14]
 8012284:	461a      	mov	r2, r3
 8012286:	8b39      	ldrh	r1, [r7, #24]
 8012288:	6a3b      	ldr	r3, [r7, #32]
 801228a:	f004 fc25 	bl	8016ad8 <LoRaMacCryptoGetFCntDown>
 801228e:	4603      	mov	r3, r0
}
 8012290:	4618      	mov	r0, r3
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012298:	b5b0      	push	{r4, r5, r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122a2:	2303      	movs	r3, #3
 80122a4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80122a6:	4b6d      	ldr	r3, [pc, #436]	; (801245c <SwitchClass+0x1c4>)
 80122a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	f000 80b9 	beq.w	8012424 <SwitchClass+0x18c>
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	f300 80cc 	bgt.w	8012450 <SwitchClass+0x1b8>
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d003      	beq.n	80122c4 <SwitchClass+0x2c>
 80122bc:	2b01      	cmp	r3, #1
 80122be:	f000 80a3 	beq.w	8012408 <SwitchClass+0x170>
 80122c2:	e0c5      	b.n	8012450 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d109      	bne.n	80122de <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80122ca:	4b64      	ldr	r3, [pc, #400]	; (801245c <SwitchClass+0x1c4>)
 80122cc:	4a63      	ldr	r2, [pc, #396]	; (801245c <SwitchClass+0x1c4>)
 80122ce:	3374      	adds	r3, #116	; 0x74
 80122d0:	326c      	adds	r2, #108	; 0x6c
 80122d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122d6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80122de:	79fb      	ldrb	r3, [r7, #7]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d10c      	bne.n	80122fe <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80122e4:	79fb      	ldrb	r3, [r7, #7]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f003 fb2f 	bl	801594a <LoRaMacClassBSwitchClass>
 80122ec:	4603      	mov	r3, r0
 80122ee:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d103      	bne.n	80122fe <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80122f6:	4a59      	ldr	r2, [pc, #356]	; (801245c <SwitchClass+0x1c4>)
 80122f8:	79fb      	ldrb	r3, [r7, #7]
 80122fa:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80122fe:	79fb      	ldrb	r3, [r7, #7]
 8012300:	2b02      	cmp	r3, #2
 8012302:	f040 80a0 	bne.w	8012446 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012306:	4a55      	ldr	r2, [pc, #340]	; (801245c <SwitchClass+0x1c4>)
 8012308:	79fb      	ldrb	r3, [r7, #7]
 801230a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801230e:	4a54      	ldr	r2, [pc, #336]	; (8012460 <SwitchClass+0x1c8>)
 8012310:	4b53      	ldr	r3, [pc, #332]	; (8012460 <SwitchClass+0x1c8>)
 8012312:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012316:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801231a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801231c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801231e:	682b      	ldr	r3, [r5, #0]
 8012320:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012322:	4b4f      	ldr	r3, [pc, #316]	; (8012460 <SwitchClass+0x1c8>)
 8012324:	2202      	movs	r2, #2
 8012326:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801232a:	2300      	movs	r3, #0
 801232c:	73bb      	strb	r3, [r7, #14]
 801232e:	e05b      	b.n	80123e8 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012330:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012334:	4949      	ldr	r1, [pc, #292]	; (801245c <SwitchClass+0x1c4>)
 8012336:	4613      	mov	r3, r2
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	4413      	add	r3, r2
 801233c:	011b      	lsls	r3, r3, #4
 801233e:	440b      	add	r3, r1
 8012340:	33e9      	adds	r3, #233	; 0xe9
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d049      	beq.n	80123dc <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012348:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801234c:	4943      	ldr	r1, [pc, #268]	; (801245c <SwitchClass+0x1c4>)
 801234e:	4613      	mov	r3, r2
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	4413      	add	r3, r2
 8012354:	011b      	lsls	r3, r3, #4
 8012356:	440b      	add	r3, r1
 8012358:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801235c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801235e:	2b02      	cmp	r3, #2
 8012360:	d13c      	bne.n	80123dc <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012362:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012366:	493d      	ldr	r1, [pc, #244]	; (801245c <SwitchClass+0x1c4>)
 8012368:	4613      	mov	r3, r2
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	4413      	add	r3, r2
 801236e:	011b      	lsls	r3, r3, #4
 8012370:	440b      	add	r3, r1
 8012372:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4a38      	ldr	r2, [pc, #224]	; (801245c <SwitchClass+0x1c4>)
 801237a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801237c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012380:	4936      	ldr	r1, [pc, #216]	; (801245c <SwitchClass+0x1c4>)
 8012382:	4613      	mov	r3, r2
 8012384:	005b      	lsls	r3, r3, #1
 8012386:	4413      	add	r3, r2
 8012388:	011b      	lsls	r3, r3, #4
 801238a:	440b      	add	r3, r1
 801238c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012390:	f993 3000 	ldrsb.w	r3, [r3]
 8012394:	b2da      	uxtb	r2, r3
 8012396:	4b31      	ldr	r3, [pc, #196]	; (801245c <SwitchClass+0x1c4>)
 8012398:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801239c:	4b30      	ldr	r3, [pc, #192]	; (8012460 <SwitchClass+0x1c8>)
 801239e:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80123a2:	4b2f      	ldr	r3, [pc, #188]	; (8012460 <SwitchClass+0x1c8>)
 80123a4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80123a8:	4b2c      	ldr	r3, [pc, #176]	; (801245c <SwitchClass+0x1c4>)
 80123aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ac:	4a2c      	ldr	r2, [pc, #176]	; (8012460 <SwitchClass+0x1c8>)
 80123ae:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80123b2:	4b2a      	ldr	r3, [pc, #168]	; (801245c <SwitchClass+0x1c4>)
 80123b4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80123b8:	4b29      	ldr	r3, [pc, #164]	; (8012460 <SwitchClass+0x1c8>)
 80123ba:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80123be:	4b27      	ldr	r3, [pc, #156]	; (801245c <SwitchClass+0x1c4>)
 80123c0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80123c4:	4b26      	ldr	r3, [pc, #152]	; (8012460 <SwitchClass+0x1c8>)
 80123c6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80123ca:	4b25      	ldr	r3, [pc, #148]	; (8012460 <SwitchClass+0x1c8>)
 80123cc:	2203      	movs	r2, #3
 80123ce:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80123d2:	4b23      	ldr	r3, [pc, #140]	; (8012460 <SwitchClass+0x1c8>)
 80123d4:	2201      	movs	r2, #1
 80123d6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80123da:	e009      	b.n	80123f0 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80123dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	3301      	adds	r3, #1
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	73bb      	strb	r3, [r7, #14]
 80123e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	dd9f      	ble.n	8012330 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80123f0:	4b1b      	ldr	r3, [pc, #108]	; (8012460 <SwitchClass+0x1c8>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80123f8:	4b1a      	ldr	r3, [pc, #104]	; (8012464 <SwitchClass+0x1cc>)
 80123fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80123fe:	f001 f9d5 	bl	80137ac <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8012402:	2300      	movs	r3, #0
 8012404:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012406:	e01e      	b.n	8012446 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012408:	79fb      	ldrb	r3, [r7, #7]
 801240a:	4618      	mov	r0, r3
 801240c:	f003 fa9d 	bl	801594a <LoRaMacClassBSwitchClass>
 8012410:	4603      	mov	r3, r0
 8012412:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012414:	7bfb      	ldrb	r3, [r7, #15]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d117      	bne.n	801244a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801241a:	4a10      	ldr	r2, [pc, #64]	; (801245c <SwitchClass+0x1c4>)
 801241c:	79fb      	ldrb	r3, [r7, #7]
 801241e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8012422:	e012      	b.n	801244a <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d111      	bne.n	801244e <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801242a:	4b0d      	ldr	r3, [pc, #52]	; (8012460 <SwitchClass+0x1c8>)
 801242c:	2206      	movs	r2, #6
 801242e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012432:	4a0a      	ldr	r2, [pc, #40]	; (801245c <SwitchClass+0x1c4>)
 8012434:	79fb      	ldrb	r3, [r7, #7]
 8012436:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801243a:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <SwitchClass+0x1cc>)
 801243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801243e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012440:	2300      	movs	r3, #0
 8012442:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012444:	e003      	b.n	801244e <SwitchClass+0x1b6>
            break;
 8012446:	bf00      	nop
 8012448:	e002      	b.n	8012450 <SwitchClass+0x1b8>
            break;
 801244a:	bf00      	nop
 801244c:	e000      	b.n	8012450 <SwitchClass+0x1b8>
            break;
 801244e:	bf00      	nop
        }
    }

    return status;
 8012450:	7bfb      	ldrb	r3, [r7, #15]
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bdb0      	pop	{r4, r5, r7, pc}
 801245a:	bf00      	nop
 801245c:	20000e2c 	.word	0x20000e2c
 8012460:	20000924 	.word	0x20000924
 8012464:	0801fa18 	.word	0x0801fa18

08012468 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b086      	sub	sp, #24
 801246c:	af00      	add	r7, sp, #0
 801246e:	4603      	mov	r3, r0
 8012470:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012472:	4b10      	ldr	r3, [pc, #64]	; (80124b4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012474:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012478:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801247a:	79fb      	ldrb	r3, [r7, #7]
 801247c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801247e:	230d      	movs	r3, #13
 8012480:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012482:	4b0c      	ldr	r3, [pc, #48]	; (80124b4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012484:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801248c:	230e      	movs	r3, #14
 801248e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012490:	4b08      	ldr	r3, [pc, #32]	; (80124b4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012492:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012496:	f107 0210 	add.w	r2, r7, #16
 801249a:	4611      	mov	r1, r2
 801249c:	4618      	mov	r0, r3
 801249e:	f005 f9b6 	bl	801780e <RegionGetPhyParam>
 80124a2:	4603      	mov	r3, r0
 80124a4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	b2db      	uxtb	r3, r3
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3718      	adds	r7, #24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	20000e2c 	.word	0x20000e2c

080124b8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	71fb      	strb	r3, [r7, #7]
 80124c2:	460b      	mov	r3, r1
 80124c4:	71bb      	strb	r3, [r7, #6]
 80124c6:	4613      	mov	r3, r2
 80124c8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80124ca:	2300      	movs	r3, #0
 80124cc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80124d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff ffc6 	bl	8012468 <GetMaxAppPayloadWithoutFOptsLength>
 80124dc:	4603      	mov	r3, r0
 80124de:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80124e0:	79fb      	ldrb	r3, [r7, #7]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	797b      	ldrb	r3, [r7, #5]
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	4413      	add	r3, r2
 80124ea:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80124ec:	89ba      	ldrh	r2, [r7, #12]
 80124ee:	89fb      	ldrh	r3, [r7, #14]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d804      	bhi.n	80124fe <ValidatePayloadLength+0x46>
 80124f4:	89bb      	ldrh	r3, [r7, #12]
 80124f6:	2bff      	cmp	r3, #255	; 0xff
 80124f8:	d801      	bhi.n	80124fe <ValidatePayloadLength+0x46>
    {
        return true;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e000      	b.n	8012500 <ValidatePayloadLength+0x48>
    }
    return false;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012508:	b590      	push	{r4, r7, lr}
 801250a:	b0a5      	sub	sp, #148	; 0x94
 801250c:	af02      	add	r7, sp, #8
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	4608      	mov	r0, r1
 8012512:	4611      	mov	r1, r2
 8012514:	461a      	mov	r2, r3
 8012516:	4603      	mov	r3, r0
 8012518:	70fb      	strb	r3, [r7, #3]
 801251a:	460b      	mov	r3, r1
 801251c:	70bb      	strb	r3, [r7, #2]
 801251e:	4613      	mov	r3, r2
 8012520:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801252e:	2300      	movs	r3, #0
 8012530:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012534:	f000 bc6d 	b.w	8012e12 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012538:	78fb      	ldrb	r3, [r7, #3]
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	4413      	add	r3, r2
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f003 fce7 	bl	8015f14 <LoRaMacCommandsGetCmdSize>
 8012546:	4603      	mov	r3, r0
 8012548:	461a      	mov	r2, r3
 801254a:	78fb      	ldrb	r3, [r7, #3]
 801254c:	441a      	add	r2, r3
 801254e:	78bb      	ldrb	r3, [r7, #2]
 8012550:	429a      	cmp	r2, r3
 8012552:	f300 8464 	bgt.w	8012e1e <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012556:	78fb      	ldrb	r3, [r7, #3]
 8012558:	1c5a      	adds	r2, r3, #1
 801255a:	70fa      	strb	r2, [r7, #3]
 801255c:	461a      	mov	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4413      	add	r3, r2
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	3b02      	subs	r3, #2
 8012566:	2b11      	cmp	r3, #17
 8012568:	f200 845b 	bhi.w	8012e22 <ProcessMacCommands+0x91a>
 801256c:	a201      	add	r2, pc, #4	; (adr r2, 8012574 <ProcessMacCommands+0x6c>)
 801256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012572:	bf00      	nop
 8012574:	080125bd 	.word	0x080125bd
 8012578:	080125ff 	.word	0x080125ff
 801257c:	0801271b 	.word	0x0801271b
 8012580:	08012759 	.word	0x08012759
 8012584:	08012845 	.word	0x08012845
 8012588:	080128a1 	.word	0x080128a1
 801258c:	0801295d 	.word	0x0801295d
 8012590:	080129b3 	.word	0x080129b3
 8012594:	08012a99 	.word	0x08012a99
 8012598:	08012e23 	.word	0x08012e23
 801259c:	08012e23 	.word	0x08012e23
 80125a0:	08012b3d 	.word	0x08012b3d
 80125a4:	08012e23 	.word	0x08012e23
 80125a8:	08012e23 	.word	0x08012e23
 80125ac:	08012c53 	.word	0x08012c53
 80125b0:	08012c87 	.word	0x08012c87
 80125b4:	08012d17 	.word	0x08012d17
 80125b8:	08012d8d 	.word	0x08012d8d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80125bc:	2005      	movs	r0, #5
 80125be:	f003 fe81 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 80125c2:	4603      	mov	r3, r0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f000 8424 	beq.w	8012e12 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80125ca:	2105      	movs	r1, #5
 80125cc:	2000      	movs	r0, #0
 80125ce:	f003 fded 	bl	80161ac <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80125d2:	78fb      	ldrb	r3, [r7, #3]
 80125d4:	1c5a      	adds	r2, r3, #1
 80125d6:	70fa      	strb	r2, [r7, #3]
 80125d8:	461a      	mov	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4413      	add	r3, r2
 80125de:	781a      	ldrb	r2, [r3, #0]
 80125e0:	4bac      	ldr	r3, [pc, #688]	; (8012894 <ProcessMacCommands+0x38c>)
 80125e2:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80125e6:	78fb      	ldrb	r3, [r7, #3]
 80125e8:	1c5a      	adds	r2, r3, #1
 80125ea:	70fa      	strb	r2, [r7, #3]
 80125ec:	461a      	mov	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4413      	add	r3, r2
 80125f2:	781a      	ldrb	r2, [r3, #0]
 80125f4:	4ba7      	ldr	r3, [pc, #668]	; (8012894 <ProcessMacCommands+0x38c>)
 80125f6:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80125fa:	f000 bc0a 	b.w	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80125fe:	2300      	movs	r3, #0
 8012600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012604:	2300      	movs	r3, #0
 8012606:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012610:	2300      	movs	r3, #0
 8012612:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8012616:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801261a:	f083 0301 	eor.w	r3, r3, #1
 801261e:	b2db      	uxtb	r3, r3
 8012620:	2b00      	cmp	r3, #0
 8012622:	d078      	beq.n	8012716 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012624:	2301      	movs	r3, #1
 8012626:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801262a:	78fb      	ldrb	r3, [r7, #3]
 801262c:	3b01      	subs	r3, #1
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	4413      	add	r3, r2
 8012632:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012634:	78ba      	ldrb	r2, [r7, #2]
 8012636:	78fb      	ldrb	r3, [r7, #3]
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	b2db      	uxtb	r3, r3
 801263c:	3301      	adds	r3, #1
 801263e:	b2db      	uxtb	r3, r3
 8012640:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012644:	4b94      	ldr	r3, [pc, #592]	; (8012898 <ProcessMacCommands+0x390>)
 8012646:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801264a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801264e:	4b92      	ldr	r3, [pc, #584]	; (8012898 <ProcessMacCommands+0x390>)
 8012650:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012654:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012658:	4b8f      	ldr	r3, [pc, #572]	; (8012898 <ProcessMacCommands+0x390>)
 801265a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801265e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012662:	4b8d      	ldr	r3, [pc, #564]	; (8012898 <ProcessMacCommands+0x390>)
 8012664:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012668:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801266c:	4b8a      	ldr	r3, [pc, #552]	; (8012898 <ProcessMacCommands+0x390>)
 801266e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012672:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012676:	4b88      	ldr	r3, [pc, #544]	; (8012898 <ProcessMacCommands+0x390>)
 8012678:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801267c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801267e:	4b86      	ldr	r3, [pc, #536]	; (8012898 <ProcessMacCommands+0x390>)
 8012680:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012684:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012688:	f107 0257 	add.w	r2, r7, #87	; 0x57
 801268c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4623      	mov	r3, r4
 801269e:	f005 f973 	bl	8017988 <RegionLinkAdrReq>
 80126a2:	4603      	mov	r3, r0
 80126a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80126a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80126ac:	f003 0307 	and.w	r3, r3, #7
 80126b0:	2b07      	cmp	r3, #7
 80126b2:	d10e      	bne.n	80126d2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80126b4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80126b8:	4b77      	ldr	r3, [pc, #476]	; (8012898 <ProcessMacCommands+0x390>)
 80126ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80126be:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80126c2:	4b75      	ldr	r3, [pc, #468]	; (8012898 <ProcessMacCommands+0x390>)
 80126c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80126c8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80126cc:	4b72      	ldr	r3, [pc, #456]	; (8012898 <ProcessMacCommands+0x390>)
 80126ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126d2:	2300      	movs	r3, #0
 80126d4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126d8:	e00b      	b.n	80126f2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80126da:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80126de:	2201      	movs	r2, #1
 80126e0:	4619      	mov	r1, r3
 80126e2:	2003      	movs	r0, #3
 80126e4:	f003 fab6 	bl	8015c54 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80126ec:	3301      	adds	r3, #1
 80126ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126f2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80126f6:	4a69      	ldr	r2, [pc, #420]	; (801289c <ProcessMacCommands+0x394>)
 80126f8:	fba2 2303 	umull	r2, r3, r2, r3
 80126fc:	089b      	lsrs	r3, r3, #2
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012704:	429a      	cmp	r2, r3
 8012706:	d3e8      	bcc.n	80126da <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8012708:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801270c:	78fb      	ldrb	r3, [r7, #3]
 801270e:	4413      	add	r3, r2
 8012710:	b2db      	uxtb	r3, r3
 8012712:	3b01      	subs	r3, #1
 8012714:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012716:	bf00      	nop
 8012718:	e37b      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801271a:	78fb      	ldrb	r3, [r7, #3]
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	70fa      	strb	r2, [r7, #3]
 8012720:	461a      	mov	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4413      	add	r3, r2
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 030f 	and.w	r3, r3, #15
 801272c:	b2da      	uxtb	r2, r3
 801272e:	4b5a      	ldr	r3, [pc, #360]	; (8012898 <ProcessMacCommands+0x390>)
 8012730:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012734:	4b58      	ldr	r3, [pc, #352]	; (8012898 <ProcessMacCommands+0x390>)
 8012736:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801273a:	461a      	mov	r2, r3
 801273c:	2301      	movs	r3, #1
 801273e:	4093      	lsls	r3, r2
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b55      	ldr	r3, [pc, #340]	; (8012898 <ProcessMacCommands+0x390>)
 8012744:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012748:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801274c:	2200      	movs	r2, #0
 801274e:	4619      	mov	r1, r3
 8012750:	2004      	movs	r0, #4
 8012752:	f003 fa7f 	bl	8015c54 <LoRaMacCommandsAddCmd>
                break;
 8012756:	e35c      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012758:	2307      	movs	r3, #7
 801275a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	4413      	add	r3, r2
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	091b      	lsrs	r3, r3, #4
 8012768:	b2db      	uxtb	r3, r3
 801276a:	b25b      	sxtb	r3, r3
 801276c:	f003 0307 	and.w	r3, r3, #7
 8012770:	b25b      	sxtb	r3, r3
 8012772:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012776:	78fb      	ldrb	r3, [r7, #3]
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	4413      	add	r3, r2
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	b25b      	sxtb	r3, r3
 8012780:	f003 030f 	and.w	r3, r3, #15
 8012784:	b25b      	sxtb	r3, r3
 8012786:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801278a:	78fb      	ldrb	r3, [r7, #3]
 801278c:	3301      	adds	r3, #1
 801278e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	70fa      	strb	r2, [r7, #3]
 8012796:	461a      	mov	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4413      	add	r3, r2
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80127a0:	78fb      	ldrb	r3, [r7, #3]
 80127a2:	1c5a      	adds	r2, r3, #1
 80127a4:	70fa      	strb	r2, [r7, #3]
 80127a6:	461a      	mov	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	4413      	add	r3, r2
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	021a      	lsls	r2, r3, #8
 80127b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127b2:	4313      	orrs	r3, r2
 80127b4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80127b6:	78fb      	ldrb	r3, [r7, #3]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	70fa      	strb	r2, [r7, #3]
 80127bc:	461a      	mov	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4413      	add	r3, r2
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	041a      	lsls	r2, r3, #16
 80127c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c8:	4313      	orrs	r3, r2
 80127ca:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80127cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ce:	2264      	movs	r2, #100	; 0x64
 80127d0:	fb02 f303 	mul.w	r3, r2, r3
 80127d4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80127d6:	4b30      	ldr	r3, [pc, #192]	; (8012898 <ProcessMacCommands+0x390>)
 80127d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80127e0:	4611      	mov	r1, r2
 80127e2:	4618      	mov	r0, r3
 80127e4:	f005 f8ea 	bl	80179bc <RegionRxParamSetupReq>
 80127e8:	4603      	mov	r3, r0
 80127ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80127ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127f2:	f003 0307 	and.w	r3, r3, #7
 80127f6:	2b07      	cmp	r3, #7
 80127f8:	d117      	bne.n	801282a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80127fa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	4b25      	ldr	r3, [pc, #148]	; (8012898 <ProcessMacCommands+0x390>)
 8012802:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012806:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801280a:	b2da      	uxtb	r2, r3
 801280c:	4b22      	ldr	r3, [pc, #136]	; (8012898 <ProcessMacCommands+0x390>)
 801280e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012814:	4a20      	ldr	r2, [pc, #128]	; (8012898 <ProcessMacCommands+0x390>)
 8012816:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801281a:	4a1f      	ldr	r2, [pc, #124]	; (8012898 <ProcessMacCommands+0x390>)
 801281c:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801281e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012822:	b2da      	uxtb	r2, r3
 8012824:	4b1c      	ldr	r3, [pc, #112]	; (8012898 <ProcessMacCommands+0x390>)
 8012826:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801282a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801282e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012832:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012836:	2201      	movs	r2, #1
 8012838:	4619      	mov	r1, r3
 801283a:	2005      	movs	r0, #5
 801283c:	f003 fa0a 	bl	8015c54 <LoRaMacCommandsAddCmd>
                break;
 8012840:	bf00      	nop
 8012842:	e2e6      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012844:	23ff      	movs	r3, #255	; 0xff
 8012846:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801284a:	4b12      	ldr	r3, [pc, #72]	; (8012894 <ProcessMacCommands+0x38c>)
 801284c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00d      	beq.n	8012870 <ProcessMacCommands+0x368>
 8012854:	4b0f      	ldr	r3, [pc, #60]	; (8012894 <ProcessMacCommands+0x38c>)
 8012856:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d007      	beq.n	8012870 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012860:	4b0c      	ldr	r3, [pc, #48]	; (8012894 <ProcessMacCommands+0x38c>)
 8012862:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4798      	blx	r3
 801286a:	4603      	mov	r3, r0
 801286c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012870:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012874:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012878:	787b      	ldrb	r3, [r7, #1]
 801287a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801287e:	b2db      	uxtb	r3, r3
 8012880:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012884:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012888:	2202      	movs	r2, #2
 801288a:	4619      	mov	r1, r3
 801288c:	2006      	movs	r0, #6
 801288e:	f003 f9e1 	bl	8015c54 <LoRaMacCommandsAddCmd>
                break;
 8012892:	e2be      	b.n	8012e12 <ProcessMacCommands+0x90a>
 8012894:	20000924 	.word	0x20000924
 8012898:	20000e2c 	.word	0x20000e2c
 801289c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80128a0:	2303      	movs	r3, #3
 80128a2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80128a6:	78fb      	ldrb	r3, [r7, #3]
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	70fa      	strb	r2, [r7, #3]
 80128ac:	461a      	mov	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4413      	add	r3, r2
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	b25b      	sxtb	r3, r3
 80128b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80128ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128be:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	70fa      	strb	r2, [r7, #3]
 80128c6:	461a      	mov	r2, r3
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4413      	add	r3, r2
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	1c5a      	adds	r2, r3, #1
 80128d4:	70fa      	strb	r2, [r7, #3]
 80128d6:	461a      	mov	r2, r3
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4413      	add	r3, r2
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	021a      	lsls	r2, r3, #8
 80128e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e2:	4313      	orrs	r3, r2
 80128e4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80128e6:	78fb      	ldrb	r3, [r7, #3]
 80128e8:	1c5a      	adds	r2, r3, #1
 80128ea:	70fa      	strb	r2, [r7, #3]
 80128ec:	461a      	mov	r2, r3
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4413      	add	r3, r2
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	041a      	lsls	r2, r3, #16
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	4313      	orrs	r3, r2
 80128fa:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80128fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fe:	2264      	movs	r2, #100	; 0x64
 8012900:	fb02 f303 	mul.w	r3, r2, r3
 8012904:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801290a:	78fb      	ldrb	r3, [r7, #3]
 801290c:	1c5a      	adds	r2, r3, #1
 801290e:	70fa      	strb	r2, [r7, #3]
 8012910:	461a      	mov	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4413      	add	r3, r2
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	b25b      	sxtb	r3, r3
 801291a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801291e:	4b85      	ldr	r3, [pc, #532]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012920:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012924:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012928:	4611      	mov	r1, r2
 801292a:	4618      	mov	r0, r3
 801292c:	f005 f859 	bl	80179e2 <RegionNewChannelReq>
 8012930:	4603      	mov	r3, r0
 8012932:	b2db      	uxtb	r3, r3
 8012934:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012938:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801293c:	b25b      	sxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	db0a      	blt.n	8012958 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012942:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012946:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801294a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801294e:	2201      	movs	r2, #1
 8012950:	4619      	mov	r1, r3
 8012952:	2007      	movs	r0, #7
 8012954:	f003 f97e 	bl	8015c54 <LoRaMacCommandsAddCmd>
                }
                break;
 8012958:	bf00      	nop
 801295a:	e25a      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801295c:	78fb      	ldrb	r3, [r7, #3]
 801295e:	1c5a      	adds	r2, r3, #1
 8012960:	70fa      	strb	r2, [r7, #3]
 8012962:	461a      	mov	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	4413      	add	r3, r2
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f003 030f 	and.w	r3, r3, #15
 801296e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012972:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012976:	2b00      	cmp	r3, #0
 8012978:	d104      	bne.n	8012984 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801297a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801297e:	3301      	adds	r3, #1
 8012980:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012984:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801298c:	fb02 f303 	mul.w	r3, r2, r3
 8012990:	461a      	mov	r2, r3
 8012992:	4b68      	ldr	r3, [pc, #416]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012994:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012996:	4b67      	ldr	r3, [pc, #412]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801299a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801299e:	4a65      	ldr	r2, [pc, #404]	; (8012b34 <ProcessMacCommands+0x62c>)
 80129a0:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80129a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129a6:	2200      	movs	r2, #0
 80129a8:	4619      	mov	r1, r3
 80129aa:	2008      	movs	r0, #8
 80129ac:	f003 f952 	bl	8015c54 <LoRaMacCommandsAddCmd>
                break;
 80129b0:	e22f      	b.n	8012e12 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80129b2:	78fb      	ldrb	r3, [r7, #3]
 80129b4:	1c5a      	adds	r2, r3, #1
 80129b6:	70fa      	strb	r2, [r7, #3]
 80129b8:	461a      	mov	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4413      	add	r3, r2
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80129c4:	2300      	movs	r3, #0
 80129c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80129ca:	2300      	movs	r3, #0
 80129cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80129d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129d4:	f003 0320 	and.w	r3, r3, #32
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d002      	beq.n	80129e2 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80129dc:	2301      	movs	r3, #1
 80129de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80129e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129e6:	f003 0310 	and.w	r3, r3, #16
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d002      	beq.n	80129f4 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80129ee:	2301      	movs	r3, #1
 80129f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80129f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129f8:	f003 030f 	and.w	r3, r3, #15
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012a02:	4b4c      	ldr	r3, [pc, #304]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f004 fffa 	bl	8017a08 <RegionTxParamSetupReq>
 8012a14:	4603      	mov	r3, r0
 8012a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a1a:	d03b      	beq.n	8012a94 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012a1c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012a20:	4b44      	ldr	r3, [pc, #272]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012a26:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012a2a:	4b42      	ldr	r3, [pc, #264]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a2c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012a30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a34:	461a      	mov	r2, r3
 8012a36:	4b40      	ldr	r3, [pc, #256]	; (8012b38 <ProcessMacCommands+0x630>)
 8012a38:	5c9b      	ldrb	r3, [r3, r2]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ee f928 	bl	8000c90 <__aeabi_ui2f>
 8012a40:	4603      	mov	r3, r0
 8012a42:	4a3c      	ldr	r2, [pc, #240]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012a48:	2302      	movs	r3, #2
 8012a4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a4e:	4b39      	ldr	r3, [pc, #228]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a50:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a58:	4b36      	ldr	r3, [pc, #216]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a62:	4611      	mov	r1, r2
 8012a64:	4618      	mov	r0, r3
 8012a66:	f004 fed2 	bl	801780e <RegionGetPhyParam>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	b25a      	sxtb	r2, r3
 8012a72:	4b30      	ldr	r3, [pc, #192]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a74:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	bfb8      	it	lt
 8012a7c:	4613      	movlt	r3, r2
 8012a7e:	b25a      	sxtb	r2, r3
 8012a80:	4b2c      	ldr	r3, [pc, #176]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012a86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	2009      	movs	r0, #9
 8012a90:	f003 f8e0 	bl	8015c54 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a94:	bf00      	nop
 8012a96:	e1bc      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012a98:	2303      	movs	r3, #3
 8012a9a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012a9e:	78fb      	ldrb	r3, [r7, #3]
 8012aa0:	1c5a      	adds	r2, r3, #1
 8012aa2:	70fa      	strb	r2, [r7, #3]
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012ab0:	78fb      	ldrb	r3, [r7, #3]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	70fa      	strb	r2, [r7, #3]
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	4413      	add	r3, r2
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012ac0:	78fb      	ldrb	r3, [r7, #3]
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	70fa      	strb	r2, [r7, #3]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4413      	add	r3, r2
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	021a      	lsls	r2, r3, #8
 8012ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012ad6:	78fb      	ldrb	r3, [r7, #3]
 8012ad8:	1c5a      	adds	r2, r3, #1
 8012ada:	70fa      	strb	r2, [r7, #3]
 8012adc:	461a      	mov	r2, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	041a      	lsls	r2, r3, #16
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	4313      	orrs	r3, r2
 8012aea:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aee:	2264      	movs	r2, #100	; 0x64
 8012af0:	fb02 f303 	mul.w	r3, r2, r3
 8012af4:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012af6:	4b0f      	ldr	r3, [pc, #60]	; (8012b34 <ProcessMacCommands+0x62c>)
 8012af8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012afc:	f107 0220 	add.w	r2, r7, #32
 8012b00:	4611      	mov	r1, r2
 8012b02:	4618      	mov	r0, r3
 8012b04:	f004 ff93 	bl	8017a2e <RegionDlChannelReq>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012b10:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b14:	b25b      	sxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	db0a      	blt.n	8012b30 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012b1a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b1e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012b22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b26:	2201      	movs	r2, #1
 8012b28:	4619      	mov	r1, r3
 8012b2a:	200a      	movs	r0, #10
 8012b2c:	f003 f892 	bl	8015c54 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b30:	bf00      	nop
 8012b32:	e16e      	b.n	8012e12 <ProcessMacCommands+0x90a>
 8012b34:	20000e2c 	.word	0x20000e2c
 8012b38:	0801f9d0 	.word	0x0801f9d0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012b3c:	200a      	movs	r0, #10
 8012b3e:	f003 fbc1 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	f000 8164 	beq.w	8012e12 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012b4a:	210a      	movs	r1, #10
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	f003 fb2d 	bl	80161ac <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012b52:	f107 0318 	add.w	r3, r7, #24
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]
 8012b5a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012b5c:	f107 0310 	add.w	r3, r7, #16
 8012b60:	2200      	movs	r2, #0
 8012b62:	601a      	str	r2, [r3, #0]
 8012b64:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012b66:	f107 0308 	add.w	r3, r7, #8
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012b70:	78fb      	ldrb	r3, [r7, #3]
 8012b72:	1c5a      	adds	r2, r3, #1
 8012b74:	70fa      	strb	r2, [r7, #3]
 8012b76:	461a      	mov	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012b80:	78fb      	ldrb	r3, [r7, #3]
 8012b82:	1c5a      	adds	r2, r3, #1
 8012b84:	70fa      	strb	r2, [r7, #3]
 8012b86:	461a      	mov	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	021a      	lsls	r2, r3, #8
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012b96:	78fb      	ldrb	r3, [r7, #3]
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	70fa      	strb	r2, [r7, #3]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	041a      	lsls	r2, r3, #16
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	4313      	orrs	r3, r2
 8012baa:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012bac:	78fb      	ldrb	r3, [r7, #3]
 8012bae:	1c5a      	adds	r2, r3, #1
 8012bb0:	70fa      	strb	r2, [r7, #3]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	061a      	lsls	r2, r3, #24
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012bc2:	78fb      	ldrb	r3, [r7, #3]
 8012bc4:	1c5a      	adds	r2, r3, #1
 8012bc6:	70fa      	strb	r2, [r7, #3]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4413      	add	r3, r2
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	b21b      	sxth	r3, r3
 8012bd2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012bd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bde:	fb02 f303 	mul.w	r3, r2, r3
 8012be2:	121b      	asrs	r3, r3, #8
 8012be4:	b21b      	sxth	r3, r3
 8012be6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012be8:	f107 0310 	add.w	r3, r7, #16
 8012bec:	f107 0218 	add.w	r2, r7, #24
 8012bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bf4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	4b8c      	ldr	r3, [pc, #560]	; (8012e2c <ProcessMacCommands+0x924>)
 8012bfc:	4413      	add	r3, r2
 8012bfe:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012c00:	f107 0308 	add.w	r3, r7, #8
 8012c04:	4618      	mov	r0, r3
 8012c06:	f00a fd4f 	bl	801d6a8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012c0a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012c0e:	4b88      	ldr	r3, [pc, #544]	; (8012e30 <ProcessMacCommands+0x928>)
 8012c10:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012c14:	9200      	str	r2, [sp, #0]
 8012c16:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012c1a:	f107 0210 	add.w	r2, r7, #16
 8012c1e:	ca06      	ldmia	r2, {r1, r2}
 8012c20:	f00a fcdb 	bl	801d5da <SysTimeSub>
 8012c24:	f107 0010 	add.w	r0, r7, #16
 8012c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c2a:	9300      	str	r3, [sp, #0]
 8012c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c2e:	f107 0208 	add.w	r2, r7, #8
 8012c32:	ca06      	ldmia	r2, {r1, r2}
 8012c34:	f00a fc98 	bl	801d568 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012c38:	f107 0310 	add.w	r3, r7, #16
 8012c3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012c40:	f00a fd04 	bl	801d64c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012c44:	f002 febf 	bl	80159c6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012c48:	4b79      	ldr	r3, [pc, #484]	; (8012e30 <ProcessMacCommands+0x928>)
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012c50:	e0df      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012c52:	200d      	movs	r0, #13
 8012c54:	f003 fb36 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f000 80d9 	beq.w	8012e12 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012c60:	210d      	movs	r1, #13
 8012c62:	2000      	movs	r0, #0
 8012c64:	f003 faa2 	bl	80161ac <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012c68:	4b71      	ldr	r3, [pc, #452]	; (8012e30 <ProcessMacCommands+0x928>)
 8012c6a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c6e:	2b04      	cmp	r3, #4
 8012c70:	f000 80cf 	beq.w	8012e12 <ProcessMacCommands+0x90a>
 8012c74:	4b6e      	ldr	r3, [pc, #440]	; (8012e30 <ProcessMacCommands+0x928>)
 8012c76:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c7a:	2b05      	cmp	r3, #5
 8012c7c:	f000 80c9 	beq.w	8012e12 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012c80:	f002 fe82 	bl	8015988 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012c84:	e0c5      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012c86:	2303      	movs	r3, #3
 8012c88:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	1c5a      	adds	r2, r3, #1
 8012c94:	70fa      	strb	r2, [r7, #3]
 8012c96:	461a      	mov	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012ca0:	78fb      	ldrb	r3, [r7, #3]
 8012ca2:	1c5a      	adds	r2, r3, #1
 8012ca4:	70fa      	strb	r2, [r7, #3]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	4413      	add	r3, r2
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	021b      	lsls	r3, r3, #8
 8012cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012cb6:	78fb      	ldrb	r3, [r7, #3]
 8012cb8:	1c5a      	adds	r2, r3, #1
 8012cba:	70fa      	strb	r2, [r7, #3]
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	041b      	lsls	r3, r3, #16
 8012cc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cce:	2264      	movs	r2, #100	; 0x64
 8012cd0:	fb02 f303 	mul.w	r3, r2, r3
 8012cd4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012cd6:	78fb      	ldrb	r3, [r7, #3]
 8012cd8:	1c5a      	adds	r2, r3, #1
 8012cda:	70fa      	strb	r2, [r7, #3]
 8012cdc:	461a      	mov	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	f003 030f 	and.w	r3, r3, #15
 8012ce8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012cec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cf0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f002 fe4e 	bl	8015994 <LoRaMacClassBPingSlotChannelReq>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012cfe:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012d02:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012d06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	2011      	movs	r0, #17
 8012d10:	f002 ffa0 	bl	8015c54 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012d14:	e07d      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012d16:	200e      	movs	r0, #14
 8012d18:	f003 fad4 	bl	80162c4 <LoRaMacConfirmQueueIsCmdActive>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d077      	beq.n	8012e12 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012d22:	210e      	movs	r1, #14
 8012d24:	2000      	movs	r0, #0
 8012d26:	f003 fa41 	bl	80161ac <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012d36:	78fb      	ldrb	r3, [r7, #3]
 8012d38:	1c5a      	adds	r2, r3, #1
 8012d3a:	70fa      	strb	r2, [r7, #3]
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	4413      	add	r3, r2
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012d48:	78fb      	ldrb	r3, [r7, #3]
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	70fa      	strb	r2, [r7, #3]
 8012d4e:	461a      	mov	r2, r3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	4413      	add	r3, r2
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	021b      	lsls	r3, r3, #8
 8012d58:	b21a      	sxth	r2, r3
 8012d5a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012d5e:	4313      	orrs	r3, r2
 8012d60:	b21b      	sxth	r3, r3
 8012d62:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012d66:	78fb      	ldrb	r3, [r7, #3]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	70fa      	strb	r2, [r7, #3]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012d78:	4b2e      	ldr	r3, [pc, #184]	; (8012e34 <ProcessMacCommands+0x92c>)
 8012d7a:	681a      	ldr	r2, [r3, #0]
 8012d7c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012d80:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012d84:	4618      	mov	r0, r3
 8012d86:	f002 fe11 	bl	80159ac <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012d8a:	e042      	b.n	8012e12 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012d92:	78fb      	ldrb	r3, [r7, #3]
 8012d94:	1c5a      	adds	r2, r3, #1
 8012d96:	70fa      	strb	r2, [r7, #3]
 8012d98:	461a      	mov	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012da4:	78fb      	ldrb	r3, [r7, #3]
 8012da6:	1c5a      	adds	r2, r3, #1
 8012da8:	70fa      	strb	r2, [r7, #3]
 8012daa:	461a      	mov	r2, r3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	4413      	add	r3, r2
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	021b      	lsls	r3, r3, #8
 8012db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012db8:	4313      	orrs	r3, r2
 8012dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012dbe:	78fb      	ldrb	r3, [r7, #3]
 8012dc0:	1c5a      	adds	r2, r3, #1
 8012dc2:	70fa      	strb	r2, [r7, #3]
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4413      	add	r3, r2
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	041b      	lsls	r3, r3, #16
 8012dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ddc:	2264      	movs	r2, #100	; 0x64
 8012dde:	fb02 f303 	mul.w	r3, r2, r3
 8012de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012de6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012dea:	f002 fdf2 	bl	80159d2 <LoRaMacClassBBeaconFreqReq>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d003      	beq.n	8012dfc <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012df4:	2301      	movs	r3, #1
 8012df6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012dfa:	e002      	b.n	8012e02 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012e06:	2201      	movs	r2, #1
 8012e08:	4619      	mov	r1, r3
 8012e0a:	2013      	movs	r0, #19
 8012e0c:	f002 ff22 	bl	8015c54 <LoRaMacCommandsAddCmd>
                }
                break;
 8012e10:	bf00      	nop
    while( macIndex < commandsSize )
 8012e12:	78fa      	ldrb	r2, [r7, #3]
 8012e14:	78bb      	ldrb	r3, [r7, #2]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	f4ff ab8e 	bcc.w	8012538 <ProcessMacCommands+0x30>
 8012e1c:	e002      	b.n	8012e24 <ProcessMacCommands+0x91c>
            return;
 8012e1e:	bf00      	nop
 8012e20:	e000      	b.n	8012e24 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012e22:	bf00      	nop
        }
    }
}
 8012e24:	378c      	adds	r7, #140	; 0x8c
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd90      	pop	{r4, r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	12d53d80 	.word	0x12d53d80
 8012e30:	20000924 	.word	0x20000924
 8012e34:	2000159c 	.word	0x2000159c

08012e38 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b08e      	sub	sp, #56	; 0x38
 8012e3c:	af02      	add	r7, sp, #8
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	607a      	str	r2, [r7, #4]
 8012e42:	461a      	mov	r2, r3
 8012e44:	460b      	mov	r3, r1
 8012e46:	72fb      	strb	r3, [r7, #11]
 8012e48:	4613      	mov	r3, r2
 8012e4a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e4c:	2303      	movs	r3, #3
 8012e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e52:	4b65      	ldr	r3, [pc, #404]	; (8012fe8 <Send+0x1b0>)
 8012e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012e58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e5c:	4b62      	ldr	r3, [pc, #392]	; (8012fe8 <Send+0x1b0>)
 8012e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e66:	4b60      	ldr	r3, [pc, #384]	; (8012fe8 <Send+0x1b0>)
 8012e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e6c:	4b5e      	ldr	r3, [pc, #376]	; (8012fe8 <Send+0x1b0>)
 8012e6e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012e76:	2307      	movs	r3, #7
 8012e78:	e0b1      	b.n	8012fde <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012e7a:	4b5b      	ldr	r3, [pc, #364]	; (8012fe8 <Send+0x1b0>)
 8012e7c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d102      	bne.n	8012e8a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012e84:	4b58      	ldr	r3, [pc, #352]	; (8012fe8 <Send+0x1b0>)
 8012e86:	2200      	movs	r2, #0
 8012e88:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e94:	f36f 0303 	bfc	r3, #0, #4
 8012e98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012e9c:	4b52      	ldr	r3, [pc, #328]	; (8012fe8 <Send+0x1b0>)
 8012e9e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ea6:	f362 13c7 	bfi	r3, r2, #7, #1
 8012eaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012eae:	4b4e      	ldr	r3, [pc, #312]	; (8012fe8 <Send+0x1b0>)
 8012eb0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d106      	bne.n	8012ec6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012eb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ebc:	f043 0310 	orr.w	r3, r3, #16
 8012ec0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012ec4:	e005      	b.n	8012ed2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eca:	f36f 1304 	bfc	r3, #4, #1
 8012ece:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012ed2:	4b45      	ldr	r3, [pc, #276]	; (8012fe8 <Send+0x1b0>)
 8012ed4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d005      	beq.n	8012ee8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012edc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ee0:	f043 0320 	orr.w	r3, r3, #32
 8012ee4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ef0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	bf14      	ite	ne
 8012efa:	2301      	movne	r3, #1
 8012efc:	2300      	moveq	r3, #0
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012f02:	4b39      	ldr	r3, [pc, #228]	; (8012fe8 <Send+0x1b0>)
 8012f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f06:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012f08:	4b37      	ldr	r3, [pc, #220]	; (8012fe8 <Send+0x1b0>)
 8012f0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012f0e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012f10:	4b35      	ldr	r3, [pc, #212]	; (8012fe8 <Send+0x1b0>)
 8012f12:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012f16:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012f18:	4b33      	ldr	r3, [pc, #204]	; (8012fe8 <Send+0x1b0>)
 8012f1a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012f22:	4b31      	ldr	r3, [pc, #196]	; (8012fe8 <Send+0x1b0>)
 8012f24:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012f28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f2c:	4b2e      	ldr	r3, [pc, #184]	; (8012fe8 <Send+0x1b0>)
 8012f2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012f36:	4b2c      	ldr	r3, [pc, #176]	; (8012fe8 <Send+0x1b0>)
 8012f38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012f40:	4b29      	ldr	r3, [pc, #164]	; (8012fe8 <Send+0x1b0>)
 8012f42:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012f46:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f4c:	f107 0014 	add.w	r0, r7, #20
 8012f50:	4a26      	ldr	r2, [pc, #152]	; (8012fec <Send+0x1b4>)
 8012f52:	4927      	ldr	r1, [pc, #156]	; (8012ff0 <Send+0x1b8>)
 8012f54:	f002 fc58 	bl	8015808 <LoRaMacAdrCalcNext>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f60:	f362 1386 	bfi	r3, r2, #6, #1
 8012f64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012f68:	7afa      	ldrb	r2, [r7, #11]
 8012f6a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012f6e:	893b      	ldrh	r3, [r7, #8]
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68f8      	ldr	r0, [r7, #12]
 8012f76:	f000 fc5d 	bl	8013834 <PrepareFrame>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d003      	beq.n	8012f90 <Send+0x158>
 8012f88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f8c:	2b0a      	cmp	r3, #10
 8012f8e:	d107      	bne.n	8012fa0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012f90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 f961 	bl	801325c <ScheduleTx>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00a      	beq.n	8012fbe <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012fa8:	4a0f      	ldr	r2, [pc, #60]	; (8012fe8 <Send+0x1b0>)
 8012faa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012fae:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012fb2:	4a0d      	ldr	r2, [pc, #52]	; (8012fe8 <Send+0x1b0>)
 8012fb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012fb8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012fbc:	e00d      	b.n	8012fda <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012fbe:	4b0a      	ldr	r3, [pc, #40]	; (8012fe8 <Send+0x1b0>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	4a07      	ldr	r2, [pc, #28]	; (8012fe8 <Send+0x1b0>)
 8012fca:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012fcc:	f002 fee8 	bl	8015da0 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d001      	beq.n	8012fda <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fd6:	2313      	movs	r3, #19
 8012fd8:	e001      	b.n	8012fde <Send+0x1a6>
        }
    }
    return status;
 8012fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3730      	adds	r7, #48	; 0x30
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	20000e2c 	.word	0x20000e2c
 8012fec:	20000e64 	.word	0x20000e64
 8012ff0:	20000e65 	.word	0x20000e65

08012ff4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012ffe:	2300      	movs	r3, #0
 8013000:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8013006:	2301      	movs	r3, #1
 8013008:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801300a:	79fb      	ldrb	r3, [r7, #7]
 801300c:	2bff      	cmp	r3, #255	; 0xff
 801300e:	d11f      	bne.n	8013050 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8013010:	2000      	movs	r0, #0
 8013012:	f7ff f941 	bl	8012298 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8013016:	4b15      	ldr	r3, [pc, #84]	; (801306c <SendReJoinReq+0x78>)
 8013018:	2200      	movs	r2, #0
 801301a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801301e:	4b13      	ldr	r3, [pc, #76]	; (801306c <SendReJoinReq+0x78>)
 8013020:	4a13      	ldr	r2, [pc, #76]	; (8013070 <SendReJoinReq+0x7c>)
 8013022:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013026:	4b11      	ldr	r3, [pc, #68]	; (801306c <SendReJoinReq+0x78>)
 8013028:	22ff      	movs	r2, #255	; 0xff
 801302a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801302e:	7b3b      	ldrb	r3, [r7, #12]
 8013030:	f36f 1347 	bfc	r3, #5, #3
 8013034:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8013036:	7b3a      	ldrb	r2, [r7, #12]
 8013038:	4b0c      	ldr	r3, [pc, #48]	; (801306c <SendReJoinReq+0x78>)
 801303a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801303e:	480d      	ldr	r0, [pc, #52]	; (8013074 <SendReJoinReq+0x80>)
 8013040:	f7fc fb1c 	bl	800f67c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013044:	480c      	ldr	r0, [pc, #48]	; (8013078 <SendReJoinReq+0x84>)
 8013046:	f7fc fae9 	bl	800f61c <SecureElementGetDevEui>

            allowDelayedTx = false;
 801304a:	2300      	movs	r3, #0
 801304c:	73fb      	strb	r3, [r7, #15]

            break;
 801304e:	e002      	b.n	8013056 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013050:	2302      	movs	r3, #2
 8013052:	73bb      	strb	r3, [r7, #14]
            break;
 8013054:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013056:	7bfb      	ldrb	r3, [r7, #15]
 8013058:	4618      	mov	r0, r3
 801305a:	f000 f8ff 	bl	801325c <ScheduleTx>
 801305e:	4603      	mov	r3, r0
 8013060:	73bb      	strb	r3, [r7, #14]
    return status;
 8013062:	7bbb      	ldrb	r3, [r7, #14]
}
 8013064:	4618      	mov	r0, r3
 8013066:	3710      	adds	r7, #16
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	20000924 	.word	0x20000924
 8013070:	20000926 	.word	0x20000926
 8013074:	20000a32 	.word	0x20000a32
 8013078:	20000a3a 	.word	0x20000a3a

0801307c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801307c:	b580      	push	{r7, lr}
 801307e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013080:	f002 fc31 	bl	80158e6 <LoRaMacClassBIsBeaconExpected>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d001      	beq.n	801308e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801308a:	230e      	movs	r3, #14
 801308c:	e013      	b.n	80130b6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801308e:	4b0b      	ldr	r3, [pc, #44]	; (80130bc <CheckForClassBCollision+0x40>)
 8013090:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013094:	2b01      	cmp	r3, #1
 8013096:	d10d      	bne.n	80130b4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013098:	f002 fc2c 	bl	80158f4 <LoRaMacClassBIsPingExpected>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d001      	beq.n	80130a6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80130a2:	230f      	movs	r3, #15
 80130a4:	e007      	b.n	80130b6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80130a6:	f002 fc2c 	bl	8015902 <LoRaMacClassBIsMulticastExpected>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d001      	beq.n	80130b4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80130b0:	230f      	movs	r3, #15
 80130b2:	e000      	b.n	80130b6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	20000e2c 	.word	0x20000e2c

080130c0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80130c0:	b590      	push	{r4, r7, lr}
 80130c2:	b083      	sub	sp, #12
 80130c4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130c6:	4b2d      	ldr	r3, [pc, #180]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130c8:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130cc:	4b2b      	ldr	r3, [pc, #172]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130ce:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80130d2:	4b2a      	ldr	r3, [pc, #168]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130d4:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80130d8:	4b28      	ldr	r3, [pc, #160]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130da:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80130de:	4b27      	ldr	r3, [pc, #156]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130e4:	b25b      	sxtb	r3, r3
 80130e6:	f004 fcf9 	bl	8017adc <RegionApplyDrOffset>
 80130ea:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130ec:	b259      	sxtb	r1, r3
 80130ee:	4b23      	ldr	r3, [pc, #140]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130f0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130f4:	4b21      	ldr	r3, [pc, #132]	; (801317c <ComputeRxWindowParameters+0xbc>)
 80130f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130f8:	4821      	ldr	r0, [pc, #132]	; (8013180 <ComputeRxWindowParameters+0xc0>)
 80130fa:	9000      	str	r0, [sp, #0]
 80130fc:	4620      	mov	r0, r4
 80130fe:	f004 fbfd 	bl	80178fc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013102:	4b1e      	ldr	r3, [pc, #120]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013104:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013108:	4b1c      	ldr	r3, [pc, #112]	; (801317c <ComputeRxWindowParameters+0xbc>)
 801310a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801310e:	b259      	sxtb	r1, r3
 8013110:	4b1a      	ldr	r3, [pc, #104]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013112:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013116:	4b19      	ldr	r3, [pc, #100]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801311a:	4c1a      	ldr	r4, [pc, #104]	; (8013184 <ComputeRxWindowParameters+0xc4>)
 801311c:	9400      	str	r4, [sp, #0]
 801311e:	f004 fbed 	bl	80178fc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013122:	4b16      	ldr	r3, [pc, #88]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013126:	4a18      	ldr	r2, [pc, #96]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013128:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801312c:	4413      	add	r3, r2
 801312e:	4a16      	ldr	r2, [pc, #88]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013130:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013134:	4b11      	ldr	r3, [pc, #68]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013138:	4a13      	ldr	r2, [pc, #76]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 801313a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801313e:	4413      	add	r3, r2
 8013140:	4a11      	ldr	r2, [pc, #68]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013142:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8013146:	4b10      	ldr	r3, [pc, #64]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013148:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801314c:	2b04      	cmp	r3, #4
 801314e:	d011      	beq.n	8013174 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013150:	4b0a      	ldr	r3, [pc, #40]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013154:	4a0c      	ldr	r2, [pc, #48]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013156:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801315a:	4413      	add	r3, r2
 801315c:	4a0a      	ldr	r2, [pc, #40]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 801315e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013162:	4b06      	ldr	r3, [pc, #24]	; (801317c <ComputeRxWindowParameters+0xbc>)
 8013164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013166:	4a08      	ldr	r2, [pc, #32]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013168:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801316c:	4413      	add	r3, r2
 801316e:	4a06      	ldr	r2, [pc, #24]	; (8013188 <ComputeRxWindowParameters+0xc8>)
 8013170:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013174:	bf00      	nop
 8013176:	3704      	adds	r7, #4
 8013178:	46bd      	mov	sp, r7
 801317a:	bd90      	pop	{r4, r7, pc}
 801317c:	20000e2c 	.word	0x20000e2c
 8013180:	20000cdc 	.word	0x20000cdc
 8013184:	20000cf0 	.word	0x20000cf0
 8013188:	20000924 	.word	0x20000924

0801318c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013192:	2300      	movs	r3, #0
 8013194:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013196:	4b13      	ldr	r3, [pc, #76]	; (80131e4 <VerifyTxFrame+0x58>)
 8013198:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801319c:	2b00      	cmp	r3, #0
 801319e:	d01b      	beq.n	80131d8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80131a0:	1d3b      	adds	r3, r7, #4
 80131a2:	4618      	mov	r0, r3
 80131a4:	f002 fe4c 	bl	8015e40 <LoRaMacCommandsGetSizeSerializedCmds>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d001      	beq.n	80131b2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131ae:	2313      	movs	r3, #19
 80131b0:	e013      	b.n	80131da <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80131b2:	4b0d      	ldr	r3, [pc, #52]	; (80131e8 <VerifyTxFrame+0x5c>)
 80131b4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80131b8:	4a0a      	ldr	r2, [pc, #40]	; (80131e4 <VerifyTxFrame+0x58>)
 80131ba:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	b2d2      	uxtb	r2, r2
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff f978 	bl	80124b8 <ValidatePayloadLength>
 80131c8:	4603      	mov	r3, r0
 80131ca:	f083 0301 	eor.w	r3, r3, #1
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80131d4:	2308      	movs	r3, #8
 80131d6:	e000      	b.n	80131da <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	20000e2c 	.word	0x20000e2c
 80131e8:	20000924 	.word	0x20000924

080131ec <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80131f2:	4b18      	ldr	r3, [pc, #96]	; (8013254 <SerializeTxFrame+0x68>)
 80131f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d002      	beq.n	8013202 <SerializeTxFrame+0x16>
 80131fc:	2b04      	cmp	r3, #4
 80131fe:	d011      	beq.n	8013224 <SerializeTxFrame+0x38>
 8013200:	e021      	b.n	8013246 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013202:	4815      	ldr	r0, [pc, #84]	; (8013258 <SerializeTxFrame+0x6c>)
 8013204:	f004 f97a 	bl	80174fc <LoRaMacSerializerJoinRequest>
 8013208:	4603      	mov	r3, r0
 801320a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801320c:	79fb      	ldrb	r3, [r7, #7]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d001      	beq.n	8013216 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013212:	2311      	movs	r3, #17
 8013214:	e01a      	b.n	801324c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013216:	4b0f      	ldr	r3, [pc, #60]	; (8013254 <SerializeTxFrame+0x68>)
 8013218:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801321c:	b29a      	uxth	r2, r3
 801321e:	4b0d      	ldr	r3, [pc, #52]	; (8013254 <SerializeTxFrame+0x68>)
 8013220:	801a      	strh	r2, [r3, #0]
            break;
 8013222:	e012      	b.n	801324a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013224:	480c      	ldr	r0, [pc, #48]	; (8013258 <SerializeTxFrame+0x6c>)
 8013226:	f004 f9eb 	bl	8017600 <LoRaMacSerializerData>
 801322a:	4603      	mov	r3, r0
 801322c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801322e:	79fb      	ldrb	r3, [r7, #7]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d001      	beq.n	8013238 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013234:	2311      	movs	r3, #17
 8013236:	e009      	b.n	801324c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013238:	4b06      	ldr	r3, [pc, #24]	; (8013254 <SerializeTxFrame+0x68>)
 801323a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801323e:	b29a      	uxth	r2, r3
 8013240:	4b04      	ldr	r3, [pc, #16]	; (8013254 <SerializeTxFrame+0x68>)
 8013242:	801a      	strh	r2, [r3, #0]
            break;
 8013244:	e001      	b.n	801324a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013246:	2303      	movs	r3, #3
 8013248:	e000      	b.n	801324c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	20000924 	.word	0x20000924
 8013258:	20000a2c 	.word	0x20000a2c

0801325c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b090      	sub	sp, #64	; 0x40
 8013260:	af02      	add	r7, sp, #8
 8013262:	4603      	mov	r3, r0
 8013264:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013266:	2303      	movs	r3, #3
 8013268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801326c:	f7ff ff06 	bl	801307c <CheckForClassBCollision>
 8013270:	4603      	mov	r3, r0
 8013272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801327a:	2b00      	cmp	r3, #0
 801327c:	d002      	beq.n	8013284 <ScheduleTx+0x28>
    {
        return status;
 801327e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013282:	e092      	b.n	80133aa <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013284:	f000 f8fe 	bl	8013484 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013288:	f7ff ffb0 	bl	80131ec <SerializeTxFrame>
 801328c:	4603      	mov	r3, r0
 801328e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013296:	2b00      	cmp	r3, #0
 8013298:	d002      	beq.n	80132a0 <ScheduleTx+0x44>
    {
        return status;
 801329a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801329e:	e084      	b.n	80133aa <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80132a0:	4b44      	ldr	r3, [pc, #272]	; (80133b4 <ScheduleTx+0x158>)
 80132a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80132a6:	4b43      	ldr	r3, [pc, #268]	; (80133b4 <ScheduleTx+0x158>)
 80132a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80132ac:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80132ae:	4b41      	ldr	r3, [pc, #260]	; (80133b4 <ScheduleTx+0x158>)
 80132b0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80132b4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80132b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132ba:	4618      	mov	r0, r3
 80132bc:	f00a fa2c 	bl	801d718 <SysTimeGetMcuTime>
 80132c0:	4638      	mov	r0, r7
 80132c2:	4b3c      	ldr	r3, [pc, #240]	; (80133b4 <ScheduleTx+0x158>)
 80132c4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80132c8:	9200      	str	r2, [sp, #0]
 80132ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80132ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80132d2:	ca06      	ldmia	r2, {r1, r2}
 80132d4:	f00a f981 	bl	801d5da <SysTimeSub>
 80132d8:	f107 0320 	add.w	r3, r7, #32
 80132dc:	463a      	mov	r2, r7
 80132de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132e2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80132e6:	4b33      	ldr	r3, [pc, #204]	; (80133b4 <ScheduleTx+0x158>)
 80132e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ea:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80132ec:	2300      	movs	r3, #0
 80132ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80132f2:	2301      	movs	r3, #1
 80132f4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80132f6:	4b30      	ldr	r3, [pc, #192]	; (80133b8 <ScheduleTx+0x15c>)
 80132f8:	881b      	ldrh	r3, [r3, #0]
 80132fa:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80132fc:	4b2d      	ldr	r3, [pc, #180]	; (80133b4 <ScheduleTx+0x158>)
 80132fe:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013302:	2b00      	cmp	r3, #0
 8013304:	d104      	bne.n	8013310 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013306:	2301      	movs	r3, #1
 8013308:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 801330c:	2300      	movs	r3, #0
 801330e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013310:	4b28      	ldr	r3, [pc, #160]	; (80133b4 <ScheduleTx+0x158>)
 8013312:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013316:	f107 0114 	add.w	r1, r7, #20
 801331a:	4b28      	ldr	r3, [pc, #160]	; (80133bc <ScheduleTx+0x160>)
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	4b28      	ldr	r3, [pc, #160]	; (80133c0 <ScheduleTx+0x164>)
 8013320:	4a28      	ldr	r2, [pc, #160]	; (80133c4 <ScheduleTx+0x168>)
 8013322:	f004 fbb1 	bl	8017a88 <RegionNextChannel>
 8013326:	4603      	mov	r3, r0
 8013328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 801332c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013330:	2b00      	cmp	r3, #0
 8013332:	d025      	beq.n	8013380 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013334:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013338:	2b0b      	cmp	r3, #11
 801333a:	d11e      	bne.n	801337a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 801333c:	4b1e      	ldr	r3, [pc, #120]	; (80133b8 <ScheduleTx+0x15c>)
 801333e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013342:	2b00      	cmp	r3, #0
 8013344:	d01c      	beq.n	8013380 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013346:	7bfb      	ldrb	r3, [r7, #15]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d013      	beq.n	8013374 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801334c:	4b1a      	ldr	r3, [pc, #104]	; (80133b8 <ScheduleTx+0x15c>)
 801334e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013352:	f043 0320 	orr.w	r3, r3, #32
 8013356:	4a18      	ldr	r2, [pc, #96]	; (80133b8 <ScheduleTx+0x15c>)
 8013358:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801335c:	4b16      	ldr	r3, [pc, #88]	; (80133b8 <ScheduleTx+0x15c>)
 801335e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013362:	4619      	mov	r1, r3
 8013364:	4818      	ldr	r0, [pc, #96]	; (80133c8 <ScheduleTx+0x16c>)
 8013366:	f00a ff77 	bl	801e258 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801336a:	4817      	ldr	r0, [pc, #92]	; (80133c8 <ScheduleTx+0x16c>)
 801336c:	f00a fe96 	bl	801e09c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	e01a      	b.n	80133aa <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013378:	e017      	b.n	80133aa <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801337a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801337e:	e014      	b.n	80133aa <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013380:	f7ff fe9e 	bl	80130c0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013384:	f7ff ff02 	bl	801318c <VerifyTxFrame>
 8013388:	4603      	mov	r3, r0
 801338a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801338e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013392:	2b00      	cmp	r3, #0
 8013394:	d002      	beq.n	801339c <ScheduleTx+0x140>
    {
        return status;
 8013396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801339a:	e006      	b.n	80133aa <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801339c:	4b06      	ldr	r3, [pc, #24]	; (80133b8 <ScheduleTx+0x15c>)
 801339e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 fb62 	bl	8013a6c <SendFrameOnChannel>
 80133a8:	4603      	mov	r3, r0
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3738      	adds	r7, #56	; 0x38
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	20000e2c 	.word	0x20000e2c
 80133b8:	20000924 	.word	0x20000924
 80133bc:	20000e5c 	.word	0x20000e5c
 80133c0:	20000da8 	.word	0x20000da8
 80133c4:	20000d35 	.word	0x20000d35
 80133c8:	20000c8c 	.word	0x20000c8c

080133cc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	4603      	mov	r3, r0
 80133d4:	460a      	mov	r2, r1
 80133d6:	71fb      	strb	r3, [r7, #7]
 80133d8:	4613      	mov	r3, r2
 80133da:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133dc:	2313      	movs	r3, #19
 80133de:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80133e4:	4b25      	ldr	r3, [pc, #148]	; (801347c <SecureFrame+0xb0>)
 80133e6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d002      	beq.n	80133f4 <SecureFrame+0x28>
 80133ee:	2b04      	cmp	r3, #4
 80133f0:	d011      	beq.n	8013416 <SecureFrame+0x4a>
 80133f2:	e03b      	b.n	801346c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133f4:	4822      	ldr	r0, [pc, #136]	; (8013480 <SecureFrame+0xb4>)
 80133f6:	f003 fc47 	bl	8016c88 <LoRaMacCryptoPrepareJoinRequest>
 80133fa:	4603      	mov	r3, r0
 80133fc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133fe:	7bfb      	ldrb	r3, [r7, #15]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013404:	2311      	movs	r3, #17
 8013406:	e034      	b.n	8013472 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013408:	4b1c      	ldr	r3, [pc, #112]	; (801347c <SecureFrame+0xb0>)
 801340a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801340e:	b29a      	uxth	r2, r3
 8013410:	4b1a      	ldr	r3, [pc, #104]	; (801347c <SecureFrame+0xb0>)
 8013412:	801a      	strh	r2, [r3, #0]
            break;
 8013414:	e02c      	b.n	8013470 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013416:	f107 0308 	add.w	r3, r7, #8
 801341a:	4618      	mov	r0, r3
 801341c:	f003 fb44 	bl	8016aa8 <LoRaMacCryptoGetFCntUp>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d001      	beq.n	801342a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013426:	2312      	movs	r3, #18
 8013428:	e023      	b.n	8013472 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 801342a:	4b14      	ldr	r3, [pc, #80]	; (801347c <SecureFrame+0xb0>)
 801342c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013430:	2b00      	cmp	r3, #0
 8013432:	d104      	bne.n	801343e <SecureFrame+0x72>
 8013434:	4b11      	ldr	r3, [pc, #68]	; (801347c <SecureFrame+0xb0>)
 8013436:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 801343a:	2b01      	cmp	r3, #1
 801343c:	d902      	bls.n	8013444 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	3b01      	subs	r3, #1
 8013442:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013444:	68b8      	ldr	r0, [r7, #8]
 8013446:	79ba      	ldrb	r2, [r7, #6]
 8013448:	79f9      	ldrb	r1, [r7, #7]
 801344a:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <SecureFrame+0xb4>)
 801344c:	f003 fd4a 	bl	8016ee4 <LoRaMacCryptoSecureMessage>
 8013450:	4603      	mov	r3, r0
 8013452:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013454:	7bfb      	ldrb	r3, [r7, #15]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d001      	beq.n	801345e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801345a:	2311      	movs	r3, #17
 801345c:	e009      	b.n	8013472 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801345e:	4b07      	ldr	r3, [pc, #28]	; (801347c <SecureFrame+0xb0>)
 8013460:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013464:	b29a      	uxth	r2, r3
 8013466:	4b05      	ldr	r3, [pc, #20]	; (801347c <SecureFrame+0xb0>)
 8013468:	801a      	strh	r2, [r3, #0]
            break;
 801346a:	e001      	b.n	8013470 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801346c:	2303      	movs	r3, #3
 801346e:	e000      	b.n	8013472 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013470:	2300      	movs	r3, #0
}
 8013472:	4618      	mov	r0, r3
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	20000924 	.word	0x20000924
 8013480:	20000a2c 	.word	0x20000a2c

08013484 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013484:	b480      	push	{r7}
 8013486:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013488:	4b09      	ldr	r3, [pc, #36]	; (80134b0 <CalculateBackOff+0x2c>)
 801348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10a      	bne.n	80134a6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013490:	4b07      	ldr	r3, [pc, #28]	; (80134b0 <CalculateBackOff+0x2c>)
 8013492:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8013496:	3b01      	subs	r3, #1
 8013498:	4a06      	ldr	r2, [pc, #24]	; (80134b4 <CalculateBackOff+0x30>)
 801349a:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 801349e:	fb02 f303 	mul.w	r3, r2, r3
 80134a2:	4a03      	ldr	r2, [pc, #12]	; (80134b0 <CalculateBackOff+0x2c>)
 80134a4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80134a6:	bf00      	nop
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bc80      	pop	{r7}
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	20000e2c 	.word	0x20000e2c
 80134b4:	20000924 	.word	0x20000924

080134b8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	4603      	mov	r3, r0
 80134c0:	7139      	strb	r1, [r7, #4]
 80134c2:	71fb      	strb	r3, [r7, #7]
 80134c4:	4613      	mov	r3, r2
 80134c6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <RemoveMacCommands+0x1c>
 80134ce:	79fb      	ldrb	r3, [r7, #7]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d10d      	bne.n	80134f0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80134d4:	79bb      	ldrb	r3, [r7, #6]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d108      	bne.n	80134ec <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80134da:	793b      	ldrb	r3, [r7, #4]
 80134dc:	f003 0320 	and.w	r3, r3, #32
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d004      	beq.n	80134f0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80134e6:	f002 fc7f 	bl	8015de8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80134ea:	e001      	b.n	80134f0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80134ec:	f002 fc7c 	bl	8015de8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80134f0:	bf00      	nop
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80134f8:	b5b0      	push	{r4, r5, r7, lr}
 80134fa:	b090      	sub	sp, #64	; 0x40
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8013502:	79fb      	ldrb	r3, [r7, #7]
 8013504:	f083 0301 	eor.w	r3, r3, #1
 8013508:	b2db      	uxtb	r3, r3
 801350a:	2b00      	cmp	r3, #0
 801350c:	d003      	beq.n	8013516 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801350e:	4b80      	ldr	r3, [pc, #512]	; (8013710 <ResetMacParameters+0x218>)
 8013510:	2200      	movs	r2, #0
 8013512:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013516:	4b7e      	ldr	r3, [pc, #504]	; (8013710 <ResetMacParameters+0x218>)
 8013518:	2200      	movs	r2, #0
 801351a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801351c:	4b7d      	ldr	r3, [pc, #500]	; (8013714 <ResetMacParameters+0x21c>)
 801351e:	2200      	movs	r2, #0
 8013520:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013524:	4b7b      	ldr	r3, [pc, #492]	; (8013714 <ResetMacParameters+0x21c>)
 8013526:	2201      	movs	r2, #1
 8013528:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 801352c:	4b79      	ldr	r3, [pc, #484]	; (8013714 <ResetMacParameters+0x21c>)
 801352e:	2201      	movs	r2, #1
 8013530:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013534:	4b77      	ldr	r3, [pc, #476]	; (8013714 <ResetMacParameters+0x21c>)
 8013536:	2200      	movs	r2, #0
 8013538:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801353c:	4b74      	ldr	r3, [pc, #464]	; (8013710 <ResetMacParameters+0x218>)
 801353e:	2200      	movs	r2, #0
 8013540:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013544:	4b72      	ldr	r3, [pc, #456]	; (8013710 <ResetMacParameters+0x218>)
 8013546:	2201      	movs	r2, #1
 8013548:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801354c:	4b70      	ldr	r3, [pc, #448]	; (8013710 <ResetMacParameters+0x218>)
 801354e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013552:	4b6f      	ldr	r3, [pc, #444]	; (8013710 <ResetMacParameters+0x218>)
 8013554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013558:	4b6d      	ldr	r3, [pc, #436]	; (8013710 <ResetMacParameters+0x218>)
 801355a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801355e:	4b6c      	ldr	r3, [pc, #432]	; (8013710 <ResetMacParameters+0x218>)
 8013560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013564:	4b6a      	ldr	r3, [pc, #424]	; (8013710 <ResetMacParameters+0x218>)
 8013566:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801356a:	4b69      	ldr	r3, [pc, #420]	; (8013710 <ResetMacParameters+0x218>)
 801356c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013570:	4b67      	ldr	r3, [pc, #412]	; (8013710 <ResetMacParameters+0x218>)
 8013572:	4a67      	ldr	r2, [pc, #412]	; (8013710 <ResetMacParameters+0x218>)
 8013574:	336c      	adds	r3, #108	; 0x6c
 8013576:	32b4      	adds	r2, #180	; 0xb4
 8013578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801357c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013580:	4b63      	ldr	r3, [pc, #396]	; (8013710 <ResetMacParameters+0x218>)
 8013582:	4a63      	ldr	r2, [pc, #396]	; (8013710 <ResetMacParameters+0x218>)
 8013584:	3374      	adds	r3, #116	; 0x74
 8013586:	32bc      	adds	r2, #188	; 0xbc
 8013588:	e892 0003 	ldmia.w	r2, {r0, r1}
 801358c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013590:	4b5f      	ldr	r3, [pc, #380]	; (8013710 <ResetMacParameters+0x218>)
 8013592:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013596:	4b5e      	ldr	r3, [pc, #376]	; (8013710 <ResetMacParameters+0x218>)
 8013598:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801359c:	4b5c      	ldr	r3, [pc, #368]	; (8013710 <ResetMacParameters+0x218>)
 801359e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80135a2:	4b5b      	ldr	r3, [pc, #364]	; (8013710 <ResetMacParameters+0x218>)
 80135a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80135a8:	4b59      	ldr	r3, [pc, #356]	; (8013710 <ResetMacParameters+0x218>)
 80135aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80135ae:	4a58      	ldr	r2, [pc, #352]	; (8013710 <ResetMacParameters+0x218>)
 80135b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80135b4:	4b56      	ldr	r3, [pc, #344]	; (8013710 <ResetMacParameters+0x218>)
 80135b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80135ba:	4a55      	ldr	r2, [pc, #340]	; (8013710 <ResetMacParameters+0x218>)
 80135bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80135c0:	4b53      	ldr	r3, [pc, #332]	; (8013710 <ResetMacParameters+0x218>)
 80135c2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80135c6:	4b52      	ldr	r3, [pc, #328]	; (8013710 <ResetMacParameters+0x218>)
 80135c8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135cc:	4b50      	ldr	r3, [pc, #320]	; (8013710 <ResetMacParameters+0x218>)
 80135ce:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135d2:	4b4f      	ldr	r3, [pc, #316]	; (8013710 <ResetMacParameters+0x218>)
 80135d4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 80135d8:	4b4e      	ldr	r3, [pc, #312]	; (8013714 <ResetMacParameters+0x21c>)
 80135da:	2200      	movs	r2, #0
 80135dc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80135e0:	4b4b      	ldr	r3, [pc, #300]	; (8013710 <ResetMacParameters+0x218>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80135e8:	4b49      	ldr	r3, [pc, #292]	; (8013710 <ResetMacParameters+0x218>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80135f0:	4b47      	ldr	r3, [pc, #284]	; (8013710 <ResetMacParameters+0x218>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80135f8:	4b45      	ldr	r3, [pc, #276]	; (8013710 <ResetMacParameters+0x218>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013600:	4b43      	ldr	r3, [pc, #268]	; (8013710 <ResetMacParameters+0x218>)
 8013602:	2200      	movs	r2, #0
 8013604:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8013608:	4b41      	ldr	r3, [pc, #260]	; (8013710 <ResetMacParameters+0x218>)
 801360a:	2200      	movs	r2, #0
 801360c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013610:	4b3f      	ldr	r3, [pc, #252]	; (8013710 <ResetMacParameters+0x218>)
 8013612:	2200      	movs	r2, #0
 8013614:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8013618:	4b3d      	ldr	r3, [pc, #244]	; (8013710 <ResetMacParameters+0x218>)
 801361a:	2200      	movs	r2, #0
 801361c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013620:	4b3b      	ldr	r3, [pc, #236]	; (8013710 <ResetMacParameters+0x218>)
 8013622:	2200      	movs	r2, #0
 8013624:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013628:	2301      	movs	r3, #1
 801362a:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801362c:	4b3a      	ldr	r3, [pc, #232]	; (8013718 <ResetMacParameters+0x220>)
 801362e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013630:	4b3a      	ldr	r3, [pc, #232]	; (801371c <ResetMacParameters+0x224>)
 8013632:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013634:	4b36      	ldr	r3, [pc, #216]	; (8013710 <ResetMacParameters+0x218>)
 8013636:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801363a:	f107 020c 	add.w	r2, r7, #12
 801363e:	4611      	mov	r1, r2
 8013640:	4618      	mov	r0, r3
 8013642:	f004 f90d 	bl	8017860 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013646:	4b33      	ldr	r3, [pc, #204]	; (8013714 <ResetMacParameters+0x21c>)
 8013648:	2200      	movs	r2, #0
 801364a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801364e:	4b31      	ldr	r3, [pc, #196]	; (8013714 <ResetMacParameters+0x21c>)
 8013650:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013654:	4b2f      	ldr	r3, [pc, #188]	; (8013714 <ResetMacParameters+0x21c>)
 8013656:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801365a:	4b2d      	ldr	r3, [pc, #180]	; (8013710 <ResetMacParameters+0x218>)
 801365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801365e:	4a2d      	ldr	r2, [pc, #180]	; (8013714 <ResetMacParameters+0x21c>)
 8013660:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013664:	4b2a      	ldr	r3, [pc, #168]	; (8013710 <ResetMacParameters+0x218>)
 8013666:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801366a:	4b2a      	ldr	r3, [pc, #168]	; (8013714 <ResetMacParameters+0x21c>)
 801366c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013670:	4b27      	ldr	r3, [pc, #156]	; (8013710 <ResetMacParameters+0x218>)
 8013672:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013676:	4b27      	ldr	r3, [pc, #156]	; (8013714 <ResetMacParameters+0x21c>)
 8013678:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801367c:	4b25      	ldr	r3, [pc, #148]	; (8013714 <ResetMacParameters+0x21c>)
 801367e:	2200      	movs	r2, #0
 8013680:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013684:	4b23      	ldr	r3, [pc, #140]	; (8013714 <ResetMacParameters+0x21c>)
 8013686:	2201      	movs	r2, #1
 8013688:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801368c:	4a21      	ldr	r2, [pc, #132]	; (8013714 <ResetMacParameters+0x21c>)
 801368e:	4b21      	ldr	r3, [pc, #132]	; (8013714 <ResetMacParameters+0x21c>)
 8013690:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013694:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801369a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801369c:	682b      	ldr	r3, [r5, #0]
 801369e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80136a0:	4b1c      	ldr	r3, [pc, #112]	; (8013714 <ResetMacParameters+0x21c>)
 80136a2:	2201      	movs	r2, #1
 80136a4:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80136a8:	4b1a      	ldr	r3, [pc, #104]	; (8013714 <ResetMacParameters+0x21c>)
 80136aa:	2202      	movs	r2, #2
 80136ac:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80136b0:	2300      	movs	r3, #0
 80136b2:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80136b4:	2300      	movs	r3, #0
 80136b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80136b8:	4b16      	ldr	r3, [pc, #88]	; (8013714 <ResetMacParameters+0x21c>)
 80136ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d009      	beq.n	80136d6 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80136c2:	4b14      	ldr	r3, [pc, #80]	; (8013714 <ResetMacParameters+0x21c>)
 80136c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80136cc:	4b11      	ldr	r3, [pc, #68]	; (8013714 <ResetMacParameters+0x21c>)
 80136ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136d2:	695b      	ldr	r3, [r3, #20]
 80136d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80136d6:	4b12      	ldr	r3, [pc, #72]	; (8013720 <ResetMacParameters+0x228>)
 80136d8:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80136da:	4b12      	ldr	r3, [pc, #72]	; (8013724 <ResetMacParameters+0x22c>)
 80136dc:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80136de:	4b12      	ldr	r3, [pc, #72]	; (8013728 <ResetMacParameters+0x230>)
 80136e0:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80136e2:	4b12      	ldr	r3, [pc, #72]	; (801372c <ResetMacParameters+0x234>)
 80136e4:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80136e6:	4b12      	ldr	r3, [pc, #72]	; (8013730 <ResetMacParameters+0x238>)
 80136e8:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80136ea:	4b12      	ldr	r3, [pc, #72]	; (8013734 <ResetMacParameters+0x23c>)
 80136ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80136ee:	4b12      	ldr	r3, [pc, #72]	; (8013738 <ResetMacParameters+0x240>)
 80136f0:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80136f2:	4b12      	ldr	r3, [pc, #72]	; (801373c <ResetMacParameters+0x244>)
 80136f4:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80136f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80136fa:	f107 0318 	add.w	r3, r7, #24
 80136fe:	4a10      	ldr	r2, [pc, #64]	; (8013740 <ResetMacParameters+0x248>)
 8013700:	4618      	mov	r0, r3
 8013702:	f002 f899 	bl	8015838 <LoRaMacClassBInit>
}
 8013706:	bf00      	nop
 8013708:	3740      	adds	r7, #64	; 0x40
 801370a:	46bd      	mov	sp, r7
 801370c:	bdb0      	pop	{r4, r5, r7, pc}
 801370e:	bf00      	nop
 8013710:	20000e2c 	.word	0x20000e2c
 8013714:	20000924 	.word	0x20000924
 8013718:	2000104c 	.word	0x2000104c
 801371c:	200010e0 	.word	0x200010e0
 8013720:	20000d80 	.word	0x20000d80
 8013724:	20000d3c 	.word	0x20000d3c
 8013728:	20000d6c 	.word	0x20000d6c
 801372c:	20000da5 	.word	0x20000da5
 8013730:	20000f10 	.word	0x20000f10
 8013734:	20000e74 	.word	0x20000e74
 8013738:	20000e78 	.word	0x20000e78
 801373c:	20000f14 	.word	0x20000f14
 8013740:	2000157c 	.word	0x2000157c

08013744 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f00a fd12 	bl	801e178 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013754:	4b11      	ldr	r3, [pc, #68]	; (801379c <RxWindowSetup+0x58>)
 8013756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013758:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801375a:	4b11      	ldr	r3, [pc, #68]	; (80137a0 <RxWindowSetup+0x5c>)
 801375c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013760:	4a10      	ldr	r2, [pc, #64]	; (80137a4 <RxWindowSetup+0x60>)
 8013762:	6839      	ldr	r1, [r7, #0]
 8013764:	4618      	mov	r0, r3
 8013766:	f004 f8e3 	bl	8017930 <RegionRxConfig>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d010      	beq.n	8013792 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013770:	4b0d      	ldr	r3, [pc, #52]	; (80137a8 <RxWindowSetup+0x64>)
 8013772:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013776:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <RxWindowSetup+0x64>)
 8013778:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801377c:	4b07      	ldr	r3, [pc, #28]	; (801379c <RxWindowSetup+0x58>)
 801377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013780:	4a07      	ldr	r2, [pc, #28]	; (80137a0 <RxWindowSetup+0x5c>)
 8013782:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013784:	4610      	mov	r0, r2
 8013786:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	7cda      	ldrb	r2, [r3, #19]
 801378c:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <RxWindowSetup+0x64>)
 801378e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013792:	bf00      	nop
 8013794:	3708      	adds	r7, #8
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	0801fa18 	.word	0x0801fa18
 80137a0:	20000e2c 	.word	0x20000e2c
 80137a4:	20000d40 	.word	0x20000d40
 80137a8:	20000924 	.word	0x20000924

080137ac <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80137b2:	4b1b      	ldr	r3, [pc, #108]	; (8013820 <OpenContinuousRxCWindow+0x74>)
 80137b4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80137b8:	4b19      	ldr	r3, [pc, #100]	; (8013820 <OpenContinuousRxCWindow+0x74>)
 80137ba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80137be:	b259      	sxtb	r1, r3
 80137c0:	4b17      	ldr	r3, [pc, #92]	; (8013820 <OpenContinuousRxCWindow+0x74>)
 80137c2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80137c6:	4b16      	ldr	r3, [pc, #88]	; (8013820 <OpenContinuousRxCWindow+0x74>)
 80137c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137ca:	4c16      	ldr	r4, [pc, #88]	; (8013824 <OpenContinuousRxCWindow+0x78>)
 80137cc:	9400      	str	r4, [sp, #0]
 80137ce:	f004 f895 	bl	80178fc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137d2:	4b15      	ldr	r3, [pc, #84]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 80137d4:	2202      	movs	r2, #2
 80137d6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137da:	4b13      	ldr	r3, [pc, #76]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 80137dc:	2201      	movs	r2, #1
 80137de:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80137e2:	4b0f      	ldr	r3, [pc, #60]	; (8013820 <OpenContinuousRxCWindow+0x74>)
 80137e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137e8:	4a10      	ldr	r2, [pc, #64]	; (801382c <OpenContinuousRxCWindow+0x80>)
 80137ea:	490e      	ldr	r1, [pc, #56]	; (8013824 <OpenContinuousRxCWindow+0x78>)
 80137ec:	4618      	mov	r0, r3
 80137ee:	f004 f89f 	bl	8017930 <RegionRxConfig>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d00f      	beq.n	8013818 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80137f8:	4b0b      	ldr	r3, [pc, #44]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 80137fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80137fe:	4b0a      	ldr	r3, [pc, #40]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 8013800:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8013804:	4b0a      	ldr	r3, [pc, #40]	; (8013830 <OpenContinuousRxCWindow+0x84>)
 8013806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013808:	2000      	movs	r0, #0
 801380a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801380c:	4b06      	ldr	r3, [pc, #24]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 801380e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8013812:	4b05      	ldr	r3, [pc, #20]	; (8013828 <OpenContinuousRxCWindow+0x7c>)
 8013814:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013818:	bf00      	nop
 801381a:	3704      	adds	r7, #4
 801381c:	46bd      	mov	sp, r7
 801381e:	bd90      	pop	{r4, r7, pc}
 8013820:	20000e2c 	.word	0x20000e2c
 8013824:	20000d04 	.word	0x20000d04
 8013828:	20000924 	.word	0x20000924
 801382c:	20000d40 	.word	0x20000d40
 8013830:	0801fa18 	.word	0x0801fa18

08013834 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b088      	sub	sp, #32
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	603b      	str	r3, [r7, #0]
 8013840:	4613      	mov	r3, r2
 8013842:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013844:	4b82      	ldr	r3, [pc, #520]	; (8013a50 <PrepareFrame+0x21c>)
 8013846:	2200      	movs	r2, #0
 8013848:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801384a:	4b81      	ldr	r3, [pc, #516]	; (8013a50 <PrepareFrame+0x21c>)
 801384c:	2200      	movs	r2, #0
 801384e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8013852:	2300      	movs	r3, #0
 8013854:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013856:	2300      	movs	r3, #0
 8013858:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d101      	bne.n	8013868 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013864:	2300      	movs	r3, #0
 8013866:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801386a:	461a      	mov	r2, r3
 801386c:	6839      	ldr	r1, [r7, #0]
 801386e:	4879      	ldr	r0, [pc, #484]	; (8013a54 <PrepareFrame+0x220>)
 8013870:	f006 fae7 	bl	8019e42 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013876:	b2da      	uxtb	r2, r3
 8013878:	4b75      	ldr	r3, [pc, #468]	; (8013a50 <PrepareFrame+0x21c>)
 801387a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	781a      	ldrb	r2, [r3, #0]
 8013882:	4b73      	ldr	r3, [pc, #460]	; (8013a50 <PrepareFrame+0x21c>)
 8013884:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801388e:	b2db      	uxtb	r3, r3
 8013890:	2b07      	cmp	r3, #7
 8013892:	f000 80b9 	beq.w	8013a08 <PrepareFrame+0x1d4>
 8013896:	2b07      	cmp	r3, #7
 8013898:	f300 80d0 	bgt.w	8013a3c <PrepareFrame+0x208>
 801389c:	2b02      	cmp	r3, #2
 801389e:	d006      	beq.n	80138ae <PrepareFrame+0x7a>
 80138a0:	2b04      	cmp	r3, #4
 80138a2:	f040 80cb 	bne.w	8013a3c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80138a6:	4b6a      	ldr	r3, [pc, #424]	; (8013a50 <PrepareFrame+0x21c>)
 80138a8:	2201      	movs	r2, #1
 80138aa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80138ae:	4b68      	ldr	r3, [pc, #416]	; (8013a50 <PrepareFrame+0x21c>)
 80138b0:	2204      	movs	r2, #4
 80138b2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80138b6:	4b66      	ldr	r3, [pc, #408]	; (8013a50 <PrepareFrame+0x21c>)
 80138b8:	4a67      	ldr	r2, [pc, #412]	; (8013a58 <PrepareFrame+0x224>)
 80138ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80138be:	4b64      	ldr	r3, [pc, #400]	; (8013a50 <PrepareFrame+0x21c>)
 80138c0:	22ff      	movs	r2, #255	; 0xff
 80138c2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	781a      	ldrb	r2, [r3, #0]
 80138ca:	4b61      	ldr	r3, [pc, #388]	; (8013a50 <PrepareFrame+0x21c>)
 80138cc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80138d0:	4a5f      	ldr	r2, [pc, #380]	; (8013a50 <PrepareFrame+0x21c>)
 80138d2:	79fb      	ldrb	r3, [r7, #7]
 80138d4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80138d8:	4b60      	ldr	r3, [pc, #384]	; (8013a5c <PrepareFrame+0x228>)
 80138da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80138de:	4a5c      	ldr	r2, [pc, #368]	; (8013a50 <PrepareFrame+0x21c>)
 80138e0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	781a      	ldrb	r2, [r3, #0]
 80138e8:	4b59      	ldr	r3, [pc, #356]	; (8013a50 <PrepareFrame+0x21c>)
 80138ea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80138ee:	4b58      	ldr	r3, [pc, #352]	; (8013a50 <PrepareFrame+0x21c>)
 80138f0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80138f4:	4b56      	ldr	r3, [pc, #344]	; (8013a50 <PrepareFrame+0x21c>)
 80138f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80138fa:	4b55      	ldr	r3, [pc, #340]	; (8013a50 <PrepareFrame+0x21c>)
 80138fc:	4a55      	ldr	r2, [pc, #340]	; (8013a54 <PrepareFrame+0x220>)
 80138fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013902:	f107 0318 	add.w	r3, r7, #24
 8013906:	4618      	mov	r0, r3
 8013908:	f003 f8ce 	bl	8016aa8 <LoRaMacCryptoGetFCntUp>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d001      	beq.n	8013916 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013912:	2312      	movs	r3, #18
 8013914:	e098      	b.n	8013a48 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	b29a      	uxth	r2, r3
 801391a:	4b4d      	ldr	r3, [pc, #308]	; (8013a50 <PrepareFrame+0x21c>)
 801391c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8013920:	4b4b      	ldr	r3, [pc, #300]	; (8013a50 <PrepareFrame+0x21c>)
 8013922:	2200      	movs	r2, #0
 8013924:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013928:	4b49      	ldr	r3, [pc, #292]	; (8013a50 <PrepareFrame+0x21c>)
 801392a:	2200      	movs	r2, #0
 801392c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013930:	69bb      	ldr	r3, [r7, #24]
 8013932:	4a47      	ldr	r2, [pc, #284]	; (8013a50 <PrepareFrame+0x21c>)
 8013934:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013938:	f107 0314 	add.w	r3, r7, #20
 801393c:	4618      	mov	r0, r3
 801393e:	f002 fa7f 	bl	8015e40 <LoRaMacCommandsGetSizeSerializedCmds>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d001      	beq.n	801394c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013948:	2313      	movs	r3, #19
 801394a:	e07d      	b.n	8013a48 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d076      	beq.n	8013a40 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013952:	4b42      	ldr	r3, [pc, #264]	; (8013a5c <PrepareFrame+0x228>)
 8013954:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013958:	4618      	mov	r0, r3
 801395a:	f7fe fd85 	bl	8012468 <GetMaxAppPayloadWithoutFOptsLength>
 801395e:	4603      	mov	r3, r0
 8013960:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013962:	4b3b      	ldr	r3, [pc, #236]	; (8013a50 <PrepareFrame+0x21c>)
 8013964:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013968:	2b00      	cmp	r3, #0
 801396a:	d01d      	beq.n	80139a8 <PrepareFrame+0x174>
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	2b0f      	cmp	r3, #15
 8013970:	d81a      	bhi.n	80139a8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013972:	f107 0314 	add.w	r3, r7, #20
 8013976:	4a3a      	ldr	r2, [pc, #232]	; (8013a60 <PrepareFrame+0x22c>)
 8013978:	4619      	mov	r1, r3
 801397a:	200f      	movs	r0, #15
 801397c:	f002 fa76 	bl	8015e6c <LoRaMacCommandsSerializeCmds>
 8013980:	4603      	mov	r3, r0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d001      	beq.n	801398a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013986:	2313      	movs	r3, #19
 8013988:	e05e      	b.n	8013a48 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	f003 030f 	and.w	r3, r3, #15
 8013990:	b2d9      	uxtb	r1, r3
 8013992:	68ba      	ldr	r2, [r7, #8]
 8013994:	7813      	ldrb	r3, [r2, #0]
 8013996:	f361 0303 	bfi	r3, r1, #0, #4
 801399a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	781a      	ldrb	r2, [r3, #0]
 80139a0:	4b2b      	ldr	r3, [pc, #172]	; (8013a50 <PrepareFrame+0x21c>)
 80139a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80139a6:	e04b      	b.n	8013a40 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80139a8:	4b29      	ldr	r3, [pc, #164]	; (8013a50 <PrepareFrame+0x21c>)
 80139aa:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d010      	beq.n	80139d4 <PrepareFrame+0x1a0>
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	2b0f      	cmp	r3, #15
 80139b6:	d90d      	bls.n	80139d4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80139b8:	7ffb      	ldrb	r3, [r7, #31]
 80139ba:	f107 0114 	add.w	r1, r7, #20
 80139be:	4a29      	ldr	r2, [pc, #164]	; (8013a64 <PrepareFrame+0x230>)
 80139c0:	4618      	mov	r0, r3
 80139c2:	f002 fa53 	bl	8015e6c <LoRaMacCommandsSerializeCmds>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d001      	beq.n	80139d0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139cc:	2313      	movs	r3, #19
 80139ce:	e03b      	b.n	8013a48 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80139d0:	230a      	movs	r3, #10
 80139d2:	e039      	b.n	8013a48 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80139d4:	7ffb      	ldrb	r3, [r7, #31]
 80139d6:	f107 0114 	add.w	r1, r7, #20
 80139da:	4a22      	ldr	r2, [pc, #136]	; (8013a64 <PrepareFrame+0x230>)
 80139dc:	4618      	mov	r0, r3
 80139de:	f002 fa45 	bl	8015e6c <LoRaMacCommandsSerializeCmds>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139e8:	2313      	movs	r3, #19
 80139ea:	e02d      	b.n	8013a48 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80139ec:	4b18      	ldr	r3, [pc, #96]	; (8013a50 <PrepareFrame+0x21c>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80139f4:	4b16      	ldr	r3, [pc, #88]	; (8013a50 <PrepareFrame+0x21c>)
 80139f6:	4a1b      	ldr	r2, [pc, #108]	; (8013a64 <PrepareFrame+0x230>)
 80139f8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	b2da      	uxtb	r2, r3
 8013a00:	4b13      	ldr	r3, [pc, #76]	; (8013a50 <PrepareFrame+0x21c>)
 8013a02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013a06:	e01b      	b.n	8013a40 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d01a      	beq.n	8013a44 <PrepareFrame+0x210>
 8013a0e:	4b10      	ldr	r3, [pc, #64]	; (8013a50 <PrepareFrame+0x21c>)
 8013a10:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d015      	beq.n	8013a44 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013a18:	4813      	ldr	r0, [pc, #76]	; (8013a68 <PrepareFrame+0x234>)
 8013a1a:	4b0d      	ldr	r3, [pc, #52]	; (8013a50 <PrepareFrame+0x21c>)
 8013a1c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	461a      	mov	r2, r3
 8013a24:	6839      	ldr	r1, [r7, #0]
 8013a26:	f006 fa0c 	bl	8019e42 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013a2a:	4b09      	ldr	r3, [pc, #36]	; (8013a50 <PrepareFrame+0x21c>)
 8013a2c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	3301      	adds	r3, #1
 8013a34:	b29a      	uxth	r2, r3
 8013a36:	4b06      	ldr	r3, [pc, #24]	; (8013a50 <PrepareFrame+0x21c>)
 8013a38:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013a3a:	e003      	b.n	8013a44 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	e003      	b.n	8013a48 <PrepareFrame+0x214>
            break;
 8013a40:	bf00      	nop
 8013a42:	e000      	b.n	8013a46 <PrepareFrame+0x212>
            break;
 8013a44:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013a46:	2300      	movs	r3, #0
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3720      	adds	r7, #32
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	20000924 	.word	0x20000924
 8013a54:	20000a5c 	.word	0x20000a5c
 8013a58:	20000926 	.word	0x20000926
 8013a5c:	20000e2c 	.word	0x20000e2c
 8013a60:	20000a3c 	.word	0x20000a3c
 8013a64:	20000dac 	.word	0x20000dac
 8013a68:	20000927 	.word	0x20000927

08013a6c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b08a      	sub	sp, #40	; 0x28
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	4603      	mov	r3, r0
 8013a74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a76:	2303      	movs	r3, #3
 8013a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013a80:	79fb      	ldrb	r3, [r7, #7]
 8013a82:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a84:	4b48      	ldr	r3, [pc, #288]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013a86:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a8a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a8c:	4b46      	ldr	r3, [pc, #280]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013a8e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a92:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013a94:	4b44      	ldr	r3, [pc, #272]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a9a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a9c:	4b42      	ldr	r3, [pc, #264]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013aa2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013aa4:	4b41      	ldr	r3, [pc, #260]	; (8013bac <SendFrameOnChannel+0x140>)
 8013aa6:	881b      	ldrh	r3, [r3, #0]
 8013aa8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013aaa:	4b3f      	ldr	r3, [pc, #252]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013aac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013ab0:	f107 020f 	add.w	r2, r7, #15
 8013ab4:	f107 0110 	add.w	r1, r7, #16
 8013ab8:	4b3d      	ldr	r3, [pc, #244]	; (8013bb0 <SendFrameOnChannel+0x144>)
 8013aba:	f003 ff4e 	bl	801795a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013abe:	4b3b      	ldr	r3, [pc, #236]	; (8013bac <SendFrameOnChannel+0x140>)
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013ac6:	4b38      	ldr	r3, [pc, #224]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013ac8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013acc:	b2da      	uxtb	r2, r3
 8013ace:	4b37      	ldr	r3, [pc, #220]	; (8013bac <SendFrameOnChannel+0x140>)
 8013ad0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013ad4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013ad8:	4b34      	ldr	r3, [pc, #208]	; (8013bac <SendFrameOnChannel+0x140>)
 8013ada:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013ade:	79fb      	ldrb	r3, [r7, #7]
 8013ae0:	4a32      	ldr	r2, [pc, #200]	; (8013bac <SendFrameOnChannel+0x140>)
 8013ae2:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ae6:	4b31      	ldr	r3, [pc, #196]	; (8013bac <SendFrameOnChannel+0x140>)
 8013ae8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013aec:	4a2f      	ldr	r2, [pc, #188]	; (8013bac <SendFrameOnChannel+0x140>)
 8013aee:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013af2:	4b2e      	ldr	r3, [pc, #184]	; (8013bac <SendFrameOnChannel+0x140>)
 8013af4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013af8:	4a2c      	ldr	r2, [pc, #176]	; (8013bac <SendFrameOnChannel+0x140>)
 8013afa:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013afe:	f001 ff07 	bl	8015910 <LoRaMacClassBIsBeaconModeActive>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00b      	beq.n	8013b20 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013b08:	4b28      	ldr	r3, [pc, #160]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f001 ff69 	bl	80159e6 <LoRaMacClassBIsUplinkCollision>
 8013b14:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013b16:	6a3b      	ldr	r3, [r7, #32]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d001      	beq.n	8013b20 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013b1c:	2310      	movs	r3, #16
 8013b1e:	e03e      	b.n	8013b9e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013b20:	4b21      	ldr	r3, [pc, #132]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013b22:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d101      	bne.n	8013b2e <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013b2a:	f001 ff66 	bl	80159fa <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013b2e:	f001 ff00 	bl	8015932 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013b32:	4b1d      	ldr	r3, [pc, #116]	; (8013ba8 <SendFrameOnChannel+0x13c>)
 8013b34:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b38:	b2db      	uxtb	r3, r3
 8013b3a:	4a1c      	ldr	r2, [pc, #112]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b3c:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013b40:	4611      	mov	r1, r2
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7ff fc42 	bl	80133cc <SecureFrame>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d002      	beq.n	8013b5c <SendFrameOnChannel+0xf0>
    {
        return status;
 8013b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b5a:	e020      	b.n	8013b9e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b5c:	4b13      	ldr	r3, [pc, #76]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b62:	f043 0302 	orr.w	r3, r3, #2
 8013b66:	4a11      	ldr	r2, [pc, #68]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b68:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013b6c:	4b0f      	ldr	r3, [pc, #60]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b6e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013b72:	f083 0301 	eor.w	r3, r3, #1
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d007      	beq.n	8013b8c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013b7c:	4b0b      	ldr	r3, [pc, #44]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b7e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013b82:	3301      	adds	r3, #1
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	4b09      	ldr	r3, [pc, #36]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013b8c:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <SendFrameOnChannel+0x148>)
 8013b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b90:	4a06      	ldr	r2, [pc, #24]	; (8013bac <SendFrameOnChannel+0x140>)
 8013b92:	8812      	ldrh	r2, [r2, #0]
 8013b94:	b2d2      	uxtb	r2, r2
 8013b96:	4611      	mov	r1, r2
 8013b98:	4807      	ldr	r0, [pc, #28]	; (8013bb8 <SendFrameOnChannel+0x14c>)
 8013b9a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013b9c:	2300      	movs	r3, #0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3728      	adds	r7, #40	; 0x28
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	20000e2c 	.word	0x20000e2c
 8013bac:	20000924 	.word	0x20000924
 8013bb0:	20000d38 	.word	0x20000d38
 8013bb4:	0801fa18 	.word	0x0801fa18
 8013bb8:	20000926 	.word	0x20000926

08013bbc <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b086      	sub	sp, #24
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013bc6:	4b16      	ldr	r3, [pc, #88]	; (8013c20 <SetTxContinuousWave+0x64>)
 8013bc8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013bcc:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013bce:	4b15      	ldr	r3, [pc, #84]	; (8013c24 <SetTxContinuousWave+0x68>)
 8013bd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013bd4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013bd6:	4b13      	ldr	r3, [pc, #76]	; (8013c24 <SetTxContinuousWave+0x68>)
 8013bd8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bdc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013bde:	4b11      	ldr	r3, [pc, #68]	; (8013c24 <SetTxContinuousWave+0x68>)
 8013be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013be4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013be6:	4b0f      	ldr	r3, [pc, #60]	; (8013c24 <SetTxContinuousWave+0x68>)
 8013be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bec:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013bee:	88fb      	ldrh	r3, [r7, #6]
 8013bf0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013bf2:	4b0c      	ldr	r3, [pc, #48]	; (8013c24 <SetTxContinuousWave+0x68>)
 8013bf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bf8:	f107 0208 	add.w	r2, r7, #8
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f003 ff5a 	bl	8017ab8 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c04:	4b06      	ldr	r3, [pc, #24]	; (8013c20 <SetTxContinuousWave+0x64>)
 8013c06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c0a:	f043 0302 	orr.w	r3, r3, #2
 8013c0e:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <SetTxContinuousWave+0x64>)
 8013c10:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c14:	2300      	movs	r3, #0
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3718      	adds	r7, #24
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	20000924 	.word	0x20000924
 8013c24:	20000e2c 	.word	0x20000e2c

08013c28 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4603      	mov	r3, r0
 8013c30:	6039      	str	r1, [r7, #0]
 8013c32:	80fb      	strh	r3, [r7, #6]
 8013c34:	4613      	mov	r3, r2
 8013c36:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013c38:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <SetTxContinuousWave1+0x38>)
 8013c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c3c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013c40:	88fa      	ldrh	r2, [r7, #6]
 8013c42:	6838      	ldr	r0, [r7, #0]
 8013c44:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c46:	4b07      	ldr	r3, [pc, #28]	; (8013c64 <SetTxContinuousWave1+0x3c>)
 8013c48:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c4c:	f043 0302 	orr.w	r3, r3, #2
 8013c50:	4a04      	ldr	r2, [pc, #16]	; (8013c64 <SetTxContinuousWave1+0x3c>)
 8013c52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c56:	2300      	movs	r3, #0
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	0801fa18 	.word	0x0801fa18
 8013c64:	20000924 	.word	0x20000924

08013c68 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013c68:	b480      	push	{r7}
 8013c6a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bc80      	pop	{r7}
 8013c74:	4770      	bx	lr

08013c76 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013c76:	b480      	push	{r7}
 8013c78:	b083      	sub	sp, #12
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
 8013c7e:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d002      	beq.n	8013c8c <DetermineFrameType+0x16>
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d101      	bne.n	8013c90 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c8c:	2303      	movs	r3, #3
 8013c8e:	e03b      	b.n	8013d08 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	7b1b      	ldrb	r3, [r3, #12]
 8013c94:	f003 030f 	and.w	r3, r3, #15
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d008      	beq.n	8013cb0 <DetermineFrameType+0x3a>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	2200      	movs	r2, #0
 8013cac:	701a      	strb	r2, [r3, #0]
 8013cae:	e02a      	b.n	8013d06 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d103      	bne.n	8013cc2 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	701a      	strb	r2, [r3, #0]
 8013cc0:	e021      	b.n	8013d06 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	7b1b      	ldrb	r3, [r3, #12]
 8013cc6:	f003 030f 	and.w	r3, r3, #15
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d108      	bne.n	8013ce2 <DetermineFrameType+0x6c>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d103      	bne.n	8013ce2 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	2202      	movs	r2, #2
 8013cde:	701a      	strb	r2, [r3, #0]
 8013ce0:	e011      	b.n	8013d06 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	7b1b      	ldrb	r3, [r3, #12]
 8013ce6:	f003 030f 	and.w	r3, r3, #15
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d108      	bne.n	8013d02 <DetermineFrameType+0x8c>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d003      	beq.n	8013d02 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	2203      	movs	r2, #3
 8013cfe:	701a      	strb	r2, [r3, #0]
 8013d00:	e001      	b.n	8013d06 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013d02:	2318      	movs	r3, #24
 8013d04:	e000      	b.n	8013d08 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013d06:	2300      	movs	r3, #0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bc80      	pop	{r7}
 8013d10:	4770      	bx	lr
	...

08013d14 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013d14:	b480      	push	{r7}
 8013d16:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013d18:	4b12      	ldr	r3, [pc, #72]	; (8013d64 <CheckRetransUnconfirmedUplink+0x50>)
 8013d1a:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013d1e:	4b12      	ldr	r3, [pc, #72]	; (8013d68 <CheckRetransUnconfirmedUplink+0x54>)
 8013d20:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d301      	bcc.n	8013d2c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	e016      	b.n	8013d5a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d2c:	4b0d      	ldr	r3, [pc, #52]	; (8013d64 <CheckRetransUnconfirmedUplink+0x50>)
 8013d2e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d32:	f003 0302 	and.w	r3, r3, #2
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d00d      	beq.n	8013d58 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d3c:	4b0a      	ldr	r3, [pc, #40]	; (8013d68 <CheckRetransUnconfirmedUplink+0x54>)
 8013d3e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d101      	bne.n	8013d4a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013d46:	2301      	movs	r3, #1
 8013d48:	e007      	b.n	8013d5a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013d4a:	4b06      	ldr	r3, [pc, #24]	; (8013d64 <CheckRetransUnconfirmedUplink+0x50>)
 8013d4c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013d54:	2301      	movs	r3, #1
 8013d56:	e000      	b.n	8013d5a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013d58:	2300      	movs	r3, #0
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bc80      	pop	{r7}
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	20000924 	.word	0x20000924
 8013d68:	20000e2c 	.word	0x20000e2c

08013d6c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d70:	4b0e      	ldr	r3, [pc, #56]	; (8013dac <CheckRetransConfirmedUplink+0x40>)
 8013d72:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013d76:	4b0d      	ldr	r3, [pc, #52]	; (8013dac <CheckRetransConfirmedUplink+0x40>)
 8013d78:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d301      	bcc.n	8013d84 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013d80:	2301      	movs	r3, #1
 8013d82:	e00f      	b.n	8013da4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d84:	4b09      	ldr	r3, [pc, #36]	; (8013dac <CheckRetransConfirmedUplink+0x40>)
 8013d86:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d8a:	f003 0302 	and.w	r3, r3, #2
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d006      	beq.n	8013da2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d94:	4b05      	ldr	r3, [pc, #20]	; (8013dac <CheckRetransConfirmedUplink+0x40>)
 8013d96:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e000      	b.n	8013da4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bc80      	pop	{r7}
 8013daa:	4770      	bx	lr
 8013dac:	20000924 	.word	0x20000924

08013db0 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013db0:	b480      	push	{r7}
 8013db2:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013db4:	4b1a      	ldr	r3, [pc, #104]	; (8013e20 <StopRetransmission+0x70>)
 8013db6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013dba:	f003 0302 	and.w	r3, r3, #2
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d009      	beq.n	8013dd8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013dc4:	4b16      	ldr	r3, [pc, #88]	; (8013e20 <StopRetransmission+0x70>)
 8013dc6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00e      	beq.n	8013dec <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013dce:	4b14      	ldr	r3, [pc, #80]	; (8013e20 <StopRetransmission+0x70>)
 8013dd0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d009      	beq.n	8013dec <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013dd8:	4b12      	ldr	r3, [pc, #72]	; (8013e24 <StopRetransmission+0x74>)
 8013dda:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d004      	beq.n	8013dec <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013de2:	4b10      	ldr	r3, [pc, #64]	; (8013e24 <StopRetransmission+0x74>)
 8013de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013de6:	3301      	adds	r3, #1
 8013de8:	4a0e      	ldr	r2, [pc, #56]	; (8013e24 <StopRetransmission+0x74>)
 8013dea:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013dec:	4b0c      	ldr	r3, [pc, #48]	; (8013e20 <StopRetransmission+0x70>)
 8013dee:	2200      	movs	r2, #0
 8013df0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013df4:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <StopRetransmission+0x70>)
 8013df6:	2200      	movs	r2, #0
 8013df8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013dfc:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <StopRetransmission+0x70>)
 8013dfe:	2200      	movs	r2, #0
 8013e00:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013e04:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <StopRetransmission+0x70>)
 8013e06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013e0a:	f023 0302 	bic.w	r3, r3, #2
 8013e0e:	4a04      	ldr	r2, [pc, #16]	; (8013e20 <StopRetransmission+0x70>)
 8013e10:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013e14:	2301      	movs	r3, #1
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bc80      	pop	{r7}
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	20000924 	.word	0x20000924
 8013e24:	20000e2c 	.word	0x20000e2c

08013e28 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013e2c:	4b08      	ldr	r3, [pc, #32]	; (8013e50 <OnMacProcessNotify+0x28>)
 8013e2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00a      	beq.n	8013e4c <OnMacProcessNotify+0x24>
 8013e36:	4b06      	ldr	r3, [pc, #24]	; (8013e50 <OnMacProcessNotify+0x28>)
 8013e38:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e3c:	695b      	ldr	r3, [r3, #20]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d004      	beq.n	8013e4c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013e42:	4b03      	ldr	r3, [pc, #12]	; (8013e50 <OnMacProcessNotify+0x28>)
 8013e44:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e48:	695b      	ldr	r3, [r3, #20]
 8013e4a:	4798      	blx	r3
    }
}
 8013e4c:	bf00      	nop
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	20000924 	.word	0x20000924

08013e54 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e5e:	4b0b      	ldr	r3, [pc, #44]	; (8013e8c <CallNvmDataChangeCallback+0x38>)
 8013e60:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00c      	beq.n	8013e82 <CallNvmDataChangeCallback+0x2e>
 8013e68:	4b08      	ldr	r3, [pc, #32]	; (8013e8c <CallNvmDataChangeCallback+0x38>)
 8013e6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d006      	beq.n	8013e82 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e74:	4b05      	ldr	r3, [pc, #20]	; (8013e8c <CallNvmDataChangeCallback+0x38>)
 8013e76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e7a:	691b      	ldr	r3, [r3, #16]
 8013e7c:	88fa      	ldrh	r2, [r7, #6]
 8013e7e:	4610      	mov	r0, r2
 8013e80:	4798      	blx	r3
    }
}
 8013e82:	bf00      	nop
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20000924 	.word	0x20000924

08013e90 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013e96:	4b1b      	ldr	r3, [pc, #108]	; (8013f04 <AckTimeoutRetriesProcess+0x74>)
 8013e98:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013e9c:	4b19      	ldr	r3, [pc, #100]	; (8013f04 <AckTimeoutRetriesProcess+0x74>)
 8013e9e:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d229      	bcs.n	8013efa <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013ea6:	4b17      	ldr	r3, [pc, #92]	; (8013f04 <AckTimeoutRetriesProcess+0x74>)
 8013ea8:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013eac:	3301      	adds	r3, #1
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	4b14      	ldr	r3, [pc, #80]	; (8013f04 <AckTimeoutRetriesProcess+0x74>)
 8013eb2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013eb6:	4b13      	ldr	r3, [pc, #76]	; (8013f04 <AckTimeoutRetriesProcess+0x74>)
 8013eb8:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d019      	beq.n	8013efa <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013ec6:	2322      	movs	r3, #34	; 0x22
 8013ec8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013eca:	4b0f      	ldr	r3, [pc, #60]	; (8013f08 <AckTimeoutRetriesProcess+0x78>)
 8013ecc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013ed0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013ed2:	4b0d      	ldr	r3, [pc, #52]	; (8013f08 <AckTimeoutRetriesProcess+0x78>)
 8013ed4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ed8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013eda:	4b0b      	ldr	r3, [pc, #44]	; (8013f08 <AckTimeoutRetriesProcess+0x78>)
 8013edc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ee0:	f107 0208 	add.w	r2, r7, #8
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f003 fc91 	bl	801780e <RegionGetPhyParam>
 8013eec:	4603      	mov	r3, r0
 8013eee:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	b25a      	sxtb	r2, r3
 8013ef4:	4b04      	ldr	r3, [pc, #16]	; (8013f08 <AckTimeoutRetriesProcess+0x78>)
 8013ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013efa:	bf00      	nop
 8013efc:	3710      	adds	r7, #16
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	20000924 	.word	0x20000924
 8013f08:	20000e2c 	.word	0x20000e2c

08013f0c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013f12:	4b14      	ldr	r3, [pc, #80]	; (8013f64 <AckTimeoutRetriesFinalize+0x58>)
 8013f14:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013f18:	f083 0301 	eor.w	r3, r3, #1
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d015      	beq.n	8013f4e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013f22:	2302      	movs	r3, #2
 8013f24:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013f26:	4b10      	ldr	r3, [pc, #64]	; (8013f68 <AckTimeoutRetriesFinalize+0x5c>)
 8013f28:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013f2a:	4b10      	ldr	r3, [pc, #64]	; (8013f6c <AckTimeoutRetriesFinalize+0x60>)
 8013f2c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f2e:	4b10      	ldr	r3, [pc, #64]	; (8013f70 <AckTimeoutRetriesFinalize+0x64>)
 8013f30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f34:	1d3a      	adds	r2, r7, #4
 8013f36:	4611      	mov	r1, r2
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f003 fc91 	bl	8017860 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013f3e:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <AckTimeoutRetriesFinalize+0x58>)
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013f46:	4b07      	ldr	r3, [pc, #28]	; (8013f64 <AckTimeoutRetriesFinalize+0x58>)
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013f4e:	4b05      	ldr	r3, [pc, #20]	; (8013f64 <AckTimeoutRetriesFinalize+0x58>)
 8013f50:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013f54:	4b03      	ldr	r3, [pc, #12]	; (8013f64 <AckTimeoutRetriesFinalize+0x58>)
 8013f56:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013f5a:	bf00      	nop
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	20000924 	.word	0x20000924
 8013f68:	2000104c 	.word	0x2000104c
 8013f6c:	200010e0 	.word	0x200010e0
 8013f70:	20000e2c 	.word	0x20000e2c

08013f74 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013f74:	b480      	push	{r7}
 8013f76:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f78:	4b0b      	ldr	r3, [pc, #44]	; (8013fa8 <IsRequestPending+0x34>)
 8013f7a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f7e:	f003 0304 	and.w	r3, r3, #4
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d107      	bne.n	8013f98 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013f88:	4b07      	ldr	r3, [pc, #28]	; (8013fa8 <IsRequestPending+0x34>)
 8013f8a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f8e:	f003 0301 	and.w	r3, r3, #1
 8013f92:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d001      	beq.n	8013f9c <IsRequestPending+0x28>
    {
        return 1;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	e000      	b.n	8013f9e <IsRequestPending+0x2a>
    }
    return 0;
 8013f9c:	2300      	movs	r3, #0
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bc80      	pop	{r7}
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop
 8013fa8:	20000924 	.word	0x20000924

08013fac <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013fac:	b590      	push	{r4, r7, lr}
 8013fae:	b08f      	sub	sp, #60	; 0x3c
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	6178      	str	r0, [r7, #20]
 8013fb4:	6139      	str	r1, [r7, #16]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d002      	beq.n	8013fc6 <LoRaMacInitialization+0x1a>
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d101      	bne.n	8013fca <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fc6:	2303      	movs	r3, #3
 8013fc8:	e273      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00b      	beq.n	8013fea <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d007      	beq.n	8013fea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d003      	beq.n	8013fea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fea:	2303      	movs	r3, #3
 8013fec:	e261      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013fee:	7bfb      	ldrb	r3, [r7, #15]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f003 fbfc 	bl	80177ee <RegionIsActive>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	f083 0301 	eor.w	r3, r3, #1
 8013ffc:	b2db      	uxtb	r3, r3
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014002:	2309      	movs	r3, #9
 8014004:	e255      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8014006:	6978      	ldr	r0, [r7, #20]
 8014008:	f002 f852 	bl	80160b0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801400c:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8014010:	2100      	movs	r1, #0
 8014012:	48c7      	ldr	r0, [pc, #796]	; (8014330 <LoRaMacInitialization+0x384>)
 8014014:	f005 ff50 	bl	8019eb8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8014018:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801401c:	2100      	movs	r1, #0
 801401e:	48c5      	ldr	r0, [pc, #788]	; (8014334 <LoRaMacInitialization+0x388>)
 8014020:	f005 ff4a 	bl	8019eb8 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014024:	4bc3      	ldr	r3, [pc, #780]	; (8014334 <LoRaMacInitialization+0x388>)
 8014026:	2201      	movs	r2, #1
 8014028:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 801402c:	4bc1      	ldr	r3, [pc, #772]	; (8014334 <LoRaMacInitialization+0x388>)
 801402e:	2201      	movs	r2, #1
 8014030:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014034:	4abe      	ldr	r2, [pc, #760]	; (8014330 <LoRaMacInitialization+0x384>)
 8014036:	7bfb      	ldrb	r3, [r7, #15]
 8014038:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801403c:	4bbc      	ldr	r3, [pc, #752]	; (8014330 <LoRaMacInitialization+0x384>)
 801403e:	2200      	movs	r2, #0
 8014040:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014044:	4bba      	ldr	r3, [pc, #744]	; (8014330 <LoRaMacInitialization+0x384>)
 8014046:	2200      	movs	r2, #0
 8014048:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801404c:	4bb8      	ldr	r3, [pc, #736]	; (8014330 <LoRaMacInitialization+0x384>)
 801404e:	4aba      	ldr	r2, [pc, #744]	; (8014338 <LoRaMacInitialization+0x38c>)
 8014050:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014054:	230f      	movs	r3, #15
 8014056:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801405a:	4bb5      	ldr	r3, [pc, #724]	; (8014330 <LoRaMacInitialization+0x384>)
 801405c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014060:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014064:	4611      	mov	r1, r2
 8014066:	4618      	mov	r0, r3
 8014068:	f003 fbd1 	bl	801780e <RegionGetPhyParam>
 801406c:	4603      	mov	r3, r0
 801406e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014072:	2b00      	cmp	r3, #0
 8014074:	bf14      	ite	ne
 8014076:	2301      	movne	r3, #1
 8014078:	2300      	moveq	r3, #0
 801407a:	b2da      	uxtb	r2, r3
 801407c:	4bac      	ldr	r3, [pc, #688]	; (8014330 <LoRaMacInitialization+0x384>)
 801407e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014082:	230a      	movs	r3, #10
 8014084:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014088:	4ba9      	ldr	r3, [pc, #676]	; (8014330 <LoRaMacInitialization+0x384>)
 801408a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801408e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014092:	4611      	mov	r1, r2
 8014094:	4618      	mov	r0, r3
 8014096:	f003 fbba 	bl	801780e <RegionGetPhyParam>
 801409a:	4603      	mov	r3, r0
 801409c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a0:	b25a      	sxtb	r2, r3
 80140a2:	4ba3      	ldr	r3, [pc, #652]	; (8014330 <LoRaMacInitialization+0x384>)
 80140a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80140a8:	2306      	movs	r3, #6
 80140aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140ae:	4ba0      	ldr	r3, [pc, #640]	; (8014330 <LoRaMacInitialization+0x384>)
 80140b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f003 fba7 	bl	801780e <RegionGetPhyParam>
 80140c0:	4603      	mov	r3, r0
 80140c2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80140c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c6:	b25a      	sxtb	r2, r3
 80140c8:	4b99      	ldr	r3, [pc, #612]	; (8014330 <LoRaMacInitialization+0x384>)
 80140ca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80140ce:	2310      	movs	r3, #16
 80140d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140d4:	4b96      	ldr	r3, [pc, #600]	; (8014330 <LoRaMacInitialization+0x384>)
 80140d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140de:	4611      	mov	r1, r2
 80140e0:	4618      	mov	r0, r3
 80140e2:	f003 fb94 	bl	801780e <RegionGetPhyParam>
 80140e6:	4603      	mov	r3, r0
 80140e8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80140ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ec:	4a90      	ldr	r2, [pc, #576]	; (8014330 <LoRaMacInitialization+0x384>)
 80140ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80140f2:	2311      	movs	r3, #17
 80140f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140f8:	4b8d      	ldr	r3, [pc, #564]	; (8014330 <LoRaMacInitialization+0x384>)
 80140fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014102:	4611      	mov	r1, r2
 8014104:	4618      	mov	r0, r3
 8014106:	f003 fb82 	bl	801780e <RegionGetPhyParam>
 801410a:	4603      	mov	r3, r0
 801410c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014110:	4a87      	ldr	r2, [pc, #540]	; (8014330 <LoRaMacInitialization+0x384>)
 8014112:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8014116:	2312      	movs	r3, #18
 8014118:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801411c:	4b84      	ldr	r3, [pc, #528]	; (8014330 <LoRaMacInitialization+0x384>)
 801411e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014122:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014126:	4611      	mov	r1, r2
 8014128:	4618      	mov	r0, r3
 801412a:	f003 fb70 	bl	801780e <RegionGetPhyParam>
 801412e:	4603      	mov	r3, r0
 8014130:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014134:	4a7e      	ldr	r2, [pc, #504]	; (8014330 <LoRaMacInitialization+0x384>)
 8014136:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801413a:	2313      	movs	r3, #19
 801413c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014140:	4b7b      	ldr	r3, [pc, #492]	; (8014330 <LoRaMacInitialization+0x384>)
 8014142:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801414a:	4611      	mov	r1, r2
 801414c:	4618      	mov	r0, r3
 801414e:	f003 fb5e 	bl	801780e <RegionGetPhyParam>
 8014152:	4603      	mov	r3, r0
 8014154:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014158:	4a75      	ldr	r2, [pc, #468]	; (8014330 <LoRaMacInitialization+0x384>)
 801415a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801415e:	2314      	movs	r3, #20
 8014160:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014164:	4b72      	ldr	r3, [pc, #456]	; (8014330 <LoRaMacInitialization+0x384>)
 8014166:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801416a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801416e:	4611      	mov	r1, r2
 8014170:	4618      	mov	r0, r3
 8014172:	f003 fb4c 	bl	801780e <RegionGetPhyParam>
 8014176:	4603      	mov	r3, r0
 8014178:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417c:	4a6c      	ldr	r2, [pc, #432]	; (8014330 <LoRaMacInitialization+0x384>)
 801417e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014182:	2317      	movs	r3, #23
 8014184:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014188:	4b69      	ldr	r3, [pc, #420]	; (8014330 <LoRaMacInitialization+0x384>)
 801418a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801418e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f003 fb3a 	bl	801780e <RegionGetPhyParam>
 801419a:	4603      	mov	r3, r0
 801419c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	4b63      	ldr	r3, [pc, #396]	; (8014330 <LoRaMacInitialization+0x384>)
 80141a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80141a8:	2318      	movs	r3, #24
 80141aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ae:	4b60      	ldr	r3, [pc, #384]	; (8014330 <LoRaMacInitialization+0x384>)
 80141b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f003 fb27 	bl	801780e <RegionGetPhyParam>
 80141c0:	4603      	mov	r3, r0
 80141c2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80141c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c6:	4a5a      	ldr	r2, [pc, #360]	; (8014330 <LoRaMacInitialization+0x384>)
 80141c8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ce:	4a58      	ldr	r2, [pc, #352]	; (8014330 <LoRaMacInitialization+0x384>)
 80141d0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80141d4:	2319      	movs	r3, #25
 80141d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141da:	4b55      	ldr	r3, [pc, #340]	; (8014330 <LoRaMacInitialization+0x384>)
 80141dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141e4:	4611      	mov	r1, r2
 80141e6:	4618      	mov	r0, r3
 80141e8:	f003 fb11 	bl	801780e <RegionGetPhyParam>
 80141ec:	4603      	mov	r3, r0
 80141ee:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80141f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f2:	b2da      	uxtb	r2, r3
 80141f4:	4b4e      	ldr	r3, [pc, #312]	; (8014330 <LoRaMacInitialization+0x384>)
 80141f6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	b2da      	uxtb	r2, r3
 80141fe:	4b4c      	ldr	r3, [pc, #304]	; (8014330 <LoRaMacInitialization+0x384>)
 8014200:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014204:	231e      	movs	r3, #30
 8014206:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801420a:	4b49      	ldr	r3, [pc, #292]	; (8014330 <LoRaMacInitialization+0x384>)
 801420c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014210:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014214:	4611      	mov	r1, r2
 8014216:	4618      	mov	r0, r3
 8014218:	f003 faf9 	bl	801780e <RegionGetPhyParam>
 801421c:	4603      	mov	r3, r0
 801421e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014222:	b2da      	uxtb	r2, r3
 8014224:	4b42      	ldr	r3, [pc, #264]	; (8014330 <LoRaMacInitialization+0x384>)
 8014226:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801422a:	231f      	movs	r3, #31
 801422c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014230:	4b3f      	ldr	r3, [pc, #252]	; (8014330 <LoRaMacInitialization+0x384>)
 8014232:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801423a:	4611      	mov	r1, r2
 801423c:	4618      	mov	r0, r3
 801423e:	f003 fae6 	bl	801780e <RegionGetPhyParam>
 8014242:	4603      	mov	r3, r0
 8014244:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014248:	b2da      	uxtb	r2, r3
 801424a:	4b39      	ldr	r3, [pc, #228]	; (8014330 <LoRaMacInitialization+0x384>)
 801424c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014250:	2320      	movs	r3, #32
 8014252:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014256:	4b36      	ldr	r3, [pc, #216]	; (8014330 <LoRaMacInitialization+0x384>)
 8014258:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801425c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f003 fad3 	bl	801780e <RegionGetPhyParam>
 8014268:	4603      	mov	r3, r0
 801426a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	4a30      	ldr	r2, [pc, #192]	; (8014330 <LoRaMacInitialization+0x384>)
 8014270:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014274:	2321      	movs	r3, #33	; 0x21
 8014276:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801427a:	4b2d      	ldr	r3, [pc, #180]	; (8014330 <LoRaMacInitialization+0x384>)
 801427c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014280:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014284:	4611      	mov	r1, r2
 8014286:	4618      	mov	r0, r3
 8014288:	f003 fac1 	bl	801780e <RegionGetPhyParam>
 801428c:	4603      	mov	r3, r0
 801428e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014292:	4a27      	ldr	r2, [pc, #156]	; (8014330 <LoRaMacInitialization+0x384>)
 8014294:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014298:	230b      	movs	r3, #11
 801429a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801429e:	4b24      	ldr	r3, [pc, #144]	; (8014330 <LoRaMacInitialization+0x384>)
 80142a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142a8:	4611      	mov	r1, r2
 80142aa:	4618      	mov	r0, r3
 80142ac:	f003 faaf 	bl	801780e <RegionGetPhyParam>
 80142b0:	4603      	mov	r3, r0
 80142b2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	4b1d      	ldr	r3, [pc, #116]	; (8014330 <LoRaMacInitialization+0x384>)
 80142ba:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80142be:	230c      	movs	r3, #12
 80142c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142c4:	4b1a      	ldr	r3, [pc, #104]	; (8014330 <LoRaMacInitialization+0x384>)
 80142c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142ce:	4611      	mov	r1, r2
 80142d0:	4618      	mov	r0, r3
 80142d2:	f003 fa9c 	bl	801780e <RegionGetPhyParam>
 80142d6:	4603      	mov	r3, r0
 80142d8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	b29a      	uxth	r2, r3
 80142de:	4b14      	ldr	r3, [pc, #80]	; (8014330 <LoRaMacInitialization+0x384>)
 80142e0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80142e4:	4b12      	ldr	r3, [pc, #72]	; (8014330 <LoRaMacInitialization+0x384>)
 80142e6:	2201      	movs	r2, #1
 80142e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80142ec:	4b10      	ldr	r3, [pc, #64]	; (8014330 <LoRaMacInitialization+0x384>)
 80142ee:	220a      	movs	r2, #10
 80142f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80142f4:	4b0e      	ldr	r3, [pc, #56]	; (8014330 <LoRaMacInitialization+0x384>)
 80142f6:	2206      	movs	r2, #6
 80142f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80142fc:	4b0c      	ldr	r3, [pc, #48]	; (8014330 <LoRaMacInitialization+0x384>)
 80142fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014302:	4a0b      	ldr	r2, [pc, #44]	; (8014330 <LoRaMacInitialization+0x384>)
 8014304:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8014306:	4b0a      	ldr	r3, [pc, #40]	; (8014330 <LoRaMacInitialization+0x384>)
 8014308:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801430c:	4b08      	ldr	r3, [pc, #32]	; (8014330 <LoRaMacInitialization+0x384>)
 801430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014312:	4b07      	ldr	r3, [pc, #28]	; (8014330 <LoRaMacInitialization+0x384>)
 8014314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014318:	4a05      	ldr	r2, [pc, #20]	; (8014330 <LoRaMacInitialization+0x384>)
 801431a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801431c:	4b04      	ldr	r3, [pc, #16]	; (8014330 <LoRaMacInitialization+0x384>)
 801431e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014322:	4a03      	ldr	r2, [pc, #12]	; (8014330 <LoRaMacInitialization+0x384>)
 8014324:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014326:	4b02      	ldr	r3, [pc, #8]	; (8014330 <LoRaMacInitialization+0x384>)
 8014328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801432c:	e006      	b.n	801433c <LoRaMacInitialization+0x390>
 801432e:	bf00      	nop
 8014330:	20000e2c 	.word	0x20000e2c
 8014334:	20000924 	.word	0x20000924
 8014338:	01000300 	.word	0x01000300
 801433c:	4a5f      	ldr	r2, [pc, #380]	; (80144bc <LoRaMacInitialization+0x510>)
 801433e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014340:	4b5e      	ldr	r3, [pc, #376]	; (80144bc <LoRaMacInitialization+0x510>)
 8014342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014346:	4a5d      	ldr	r2, [pc, #372]	; (80144bc <LoRaMacInitialization+0x510>)
 8014348:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801434a:	4b5c      	ldr	r3, [pc, #368]	; (80144bc <LoRaMacInitialization+0x510>)
 801434c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014350:	4a5a      	ldr	r2, [pc, #360]	; (80144bc <LoRaMacInitialization+0x510>)
 8014352:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014354:	4b59      	ldr	r3, [pc, #356]	; (80144bc <LoRaMacInitialization+0x510>)
 8014356:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801435a:	4b58      	ldr	r3, [pc, #352]	; (80144bc <LoRaMacInitialization+0x510>)
 801435c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014360:	2300      	movs	r3, #0
 8014362:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014366:	4b56      	ldr	r3, [pc, #344]	; (80144c0 <LoRaMacInitialization+0x514>)
 8014368:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801436a:	4b56      	ldr	r3, [pc, #344]	; (80144c4 <LoRaMacInitialization+0x518>)
 801436c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801436e:	4b53      	ldr	r3, [pc, #332]	; (80144bc <LoRaMacInitialization+0x510>)
 8014370:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014374:	f107 0218 	add.w	r2, r7, #24
 8014378:	4611      	mov	r1, r2
 801437a:	4618      	mov	r0, r3
 801437c:	f003 fa70 	bl	8017860 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014380:	4a51      	ldr	r2, [pc, #324]	; (80144c8 <LoRaMacInitialization+0x51c>)
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014388:	2000      	movs	r0, #0
 801438a:	f7ff f8b5 	bl	80134f8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801438e:	4b4b      	ldr	r3, [pc, #300]	; (80144bc <LoRaMacInitialization+0x510>)
 8014390:	2201      	movs	r2, #1
 8014392:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8014396:	4a4c      	ldr	r2, [pc, #304]	; (80144c8 <LoRaMacInitialization+0x51c>)
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801439e:	4b4a      	ldr	r3, [pc, #296]	; (80144c8 <LoRaMacInitialization+0x51c>)
 80143a0:	2200      	movs	r2, #0
 80143a2:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80143a6:	4b48      	ldr	r3, [pc, #288]	; (80144c8 <LoRaMacInitialization+0x51c>)
 80143a8:	2201      	movs	r2, #1
 80143aa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80143ae:	4b43      	ldr	r3, [pc, #268]	; (80144bc <LoRaMacInitialization+0x510>)
 80143b0:	2200      	movs	r2, #0
 80143b2:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80143b4:	4b41      	ldr	r3, [pc, #260]	; (80144bc <LoRaMacInitialization+0x510>)
 80143b6:	2200      	movs	r2, #0
 80143b8:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80143ba:	2300      	movs	r3, #0
 80143bc:	9300      	str	r3, [sp, #0]
 80143be:	4b43      	ldr	r3, [pc, #268]	; (80144cc <LoRaMacInitialization+0x520>)
 80143c0:	2200      	movs	r2, #0
 80143c2:	f04f 31ff 	mov.w	r1, #4294967295
 80143c6:	4842      	ldr	r0, [pc, #264]	; (80144d0 <LoRaMacInitialization+0x524>)
 80143c8:	f009 fe32 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80143cc:	2300      	movs	r3, #0
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	4b40      	ldr	r3, [pc, #256]	; (80144d4 <LoRaMacInitialization+0x528>)
 80143d2:	2200      	movs	r2, #0
 80143d4:	f04f 31ff 	mov.w	r1, #4294967295
 80143d8:	483f      	ldr	r0, [pc, #252]	; (80144d8 <LoRaMacInitialization+0x52c>)
 80143da:	f009 fe29 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80143de:	2300      	movs	r3, #0
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	4b3e      	ldr	r3, [pc, #248]	; (80144dc <LoRaMacInitialization+0x530>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	f04f 31ff 	mov.w	r1, #4294967295
 80143ea:	483d      	ldr	r0, [pc, #244]	; (80144e0 <LoRaMacInitialization+0x534>)
 80143ec:	f009 fe20 	bl	801e030 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80143f0:	2300      	movs	r3, #0
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	4b3b      	ldr	r3, [pc, #236]	; (80144e4 <LoRaMacInitialization+0x538>)
 80143f6:	2200      	movs	r2, #0
 80143f8:	f04f 31ff 	mov.w	r1, #4294967295
 80143fc:	483a      	ldr	r0, [pc, #232]	; (80144e8 <LoRaMacInitialization+0x53c>)
 80143fe:	f009 fe17 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014402:	4c2e      	ldr	r4, [pc, #184]	; (80144bc <LoRaMacInitialization+0x510>)
 8014404:	463b      	mov	r3, r7
 8014406:	4618      	mov	r0, r3
 8014408:	f009 f986 	bl	801d718 <SysTimeGetMcuTime>
 801440c:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8014410:	463a      	mov	r2, r7
 8014412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014416:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801441a:	4b2b      	ldr	r3, [pc, #172]	; (80144c8 <LoRaMacInitialization+0x51c>)
 801441c:	4a33      	ldr	r2, [pc, #204]	; (80144ec <LoRaMacInitialization+0x540>)
 801441e:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014422:	4b29      	ldr	r3, [pc, #164]	; (80144c8 <LoRaMacInitialization+0x51c>)
 8014424:	4a32      	ldr	r2, [pc, #200]	; (80144f0 <LoRaMacInitialization+0x544>)
 8014426:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801442a:	4b27      	ldr	r3, [pc, #156]	; (80144c8 <LoRaMacInitialization+0x51c>)
 801442c:	4a31      	ldr	r2, [pc, #196]	; (80144f4 <LoRaMacInitialization+0x548>)
 801442e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014432:	4b25      	ldr	r3, [pc, #148]	; (80144c8 <LoRaMacInitialization+0x51c>)
 8014434:	4a30      	ldr	r2, [pc, #192]	; (80144f8 <LoRaMacInitialization+0x54c>)
 8014436:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801443a:	4b23      	ldr	r3, [pc, #140]	; (80144c8 <LoRaMacInitialization+0x51c>)
 801443c:	4a2f      	ldr	r2, [pc, #188]	; (80144fc <LoRaMacInitialization+0x550>)
 801443e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014442:	4b2f      	ldr	r3, [pc, #188]	; (8014500 <LoRaMacInitialization+0x554>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	482f      	ldr	r0, [pc, #188]	; (8014504 <LoRaMacInitialization+0x558>)
 8014448:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801444a:	482f      	ldr	r0, [pc, #188]	; (8014508 <LoRaMacInitialization+0x55c>)
 801444c:	f7fa fe10 	bl	800f070 <SecureElementInit>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d001      	beq.n	801445a <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014456:	2311      	movs	r3, #17
 8014458:	e02b      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801445a:	4818      	ldr	r0, [pc, #96]	; (80144bc <LoRaMacInitialization+0x510>)
 801445c:	f002 fae8 	bl	8016a30 <LoRaMacCryptoInit>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014466:	2311      	movs	r3, #17
 8014468:	e023      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801446a:	f001 fbe3 	bl	8015c34 <LoRaMacCommandsInit>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014474:	2313      	movs	r3, #19
 8014476:	e01c      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014478:	4824      	ldr	r0, [pc, #144]	; (801450c <LoRaMacInitialization+0x560>)
 801447a:	f002 fba3 	bl	8016bc4 <LoRaMacCryptoSetMulticastReference>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d001      	beq.n	8014488 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014484:	2311      	movs	r3, #17
 8014486:	e014      	b.n	80144b2 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014488:	4b1d      	ldr	r3, [pc, #116]	; (8014500 <LoRaMacInitialization+0x554>)
 801448a:	695b      	ldr	r3, [r3, #20]
 801448c:	4798      	blx	r3
 801448e:	4603      	mov	r3, r0
 8014490:	4618      	mov	r0, r3
 8014492:	f005 fcb1 	bl	8019df8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014496:	4b1a      	ldr	r3, [pc, #104]	; (8014500 <LoRaMacInitialization+0x554>)
 8014498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801449a:	4a08      	ldr	r2, [pc, #32]	; (80144bc <LoRaMacInitialization+0x510>)
 801449c:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80144a0:	4610      	mov	r0, r2
 80144a2:	4798      	blx	r3
    Radio.Sleep( );
 80144a4:	4b16      	ldr	r3, [pc, #88]	; (8014500 <LoRaMacInitialization+0x554>)
 80144a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80144aa:	2001      	movs	r0, #1
 80144ac:	f7fd fb40 	bl	8011b30 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3734      	adds	r7, #52	; 0x34
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd90      	pop	{r4, r7, pc}
 80144ba:	bf00      	nop
 80144bc:	20000e2c 	.word	0x20000e2c
 80144c0:	2000104c 	.word	0x2000104c
 80144c4:	200010e0 	.word	0x200010e0
 80144c8:	20000924 	.word	0x20000924
 80144cc:	08012071 	.word	0x08012071
 80144d0:	20000c8c 	.word	0x20000c8c
 80144d4:	080120e5 	.word	0x080120e5
 80144d8:	20000ca4 	.word	0x20000ca4
 80144dc:	08012151 	.word	0x08012151
 80144e0:	20000cbc 	.word	0x20000cbc
 80144e4:	080121c5 	.word	0x080121c5
 80144e8:	20000d18 	.word	0x20000d18
 80144ec:	08010c31 	.word	0x08010c31
 80144f0:	08010c8d 	.word	0x08010c8d
 80144f4:	08010d25 	.word	0x08010d25
 80144f8:	08010cf9 	.word	0x08010cf9
 80144fc:	08010d41 	.word	0x08010d41
 8014500:	0801fa18 	.word	0x0801fa18
 8014504:	20000c70 	.word	0x20000c70
 8014508:	20000f74 	.word	0x20000f74
 801450c:	20000f14 	.word	0x20000f14

08014510 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014514:	4b04      	ldr	r3, [pc, #16]	; (8014528 <LoRaMacStart+0x18>)
 8014516:	2200      	movs	r2, #0
 8014518:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 801451c:	f7fc fc26 	bl	8010d6c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014520:	2300      	movs	r3, #0
}
 8014522:	4618      	mov	r0, r3
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	20000924 	.word	0x20000924

0801452c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801452c:	b580      	push	{r7, lr}
 801452e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014530:	f7fd fad2 	bl	8011ad8 <LoRaMacIsBusy>
 8014534:	4603      	mov	r3, r0
 8014536:	f083 0301 	eor.w	r3, r3, #1
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2b00      	cmp	r3, #0
 801453e:	d00d      	beq.n	801455c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014540:	4b0b      	ldr	r3, [pc, #44]	; (8014570 <LoRaMacStop+0x44>)
 8014542:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014546:	2b02      	cmp	r3, #2
 8014548:	d102      	bne.n	8014550 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801454a:	4b0a      	ldr	r3, [pc, #40]	; (8014574 <LoRaMacStop+0x48>)
 801454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014550:	4b09      	ldr	r3, [pc, #36]	; (8014578 <LoRaMacStop+0x4c>)
 8014552:	2201      	movs	r2, #1
 8014554:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	e007      	b.n	801456c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801455c:	4b06      	ldr	r3, [pc, #24]	; (8014578 <LoRaMacStop+0x4c>)
 801455e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014562:	2b01      	cmp	r3, #1
 8014564:	d101      	bne.n	801456a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014566:	2300      	movs	r3, #0
 8014568:	e000      	b.n	801456c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801456a:	2301      	movs	r3, #1
}
 801456c:	4618      	mov	r0, r3
 801456e:	bd80      	pop	{r7, pc}
 8014570:	20000e2c 	.word	0x20000e2c
 8014574:	0801fa18 	.word	0x0801fa18
 8014578:	20000924 	.word	0x20000924

0801457c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801457c:	b580      	push	{r7, lr}
 801457e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014580:	480d      	ldr	r0, [pc, #52]	; (80145b8 <LoRaMacHalt+0x3c>)
 8014582:	f009 fdf9 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014586:	480d      	ldr	r0, [pc, #52]	; (80145bc <LoRaMacHalt+0x40>)
 8014588:	f009 fdf6 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801458c:	480c      	ldr	r0, [pc, #48]	; (80145c0 <LoRaMacHalt+0x44>)
 801458e:	f009 fdf3 	bl	801e178 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014592:	480c      	ldr	r0, [pc, #48]	; (80145c4 <LoRaMacHalt+0x48>)
 8014594:	f009 fdf0 	bl	801e178 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014598:	f001 f9cb 	bl	8015932 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801459c:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <LoRaMacHalt+0x4c>)
 801459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80145a2:	4b0a      	ldr	r3, [pc, #40]	; (80145cc <LoRaMacHalt+0x50>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80145aa:	4b08      	ldr	r3, [pc, #32]	; (80145cc <LoRaMacHalt+0x50>)
 80145ac:	2201      	movs	r2, #1
 80145ae:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80145b2:	2300      	movs	r3, #0
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	20000c8c 	.word	0x20000c8c
 80145bc:	20000ca4 	.word	0x20000ca4
 80145c0:	20000cbc 	.word	0x20000cbc
 80145c4:	20000d18 	.word	0x20000d18
 80145c8:	0801fa18 	.word	0x0801fa18
 80145cc:	20000924 	.word	0x20000924

080145d0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b08a      	sub	sp, #40	; 0x28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	4603      	mov	r3, r0
 80145d8:	6039      	str	r1, [r7, #0]
 80145da:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145dc:	4b3e      	ldr	r3, [pc, #248]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 80145de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80145e2:	4b3d      	ldr	r3, [pc, #244]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 80145e4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80145e8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80145ea:	4b3b      	ldr	r3, [pc, #236]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 80145ec:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80145f0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80145f2:	2300      	movs	r3, #0
 80145f4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d101      	bne.n	8014600 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145fc:	2303      	movs	r3, #3
 80145fe:	e066      	b.n	80146ce <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014600:	4b35      	ldr	r3, [pc, #212]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 8014602:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8014606:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014608:	2300      	movs	r3, #0
 801460a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801460c:	4b32      	ldr	r3, [pc, #200]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 801460e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014612:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014614:	4b30      	ldr	r3, [pc, #192]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 8014616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014618:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801461a:	4b2f      	ldr	r3, [pc, #188]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 801461c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014620:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014622:	4b2d      	ldr	r3, [pc, #180]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 8014624:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014628:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801462a:	4b2b      	ldr	r3, [pc, #172]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 801462c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014630:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014634:	4b28      	ldr	r3, [pc, #160]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 8014636:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801463a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801463e:	4b26      	ldr	r3, [pc, #152]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 8014640:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014648:	4b23      	ldr	r3, [pc, #140]	; (80146d8 <LoRaMacQueryTxPossible+0x108>)
 801464a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801464e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014652:	f107 0310 	add.w	r3, r7, #16
 8014656:	f107 020e 	add.w	r2, r7, #14
 801465a:	f107 010f 	add.w	r1, r7, #15
 801465e:	f107 0014 	add.w	r0, r7, #20
 8014662:	f001 f8d1 	bl	8015808 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801466a:	4618      	mov	r0, r3
 801466c:	f7fd fefc 	bl	8012468 <GetMaxAppPayloadWithoutFOptsLength>
 8014670:	4603      	mov	r3, r0
 8014672:	461a      	mov	r2, r3
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014678:	f107 0308 	add.w	r3, r7, #8
 801467c:	4618      	mov	r0, r3
 801467e:	f001 fbdf 	bl	8015e40 <LoRaMacCommandsGetSizeSerializedCmds>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d001      	beq.n	801468c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014688:	2313      	movs	r3, #19
 801468a:	e020      	b.n	80146ce <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	2b0f      	cmp	r3, #15
 8014690:	d819      	bhi.n	80146c6 <LoRaMacQueryTxPossible+0xf6>
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	785b      	ldrb	r3, [r3, #1]
 8014696:	461a      	mov	r2, r3
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	429a      	cmp	r2, r3
 801469c:	d313      	bcc.n	80146c6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	785a      	ldrb	r2, [r3, #1]
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	1ad3      	subs	r3, r2, r3
 80146a8:	b2da      	uxtb	r2, r3
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	785b      	ldrb	r3, [r3, #1]
 80146b2:	4619      	mov	r1, r3
 80146b4:	79fa      	ldrb	r2, [r7, #7]
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	4413      	add	r3, r2
 80146ba:	4299      	cmp	r1, r3
 80146bc:	d301      	bcc.n	80146c2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80146be:	2300      	movs	r3, #0
 80146c0:	e005      	b.n	80146ce <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80146c2:	2308      	movs	r3, #8
 80146c4:	e003      	b.n	80146ce <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	2200      	movs	r2, #0
 80146ca:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80146cc:	2308      	movs	r3, #8
    }
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3728      	adds	r7, #40	; 0x28
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	20000e2c 	.word	0x20000e2c

080146dc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80146dc:	b590      	push	{r4, r7, lr}
 80146de:	b087      	sub	sp, #28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146e4:	2300      	movs	r3, #0
 80146e6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d101      	bne.n	80146f2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80146ee:	2303      	movs	r3, #3
 80146f0:	e1a4      	b.n	8014a3c <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	2b3f      	cmp	r3, #63	; 0x3f
 80146f8:	f200 8199 	bhi.w	8014a2e <LoRaMacMibGetRequestConfirm+0x352>
 80146fc:	a201      	add	r2, pc, #4	; (adr r2, 8014704 <LoRaMacMibGetRequestConfirm+0x28>)
 80146fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014702:	bf00      	nop
 8014704:	08014805 	.word	0x08014805
 8014708:	08014811 	.word	0x08014811
 801470c:	0801481d 	.word	0x0801481d
 8014710:	08014829 	.word	0x08014829
 8014714:	08014835 	.word	0x08014835
 8014718:	08014841 	.word	0x08014841
 801471c:	0801484d 	.word	0x0801484d
 8014720:	08014a2f 	.word	0x08014a2f
 8014724:	08014a2f 	.word	0x08014a2f
 8014728:	08014a2f 	.word	0x08014a2f
 801472c:	08014a2f 	.word	0x08014a2f
 8014730:	08014a2f 	.word	0x08014a2f
 8014734:	08014a2f 	.word	0x08014a2f
 8014738:	08014a2f 	.word	0x08014a2f
 801473c:	08014a2f 	.word	0x08014a2f
 8014740:	08014861 	.word	0x08014861
 8014744:	0801486d 	.word	0x0801486d
 8014748:	08014879 	.word	0x08014879
 801474c:	0801489b 	.word	0x0801489b
 8014750:	080148ad 	.word	0x080148ad
 8014754:	080148bf 	.word	0x080148bf
 8014758:	080148d1 	.word	0x080148d1
 801475c:	08014905 	.word	0x08014905
 8014760:	080148e3 	.word	0x080148e3
 8014764:	08014927 	.word	0x08014927
 8014768:	08014933 	.word	0x08014933
 801476c:	0801493d 	.word	0x0801493d
 8014770:	08014947 	.word	0x08014947
 8014774:	08014951 	.word	0x08014951
 8014778:	0801495b 	.word	0x0801495b
 801477c:	08014965 	.word	0x08014965
 8014780:	08014971 	.word	0x08014971
 8014784:	08014989 	.word	0x08014989
 8014788:	0801497d 	.word	0x0801497d
 801478c:	08014995 	.word	0x08014995
 8014790:	0801499f 	.word	0x0801499f
 8014794:	080149ab 	.word	0x080149ab
 8014798:	080149c7 	.word	0x080149c7
 801479c:	080149b7 	.word	0x080149b7
 80147a0:	080149bf 	.word	0x080149bf
 80147a4:	08014a2f 	.word	0x08014a2f
 80147a8:	080149d3 	.word	0x080149d3
 80147ac:	08014a2f 	.word	0x08014a2f
 80147b0:	08014a2f 	.word	0x08014a2f
 80147b4:	08014a2f 	.word	0x08014a2f
 80147b8:	08014a2f 	.word	0x08014a2f
 80147bc:	08014a2f 	.word	0x08014a2f
 80147c0:	08014a2f 	.word	0x08014a2f
 80147c4:	08014a2f 	.word	0x08014a2f
 80147c8:	08014a2f 	.word	0x08014a2f
 80147cc:	08014a2f 	.word	0x08014a2f
 80147d0:	08014a2f 	.word	0x08014a2f
 80147d4:	08014a2f 	.word	0x08014a2f
 80147d8:	08014a2f 	.word	0x08014a2f
 80147dc:	08014a2f 	.word	0x08014a2f
 80147e0:	08014a2f 	.word	0x08014a2f
 80147e4:	08014a2f 	.word	0x08014a2f
 80147e8:	080149e7 	.word	0x080149e7
 80147ec:	080149f3 	.word	0x080149f3
 80147f0:	080149ff 	.word	0x080149ff
 80147f4:	08014a0b 	.word	0x08014a0b
 80147f8:	08014a17 	.word	0x08014a17
 80147fc:	08014a23 	.word	0x08014a23
 8014800:	08014a29 	.word	0x08014a29
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014804:	4b8f      	ldr	r3, [pc, #572]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014806:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	711a      	strb	r2, [r3, #4]
            break;
 801480e:	e114      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014810:	4b8c      	ldr	r3, [pc, #560]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014812:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	711a      	strb	r2, [r3, #4]
            break;
 801481a:	e10e      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	4618      	mov	r0, r3
 8014822:	f7fa fefb 	bl	800f61c <SecureElementGetDevEui>
            break;
 8014826:	e108      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	4618      	mov	r0, r3
 801482e:	f7fa ff25 	bl	800f67c <SecureElementGetJoinEui>
            break;
 8014832:	e102      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014834:	4b83      	ldr	r3, [pc, #524]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014836:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	711a      	strb	r2, [r3, #4]
            break;
 801483e:	e0fc      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014840:	4b80      	ldr	r3, [pc, #512]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014842:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	605a      	str	r2, [r3, #4]
            break;
 801484a:	e0f6      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801484c:	4b7d      	ldr	r3, [pc, #500]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801484e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	3304      	adds	r3, #4
 8014856:	4619      	mov	r1, r3
 8014858:	4610      	mov	r0, r2
 801485a:	f7fa ff41 	bl	800f6e0 <SecureElementGetDevAddr>
            break;
 801485e:	e0ec      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014860:	4b78      	ldr	r3, [pc, #480]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014862:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	711a      	strb	r2, [r3, #4]
            break;
 801486a:	e0e6      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801486c:	4b75      	ldr	r3, [pc, #468]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801486e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	711a      	strb	r2, [r3, #4]
            break;
 8014876:	e0e0      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014878:	231d      	movs	r3, #29
 801487a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801487c:	4b71      	ldr	r3, [pc, #452]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801487e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014882:	f107 0210 	add.w	r2, r7, #16
 8014886:	4611      	mov	r1, r2
 8014888:	4618      	mov	r0, r3
 801488a:	f002 ffc0 	bl	801780e <RegionGetPhyParam>
 801488e:	4603      	mov	r3, r0
 8014890:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	605a      	str	r2, [r3, #4]
            break;
 8014898:	e0cf      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	4a69      	ldr	r2, [pc, #420]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801489e:	3304      	adds	r3, #4
 80148a0:	326c      	adds	r2, #108	; 0x6c
 80148a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148aa:	e0c6      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	4a65      	ldr	r2, [pc, #404]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80148b0:	3304      	adds	r3, #4
 80148b2:	32b4      	adds	r2, #180	; 0xb4
 80148b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148bc:	e0bd      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	4a60      	ldr	r2, [pc, #384]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80148c2:	3304      	adds	r3, #4
 80148c4:	3274      	adds	r2, #116	; 0x74
 80148c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148ca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148ce:	e0b4      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	4a5c      	ldr	r2, [pc, #368]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80148d4:	3304      	adds	r3, #4
 80148d6:	32bc      	adds	r2, #188	; 0xbc
 80148d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148dc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148e0:	e0ab      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80148e2:	231b      	movs	r3, #27
 80148e4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148e6:	4b57      	ldr	r3, [pc, #348]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80148e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148ec:	f107 0210 	add.w	r2, r7, #16
 80148f0:	4611      	mov	r1, r2
 80148f2:	4618      	mov	r0, r3
 80148f4:	f002 ff8b 	bl	801780e <RegionGetPhyParam>
 80148f8:	4603      	mov	r3, r0
 80148fa:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	605a      	str	r2, [r3, #4]
            break;
 8014902:	e09a      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014904:	231a      	movs	r3, #26
 8014906:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014908:	4b4e      	ldr	r3, [pc, #312]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801490a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801490e:	f107 0210 	add.w	r2, r7, #16
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f002 ff7a 	bl	801780e <RegionGetPhyParam>
 801491a:	4603      	mov	r3, r0
 801491c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801491e:	68fa      	ldr	r2, [r7, #12]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	605a      	str	r2, [r3, #4]
            break;
 8014924:	e089      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014926:	4b47      	ldr	r3, [pc, #284]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014928:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	711a      	strb	r2, [r3, #4]
            break;
 8014930:	e083      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014932:	4b44      	ldr	r3, [pc, #272]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	605a      	str	r2, [r3, #4]
            break;
 801493a:	e07e      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801493c:	4b41      	ldr	r3, [pc, #260]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801493e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	605a      	str	r2, [r3, #4]
            break;
 8014944:	e079      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014946:	4b3f      	ldr	r3, [pc, #252]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	605a      	str	r2, [r3, #4]
            break;
 801494e:	e074      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014950:	4b3c      	ldr	r3, [pc, #240]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	605a      	str	r2, [r3, #4]
            break;
 8014958:	e06f      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801495a:	4b3a      	ldr	r3, [pc, #232]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801495c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	605a      	str	r2, [r3, #4]
            break;
 8014962:	e06a      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014964:	4b37      	ldr	r3, [pc, #220]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014966:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	711a      	strb	r2, [r3, #4]
            break;
 801496e:	e064      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014970:	4b34      	ldr	r3, [pc, #208]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014972:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	711a      	strb	r2, [r3, #4]
            break;
 801497a:	e05e      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801497c:	4b31      	ldr	r3, [pc, #196]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801497e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	711a      	strb	r2, [r3, #4]
            break;
 8014986:	e058      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014988:	4b2e      	ldr	r3, [pc, #184]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 801498a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	711a      	strb	r2, [r3, #4]
            break;
 8014992:	e052      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014994:	4b2b      	ldr	r3, [pc, #172]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	605a      	str	r2, [r3, #4]
            break;
 801499c:	e04d      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801499e:	4b29      	ldr	r3, [pc, #164]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149a0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	711a      	strb	r2, [r3, #4]
            break;
 80149a8:	e047      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80149aa:	4b26      	ldr	r3, [pc, #152]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	605a      	str	r2, [r3, #4]
            break;
 80149b4:	e041      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	4a22      	ldr	r2, [pc, #136]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149ba:	605a      	str	r2, [r3, #4]
            break;
 80149bc:	e03d      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2200      	movs	r2, #0
 80149c2:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80149c4:	e039      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80149c6:	4b1f      	ldr	r3, [pc, #124]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149c8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	605a      	str	r2, [r3, #4]
            break;
 80149d0:	e033      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4a1b      	ldr	r2, [pc, #108]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149d6:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80149da:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80149dc:	687c      	ldr	r4, [r7, #4]
 80149de:	f003 f89f 	bl	8017b20 <RegionGetVersion>
 80149e2:	60a0      	str	r0, [r4, #8]
            break;
 80149e4:	e029      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80149e6:	4b17      	ldr	r3, [pc, #92]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	605a      	str	r2, [r3, #4]
            break;
 80149f0:	e023      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80149f2:	4b14      	ldr	r3, [pc, #80]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 80149f4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	809a      	strh	r2, [r3, #4]
            break;
 80149fc:	e01d      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80149fe:	4b11      	ldr	r3, [pc, #68]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014a00:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	809a      	strh	r2, [r3, #4]
            break;
 8014a08:	e017      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014a0a:	4b0e      	ldr	r3, [pc, #56]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014a0c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	809a      	strh	r2, [r3, #4]
            break;
 8014a14:	e011      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014a16:	4b0b      	ldr	r3, [pc, #44]	; (8014a44 <LoRaMacMibGetRequestConfirm+0x368>)
 8014a18:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	809a      	strh	r2, [r3, #4]
            break;
 8014a20:	e00b      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014a22:	2318      	movs	r3, #24
 8014a24:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014a26:	e008      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014a28:	2318      	movs	r3, #24
 8014a2a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014a2c:	e005      	b.n	8014a3a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f000 ff96 	bl	8015960 <LoRaMacClassBMibGetRequestConfirm>
 8014a34:	4603      	mov	r3, r0
 8014a36:	75fb      	strb	r3, [r7, #23]
            break;
 8014a38:	bf00      	nop
        }
    }
    return status;
 8014a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	371c      	adds	r7, #28
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd90      	pop	{r4, r7, pc}
 8014a44:	20000e2c 	.word	0x20000e2c

08014a48 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014a50:	2300      	movs	r3, #0
 8014a52:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d101      	bne.n	8014a5e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	e382      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014a5e:	4bbb      	ldr	r3, [pc, #748]	; (8014d4c <LoRaMacMibSetRequestConfirm+0x304>)
 8014a60:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a64:	f003 0302 	and.w	r3, r3, #2
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d001      	beq.n	8014a70 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	e379      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	2b3f      	cmp	r3, #63	; 0x3f
 8014a76:	f200 8353 	bhi.w	8015120 <LoRaMacMibSetRequestConfirm+0x6d8>
 8014a7a:	a201      	add	r2, pc, #4	; (adr r2, 8014a80 <LoRaMacMibSetRequestConfirm+0x38>)
 8014a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a80:	08014b81 	.word	0x08014b81
 8014a84:	08014b91 	.word	0x08014b91
 8014a88:	08014bab 	.word	0x08014bab
 8014a8c:	08014bc3 	.word	0x08014bc3
 8014a90:	08014bdb 	.word	0x08014bdb
 8014a94:	08014be7 	.word	0x08014be7
 8014a98:	08014bf3 	.word	0x08014bf3
 8014a9c:	08014c1d 	.word	0x08014c1d
 8014aa0:	08014c43 	.word	0x08014c43
 8014aa4:	08014c69 	.word	0x08014c69
 8014aa8:	08014c8f 	.word	0x08014c8f
 8014aac:	08014cb5 	.word	0x08014cb5
 8014ab0:	08014cdb 	.word	0x08014cdb
 8014ab4:	08014d01 	.word	0x08014d01
 8014ab8:	08014d27 	.word	0x08014d27
 8014abc:	08014d55 	.word	0x08014d55
 8014ac0:	08014d75 	.word	0x08014d75
 8014ac4:	08015121 	.word	0x08015121
 8014ac8:	08014d81 	.word	0x08014d81
 8014acc:	08014df1 	.word	0x08014df1
 8014ad0:	08014e31 	.word	0x08014e31
 8014ad4:	08014e93 	.word	0x08014e93
 8014ad8:	08014f03 	.word	0x08014f03
 8014adc:	08014ed3 	.word	0x08014ed3
 8014ae0:	08014f33 	.word	0x08014f33
 8014ae4:	08014f55 	.word	0x08014f55
 8014ae8:	08014f5f 	.word	0x08014f5f
 8014aec:	08014f69 	.word	0x08014f69
 8014af0:	08014f73 	.word	0x08014f73
 8014af4:	08014f7d 	.word	0x08014f7d
 8014af8:	08014f87 	.word	0x08014f87
 8014afc:	08014fb9 	.word	0x08014fb9
 8014b00:	0801502d 	.word	0x0801502d
 8014b04:	08014ff3 	.word	0x08014ff3
 8014b08:	0801505f 	.word	0x0801505f
 8014b0c:	08015075 	.word	0x08015075
 8014b10:	0801508d 	.word	0x0801508d
 8014b14:	08015099 	.word	0x08015099
 8014b18:	080150a5 	.word	0x080150a5
 8014b1c:	08015121 	.word	0x08015121
 8014b20:	080150af 	.word	0x080150af
 8014b24:	08015121 	.word	0x08015121
 8014b28:	08015121 	.word	0x08015121
 8014b2c:	08015121 	.word	0x08015121
 8014b30:	08015121 	.word	0x08015121
 8014b34:	08015121 	.word	0x08015121
 8014b38:	08015121 	.word	0x08015121
 8014b3c:	08015121 	.word	0x08015121
 8014b40:	08015121 	.word	0x08015121
 8014b44:	08015121 	.word	0x08015121
 8014b48:	08015121 	.word	0x08015121
 8014b4c:	08015121 	.word	0x08015121
 8014b50:	08015121 	.word	0x08015121
 8014b54:	08015121 	.word	0x08015121
 8014b58:	08015121 	.word	0x08015121
 8014b5c:	08015121 	.word	0x08015121
 8014b60:	08015121 	.word	0x08015121
 8014b64:	080150d9 	.word	0x080150d9
 8014b68:	080150e5 	.word	0x080150e5
 8014b6c:	080150f1 	.word	0x080150f1
 8014b70:	080150fd 	.word	0x080150fd
 8014b74:	08015109 	.word	0x08015109
 8014b78:	08015115 	.word	0x08015115
 8014b7c:	0801511b 	.word	0x0801511b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	791b      	ldrb	r3, [r3, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7fd fb87 	bl	8012298 <SwitchClass>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b8e:	e2e8      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	791b      	ldrb	r3, [r3, #4]
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	d005      	beq.n	8014ba4 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	791a      	ldrb	r2, [r3, #4]
 8014b9c:	4b6c      	ldr	r3, [pc, #432]	; (8014d50 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b9e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ba2:	e2de      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ba4:	2303      	movs	r3, #3
 8014ba6:	75fb      	strb	r3, [r7, #23]
            break;
 8014ba8:	e2db      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fa fd1c 	bl	800f5ec <SecureElementSetDevEui>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 82b8 	beq.w	801512c <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bbc:	2303      	movs	r3, #3
 8014bbe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bc0:	e2b4      	b.n	801512c <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7fa fd40 	bl	800f64c <SecureElementSetJoinEui>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	f000 82ae 	beq.w	8015130 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bd4:	2303      	movs	r3, #3
 8014bd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bd8:	e2aa      	b.n	8015130 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	791a      	ldrb	r2, [r3, #4]
 8014bde:	4b5c      	ldr	r3, [pc, #368]	; (8014d50 <LoRaMacMibSetRequestConfirm+0x308>)
 8014be0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014be4:	e2bd      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	4a59      	ldr	r2, [pc, #356]	; (8014d50 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014bf0:	e2b7      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014bf2:	4b57      	ldr	r3, [pc, #348]	; (8014d50 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bf4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	4610      	mov	r0, r2
 8014c00:	f7fa fd54 	bl	800f6ac <SecureElementSetDevAddr>
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d002      	beq.n	8014c10 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c0a:	2303      	movs	r3, #3
 8014c0c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014c0e:	e2a8      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	4a4e      	ldr	r2, [pc, #312]	; (8014d50 <LoRaMacMibSetRequestConfirm+0x308>)
 8014c16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014c1a:	e2a2      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d00b      	beq.n	8014c3c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	f001 fff4 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	f000 827e 	beq.w	8015134 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c38:	2311      	movs	r3, #17
 8014c3a:	e293      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c40:	e278      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d00b      	beq.n	8014c62 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	2001      	movs	r0, #1
 8014c52:	f001 ffe1 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	f000 826d 	beq.w	8015138 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c5e:	2311      	movs	r3, #17
 8014c60:	e280      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c62:	2303      	movs	r3, #3
 8014c64:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c66:	e267      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d00b      	beq.n	8014c88 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	685b      	ldr	r3, [r3, #4]
 8014c74:	4619      	mov	r1, r3
 8014c76:	2008      	movs	r0, #8
 8014c78:	f001 ffce 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	f000 825c 	beq.w	801513c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c84:	2311      	movs	r3, #17
 8014c86:	e26d      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c88:	2303      	movs	r3, #3
 8014c8a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c8c:	e256      	b.n	801513c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d00b      	beq.n	8014cae <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	2009      	movs	r0, #9
 8014c9e:	f001 ffbb 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 824b 	beq.w	8015140 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014caa:	2311      	movs	r3, #17
 8014cac:	e25a      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cae:	2303      	movs	r3, #3
 8014cb0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cb2:	e245      	b.n	8015140 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d00b      	beq.n	8014cd4 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	200c      	movs	r0, #12
 8014cc4:	f001 ffa8 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	f000 823a 	beq.w	8015144 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cd0:	2311      	movs	r3, #17
 8014cd2:	e247      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cd8:	e234      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00b      	beq.n	8014cfa <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	4619      	mov	r1, r3
 8014ce8:	200d      	movs	r0, #13
 8014cea:	f001 ff95 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	f000 8229 	beq.w	8015148 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cf6:	2311      	movs	r3, #17
 8014cf8:	e234      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cfe:	e223      	b.n	8015148 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00b      	beq.n	8014d20 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	200e      	movs	r0, #14
 8014d10:	f001 ff82 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	f000 8218 	beq.w	801514c <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d1c:	2311      	movs	r3, #17
 8014d1e:	e221      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d20:	2303      	movs	r3, #3
 8014d22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d24:	e212      	b.n	801514c <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00b      	beq.n	8014d46 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	4619      	mov	r1, r3
 8014d34:	200f      	movs	r0, #15
 8014d36:	f001 ff6f 	bl	8016c18 <LoRaMacCryptoSetKey>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	f000 8207 	beq.w	8015150 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d42:	2311      	movs	r3, #17
 8014d44:	e20e      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d46:	2303      	movs	r3, #3
 8014d48:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d4a:	e201      	b.n	8015150 <LoRaMacMibSetRequestConfirm+0x708>
 8014d4c:	20000924 	.word	0x20000924
 8014d50:	20000e2c 	.word	0x20000e2c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	791a      	ldrb	r2, [r3, #4]
 8014d58:	4bb2      	ldr	r3, [pc, #712]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d5a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d5e:	4bb2      	ldr	r3, [pc, #712]	; (8015028 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d62:	4ab0      	ldr	r2, [pc, #704]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d64:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014d68:	4610      	mov	r0, r2
 8014d6a:	4798      	blx	r3
            Radio.Sleep( );
 8014d6c:	4bae      	ldr	r3, [pc, #696]	; (8015028 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d70:	4798      	blx	r3
            break;
 8014d72:	e1f6      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	791a      	ldrb	r2, [r3, #4]
 8014d78:	4baa      	ldr	r3, [pc, #680]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d7a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014d7e:	e1f0      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	7a1b      	ldrb	r3, [r3, #8]
 8014d84:	b25b      	sxtb	r3, r3
 8014d86:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d88:	4ba6      	ldr	r3, [pc, #664]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d8a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d8e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d90:	4ba4      	ldr	r3, [pc, #656]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d96:	f107 0108 	add.w	r1, r7, #8
 8014d9a:	2207      	movs	r2, #7
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f002 fd71 	bl	8017884 <RegionVerify>
 8014da2:	4603      	mov	r3, r0
 8014da4:	f083 0301 	eor.w	r3, r3, #1
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d002      	beq.n	8014db4 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dae:	2303      	movs	r3, #3
 8014db0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014db2:	e1d6      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014dba:	4b9a      	ldr	r3, [pc, #616]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dc0:	f107 0108 	add.w	r1, r7, #8
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f002 fd5c 	bl	8017884 <RegionVerify>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	f083 0301 	eor.w	r3, r3, #1
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d002      	beq.n	8014dde <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dd8:	2303      	movs	r3, #3
 8014dda:	75fb      	strb	r3, [r7, #23]
            break;
 8014ddc:	e1c1      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014dde:	4b91      	ldr	r3, [pc, #580]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	336c      	adds	r3, #108	; 0x6c
 8014de4:	3204      	adds	r2, #4
 8014de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014dee:	e1b8      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	7a1b      	ldrb	r3, [r3, #8]
 8014df4:	b25b      	sxtb	r3, r3
 8014df6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014df8:	4b8a      	ldr	r3, [pc, #552]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dfa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dfe:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e00:	4b88      	ldr	r3, [pc, #544]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e06:	f107 0108 	add.w	r1, r7, #8
 8014e0a:	2207      	movs	r2, #7
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f002 fd39 	bl	8017884 <RegionVerify>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d008      	beq.n	8014e2a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014e18:	4b82      	ldr	r3, [pc, #520]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	33b4      	adds	r3, #180	; 0xb4
 8014e1e:	3204      	adds	r2, #4
 8014e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e24:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e28:	e19b      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e2a:	2303      	movs	r3, #3
 8014e2c:	75fb      	strb	r3, [r7, #23]
            break;
 8014e2e:	e198      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	7a1b      	ldrb	r3, [r3, #8]
 8014e34:	b25b      	sxtb	r3, r3
 8014e36:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e38:	4b7a      	ldr	r3, [pc, #488]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e3a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e3e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e40:	4b78      	ldr	r3, [pc, #480]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e46:	f107 0108 	add.w	r1, r7, #8
 8014e4a:	2207      	movs	r2, #7
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f002 fd19 	bl	8017884 <RegionVerify>
 8014e52:	4603      	mov	r3, r0
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d019      	beq.n	8014e8c <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014e58:	4b72      	ldr	r3, [pc, #456]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	3374      	adds	r3, #116	; 0x74
 8014e5e:	3204      	adds	r2, #4
 8014e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e64:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014e68:	4b6e      	ldr	r3, [pc, #440]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e6a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	f040 8170 	bne.w	8015154 <LoRaMacMibSetRequestConfirm+0x70c>
 8014e74:	4b6b      	ldr	r3, [pc, #428]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e76:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f000 816a 	beq.w	8015154 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014e80:	4b69      	ldr	r3, [pc, #420]	; (8015028 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e84:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014e86:	f7fe fc91 	bl	80137ac <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e8a:	e163      	b.n	8015154 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8014e90:	e160      	b.n	8015154 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	7a1b      	ldrb	r3, [r3, #8]
 8014e96:	b25b      	sxtb	r3, r3
 8014e98:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e9a:	4b62      	ldr	r3, [pc, #392]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014ea0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014ea2:	4b60      	ldr	r3, [pc, #384]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ea4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ea8:	f107 0108 	add.w	r1, r7, #8
 8014eac:	2207      	movs	r2, #7
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f002 fce8 	bl	8017884 <RegionVerify>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d008      	beq.n	8014ecc <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014eba:	4b5a      	ldr	r3, [pc, #360]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	33bc      	adds	r3, #188	; 0xbc
 8014ec0:	3204      	adds	r2, #4
 8014ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ec6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014eca:	e14a      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ecc:	2303      	movs	r3, #3
 8014ece:	75fb      	strb	r3, [r7, #23]
            break;
 8014ed0:	e147      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014edc:	4b51      	ldr	r3, [pc, #324]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ede:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ee2:	f107 020c 	add.w	r2, r7, #12
 8014ee6:	4611      	mov	r1, r2
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f002 fcf4 	bl	80178d6 <RegionChanMaskSet>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	f083 0301 	eor.w	r3, r3, #1
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	f000 812e 	beq.w	8015158 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014efc:	2303      	movs	r3, #3
 8014efe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f00:	e12a      	b.n	8015158 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014f0c:	4b45      	ldr	r3, [pc, #276]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f12:	f107 020c 	add.w	r2, r7, #12
 8014f16:	4611      	mov	r1, r2
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f002 fcdc 	bl	80178d6 <RegionChanMaskSet>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	f083 0301 	eor.w	r3, r3, #1
 8014f24:	b2db      	uxtb	r3, r3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8118 	beq.w	801515c <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f2c:	2303      	movs	r3, #3
 8014f2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f30:	e114      	b.n	801515c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	791b      	ldrb	r3, [r3, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d009      	beq.n	8014f4e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f3e:	2b0f      	cmp	r3, #15
 8014f40:	d805      	bhi.n	8014f4e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	791a      	ldrb	r2, [r3, #4]
 8014f46:	4b37      	ldr	r3, [pc, #220]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f4c:	e109      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f4e:	2303      	movs	r3, #3
 8014f50:	75fb      	strb	r3, [r7, #23]
            break;
 8014f52:	e106      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	4a32      	ldr	r2, [pc, #200]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f5a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014f5c:	e101      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	4a30      	ldr	r2, [pc, #192]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f64:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014f66:	e0fc      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	4a2d      	ldr	r2, [pc, #180]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f6e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014f70:	e0f7      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	4a2b      	ldr	r2, [pc, #172]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f78:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014f7a:	e0f2      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	4a28      	ldr	r2, [pc, #160]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f82:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014f84:	e0ed      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f8c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014f8e:	4b25      	ldr	r3, [pc, #148]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f94:	f107 0108 	add.w	r1, r7, #8
 8014f98:	2206      	movs	r2, #6
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f002 fc72 	bl	8017884 <RegionVerify>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d005      	beq.n	8014fb2 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014fa6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014faa:	4b1e      	ldr	r3, [pc, #120]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fb0:	e0d7      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fb2:	2303      	movs	r3, #3
 8014fb4:	75fb      	strb	r3, [r7, #23]
            break;
 8014fb6:	e0d4      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fbe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014fc0:	4b18      	ldr	r3, [pc, #96]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014fc6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014fc8:	4b16      	ldr	r3, [pc, #88]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fce:	f107 0108 	add.w	r1, r7, #8
 8014fd2:	2205      	movs	r2, #5
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f002 fc55 	bl	8017884 <RegionVerify>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d005      	beq.n	8014fec <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014fe0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fe4:	4b0f      	ldr	r3, [pc, #60]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fea:	e0ba      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fec:	2303      	movs	r3, #3
 8014fee:	75fb      	strb	r3, [r7, #23]
            break;
 8014ff0:	e0b7      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ff8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014ffa:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ffc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015000:	f107 0108 	add.w	r1, r7, #8
 8015004:	220a      	movs	r2, #10
 8015006:	4618      	mov	r0, r3
 8015008:	f002 fc3c 	bl	8017884 <RegionVerify>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d005      	beq.n	801501e <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8015012:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015016:	4b03      	ldr	r3, [pc, #12]	; (8015024 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8015018:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801501c:	e0a1      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801501e:	2303      	movs	r3, #3
 8015020:	75fb      	strb	r3, [r7, #23]
            break;
 8015022:	e09e      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
 8015024:	20000e2c 	.word	0x20000e2c
 8015028:	0801fa18 	.word	0x0801fa18
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015032:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015034:	4b4d      	ldr	r3, [pc, #308]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015036:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801503a:	f107 0108 	add.w	r1, r7, #8
 801503e:	2209      	movs	r2, #9
 8015040:	4618      	mov	r0, r3
 8015042:	f002 fc1f 	bl	8017884 <RegionVerify>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d005      	beq.n	8015058 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801504c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015050:	4b46      	ldr	r3, [pc, #280]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015056:	e084      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015058:	2303      	movs	r3, #3
 801505a:	75fb      	strb	r3, [r7, #23]
            break;
 801505c:	e081      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	685b      	ldr	r3, [r3, #4]
 8015062:	4a42      	ldr	r2, [pc, #264]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015068:	4b40      	ldr	r3, [pc, #256]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 801506a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801506e:	4a3f      	ldr	r2, [pc, #252]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015070:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015072:	e076      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	791a      	ldrb	r2, [r3, #4]
 8015078:	4b3c      	ldr	r3, [pc, #240]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 801507a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801507e:	4b3b      	ldr	r3, [pc, #236]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015080:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015084:	4b39      	ldr	r3, [pc, #228]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801508a:	e06a      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4a36      	ldr	r2, [pc, #216]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015092:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015096:	e064      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	4a33      	ldr	r2, [pc, #204]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 801509e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80150a2:	e05e      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80150a4:	f7fe fde0 	bl	8013c68 <RestoreNvmData>
 80150a8:	4603      	mov	r3, r0
 80150aa:	75fb      	strb	r3, [r7, #23]
            break;
 80150ac:	e059      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	799b      	ldrb	r3, [r3, #6]
 80150b2:	2b01      	cmp	r3, #1
 80150b4:	d80d      	bhi.n	80150d2 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80150b6:	4a2d      	ldr	r2, [pc, #180]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6858      	ldr	r0, [r3, #4]
 80150c4:	f001 fce0 	bl	8016a88 <LoRaMacCryptoSetLrWanVersion>
 80150c8:	4603      	mov	r3, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d048      	beq.n	8015160 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80150ce:	2311      	movs	r3, #17
 80150d0:	e048      	b.n	8015164 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150d2:	2303      	movs	r3, #3
 80150d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80150d6:	e043      	b.n	8015160 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	4a23      	ldr	r2, [pc, #140]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 80150de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80150e2:	e03e      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	889a      	ldrh	r2, [r3, #4]
 80150e8:	4b20      	ldr	r3, [pc, #128]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 80150ea:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80150ee:	e038      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	889a      	ldrh	r2, [r3, #4]
 80150f4:	4b1d      	ldr	r3, [pc, #116]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 80150f6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80150fa:	e032      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	889a      	ldrh	r2, [r3, #4]
 8015100:	4b1a      	ldr	r3, [pc, #104]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 8015102:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8015106:	e02c      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	889a      	ldrh	r2, [r3, #4]
 801510c:	4b17      	ldr	r3, [pc, #92]	; (801516c <LoRaMacMibSetRequestConfirm+0x724>)
 801510e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8015112:	e026      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015114:	2318      	movs	r3, #24
 8015116:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015118:	e023      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801511a:	2318      	movs	r3, #24
 801511c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801511e:	e020      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f000 fc27 	bl	8015974 <LoRaMacMibClassBSetRequestConfirm>
 8015126:	4603      	mov	r3, r0
 8015128:	75fb      	strb	r3, [r7, #23]
            break;
 801512a:	e01a      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801512c:	bf00      	nop
 801512e:	e018      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015130:	bf00      	nop
 8015132:	e016      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015134:	bf00      	nop
 8015136:	e014      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015138:	bf00      	nop
 801513a:	e012      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801513c:	bf00      	nop
 801513e:	e010      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015140:	bf00      	nop
 8015142:	e00e      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015144:	bf00      	nop
 8015146:	e00c      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015148:	bf00      	nop
 801514a:	e00a      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801514c:	bf00      	nop
 801514e:	e008      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015150:	bf00      	nop
 8015152:	e006      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015154:	bf00      	nop
 8015156:	e004      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015158:	bf00      	nop
 801515a:	e002      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801515c:	bf00      	nop
 801515e:	e000      	b.n	8015162 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015160:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015162:	7dfb      	ldrb	r3, [r7, #23]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	20000e2c 	.word	0x20000e2c

08015170 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b086      	sub	sp, #24
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015178:	2302      	movs	r3, #2
 801517a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801517c:	2300      	movs	r3, #0
 801517e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d101      	bne.n	801518a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015186:	2303      	movs	r3, #3
 8015188:	e13a      	b.n	8015400 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801518a:	f7fc fca5 	bl	8011ad8 <LoRaMacIsBusy>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d001      	beq.n	8015198 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015194:	2301      	movs	r3, #1
 8015196:	e133      	b.n	8015400 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015198:	f001 f90c 	bl	80163b4 <LoRaMacConfirmQueueIsFull>
 801519c:	4603      	mov	r3, r0
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d001      	beq.n	80151a6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80151a2:	2301      	movs	r3, #1
 80151a4:	e12c      	b.n	8015400 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80151a6:	f001 f8f9 	bl	801639c <LoRaMacConfirmQueueGetCnt>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d104      	bne.n	80151ba <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80151b0:	2214      	movs	r2, #20
 80151b2:	2100      	movs	r1, #0
 80151b4:	4894      	ldr	r0, [pc, #592]	; (8015408 <LoRaMacMlmeRequest+0x298>)
 80151b6:	f004 fe7f 	bl	8019eb8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151ba:	4b94      	ldr	r3, [pc, #592]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 80151bc:	2201      	movs	r2, #1
 80151be:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80151c2:	4a92      	ldr	r2, [pc, #584]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 80151c4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80151c8:	f043 0304 	orr.w	r3, r3, #4
 80151cc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151d6:	2301      	movs	r3, #1
 80151d8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80151da:	2300      	movs	r3, #0
 80151dc:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	3b01      	subs	r3, #1
 80151e4:	2b0d      	cmp	r3, #13
 80151e6:	f200 80e1 	bhi.w	80153ac <LoRaMacMlmeRequest+0x23c>
 80151ea:	a201      	add	r2, pc, #4	; (adr r2, 80151f0 <LoRaMacMlmeRequest+0x80>)
 80151ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151f0:	08015229 	.word	0x08015229
 80151f4:	080153ad 	.word	0x080153ad
 80151f8:	080153ad 	.word	0x080153ad
 80151fc:	080153ad 	.word	0x080153ad
 8015200:	080152a1 	.word	0x080152a1
 8015204:	080152bf 	.word	0x080152bf
 8015208:	080152cf 	.word	0x080152cf
 801520c:	080153ad 	.word	0x080153ad
 8015210:	080153ad 	.word	0x080153ad
 8015214:	080152eb 	.word	0x080152eb
 8015218:	080153ad 	.word	0x080153ad
 801521c:	08015381 	.word	0x08015381
 8015220:	08015321 	.word	0x08015321
 8015224:	08015363 	.word	0x08015363
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015228:	4b78      	ldr	r3, [pc, #480]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 801522a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801522e:	f003 0320 	and.w	r3, r3, #32
 8015232:	2b00      	cmp	r3, #0
 8015234:	d001      	beq.n	801523a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015236:	2301      	movs	r3, #1
 8015238:	e0e2      	b.n	8015400 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801523a:	2000      	movs	r0, #0
 801523c:	f7fe f95c 	bl	80134f8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015240:	4b73      	ldr	r3, [pc, #460]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 8015242:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	795b      	ldrb	r3, [r3, #5]
 801524a:	b25b      	sxtb	r3, r3
 801524c:	2200      	movs	r2, #0
 801524e:	4619      	mov	r1, r3
 8015250:	f002 fc00 	bl	8017a54 <RegionAlternateDr>
 8015254:	4603      	mov	r3, r0
 8015256:	461a      	mov	r2, r3
 8015258:	4b6d      	ldr	r3, [pc, #436]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 801525a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015264:	4b6a      	ldr	r3, [pc, #424]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 8015266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801526a:	2307      	movs	r3, #7
 801526c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801526e:	20ff      	movs	r0, #255	; 0xff
 8015270:	f7fd fec0 	bl	8012ff4 <SendReJoinReq>
 8015274:	4603      	mov	r3, r0
 8015276:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8015278:	7dfb      	ldrb	r3, [r7, #23]
 801527a:	2b00      	cmp	r3, #0
 801527c:	f000 8098 	beq.w	80153b0 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015280:	4b63      	ldr	r3, [pc, #396]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 8015282:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	795b      	ldrb	r3, [r3, #5]
 801528a:	b25b      	sxtb	r3, r3
 801528c:	2201      	movs	r2, #1
 801528e:	4619      	mov	r1, r3
 8015290:	f002 fbe0 	bl	8017a54 <RegionAlternateDr>
 8015294:	4603      	mov	r3, r0
 8015296:	461a      	mov	r2, r3
 8015298:	4b5d      	ldr	r3, [pc, #372]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 801529a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801529e:	e087      	b.n	80153b0 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152a0:	2300      	movs	r3, #0
 80152a2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152a4:	f107 030c 	add.w	r3, r7, #12
 80152a8:	2200      	movs	r2, #0
 80152aa:	4619      	mov	r1, r3
 80152ac:	2002      	movs	r0, #2
 80152ae:	f000 fcd1 	bl	8015c54 <LoRaMacCommandsAddCmd>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d07d      	beq.n	80153b4 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152b8:	2313      	movs	r3, #19
 80152ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80152bc:	e07a      	b.n	80153b4 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	889b      	ldrh	r3, [r3, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fe fc7a 	bl	8013bbc <SetTxContinuousWave>
 80152c8:	4603      	mov	r3, r0
 80152ca:	75fb      	strb	r3, [r7, #23]
            break;
 80152cc:	e079      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	8898      	ldrh	r0, [r3, #4]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	6899      	ldr	r1, [r3, #8]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	461a      	mov	r2, r3
 80152e0:	f7fe fca2 	bl	8013c28 <SetTxContinuousWave1>
 80152e4:	4603      	mov	r3, r0
 80152e6:	75fb      	strb	r3, [r7, #23]
            break;
 80152e8:	e06b      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152ee:	f107 0308 	add.w	r3, r7, #8
 80152f2:	4619      	mov	r1, r3
 80152f4:	200d      	movs	r0, #13
 80152f6:	f000 fd2d 	bl	8015d54 <LoRaMacCommandsGetCmd>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d102      	bne.n	8015306 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8015300:	2300      	movs	r3, #0
 8015302:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8015304:	e058      	b.n	80153b8 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015306:	f107 030c 	add.w	r3, r7, #12
 801530a:	2200      	movs	r2, #0
 801530c:	4619      	mov	r1, r3
 801530e:	200d      	movs	r0, #13
 8015310:	f000 fca0 	bl	8015c54 <LoRaMacCommandsAddCmd>
 8015314:	4603      	mov	r3, r0
 8015316:	2b00      	cmp	r3, #0
 8015318:	d04e      	beq.n	80153b8 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801531a:	2313      	movs	r3, #19
 801531c:	75fb      	strb	r3, [r7, #23]
            break;
 801531e:	e04b      	b.n	80153b8 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015320:	4b3b      	ldr	r3, [pc, #236]	; (8015410 <LoRaMacMlmeRequest+0x2a0>)
 8015322:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015326:	2b00      	cmp	r3, #0
 8015328:	d148      	bne.n	80153bc <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	791b      	ldrb	r3, [r3, #4]
 801532e:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	791b      	ldrb	r3, [r3, #4]
 8015334:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015338:	b2db      	uxtb	r3, r3
 801533a:	4618      	mov	r0, r3
 801533c:	f000 faef 	bl	801591e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015340:	7dbb      	ldrb	r3, [r7, #22]
 8015342:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015344:	2300      	movs	r3, #0
 8015346:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015348:	f107 030c 	add.w	r3, r7, #12
 801534c:	2201      	movs	r2, #1
 801534e:	4619      	mov	r1, r3
 8015350:	2010      	movs	r0, #16
 8015352:	f000 fc7f 	bl	8015c54 <LoRaMacCommandsAddCmd>
 8015356:	4603      	mov	r3, r0
 8015358:	2b00      	cmp	r3, #0
 801535a:	d02f      	beq.n	80153bc <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801535c:	2313      	movs	r3, #19
 801535e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015360:	e02c      	b.n	80153bc <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015362:	2300      	movs	r3, #0
 8015364:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015366:	f107 030c 	add.w	r3, r7, #12
 801536a:	2200      	movs	r2, #0
 801536c:	4619      	mov	r1, r3
 801536e:	2012      	movs	r0, #18
 8015370:	f000 fc70 	bl	8015c54 <LoRaMacCommandsAddCmd>
 8015374:	4603      	mov	r3, r0
 8015376:	2b00      	cmp	r3, #0
 8015378:	d022      	beq.n	80153c0 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801537a:	2313      	movs	r3, #19
 801537c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801537e:	e01f      	b.n	80153c0 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015380:	2301      	movs	r3, #1
 8015382:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015384:	f000 fa81 	bl	801588a <LoRaMacClassBIsAcquisitionInProgress>
 8015388:	4603      	mov	r3, r0
 801538a:	f083 0301 	eor.w	r3, r3, #1
 801538e:	b2db      	uxtb	r3, r3
 8015390:	2b00      	cmp	r3, #0
 8015392:	d008      	beq.n	80153a6 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015394:	2000      	movs	r0, #0
 8015396:	f000 fa5a 	bl	801584e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801539a:	2000      	movs	r0, #0
 801539c:	f000 fa7c 	bl	8015898 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80153a4:	e00d      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 80153a6:	2301      	movs	r3, #1
 80153a8:	75fb      	strb	r3, [r7, #23]
            break;
 80153aa:	e00a      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 80153ac:	bf00      	nop
 80153ae:	e008      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
            break;
 80153b0:	bf00      	nop
 80153b2:	e006      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
            break;
 80153b4:	bf00      	nop
 80153b6:	e004      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
            break;
 80153b8:	bf00      	nop
 80153ba:	e002      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
            break;
 80153bc:	bf00      	nop
 80153be:	e000      	b.n	80153c2 <LoRaMacMlmeRequest+0x252>
            break;
 80153c0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80153c2:	4b12      	ldr	r3, [pc, #72]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 80153c4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80153cc:	7dfb      	ldrb	r3, [r7, #23]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d010      	beq.n	80153f4 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153d2:	f000 ffe3 	bl	801639c <LoRaMacConfirmQueueGetCnt>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d110      	bne.n	80153fe <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80153dc:	4b0b      	ldr	r3, [pc, #44]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 80153de:	2200      	movs	r2, #0
 80153e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153e4:	4a09      	ldr	r2, [pc, #36]	; (801540c <LoRaMacMlmeRequest+0x29c>)
 80153e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80153ea:	f36f 0382 	bfc	r3, #2, #1
 80153ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80153f2:	e004      	b.n	80153fe <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153f4:	f107 0310 	add.w	r3, r7, #16
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 fe7b 	bl	80160f4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8015400:	4618      	mov	r0, r3
 8015402:	3718      	adds	r7, #24
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	20000d6c 	.word	0x20000d6c
 801540c:	20000924 	.word	0x20000924
 8015410:	20000e2c 	.word	0x20000e2c

08015414 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b08c      	sub	sp, #48	; 0x30
 8015418:	af02      	add	r7, sp, #8
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	460b      	mov	r3, r1
 801541e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015420:	2302      	movs	r3, #2
 8015422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015426:	2300      	movs	r3, #0
 8015428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 801542c:	2300      	movs	r3, #0
 801542e:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015430:	2300      	movs	r3, #0
 8015432:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015434:	2300      	movs	r3, #0
 8015436:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d101      	bne.n	8015442 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801543e:	2303      	movs	r3, #3
 8015440:	e0d4      	b.n	80155ec <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015442:	f7fc fb49 	bl	8011ad8 <LoRaMacIsBusy>
 8015446:	4603      	mov	r3, r0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d001      	beq.n	8015450 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801544c:	2301      	movs	r3, #1
 801544e:	e0cd      	b.n	80155ec <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015450:	2300      	movs	r3, #0
 8015452:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015454:	2214      	movs	r2, #20
 8015456:	2100      	movs	r1, #0
 8015458:	4866      	ldr	r0, [pc, #408]	; (80155f4 <LoRaMacMcpsRequest+0x1e0>)
 801545a:	f004 fd2d 	bl	8019eb8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801545e:	4b66      	ldr	r3, [pc, #408]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 8015460:	2201      	movs	r2, #1
 8015462:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015466:	4b64      	ldr	r3, [pc, #400]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 8015468:	2201      	movs	r2, #1
 801546a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	2b03      	cmp	r3, #3
 8015474:	d03d      	beq.n	80154f2 <LoRaMacMcpsRequest+0xde>
 8015476:	2b03      	cmp	r3, #3
 8015478:	dc4f      	bgt.n	801551a <LoRaMacMcpsRequest+0x106>
 801547a:	2b00      	cmp	r3, #0
 801547c:	d002      	beq.n	8015484 <LoRaMacMcpsRequest+0x70>
 801547e:	2b01      	cmp	r3, #1
 8015480:	d019      	beq.n	80154b6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015482:	e04a      	b.n	801551a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015484:	2301      	movs	r3, #1
 8015486:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015488:	4b5b      	ldr	r3, [pc, #364]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 801548a:	2201      	movs	r2, #1
 801548c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015490:	7b3b      	ldrb	r3, [r7, #12]
 8015492:	2202      	movs	r2, #2
 8015494:	f362 1347 	bfi	r3, r2, #5, #3
 8015498:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	791b      	ldrb	r3, [r3, #4]
 801549e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	689b      	ldr	r3, [r3, #8]
 80154a6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	899b      	ldrh	r3, [r3, #12]
 80154ac:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	7b9b      	ldrb	r3, [r3, #14]
 80154b2:	777b      	strb	r3, [r7, #29]
            break;
 80154b4:	e032      	b.n	801551c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154b6:	2301      	movs	r3, #1
 80154b8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	7bdb      	ldrb	r3, [r3, #15]
 80154be:	2b08      	cmp	r3, #8
 80154c0:	bf28      	it	cs
 80154c2:	2308      	movcs	r3, #8
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	4b4c      	ldr	r3, [pc, #304]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80154c8:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80154cc:	7b3b      	ldrb	r3, [r7, #12]
 80154ce:	2204      	movs	r2, #4
 80154d0:	f362 1347 	bfi	r3, r2, #5, #3
 80154d4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	791b      	ldrb	r3, [r3, #4]
 80154da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	689b      	ldr	r3, [r3, #8]
 80154e2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	899b      	ldrh	r3, [r3, #12]
 80154e8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	7b9b      	ldrb	r3, [r3, #14]
 80154ee:	777b      	strb	r3, [r7, #29]
            break;
 80154f0:	e014      	b.n	801551c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154f2:	2301      	movs	r3, #1
 80154f4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80154f6:	4b40      	ldr	r3, [pc, #256]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80154fe:	7b3b      	ldrb	r3, [r7, #12]
 8015500:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015504:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	891b      	ldrh	r3, [r3, #8]
 8015510:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	7a9b      	ldrb	r3, [r3, #10]
 8015516:	777b      	strb	r3, [r7, #29]
            break;
 8015518:	e000      	b.n	801551c <LoRaMacMcpsRequest+0x108>
            break;
 801551a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801551c:	2302      	movs	r3, #2
 801551e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015520:	4b36      	ldr	r3, [pc, #216]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 8015522:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015526:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015528:	4b34      	ldr	r3, [pc, #208]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 801552a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801552e:	f107 0214 	add.w	r2, r7, #20
 8015532:	4611      	mov	r1, r2
 8015534:	4618      	mov	r0, r3
 8015536:	f002 f96a 	bl	801780e <RegionGetPhyParam>
 801553a:	4603      	mov	r3, r0
 801553c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	b25b      	sxtb	r3, r3
 8015542:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015546:	4293      	cmp	r3, r2
 8015548:	bfb8      	it	lt
 801554a:	4613      	movlt	r3, r2
 801554c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801554e:	7f3b      	ldrb	r3, [r7, #28]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d044      	beq.n	80155de <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015554:	4b29      	ldr	r3, [pc, #164]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 8015556:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801555a:	f083 0301 	eor.w	r3, r3, #1
 801555e:	b2db      	uxtb	r3, r3
 8015560:	2b00      	cmp	r3, #0
 8015562:	d019      	beq.n	8015598 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015564:	7f7b      	ldrb	r3, [r7, #29]
 8015566:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015568:	4b24      	ldr	r3, [pc, #144]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 801556a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801556e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015570:	4b22      	ldr	r3, [pc, #136]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 8015572:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015576:	f107 0108 	add.w	r1, r7, #8
 801557a:	2205      	movs	r2, #5
 801557c:	4618      	mov	r0, r3
 801557e:	f002 f981 	bl	8017884 <RegionVerify>
 8015582:	4603      	mov	r3, r0
 8015584:	2b00      	cmp	r3, #0
 8015586:	d005      	beq.n	8015594 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015588:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801558c:	4b1b      	ldr	r3, [pc, #108]	; (80155fc <LoRaMacMcpsRequest+0x1e8>)
 801558e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015592:	e001      	b.n	8015598 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015594:	2303      	movs	r3, #3
 8015596:	e029      	b.n	80155ec <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015598:	8bfa      	ldrh	r2, [r7, #30]
 801559a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801559e:	f107 000c 	add.w	r0, r7, #12
 80155a2:	78fb      	ldrb	r3, [r7, #3]
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	4613      	mov	r3, r2
 80155a8:	6a3a      	ldr	r2, [r7, #32]
 80155aa:	f7fd fc45 	bl	8012e38 <Send>
 80155ae:	4603      	mov	r3, r0
 80155b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80155b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d10c      	bne.n	80155d6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	781a      	ldrb	r2, [r3, #0]
 80155c0:	4b0d      	ldr	r3, [pc, #52]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80155c2:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80155c6:	4a0c      	ldr	r2, [pc, #48]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80155c8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80155cc:	f043 0301 	orr.w	r3, r3, #1
 80155d0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80155d4:	e003      	b.n	80155de <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80155d6:	4b08      	ldr	r3, [pc, #32]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80155d8:	2200      	movs	r2, #0
 80155da:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80155de:	4b06      	ldr	r3, [pc, #24]	; (80155f8 <LoRaMacMcpsRequest+0x1e4>)
 80155e0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	611a      	str	r2, [r3, #16]

    return status;
 80155e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3728      	adds	r7, #40	; 0x28
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	20000d58 	.word	0x20000d58
 80155f8:	20000924 	.word	0x20000924
 80155fc:	20000e2c 	.word	0x20000e2c

08015600 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	4603      	mov	r3, r0
 8015608:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801560a:	79fb      	ldrb	r3, [r7, #7]
 801560c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801560e:	4b0d      	ldr	r3, [pc, #52]	; (8015644 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015610:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015614:	f107 010c 	add.w	r1, r7, #12
 8015618:	220f      	movs	r2, #15
 801561a:	4618      	mov	r0, r3
 801561c:	f002 f932 	bl	8017884 <RegionVerify>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d00a      	beq.n	801563c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015626:	4a07      	ldr	r2, [pc, #28]	; (8015644 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015628:	79fb      	ldrb	r3, [r7, #7]
 801562a:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801562e:	4a06      	ldr	r2, [pc, #24]	; (8015648 <LoRaMacTestSetDutyCycleOn+0x48>)
 8015630:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015634:	f043 0320 	orr.w	r3, r3, #32
 8015638:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 801563c:	bf00      	nop
 801563e:	3710      	adds	r7, #16
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	20000e2c 	.word	0x20000e2c
 8015648:	20000924 	.word	0x20000924

0801564c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015650:	f7fe ff6c 	bl	801452c <LoRaMacStop>
 8015654:	4603      	mov	r3, r0
 8015656:	2b00      	cmp	r3, #0
 8015658:	d115      	bne.n	8015686 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801565a:	480c      	ldr	r0, [pc, #48]	; (801568c <LoRaMacDeInitialization+0x40>)
 801565c:	f008 fd8c 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015660:	480b      	ldr	r0, [pc, #44]	; (8015690 <LoRaMacDeInitialization+0x44>)
 8015662:	f008 fd89 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015666:	480b      	ldr	r0, [pc, #44]	; (8015694 <LoRaMacDeInitialization+0x48>)
 8015668:	f008 fd86 	bl	801e178 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801566c:	480a      	ldr	r0, [pc, #40]	; (8015698 <LoRaMacDeInitialization+0x4c>)
 801566e:	f008 fd83 	bl	801e178 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015672:	f000 f95e 	bl	8015932 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015676:	2000      	movs	r0, #0
 8015678:	f7fd ff3e 	bl	80134f8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801567c:	4b07      	ldr	r3, [pc, #28]	; (801569c <LoRaMacDeInitialization+0x50>)
 801567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015680:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	e000      	b.n	8015688 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015686:	2301      	movs	r3, #1
    }
}
 8015688:	4618      	mov	r0, r3
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20000c8c 	.word	0x20000c8c
 8015690:	20000ca4 	.word	0x20000ca4
 8015694:	20000cbc 	.word	0x20000cbc
 8015698:	20000d18 	.word	0x20000d18
 801569c:	0801fa18 	.word	0x0801fa18

080156a0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b08c      	sub	sp, #48	; 0x30
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	60b9      	str	r1, [r7, #8]
 80156aa:	607a      	str	r2, [r7, #4]
 80156ac:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80156ae:	2300      	movs	r3, #0
 80156b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	7c1b      	ldrb	r3, [r3, #16]
 80156b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	7c5b      	ldrb	r3, [r3, #17]
 80156c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	689a      	ldr	r2, [r3, #8]
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	795b      	ldrb	r3, [r3, #5]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	f000 808b 	beq.w	80157ec <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80156d6:	2302      	movs	r3, #2
 80156d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	7c9b      	ldrb	r3, [r3, #18]
 80156e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	7cdb      	ldrb	r3, [r3, #19]
 80156e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156ec:	4611      	mov	r1, r2
 80156ee:	4618      	mov	r0, r3
 80156f0:	f002 f88d 	bl	801780e <RegionGetPhyParam>
 80156f4:	4603      	mov	r3, r0
 80156f6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80156fe:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8015702:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015706:	4293      	cmp	r3, r2
 8015708:	bfb8      	it	lt
 801570a:	4613      	movlt	r3, r2
 801570c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015710:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015714:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015718:	429a      	cmp	r2, r3
 801571a:	d106      	bne.n	801572a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	2200      	movs	r2, #0
 8015720:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015722:	2300      	movs	r3, #0
 8015724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015728:	e060      	b.n	80157ec <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	689b      	ldr	r3, [r3, #8]
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	8992      	ldrh	r2, [r2, #12]
 8015732:	4293      	cmp	r3, r2
 8015734:	d303      	bcc.n	801573e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015736:	2301      	movs	r3, #1
 8015738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801573c:	e002      	b.n	8015744 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801573e:	2300      	movs	r3, #0
 8015740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	689b      	ldr	r3, [r3, #8]
 8015748:	68fa      	ldr	r2, [r7, #12]
 801574a:	8992      	ldrh	r2, [r2, #12]
 801574c:	4611      	mov	r1, r2
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	89d2      	ldrh	r2, [r2, #14]
 8015752:	440a      	add	r2, r1
 8015754:	4293      	cmp	r3, r2
 8015756:	d349      	bcc.n	80157ec <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015758:	2308      	movs	r3, #8
 801575a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	7cdb      	ldrb	r3, [r3, #19]
 8015762:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015766:	4611      	mov	r1, r2
 8015768:	4618      	mov	r0, r3
 801576a:	f002 f850 	bl	801780e <RegionGetPhyParam>
 801576e:	4603      	mov	r3, r0
 8015770:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015772:	6a3b      	ldr	r3, [r7, #32]
 8015774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	68fa      	ldr	r2, [r7, #12]
 801577e:	89d2      	ldrh	r2, [r2, #14]
 8015780:	fbb3 f1f2 	udiv	r1, r3, r2
 8015784:	fb01 f202 	mul.w	r2, r1, r2
 8015788:	1a9b      	subs	r3, r3, r2
 801578a:	2b01      	cmp	r3, #1
 801578c:	d12e      	bne.n	80157ec <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801578e:	2322      	movs	r3, #34	; 0x22
 8015790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015794:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015798:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	7c9b      	ldrb	r3, [r3, #18]
 80157a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	7cdb      	ldrb	r3, [r3, #19]
 80157a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157ac:	4611      	mov	r1, r2
 80157ae:	4618      	mov	r0, r3
 80157b0:	f002 f82d 	bl	801780e <RegionGetPhyParam>
 80157b4:	4603      	mov	r3, r0
 80157b6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80157b8:	6a3b      	ldr	r3, [r7, #32]
 80157ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80157be:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80157c2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d110      	bne.n	80157ec <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80157ca:	2300      	movs	r3, #0
 80157cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	791b      	ldrb	r3, [r3, #4]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d009      	beq.n	80157ec <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80157d8:	2302      	movs	r3, #2
 80157da:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	7cdb      	ldrb	r3, [r3, #19]
 80157e0:	f107 0214 	add.w	r2, r7, #20
 80157e4:	4611      	mov	r1, r2
 80157e6:	4618      	mov	r0, r3
 80157e8:	f002 f83a 	bl	8017860 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80157f2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157fa:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80157fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015800:	4618      	mov	r0, r3
 8015802:	3730      	adds	r7, #48	; 0x30
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
 8015814:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	789b      	ldrb	r3, [r3, #2]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d107      	bne.n	801582e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	68b9      	ldr	r1, [r7, #8]
 8015824:	68f8      	ldr	r0, [r7, #12]
 8015826:	f7ff ff3b 	bl	80156a0 <CalcNextV10X>
 801582a:	4603      	mov	r3, r0
 801582c:	e000      	b.n	8015830 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801582e:	2300      	movs	r3, #0
}
 8015830:	4618      	mov	r0, r3
 8015832:	3710      	adds	r7, #16
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015844:	bf00      	nop
 8015846:	3714      	adds	r7, #20
 8015848:	46bd      	mov	sp, r7
 801584a:	bc80      	pop	{r7}
 801584c:	4770      	bx	lr

0801584e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801584e:	b480      	push	{r7}
 8015850:	b083      	sub	sp, #12
 8015852:	af00      	add	r7, sp, #0
 8015854:	4603      	mov	r3, r0
 8015856:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015858:	bf00      	nop
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	bc80      	pop	{r7}
 8015860:	4770      	bx	lr

08015862 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015862:	b480      	push	{r7}
 8015864:	b083      	sub	sp, #12
 8015866:	af00      	add	r7, sp, #0
 8015868:	4603      	mov	r3, r0
 801586a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801586c:	bf00      	nop
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	bc80      	pop	{r7}
 8015874:	4770      	bx	lr

08015876 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015876:	b480      	push	{r7}
 8015878:	b083      	sub	sp, #12
 801587a:	af00      	add	r7, sp, #0
 801587c:	4603      	mov	r3, r0
 801587e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	bc80      	pop	{r7}
 8015888:	4770      	bx	lr

0801588a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801588a:	b480      	push	{r7}
 801588c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801588e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015890:	4618      	mov	r0, r3
 8015892:	46bd      	mov	sp, r7
 8015894:	bc80      	pop	{r7}
 8015896:	4770      	bx	lr

08015898 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015898:	b480      	push	{r7}
 801589a:	b083      	sub	sp, #12
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158a0:	bf00      	nop
 80158a2:	370c      	adds	r7, #12
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bc80      	pop	{r7}
 80158a8:	4770      	bx	lr

080158aa <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80158aa:	b480      	push	{r7}
 80158ac:	b083      	sub	sp, #12
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158b2:	bf00      	nop
 80158b4:	370c      	adds	r7, #12
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bc80      	pop	{r7}
 80158ba:	4770      	bx	lr

080158bc <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bc80      	pop	{r7}
 80158cc:	4770      	bx	lr

080158ce <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80158ce:	b480      	push	{r7}
 80158d0:	b083      	sub	sp, #12
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
 80158d6:	460b      	mov	r3, r1
 80158d8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80158da:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158dc:	4618      	mov	r0, r3
 80158de:	370c      	adds	r7, #12
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bc80      	pop	{r7}
 80158e4:	4770      	bx	lr

080158e6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158e6:	b480      	push	{r7}
 80158e8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158ea:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bc80      	pop	{r7}
 80158f2:	4770      	bx	lr

080158f4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158f4:	b480      	push	{r7}
 80158f6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158f8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bc80      	pop	{r7}
 8015900:	4770      	bx	lr

08015902 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015902:	b480      	push	{r7}
 8015904:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015906:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015908:	4618      	mov	r0, r3
 801590a:	46bd      	mov	sp, r7
 801590c:	bc80      	pop	{r7}
 801590e:	4770      	bx	lr

08015910 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015910:	b480      	push	{r7}
 8015912:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015914:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015916:	4618      	mov	r0, r3
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr

0801591e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801591e:	b480      	push	{r7}
 8015920:	b083      	sub	sp, #12
 8015922:	af00      	add	r7, sp, #0
 8015924:	4603      	mov	r3, r0
 8015926:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015928:	bf00      	nop
 801592a:	370c      	adds	r7, #12
 801592c:	46bd      	mov	sp, r7
 801592e:	bc80      	pop	{r7}
 8015930:	4770      	bx	lr

08015932 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015932:	b480      	push	{r7}
 8015934:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015936:	bf00      	nop
 8015938:	46bd      	mov	sp, r7
 801593a:	bc80      	pop	{r7}
 801593c:	4770      	bx	lr

0801593e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801593e:	b480      	push	{r7}
 8015940:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015942:	bf00      	nop
 8015944:	46bd      	mov	sp, r7
 8015946:	bc80      	pop	{r7}
 8015948:	4770      	bx	lr

0801594a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801594a:	b480      	push	{r7}
 801594c:	b083      	sub	sp, #12
 801594e:	af00      	add	r7, sp, #0
 8015950:	4603      	mov	r3, r0
 8015952:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015954:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015956:	4618      	mov	r0, r3
 8015958:	370c      	adds	r7, #12
 801595a:	46bd      	mov	sp, r7
 801595c:	bc80      	pop	{r7}
 801595e:	4770      	bx	lr

08015960 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015968:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801596a:	4618      	mov	r0, r3
 801596c:	370c      	adds	r7, #12
 801596e:	46bd      	mov	sp, r7
 8015970:	bc80      	pop	{r7}
 8015972:	4770      	bx	lr

08015974 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015974:	b480      	push	{r7}
 8015976:	b083      	sub	sp, #12
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801597c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801597e:	4618      	mov	r0, r3
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	bc80      	pop	{r7}
 8015986:	4770      	bx	lr

08015988 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015988:	b480      	push	{r7}
 801598a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801598c:	bf00      	nop
 801598e:	46bd      	mov	sp, r7
 8015990:	bc80      	pop	{r7}
 8015992:	4770      	bx	lr

08015994 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	6039      	str	r1, [r7, #0]
 801599e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80159a0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bc80      	pop	{r7}
 80159aa:	4770      	bx	lr

080159ac <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80159ac:	b480      	push	{r7}
 80159ae:	b083      	sub	sp, #12
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	4603      	mov	r3, r0
 80159b4:	603a      	str	r2, [r7, #0]
 80159b6:	80fb      	strh	r3, [r7, #6]
 80159b8:	460b      	mov	r3, r1
 80159ba:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159bc:	bf00      	nop
 80159be:	370c      	adds	r7, #12
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bc80      	pop	{r7}
 80159c4:	4770      	bx	lr

080159c6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80159c6:	b480      	push	{r7}
 80159c8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ca:	bf00      	nop
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bc80      	pop	{r7}
 80159d0:	4770      	bx	lr

080159d2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80159d2:	b480      	push	{r7}
 80159d4:	b083      	sub	sp, #12
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80159da:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159dc:	4618      	mov	r0, r3
 80159de:	370c      	adds	r7, #12
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bc80      	pop	{r7}
 80159e4:	4770      	bx	lr

080159e6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80159e6:	b480      	push	{r7}
 80159e8:	b083      	sub	sp, #12
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80159ee:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bc80      	pop	{r7}
 80159f8:	4770      	bx	lr

080159fa <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80159fa:	b480      	push	{r7}
 80159fc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159fe:	bf00      	nop
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bc80      	pop	{r7}
 8015a04:	4770      	bx	lr

08015a06 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015a06:	b480      	push	{r7}
 8015a08:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a0a:	bf00      	nop
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bc80      	pop	{r7}
 8015a10:	4770      	bx	lr

08015a12 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015a12:	b480      	push	{r7}
 8015a14:	b085      	sub	sp, #20
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a1e:	2300      	movs	r3, #0
 8015a20:	81fb      	strh	r3, [r7, #14]
 8015a22:	e00a      	b.n	8015a3a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015a24:	89fb      	ldrh	r3, [r7, #14]
 8015a26:	68ba      	ldr	r2, [r7, #8]
 8015a28:	4413      	add	r3, r2
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d001      	beq.n	8015a34 <IsSlotFree+0x22>
        {
            return false;
 8015a30:	2300      	movs	r3, #0
 8015a32:	e006      	b.n	8015a42 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a34:	89fb      	ldrh	r3, [r7, #14]
 8015a36:	3301      	adds	r3, #1
 8015a38:	81fb      	strh	r3, [r7, #14]
 8015a3a:	89fb      	ldrh	r3, [r7, #14]
 8015a3c:	2b0f      	cmp	r3, #15
 8015a3e:	d9f1      	bls.n	8015a24 <IsSlotFree+0x12>
        }
    }
    return true;
 8015a40:	2301      	movs	r3, #1
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3714      	adds	r7, #20
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bc80      	pop	{r7}
 8015a4a:	4770      	bx	lr

08015a4c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a56:	e007      	b.n	8015a68 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a58:	79fb      	ldrb	r3, [r7, #7]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a5e:	79fb      	ldrb	r3, [r7, #7]
 8015a60:	2b0f      	cmp	r3, #15
 8015a62:	d101      	bne.n	8015a68 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a64:	2300      	movs	r3, #0
 8015a66:	e012      	b.n	8015a8e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a68:	79fb      	ldrb	r3, [r7, #7]
 8015a6a:	011b      	lsls	r3, r3, #4
 8015a6c:	3308      	adds	r3, #8
 8015a6e:	4a0a      	ldr	r2, [pc, #40]	; (8015a98 <MallocNewMacCommandSlot+0x4c>)
 8015a70:	4413      	add	r3, r2
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff ffcd 	bl	8015a12 <IsSlotFree>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	f083 0301 	eor.w	r3, r3, #1
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d1e9      	bne.n	8015a58 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015a84:	79fb      	ldrb	r3, [r7, #7]
 8015a86:	011b      	lsls	r3, r3, #4
 8015a88:	3308      	adds	r3, #8
 8015a8a:	4a03      	ldr	r2, [pc, #12]	; (8015a98 <MallocNewMacCommandSlot+0x4c>)
 8015a8c:	4413      	add	r3, r2
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	200015ac 	.word	0x200015ac

08015a9c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d101      	bne.n	8015aae <FreeMacCommandSlot+0x12>
    {
        return false;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	e005      	b.n	8015aba <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015aae:	2210      	movs	r2, #16
 8015ab0:	2100      	movs	r1, #0
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f004 fa00 	bl	8019eb8 <memset1>

    return true;
 8015ab8:	2301      	movs	r3, #1
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	3708      	adds	r7, #8
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}

08015ac2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015ac2:	b480      	push	{r7}
 8015ac4:	b083      	sub	sp, #12
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d101      	bne.n	8015ad4 <LinkedListInit+0x12>
    {
        return false;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	e006      	b.n	8015ae2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	605a      	str	r2, [r3, #4]

    return true;
 8015ae0:	2301      	movs	r3, #1
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	370c      	adds	r7, #12
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bc80      	pop	{r7}
 8015aea:	4770      	bx	lr

08015aec <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015aec:	b480      	push	{r7}
 8015aee:	b083      	sub	sp, #12
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d002      	beq.n	8015b02 <LinkedListAdd+0x16>
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d101      	bne.n	8015b06 <LinkedListAdd+0x1a>
    {
        return false;
 8015b02:	2300      	movs	r3, #0
 8015b04:	e015      	b.n	8015b32 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d102      	bne.n	8015b14 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	683a      	ldr	r2, [r7, #0]
 8015b12:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d003      	beq.n	8015b24 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	683a      	ldr	r2, [r7, #0]
 8015b22:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	2200      	movs	r2, #0
 8015b28:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	605a      	str	r2, [r3, #4]

    return true;
 8015b30:	2301      	movs	r3, #1
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	370c      	adds	r7, #12
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bc80      	pop	{r7}
 8015b3a:	4770      	bx	lr

08015b3c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b085      	sub	sp, #20
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d002      	beq.n	8015b52 <LinkedListGetPrevious+0x16>
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d101      	bne.n	8015b56 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b52:	2300      	movs	r3, #0
 8015b54:	e016      	b.n	8015b84 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b5c:	683a      	ldr	r2, [r7, #0]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d00c      	beq.n	8015b7e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b64:	e002      	b.n	8015b6c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d007      	beq.n	8015b82 <LinkedListGetPrevious+0x46>
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	683a      	ldr	r2, [r7, #0]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d1f4      	bne.n	8015b66 <LinkedListGetPrevious+0x2a>
 8015b7c:	e001      	b.n	8015b82 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015b82:	68fb      	ldr	r3, [r7, #12]
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3714      	adds	r7, #20
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bc80      	pop	{r7}
 8015b8c:	4770      	bx	lr

08015b8e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b084      	sub	sp, #16
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
 8015b96:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <LinkedListRemove+0x16>
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d101      	bne.n	8015ba8 <LinkedListRemove+0x1a>
    {
        return false;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	e020      	b.n	8015bea <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015ba8:	6839      	ldr	r1, [r7, #0]
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f7ff ffc6 	bl	8015b3c <LinkedListGetPrevious>
 8015bb0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	683a      	ldr	r2, [r7, #0]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d103      	bne.n	8015bc4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d102      	bne.n	8015bd4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	68fa      	ldr	r2, [r7, #12]
 8015bd2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d003      	beq.n	8015be2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	2200      	movs	r2, #0
 8015be6:	601a      	str	r2, [r3, #0]

    return true;
 8015be8:	2301      	movs	r3, #1
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015bf2:	b480      	push	{r7}
 8015bf4:	b083      	sub	sp, #12
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015bfc:	79fb      	ldrb	r3, [r7, #7]
 8015bfe:	2b05      	cmp	r3, #5
 8015c00:	d004      	beq.n	8015c0c <IsSticky+0x1a>
 8015c02:	2b05      	cmp	r3, #5
 8015c04:	db04      	blt.n	8015c10 <IsSticky+0x1e>
 8015c06:	3b08      	subs	r3, #8
 8015c08:	2b02      	cmp	r3, #2
 8015c0a:	d801      	bhi.n	8015c10 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e000      	b.n	8015c12 <IsSticky+0x20>
        default:
            return false;
 8015c10:	2300      	movs	r3, #0
    }
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	370c      	adds	r7, #12
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bc80      	pop	{r7}
 8015c1a:	4770      	bx	lr

08015c1c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	4603      	mov	r3, r0
 8015c24:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015c26:	2300      	movs	r3, #0
    }
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	370c      	adds	r7, #12
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bc80      	pop	{r7}
 8015c30:	4770      	bx	lr
	...

08015c34 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c38:	22fc      	movs	r2, #252	; 0xfc
 8015c3a:	2100      	movs	r1, #0
 8015c3c:	4804      	ldr	r0, [pc, #16]	; (8015c50 <LoRaMacCommandsInit+0x1c>)
 8015c3e:	f004 f93b 	bl	8019eb8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c42:	4803      	ldr	r0, [pc, #12]	; (8015c50 <LoRaMacCommandsInit+0x1c>)
 8015c44:	f7ff ff3d 	bl	8015ac2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c48:	2300      	movs	r3, #0
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	200015ac 	.word	0x200015ac

08015c54 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b086      	sub	sp, #24
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	60b9      	str	r1, [r7, #8]
 8015c5e:	607a      	str	r2, [r7, #4]
 8015c60:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d101      	bne.n	8015c6c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	e03b      	b.n	8015ce4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c6c:	f7ff feee 	bl	8015a4c <MallocNewMacCommandSlot>
 8015c70:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d101      	bne.n	8015c7c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c78:	2302      	movs	r3, #2
 8015c7a:	e033      	b.n	8015ce4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c7c:	6979      	ldr	r1, [r7, #20]
 8015c7e:	481b      	ldr	r0, [pc, #108]	; (8015cec <LoRaMacCommandsAddCmd+0x98>)
 8015c80:	f7ff ff34 	bl	8015aec <LinkedListAdd>
 8015c84:	4603      	mov	r3, r0
 8015c86:	f083 0301 	eor.w	r3, r3, #1
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d001      	beq.n	8015c94 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c90:	2305      	movs	r3, #5
 8015c92:	e027      	b.n	8015ce4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	7bfa      	ldrb	r2, [r7, #15]
 8015c98:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	3305      	adds	r3, #5
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	b292      	uxth	r2, r2
 8015ca8:	68b9      	ldr	r1, [r7, #8]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f004 f8c9 	bl	8019e42 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015cb0:	7bfb      	ldrb	r3, [r7, #15]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7ff ff9d 	bl	8015bf2 <IsSticky>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	461a      	mov	r2, r3
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ff ffaa 	bl	8015c1c <IsConfirmationRequired>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	461a      	mov	r2, r3
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015cd0:	4b06      	ldr	r3, [pc, #24]	; (8015cec <LoRaMacCommandsAddCmd+0x98>)
 8015cd2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	4413      	add	r3, r2
 8015cda:	3301      	adds	r3, #1
 8015cdc:	4a03      	ldr	r2, [pc, #12]	; (8015cec <LoRaMacCommandsAddCmd+0x98>)
 8015cde:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3718      	adds	r7, #24
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	200015ac 	.word	0x200015ac

08015cf0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d101      	bne.n	8015d02 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cfe:	2301      	movs	r3, #1
 8015d00:	e021      	b.n	8015d46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	4812      	ldr	r0, [pc, #72]	; (8015d50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d06:	f7ff ff42 	bl	8015b8e <LinkedListRemove>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	f083 0301 	eor.w	r3, r3, #1
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d001      	beq.n	8015d1a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d16:	2303      	movs	r3, #3
 8015d18:	e015      	b.n	8015d46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015d1a:	4b0d      	ldr	r3, [pc, #52]	; (8015d50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d1c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	1ad3      	subs	r3, r2, r3
 8015d26:	3b01      	subs	r3, #1
 8015d28:	4a09      	ldr	r2, [pc, #36]	; (8015d50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d2a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f7ff feb4 	bl	8015a9c <FreeMacCommandSlot>
 8015d34:	4603      	mov	r3, r0
 8015d36:	f083 0301 	eor.w	r3, r3, #1
 8015d3a:	b2db      	uxtb	r3, r3
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d40:	2305      	movs	r3, #5
 8015d42:	e000      	b.n	8015d46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d44:	2300      	movs	r3, #0
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3708      	adds	r7, #8
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	200015ac 	.word	0x200015ac

08015d54 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015d54:	b480      	push	{r7}
 8015d56:	b085      	sub	sp, #20
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	6039      	str	r1, [r7, #0]
 8015d5e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d60:	4b0e      	ldr	r3, [pc, #56]	; (8015d9c <LoRaMacCommandsGetCmd+0x48>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d66:	e002      	b.n	8015d6e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d004      	beq.n	8015d7e <LoRaMacCommandsGetCmd+0x2a>
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	791b      	ldrb	r3, [r3, #4]
 8015d78:	79fa      	ldrb	r2, [r7, #7]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d1f4      	bne.n	8015d68 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	68fa      	ldr	r2, [r7, #12]
 8015d82:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d101      	bne.n	8015d8e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d8a:	2303      	movs	r3, #3
 8015d8c:	e000      	b.n	8015d90 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015d8e:	2300      	movs	r3, #0
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3714      	adds	r7, #20
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bc80      	pop	{r7}
 8015d98:	4770      	bx	lr
 8015d9a:	bf00      	nop
 8015d9c:	200015ac 	.word	0x200015ac

08015da0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015da6:	4b0f      	ldr	r3, [pc, #60]	; (8015de4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015dac:	e012      	b.n	8015dd4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	7b1b      	ldrb	r3, [r3, #12]
 8015db2:	f083 0301 	eor.w	r3, r3, #1
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d008      	beq.n	8015dce <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f7ff ff94 	bl	8015cf0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	607b      	str	r3, [r7, #4]
 8015dcc:	e002      	b.n	8015dd4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d1e9      	bne.n	8015dae <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3708      	adds	r7, #8
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	200015ac 	.word	0x200015ac

08015de8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015dee:	4b13      	ldr	r3, [pc, #76]	; (8015e3c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015df4:	e01a      	b.n	8015e2c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	791b      	ldrb	r3, [r3, #4]
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7ff fef6 	bl	8015bf2 <IsSticky>
 8015e06:	4603      	mov	r3, r0
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00d      	beq.n	8015e28 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	791b      	ldrb	r3, [r3, #4]
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7ff ff03 	bl	8015c1c <IsConfirmationRequired>
 8015e16:	4603      	mov	r3, r0
 8015e18:	f083 0301 	eor.w	r3, r3, #1
 8015e1c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d002      	beq.n	8015e28 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f7ff ff64 	bl	8015cf0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d1e1      	bne.n	8015df6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	200015ac 	.word	0x200015ac

08015e40 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d101      	bne.n	8015e52 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	e005      	b.n	8015e5e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e52:	4b05      	ldr	r3, [pc, #20]	; (8015e68 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e54:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e5c:	2300      	movs	r3, #0
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	370c      	adds	r7, #12
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bc80      	pop	{r7}
 8015e66:	4770      	bx	lr
 8015e68:	200015ac 	.word	0x200015ac

08015e6c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b088      	sub	sp, #32
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e78:	4b25      	ldr	r3, [pc, #148]	; (8015f10 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d002      	beq.n	8015e8e <LoRaMacCommandsSerializeCmds+0x22>
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d126      	bne.n	8015edc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e039      	b.n	8015f06 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e92:	7efb      	ldrb	r3, [r7, #27]
 8015e94:	68fa      	ldr	r2, [r7, #12]
 8015e96:	1ad2      	subs	r2, r2, r3
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	689b      	ldr	r3, [r3, #8]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d320      	bcc.n	8015ee4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015ea2:	7efb      	ldrb	r3, [r7, #27]
 8015ea4:	1c5a      	adds	r2, r3, #1
 8015ea6:	76fa      	strb	r2, [r7, #27]
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	4413      	add	r3, r2
 8015eae:	69fa      	ldr	r2, [r7, #28]
 8015eb0:	7912      	ldrb	r2, [r2, #4]
 8015eb2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015eb4:	7efb      	ldrb	r3, [r7, #27]
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	18d0      	adds	r0, r2, r3
 8015eba:	69fb      	ldr	r3, [r7, #28]
 8015ebc:	1d59      	adds	r1, r3, #5
 8015ebe:	69fb      	ldr	r3, [r7, #28]
 8015ec0:	689b      	ldr	r3, [r3, #8]
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	f003 ffbc 	bl	8019e42 <memcpy1>
            itr += curElement->PayloadSize;
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	b2da      	uxtb	r2, r3
 8015ed0:	7efb      	ldrb	r3, [r7, #27]
 8015ed2:	4413      	add	r3, r2
 8015ed4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015ed6:	69fb      	ldr	r3, [r7, #28]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015edc:	69fb      	ldr	r3, [r7, #28]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d1d7      	bne.n	8015e92 <LoRaMacCommandsSerializeCmds+0x26>
 8015ee2:	e009      	b.n	8015ef8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015ee4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015ee6:	e007      	b.n	8015ef8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015eee:	69f8      	ldr	r0, [r7, #28]
 8015ef0:	f7ff fefe 	bl	8015cf0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d1f4      	bne.n	8015ee8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015efe:	68b8      	ldr	r0, [r7, #8]
 8015f00:	f7ff ff9e 	bl	8015e40 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015f04:	2300      	movs	r3, #0
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3720      	adds	r7, #32
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	200015ac 	.word	0x200015ac

08015f14 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015f14:	b480      	push	{r7}
 8015f16:	b085      	sub	sp, #20
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015f22:	79fb      	ldrb	r3, [r7, #7]
 8015f24:	3b02      	subs	r3, #2
 8015f26:	2b11      	cmp	r3, #17
 8015f28:	d850      	bhi.n	8015fcc <LoRaMacCommandsGetCmdSize+0xb8>
 8015f2a:	a201      	add	r2, pc, #4	; (adr r2, 8015f30 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f30:	08015f79 	.word	0x08015f79
 8015f34:	08015f7f 	.word	0x08015f7f
 8015f38:	08015f85 	.word	0x08015f85
 8015f3c:	08015f8b 	.word	0x08015f8b
 8015f40:	08015f91 	.word	0x08015f91
 8015f44:	08015f97 	.word	0x08015f97
 8015f48:	08015f9d 	.word	0x08015f9d
 8015f4c:	08015fa3 	.word	0x08015fa3
 8015f50:	08015fa9 	.word	0x08015fa9
 8015f54:	08015fcd 	.word	0x08015fcd
 8015f58:	08015fcd 	.word	0x08015fcd
 8015f5c:	08015faf 	.word	0x08015faf
 8015f60:	08015fcd 	.word	0x08015fcd
 8015f64:	08015fcd 	.word	0x08015fcd
 8015f68:	08015fb5 	.word	0x08015fb5
 8015f6c:	08015fbb 	.word	0x08015fbb
 8015f70:	08015fc1 	.word	0x08015fc1
 8015f74:	08015fc7 	.word	0x08015fc7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f78:	2303      	movs	r3, #3
 8015f7a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7c:	e027      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f7e:	2305      	movs	r3, #5
 8015f80:	73fb      	strb	r3, [r7, #15]
            break;
 8015f82:	e024      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f84:	2302      	movs	r3, #2
 8015f86:	73fb      	strb	r3, [r7, #15]
            break;
 8015f88:	e021      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f8a:	2305      	movs	r3, #5
 8015f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f8e:	e01e      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f90:	2301      	movs	r3, #1
 8015f92:	73fb      	strb	r3, [r7, #15]
            break;
 8015f94:	e01b      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f96:	2306      	movs	r3, #6
 8015f98:	73fb      	strb	r3, [r7, #15]
            break;
 8015f9a:	e018      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8015fa0:	e015      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015fa2:	2302      	movs	r3, #2
 8015fa4:	73fb      	strb	r3, [r7, #15]
            break;
 8015fa6:	e012      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015fa8:	2305      	movs	r3, #5
 8015faa:	73fb      	strb	r3, [r7, #15]
            break;
 8015fac:	e00f      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015fae:	2306      	movs	r3, #6
 8015fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb2:	e00c      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb8:	e009      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015fba:	2305      	movs	r3, #5
 8015fbc:	73fb      	strb	r3, [r7, #15]
            break;
 8015fbe:	e006      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015fc0:	2304      	movs	r3, #4
 8015fc2:	73fb      	strb	r3, [r7, #15]
            break;
 8015fc4:	e003      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015fc6:	2304      	movs	r3, #4
 8015fc8:	73fb      	strb	r3, [r7, #15]
            break;
 8015fca:	e000      	b.n	8015fce <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015fcc:	bf00      	nop
        }
    }
    return cidSize;
 8015fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3714      	adds	r7, #20
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bc80      	pop	{r7}
 8015fd8:	4770      	bx	lr
 8015fda:	bf00      	nop

08015fdc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	4a07      	ldr	r2, [pc, #28]	; (8016004 <IncreaseBufferPointer+0x28>)
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	d102      	bne.n	8015ff2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fec:	4b06      	ldr	r3, [pc, #24]	; (8016008 <IncreaseBufferPointer+0x2c>)
 8015fee:	607b      	str	r3, [r7, #4]
 8015ff0:	e002      	b.n	8015ff8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	3304      	adds	r3, #4
 8015ff6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015ff8:	687b      	ldr	r3, [r7, #4]
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	370c      	adds	r7, #12
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bc80      	pop	{r7}
 8016002:	4770      	bx	lr
 8016004:	200016c4 	.word	0x200016c4
 8016008:	200016b4 	.word	0x200016b4

0801600c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	4603      	mov	r3, r0
 8016014:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8016016:	79fb      	ldrb	r3, [r7, #7]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d101      	bne.n	8016020 <IsListEmpty+0x14>
    {
        return true;
 801601c:	2301      	movs	r3, #1
 801601e:	e000      	b.n	8016022 <IsListEmpty+0x16>
    }
    return false;
 8016020:	2300      	movs	r3, #0
}
 8016022:	4618      	mov	r0, r3
 8016024:	370c      	adds	r7, #12
 8016026:	46bd      	mov	sp, r7
 8016028:	bc80      	pop	{r7}
 801602a:	4770      	bx	lr

0801602c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	4603      	mov	r3, r0
 8016034:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016036:	79fb      	ldrb	r3, [r7, #7]
 8016038:	2b04      	cmp	r3, #4
 801603a:	d901      	bls.n	8016040 <IsListFull+0x14>
    {
        return true;
 801603c:	2301      	movs	r3, #1
 801603e:	e000      	b.n	8016042 <IsListFull+0x16>
    }
    return false;
 8016040:	2300      	movs	r3, #0
}
 8016042:	4618      	mov	r0, r3
 8016044:	370c      	adds	r7, #12
 8016046:	46bd      	mov	sp, r7
 8016048:	bc80      	pop	{r7}
 801604a:	4770      	bx	lr

0801604c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	4603      	mov	r3, r0
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
 8016058:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801605e:	4b13      	ldr	r3, [pc, #76]	; (80160ac <GetElement+0x60>)
 8016060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff ffd1 	bl	801600c <IsListEmpty>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d001      	beq.n	8016074 <GetElement+0x28>
    {
        return NULL;
 8016070:	2300      	movs	r3, #0
 8016072:	e017      	b.n	80160a4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016074:	2300      	movs	r3, #0
 8016076:	74fb      	strb	r3, [r7, #19]
 8016078:	e00d      	b.n	8016096 <GetElement+0x4a>
    {
        if( element->Request == request )
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	7bfa      	ldrb	r2, [r7, #15]
 8016080:	429a      	cmp	r2, r3
 8016082:	d101      	bne.n	8016088 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	e00d      	b.n	80160a4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016088:	6978      	ldr	r0, [r7, #20]
 801608a:	f7ff ffa7 	bl	8015fdc <IncreaseBufferPointer>
 801608e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016090:	7cfb      	ldrb	r3, [r7, #19]
 8016092:	3301      	adds	r3, #1
 8016094:	74fb      	strb	r3, [r7, #19]
 8016096:	4b05      	ldr	r3, [pc, #20]	; (80160ac <GetElement+0x60>)
 8016098:	f893 3020 	ldrb.w	r3, [r3, #32]
 801609c:	7cfa      	ldrb	r2, [r7, #19]
 801609e:	429a      	cmp	r2, r3
 80160a0:	d3eb      	bcc.n	801607a <GetElement+0x2e>
    }

    return NULL;
 80160a2:	2300      	movs	r3, #0
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	200016a8 	.word	0x200016a8

080160b0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80160b8:	4a0c      	ldr	r2, [pc, #48]	; (80160ec <LoRaMacConfirmQueueInit+0x3c>)
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80160be:	4b0b      	ldr	r3, [pc, #44]	; (80160ec <LoRaMacConfirmQueueInit+0x3c>)
 80160c0:	2200      	movs	r2, #0
 80160c2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160c6:	4b09      	ldr	r3, [pc, #36]	; (80160ec <LoRaMacConfirmQueueInit+0x3c>)
 80160c8:	4a09      	ldr	r2, [pc, #36]	; (80160f0 <LoRaMacConfirmQueueInit+0x40>)
 80160ca:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160cc:	4b07      	ldr	r3, [pc, #28]	; (80160ec <LoRaMacConfirmQueueInit+0x3c>)
 80160ce:	4a08      	ldr	r2, [pc, #32]	; (80160f0 <LoRaMacConfirmQueueInit+0x40>)
 80160d0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80160d2:	2214      	movs	r2, #20
 80160d4:	21ff      	movs	r1, #255	; 0xff
 80160d6:	4806      	ldr	r0, [pc, #24]	; (80160f0 <LoRaMacConfirmQueueInit+0x40>)
 80160d8:	f003 feee 	bl	8019eb8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80160dc:	4b03      	ldr	r3, [pc, #12]	; (80160ec <LoRaMacConfirmQueueInit+0x3c>)
 80160de:	2201      	movs	r2, #1
 80160e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160e4:	bf00      	nop
 80160e6:	3708      	adds	r7, #8
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	200016a8 	.word	0x200016a8
 80160f0:	200016b4 	.word	0x200016b4

080160f4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b082      	sub	sp, #8
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160fc:	4b19      	ldr	r3, [pc, #100]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 80160fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016102:	4618      	mov	r0, r3
 8016104:	f7ff ff92 	bl	801602c <IsListFull>
 8016108:	4603      	mov	r3, r0
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801610e:	2300      	movs	r3, #0
 8016110:	e023      	b.n	801615a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016112:	4b14      	ldr	r3, [pc, #80]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 8016114:	689b      	ldr	r3, [r3, #8]
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	7812      	ldrb	r2, [r2, #0]
 801611a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801611c:	4b11      	ldr	r3, [pc, #68]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 801611e:	689b      	ldr	r3, [r3, #8]
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	7852      	ldrb	r2, [r2, #1]
 8016124:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8016126:	4b0f      	ldr	r3, [pc, #60]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 8016128:	689b      	ldr	r3, [r3, #8]
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	78d2      	ldrb	r2, [r2, #3]
 801612e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016130:	4b0c      	ldr	r3, [pc, #48]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	2200      	movs	r2, #0
 8016136:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016138:	4b0a      	ldr	r3, [pc, #40]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 801613a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801613e:	3301      	adds	r3, #1
 8016140:	b2da      	uxtb	r2, r3
 8016142:	4b08      	ldr	r3, [pc, #32]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 8016144:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016148:	4b06      	ldr	r3, [pc, #24]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 801614a:	689b      	ldr	r3, [r3, #8]
 801614c:	4618      	mov	r0, r3
 801614e:	f7ff ff45 	bl	8015fdc <IncreaseBufferPointer>
 8016152:	4603      	mov	r3, r0
 8016154:	4a03      	ldr	r2, [pc, #12]	; (8016164 <LoRaMacConfirmQueueAdd+0x70>)
 8016156:	6093      	str	r3, [r2, #8]

    return true;
 8016158:	2301      	movs	r3, #1
}
 801615a:	4618      	mov	r0, r3
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	200016a8 	.word	0x200016a8

08016168 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801616c:	4b0e      	ldr	r3, [pc, #56]	; (80161a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801616e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016172:	4618      	mov	r0, r3
 8016174:	f7ff ff4a 	bl	801600c <IsListEmpty>
 8016178:	4603      	mov	r3, r0
 801617a:	2b00      	cmp	r3, #0
 801617c:	d001      	beq.n	8016182 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801617e:	2300      	movs	r3, #0
 8016180:	e010      	b.n	80161a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016182:	4b09      	ldr	r3, [pc, #36]	; (80161a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016188:	3b01      	subs	r3, #1
 801618a:	b2da      	uxtb	r2, r3
 801618c:	4b06      	ldr	r3, [pc, #24]	; (80161a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801618e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016192:	4b05      	ldr	r3, [pc, #20]	; (80161a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	4618      	mov	r0, r3
 8016198:	f7ff ff20 	bl	8015fdc <IncreaseBufferPointer>
 801619c:	4603      	mov	r3, r0
 801619e:	4a02      	ldr	r2, [pc, #8]	; (80161a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161a0:	6053      	str	r3, [r2, #4]

    return true;
 80161a2:	2301      	movs	r3, #1
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	200016a8 	.word	0x200016a8

080161ac <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b084      	sub	sp, #16
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	4603      	mov	r3, r0
 80161b4:	460a      	mov	r2, r1
 80161b6:	71fb      	strb	r3, [r7, #7]
 80161b8:	4613      	mov	r3, r2
 80161ba:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80161bc:	2300      	movs	r3, #0
 80161be:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161c0:	4b10      	ldr	r3, [pc, #64]	; (8016204 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7ff ff20 	bl	801600c <IsListEmpty>
 80161cc:	4603      	mov	r3, r0
 80161ce:	f083 0301 	eor.w	r3, r3, #1
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d011      	beq.n	80161fc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161d8:	4b0a      	ldr	r3, [pc, #40]	; (8016204 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161da:	6859      	ldr	r1, [r3, #4]
 80161dc:	4b09      	ldr	r3, [pc, #36]	; (8016204 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161de:	689a      	ldr	r2, [r3, #8]
 80161e0:	79bb      	ldrb	r3, [r7, #6]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ff ff32 	bl	801604c <GetElement>
 80161e8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d005      	beq.n	80161fc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	79fa      	ldrb	r2, [r7, #7]
 80161f4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2201      	movs	r2, #1
 80161fa:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161fc:	bf00      	nop
 80161fe:	3710      	adds	r7, #16
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}
 8016204:	200016a8 	.word	0x200016a8

08016208 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	4603      	mov	r3, r0
 8016210:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016212:	2300      	movs	r3, #0
 8016214:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016216:	4b10      	ldr	r3, [pc, #64]	; (8016258 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016218:	f893 3020 	ldrb.w	r3, [r3, #32]
 801621c:	4618      	mov	r0, r3
 801621e:	f7ff fef5 	bl	801600c <IsListEmpty>
 8016222:	4603      	mov	r3, r0
 8016224:	f083 0301 	eor.w	r3, r3, #1
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	d00e      	beq.n	801624c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801622e:	4b0a      	ldr	r3, [pc, #40]	; (8016258 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016230:	6859      	ldr	r1, [r3, #4]
 8016232:	4b09      	ldr	r3, [pc, #36]	; (8016258 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016234:	689a      	ldr	r2, [r3, #8]
 8016236:	79fb      	ldrb	r3, [r7, #7]
 8016238:	4618      	mov	r0, r3
 801623a:	f7ff ff07 	bl	801604c <GetElement>
 801623e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	785b      	ldrb	r3, [r3, #1]
 801624a:	e000      	b.n	801624e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801624c:	2301      	movs	r3, #1
}
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	200016a8 	.word	0x200016a8

0801625c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	4603      	mov	r3, r0
 8016264:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016266:	4b16      	ldr	r3, [pc, #88]	; (80162c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801626c:	4a14      	ldr	r2, [pc, #80]	; (80162c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801626e:	79fb      	ldrb	r3, [r7, #7]
 8016270:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016274:	4b12      	ldr	r3, [pc, #72]	; (80162c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016276:	f893 3020 	ldrb.w	r3, [r3, #32]
 801627a:	4618      	mov	r0, r3
 801627c:	f7ff fec6 	bl	801600c <IsListEmpty>
 8016280:	4603      	mov	r3, r0
 8016282:	f083 0301 	eor.w	r3, r3, #1
 8016286:	b2db      	uxtb	r3, r3
 8016288:	2b00      	cmp	r3, #0
 801628a:	d015      	beq.n	80162b8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	79fa      	ldrb	r2, [r7, #7]
 8016290:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	78db      	ldrb	r3, [r3, #3]
 8016296:	f083 0301 	eor.w	r3, r3, #1
 801629a:	b2db      	uxtb	r3, r3
 801629c:	2b00      	cmp	r3, #0
 801629e:	d002      	beq.n	80162a6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2201      	movs	r2, #1
 80162a4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80162a6:	68f8      	ldr	r0, [r7, #12]
 80162a8:	f7ff fe98 	bl	8015fdc <IncreaseBufferPointer>
 80162ac:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80162ae:	4b04      	ldr	r3, [pc, #16]	; (80162c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162b0:	689b      	ldr	r3, [r3, #8]
 80162b2:	68fa      	ldr	r2, [r7, #12]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d1e9      	bne.n	801628c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80162b8:	bf00      	nop
 80162ba:	3710      	adds	r7, #16
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	200016a8 	.word	0x200016a8

080162c4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	4603      	mov	r3, r0
 80162cc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80162ce:	4b09      	ldr	r3, [pc, #36]	; (80162f4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162d0:	6859      	ldr	r1, [r3, #4]
 80162d2:	4b08      	ldr	r3, [pc, #32]	; (80162f4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162d4:	689a      	ldr	r2, [r3, #8]
 80162d6:	79fb      	ldrb	r3, [r7, #7]
 80162d8:	4618      	mov	r0, r3
 80162da:	f7ff feb7 	bl	801604c <GetElement>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d001      	beq.n	80162e8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162e4:	2301      	movs	r3, #1
 80162e6:	e000      	b.n	80162ea <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162e8:	2300      	movs	r3, #0
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3708      	adds	r7, #8
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	200016a8 	.word	0x200016a8

080162f8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016300:	4b25      	ldr	r3, [pc, #148]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016306:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8016308:	2300      	movs	r3, #0
 801630a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801630c:	f107 0308 	add.w	r3, r7, #8
 8016310:	2204      	movs	r2, #4
 8016312:	2100      	movs	r1, #0
 8016314:	4618      	mov	r0, r3
 8016316:	f003 fdcf 	bl	8019eb8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801631a:	2300      	movs	r3, #0
 801631c:	73fb      	strb	r3, [r7, #15]
 801631e:	e032      	b.n	8016386 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016320:	4b1d      	ldr	r3, [pc, #116]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	781a      	ldrb	r2, [r3, #0]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801632a:	4b1b      	ldr	r3, [pc, #108]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	785a      	ldrb	r2, [r3, #1]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016334:	4b18      	ldr	r3, [pc, #96]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	789b      	ldrb	r3, [r3, #2]
 801633a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801633c:	7b7b      	ldrb	r3, [r7, #13]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d005      	beq.n	801634e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016342:	4b15      	ldr	r3, [pc, #84]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	689b      	ldr	r3, [r3, #8]
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	4798      	blx	r3
 801634c:	e00b      	b.n	8016366 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801634e:	4b12      	ldr	r3, [pc, #72]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016356:	4b10      	ldr	r3, [pc, #64]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	785b      	ldrb	r3, [r3, #1]
 801635c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801635e:	4b0e      	ldr	r3, [pc, #56]	; (8016398 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	78db      	ldrb	r3, [r3, #3]
 8016364:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016366:	f7ff feff 	bl	8016168 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801636a:	7b7b      	ldrb	r3, [r7, #13]
 801636c:	f083 0301 	eor.w	r3, r3, #1
 8016370:	b2db      	uxtb	r3, r3
 8016372:	2b00      	cmp	r3, #0
 8016374:	d004      	beq.n	8016380 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016376:	f107 0308 	add.w	r3, r7, #8
 801637a:	4618      	mov	r0, r3
 801637c:	f7ff feba 	bl	80160f4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016380:	7bfb      	ldrb	r3, [r7, #15]
 8016382:	3301      	adds	r3, #1
 8016384:	73fb      	strb	r3, [r7, #15]
 8016386:	7bfa      	ldrb	r2, [r7, #15]
 8016388:	7bbb      	ldrb	r3, [r7, #14]
 801638a:	429a      	cmp	r2, r3
 801638c:	d3c8      	bcc.n	8016320 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801638e:	bf00      	nop
 8016390:	bf00      	nop
 8016392:	3710      	adds	r7, #16
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}
 8016398:	200016a8 	.word	0x200016a8

0801639c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801639c:	b480      	push	{r7}
 801639e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80163a0:	4b03      	ldr	r3, [pc, #12]	; (80163b0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80163a2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bc80      	pop	{r7}
 80163ac:	4770      	bx	lr
 80163ae:	bf00      	nop
 80163b0:	200016a8 	.word	0x200016a8

080163b4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80163b8:	4b06      	ldr	r3, [pc, #24]	; (80163d4 <LoRaMacConfirmQueueIsFull+0x20>)
 80163ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163be:	4618      	mov	r0, r3
 80163c0:	f7ff fe34 	bl	801602c <IsListFull>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d001      	beq.n	80163ce <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80163ca:	2301      	movs	r3, #1
 80163cc:	e000      	b.n	80163d0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80163ce:	2300      	movs	r3, #0
    }
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	200016a8 	.word	0x200016a8

080163d8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b08e      	sub	sp, #56	; 0x38
 80163dc:	af00      	add	r7, sp, #0
 80163de:	60f8      	str	r0, [r7, #12]
 80163e0:	607b      	str	r3, [r7, #4]
 80163e2:	460b      	mov	r3, r1
 80163e4:	817b      	strh	r3, [r7, #10]
 80163e6:	4613      	mov	r3, r2
 80163e8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d101      	bne.n	80163f4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163f0:	230a      	movs	r3, #10
 80163f2:	e086      	b.n	8016502 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163f4:	2300      	movs	r3, #0
 80163f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163fa:	2301      	movs	r3, #1
 80163fc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163fe:	2300      	movs	r3, #0
 8016400:	623b      	str	r3, [r7, #32]
 8016402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016406:	2200      	movs	r2, #0
 8016408:	601a      	str	r2, [r3, #0]
 801640a:	605a      	str	r2, [r3, #4]
 801640c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801640e:	2300      	movs	r3, #0
 8016410:	613b      	str	r3, [r7, #16]
 8016412:	f107 0314 	add.w	r3, r7, #20
 8016416:	2200      	movs	r2, #0
 8016418:	601a      	str	r2, [r3, #0]
 801641a:	605a      	str	r2, [r3, #4]
 801641c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801641e:	2301      	movs	r3, #1
 8016420:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016422:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016426:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	b2db      	uxtb	r3, r3
 801642c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	0a1b      	lsrs	r3, r3, #8
 8016432:	b2db      	uxtb	r3, r3
 8016434:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	0c1b      	lsrs	r3, r3, #16
 801643a:	b2db      	uxtb	r3, r3
 801643c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	0e1b      	lsrs	r3, r3, #24
 8016442:	b2db      	uxtb	r3, r3
 8016444:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016448:	b2db      	uxtb	r3, r3
 801644a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801644e:	0a1b      	lsrs	r3, r3, #8
 8016450:	b2db      	uxtb	r3, r3
 8016452:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016456:	0c1b      	lsrs	r3, r3, #16
 8016458:	b2db      	uxtb	r3, r3
 801645a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801645e:	0e1b      	lsrs	r3, r3, #24
 8016460:	b2db      	uxtb	r3, r3
 8016462:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016464:	e048      	b.n	80164f8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016466:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016468:	b2db      	uxtb	r3, r3
 801646a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801646c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801646e:	3301      	adds	r3, #1
 8016470:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016472:	f107 0320 	add.w	r3, r7, #32
 8016476:	7a7a      	ldrb	r2, [r7, #9]
 8016478:	f107 0010 	add.w	r0, r7, #16
 801647c:	2110      	movs	r1, #16
 801647e:	f7f8 ff69 	bl	800f354 <SecureElementAesEncrypt>
 8016482:	4603      	mov	r3, r0
 8016484:	2b00      	cmp	r3, #0
 8016486:	d001      	beq.n	801648c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016488:	230f      	movs	r3, #15
 801648a:	e03a      	b.n	8016502 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801648c:	2300      	movs	r3, #0
 801648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016492:	e01e      	b.n	80164d2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016494:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801649c:	4413      	add	r3, r2
 801649e:	461a      	mov	r2, r3
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	4413      	add	r3, r2
 80164a4:	7819      	ldrb	r1, [r3, #0]
 80164a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164aa:	3338      	adds	r3, #56	; 0x38
 80164ac:	443b      	add	r3, r7
 80164ae:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80164b2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80164b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164ba:	4403      	add	r3, r0
 80164bc:	4618      	mov	r0, r3
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	4403      	add	r3, r0
 80164c2:	404a      	eors	r2, r1
 80164c4:	b2d2      	uxtb	r2, r2
 80164c6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80164c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164cc:	3301      	adds	r3, #1
 80164ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164da:	2a10      	cmp	r2, #16
 80164dc:	bfa8      	it	ge
 80164de:	2210      	movge	r2, #16
 80164e0:	b212      	sxth	r2, r2
 80164e2:	4293      	cmp	r3, r2
 80164e4:	dbd6      	blt.n	8016494 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164e6:	897b      	ldrh	r3, [r7, #10]
 80164e8:	3b10      	subs	r3, #16
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164f2:	3310      	adds	r3, #16
 80164f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	dcb2      	bgt.n	8016466 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016500:	2300      	movs	r3, #0
}
 8016502:	4618      	mov	r0, r3
 8016504:	3738      	adds	r7, #56	; 0x38
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}

0801650a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801650a:	b490      	push	{r4, r7}
 801650c:	b082      	sub	sp, #8
 801650e:	af00      	add	r7, sp, #0
 8016510:	4604      	mov	r4, r0
 8016512:	4608      	mov	r0, r1
 8016514:	4611      	mov	r1, r2
 8016516:	461a      	mov	r2, r3
 8016518:	4623      	mov	r3, r4
 801651a:	80fb      	strh	r3, [r7, #6]
 801651c:	4603      	mov	r3, r0
 801651e:	717b      	strb	r3, [r7, #5]
 8016520:	460b      	mov	r3, r1
 8016522:	713b      	strb	r3, [r7, #4]
 8016524:	4613      	mov	r3, r2
 8016526:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d101      	bne.n	8016532 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801652e:	230a      	movs	r3, #10
 8016530:	e04e      	b.n	80165d0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016532:	69bb      	ldr	r3, [r7, #24]
 8016534:	2249      	movs	r2, #73	; 0x49
 8016536:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	3301      	adds	r3, #1
 801653c:	2200      	movs	r2, #0
 801653e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	3302      	adds	r3, #2
 8016544:	2200      	movs	r2, #0
 8016546:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	3303      	adds	r3, #3
 801654c:	2200      	movs	r2, #0
 801654e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016550:	69bb      	ldr	r3, [r7, #24]
 8016552:	3304      	adds	r3, #4
 8016554:	2200      	movs	r2, #0
 8016556:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	3305      	adds	r3, #5
 801655c:	78fa      	ldrb	r2, [r7, #3]
 801655e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016560:	69bb      	ldr	r3, [r7, #24]
 8016562:	3306      	adds	r3, #6
 8016564:	693a      	ldr	r2, [r7, #16]
 8016566:	b2d2      	uxtb	r2, r2
 8016568:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	0a1a      	lsrs	r2, r3, #8
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	3307      	adds	r3, #7
 8016572:	b2d2      	uxtb	r2, r2
 8016574:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	0c1a      	lsrs	r2, r3, #16
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	3308      	adds	r3, #8
 801657e:	b2d2      	uxtb	r2, r2
 8016580:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	0e1a      	lsrs	r2, r3, #24
 8016586:	69bb      	ldr	r3, [r7, #24]
 8016588:	3309      	adds	r3, #9
 801658a:	b2d2      	uxtb	r2, r2
 801658c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801658e:	69bb      	ldr	r3, [r7, #24]
 8016590:	330a      	adds	r3, #10
 8016592:	697a      	ldr	r2, [r7, #20]
 8016594:	b2d2      	uxtb	r2, r2
 8016596:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	0a1a      	lsrs	r2, r3, #8
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	330b      	adds	r3, #11
 80165a0:	b2d2      	uxtb	r2, r2
 80165a2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	0c1a      	lsrs	r2, r3, #16
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	330c      	adds	r3, #12
 80165ac:	b2d2      	uxtb	r2, r2
 80165ae:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	0e1a      	lsrs	r2, r3, #24
 80165b4:	69bb      	ldr	r3, [r7, #24]
 80165b6:	330d      	adds	r3, #13
 80165b8:	b2d2      	uxtb	r2, r2
 80165ba:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	330e      	adds	r3, #14
 80165c0:	2200      	movs	r2, #0
 80165c2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	330f      	adds	r3, #15
 80165c8:	88fa      	ldrh	r2, [r7, #6]
 80165ca:	b2d2      	uxtb	r2, r2
 80165cc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165ce:	2300      	movs	r3, #0
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3708      	adds	r7, #8
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bc90      	pop	{r4, r7}
 80165d8:	4770      	bx	lr

080165da <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165da:	b590      	push	{r4, r7, lr}
 80165dc:	b08b      	sub	sp, #44	; 0x2c
 80165de:	af04      	add	r7, sp, #16
 80165e0:	6078      	str	r0, [r7, #4]
 80165e2:	4608      	mov	r0, r1
 80165e4:	4611      	mov	r1, r2
 80165e6:	461a      	mov	r2, r3
 80165e8:	4603      	mov	r3, r0
 80165ea:	807b      	strh	r3, [r7, #2]
 80165ec:	460b      	mov	r3, r1
 80165ee:	707b      	strb	r3, [r7, #1]
 80165f0:	4613      	mov	r3, r2
 80165f2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d002      	beq.n	8016600 <ComputeCmacB0+0x26>
 80165fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d101      	bne.n	8016604 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016600:	230a      	movs	r3, #10
 8016602:	e024      	b.n	801664e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016604:	887b      	ldrh	r3, [r7, #2]
 8016606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801660a:	d901      	bls.n	8016610 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801660c:	230e      	movs	r3, #14
 801660e:	e01e      	b.n	801664e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016610:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016614:	783a      	ldrb	r2, [r7, #0]
 8016616:	7879      	ldrb	r1, [r7, #1]
 8016618:	8878      	ldrh	r0, [r7, #2]
 801661a:	f107 0308 	add.w	r3, r7, #8
 801661e:	9302      	str	r3, [sp, #8]
 8016620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016622:	9301      	str	r3, [sp, #4]
 8016624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016626:	9300      	str	r3, [sp, #0]
 8016628:	4623      	mov	r3, r4
 801662a:	f7ff ff6e 	bl	801650a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801662e:	887a      	ldrh	r2, [r7, #2]
 8016630:	7879      	ldrb	r1, [r7, #1]
 8016632:	f107 0008 	add.w	r0, r7, #8
 8016636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016638:	9300      	str	r3, [sp, #0]
 801663a:	460b      	mov	r3, r1
 801663c:	6879      	ldr	r1, [r7, #4]
 801663e:	f7f8 fe43 	bl	800f2c8 <SecureElementComputeAesCmac>
 8016642:	4603      	mov	r3, r0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d001      	beq.n	801664c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016648:	230f      	movs	r3, #15
 801664a:	e000      	b.n	801664e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801664c:	2300      	movs	r3, #0
}
 801664e:	4618      	mov	r0, r3
 8016650:	371c      	adds	r7, #28
 8016652:	46bd      	mov	sp, r7
 8016654:	bd90      	pop	{r4, r7, pc}

08016656 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016656:	b590      	push	{r4, r7, lr}
 8016658:	b0cd      	sub	sp, #308	; 0x134
 801665a:	af04      	add	r7, sp, #16
 801665c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016660:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016664:	6020      	str	r0, [r4, #0]
 8016666:	460c      	mov	r4, r1
 8016668:	4610      	mov	r0, r2
 801666a:	4619      	mov	r1, r3
 801666c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016670:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016674:	4622      	mov	r2, r4
 8016676:	801a      	strh	r2, [r3, #0]
 8016678:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801667c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016680:	4602      	mov	r2, r0
 8016682:	701a      	strb	r2, [r3, #0]
 8016684:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016688:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801668c:	460a      	mov	r2, r1
 801668e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016690:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016694:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d101      	bne.n	80166a2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801669e:	230a      	movs	r3, #10
 80166a0:	e063      	b.n	801676a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80166a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166a6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166aa:	881b      	ldrh	r3, [r3, #0]
 80166ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166b0:	d901      	bls.n	80166b6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80166b2:	230e      	movs	r3, #14
 80166b4:	e059      	b.n	801676a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80166b6:	f107 030c 	add.w	r3, r7, #12
 80166ba:	f44f 7288 	mov.w	r2, #272	; 0x110
 80166be:	2100      	movs	r1, #0
 80166c0:	4618      	mov	r0, r3
 80166c2:	f003 fbf9 	bl	8019eb8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166c6:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80166ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166d2:	781a      	ldrb	r2, [r3, #0]
 80166d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166d8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166dc:	7819      	ldrb	r1, [r3, #0]
 80166de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166e2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166e6:	8818      	ldrh	r0, [r3, #0]
 80166e8:	f107 030c 	add.w	r3, r7, #12
 80166ec:	9302      	str	r3, [sp, #8]
 80166ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166f2:	9301      	str	r3, [sp, #4]
 80166f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166f8:	9300      	str	r3, [sp, #0]
 80166fa:	4623      	mov	r3, r4
 80166fc:	f7ff ff05 	bl	801650a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016700:	f107 030c 	add.w	r3, r7, #12
 8016704:	3310      	adds	r3, #16
 8016706:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801670a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801670e:	8812      	ldrh	r2, [r2, #0]
 8016710:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016714:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016718:	6809      	ldr	r1, [r1, #0]
 801671a:	4618      	mov	r0, r3
 801671c:	f003 fb91 	bl	8019e42 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016720:	2306      	movs	r3, #6
 8016722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016726:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801672a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801672e:	881b      	ldrh	r3, [r3, #0]
 8016730:	3310      	adds	r3, #16
 8016732:	4619      	mov	r1, r3
 8016734:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016738:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f107 000c 	add.w	r0, r7, #12
 8016742:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016746:	f7f8 fdd9 	bl	800f2fc <SecureElementVerifyAesCmac>
 801674a:	4603      	mov	r3, r0
 801674c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016754:	2b00      	cmp	r3, #0
 8016756:	d101      	bne.n	801675c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016758:	2300      	movs	r3, #0
 801675a:	e006      	b.n	801676a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801675c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016760:	2b01      	cmp	r3, #1
 8016762:	d101      	bne.n	8016768 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016764:	2301      	movs	r3, #1
 8016766:	e000      	b.n	801676a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016768:	230f      	movs	r3, #15
}
 801676a:	4618      	mov	r0, r3
 801676c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016770:	46bd      	mov	sp, r7
 8016772:	bd90      	pop	{r4, r7, pc}

08016774 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	4603      	mov	r3, r0
 801677c:	6039      	str	r1, [r7, #0]
 801677e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016780:	2300      	movs	r3, #0
 8016782:	73fb      	strb	r3, [r7, #15]
 8016784:	e011      	b.n	80167aa <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016786:	7bfb      	ldrb	r3, [r7, #15]
 8016788:	4a0c      	ldr	r2, [pc, #48]	; (80167bc <GetKeyAddrItem+0x48>)
 801678a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801678e:	79fa      	ldrb	r2, [r7, #7]
 8016790:	429a      	cmp	r2, r3
 8016792:	d107      	bne.n	80167a4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016794:	7bfb      	ldrb	r3, [r7, #15]
 8016796:	009b      	lsls	r3, r3, #2
 8016798:	4a08      	ldr	r2, [pc, #32]	; (80167bc <GetKeyAddrItem+0x48>)
 801679a:	441a      	add	r2, r3
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80167a0:	2300      	movs	r3, #0
 80167a2:	e006      	b.n	80167b2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80167a4:	7bfb      	ldrb	r3, [r7, #15]
 80167a6:	3301      	adds	r3, #1
 80167a8:	73fb      	strb	r3, [r7, #15]
 80167aa:	7bfb      	ldrb	r3, [r7, #15]
 80167ac:	2b01      	cmp	r3, #1
 80167ae:	d9ea      	bls.n	8016786 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80167b0:	230c      	movs	r3, #12
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3714      	adds	r7, #20
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bc80      	pop	{r7}
 80167ba:	4770      	bx	lr
 80167bc:	20000128 	.word	0x20000128

080167c0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b088      	sub	sp, #32
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	60b9      	str	r1, [r7, #8]
 80167c8:	607a      	str	r2, [r7, #4]
 80167ca:	461a      	mov	r2, r3
 80167cc:	4603      	mov	r3, r0
 80167ce:	73fb      	strb	r3, [r7, #15]
 80167d0:	4613      	mov	r3, r2
 80167d2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167d4:	2300      	movs	r3, #0
 80167d6:	613b      	str	r3, [r7, #16]
 80167d8:	f107 0314 	add.w	r3, r7, #20
 80167dc:	2200      	movs	r2, #0
 80167de:	601a      	str	r2, [r3, #0]
 80167e0:	605a      	str	r2, [r3, #4]
 80167e2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80167e4:	7bfb      	ldrb	r3, [r7, #15]
 80167e6:	2b08      	cmp	r3, #8
 80167e8:	d002      	beq.n	80167f0 <DeriveSessionKey10x+0x30>
 80167ea:	2b09      	cmp	r3, #9
 80167ec:	d003      	beq.n	80167f6 <DeriveSessionKey10x+0x36>
 80167ee:	e005      	b.n	80167fc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80167f0:	2301      	movs	r3, #1
 80167f2:	743b      	strb	r3, [r7, #16]
            break;
 80167f4:	e004      	b.n	8016800 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167f6:	2302      	movs	r3, #2
 80167f8:	743b      	strb	r3, [r7, #16]
            break;
 80167fa:	e001      	b.n	8016800 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167fc:	230b      	movs	r3, #11
 80167fe:	e02a      	b.n	8016856 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	b2db      	uxtb	r3, r3
 8016804:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	0a1b      	lsrs	r3, r3, #8
 801680a:	b2db      	uxtb	r3, r3
 801680c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	0c1b      	lsrs	r3, r3, #16
 8016812:	b2db      	uxtb	r3, r3
 8016814:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	b2db      	uxtb	r3, r3
 801681a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	0a1b      	lsrs	r3, r3, #8
 8016820:	b2db      	uxtb	r3, r3
 8016822:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	0c1b      	lsrs	r3, r3, #16
 8016828:	b2db      	uxtb	r3, r3
 801682a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801682c:	89bb      	ldrh	r3, [r7, #12]
 801682e:	b2db      	uxtb	r3, r3
 8016830:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016832:	89bb      	ldrh	r3, [r7, #12]
 8016834:	0a1b      	lsrs	r3, r3, #8
 8016836:	b29b      	uxth	r3, r3
 8016838:	b2db      	uxtb	r3, r3
 801683a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801683c:	7bfa      	ldrb	r2, [r7, #15]
 801683e:	f107 0310 	add.w	r3, r7, #16
 8016842:	2101      	movs	r1, #1
 8016844:	4618      	mov	r0, r3
 8016846:	f7f8 fe05 	bl	800f454 <SecureElementDeriveAndStoreKey>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	d001      	beq.n	8016854 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016850:	230f      	movs	r3, #15
 8016852:	e000      	b.n	8016856 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016854:	2300      	movs	r3, #0
}
 8016856:	4618      	mov	r0, r3
 8016858:	3720      	adds	r7, #32
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
	...

08016860 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	4603      	mov	r3, r0
 8016868:	6039      	str	r1, [r7, #0]
 801686a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d101      	bne.n	8016876 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016872:	230a      	movs	r3, #10
 8016874:	e029      	b.n	80168ca <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016876:	79fb      	ldrb	r3, [r7, #7]
 8016878:	3b01      	subs	r3, #1
 801687a:	2b03      	cmp	r3, #3
 801687c:	d822      	bhi.n	80168c4 <GetLastFcntDown+0x64>
 801687e:	a201      	add	r2, pc, #4	; (adr r2, 8016884 <GetLastFcntDown+0x24>)
 8016880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016884:	08016895 	.word	0x08016895
 8016888:	080168a1 	.word	0x080168a1
 801688c:	080168ad 	.word	0x080168ad
 8016890:	080168b9 	.word	0x080168b9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016894:	4b0f      	ldr	r3, [pc, #60]	; (80168d4 <GetLastFcntDown+0x74>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	691a      	ldr	r2, [r3, #16]
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	601a      	str	r2, [r3, #0]
            break;
 801689e:	e013      	b.n	80168c8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80168a0:	4b0c      	ldr	r3, [pc, #48]	; (80168d4 <GetLastFcntDown+0x74>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	695a      	ldr	r2, [r3, #20]
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	601a      	str	r2, [r3, #0]
            break;
 80168aa:	e00d      	b.n	80168c8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80168ac:	4b09      	ldr	r3, [pc, #36]	; (80168d4 <GetLastFcntDown+0x74>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	699a      	ldr	r2, [r3, #24]
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	601a      	str	r2, [r3, #0]
            break;
 80168b6:	e007      	b.n	80168c8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80168b8:	4b06      	ldr	r3, [pc, #24]	; (80168d4 <GetLastFcntDown+0x74>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	69da      	ldr	r2, [r3, #28]
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	601a      	str	r2, [r3, #0]
            break;
 80168c2:	e001      	b.n	80168c8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80168c4:	2305      	movs	r3, #5
 80168c6:	e000      	b.n	80168ca <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80168c8:	2300      	movs	r3, #0
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	370c      	adds	r7, #12
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bc80      	pop	{r7}
 80168d2:	4770      	bx	lr
 80168d4:	200016cc 	.word	0x200016cc

080168d8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	4603      	mov	r3, r0
 80168e0:	6039      	str	r1, [r7, #0]
 80168e2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168e4:	2300      	movs	r3, #0
 80168e6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168e8:	f107 020c 	add.w	r2, r7, #12
 80168ec:	79fb      	ldrb	r3, [r7, #7]
 80168ee:	4611      	mov	r1, r2
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7ff ffb5 	bl	8016860 <GetLastFcntDown>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d001      	beq.n	8016900 <CheckFCntDown+0x28>
    {
        return false;
 80168fc:	2300      	movs	r3, #0
 80168fe:	e00a      	b.n	8016916 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	683a      	ldr	r2, [r7, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d803      	bhi.n	8016910 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016908:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801690e:	d101      	bne.n	8016914 <CheckFCntDown+0x3c>
    {
        return true;
 8016910:	2301      	movs	r3, #1
 8016912:	e000      	b.n	8016916 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016914:	2300      	movs	r3, #0
    }
}
 8016916:	4618      	mov	r0, r3
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016920:	b480      	push	{r7}
 8016922:	b083      	sub	sp, #12
 8016924:	af00      	add	r7, sp, #0
 8016926:	4603      	mov	r3, r0
 8016928:	6039      	str	r1, [r7, #0]
 801692a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801692c:	79fb      	ldrb	r3, [r7, #7]
 801692e:	3b01      	subs	r3, #1
 8016930:	2b03      	cmp	r3, #3
 8016932:	d82b      	bhi.n	801698c <UpdateFCntDown+0x6c>
 8016934:	a201      	add	r2, pc, #4	; (adr r2, 801693c <UpdateFCntDown+0x1c>)
 8016936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801693a:	bf00      	nop
 801693c:	0801694d 	.word	0x0801694d
 8016940:	0801695f 	.word	0x0801695f
 8016944:	08016971 	.word	0x08016971
 8016948:	08016983 	.word	0x08016983
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801694c:	4b12      	ldr	r3, [pc, #72]	; (8016998 <UpdateFCntDown+0x78>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	683a      	ldr	r2, [r7, #0]
 8016952:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016954:	4b10      	ldr	r3, [pc, #64]	; (8016998 <UpdateFCntDown+0x78>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	683a      	ldr	r2, [r7, #0]
 801695a:	621a      	str	r2, [r3, #32]
            break;
 801695c:	e017      	b.n	801698e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801695e:	4b0e      	ldr	r3, [pc, #56]	; (8016998 <UpdateFCntDown+0x78>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	683a      	ldr	r2, [r7, #0]
 8016964:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016966:	4b0c      	ldr	r3, [pc, #48]	; (8016998 <UpdateFCntDown+0x78>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	683a      	ldr	r2, [r7, #0]
 801696c:	621a      	str	r2, [r3, #32]
            break;
 801696e:	e00e      	b.n	801698e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016970:	4b09      	ldr	r3, [pc, #36]	; (8016998 <UpdateFCntDown+0x78>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	683a      	ldr	r2, [r7, #0]
 8016976:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016978:	4b07      	ldr	r3, [pc, #28]	; (8016998 <UpdateFCntDown+0x78>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	683a      	ldr	r2, [r7, #0]
 801697e:	621a      	str	r2, [r3, #32]
            break;
 8016980:	e005      	b.n	801698e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016982:	4b05      	ldr	r3, [pc, #20]	; (8016998 <UpdateFCntDown+0x78>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	683a      	ldr	r2, [r7, #0]
 8016988:	61da      	str	r2, [r3, #28]
            break;
 801698a:	e000      	b.n	801698e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801698c:	bf00      	nop
    }
}
 801698e:	bf00      	nop
 8016990:	370c      	adds	r7, #12
 8016992:	46bd      	mov	sp, r7
 8016994:	bc80      	pop	{r7}
 8016996:	4770      	bx	lr
 8016998:	200016cc 	.word	0x200016cc

0801699c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80169a2:	4b18      	ldr	r3, [pc, #96]	; (8016a04 <ResetFCnts+0x68>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2200      	movs	r2, #0
 80169a8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80169aa:	4b16      	ldr	r3, [pc, #88]	; (8016a04 <ResetFCnts+0x68>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	f04f 32ff 	mov.w	r2, #4294967295
 80169b2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80169b4:	4b13      	ldr	r3, [pc, #76]	; (8016a04 <ResetFCnts+0x68>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f04f 32ff 	mov.w	r2, #4294967295
 80169bc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80169be:	4b11      	ldr	r3, [pc, #68]	; (8016a04 <ResetFCnts+0x68>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	f04f 32ff 	mov.w	r2, #4294967295
 80169c6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80169c8:	4b0e      	ldr	r3, [pc, #56]	; (8016a04 <ResetFCnts+0x68>)
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	4b0d      	ldr	r3, [pc, #52]	; (8016a04 <ResetFCnts+0x68>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	6992      	ldr	r2, [r2, #24]
 80169d2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169d4:	2300      	movs	r3, #0
 80169d6:	607b      	str	r3, [r7, #4]
 80169d8:	e00b      	b.n	80169f2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80169da:	4b0a      	ldr	r3, [pc, #40]	; (8016a04 <ResetFCnts+0x68>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	3306      	adds	r3, #6
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	4413      	add	r3, r2
 80169e6:	f04f 32ff 	mov.w	r2, #4294967295
 80169ea:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	3301      	adds	r3, #1
 80169f0:	607b      	str	r3, [r7, #4]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	ddf0      	ble.n	80169da <ResetFCnts+0x3e>
    }
}
 80169f8:	bf00      	nop
 80169fa:	bf00      	nop
 80169fc:	370c      	adds	r7, #12
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bc80      	pop	{r7}
 8016a02:	4770      	bx	lr
 8016a04:	200016cc 	.word	0x200016cc

08016a08 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016a10:	4b06      	ldr	r3, [pc, #24]	; (8016a2c <IsJoinNonce10xOk+0x24>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	689b      	ldr	r3, [r3, #8]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	bf8c      	ite	hi
 8016a1c:	2301      	movhi	r3, #1
 8016a1e:	2300      	movls	r3, #0
 8016a20:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	370c      	adds	r7, #12
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bc80      	pop	{r7}
 8016a2a:	4770      	bx	lr
 8016a2c:	200016cc 	.word	0x200016cc

08016a30 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d101      	bne.n	8016a42 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a3e:	2309      	movs	r3, #9
 8016a40:	e01c      	b.n	8016a7c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a42:	4a10      	ldr	r2, [pc, #64]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a48:	4b0e      	ldr	r3, [pc, #56]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2228      	movs	r2, #40	; 0x28
 8016a4e:	2100      	movs	r1, #0
 8016a50:	4618      	mov	r0, r3
 8016a52:	f003 fa31 	bl	8019eb8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a56:	4b0b      	ldr	r3, [pc, #44]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a5e:	4b09      	ldr	r3, [pc, #36]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2201      	movs	r2, #1
 8016a64:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a66:	4b07      	ldr	r3, [pc, #28]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a6e:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <LoRaMacCryptoInit+0x54>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2200      	movs	r2, #0
 8016a74:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a76:	f7ff ff91 	bl	801699c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a7a:	2300      	movs	r3, #0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}
 8016a84:	200016cc 	.word	0x200016cc

08016a88 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a90:	4b04      	ldr	r3, [pc, #16]	; (8016aa4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	687a      	ldr	r2, [r7, #4]
 8016a96:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a98:	2300      	movs	r3, #0
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	370c      	adds	r7, #12
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bc80      	pop	{r7}
 8016aa2:	4770      	bx	lr
 8016aa4:	200016cc 	.word	0x200016cc

08016aa8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d101      	bne.n	8016aba <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ab6:	230a      	movs	r3, #10
 8016ab8:	e006      	b.n	8016ac8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016aba:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	1c5a      	adds	r2, r3, #1
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ac6:	2300      	movs	r3, #0
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	370c      	adds	r7, #12
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bc80      	pop	{r7}
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop
 8016ad4:	200016cc 	.word	0x200016cc

08016ad8 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016adc:	b08a      	sub	sp, #40	; 0x28
 8016ade:	af00      	add	r7, sp, #0
 8016ae0:	613a      	str	r2, [r7, #16]
 8016ae2:	60fb      	str	r3, [r7, #12]
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	75fb      	strb	r3, [r7, #23]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016aec:	2300      	movs	r3, #0
 8016aee:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016af0:	2300      	movs	r3, #0
 8016af2:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016af4:	2313      	movs	r3, #19
 8016af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d101      	bne.n	8016b04 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b00:	230a      	movs	r3, #10
 8016b02:	e057      	b.n	8016bb4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016b04:	f107 021c 	add.w	r2, r7, #28
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7ff fea7 	bl	8016860 <GetLastFcntDown>
 8016b12:	4603      	mov	r3, r0
 8016b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d002      	beq.n	8016b26 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b24:	e046      	b.n	8016bb4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b2c:	d103      	bne.n	8016b36 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	693a      	ldr	r2, [r7, #16]
 8016b32:	601a      	str	r2, [r3, #0]
 8016b34:	e01e      	b.n	8016b74 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	693a      	ldr	r2, [r7, #16]
 8016b3c:	1ad3      	subs	r3, r2, r3
 8016b3e:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	dd05      	ble.n	8016b52 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b46:	69fa      	ldr	r2, [r7, #28]
 8016b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4a:	441a      	add	r2, r3
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	601a      	str	r2, [r3, #0]
 8016b50:	e010      	b.n	8016b74 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d104      	bne.n	8016b62 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b58:	69fa      	ldr	r2, [r7, #28]
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b5e:	2307      	movs	r3, #7
 8016b60:	e028      	b.n	8016bb4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b62:	69fb      	ldr	r3, [r7, #28]
 8016b64:	0c1b      	lsrs	r3, r3, #16
 8016b66:	041b      	lsls	r3, r3, #16
 8016b68:	693a      	ldr	r2, [r7, #16]
 8016b6a:	4413      	add	r3, r2
 8016b6c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b74:	4b12      	ldr	r3, [pc, #72]	; (8016bc0 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	789b      	ldrb	r3, [r3, #2]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d119      	bne.n	8016bb2 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2200      	movs	r2, #0
 8016b84:	603b      	str	r3, [r7, #0]
 8016b86:	607a      	str	r2, [r7, #4]
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	469a      	mov	sl, r3
 8016b8e:	4693      	mov	fp, r2
 8016b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b94:	4611      	mov	r1, r2
 8016b96:	ebb1 040a 	subs.w	r4, r1, sl
 8016b9a:	eb63 050b 	sbc.w	r5, r3, fp
 8016b9e:	8abb      	ldrh	r3, [r7, #20]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	4698      	mov	r8, r3
 8016ba4:	4691      	mov	r9, r2
 8016ba6:	4544      	cmp	r4, r8
 8016ba8:	eb75 0309 	sbcs.w	r3, r5, r9
 8016bac:	db01      	blt.n	8016bb2 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016bae:	2308      	movs	r3, #8
 8016bb0:	e000      	b.n	8016bb4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bb2:	2300      	movs	r3, #0
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3728      	adds	r7, #40	; 0x28
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016bbe:	bf00      	nop
 8016bc0:	200016cc 	.word	0x200016cc

08016bc4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d101      	bne.n	8016bd6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016bd2:	230a      	movs	r3, #10
 8016bd4:	e019      	b.n	8016c0a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	60fb      	str	r3, [r7, #12]
 8016bda:	e012      	b.n	8016c02 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016bdc:	4b0d      	ldr	r3, [pc, #52]	; (8016c14 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016bde:	6819      	ldr	r1, [r3, #0]
 8016be0:	68fa      	ldr	r2, [r7, #12]
 8016be2:	4613      	mov	r3, r2
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4413      	add	r3, r2
 8016be8:	011b      	lsls	r3, r3, #4
 8016bea:	461a      	mov	r2, r3
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	4413      	add	r3, r2
 8016bf0:	68fa      	ldr	r2, [r7, #12]
 8016bf2:	3206      	adds	r2, #6
 8016bf4:	0092      	lsls	r2, r2, #2
 8016bf6:	440a      	add	r2, r1
 8016bf8:	3204      	adds	r2, #4
 8016bfa:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	3301      	adds	r3, #1
 8016c00:	60fb      	str	r3, [r7, #12]
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	dde9      	ble.n	8016bdc <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3714      	adds	r7, #20
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bc80      	pop	{r7}
 8016c12:	4770      	bx	lr
 8016c14:	200016cc 	.word	0x200016cc

08016c18 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	4603      	mov	r3, r0
 8016c20:	6039      	str	r1, [r7, #0]
 8016c22:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016c24:	79fb      	ldrb	r3, [r7, #7]
 8016c26:	6839      	ldr	r1, [r7, #0]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7f8 faef 	bl	800f20c <SecureElementSetKey>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d001      	beq.n	8016c38 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c34:	230f      	movs	r3, #15
 8016c36:	e021      	b.n	8016c7c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c38:	79fb      	ldrb	r3, [r7, #7]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d11d      	bne.n	8016c7a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c3e:	4b11      	ldr	r3, [pc, #68]	; (8016c84 <LoRaMacCryptoSetKey+0x6c>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	789b      	ldrb	r3, [r3, #2]
 8016c44:	210b      	movs	r1, #11
 8016c46:	4618      	mov	r0, r3
 8016c48:	f000 fa5e 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d001      	beq.n	8016c56 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c52:	230f      	movs	r3, #15
 8016c54:	e012      	b.n	8016c7c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c56:	210c      	movs	r1, #12
 8016c58:	2000      	movs	r0, #0
 8016c5a:	f000 fa55 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d001      	beq.n	8016c68 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c64:	230f      	movs	r3, #15
 8016c66:	e009      	b.n	8016c7c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c68:	210a      	movs	r1, #10
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	f000 fa4c 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d001      	beq.n	8016c7a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c76:	230f      	movs	r3, #15
 8016c78:	e000      	b.n	8016c7c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c7a:	2300      	movs	r3, #0
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	200016cc 	.word	0x200016cc

08016c88 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b086      	sub	sp, #24
 8016c8c:	af02      	add	r7, sp, #8
 8016c8e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d101      	bne.n	8016c9a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c96:	230a      	movs	r3, #10
 8016c98:	e033      	b.n	8016d02 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016ca2:	f107 0308 	add.w	r3, r7, #8
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7f8 fc8a 	bl	800f5c0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016cac:	68ba      	ldr	r2, [r7, #8]
 8016cae:	4b17      	ldr	r3, [pc, #92]	; (8016d0c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	b292      	uxth	r2, r2
 8016cb4:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016cb6:	4b15      	ldr	r3, [pc, #84]	; (8016d0c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	889a      	ldrh	r2, [r3, #4]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f000 fc1b 	bl	80174fc <LoRaMacSerializerJoinRequest>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d001      	beq.n	8016cd0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ccc:	2311      	movs	r3, #17
 8016cce:	e018      	b.n	8016d02 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6819      	ldr	r1, [r3, #0]
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	3318      	adds	r3, #24
 8016cd8:	7bfa      	ldrb	r2, [r7, #15]
 8016cda:	9300      	str	r3, [sp, #0]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	2213      	movs	r2, #19
 8016ce0:	2000      	movs	r0, #0
 8016ce2:	f7f8 faf1 	bl	800f2c8 <SecureElementComputeAesCmac>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d001      	beq.n	8016cf0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cec:	230f      	movs	r3, #15
 8016cee:	e008      	b.n	8016d02 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f000 fc03 	bl	80174fc <LoRaMacSerializerJoinRequest>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d001      	beq.n	8016d00 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cfc:	2311      	movs	r3, #17
 8016cfe:	e000      	b.n	8016d02 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d00:	2300      	movs	r3, #0
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	200016cc 	.word	0x200016cc

08016d10 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d10:	b590      	push	{r4, r7, lr}
 8016d12:	b097      	sub	sp, #92	; 0x5c
 8016d14:	af04      	add	r7, sp, #16
 8016d16:	4603      	mov	r3, r0
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	607a      	str	r2, [r7, #4]
 8016d1c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d002      	beq.n	8016d2a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d101      	bne.n	8016d2e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d2a:	230a      	movs	r3, #10
 8016d2c:	e0d3      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d2e:	2313      	movs	r3, #19
 8016d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d34:	2300      	movs	r3, #0
 8016d36:	617b      	str	r3, [r7, #20]
 8016d38:	f107 0318 	add.w	r3, r7, #24
 8016d3c:	221d      	movs	r2, #29
 8016d3e:	2100      	movs	r1, #0
 8016d40:	4618      	mov	r0, r3
 8016d42:	f007 fe9b 	bl	801ea7c <memset>
    uint8_t versionMinor         = 0;
 8016d46:	2300      	movs	r3, #0
 8016d48:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d4a:	4b65      	ldr	r3, [pc, #404]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	889b      	ldrh	r3, [r3, #4]
 8016d50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681c      	ldr	r4, [r3, #0]
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	791b      	ldrb	r3, [r3, #4]
 8016d5c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d60:	7bf8      	ldrb	r0, [r7, #15]
 8016d62:	f107 0213 	add.w	r2, r7, #19
 8016d66:	9202      	str	r2, [sp, #8]
 8016d68:	f107 0214 	add.w	r2, r7, #20
 8016d6c:	9201      	str	r2, [sp, #4]
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	4623      	mov	r3, r4
 8016d72:	460a      	mov	r2, r1
 8016d74:	68b9      	ldr	r1, [r7, #8]
 8016d76:	f7f8 fbad 	bl	800f4d4 <SecureElementProcessJoinAccept>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d001      	beq.n	8016d84 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d80:	230f      	movs	r3, #15
 8016d82:	e0a8      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6818      	ldr	r0, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	791b      	ldrb	r3, [r3, #4]
 8016d8c:	b29a      	uxth	r2, r3
 8016d8e:	f107 0314 	add.w	r3, r7, #20
 8016d92:	4619      	mov	r1, r3
 8016d94:	f003 f855 	bl	8019e42 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f000 f9f0 	bl	801717e <LoRaMacParserJoinAccept>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d001      	beq.n	8016da8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016da4:	2310      	movs	r3, #16
 8016da6:	e096      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016da8:	2300      	movs	r3, #0
 8016daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	799b      	ldrb	r3, [r3, #6]
 8016db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	79db      	ldrb	r3, [r3, #7]
 8016db8:	021b      	lsls	r3, r3, #8
 8016dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dbc:	4313      	orrs	r3, r2
 8016dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	7a1b      	ldrb	r3, [r3, #8]
 8016dc4:	041b      	lsls	r3, r3, #16
 8016dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016dcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dce:	f7ff fe1b 	bl	8016a08 <IsJoinNonce10xOk>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016dd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d010      	beq.n	8016e02 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016de0:	4b3f      	ldr	r3, [pc, #252]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016de6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016de8:	7cfb      	ldrb	r3, [r7, #19]
 8016dea:	210b      	movs	r1, #11
 8016dec:	4618      	mov	r0, r3
 8016dee:	f000 f98b 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016df2:	4603      	mov	r3, r0
 8016df4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d005      	beq.n	8016e0c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016e00:	e001      	b.n	8016e06 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016e02:	2303      	movs	r3, #3
 8016e04:	e067      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016e06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e0a:	e064      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016e0c:	210c      	movs	r1, #12
 8016e0e:	2000      	movs	r0, #0
 8016e10:	f000 f97a 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e14:	4603      	mov	r3, r0
 8016e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d002      	beq.n	8016e28 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e26:	e056      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016e28:	210a      	movs	r1, #10
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	f000 f96c 	bl	8017108 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e30:	4603      	mov	r3, r0
 8016e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d002      	beq.n	8016e44 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e42:	e048      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	7a5b      	ldrb	r3, [r3, #9]
 8016e48:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	7a9b      	ldrb	r3, [r3, #10]
 8016e4e:	021b      	lsls	r3, r3, #8
 8016e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e52:	4313      	orrs	r3, r2
 8016e54:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	7adb      	ldrb	r3, [r3, #11]
 8016e5a:	041b      	lsls	r3, r3, #16
 8016e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e6a:	2009      	movs	r0, #9
 8016e6c:	f7ff fca8 	bl	80167c0 <DeriveSessionKey10x>
 8016e70:	4603      	mov	r3, r0
 8016e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d002      	beq.n	8016e84 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016e7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e82:	e028      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e8c:	2008      	movs	r0, #8
 8016e8e:	f7ff fc97 	bl	80167c0 <DeriveSessionKey10x>
 8016e92:	4603      	mov	r3, r0
 8016e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d002      	beq.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ea4:	e017      	b.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016ea6:	4b0e      	ldr	r3, [pc, #56]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	7cfa      	ldrb	r2, [r7, #19]
 8016eac:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016eae:	4b0c      	ldr	r3, [pc, #48]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016eb6:	4b0a      	ldr	r3, [pc, #40]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f04f 32ff 	mov.w	r2, #4294967295
 8016ebe:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016ec0:	4b07      	ldr	r3, [pc, #28]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ec8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016eca:	4b05      	ldr	r3, [pc, #20]	; (8016ee0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	f04f 32ff 	mov.w	r2, #4294967295
 8016ed2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ed4:	2300      	movs	r3, #0
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	374c      	adds	r7, #76	; 0x4c
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd90      	pop	{r4, r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	200016cc 	.word	0x200016cc

08016ee4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016ee4:	b590      	push	{r4, r7, lr}
 8016ee6:	b08b      	sub	sp, #44	; 0x2c
 8016ee8:	af04      	add	r7, sp, #16
 8016eea:	60f8      	str	r0, [r7, #12]
 8016eec:	607b      	str	r3, [r7, #4]
 8016eee:	460b      	mov	r3, r1
 8016ef0:	72fb      	strb	r3, [r7, #11]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016ef6:	2313      	movs	r3, #19
 8016ef8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016efa:	2309      	movs	r3, #9
 8016efc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d101      	bne.n	8016f08 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f04:	230a      	movs	r3, #10
 8016f06:	e05f      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016f08:	4b31      	ldr	r3, [pc, #196]	; (8016fd0 <LoRaMacCryptoSecureMessage+0xec>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	68db      	ldr	r3, [r3, #12]
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	429a      	cmp	r2, r3
 8016f12:	d201      	bcs.n	8016f18 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f14:	2306      	movs	r3, #6
 8016f16:	e057      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d101      	bne.n	8016f26 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f22:	2308      	movs	r3, #8
 8016f24:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016f26:	4b2a      	ldr	r3, [pc, #168]	; (8016fd0 <LoRaMacCryptoSecureMessage+0xec>)
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	68fa      	ldr	r2, [r7, #12]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d916      	bls.n	8016f60 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f3c:	b219      	sxth	r1, r3
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	689c      	ldr	r4, [r3, #8]
 8016f42:	7dfa      	ldrb	r2, [r7, #23]
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	9301      	str	r3, [sp, #4]
 8016f48:	2300      	movs	r3, #0
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4623      	mov	r3, r4
 8016f4e:	f7ff fa43 	bl	80163d8 <PayloadEncrypt>
 8016f52:	4603      	mov	r3, r0
 8016f54:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f56:	7dbb      	ldrb	r3, [r7, #22]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d001      	beq.n	8016f60 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f5c:	7dbb      	ldrb	r3, [r7, #22]
 8016f5e:	e033      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 fb4d 	bl	8017600 <LoRaMacSerializerData>
 8016f66:	4603      	mov	r3, r0
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d001      	beq.n	8016f70 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f6c:	2311      	movs	r3, #17
 8016f6e:	e02b      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f70:	2308      	movs	r3, #8
 8016f72:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6818      	ldr	r0, [r3, #0]
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	791b      	ldrb	r3, [r3, #4]
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	3b04      	subs	r3, #4
 8016f80:	b299      	uxth	r1, r3
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	689b      	ldr	r3, [r3, #8]
 8016f86:	687a      	ldr	r2, [r7, #4]
 8016f88:	322c      	adds	r2, #44	; 0x2c
 8016f8a:	7dfc      	ldrb	r4, [r7, #23]
 8016f8c:	9203      	str	r2, [sp, #12]
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	9202      	str	r2, [sp, #8]
 8016f92:	9301      	str	r3, [sp, #4]
 8016f94:	2300      	movs	r3, #0
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	2300      	movs	r3, #0
 8016f9a:	4622      	mov	r2, r4
 8016f9c:	f7ff fb1d 	bl	80165da <ComputeCmacB0>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016fa4:	7dbb      	ldrb	r3, [r7, #22]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d001      	beq.n	8016fae <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016faa:	7dbb      	ldrb	r3, [r7, #22]
 8016fac:	e00c      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f000 fb26 	bl	8017600 <LoRaMacSerializerData>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d001      	beq.n	8016fbe <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016fba:	2311      	movs	r3, #17
 8016fbc:	e004      	b.n	8016fc8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016fbe:	4b04      	ldr	r3, [pc, #16]	; (8016fd0 <LoRaMacCryptoSecureMessage+0xec>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	68fa      	ldr	r2, [r7, #12]
 8016fc4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016fc6:	2300      	movs	r3, #0
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	371c      	adds	r7, #28
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd90      	pop	{r4, r7, pc}
 8016fd0:	200016cc 	.word	0x200016cc

08016fd4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016fd4:	b590      	push	{r4, r7, lr}
 8016fd6:	b08b      	sub	sp, #44	; 0x2c
 8016fd8:	af04      	add	r7, sp, #16
 8016fda:	60b9      	str	r1, [r7, #8]
 8016fdc:	607b      	str	r3, [r7, #4]
 8016fde:	4603      	mov	r3, r0
 8016fe0:	73fb      	strb	r3, [r7, #15]
 8016fe2:	4613      	mov	r3, r2
 8016fe4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d101      	bne.n	8016ff0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fec:	230a      	movs	r3, #10
 8016fee:	e084      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016ff0:	7bbb      	ldrb	r3, [r7, #14]
 8016ff2:	6879      	ldr	r1, [r7, #4]
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7ff fc6f 	bl	80168d8 <CheckFCntDown>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	f083 0301 	eor.w	r3, r3, #1
 8017000:	b2db      	uxtb	r3, r3
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017006:	2306      	movs	r3, #6
 8017008:	e077      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801700a:	2313      	movs	r3, #19
 801700c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801700e:	2309      	movs	r3, #9
 8017010:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8017012:	2308      	movs	r3, #8
 8017014:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017018:	f000 f97c 	bl	8017314 <LoRaMacParserData>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d001      	beq.n	8017026 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017022:	2310      	movs	r3, #16
 8017024:	e069      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017026:	f107 0210 	add.w	r2, r7, #16
 801702a:	7bfb      	ldrb	r3, [r7, #15]
 801702c:	4611      	mov	r1, r2
 801702e:	4618      	mov	r0, r3
 8017030:	f7ff fba0 	bl	8016774 <GetKeyAddrItem>
 8017034:	4603      	mov	r3, r0
 8017036:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017038:	7d7b      	ldrb	r3, [r7, #21]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801703e:	7d7b      	ldrb	r3, [r7, #21]
 8017040:	e05b      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	785b      	ldrb	r3, [r3, #1]
 8017046:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	789b      	ldrb	r3, [r3, #2]
 801704c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017050:	689b      	ldr	r3, [r3, #8]
 8017052:	68ba      	ldr	r2, [r7, #8]
 8017054:	429a      	cmp	r2, r3
 8017056:	d001      	beq.n	801705c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017058:	2302      	movs	r3, #2
 801705a:	e04e      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705e:	7b1b      	ldrb	r3, [r3, #12]
 8017060:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2b00      	cmp	r3, #0
 8017068:	bf14      	ite	ne
 801706a:	2301      	movne	r3, #1
 801706c:	2300      	moveq	r3, #0
 801706e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017070:	4b24      	ldr	r3, [pc, #144]	; (8017104 <LoRaMacCryptoUnsecureMessage+0x130>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	789b      	ldrb	r3, [r3, #2]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d101      	bne.n	801707e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801707a:	2300      	movs	r3, #0
 801707c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017080:	6818      	ldr	r0, [r3, #0]
 8017082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017084:	791b      	ldrb	r3, [r3, #4]
 8017086:	b29b      	uxth	r3, r3
 8017088:	3b04      	subs	r3, #4
 801708a:	b299      	uxth	r1, r3
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017090:	7dbc      	ldrb	r4, [r7, #22]
 8017092:	7d3a      	ldrb	r2, [r7, #20]
 8017094:	9303      	str	r3, [sp, #12]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	9302      	str	r3, [sp, #8]
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	9301      	str	r3, [sp, #4]
 801709e:	2301      	movs	r3, #1
 80170a0:	9300      	str	r3, [sp, #0]
 80170a2:	4623      	mov	r3, r4
 80170a4:	f7ff fad7 	bl	8016656 <VerifyCmacB0>
 80170a8:	4603      	mov	r3, r0
 80170aa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170ac:	7d7b      	ldrb	r3, [r7, #21]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80170b2:	7d7b      	ldrb	r3, [r7, #21]
 80170b4:	e021      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80170b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d101      	bne.n	80170c4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80170c0:	2308      	movs	r3, #8
 80170c2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80170c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80170c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170ce:	b219      	sxth	r1, r3
 80170d0:	7dfa      	ldrb	r2, [r7, #23]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	9301      	str	r3, [sp, #4]
 80170d6:	2301      	movs	r3, #1
 80170d8:	9300      	str	r3, [sp, #0]
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	f7ff f97c 	bl	80163d8 <PayloadEncrypt>
 80170e0:	4603      	mov	r3, r0
 80170e2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170e4:	7d7b      	ldrb	r3, [r7, #21]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d001      	beq.n	80170ee <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170ea:	7d7b      	ldrb	r3, [r7, #21]
 80170ec:	e005      	b.n	80170fa <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80170ee:	7bbb      	ldrb	r3, [r7, #14]
 80170f0:	6879      	ldr	r1, [r7, #4]
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7ff fc14 	bl	8016920 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170f8:	2300      	movs	r3, #0
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	371c      	adds	r7, #28
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd90      	pop	{r4, r7, pc}
 8017102:	bf00      	nop
 8017104:	200016cc 	.word	0x200016cc

08017108 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b088      	sub	sp, #32
 801710c:	af00      	add	r7, sp, #0
 801710e:	4603      	mov	r3, r0
 8017110:	460a      	mov	r2, r1
 8017112:	71fb      	strb	r3, [r7, #7]
 8017114:	4613      	mov	r3, r2
 8017116:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8017118:	2300      	movs	r3, #0
 801711a:	60fb      	str	r3, [r7, #12]
 801711c:	f107 0310 	add.w	r3, r7, #16
 8017120:	2200      	movs	r2, #0
 8017122:	601a      	str	r2, [r3, #0]
 8017124:	605a      	str	r2, [r3, #4]
 8017126:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017128:	2300      	movs	r3, #0
 801712a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801712c:	79bb      	ldrb	r3, [r7, #6]
 801712e:	2b0c      	cmp	r3, #12
 8017130:	d00b      	beq.n	801714a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017132:	2b0c      	cmp	r3, #12
 8017134:	dc0f      	bgt.n	8017156 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017136:	2b0a      	cmp	r3, #10
 8017138:	d00a      	beq.n	8017150 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801713a:	2b0b      	cmp	r3, #11
 801713c:	d10b      	bne.n	8017156 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801713e:	79fb      	ldrb	r3, [r7, #7]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d10a      	bne.n	801715a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017144:	2320      	movs	r3, #32
 8017146:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017148:	e007      	b.n	801715a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801714a:	230b      	movs	r3, #11
 801714c:	77fb      	strb	r3, [r7, #31]
            break;
 801714e:	e005      	b.n	801715c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017150:	2330      	movs	r3, #48	; 0x30
 8017152:	733b      	strb	r3, [r7, #12]
            break;
 8017154:	e002      	b.n	801715c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017156:	230b      	movs	r3, #11
 8017158:	e00d      	b.n	8017176 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801715a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801715c:	79ba      	ldrb	r2, [r7, #6]
 801715e:	7ff9      	ldrb	r1, [r7, #31]
 8017160:	f107 030c 	add.w	r3, r7, #12
 8017164:	4618      	mov	r0, r3
 8017166:	f7f8 f975 	bl	800f454 <SecureElementDeriveAndStoreKey>
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d001      	beq.n	8017174 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017170:	230f      	movs	r3, #15
 8017172:	e000      	b.n	8017176 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017174:	2300      	movs	r3, #0
}
 8017176:	4618      	mov	r0, r3
 8017178:	3720      	adds	r7, #32
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}

0801717e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801717e:	b580      	push	{r7, lr}
 8017180:	b084      	sub	sp, #16
 8017182:	af00      	add	r7, sp, #0
 8017184:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d003      	beq.n	8017194 <LoRaMacParserJoinAccept+0x16>
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d101      	bne.n	8017198 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017194:	2302      	movs	r3, #2
 8017196:	e0b9      	b.n	801730c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017198:	2300      	movs	r3, #0
 801719a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681a      	ldr	r2, [r3, #0]
 80171a0:	89fb      	ldrh	r3, [r7, #14]
 80171a2:	1c59      	adds	r1, r3, #1
 80171a4:	81f9      	strh	r1, [r7, #14]
 80171a6:	4413      	add	r3, r2
 80171a8:	781a      	ldrb	r2, [r3, #0]
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	1d98      	adds	r0, r3, #6
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	89fb      	ldrh	r3, [r7, #14]
 80171b8:	4413      	add	r3, r2
 80171ba:	2203      	movs	r2, #3
 80171bc:	4619      	mov	r1, r3
 80171be:	f002 fe40 	bl	8019e42 <memcpy1>
    bufItr = bufItr + 3;
 80171c2:	89fb      	ldrh	r3, [r7, #14]
 80171c4:	3303      	adds	r3, #3
 80171c6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f103 0009 	add.w	r0, r3, #9
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	89fb      	ldrh	r3, [r7, #14]
 80171d4:	4413      	add	r3, r2
 80171d6:	2203      	movs	r2, #3
 80171d8:	4619      	mov	r1, r3
 80171da:	f002 fe32 	bl	8019e42 <memcpy1>
    bufItr = bufItr + 3;
 80171de:	89fb      	ldrh	r3, [r7, #14]
 80171e0:	3303      	adds	r3, #3
 80171e2:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	89fb      	ldrh	r3, [r7, #14]
 80171ea:	1c59      	adds	r1, r3, #1
 80171ec:	81f9      	strh	r1, [r7, #14]
 80171ee:	4413      	add	r3, r2
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	461a      	mov	r2, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	89fb      	ldrh	r3, [r7, #14]
 80171fe:	1c59      	adds	r1, r3, #1
 8017200:	81f9      	strh	r1, [r7, #14]
 8017202:	4413      	add	r3, r2
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	021a      	lsls	r2, r3, #8
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	68db      	ldr	r3, [r3, #12]
 801720c:	431a      	orrs	r2, r3
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	681a      	ldr	r2, [r3, #0]
 8017216:	89fb      	ldrh	r3, [r7, #14]
 8017218:	1c59      	adds	r1, r3, #1
 801721a:	81f9      	strh	r1, [r7, #14]
 801721c:	4413      	add	r3, r2
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	041a      	lsls	r2, r3, #16
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	68db      	ldr	r3, [r3, #12]
 8017226:	431a      	orrs	r2, r3
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	89fb      	ldrh	r3, [r7, #14]
 8017232:	1c59      	adds	r1, r3, #1
 8017234:	81f9      	strh	r1, [r7, #14]
 8017236:	4413      	add	r3, r2
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	061a      	lsls	r2, r3, #24
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	431a      	orrs	r2, r3
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	89fb      	ldrh	r3, [r7, #14]
 801724c:	1c59      	adds	r1, r3, #1
 801724e:	81f9      	strh	r1, [r7, #14]
 8017250:	4413      	add	r3, r2
 8017252:	781a      	ldrb	r2, [r3, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681a      	ldr	r2, [r3, #0]
 801725c:	89fb      	ldrh	r3, [r7, #14]
 801725e:	1c59      	adds	r1, r3, #1
 8017260:	81f9      	strh	r1, [r7, #14]
 8017262:	4413      	add	r3, r2
 8017264:	781a      	ldrb	r2, [r3, #0]
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	791b      	ldrb	r3, [r3, #4]
 801726e:	1f1a      	subs	r2, r3, #4
 8017270:	89fb      	ldrh	r3, [r7, #14]
 8017272:	1ad3      	subs	r3, r2, r3
 8017274:	2b10      	cmp	r3, #16
 8017276:	d10e      	bne.n	8017296 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f103 0012 	add.w	r0, r3, #18
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681a      	ldr	r2, [r3, #0]
 8017282:	89fb      	ldrh	r3, [r7, #14]
 8017284:	4413      	add	r3, r2
 8017286:	2210      	movs	r2, #16
 8017288:	4619      	mov	r1, r3
 801728a:	f002 fdda 	bl	8019e42 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801728e:	89fb      	ldrh	r3, [r7, #14]
 8017290:	3310      	adds	r3, #16
 8017292:	81fb      	strh	r3, [r7, #14]
 8017294:	e008      	b.n	80172a8 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	791b      	ldrb	r3, [r3, #4]
 801729a:	1f1a      	subs	r2, r3, #4
 801729c:	89fb      	ldrh	r3, [r7, #14]
 801729e:	1ad3      	subs	r3, r2, r3
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	dd01      	ble.n	80172a8 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80172a4:	2301      	movs	r3, #1
 80172a6:	e031      	b.n	801730c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	89fb      	ldrh	r3, [r7, #14]
 80172ae:	1c59      	adds	r1, r3, #1
 80172b0:	81f9      	strh	r1, [r7, #14]
 80172b2:	4413      	add	r3, r2
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	461a      	mov	r2, r3
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	89fb      	ldrh	r3, [r7, #14]
 80172c2:	1c59      	adds	r1, r3, #1
 80172c4:	81f9      	strh	r1, [r7, #14]
 80172c6:	4413      	add	r3, r2
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	021a      	lsls	r2, r3, #8
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d0:	431a      	orrs	r2, r3
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	681a      	ldr	r2, [r3, #0]
 80172da:	89fb      	ldrh	r3, [r7, #14]
 80172dc:	1c59      	adds	r1, r3, #1
 80172de:	81f9      	strh	r1, [r7, #14]
 80172e0:	4413      	add	r3, r2
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	041a      	lsls	r2, r3, #16
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ea:	431a      	orrs	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681a      	ldr	r2, [r3, #0]
 80172f4:	89fb      	ldrh	r3, [r7, #14]
 80172f6:	1c59      	adds	r1, r3, #1
 80172f8:	81f9      	strh	r1, [r7, #14]
 80172fa:	4413      	add	r3, r2
 80172fc:	781b      	ldrb	r3, [r3, #0]
 80172fe:	061a      	lsls	r2, r3, #24
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017304:	431a      	orrs	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801730a:	2300      	movs	r3, #0
}
 801730c:	4618      	mov	r0, r3
 801730e:	3710      	adds	r7, #16
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}

08017314 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b084      	sub	sp, #16
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d003      	beq.n	801732a <LoRaMacParserData+0x16>
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d101      	bne.n	801732e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801732a:	2302      	movs	r3, #2
 801732c:	e0e2      	b.n	80174f4 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801732e:	2300      	movs	r3, #0
 8017330:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	89fb      	ldrh	r3, [r7, #14]
 8017338:	1c59      	adds	r1, r3, #1
 801733a:	81f9      	strh	r1, [r7, #14]
 801733c:	4413      	add	r3, r2
 801733e:	781a      	ldrb	r2, [r3, #0]
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	89fb      	ldrh	r3, [r7, #14]
 801734a:	1c59      	adds	r1, r3, #1
 801734c:	81f9      	strh	r1, [r7, #14]
 801734e:	4413      	add	r3, r2
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	461a      	mov	r2, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	89fb      	ldrh	r3, [r7, #14]
 801735e:	1c59      	adds	r1, r3, #1
 8017360:	81f9      	strh	r1, [r7, #14]
 8017362:	4413      	add	r3, r2
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	021a      	lsls	r2, r3, #8
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	689b      	ldr	r3, [r3, #8]
 801736c:	431a      	orrs	r2, r3
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	89fb      	ldrh	r3, [r7, #14]
 8017378:	1c59      	adds	r1, r3, #1
 801737a:	81f9      	strh	r1, [r7, #14]
 801737c:	4413      	add	r3, r2
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	041a      	lsls	r2, r3, #16
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	689b      	ldr	r3, [r3, #8]
 8017386:	431a      	orrs	r2, r3
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681a      	ldr	r2, [r3, #0]
 8017390:	89fb      	ldrh	r3, [r7, #14]
 8017392:	1c59      	adds	r1, r3, #1
 8017394:	81f9      	strh	r1, [r7, #14]
 8017396:	4413      	add	r3, r2
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	061a      	lsls	r2, r3, #24
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	689b      	ldr	r3, [r3, #8]
 80173a0:	431a      	orrs	r2, r3
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	89fb      	ldrh	r3, [r7, #14]
 80173ac:	1c59      	adds	r1, r3, #1
 80173ae:	81f9      	strh	r1, [r7, #14]
 80173b0:	4413      	add	r3, r2
 80173b2:	781a      	ldrb	r2, [r3, #0]
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	89fb      	ldrh	r3, [r7, #14]
 80173be:	1c59      	adds	r1, r3, #1
 80173c0:	81f9      	strh	r1, [r7, #14]
 80173c2:	4413      	add	r3, r2
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	b29a      	uxth	r2, r3
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	89fb      	ldrh	r3, [r7, #14]
 80173d2:	1c59      	adds	r1, r3, #1
 80173d4:	81f9      	strh	r1, [r7, #14]
 80173d6:	4413      	add	r3, r2
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	0219      	lsls	r1, r3, #8
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	89db      	ldrh	r3, [r3, #14]
 80173e0:	b21a      	sxth	r2, r3
 80173e2:	b20b      	sxth	r3, r1
 80173e4:	4313      	orrs	r3, r2
 80173e6:	b21b      	sxth	r3, r3
 80173e8:	b29a      	uxth	r2, r3
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	f103 0010 	add.w	r0, r3, #16
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	89fb      	ldrh	r3, [r7, #14]
 80173fa:	18d1      	adds	r1, r2, r3
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	7b1b      	ldrb	r3, [r3, #12]
 8017400:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017404:	b2db      	uxtb	r3, r3
 8017406:	b29b      	uxth	r3, r3
 8017408:	461a      	mov	r2, r3
 801740a:	f002 fd1a 	bl	8019e42 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	7b1b      	ldrb	r3, [r3, #12]
 8017412:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017416:	b2db      	uxtb	r3, r3
 8017418:	b29a      	uxth	r2, r3
 801741a:	89fb      	ldrh	r3, [r7, #14]
 801741c:	4413      	add	r3, r2
 801741e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2200      	movs	r2, #0
 8017424:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2200      	movs	r2, #0
 801742c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	791b      	ldrb	r3, [r3, #4]
 8017434:	461a      	mov	r2, r3
 8017436:	89fb      	ldrh	r3, [r7, #14]
 8017438:	1ad3      	subs	r3, r2, r3
 801743a:	2b04      	cmp	r3, #4
 801743c:	dd28      	ble.n	8017490 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	89fb      	ldrh	r3, [r7, #14]
 8017444:	1c59      	adds	r1, r3, #1
 8017446:	81f9      	strh	r1, [r7, #14]
 8017448:	4413      	add	r3, r2
 801744a:	781a      	ldrb	r2, [r3, #0]
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	791a      	ldrb	r2, [r3, #4]
 8017456:	89fb      	ldrh	r3, [r7, #14]
 8017458:	b2db      	uxtb	r3, r3
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	b2db      	uxtb	r3, r3
 801745e:	3b04      	subs	r3, #4
 8017460:	b2da      	uxtb	r2, r3
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681a      	ldr	r2, [r3, #0]
 8017470:	89fb      	ldrh	r3, [r7, #14]
 8017472:	18d1      	adds	r1, r2, r3
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801747a:	b29b      	uxth	r3, r3
 801747c:	461a      	mov	r2, r3
 801747e:	f002 fce0 	bl	8019e42 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017488:	b29a      	uxth	r2, r3
 801748a:	89fb      	ldrh	r3, [r7, #14]
 801748c:	4413      	add	r3, r2
 801748e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	791b      	ldrb	r3, [r3, #4]
 8017498:	3b04      	subs	r3, #4
 801749a:	4413      	add	r3, r2
 801749c:	781b      	ldrb	r3, [r3, #0]
 801749e:	461a      	mov	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6819      	ldr	r1, [r3, #0]
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	791b      	ldrb	r3, [r3, #4]
 80174b0:	3b03      	subs	r3, #3
 80174b2:	440b      	add	r3, r1
 80174b4:	781b      	ldrb	r3, [r3, #0]
 80174b6:	021b      	lsls	r3, r3, #8
 80174b8:	431a      	orrs	r2, r3
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6819      	ldr	r1, [r3, #0]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	791b      	ldrb	r3, [r3, #4]
 80174ca:	3b02      	subs	r3, #2
 80174cc:	440b      	add	r3, r1
 80174ce:	781b      	ldrb	r3, [r3, #0]
 80174d0:	041b      	lsls	r3, r3, #16
 80174d2:	431a      	orrs	r2, r3
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6819      	ldr	r1, [r3, #0]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	791b      	ldrb	r3, [r3, #4]
 80174e4:	3b01      	subs	r3, #1
 80174e6:	440b      	add	r3, r1
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	061b      	lsls	r3, r3, #24
 80174ec:	431a      	orrs	r2, r3
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174f2:	2300      	movs	r3, #0
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	3710      	adds	r7, #16
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d003      	beq.n	8017512 <LoRaMacSerializerJoinRequest+0x16>
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d101      	bne.n	8017516 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017512:	2301      	movs	r3, #1
 8017514:	e070      	b.n	80175f8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017516:	2300      	movs	r3, #0
 8017518:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	791b      	ldrb	r3, [r3, #4]
 801751e:	2b16      	cmp	r3, #22
 8017520:	d801      	bhi.n	8017526 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017522:	2302      	movs	r3, #2
 8017524:	e068      	b.n	80175f8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	89fb      	ldrh	r3, [r7, #14]
 801752c:	1c59      	adds	r1, r3, #1
 801752e:	81f9      	strh	r1, [r7, #14]
 8017530:	4413      	add	r3, r2
 8017532:	687a      	ldr	r2, [r7, #4]
 8017534:	7952      	ldrb	r2, [r2, #5]
 8017536:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	89fb      	ldrh	r3, [r7, #14]
 801753e:	18d0      	adds	r0, r2, r3
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	3306      	adds	r3, #6
 8017544:	2208      	movs	r2, #8
 8017546:	4619      	mov	r1, r3
 8017548:	f002 fc96 	bl	8019e78 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801754c:	89fb      	ldrh	r3, [r7, #14]
 801754e:	3308      	adds	r3, #8
 8017550:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681a      	ldr	r2, [r3, #0]
 8017556:	89fb      	ldrh	r3, [r7, #14]
 8017558:	18d0      	adds	r0, r2, r3
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	330e      	adds	r3, #14
 801755e:	2208      	movs	r2, #8
 8017560:	4619      	mov	r1, r3
 8017562:	f002 fc89 	bl	8019e78 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017566:	89fb      	ldrh	r3, [r7, #14]
 8017568:	3308      	adds	r3, #8
 801756a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	8ad9      	ldrh	r1, [r3, #22]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681a      	ldr	r2, [r3, #0]
 8017574:	89fb      	ldrh	r3, [r7, #14]
 8017576:	1c58      	adds	r0, r3, #1
 8017578:	81f8      	strh	r0, [r7, #14]
 801757a:	4413      	add	r3, r2
 801757c:	b2ca      	uxtb	r2, r1
 801757e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	8adb      	ldrh	r3, [r3, #22]
 8017584:	0a1b      	lsrs	r3, r3, #8
 8017586:	b299      	uxth	r1, r3
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	89fb      	ldrh	r3, [r7, #14]
 801758e:	1c58      	adds	r0, r3, #1
 8017590:	81f8      	strh	r0, [r7, #14]
 8017592:	4413      	add	r3, r2
 8017594:	b2ca      	uxtb	r2, r1
 8017596:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	6999      	ldr	r1, [r3, #24]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	89fb      	ldrh	r3, [r7, #14]
 80175a2:	1c58      	adds	r0, r3, #1
 80175a4:	81f8      	strh	r0, [r7, #14]
 80175a6:	4413      	add	r3, r2
 80175a8:	b2ca      	uxtb	r2, r1
 80175aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	699b      	ldr	r3, [r3, #24]
 80175b0:	0a19      	lsrs	r1, r3, #8
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	89fb      	ldrh	r3, [r7, #14]
 80175b8:	1c58      	adds	r0, r3, #1
 80175ba:	81f8      	strh	r0, [r7, #14]
 80175bc:	4413      	add	r3, r2
 80175be:	b2ca      	uxtb	r2, r1
 80175c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	699b      	ldr	r3, [r3, #24]
 80175c6:	0c19      	lsrs	r1, r3, #16
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681a      	ldr	r2, [r3, #0]
 80175cc:	89fb      	ldrh	r3, [r7, #14]
 80175ce:	1c58      	adds	r0, r3, #1
 80175d0:	81f8      	strh	r0, [r7, #14]
 80175d2:	4413      	add	r3, r2
 80175d4:	b2ca      	uxtb	r2, r1
 80175d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	699b      	ldr	r3, [r3, #24]
 80175dc:	0e19      	lsrs	r1, r3, #24
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	89fb      	ldrh	r3, [r7, #14]
 80175e4:	1c58      	adds	r0, r3, #1
 80175e6:	81f8      	strh	r0, [r7, #14]
 80175e8:	4413      	add	r3, r2
 80175ea:	b2ca      	uxtb	r2, r1
 80175ec:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175ee:	89fb      	ldrh	r3, [r7, #14]
 80175f0:	b2da      	uxtb	r2, r3
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175f6:	2300      	movs	r3, #0
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3710      	adds	r7, #16
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b084      	sub	sp, #16
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d003      	beq.n	8017616 <LoRaMacSerializerData+0x16>
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d101      	bne.n	801761a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017616:	2301      	movs	r3, #1
 8017618:	e0e5      	b.n	80177e6 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801761a:	2300      	movs	r3, #0
 801761c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801761e:	2308      	movs	r3, #8
 8017620:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	7b1b      	ldrb	r3, [r3, #12]
 8017626:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801762a:	b2db      	uxtb	r3, r3
 801762c:	b29a      	uxth	r2, r3
 801762e:	89bb      	ldrh	r3, [r7, #12]
 8017630:	4413      	add	r3, r2
 8017632:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801763a:	2b00      	cmp	r3, #0
 801763c:	d002      	beq.n	8017644 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801763e:	89bb      	ldrh	r3, [r7, #12]
 8017640:	3301      	adds	r3, #1
 8017642:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801764a:	b29a      	uxth	r2, r3
 801764c:	89bb      	ldrh	r3, [r7, #12]
 801764e:	4413      	add	r3, r2
 8017650:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017652:	89bb      	ldrh	r3, [r7, #12]
 8017654:	3304      	adds	r3, #4
 8017656:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	791b      	ldrb	r3, [r3, #4]
 801765c:	b29b      	uxth	r3, r3
 801765e:	89ba      	ldrh	r2, [r7, #12]
 8017660:	429a      	cmp	r2, r3
 8017662:	d901      	bls.n	8017668 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017664:	2302      	movs	r3, #2
 8017666:	e0be      	b.n	80177e6 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	89fb      	ldrh	r3, [r7, #14]
 801766e:	1c59      	adds	r1, r3, #1
 8017670:	81f9      	strh	r1, [r7, #14]
 8017672:	4413      	add	r3, r2
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	7952      	ldrb	r2, [r2, #5]
 8017678:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6899      	ldr	r1, [r3, #8]
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	89fb      	ldrh	r3, [r7, #14]
 8017684:	1c58      	adds	r0, r3, #1
 8017686:	81f8      	strh	r0, [r7, #14]
 8017688:	4413      	add	r3, r2
 801768a:	b2ca      	uxtb	r2, r1
 801768c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	689b      	ldr	r3, [r3, #8]
 8017692:	0a19      	lsrs	r1, r3, #8
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	89fb      	ldrh	r3, [r7, #14]
 801769a:	1c58      	adds	r0, r3, #1
 801769c:	81f8      	strh	r0, [r7, #14]
 801769e:	4413      	add	r3, r2
 80176a0:	b2ca      	uxtb	r2, r1
 80176a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	689b      	ldr	r3, [r3, #8]
 80176a8:	0c19      	lsrs	r1, r3, #16
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	89fb      	ldrh	r3, [r7, #14]
 80176b0:	1c58      	adds	r0, r3, #1
 80176b2:	81f8      	strh	r0, [r7, #14]
 80176b4:	4413      	add	r3, r2
 80176b6:	b2ca      	uxtb	r2, r1
 80176b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	689b      	ldr	r3, [r3, #8]
 80176be:	0e19      	lsrs	r1, r3, #24
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681a      	ldr	r2, [r3, #0]
 80176c4:	89fb      	ldrh	r3, [r7, #14]
 80176c6:	1c58      	adds	r0, r3, #1
 80176c8:	81f8      	strh	r0, [r7, #14]
 80176ca:	4413      	add	r3, r2
 80176cc:	b2ca      	uxtb	r2, r1
 80176ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	681a      	ldr	r2, [r3, #0]
 80176d4:	89fb      	ldrh	r3, [r7, #14]
 80176d6:	1c59      	adds	r1, r3, #1
 80176d8:	81f9      	strh	r1, [r7, #14]
 80176da:	4413      	add	r3, r2
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	7b12      	ldrb	r2, [r2, #12]
 80176e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	89d9      	ldrh	r1, [r3, #14]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681a      	ldr	r2, [r3, #0]
 80176ea:	89fb      	ldrh	r3, [r7, #14]
 80176ec:	1c58      	adds	r0, r3, #1
 80176ee:	81f8      	strh	r0, [r7, #14]
 80176f0:	4413      	add	r3, r2
 80176f2:	b2ca      	uxtb	r2, r1
 80176f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	89db      	ldrh	r3, [r3, #14]
 80176fa:	0a1b      	lsrs	r3, r3, #8
 80176fc:	b299      	uxth	r1, r3
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	681a      	ldr	r2, [r3, #0]
 8017702:	89fb      	ldrh	r3, [r7, #14]
 8017704:	1c58      	adds	r0, r3, #1
 8017706:	81f8      	strh	r0, [r7, #14]
 8017708:	4413      	add	r3, r2
 801770a:	b2ca      	uxtb	r2, r1
 801770c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681a      	ldr	r2, [r3, #0]
 8017712:	89fb      	ldrh	r3, [r7, #14]
 8017714:	18d0      	adds	r0, r2, r3
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f103 0110 	add.w	r1, r3, #16
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	7b1b      	ldrb	r3, [r3, #12]
 8017720:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017724:	b2db      	uxtb	r3, r3
 8017726:	b29b      	uxth	r3, r3
 8017728:	461a      	mov	r2, r3
 801772a:	f002 fb8a 	bl	8019e42 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	7b1b      	ldrb	r3, [r3, #12]
 8017732:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017736:	b2db      	uxtb	r3, r3
 8017738:	b29a      	uxth	r2, r3
 801773a:	89fb      	ldrh	r3, [r7, #14]
 801773c:	4413      	add	r3, r2
 801773e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017746:	2b00      	cmp	r3, #0
 8017748:	d009      	beq.n	801775e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	89fb      	ldrh	r3, [r7, #14]
 8017750:	1c59      	adds	r1, r3, #1
 8017752:	81f9      	strh	r1, [r7, #14]
 8017754:	4413      	add	r3, r2
 8017756:	687a      	ldr	r2, [r7, #4]
 8017758:	f892 2020 	ldrb.w	r2, [r2, #32]
 801775c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	89fb      	ldrh	r3, [r7, #14]
 8017764:	18d0      	adds	r0, r2, r3
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017770:	b29b      	uxth	r3, r3
 8017772:	461a      	mov	r2, r3
 8017774:	f002 fb65 	bl	8019e42 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801777e:	b29a      	uxth	r2, r3
 8017780:	89fb      	ldrh	r3, [r7, #14]
 8017782:	4413      	add	r3, r2
 8017784:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681a      	ldr	r2, [r3, #0]
 801778e:	89fb      	ldrh	r3, [r7, #14]
 8017790:	1c58      	adds	r0, r3, #1
 8017792:	81f8      	strh	r0, [r7, #14]
 8017794:	4413      	add	r3, r2
 8017796:	b2ca      	uxtb	r2, r1
 8017798:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779e:	0a19      	lsrs	r1, r3, #8
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	89fb      	ldrh	r3, [r7, #14]
 80177a6:	1c58      	adds	r0, r3, #1
 80177a8:	81f8      	strh	r0, [r7, #14]
 80177aa:	4413      	add	r3, r2
 80177ac:	b2ca      	uxtb	r2, r1
 80177ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b4:	0c19      	lsrs	r1, r3, #16
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	89fb      	ldrh	r3, [r7, #14]
 80177bc:	1c58      	adds	r0, r3, #1
 80177be:	81f8      	strh	r0, [r7, #14]
 80177c0:	4413      	add	r3, r2
 80177c2:	b2ca      	uxtb	r2, r1
 80177c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ca:	0e19      	lsrs	r1, r3, #24
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681a      	ldr	r2, [r3, #0]
 80177d0:	89fb      	ldrh	r3, [r7, #14]
 80177d2:	1c58      	adds	r0, r3, #1
 80177d4:	81f8      	strh	r0, [r7, #14]
 80177d6:	4413      	add	r3, r2
 80177d8:	b2ca      	uxtb	r2, r1
 80177da:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80177dc:	89fb      	ldrh	r3, [r7, #14]
 80177de:	b2da      	uxtb	r2, r3
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177e4:	2300      	movs	r3, #0
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3710      	adds	r7, #16
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177ee:	b480      	push	{r7}
 80177f0:	b083      	sub	sp, #12
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	4603      	mov	r3, r0
 80177f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177f8:	79fb      	ldrb	r3, [r7, #7]
 80177fa:	2b05      	cmp	r3, #5
 80177fc:	d101      	bne.n	8017802 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177fe:	2301      	movs	r3, #1
 8017800:	e000      	b.n	8017804 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017802:	2300      	movs	r3, #0
        }
    }
}
 8017804:	4618      	mov	r0, r3
 8017806:	370c      	adds	r7, #12
 8017808:	46bd      	mov	sp, r7
 801780a:	bc80      	pop	{r7}
 801780c:	4770      	bx	lr

0801780e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801780e:	b580      	push	{r7, lr}
 8017810:	b084      	sub	sp, #16
 8017812:	af00      	add	r7, sp, #0
 8017814:	4603      	mov	r3, r0
 8017816:	6039      	str	r1, [r7, #0]
 8017818:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801781a:	2300      	movs	r3, #0
 801781c:	60bb      	str	r3, [r7, #8]
    switch( region )
 801781e:	79fb      	ldrb	r3, [r7, #7]
 8017820:	2b05      	cmp	r3, #5
 8017822:	d105      	bne.n	8017830 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017824:	6838      	ldr	r0, [r7, #0]
 8017826:	f001 f995 	bl	8018b54 <RegionEU868GetPhyParam>
 801782a:	4603      	mov	r3, r0
 801782c:	60fb      	str	r3, [r7, #12]
 801782e:	e001      	b.n	8017834 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	4618      	mov	r0, r3
 8017838:	3710      	adds	r7, #16
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}

0801783e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801783e:	b580      	push	{r7, lr}
 8017840:	b082      	sub	sp, #8
 8017842:	af00      	add	r7, sp, #0
 8017844:	4603      	mov	r3, r0
 8017846:	6039      	str	r1, [r7, #0]
 8017848:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801784a:	79fb      	ldrb	r3, [r7, #7]
 801784c:	2b05      	cmp	r3, #5
 801784e:	d103      	bne.n	8017858 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017850:	6838      	ldr	r0, [r7, #0]
 8017852:	f001 facb 	bl	8018dec <RegionEU868SetBandTxDone>
 8017856:	e000      	b.n	801785a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017858:	bf00      	nop
        }
    }
}
 801785a:	3708      	adds	r7, #8
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}

08017860 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	4603      	mov	r3, r0
 8017868:	6039      	str	r1, [r7, #0]
 801786a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801786c:	79fb      	ldrb	r3, [r7, #7]
 801786e:	2b05      	cmp	r3, #5
 8017870:	d103      	bne.n	801787a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017872:	6838      	ldr	r0, [r7, #0]
 8017874:	f001 fae6 	bl	8018e44 <RegionEU868InitDefaults>
 8017878:	e000      	b.n	801787c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801787a:	bf00      	nop
        }
    }
}
 801787c:	bf00      	nop
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	4603      	mov	r3, r0
 801788c:	6039      	str	r1, [r7, #0]
 801788e:	71fb      	strb	r3, [r7, #7]
 8017890:	4613      	mov	r3, r2
 8017892:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017894:	79fb      	ldrb	r3, [r7, #7]
 8017896:	2b05      	cmp	r3, #5
 8017898:	d106      	bne.n	80178a8 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801789a:	79bb      	ldrb	r3, [r7, #6]
 801789c:	4619      	mov	r1, r3
 801789e:	6838      	ldr	r0, [r7, #0]
 80178a0:	f001 fb6e 	bl	8018f80 <RegionEU868Verify>
 80178a4:	4603      	mov	r3, r0
 80178a6:	e000      	b.n	80178aa <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80178a8:	2300      	movs	r3, #0
        }
    }
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	4603      	mov	r3, r0
 80178ba:	6039      	str	r1, [r7, #0]
 80178bc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178be:	79fb      	ldrb	r3, [r7, #7]
 80178c0:	2b05      	cmp	r3, #5
 80178c2:	d103      	bne.n	80178cc <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80178c4:	6838      	ldr	r0, [r7, #0]
 80178c6:	f001 fbd7 	bl	8019078 <RegionEU868ApplyCFList>
 80178ca:	e000      	b.n	80178ce <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80178cc:	bf00      	nop
        }
    }
}
 80178ce:	bf00      	nop
 80178d0:	3708      	adds	r7, #8
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b082      	sub	sp, #8
 80178da:	af00      	add	r7, sp, #0
 80178dc:	4603      	mov	r3, r0
 80178de:	6039      	str	r1, [r7, #0]
 80178e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178e2:	79fb      	ldrb	r3, [r7, #7]
 80178e4:	2b05      	cmp	r3, #5
 80178e6:	d104      	bne.n	80178f2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178e8:	6838      	ldr	r0, [r7, #0]
 80178ea:	f001 fc39 	bl	8019160 <RegionEU868ChanMaskSet>
 80178ee:	4603      	mov	r3, r0
 80178f0:	e000      	b.n	80178f4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80178f2:	2300      	movs	r3, #0
        }
    }
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	603b      	str	r3, [r7, #0]
 8017904:	4603      	mov	r3, r0
 8017906:	71fb      	strb	r3, [r7, #7]
 8017908:	460b      	mov	r3, r1
 801790a:	71bb      	strb	r3, [r7, #6]
 801790c:	4613      	mov	r3, r2
 801790e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017910:	79fb      	ldrb	r3, [r7, #7]
 8017912:	2b05      	cmp	r3, #5
 8017914:	d107      	bne.n	8017926 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017916:	7979      	ldrb	r1, [r7, #5]
 8017918:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	683a      	ldr	r2, [r7, #0]
 8017920:	f001 fc48 	bl	80191b4 <RegionEU868ComputeRxWindowParameters>
 8017924:	e000      	b.n	8017928 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017926:	bf00      	nop
        }
    }
}
 8017928:	bf00      	nop
 801792a:	3708      	adds	r7, #8
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}

08017930 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b084      	sub	sp, #16
 8017934:	af00      	add	r7, sp, #0
 8017936:	4603      	mov	r3, r0
 8017938:	60b9      	str	r1, [r7, #8]
 801793a:	607a      	str	r2, [r7, #4]
 801793c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801793e:	7bfb      	ldrb	r3, [r7, #15]
 8017940:	2b05      	cmp	r3, #5
 8017942:	d105      	bne.n	8017950 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017944:	6879      	ldr	r1, [r7, #4]
 8017946:	68b8      	ldr	r0, [r7, #8]
 8017948:	f001 fc8e 	bl	8019268 <RegionEU868RxConfig>
 801794c:	4603      	mov	r3, r0
 801794e:	e000      	b.n	8017952 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017950:	2300      	movs	r3, #0
        }
    }
}
 8017952:	4618      	mov	r0, r3
 8017954:	3710      	adds	r7, #16
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b084      	sub	sp, #16
 801795e:	af00      	add	r7, sp, #0
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	607a      	str	r2, [r7, #4]
 8017964:	603b      	str	r3, [r7, #0]
 8017966:	4603      	mov	r3, r0
 8017968:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	2b05      	cmp	r3, #5
 801796e:	d106      	bne.n	801797e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017970:	683a      	ldr	r2, [r7, #0]
 8017972:	6879      	ldr	r1, [r7, #4]
 8017974:	68b8      	ldr	r0, [r7, #8]
 8017976:	f001 fd47 	bl	8019408 <RegionEU868TxConfig>
 801797a:	4603      	mov	r3, r0
 801797c:	e000      	b.n	8017980 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801797e:	2300      	movs	r3, #0
        }
    }
}
 8017980:	4618      	mov	r0, r3
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}

08017988 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b086      	sub	sp, #24
 801798c:	af02      	add	r7, sp, #8
 801798e:	60b9      	str	r1, [r7, #8]
 8017990:	607a      	str	r2, [r7, #4]
 8017992:	603b      	str	r3, [r7, #0]
 8017994:	4603      	mov	r3, r0
 8017996:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017998:	7bfb      	ldrb	r3, [r7, #15]
 801799a:	2b05      	cmp	r3, #5
 801799c:	d109      	bne.n	80179b2 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801799e:	69fb      	ldr	r3, [r7, #28]
 80179a0:	9300      	str	r3, [sp, #0]
 80179a2:	69bb      	ldr	r3, [r7, #24]
 80179a4:	683a      	ldr	r2, [r7, #0]
 80179a6:	6879      	ldr	r1, [r7, #4]
 80179a8:	68b8      	ldr	r0, [r7, #8]
 80179aa:	f001 fdfd 	bl	80195a8 <RegionEU868LinkAdrReq>
 80179ae:	4603      	mov	r3, r0
 80179b0:	e000      	b.n	80179b4 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80179b2:	2300      	movs	r3, #0
        }
    }
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3710      	adds	r7, #16
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b082      	sub	sp, #8
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	4603      	mov	r3, r0
 80179c4:	6039      	str	r1, [r7, #0]
 80179c6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179c8:	79fb      	ldrb	r3, [r7, #7]
 80179ca:	2b05      	cmp	r3, #5
 80179cc:	d104      	bne.n	80179d8 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80179ce:	6838      	ldr	r0, [r7, #0]
 80179d0:	f001 ff0c 	bl	80197ec <RegionEU868RxParamSetupReq>
 80179d4:	4603      	mov	r3, r0
 80179d6:	e000      	b.n	80179da <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179d8:	2300      	movs	r3, #0
        }
    }
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3708      	adds	r7, #8
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}

080179e2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b082      	sub	sp, #8
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	4603      	mov	r3, r0
 80179ea:	6039      	str	r1, [r7, #0]
 80179ec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179ee:	79fb      	ldrb	r3, [r7, #7]
 80179f0:	2b05      	cmp	r3, #5
 80179f2:	d104      	bne.n	80179fe <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80179f4:	6838      	ldr	r0, [r7, #0]
 80179f6:	f001 ff37 	bl	8019868 <RegionEU868NewChannelReq>
 80179fa:	4603      	mov	r3, r0
 80179fc:	e000      	b.n	8017a00 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80179fe:	2300      	movs	r3, #0
        }
    }
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3708      	adds	r7, #8
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b082      	sub	sp, #8
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	4603      	mov	r3, r0
 8017a10:	6039      	str	r1, [r7, #0]
 8017a12:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a14:	79fb      	ldrb	r3, [r7, #7]
 8017a16:	2b05      	cmp	r3, #5
 8017a18:	d104      	bne.n	8017a24 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017a1a:	6838      	ldr	r0, [r7, #0]
 8017a1c:	f001 ff82 	bl	8019924 <RegionEU868TxParamSetupReq>
 8017a20:	4603      	mov	r3, r0
 8017a22:	e000      	b.n	8017a26 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017a24:	2300      	movs	r3, #0
        }
    }
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3708      	adds	r7, #8
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}

08017a2e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017a2e:	b580      	push	{r7, lr}
 8017a30:	b082      	sub	sp, #8
 8017a32:	af00      	add	r7, sp, #0
 8017a34:	4603      	mov	r3, r0
 8017a36:	6039      	str	r1, [r7, #0]
 8017a38:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a3a:	79fb      	ldrb	r3, [r7, #7]
 8017a3c:	2b05      	cmp	r3, #5
 8017a3e:	d104      	bne.n	8017a4a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017a40:	6838      	ldr	r0, [r7, #0]
 8017a42:	f001 ff7b 	bl	801993c <RegionEU868DlChannelReq>
 8017a46:	4603      	mov	r3, r0
 8017a48:	e000      	b.n	8017a4c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a4a:	2300      	movs	r3, #0
        }
    }
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3708      	adds	r7, #8
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}

08017a54 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	71fb      	strb	r3, [r7, #7]
 8017a5e:	460b      	mov	r3, r1
 8017a60:	71bb      	strb	r3, [r7, #6]
 8017a62:	4613      	mov	r3, r2
 8017a64:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017a66:	79fb      	ldrb	r3, [r7, #7]
 8017a68:	2b05      	cmp	r3, #5
 8017a6a:	d108      	bne.n	8017a7e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017a6c:	797a      	ldrb	r2, [r7, #5]
 8017a6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a72:	4611      	mov	r1, r2
 8017a74:	4618      	mov	r0, r3
 8017a76:	f001 ffab 	bl	80199d0 <RegionEU868AlternateDr>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	e000      	b.n	8017a80 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017a7e:	2300      	movs	r3, #0
        }
    }
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3708      	adds	r7, #8
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b084      	sub	sp, #16
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	60b9      	str	r1, [r7, #8]
 8017a90:	607a      	str	r2, [r7, #4]
 8017a92:	603b      	str	r3, [r7, #0]
 8017a94:	4603      	mov	r3, r0
 8017a96:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a98:	7bfb      	ldrb	r3, [r7, #15]
 8017a9a:	2b05      	cmp	r3, #5
 8017a9c:	d107      	bne.n	8017aae <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017a9e:	69bb      	ldr	r3, [r7, #24]
 8017aa0:	683a      	ldr	r2, [r7, #0]
 8017aa2:	6879      	ldr	r1, [r7, #4]
 8017aa4:	68b8      	ldr	r0, [r7, #8]
 8017aa6:	f001 ffa3 	bl	80199f0 <RegionEU868NextChannel>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	e000      	b.n	8017ab0 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017aae:	2309      	movs	r3, #9
        }
    }
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3710      	adds	r7, #16
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	4603      	mov	r3, r0
 8017ac0:	6039      	str	r1, [r7, #0]
 8017ac2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ac4:	79fb      	ldrb	r3, [r7, #7]
 8017ac6:	2b05      	cmp	r3, #5
 8017ac8:	d103      	bne.n	8017ad2 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017aca:	6838      	ldr	r0, [r7, #0]
 8017acc:	f002 f90a 	bl	8019ce4 <RegionEU868SetContinuousWave>
 8017ad0:	e000      	b.n	8017ad4 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017ad2:	bf00      	nop
        }
    }
}
 8017ad4:	bf00      	nop
 8017ad6:	3708      	adds	r7, #8
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}

08017adc <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017adc:	b590      	push	{r4, r7, lr}
 8017ade:	b083      	sub	sp, #12
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	4608      	mov	r0, r1
 8017ae6:	4611      	mov	r1, r2
 8017ae8:	461a      	mov	r2, r3
 8017aea:	4623      	mov	r3, r4
 8017aec:	71fb      	strb	r3, [r7, #7]
 8017aee:	4603      	mov	r3, r0
 8017af0:	71bb      	strb	r3, [r7, #6]
 8017af2:	460b      	mov	r3, r1
 8017af4:	717b      	strb	r3, [r7, #5]
 8017af6:	4613      	mov	r3, r2
 8017af8:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017afa:	79fb      	ldrb	r3, [r7, #7]
 8017afc:	2b05      	cmp	r3, #5
 8017afe:	d109      	bne.n	8017b14 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017b00:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017b04:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017b08:	79bb      	ldrb	r3, [r7, #6]
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f002 f938 	bl	8019d80 <RegionEU868ApplyDrOffset>
 8017b10:	4603      	mov	r3, r0
 8017b12:	e000      	b.n	8017b16 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017b14:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	370c      	adds	r7, #12
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd90      	pop	{r4, r7, pc}
	...

08017b20 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017b26:	4b04      	ldr	r3, [pc, #16]	; (8017b38 <RegionGetVersion+0x18>)
 8017b28:	607b      	str	r3, [r7, #4]

    return version;
 8017b2a:	687b      	ldr	r3, [r7, #4]
}
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	370c      	adds	r7, #12
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bc80      	pop	{r7}
 8017b34:	4770      	bx	lr
 8017b36:	bf00      	nop
 8017b38:	01010003 	.word	0x01010003

08017b3c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	b087      	sub	sp, #28
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	4608      	mov	r0, r1
 8017b46:	4639      	mov	r1, r7
 8017b48:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	881b      	ldrh	r3, [r3, #0]
 8017b54:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017b56:	7afb      	ldrb	r3, [r7, #11]
 8017b58:	f083 0301 	eor.w	r3, r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d01b      	beq.n	8017b9a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b62:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b66:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017b6e:	d202      	bcs.n	8017b76 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017b70:	2364      	movs	r3, #100	; 0x64
 8017b72:	82bb      	strh	r3, [r7, #20]
 8017b74:	e00b      	b.n	8017b8e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017b76:	683b      	ldr	r3, [r7, #0]
 8017b78:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d803      	bhi.n	8017b88 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b84:	82bb      	strh	r3, [r7, #20]
 8017b86:	e002      	b.n	8017b8e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b88:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b8c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017b8e:	8aba      	ldrh	r2, [r7, #20]
 8017b90:	8afb      	ldrh	r3, [r7, #22]
 8017b92:	4293      	cmp	r3, r2
 8017b94:	bf38      	it	cc
 8017b96:	4613      	movcc	r3, r2
 8017b98:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017b9a:	8afb      	ldrh	r3, [r7, #22]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d101      	bne.n	8017ba4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017ba4:	8afb      	ldrh	r3, [r7, #22]
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	371c      	adds	r7, #28
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bc80      	pop	{r7}
 8017bae:	4770      	bx	lr

08017bb0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b08e      	sub	sp, #56	; 0x38
 8017bb4:	af02      	add	r7, sp, #8
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	4608      	mov	r0, r1
 8017bba:	4639      	mov	r1, r7
 8017bbc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	881b      	ldrh	r3, [r3, #0]
 8017bc8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017bca:	4b4b      	ldr	r3, [pc, #300]	; (8017cf8 <SetMaxTimeCredits+0x148>)
 8017bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017bce:	463b      	mov	r3, r7
 8017bd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bd4:	f005 fdc0 	bl	801d758 <SysTimeToMs>
 8017bd8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017bda:	f107 0314 	add.w	r3, r7, #20
 8017bde:	2200      	movs	r2, #0
 8017be0:	601a      	str	r2, [r3, #0]
 8017be2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017be4:	7af9      	ldrb	r1, [r7, #11]
 8017be6:	463b      	mov	r3, r7
 8017be8:	cb0c      	ldmia	r3, {r2, r3}
 8017bea:	68f8      	ldr	r0, [r7, #12]
 8017bec:	f7ff ffa6 	bl	8017b3c <GetDutyCycle>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017bf4:	7afb      	ldrb	r3, [r7, #11]
 8017bf6:	f083 0301 	eor.w	r3, r3, #1
 8017bfa:	b2db      	uxtb	r3, r3
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d062      	beq.n	8017cc6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017c00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c02:	2b64      	cmp	r3, #100	; 0x64
 8017c04:	d105      	bne.n	8017c12 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017c06:	4b3c      	ldr	r3, [pc, #240]	; (8017cf8 <SetMaxTimeCredits+0x148>)
 8017c08:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c0e:	609a      	str	r2, [r3, #8]
 8017c10:	e00b      	b.n	8017c2a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017c12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c18:	d105      	bne.n	8017c26 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017c1a:	4b38      	ldr	r3, [pc, #224]	; (8017cfc <SetMaxTimeCredits+0x14c>)
 8017c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c22:	609a      	str	r2, [r3, #8]
 8017c24:	e001      	b.n	8017c2a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017c26:	4b36      	ldr	r3, [pc, #216]	; (8017d00 <SetMaxTimeCredits+0x150>)
 8017c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	689a      	ldr	r2, [r3, #8]
 8017c2e:	f107 031c 	add.w	r3, r7, #28
 8017c32:	4611      	mov	r1, r2
 8017c34:	4618      	mov	r0, r3
 8017c36:	f005 fdb7 	bl	801d7a8 <SysTimeFromMs>
 8017c3a:	f107 0014 	add.w	r0, r7, #20
 8017c3e:	6a3b      	ldr	r3, [r7, #32]
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	69fb      	ldr	r3, [r7, #28]
 8017c44:	463a      	mov	r2, r7
 8017c46:	ca06      	ldmia	r2, {r1, r2}
 8017c48:	f005 fcc7 	bl	801d5da <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c50:	f083 0301 	eor.w	r3, r3, #1
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d006      	beq.n	8017c68 <SetMaxTimeCredits+0xb8>
 8017c5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017c5e:	f083 0301 	eor.w	r3, r3, #1
 8017c62:	b2db      	uxtb	r3, r3
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d108      	bne.n	8017c7a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d103      	bne.n	8017c7a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017c72:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c74:	4a23      	ldr	r2, [pc, #140]	; (8017d04 <SetMaxTimeCredits+0x154>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d92f      	bls.n	8017cda <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c7e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	4a21      	ldr	r2, [pc, #132]	; (8017d08 <SetMaxTimeCredits+0x158>)
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d928      	bls.n	8017cda <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c8e:	3b30      	subs	r3, #48	; 0x30
 8017c90:	4a1e      	ldr	r2, [pc, #120]	; (8017d0c <SetMaxTimeCredits+0x15c>)
 8017c92:	fba2 2303 	umull	r2, r3, r2, r3
 8017c96:	0c1b      	lsrs	r3, r3, #16
 8017c98:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	4a1c      	ldr	r2, [pc, #112]	; (8017d10 <SetMaxTimeCredits+0x160>)
 8017c9e:	fb02 f303 	mul.w	r3, r2, r3
 8017ca2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017caa:	3330      	adds	r3, #48	; 0x30
 8017cac:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017cb2:	f107 0314 	add.w	r3, r7, #20
 8017cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017cba:	f005 fd4d 	bl	801d758 <SysTimeToMs>
 8017cbe:	4602      	mov	r2, r0
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	609a      	str	r2, [r3, #8]
 8017cc4:	e009      	b.n	8017cda <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017cc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017cca:	f083 0301 	eor.w	r3, r3, #1
 8017cce:	b2db      	uxtb	r3, r3
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d002      	beq.n	8017cda <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cd8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	685b      	ldr	r3, [r3, #4]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d102      	bne.n	8017ce8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ce6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cec:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017cee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3730      	adds	r7, #48	; 0x30
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	001b7740 	.word	0x001b7740
 8017cfc:	0112a880 	.word	0x0112a880
 8017d00:	02932e00 	.word	0x02932e00
 8017d04:	0001517f 	.word	0x0001517f
 8017d08:	0001ec2f 	.word	0x0001ec2f
 8017d0c:	c22e4507 	.word	0xc22e4507
 8017d10:	00015180 	.word	0x00015180

08017d14 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b086      	sub	sp, #24
 8017d18:	af02      	add	r7, sp, #8
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	4608      	mov	r0, r1
 8017d1e:	4611      	mov	r1, r2
 8017d20:	461a      	mov	r2, r3
 8017d22:	4603      	mov	r3, r0
 8017d24:	70fb      	strb	r3, [r7, #3]
 8017d26:	460b      	mov	r3, r1
 8017d28:	70bb      	strb	r3, [r7, #2]
 8017d2a:	4613      	mov	r3, r2
 8017d2c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017d2e:	78f9      	ldrb	r1, [r7, #3]
 8017d30:	787b      	ldrb	r3, [r7, #1]
 8017d32:	9301      	str	r3, [sp, #4]
 8017d34:	78bb      	ldrb	r3, [r7, #2]
 8017d36:	9300      	str	r3, [sp, #0]
 8017d38:	f107 0318 	add.w	r3, r7, #24
 8017d3c:	cb0c      	ldmia	r3, {r2, r3}
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7ff ff36 	bl	8017bb0 <SetMaxTimeCredits>
 8017d44:	4603      	mov	r3, r0
 8017d46:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017d48:	78fb      	ldrb	r3, [r7, #3]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d00a      	beq.n	8017d64 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	4618      	mov	r0, r3
 8017d54:	f006 fb3c 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 8017d58:	4602      	mov	r2, r0
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	68db      	ldr	r3, [r3, #12]
 8017d5e:	441a      	add	r2, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	68da      	ldr	r2, [r3, #12]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	691b      	ldr	r3, [r3, #16]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d903      	bls.n	8017d78 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	691a      	ldr	r2, [r3, #16]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	6a3a      	ldr	r2, [r7, #32]
 8017d7c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b085      	sub	sp, #20
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	4603      	mov	r3, r0
 8017d90:	460a      	mov	r2, r1
 8017d92:	80fb      	strh	r3, [r7, #6]
 8017d94:	4613      	mov	r3, r2
 8017d96:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	73bb      	strb	r3, [r7, #14]
 8017da0:	e011      	b.n	8017dc6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017da2:	88fa      	ldrh	r2, [r7, #6]
 8017da4:	7bbb      	ldrb	r3, [r7, #14]
 8017da6:	2101      	movs	r1, #1
 8017da8:	fa01 f303 	lsl.w	r3, r1, r3
 8017dac:	401a      	ands	r2, r3
 8017dae:	7bbb      	ldrb	r3, [r7, #14]
 8017db0:	2101      	movs	r1, #1
 8017db2:	fa01 f303 	lsl.w	r3, r1, r3
 8017db6:	429a      	cmp	r2, r3
 8017db8:	d102      	bne.n	8017dc0 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017dba:	7bfb      	ldrb	r3, [r7, #15]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	73bb      	strb	r3, [r7, #14]
 8017dc6:	7bba      	ldrb	r2, [r7, #14]
 8017dc8:	797b      	ldrb	r3, [r7, #5]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d3e9      	bcc.n	8017da2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3714      	adds	r7, #20
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bc80      	pop	{r7}
 8017dd8:	4770      	bx	lr

08017dda <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017dda:	b580      	push	{r7, lr}
 8017ddc:	b084      	sub	sp, #16
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6039      	str	r1, [r7, #0]
 8017de2:	4611      	mov	r1, r2
 8017de4:	461a      	mov	r2, r3
 8017de6:	4603      	mov	r3, r0
 8017de8:	71fb      	strb	r3, [r7, #7]
 8017dea:	460b      	mov	r3, r1
 8017dec:	71bb      	strb	r3, [r7, #6]
 8017dee:	4613      	mov	r3, r2
 8017df0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017df2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017df6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017dfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 f85d 	bl	8017ebe <RegionCommonValueInRange>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d101      	bne.n	8017e0e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e053      	b.n	8017eb6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017e0e:	2300      	movs	r3, #0
 8017e10:	73fb      	strb	r3, [r7, #15]
 8017e12:	2300      	movs	r3, #0
 8017e14:	73bb      	strb	r3, [r7, #14]
 8017e16:	e049      	b.n	8017eac <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017e18:	2300      	movs	r3, #0
 8017e1a:	737b      	strb	r3, [r7, #13]
 8017e1c:	e03d      	b.n	8017e9a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017e1e:	7bbb      	ldrb	r3, [r7, #14]
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	683a      	ldr	r2, [r7, #0]
 8017e24:	4413      	add	r3, r2
 8017e26:	881b      	ldrh	r3, [r3, #0]
 8017e28:	461a      	mov	r2, r3
 8017e2a:	7b7b      	ldrb	r3, [r7, #13]
 8017e2c:	fa42 f303 	asr.w	r3, r2, r3
 8017e30:	f003 0301 	and.w	r3, r3, #1
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d02d      	beq.n	8017e94 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e38:	7bfa      	ldrb	r2, [r7, #15]
 8017e3a:	7b7b      	ldrb	r3, [r7, #13]
 8017e3c:	4413      	add	r3, r2
 8017e3e:	461a      	mov	r2, r3
 8017e40:	4613      	mov	r3, r2
 8017e42:	005b      	lsls	r3, r3, #1
 8017e44:	4413      	add	r3, r2
 8017e46:	009b      	lsls	r3, r3, #2
 8017e48:	461a      	mov	r2, r3
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	7a1b      	ldrb	r3, [r3, #8]
 8017e50:	f343 0303 	sbfx	r3, r3, #0, #4
 8017e54:	b25b      	sxtb	r3, r3
 8017e56:	f003 030f 	and.w	r3, r3, #15
 8017e5a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017e5c:	7bfa      	ldrb	r2, [r7, #15]
 8017e5e:	7b7b      	ldrb	r3, [r7, #13]
 8017e60:	4413      	add	r3, r2
 8017e62:	461a      	mov	r2, r3
 8017e64:	4613      	mov	r3, r2
 8017e66:	005b      	lsls	r3, r3, #1
 8017e68:	4413      	add	r3, r2
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	69fb      	ldr	r3, [r7, #28]
 8017e70:	4413      	add	r3, r2
 8017e72:	7a1b      	ldrb	r3, [r3, #8]
 8017e74:	f343 1303 	sbfx	r3, r3, #4, #4
 8017e78:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e7a:	f003 030f 	and.w	r3, r3, #15
 8017e7e:	b25a      	sxtb	r2, r3
 8017e80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e84:	4618      	mov	r0, r3
 8017e86:	f000 f81a 	bl	8017ebe <RegionCommonValueInRange>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b01      	cmp	r3, #1
 8017e8e:	d101      	bne.n	8017e94 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017e90:	2301      	movs	r3, #1
 8017e92:	e010      	b.n	8017eb6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017e94:	7b7b      	ldrb	r3, [r7, #13]
 8017e96:	3301      	adds	r3, #1
 8017e98:	737b      	strb	r3, [r7, #13]
 8017e9a:	7b7b      	ldrb	r3, [r7, #13]
 8017e9c:	2b0f      	cmp	r3, #15
 8017e9e:	d9be      	bls.n	8017e1e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017ea0:	7bfb      	ldrb	r3, [r7, #15]
 8017ea2:	3310      	adds	r3, #16
 8017ea4:	73fb      	strb	r3, [r7, #15]
 8017ea6:	7bbb      	ldrb	r3, [r7, #14]
 8017ea8:	3301      	adds	r3, #1
 8017eaa:	73bb      	strb	r3, [r7, #14]
 8017eac:	7bfa      	ldrb	r2, [r7, #15]
 8017eae:	79fb      	ldrb	r3, [r7, #7]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d3b1      	bcc.n	8017e18 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017eb4:	2300      	movs	r3, #0
}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3710      	adds	r7, #16
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}

08017ebe <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017ebe:	b480      	push	{r7}
 8017ec0:	b083      	sub	sp, #12
 8017ec2:	af00      	add	r7, sp, #0
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	71fb      	strb	r3, [r7, #7]
 8017ec8:	460b      	mov	r3, r1
 8017eca:	71bb      	strb	r3, [r7, #6]
 8017ecc:	4613      	mov	r3, r2
 8017ece:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017ed0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017ed4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	db07      	blt.n	8017eec <RegionCommonValueInRange+0x2e>
 8017edc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017ee0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	dc01      	bgt.n	8017eec <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017ee8:	2301      	movs	r3, #1
 8017eea:	e000      	b.n	8017eee <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017eec:	2300      	movs	r3, #0
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	370c      	adds	r7, #12
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bc80      	pop	{r7}
 8017ef6:	4770      	bx	lr

08017ef8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b085      	sub	sp, #20
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	460b      	mov	r3, r1
 8017f02:	70fb      	strb	r3, [r7, #3]
 8017f04:	4613      	mov	r3, r2
 8017f06:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017f08:	78fb      	ldrb	r3, [r7, #3]
 8017f0a:	091b      	lsrs	r3, r3, #4
 8017f0c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017f0e:	78bb      	ldrb	r3, [r7, #2]
 8017f10:	091b      	lsrs	r3, r3, #4
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	7bfa      	ldrb	r2, [r7, #15]
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d803      	bhi.n	8017f22 <RegionCommonChanDisable+0x2a>
 8017f1a:	78fa      	ldrb	r2, [r7, #3]
 8017f1c:	78bb      	ldrb	r3, [r7, #2]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d301      	bcc.n	8017f26 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017f22:	2300      	movs	r3, #0
 8017f24:	e017      	b.n	8017f56 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017f26:	7bfb      	ldrb	r3, [r7, #15]
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	4413      	add	r3, r2
 8017f2e:	881b      	ldrh	r3, [r3, #0]
 8017f30:	b21a      	sxth	r2, r3
 8017f32:	78fb      	ldrb	r3, [r7, #3]
 8017f34:	f003 030f 	and.w	r3, r3, #15
 8017f38:	2101      	movs	r1, #1
 8017f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8017f3e:	b21b      	sxth	r3, r3
 8017f40:	43db      	mvns	r3, r3
 8017f42:	b21b      	sxth	r3, r3
 8017f44:	4013      	ands	r3, r2
 8017f46:	b219      	sxth	r1, r3
 8017f48:	7bfb      	ldrb	r3, [r7, #15]
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	687a      	ldr	r2, [r7, #4]
 8017f4e:	4413      	add	r3, r2
 8017f50:	b28a      	uxth	r2, r1
 8017f52:	801a      	strh	r2, [r3, #0]

    return true;
 8017f54:	2301      	movs	r3, #1
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3714      	adds	r7, #20
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bc80      	pop	{r7}
 8017f5e:	4770      	bx	lr

08017f60 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	460b      	mov	r3, r1
 8017f6a:	70fb      	strb	r3, [r7, #3]
 8017f6c:	4613      	mov	r3, r2
 8017f6e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017f70:	2300      	movs	r3, #0
 8017f72:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	e018      	b.n	8017fb0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f7e:	78fb      	ldrb	r3, [r7, #3]
 8017f80:	73bb      	strb	r3, [r7, #14]
 8017f82:	e010      	b.n	8017fa6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017f84:	7bbb      	ldrb	r3, [r7, #14]
 8017f86:	005b      	lsls	r3, r3, #1
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	4413      	add	r3, r2
 8017f8c:	881b      	ldrh	r3, [r3, #0]
 8017f8e:	2110      	movs	r1, #16
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7ff fef9 	bl	8017d88 <CountChannels>
 8017f96:	4603      	mov	r3, r0
 8017f98:	461a      	mov	r2, r3
 8017f9a:	7bfb      	ldrb	r3, [r7, #15]
 8017f9c:	4413      	add	r3, r2
 8017f9e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017fa0:	7bbb      	ldrb	r3, [r7, #14]
 8017fa2:	3301      	adds	r3, #1
 8017fa4:	73bb      	strb	r3, [r7, #14]
 8017fa6:	7bba      	ldrb	r2, [r7, #14]
 8017fa8:	78bb      	ldrb	r3, [r7, #2]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d3ea      	bcc.n	8017f84 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3710      	adds	r7, #16
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017fb8:	b480      	push	{r7}
 8017fba:	b087      	sub	sp, #28
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	60f8      	str	r0, [r7, #12]
 8017fc0:	60b9      	str	r1, [r7, #8]
 8017fc2:	4613      	mov	r3, r2
 8017fc4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d016      	beq.n	8017ffa <RegionCommonChanMaskCopy+0x42>
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d013      	beq.n	8017ffa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	75fb      	strb	r3, [r7, #23]
 8017fd6:	e00c      	b.n	8017ff2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017fd8:	7dfb      	ldrb	r3, [r7, #23]
 8017fda:	005b      	lsls	r3, r3, #1
 8017fdc:	68ba      	ldr	r2, [r7, #8]
 8017fde:	441a      	add	r2, r3
 8017fe0:	7dfb      	ldrb	r3, [r7, #23]
 8017fe2:	005b      	lsls	r3, r3, #1
 8017fe4:	68f9      	ldr	r1, [r7, #12]
 8017fe6:	440b      	add	r3, r1
 8017fe8:	8812      	ldrh	r2, [r2, #0]
 8017fea:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017fec:	7dfb      	ldrb	r3, [r7, #23]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	75fb      	strb	r3, [r7, #23]
 8017ff2:	7dfa      	ldrb	r2, [r7, #23]
 8017ff4:	79fb      	ldrb	r3, [r7, #7]
 8017ff6:	429a      	cmp	r2, r3
 8017ff8:	d3ee      	bcc.n	8017fd8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017ffa:	bf00      	nop
 8017ffc:	371c      	adds	r7, #28
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bc80      	pop	{r7}
 8018002:	4770      	bx	lr

08018004 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8018004:	b082      	sub	sp, #8
 8018006:	b580      	push	{r7, lr}
 8018008:	b086      	sub	sp, #24
 801800a:	af00      	add	r7, sp, #0
 801800c:	60f8      	str	r0, [r7, #12]
 801800e:	60b9      	str	r1, [r7, #8]
 8018010:	627b      	str	r3, [r7, #36]	; 0x24
 8018012:	4613      	mov	r3, r2
 8018014:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8018016:	79f9      	ldrb	r1, [r7, #7]
 8018018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801801c:	cb0c      	ldmia	r3, {r2, r3}
 801801e:	68f8      	ldr	r0, [r7, #12]
 8018020:	f7ff fd8c 	bl	8017b3c <GetDutyCycle>
 8018024:	4603      	mov	r3, r0
 8018026:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	68da      	ldr	r2, [r3, #12]
 801802c:	8afb      	ldrh	r3, [r7, #22]
 801802e:	68b9      	ldr	r1, [r7, #8]
 8018030:	fb01 f303 	mul.w	r3, r1, r3
 8018034:	429a      	cmp	r2, r3
 8018036:	d909      	bls.n	801804c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	68da      	ldr	r2, [r3, #12]
 801803c:	8afb      	ldrh	r3, [r7, #22]
 801803e:	68b9      	ldr	r1, [r7, #8]
 8018040:	fb01 f303 	mul.w	r3, r1, r3
 8018044:	1ad2      	subs	r2, r2, r3
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801804a:	e002      	b.n	8018052 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	2200      	movs	r2, #0
 8018050:	60da      	str	r2, [r3, #12]
}
 8018052:	bf00      	nop
 8018054:	3718      	adds	r7, #24
 8018056:	46bd      	mov	sp, r7
 8018058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801805c:	b002      	add	sp, #8
 801805e:	4770      	bx	lr

08018060 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018062:	b08f      	sub	sp, #60	; 0x3c
 8018064:	af04      	add	r7, sp, #16
 8018066:	6039      	str	r1, [r7, #0]
 8018068:	4611      	mov	r1, r2
 801806a:	461a      	mov	r2, r3
 801806c:	4603      	mov	r3, r0
 801806e:	71fb      	strb	r3, [r7, #7]
 8018070:	460b      	mov	r3, r1
 8018072:	71bb      	strb	r3, [r7, #6]
 8018074:	4613      	mov	r3, r2
 8018076:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018078:	f04f 33ff 	mov.w	r3, #4294967295
 801807c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801807e:	f006 f995 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8018082:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018084:	2300      	movs	r3, #0
 8018086:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018088:	2301      	movs	r3, #1
 801808a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801808c:	2300      	movs	r3, #0
 801808e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018092:	2300      	movs	r3, #0
 8018094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018098:	e0ba      	b.n	8018210 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801809a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801809e:	4613      	mov	r3, r2
 80180a0:	005b      	lsls	r3, r3, #1
 80180a2:	4413      	add	r3, r2
 80180a4:	00db      	lsls	r3, r3, #3
 80180a6:	461a      	mov	r2, r3
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	189c      	adds	r4, r3, r2
 80180ac:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80180b0:	797a      	ldrb	r2, [r7, #5]
 80180b2:	79fd      	ldrb	r5, [r7, #7]
 80180b4:	69fb      	ldr	r3, [r7, #28]
 80180b6:	9302      	str	r3, [sp, #8]
 80180b8:	46ec      	mov	ip, sp
 80180ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80180be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80180c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80180c6:	4633      	mov	r3, r6
 80180c8:	4629      	mov	r1, r5
 80180ca:	4620      	mov	r0, r4
 80180cc:	f7ff fe22 	bl	8017d14 <UpdateTimeCredits>
 80180d0:	4603      	mov	r3, r0
 80180d2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80180d4:	8afa      	ldrh	r2, [r7, #22]
 80180d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180d8:	fb02 f303 	mul.w	r3, r2, r3
 80180dc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180e2:	4613      	mov	r3, r2
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	4413      	add	r3, r2
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	461a      	mov	r2, r3
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	4413      	add	r3, r2
 80180f0:	68db      	ldr	r3, [r3, #12]
 80180f2:	69ba      	ldr	r2, [r7, #24]
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d908      	bls.n	801810a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180f8:	797b      	ldrb	r3, [r7, #5]
 80180fa:	f083 0301 	eor.w	r3, r3, #1
 80180fe:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018100:	2b00      	cmp	r3, #0
 8018102:	d013      	beq.n	801812c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018104:	79fb      	ldrb	r3, [r7, #7]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d010      	beq.n	801812c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801810a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801810e:	4613      	mov	r3, r2
 8018110:	005b      	lsls	r3, r3, #1
 8018112:	4413      	add	r3, r2
 8018114:	00db      	lsls	r3, r3, #3
 8018116:	461a      	mov	r2, r3
 8018118:	683b      	ldr	r3, [r7, #0]
 801811a:	4413      	add	r3, r2
 801811c:	2201      	movs	r2, #1
 801811e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018124:	3301      	adds	r3, #1
 8018126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801812a:	e06c      	b.n	8018206 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801812c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018130:	4613      	mov	r3, r2
 8018132:	005b      	lsls	r3, r3, #1
 8018134:	4413      	add	r3, r2
 8018136:	00db      	lsls	r3, r3, #3
 8018138:	461a      	mov	r2, r3
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	4413      	add	r3, r2
 801813e:	2200      	movs	r2, #0
 8018140:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018142:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018146:	4613      	mov	r3, r2
 8018148:	005b      	lsls	r3, r3, #1
 801814a:	4413      	add	r3, r2
 801814c:	00db      	lsls	r3, r3, #3
 801814e:	461a      	mov	r2, r3
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	4413      	add	r3, r2
 8018154:	691b      	ldr	r3, [r3, #16]
 8018156:	69ba      	ldr	r2, [r7, #24]
 8018158:	429a      	cmp	r2, r3
 801815a:	d815      	bhi.n	8018188 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801815c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018160:	4613      	mov	r3, r2
 8018162:	005b      	lsls	r3, r3, #1
 8018164:	4413      	add	r3, r2
 8018166:	00db      	lsls	r3, r3, #3
 8018168:	461a      	mov	r2, r3
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	4413      	add	r3, r2
 801816e:	68db      	ldr	r3, [r3, #12]
 8018170:	69ba      	ldr	r2, [r7, #24]
 8018172:	1ad3      	subs	r3, r2, r3
 8018174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018176:	4293      	cmp	r3, r2
 8018178:	bf28      	it	cs
 801817a:	4613      	movcs	r3, r2
 801817c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801817e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018182:	3301      	adds	r3, #1
 8018184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018188:	79fb      	ldrb	r3, [r7, #7]
 801818a:	f083 0301 	eor.w	r3, r3, #1
 801818e:	b2db      	uxtb	r3, r3
 8018190:	2b00      	cmp	r3, #0
 8018192:	d038      	beq.n	8018206 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018194:	2300      	movs	r3, #0
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	2300      	movs	r3, #0
 801819a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801819c:	8afb      	ldrh	r3, [r7, #22]
 801819e:	2b64      	cmp	r3, #100	; 0x64
 80181a0:	d103      	bne.n	80181aa <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80181a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80181a6:	60fb      	str	r3, [r7, #12]
 80181a8:	e009      	b.n	80181be <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80181aa:	8afb      	ldrh	r3, [r7, #22]
 80181ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80181b0:	d103      	bne.n	80181ba <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80181b2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80181b6:	60fb      	str	r3, [r7, #12]
 80181b8:	e001      	b.n	80181be <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80181ba:	4b1e      	ldr	r3, [pc, #120]	; (8018234 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80181bc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80181be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c0:	4a1c      	ldr	r2, [pc, #112]	; (8018234 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d90e      	bls.n	80181e4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80181c6:	68fa      	ldr	r2, [r7, #12]
 80181c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ca:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80181ce:	3b30      	subs	r3, #48	; 0x30
 80181d0:	4919      	ldr	r1, [pc, #100]	; (8018238 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80181d2:	fba1 1303 	umull	r1, r3, r1, r3
 80181d6:	0c1b      	lsrs	r3, r3, #16
 80181d8:	3301      	adds	r3, #1
 80181da:	4918      	ldr	r1, [pc, #96]	; (801823c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80181dc:	fb01 f303 	mul.w	r3, r1, r3
 80181e0:	4413      	add	r3, r2
 80181e2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80181e4:	f107 000c 	add.w	r0, r7, #12
 80181e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181ea:	9300      	str	r3, [sp, #0]
 80181ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ee:	f107 020c 	add.w	r2, r7, #12
 80181f2:	ca06      	ldmia	r2, {r1, r2}
 80181f4:	f005 f9f1 	bl	801d5da <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80181f8:	f107 030c 	add.w	r3, r7, #12
 80181fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018200:	f005 faaa 	bl	801d758 <SysTimeToMs>
 8018204:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8018206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801820a:	3301      	adds	r3, #1
 801820c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018210:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018214:	79bb      	ldrb	r3, [r7, #6]
 8018216:	429a      	cmp	r2, r3
 8018218:	f4ff af3f 	bcc.w	801809a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801821c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018220:	2b00      	cmp	r3, #0
 8018222:	d102      	bne.n	801822a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018224:	f04f 33ff 	mov.w	r3, #4294967295
 8018228:	e000      	b.n	801822c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801822c:	4618      	mov	r0, r3
 801822e:	372c      	adds	r7, #44	; 0x2c
 8018230:	46bd      	mov	sp, r7
 8018232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018234:	0001ec30 	.word	0x0001ec30
 8018238:	c22e4507 	.word	0xc22e4507
 801823c:	00015180 	.word	0x00015180

08018240 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018240:	b480      	push	{r7}
 8018242:	b085      	sub	sp, #20
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801824a:	2300      	movs	r3, #0
 801824c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	2b03      	cmp	r3, #3
 8018254:	d13f      	bne.n	80182d6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	3301      	adds	r3, #1
 801825a:	781b      	ldrb	r3, [r3, #0]
 801825c:	b25a      	sxtb	r2, r3
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018268:	f003 030f 	and.w	r3, r3, #15
 801826c:	b25a      	sxtb	r2, r3
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018278:	b2db      	uxtb	r3, r3
 801827a:	091b      	lsrs	r3, r3, #4
 801827c:	b2db      	uxtb	r3, r3
 801827e:	b25a      	sxtb	r2, r3
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	3302      	adds	r3, #2
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	b29a      	uxth	r2, r3
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	889b      	ldrh	r3, [r3, #4]
 8018294:	b21a      	sxth	r2, r3
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	3303      	adds	r3, #3
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	021b      	lsls	r3, r3, #8
 801829e:	b21b      	sxth	r3, r3
 80182a0:	4313      	orrs	r3, r2
 80182a2:	b21b      	sxth	r3, r3
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	791a      	ldrb	r2, [r3, #4]
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80182b2:	683b      	ldr	r3, [r7, #0]
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	091b      	lsrs	r3, r3, #4
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	f003 0307 	and.w	r3, r3, #7
 80182be:	b2da      	uxtb	r2, r3
 80182c0:	683b      	ldr	r3, [r7, #0]
 80182c2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	f003 030f 	and.w	r3, r3, #15
 80182cc:	b2da      	uxtb	r2, r3
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80182d2:	2305      	movs	r3, #5
 80182d4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80182d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3714      	adds	r7, #20
 80182dc:	46bd      	mov	sp, r7
 80182de:	bc80      	pop	{r7}
 80182e0:	4770      	bx	lr

080182e2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80182e2:	b5b0      	push	{r4, r5, r7, lr}
 80182e4:	b088      	sub	sp, #32
 80182e6:	af02      	add	r7, sp, #8
 80182e8:	60f8      	str	r0, [r7, #12]
 80182ea:	60b9      	str	r1, [r7, #8]
 80182ec:	607a      	str	r2, [r7, #4]
 80182ee:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	791b      	ldrb	r3, [r3, #4]
 80182f4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	799b      	ldrb	r3, [r3, #6]
 80182fa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	79db      	ldrb	r3, [r3, #7]
 8018300:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	7a1b      	ldrb	r3, [r3, #8]
 8018306:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	795b      	ldrb	r3, [r3, #5]
 801830c:	f083 0301 	eor.w	r3, r3, #1
 8018310:	b2db      	uxtb	r3, r3
 8018312:	2b00      	cmp	r3, #0
 8018314:	d008      	beq.n	8018328 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	7adb      	ldrb	r3, [r3, #11]
 801831a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	7a5b      	ldrb	r3, [r3, #9]
 8018320:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	7a9b      	ldrb	r3, [r3, #10]
 8018326:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018328:	7dfb      	ldrb	r3, [r7, #23]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d04a      	beq.n	80183c4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801832e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018332:	2b0f      	cmp	r3, #15
 8018334:	d103      	bne.n	801833e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	7a5b      	ldrb	r3, [r3, #9]
 801833a:	75bb      	strb	r3, [r7, #22]
 801833c:	e01d      	b.n	801837a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	7b18      	ldrb	r0, [r3, #12]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	6919      	ldr	r1, [r3, #16]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018352:	68fa      	ldr	r2, [r7, #12]
 8018354:	6992      	ldr	r2, [r2, #24]
 8018356:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801835a:	9201      	str	r2, [sp, #4]
 801835c:	9300      	str	r3, [sp, #0]
 801835e:	462b      	mov	r3, r5
 8018360:	4622      	mov	r2, r4
 8018362:	f7ff fd3a 	bl	8017dda <RegionCommonChanVerifyDr>
 8018366:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018368:	f083 0301 	eor.w	r3, r3, #1
 801836c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801836e:	2b00      	cmp	r3, #0
 8018370:	d003      	beq.n	801837a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018372:	7dfb      	ldrb	r3, [r7, #23]
 8018374:	f023 0302 	bic.w	r3, r3, #2
 8018378:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801837a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801837e:	2b0f      	cmp	r3, #15
 8018380:	d103      	bne.n	801838a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	7a9b      	ldrb	r3, [r3, #10]
 8018386:	757b      	strb	r3, [r7, #21]
 8018388:	e01c      	b.n	80183c4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018396:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801839a:	4618      	mov	r0, r3
 801839c:	f7ff fd8f 	bl	8017ebe <RegionCommonValueInRange>
 80183a0:	4603      	mov	r3, r0
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d10e      	bne.n	80183c4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80183ac:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	da03      	bge.n	80183bc <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	7f5b      	ldrb	r3, [r3, #29]
 80183b8:	757b      	strb	r3, [r7, #21]
 80183ba:	e003      	b.n	80183c4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80183bc:	7dfb      	ldrb	r3, [r7, #23]
 80183be:	f023 0304 	bic.w	r3, r3, #4
 80183c2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80183c4:	7dfb      	ldrb	r3, [r7, #23]
 80183c6:	2b07      	cmp	r3, #7
 80183c8:	d105      	bne.n	80183d6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80183ca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d101      	bne.n	80183d6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80183d2:	2301      	movs	r3, #1
 80183d4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	7dba      	ldrb	r2, [r7, #22]
 80183da:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	7d7a      	ldrb	r2, [r7, #21]
 80183e0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80183e2:	7d3a      	ldrb	r2, [r7, #20]
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	701a      	strb	r2, [r3, #0]

    return status;
 80183e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3718      	adds	r7, #24
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080183f4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80183f4:	b480      	push	{r7}
 80183f6:	b083      	sub	sp, #12
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	4603      	mov	r3, r0
 80183fc:	6039      	str	r1, [r7, #0]
 80183fe:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018400:	79fb      	ldrb	r3, [r7, #7]
 8018402:	4a06      	ldr	r2, [pc, #24]	; (801841c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8018404:	fa02 f303 	lsl.w	r3, r2, r3
 8018408:	461a      	mov	r2, r3
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018410:	4618      	mov	r0, r3
 8018412:	370c      	adds	r7, #12
 8018414:	46bd      	mov	sp, r7
 8018416:	bc80      	pop	{r7}
 8018418:	4770      	bx	lr
 801841a:	bf00      	nop
 801841c:	000f4240 	.word	0x000f4240

08018420 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018420:	b480      	push	{r7}
 8018422:	b083      	sub	sp, #12
 8018424:	af00      	add	r7, sp, #0
 8018426:	4603      	mov	r3, r0
 8018428:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801842a:	79fb      	ldrb	r3, [r7, #7]
 801842c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018430:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018434:	4618      	mov	r0, r3
 8018436:	370c      	adds	r7, #12
 8018438:	46bd      	mov	sp, r7
 801843a:	bc80      	pop	{r7}
 801843c:	4770      	bx	lr
	...

08018440 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018440:	b480      	push	{r7}
 8018442:	b085      	sub	sp, #20
 8018444:	af00      	add	r7, sp, #0
 8018446:	60f8      	str	r0, [r7, #12]
 8018448:	607a      	str	r2, [r7, #4]
 801844a:	603b      	str	r3, [r7, #0]
 801844c:	460b      	mov	r3, r1
 801844e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018450:	7afa      	ldrb	r2, [r7, #11]
 8018452:	7afb      	ldrb	r3, [r7, #11]
 8018454:	3b04      	subs	r3, #4
 8018456:	4619      	mov	r1, r3
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	fb03 f101 	mul.w	r1, r3, r1
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018464:	fb00 f303 	mul.w	r3, r0, r3
 8018468:	440b      	add	r3, r1
 801846a:	005b      	lsls	r3, r3, #1
 801846c:	2b00      	cmp	r3, #0
 801846e:	d013      	beq.n	8018498 <RegionCommonComputeRxWindowParameters+0x58>
 8018470:	7afb      	ldrb	r3, [r7, #11]
 8018472:	3b04      	subs	r3, #4
 8018474:	4619      	mov	r1, r3
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	fb03 f101 	mul.w	r1, r3, r1
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018482:	fb00 f303 	mul.w	r3, r0, r3
 8018486:	440b      	add	r3, r1
 8018488:	0059      	lsls	r1, r3, #1
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	440b      	add	r3, r1
 801848e:	1e59      	subs	r1, r3, #1
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	fbb1 f3f3 	udiv	r3, r1, r3
 8018496:	e00f      	b.n	80184b8 <RegionCommonComputeRxWindowParameters+0x78>
 8018498:	7afb      	ldrb	r3, [r7, #11]
 801849a:	3b04      	subs	r3, #4
 801849c:	4619      	mov	r1, r3
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	fb03 f101 	mul.w	r1, r3, r1
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80184aa:	fb00 f303 	mul.w	r3, r0, r3
 80184ae:	440b      	add	r3, r1
 80184b0:	0059      	lsls	r1, r3, #1
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80184b8:	429a      	cmp	r2, r3
 80184ba:	bf38      	it	cc
 80184bc:	461a      	movcc	r2, r3
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	009b      	lsls	r3, r3, #2
 80184c6:	4619      	mov	r1, r3
 80184c8:	69bb      	ldr	r3, [r7, #24]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	68fa      	ldr	r2, [r7, #12]
 80184ce:	fb02 f303 	mul.w	r3, r2, r3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d007      	beq.n	80184e6 <RegionCommonComputeRxWindowParameters+0xa6>
 80184d6:	69bb      	ldr	r3, [r7, #24]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	68fa      	ldr	r2, [r7, #12]
 80184dc:	fb02 f303 	mul.w	r3, r2, r3
 80184e0:	3301      	adds	r3, #1
 80184e2:	085b      	lsrs	r3, r3, #1
 80184e4:	e005      	b.n	80184f2 <RegionCommonComputeRxWindowParameters+0xb2>
 80184e6:	69bb      	ldr	r3, [r7, #24]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	68fa      	ldr	r2, [r7, #12]
 80184ec:	fb02 f303 	mul.w	r3, r2, r3
 80184f0:	085b      	lsrs	r3, r3, #1
 80184f2:	1acb      	subs	r3, r1, r3
 80184f4:	683a      	ldr	r2, [r7, #0]
 80184f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184fa:	fb01 f202 	mul.w	r2, r1, r2
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	2b00      	cmp	r3, #0
 8018502:	dd27      	ble.n	8018554 <RegionCommonComputeRxWindowParameters+0x114>
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	009b      	lsls	r3, r3, #2
 8018508:	4619      	mov	r1, r3
 801850a:	69bb      	ldr	r3, [r7, #24]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	68fa      	ldr	r2, [r7, #12]
 8018510:	fb02 f303 	mul.w	r3, r2, r3
 8018514:	2b00      	cmp	r3, #0
 8018516:	d007      	beq.n	8018528 <RegionCommonComputeRxWindowParameters+0xe8>
 8018518:	69bb      	ldr	r3, [r7, #24]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	68fa      	ldr	r2, [r7, #12]
 801851e:	fb02 f303 	mul.w	r3, r2, r3
 8018522:	3301      	adds	r3, #1
 8018524:	085b      	lsrs	r3, r3, #1
 8018526:	e005      	b.n	8018534 <RegionCommonComputeRxWindowParameters+0xf4>
 8018528:	69bb      	ldr	r3, [r7, #24]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	68fa      	ldr	r2, [r7, #12]
 801852e:	fb02 f303 	mul.w	r3, r2, r3
 8018532:	085b      	lsrs	r3, r3, #1
 8018534:	1acb      	subs	r3, r1, r3
 8018536:	683a      	ldr	r2, [r7, #0]
 8018538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801853c:	fb01 f202 	mul.w	r2, r1, r2
 8018540:	1a9b      	subs	r3, r3, r2
 8018542:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018546:	4a19      	ldr	r2, [pc, #100]	; (80185ac <RegionCommonComputeRxWindowParameters+0x16c>)
 8018548:	fb82 1203 	smull	r1, r2, r2, r3
 801854c:	1192      	asrs	r2, r2, #6
 801854e:	17db      	asrs	r3, r3, #31
 8018550:	1ad3      	subs	r3, r2, r3
 8018552:	e024      	b.n	801859e <RegionCommonComputeRxWindowParameters+0x15e>
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	4619      	mov	r1, r3
 801855a:	69bb      	ldr	r3, [r7, #24]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	68fa      	ldr	r2, [r7, #12]
 8018560:	fb02 f303 	mul.w	r3, r2, r3
 8018564:	2b00      	cmp	r3, #0
 8018566:	d007      	beq.n	8018578 <RegionCommonComputeRxWindowParameters+0x138>
 8018568:	69bb      	ldr	r3, [r7, #24]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	68fa      	ldr	r2, [r7, #12]
 801856e:	fb02 f303 	mul.w	r3, r2, r3
 8018572:	3301      	adds	r3, #1
 8018574:	085b      	lsrs	r3, r3, #1
 8018576:	e005      	b.n	8018584 <RegionCommonComputeRxWindowParameters+0x144>
 8018578:	69bb      	ldr	r3, [r7, #24]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	68fa      	ldr	r2, [r7, #12]
 801857e:	fb02 f303 	mul.w	r3, r2, r3
 8018582:	085b      	lsrs	r3, r3, #1
 8018584:	1acb      	subs	r3, r1, r3
 8018586:	683a      	ldr	r2, [r7, #0]
 8018588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801858c:	fb01 f202 	mul.w	r2, r1, r2
 8018590:	1a9b      	subs	r3, r3, r2
 8018592:	4a06      	ldr	r2, [pc, #24]	; (80185ac <RegionCommonComputeRxWindowParameters+0x16c>)
 8018594:	fb82 1203 	smull	r1, r2, r2, r3
 8018598:	1192      	asrs	r2, r2, #6
 801859a:	17db      	asrs	r3, r3, #31
 801859c:	1ad3      	subs	r3, r2, r3
 801859e:	69fa      	ldr	r2, [r7, #28]
 80185a0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80185a2:	bf00      	nop
 80185a4:	3714      	adds	r7, #20
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bc80      	pop	{r7}
 80185aa:	4770      	bx	lr
 80185ac:	10624dd3 	.word	0x10624dd3

080185b0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b086      	sub	sp, #24
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	4603      	mov	r3, r0
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
 80185bc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80185be:	2300      	movs	r3, #0
 80185c0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80185c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185c6:	005b      	lsls	r3, r3, #1
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7e8 fb61 	bl	8000c90 <__aeabi_ui2f>
 80185ce:	4603      	mov	r3, r0
 80185d0:	4619      	mov	r1, r3
 80185d2:	68b8      	ldr	r0, [r7, #8]
 80185d4:	f7e8 faaa 	bl	8000b2c <__aeabi_fsub>
 80185d8:	4603      	mov	r3, r0
 80185da:	6879      	ldr	r1, [r7, #4]
 80185dc:	4618      	mov	r0, r3
 80185de:	f7e8 faa5 	bl	8000b2c <__aeabi_fsub>
 80185e2:	4603      	mov	r3, r0
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7e7 ff33 	bl	8000450 <__aeabi_f2d>
 80185ea:	4602      	mov	r2, r0
 80185ec:	460b      	mov	r3, r1
 80185ee:	4610      	mov	r0, r2
 80185f0:	4619      	mov	r1, r3
 80185f2:	f006 fad5 	bl	801eba0 <floor>
 80185f6:	4602      	mov	r2, r0
 80185f8:	460b      	mov	r3, r1
 80185fa:	4610      	mov	r0, r2
 80185fc:	4619      	mov	r1, r3
 80185fe:	f7e8 fa19 	bl	8000a34 <__aeabi_d2iz>
 8018602:	4603      	mov	r3, r0
 8018604:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018606:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801860a:	4618      	mov	r0, r3
 801860c:	3718      	adds	r7, #24
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}

08018612 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018612:	b590      	push	{r4, r7, lr}
 8018614:	b087      	sub	sp, #28
 8018616:	af00      	add	r7, sp, #0
 8018618:	60f8      	str	r0, [r7, #12]
 801861a:	60b9      	str	r1, [r7, #8]
 801861c:	607a      	str	r2, [r7, #4]
 801861e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018620:	2300      	movs	r3, #0
 8018622:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018624:	2300      	movs	r3, #0
 8018626:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018628:	2300      	movs	r3, #0
 801862a:	757b      	strb	r3, [r7, #21]
 801862c:	2300      	movs	r3, #0
 801862e:	753b      	strb	r3, [r7, #20]
 8018630:	e09c      	b.n	801876c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018632:	2300      	movs	r3, #0
 8018634:	74fb      	strb	r3, [r7, #19]
 8018636:	e08f      	b.n	8018758 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	685a      	ldr	r2, [r3, #4]
 801863c:	7d3b      	ldrb	r3, [r7, #20]
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	4413      	add	r3, r2
 8018642:	881b      	ldrh	r3, [r3, #0]
 8018644:	461a      	mov	r2, r3
 8018646:	7cfb      	ldrb	r3, [r7, #19]
 8018648:	fa42 f303 	asr.w	r3, r2, r3
 801864c:	f003 0301 	and.w	r3, r3, #1
 8018650:	2b00      	cmp	r3, #0
 8018652:	d07e      	beq.n	8018752 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	689a      	ldr	r2, [r3, #8]
 8018658:	7d79      	ldrb	r1, [r7, #21]
 801865a:	7cfb      	ldrb	r3, [r7, #19]
 801865c:	440b      	add	r3, r1
 801865e:	4619      	mov	r1, r3
 8018660:	460b      	mov	r3, r1
 8018662:	005b      	lsls	r3, r3, #1
 8018664:	440b      	add	r3, r1
 8018666:	009b      	lsls	r3, r3, #2
 8018668:	4413      	add	r3, r2
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d06b      	beq.n	8018748 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	f083 0301 	eor.w	r3, r3, #1
 8018678:	b2db      	uxtb	r3, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	d011      	beq.n	80186a2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018682:	2b00      	cmp	r3, #0
 8018684:	d00d      	beq.n	80186a2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	695a      	ldr	r2, [r3, #20]
 801868a:	7d3b      	ldrb	r3, [r7, #20]
 801868c:	005b      	lsls	r3, r3, #1
 801868e:	4413      	add	r3, r2
 8018690:	881b      	ldrh	r3, [r3, #0]
 8018692:	461a      	mov	r2, r3
 8018694:	7cfb      	ldrb	r3, [r7, #19]
 8018696:	fa42 f303 	asr.w	r3, r2, r3
 801869a:	f003 0301 	and.w	r3, r3, #1
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d054      	beq.n	801874c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	785b      	ldrb	r3, [r3, #1]
 80186a6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	689a      	ldr	r2, [r3, #8]
 80186ac:	7d79      	ldrb	r1, [r7, #21]
 80186ae:	7cfb      	ldrb	r3, [r7, #19]
 80186b0:	440b      	add	r3, r1
 80186b2:	4619      	mov	r1, r3
 80186b4:	460b      	mov	r3, r1
 80186b6:	005b      	lsls	r3, r3, #1
 80186b8:	440b      	add	r3, r1
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	4413      	add	r3, r2
 80186be:	7a1b      	ldrb	r3, [r3, #8]
 80186c0:	f343 0303 	sbfx	r3, r3, #0, #4
 80186c4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186c6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	689a      	ldr	r2, [r3, #8]
 80186cc:	7d79      	ldrb	r1, [r7, #21]
 80186ce:	7cfb      	ldrb	r3, [r7, #19]
 80186d0:	440b      	add	r3, r1
 80186d2:	4619      	mov	r1, r3
 80186d4:	460b      	mov	r3, r1
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	440b      	add	r3, r1
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	4413      	add	r3, r2
 80186de:	7a1b      	ldrb	r3, [r3, #8]
 80186e0:	f343 1303 	sbfx	r3, r3, #4, #4
 80186e4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186e6:	461a      	mov	r2, r3
 80186e8:	4621      	mov	r1, r4
 80186ea:	f7ff fbe8 	bl	8017ebe <RegionCommonValueInRange>
 80186ee:	4603      	mov	r3, r0
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d02d      	beq.n	8018750 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	68da      	ldr	r2, [r3, #12]
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	6899      	ldr	r1, [r3, #8]
 80186fc:	7d78      	ldrb	r0, [r7, #21]
 80186fe:	7cfb      	ldrb	r3, [r7, #19]
 8018700:	4403      	add	r3, r0
 8018702:	4618      	mov	r0, r3
 8018704:	4603      	mov	r3, r0
 8018706:	005b      	lsls	r3, r3, #1
 8018708:	4403      	add	r3, r0
 801870a:	009b      	lsls	r3, r3, #2
 801870c:	440b      	add	r3, r1
 801870e:	7a5b      	ldrb	r3, [r3, #9]
 8018710:	4619      	mov	r1, r3
 8018712:	460b      	mov	r3, r1
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	440b      	add	r3, r1
 8018718:	00db      	lsls	r3, r3, #3
 801871a:	4413      	add	r3, r2
 801871c:	7d1b      	ldrb	r3, [r3, #20]
 801871e:	f083 0301 	eor.w	r3, r3, #1
 8018722:	b2db      	uxtb	r3, r3
 8018724:	2b00      	cmp	r3, #0
 8018726:	d003      	beq.n	8018730 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018728:	7dbb      	ldrb	r3, [r7, #22]
 801872a:	3301      	adds	r3, #1
 801872c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801872e:	e010      	b.n	8018752 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018730:	7dfb      	ldrb	r3, [r7, #23]
 8018732:	1c5a      	adds	r2, r3, #1
 8018734:	75fa      	strb	r2, [r7, #23]
 8018736:	461a      	mov	r2, r3
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	4413      	add	r3, r2
 801873c:	7d79      	ldrb	r1, [r7, #21]
 801873e:	7cfa      	ldrb	r2, [r7, #19]
 8018740:	440a      	add	r2, r1
 8018742:	b2d2      	uxtb	r2, r2
 8018744:	701a      	strb	r2, [r3, #0]
 8018746:	e004      	b.n	8018752 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018748:	bf00      	nop
 801874a:	e002      	b.n	8018752 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801874c:	bf00      	nop
 801874e:	e000      	b.n	8018752 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018750:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018752:	7cfb      	ldrb	r3, [r7, #19]
 8018754:	3301      	adds	r3, #1
 8018756:	74fb      	strb	r3, [r7, #19]
 8018758:	7cfb      	ldrb	r3, [r7, #19]
 801875a:	2b0f      	cmp	r3, #15
 801875c:	f67f af6c 	bls.w	8018638 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018760:	7d7b      	ldrb	r3, [r7, #21]
 8018762:	3310      	adds	r3, #16
 8018764:	757b      	strb	r3, [r7, #21]
 8018766:	7d3b      	ldrb	r3, [r7, #20]
 8018768:	3301      	adds	r3, #1
 801876a:	753b      	strb	r3, [r7, #20]
 801876c:	7d7b      	ldrb	r3, [r7, #21]
 801876e:	b29a      	uxth	r2, r3
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	8a1b      	ldrh	r3, [r3, #16]
 8018774:	429a      	cmp	r2, r3
 8018776:	f4ff af5c 	bcc.w	8018632 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	7dfa      	ldrb	r2, [r7, #23]
 801877e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	7dba      	ldrb	r2, [r7, #22]
 8018784:	701a      	strb	r2, [r3, #0]
}
 8018786:	bf00      	nop
 8018788:	371c      	adds	r7, #28
 801878a:	46bd      	mov	sp, r7
 801878c:	bd90      	pop	{r4, r7, pc}

0801878e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801878e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018790:	b08b      	sub	sp, #44	; 0x2c
 8018792:	af04      	add	r7, sp, #16
 8018794:	60f8      	str	r0, [r7, #12]
 8018796:	60b9      	str	r1, [r7, #8]
 8018798:	607a      	str	r2, [r7, #4]
 801879a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	685b      	ldr	r3, [r3, #4]
 80187a0:	4618      	mov	r0, r3
 80187a2:	f005 fe15 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 80187a6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	681a      	ldr	r2, [r3, #0]
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	1ad2      	subs	r2, r2, r3
 80187b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187b2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80187b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b6:	2201      	movs	r2, #1
 80187b8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	2200      	movs	r2, #0
 80187be:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d004      	beq.n	80187d2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80187cc:	697a      	ldr	r2, [r7, #20]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	d32b      	bcc.n	801882a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	2200      	movs	r2, #0
 80187d6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	69db      	ldr	r3, [r3, #28]
 80187dc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187e2:	68dd      	ldr	r5, [r3, #12]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	7a5e      	ldrb	r6, [r3, #9]
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	f893 c008 	ldrb.w	ip, [r3, #8]
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	7d1b      	ldrb	r3, [r3, #20]
 80187f2:	68fa      	ldr	r2, [r7, #12]
 80187f4:	6992      	ldr	r2, [r2, #24]
 80187f6:	9203      	str	r2, [sp, #12]
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	f10d 0e04 	add.w	lr, sp, #4
 80187fe:	320c      	adds	r2, #12
 8018800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018804:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018808:	9300      	str	r3, [sp, #0]
 801880a:	4663      	mov	r3, ip
 801880c:	4632      	mov	r2, r6
 801880e:	4629      	mov	r1, r5
 8018810:	4620      	mov	r0, r4
 8018812:	f7ff fc25 	bl	8018060 <RegionCommonUpdateBandTimeOff>
 8018816:	4602      	mov	r2, r0
 8018818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801881a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	69d8      	ldr	r0, [r3, #28]
 8018820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018822:	683a      	ldr	r2, [r7, #0]
 8018824:	6879      	ldr	r1, [r7, #4]
 8018826:	f7ff fef4 	bl	8018612 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d004      	beq.n	801883c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018834:	2200      	movs	r2, #0
 8018836:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018838:	2300      	movs	r3, #0
 801883a:	e006      	b.n	801884a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d001      	beq.n	8018848 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018844:	230b      	movs	r3, #11
 8018846:	e000      	b.n	801884a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018848:	230c      	movs	r3, #12
    }
}
 801884a:	4618      	mov	r0, r3
 801884c:	371c      	adds	r7, #28
 801884e:	46bd      	mov	sp, r7
 8018850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018852 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018852:	b5b0      	push	{r4, r5, r7, lr}
 8018854:	b086      	sub	sp, #24
 8018856:	af02      	add	r7, sp, #8
 8018858:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	781b      	ldrb	r3, [r3, #0]
 801885e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f993 2000 	ldrsb.w	r2, [r3]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801886c:	429a      	cmp	r2, r3
 801886e:	d103      	bne.n	8018878 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018876:	e026      	b.n	80188c6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018878:	7bfb      	ldrb	r3, [r7, #15]
 801887a:	3b01      	subs	r3, #1
 801887c:	b2db      	uxtb	r3, r3
 801887e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018886:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801888a:	429a      	cmp	r2, r3
 801888c:	d019      	beq.n	80188c2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	78d8      	ldrb	r0, [r3, #3]
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6859      	ldr	r1, [r3, #4]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80188a2:	687a      	ldr	r2, [r7, #4]
 80188a4:	6892      	ldr	r2, [r2, #8]
 80188a6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80188aa:	9201      	str	r2, [sp, #4]
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	462b      	mov	r3, r5
 80188b0:	4622      	mov	r2, r4
 80188b2:	f7ff fa92 	bl	8017dda <RegionCommonChanVerifyDr>
 80188b6:	4603      	mov	r3, r0
 80188b8:	f083 0301 	eor.w	r3, r3, #1
 80188bc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d1da      	bne.n	8018878 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80188c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	3710      	adds	r7, #16
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bdb0      	pop	{r4, r5, r7, pc}

080188ce <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80188ce:	b480      	push	{r7}
 80188d0:	b083      	sub	sp, #12
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	4603      	mov	r3, r0
 80188d6:	460a      	mov	r2, r1
 80188d8:	71fb      	strb	r3, [r7, #7]
 80188da:	4613      	mov	r3, r2
 80188dc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80188de:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80188e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188e6:	4293      	cmp	r3, r2
 80188e8:	bfb8      	it	lt
 80188ea:	4613      	movlt	r3, r2
 80188ec:	b25b      	sxtb	r3, r3
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	370c      	adds	r7, #12
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bc80      	pop	{r7}
 80188f6:	4770      	bx	lr

080188f8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
 8018900:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	009b      	lsls	r3, r3, #2
 8018906:	683a      	ldr	r2, [r7, #0]
 8018908:	4413      	add	r3, r2
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	4a07      	ldr	r2, [pc, #28]	; (801892c <RegionCommonGetBandwidth+0x34>)
 801890e:	4293      	cmp	r3, r2
 8018910:	d004      	beq.n	801891c <RegionCommonGetBandwidth+0x24>
 8018912:	4a07      	ldr	r2, [pc, #28]	; (8018930 <RegionCommonGetBandwidth+0x38>)
 8018914:	4293      	cmp	r3, r2
 8018916:	d003      	beq.n	8018920 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018918:	2300      	movs	r3, #0
 801891a:	e002      	b.n	8018922 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801891c:	2301      	movs	r3, #1
 801891e:	e000      	b.n	8018922 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018920:	2302      	movs	r3, #2
    }
}
 8018922:	4618      	mov	r0, r3
 8018924:	370c      	adds	r7, #12
 8018926:	46bd      	mov	sp, r7
 8018928:	bc80      	pop	{r7}
 801892a:	4770      	bx	lr
 801892c:	0003d090 	.word	0x0003d090
 8018930:	0007a120 	.word	0x0007a120

08018934 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b086      	sub	sp, #24
 8018938:	af04      	add	r7, sp, #16
 801893a:	4603      	mov	r3, r0
 801893c:	6039      	str	r1, [r7, #0]
 801893e:	71fb      	strb	r3, [r7, #7]
 8018940:	4613      	mov	r3, r2
 8018942:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018944:	79fb      	ldrb	r3, [r7, #7]
 8018946:	2b05      	cmp	r3, #5
 8018948:	d810      	bhi.n	801896c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801894a:	79fb      	ldrb	r3, [r7, #7]
 801894c:	4a0f      	ldr	r2, [pc, #60]	; (801898c <RegionCommonRxConfigPrint+0x58>)
 801894e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018952:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018956:	9202      	str	r2, [sp, #8]
 8018958:	683a      	ldr	r2, [r7, #0]
 801895a:	9201      	str	r2, [sp, #4]
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	4b0c      	ldr	r3, [pc, #48]	; (8018990 <RegionCommonRxConfigPrint+0x5c>)
 8018960:	2201      	movs	r2, #1
 8018962:	2100      	movs	r1, #0
 8018964:	2002      	movs	r0, #2
 8018966:	f005 fe11 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801896a:	e00a      	b.n	8018982 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801896c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018970:	9301      	str	r3, [sp, #4]
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	9300      	str	r3, [sp, #0]
 8018976:	4b07      	ldr	r3, [pc, #28]	; (8018994 <RegionCommonRxConfigPrint+0x60>)
 8018978:	2201      	movs	r2, #1
 801897a:	2100      	movs	r1, #0
 801897c:	2002      	movs	r0, #2
 801897e:	f005 fe05 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8018982:	bf00      	nop
 8018984:	3708      	adds	r7, #8
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}
 801898a:	bf00      	nop
 801898c:	20000130 	.word	0x20000130
 8018990:	0801f3b8 	.word	0x0801f3b8
 8018994:	0801f3d8 	.word	0x0801f3d8

08018998 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b084      	sub	sp, #16
 801899c:	af02      	add	r7, sp, #8
 801899e:	6078      	str	r0, [r7, #4]
 80189a0:	460b      	mov	r3, r1
 80189a2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80189a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189a8:	9301      	str	r3, [sp, #4]
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	9300      	str	r3, [sp, #0]
 80189ae:	4b05      	ldr	r3, [pc, #20]	; (80189c4 <RegionCommonTxConfigPrint+0x2c>)
 80189b0:	2201      	movs	r2, #1
 80189b2:	2100      	movs	r1, #0
 80189b4:	2002      	movs	r0, #2
 80189b6:	f005 fde9 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 80189ba:	bf00      	nop
 80189bc:	3708      	adds	r7, #8
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd80      	pop	{r7, pc}
 80189c2:	bf00      	nop
 80189c4:	0801f3f4 	.word	0x0801f3f4

080189c8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80189d2:	4b2d      	ldr	r3, [pc, #180]	; (8018a88 <VerifyRfFreq+0xc0>)
 80189d4:	6a1b      	ldr	r3, [r3, #32]
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	4798      	blx	r3
 80189da:	4603      	mov	r3, r0
 80189dc:	f083 0301 	eor.w	r3, r3, #1
 80189e0:	b2db      	uxtb	r3, r3
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d001      	beq.n	80189ea <VerifyRfFreq+0x22>
    {
        return false;
 80189e6:	2300      	movs	r3, #0
 80189e8:	e04a      	b.n	8018a80 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4a27      	ldr	r2, [pc, #156]	; (8018a8c <VerifyRfFreq+0xc4>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d307      	bcc.n	8018a02 <VerifyRfFreq+0x3a>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	4a26      	ldr	r2, [pc, #152]	; (8018a90 <VerifyRfFreq+0xc8>)
 80189f6:	4293      	cmp	r3, r2
 80189f8:	d803      	bhi.n	8018a02 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	2202      	movs	r2, #2
 80189fe:	701a      	strb	r2, [r3, #0]
 8018a00:	e03d      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4a22      	ldr	r2, [pc, #136]	; (8018a90 <VerifyRfFreq+0xc8>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d907      	bls.n	8018a1a <VerifyRfFreq+0x52>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	4a21      	ldr	r2, [pc, #132]	; (8018a94 <VerifyRfFreq+0xcc>)
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d803      	bhi.n	8018a1a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	2200      	movs	r2, #0
 8018a16:	701a      	strb	r2, [r3, #0]
 8018a18:	e031      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	4a1d      	ldr	r2, [pc, #116]	; (8018a94 <VerifyRfFreq+0xcc>)
 8018a1e:	4293      	cmp	r3, r2
 8018a20:	d907      	bls.n	8018a32 <VerifyRfFreq+0x6a>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	4a1c      	ldr	r2, [pc, #112]	; (8018a98 <VerifyRfFreq+0xd0>)
 8018a26:	4293      	cmp	r3, r2
 8018a28:	d803      	bhi.n	8018a32 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	2201      	movs	r2, #1
 8018a2e:	701a      	strb	r2, [r3, #0]
 8018a30:	e025      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	4a19      	ldr	r2, [pc, #100]	; (8018a9c <VerifyRfFreq+0xd4>)
 8018a36:	4293      	cmp	r3, r2
 8018a38:	d907      	bls.n	8018a4a <VerifyRfFreq+0x82>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	4a18      	ldr	r2, [pc, #96]	; (8018aa0 <VerifyRfFreq+0xd8>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d803      	bhi.n	8018a4a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	2205      	movs	r2, #5
 8018a46:	701a      	strb	r2, [r3, #0]
 8018a48:	e019      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	4a15      	ldr	r2, [pc, #84]	; (8018aa4 <VerifyRfFreq+0xdc>)
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d907      	bls.n	8018a62 <VerifyRfFreq+0x9a>
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	4a14      	ldr	r2, [pc, #80]	; (8018aa8 <VerifyRfFreq+0xe0>)
 8018a56:	4293      	cmp	r3, r2
 8018a58:	d803      	bhi.n	8018a62 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	2203      	movs	r2, #3
 8018a5e:	701a      	strb	r2, [r3, #0]
 8018a60:	e00d      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	4a11      	ldr	r2, [pc, #68]	; (8018aac <VerifyRfFreq+0xe4>)
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d307      	bcc.n	8018a7a <VerifyRfFreq+0xb2>
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	4a10      	ldr	r2, [pc, #64]	; (8018ab0 <VerifyRfFreq+0xe8>)
 8018a6e:	4293      	cmp	r3, r2
 8018a70:	d803      	bhi.n	8018a7a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	2204      	movs	r2, #4
 8018a76:	701a      	strb	r2, [r3, #0]
 8018a78:	e001      	b.n	8018a7e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	e000      	b.n	8018a80 <VerifyRfFreq+0xb8>
    }
    return true;
 8018a7e:	2301      	movs	r3, #1
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}
 8018a88:	0801fa18 	.word	0x0801fa18
 8018a8c:	337055c0 	.word	0x337055c0
 8018a90:	338eda3f 	.word	0x338eda3f
 8018a94:	33bca100 	.word	0x33bca100
 8018a98:	33c5c8c0 	.word	0x33c5c8c0
 8018a9c:	33c74f5f 	.word	0x33c74f5f
 8018aa0:	33cef080 	.word	0x33cef080
 8018aa4:	33d1fdbf 	.word	0x33d1fdbf
 8018aa8:	33d5ce50 	.word	0x33d5ce50
 8018aac:	33d691a0 	.word	0x33d691a0
 8018ab0:	33db2580 	.word	0x33db2580

08018ab4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018ab4:	b590      	push	{r4, r7, lr}
 8018ab6:	b08b      	sub	sp, #44	; 0x2c
 8018ab8:	af04      	add	r7, sp, #16
 8018aba:	4603      	mov	r3, r0
 8018abc:	460a      	mov	r2, r1
 8018abe:	71fb      	strb	r3, [r7, #7]
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ac8:	4a1f      	ldr	r2, [pc, #124]	; (8018b48 <GetTimeOnAir+0x94>)
 8018aca:	5cd3      	ldrb	r3, [r2, r3]
 8018acc:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ad2:	491e      	ldr	r1, [pc, #120]	; (8018b4c <GetTimeOnAir+0x98>)
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7ff ff0f 	bl	80188f8 <RegionCommonGetBandwidth>
 8018ada:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018adc:	2300      	movs	r3, #0
 8018ade:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ae4:	2b07      	cmp	r3, #7
 8018ae6:	d118      	bne.n	8018b1a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018ae8:	4b19      	ldr	r3, [pc, #100]	; (8018b50 <GetTimeOnAir+0x9c>)
 8018aea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018aec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018af4:	fb02 f303 	mul.w	r3, r2, r3
 8018af8:	4619      	mov	r1, r3
 8018afa:	88bb      	ldrh	r3, [r7, #4]
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	2201      	movs	r2, #1
 8018b00:	9203      	str	r2, [sp, #12]
 8018b02:	9302      	str	r3, [sp, #8]
 8018b04:	2300      	movs	r3, #0
 8018b06:	9301      	str	r3, [sp, #4]
 8018b08:	2305      	movs	r3, #5
 8018b0a:	9300      	str	r3, [sp, #0]
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	460a      	mov	r2, r1
 8018b10:	68f9      	ldr	r1, [r7, #12]
 8018b12:	2000      	movs	r0, #0
 8018b14:	47a0      	blx	r4
 8018b16:	6178      	str	r0, [r7, #20]
 8018b18:	e011      	b.n	8018b3e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018b1a:	4b0d      	ldr	r3, [pc, #52]	; (8018b50 <GetTimeOnAir+0x9c>)
 8018b1c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018b1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018b22:	88bb      	ldrh	r3, [r7, #4]
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	2101      	movs	r1, #1
 8018b28:	9103      	str	r1, [sp, #12]
 8018b2a:	9302      	str	r3, [sp, #8]
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	9301      	str	r3, [sp, #4]
 8018b30:	2308      	movs	r3, #8
 8018b32:	9300      	str	r3, [sp, #0]
 8018b34:	2301      	movs	r3, #1
 8018b36:	68f9      	ldr	r1, [r7, #12]
 8018b38:	2001      	movs	r0, #1
 8018b3a:	47a0      	blx	r4
 8018b3c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018b3e:	697b      	ldr	r3, [r7, #20]
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	371c      	adds	r7, #28
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd90      	pop	{r4, r7, pc}
 8018b48:	0801f9e0 	.word	0x0801f9e0
 8018b4c:	0801f9e8 	.word	0x0801f9e8
 8018b50:	0801fa18 	.word	0x0801fa18

08018b54 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b088      	sub	sp, #32
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	3b01      	subs	r3, #1
 8018b66:	2b38      	cmp	r3, #56	; 0x38
 8018b68:	f200 8128 	bhi.w	8018dbc <RegionEU868GetPhyParam+0x268>
 8018b6c:	a201      	add	r2, pc, #4	; (adr r2, 8018b74 <RegionEU868GetPhyParam+0x20>)
 8018b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b72:	bf00      	nop
 8018b74:	08018c59 	.word	0x08018c59
 8018b78:	08018c5f 	.word	0x08018c5f
 8018b7c:	08018dbd 	.word	0x08018dbd
 8018b80:	08018dbd 	.word	0x08018dbd
 8018b84:	08018dbd 	.word	0x08018dbd
 8018b88:	08018c65 	.word	0x08018c65
 8018b8c:	08018dbd 	.word	0x08018dbd
 8018b90:	08018c9f 	.word	0x08018c9f
 8018b94:	08018dbd 	.word	0x08018dbd
 8018b98:	08018ca5 	.word	0x08018ca5
 8018b9c:	08018cab 	.word	0x08018cab
 8018ba0:	08018cb1 	.word	0x08018cb1
 8018ba4:	08018cb7 	.word	0x08018cb7
 8018ba8:	08018cc7 	.word	0x08018cc7
 8018bac:	08018cd7 	.word	0x08018cd7
 8018bb0:	08018cdd 	.word	0x08018cdd
 8018bb4:	08018ce5 	.word	0x08018ce5
 8018bb8:	08018ced 	.word	0x08018ced
 8018bbc:	08018cf5 	.word	0x08018cf5
 8018bc0:	08018cfd 	.word	0x08018cfd
 8018bc4:	08018d05 	.word	0x08018d05
 8018bc8:	08018d0d 	.word	0x08018d0d
 8018bcc:	08018d21 	.word	0x08018d21
 8018bd0:	08018d27 	.word	0x08018d27
 8018bd4:	08018d2d 	.word	0x08018d2d
 8018bd8:	08018d33 	.word	0x08018d33
 8018bdc:	08018d3f 	.word	0x08018d3f
 8018be0:	08018d4b 	.word	0x08018d4b
 8018be4:	08018d51 	.word	0x08018d51
 8018be8:	08018d59 	.word	0x08018d59
 8018bec:	08018d5f 	.word	0x08018d5f
 8018bf0:	08018d65 	.word	0x08018d65
 8018bf4:	08018d6d 	.word	0x08018d6d
 8018bf8:	08018c6b 	.word	0x08018c6b
 8018bfc:	08018dbd 	.word	0x08018dbd
 8018c00:	08018dbd 	.word	0x08018dbd
 8018c04:	08018dbd 	.word	0x08018dbd
 8018c08:	08018dbd 	.word	0x08018dbd
 8018c0c:	08018dbd 	.word	0x08018dbd
 8018c10:	08018dbd 	.word	0x08018dbd
 8018c14:	08018dbd 	.word	0x08018dbd
 8018c18:	08018dbd 	.word	0x08018dbd
 8018c1c:	08018dbd 	.word	0x08018dbd
 8018c20:	08018dbd 	.word	0x08018dbd
 8018c24:	08018dbd 	.word	0x08018dbd
 8018c28:	08018dbd 	.word	0x08018dbd
 8018c2c:	08018dbd 	.word	0x08018dbd
 8018c30:	08018d73 	.word	0x08018d73
 8018c34:	08018d79 	.word	0x08018d79
 8018c38:	08018d87 	.word	0x08018d87
 8018c3c:	08018dbd 	.word	0x08018dbd
 8018c40:	08018dbd 	.word	0x08018dbd
 8018c44:	08018d8d 	.word	0x08018d8d
 8018c48:	08018d93 	.word	0x08018d93
 8018c4c:	08018dbd 	.word	0x08018dbd
 8018c50:	08018d99 	.word	0x08018d99
 8018c54:	08018da9 	.word	0x08018da9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	61bb      	str	r3, [r7, #24]
            break;
 8018c5c:	e0af      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	61bb      	str	r3, [r7, #24]
            break;
 8018c62:	e0ac      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018c64:	2300      	movs	r3, #0
 8018c66:	61bb      	str	r3, [r7, #24]
            break;
 8018c68:	e0a9      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c70:	733b      	strb	r3, [r7, #12]
 8018c72:	2307      	movs	r3, #7
 8018c74:	737b      	strb	r3, [r7, #13]
 8018c76:	2300      	movs	r3, #0
 8018c78:	73bb      	strb	r3, [r7, #14]
 8018c7a:	2310      	movs	r3, #16
 8018c7c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018c7e:	4b53      	ldr	r3, [pc, #332]	; (8018dcc <RegionEU868GetPhyParam+0x278>)
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c86:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018c88:	4b50      	ldr	r3, [pc, #320]	; (8018dcc <RegionEU868GetPhyParam+0x278>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c8c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018c8e:	f107 030c 	add.w	r3, r7, #12
 8018c92:	4618      	mov	r0, r3
 8018c94:	f7ff fddd 	bl	8018852 <RegionCommonGetNextLowerTxDr>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	61bb      	str	r3, [r7, #24]
            break;
 8018c9c:	e08f      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	61bb      	str	r3, [r7, #24]
            break;
 8018ca2:	e08c      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	61bb      	str	r3, [r7, #24]
            break;
 8018ca8:	e089      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018caa:	2340      	movs	r3, #64	; 0x40
 8018cac:	61bb      	str	r3, [r7, #24]
            break;
 8018cae:	e086      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018cb0:	2320      	movs	r3, #32
 8018cb2:	61bb      	str	r3, [r7, #24]
            break;
 8018cb4:	e083      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	4b44      	ldr	r3, [pc, #272]	; (8018dd0 <RegionEU868GetPhyParam+0x27c>)
 8018cc0:	5c9b      	ldrb	r3, [r3, r2]
 8018cc2:	61bb      	str	r3, [r7, #24]
            break;
 8018cc4:	e07b      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ccc:	461a      	mov	r2, r3
 8018cce:	4b41      	ldr	r3, [pc, #260]	; (8018dd4 <RegionEU868GetPhyParam+0x280>)
 8018cd0:	5c9b      	ldrb	r3, [r3, r2]
 8018cd2:	61bb      	str	r3, [r7, #24]
            break;
 8018cd4:	e073      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	61bb      	str	r3, [r7, #24]
            break;
 8018cda:	e070      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018cdc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018ce0:	61bb      	str	r3, [r7, #24]
            break;
 8018ce2:	e06c      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ce8:	61bb      	str	r3, [r7, #24]
            break;
 8018cea:	e068      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018cec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018cf0:	61bb      	str	r3, [r7, #24]
            break;
 8018cf2:	e064      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8018cf8:	61bb      	str	r3, [r7, #24]
            break;
 8018cfa:	e060      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018cfc:	f241 7370 	movw	r3, #6000	; 0x1770
 8018d00:	61bb      	str	r3, [r7, #24]
            break;
 8018d02:	e05c      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018d08:	61bb      	str	r3, [r7, #24]
            break;
 8018d0a:	e058      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018d10:	4831      	ldr	r0, [pc, #196]	; (8018dd8 <RegionEU868GetPhyParam+0x284>)
 8018d12:	f001 f87f 	bl	8019e14 <randr>
 8018d16:	4603      	mov	r3, r0
 8018d18:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018d1c:	61bb      	str	r3, [r7, #24]
            break;
 8018d1e:	e04e      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018d20:	2300      	movs	r3, #0
 8018d22:	61bb      	str	r3, [r7, #24]
            break;
 8018d24:	e04b      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018d26:	4b2d      	ldr	r3, [pc, #180]	; (8018ddc <RegionEU868GetPhyParam+0x288>)
 8018d28:	61bb      	str	r3, [r7, #24]
            break;
 8018d2a:	e048      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	61bb      	str	r3, [r7, #24]
            break;
 8018d30:	e045      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018d32:	4b26      	ldr	r3, [pc, #152]	; (8018dcc <RegionEU868GetPhyParam+0x278>)
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018d3a:	61bb      	str	r3, [r7, #24]
            break;
 8018d3c:	e03f      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018d3e:	4b23      	ldr	r3, [pc, #140]	; (8018dcc <RegionEU868GetPhyParam+0x278>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018d46:	61bb      	str	r3, [r7, #24]
            break;
 8018d48:	e039      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018d4a:	2310      	movs	r3, #16
 8018d4c:	61bb      	str	r3, [r7, #24]
            break;
 8018d4e:	e036      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018d50:	4b1e      	ldr	r3, [pc, #120]	; (8018dcc <RegionEU868GetPhyParam+0x278>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	61bb      	str	r3, [r7, #24]
            break;
 8018d56:	e032      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018d58:	2300      	movs	r3, #0
 8018d5a:	61bb      	str	r3, [r7, #24]
            break;
 8018d5c:	e02f      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018d5e:	2300      	movs	r3, #0
 8018d60:	61bb      	str	r3, [r7, #24]
            break;
 8018d62:	e02c      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018d64:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018d68:	61bb      	str	r3, [r7, #24]
            break;
 8018d6a:	e028      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018d6c:	4b1c      	ldr	r3, [pc, #112]	; (8018de0 <RegionEU868GetPhyParam+0x28c>)
 8018d6e:	61bb      	str	r3, [r7, #24]
            break;
 8018d70:	e025      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018d72:	4b1a      	ldr	r3, [pc, #104]	; (8018ddc <RegionEU868GetPhyParam+0x288>)
 8018d74:	61bb      	str	r3, [r7, #24]
            break;
 8018d76:	e022      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018d78:	2311      	movs	r3, #17
 8018d7a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018d7c:	2302      	movs	r3, #2
 8018d7e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018d80:	2300      	movs	r3, #0
 8018d82:	76bb      	strb	r3, [r7, #26]
            break;
 8018d84:	e01b      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018d86:	2303      	movs	r3, #3
 8018d88:	61bb      	str	r3, [r7, #24]
            break;
 8018d8a:	e018      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018d8c:	4b13      	ldr	r3, [pc, #76]	; (8018ddc <RegionEU868GetPhyParam+0x288>)
 8018d8e:	61bb      	str	r3, [r7, #24]
            break;
 8018d90:	e015      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018d92:	2303      	movs	r3, #3
 8018d94:	61bb      	str	r3, [r7, #24]
            break;
 8018d96:	e012      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d9e:	461a      	mov	r2, r3
 8018da0:	4b10      	ldr	r3, [pc, #64]	; (8018de4 <RegionEU868GetPhyParam+0x290>)
 8018da2:	5c9b      	ldrb	r3, [r3, r2]
 8018da4:	61bb      	str	r3, [r7, #24]
            break;
 8018da6:	e00a      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018dae:	490e      	ldr	r1, [pc, #56]	; (8018de8 <RegionEU868GetPhyParam+0x294>)
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7ff fda1 	bl	80188f8 <RegionCommonGetBandwidth>
 8018db6:	4603      	mov	r3, r0
 8018db8:	61bb      	str	r3, [r7, #24]
            break;
 8018dba:	e000      	b.n	8018dbe <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018dbc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	61fb      	str	r3, [r7, #28]
 8018dc2:	69fb      	ldr	r3, [r7, #28]
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	3720      	adds	r7, #32
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	bd80      	pop	{r7, pc}
 8018dcc:	200016d4 	.word	0x200016d4
 8018dd0:	0801fa08 	.word	0x0801fa08
 8018dd4:	0801fa10 	.word	0x0801fa10
 8018dd8:	fffffc18 	.word	0xfffffc18
 8018ddc:	33d3e608 	.word	0x33d3e608
 8018de0:	4009999a 	.word	0x4009999a
 8018de4:	0801f9e0 	.word	0x0801f9e0
 8018de8:	0801f9e8 	.word	0x0801f9e8

08018dec <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018dec:	b590      	push	{r4, r7, lr}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af02      	add	r7, sp, #8
 8018df2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018df4:	4b11      	ldr	r3, [pc, #68]	; (8018e3c <RegionEU868SetBandTxDone+0x50>)
 8018df6:	681a      	ldr	r2, [r3, #0]
 8018df8:	4b11      	ldr	r3, [pc, #68]	; (8018e40 <RegionEU868SetBandTxDone+0x54>)
 8018dfa:	6819      	ldr	r1, [r3, #0]
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	781b      	ldrb	r3, [r3, #0]
 8018e00:	4618      	mov	r0, r3
 8018e02:	4603      	mov	r3, r0
 8018e04:	005b      	lsls	r3, r3, #1
 8018e06:	4403      	add	r3, r0
 8018e08:	009b      	lsls	r3, r3, #2
 8018e0a:	440b      	add	r3, r1
 8018e0c:	3309      	adds	r3, #9
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	4619      	mov	r1, r3
 8018e12:	460b      	mov	r3, r1
 8018e14:	005b      	lsls	r3, r3, #1
 8018e16:	440b      	add	r3, r1
 8018e18:	00db      	lsls	r3, r3, #3
 8018e1a:	18d0      	adds	r0, r2, r3
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6899      	ldr	r1, [r3, #8]
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	785c      	ldrb	r4, [r3, #1]
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	691a      	ldr	r2, [r3, #16]
 8018e28:	9200      	str	r2, [sp, #0]
 8018e2a:	68db      	ldr	r3, [r3, #12]
 8018e2c:	4622      	mov	r2, r4
 8018e2e:	f7ff f8e9 	bl	8018004 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018e32:	bf00      	nop
 8018e34:	370c      	adds	r7, #12
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd90      	pop	{r4, r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	200016d0 	.word	0x200016d0
 8018e40:	200016d4 	.word	0x200016d4

08018e44 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b0b0      	sub	sp, #192	; 0xc0
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e50:	2290      	movs	r2, #144	; 0x90
 8018e52:	2100      	movs	r1, #0
 8018e54:	4618      	mov	r0, r3
 8018e56:	f005 fe11 	bl	801ea7c <memset>
 8018e5a:	2364      	movs	r3, #100	; 0x64
 8018e5c:	863b      	strh	r3, [r7, #48]	; 0x30
 8018e5e:	2364      	movs	r3, #100	; 0x64
 8018e60:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e68:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018e6c:	230a      	movs	r3, #10
 8018e6e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018e72:	2364      	movs	r3, #100	; 0x64
 8018e74:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e7c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	7a1b      	ldrb	r3, [r3, #8]
 8018e84:	2b02      	cmp	r3, #2
 8018e86:	d05e      	beq.n	8018f46 <RegionEU868InitDefaults+0x102>
 8018e88:	2b02      	cmp	r3, #2
 8018e8a:	dc6b      	bgt.n	8018f64 <RegionEU868InitDefaults+0x120>
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d002      	beq.n	8018e96 <RegionEU868InitDefaults+0x52>
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d03f      	beq.n	8018f14 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018e94:	e066      	b.n	8018f64 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d063      	beq.n	8018f66 <RegionEU868InitDefaults+0x122>
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d05f      	beq.n	8018f66 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	4a30      	ldr	r2, [pc, #192]	; (8018f6c <RegionEU868InitDefaults+0x128>)
 8018eac:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	4a2f      	ldr	r2, [pc, #188]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018eb4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018eb6:	4b2d      	ldr	r3, [pc, #180]	; (8018f6c <RegionEU868InitDefaults+0x128>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ec0:	2290      	movs	r2, #144	; 0x90
 8018ec2:	4619      	mov	r1, r3
 8018ec4:	f000 ffbd 	bl	8019e42 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018ec8:	4b29      	ldr	r3, [pc, #164]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	4a29      	ldr	r2, [pc, #164]	; (8018f74 <RegionEU868InitDefaults+0x130>)
 8018ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018ed4:	4b26      	ldr	r3, [pc, #152]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4a27      	ldr	r2, [pc, #156]	; (8018f78 <RegionEU868InitDefaults+0x134>)
 8018eda:	330c      	adds	r3, #12
 8018edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018ee2:	4b23      	ldr	r3, [pc, #140]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	4a25      	ldr	r2, [pc, #148]	; (8018f7c <RegionEU868InitDefaults+0x138>)
 8018ee8:	3318      	adds	r3, #24
 8018eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8018eec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018ef0:	4b1f      	ldr	r3, [pc, #124]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	2207      	movs	r2, #7
 8018ef6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018efa:	4b1d      	ldr	r3, [pc, #116]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018f02:	4b1b      	ldr	r3, [pc, #108]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	f7ff f853 	bl	8017fb8 <RegionCommonChanMaskCopy>
 8018f12:	e028      	b.n	8018f66 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018f14:	4b16      	ldr	r3, [pc, #88]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018f1c:	4b14      	ldr	r3, [pc, #80]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2200      	movs	r2, #0
 8018f22:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018f24:	4b12      	ldr	r3, [pc, #72]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018f2c:	4b10      	ldr	r3, [pc, #64]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018f34:	4b0e      	ldr	r3, [pc, #56]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018f3c:	2201      	movs	r2, #1
 8018f3e:	4619      	mov	r1, r3
 8018f40:	f7ff f83a 	bl	8017fb8 <RegionCommonChanMaskCopy>
            break;
 8018f44:	e00f      	b.n	8018f66 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018f46:	4b0a      	ldr	r3, [pc, #40]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018f4e:	4b08      	ldr	r3, [pc, #32]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018f56:	4b06      	ldr	r3, [pc, #24]	; (8018f70 <RegionEU868InitDefaults+0x12c>)
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	430a      	orrs	r2, r1
 8018f5c:	b292      	uxth	r2, r2
 8018f5e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018f62:	e000      	b.n	8018f66 <RegionEU868InitDefaults+0x122>
            break;
 8018f64:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018f66:	37c0      	adds	r7, #192	; 0xc0
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd80      	pop	{r7, pc}
 8018f6c:	200016d0 	.word	0x200016d0
 8018f70:	200016d4 	.word	0x200016d4
 8018f74:	0801f410 	.word	0x0801f410
 8018f78:	0801f41c 	.word	0x0801f41c
 8018f7c:	0801f428 	.word	0x0801f428

08018f80 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	460b      	mov	r3, r1
 8018f8a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018f8c:	78fb      	ldrb	r3, [r7, #3]
 8018f8e:	2b0f      	cmp	r3, #15
 8018f90:	d86c      	bhi.n	801906c <RegionEU868Verify+0xec>
 8018f92:	a201      	add	r2, pc, #4	; (adr r2, 8018f98 <RegionEU868Verify+0x18>)
 8018f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f98:	08018fd9 	.word	0x08018fd9
 8018f9c:	0801906d 	.word	0x0801906d
 8018fa0:	0801906d 	.word	0x0801906d
 8018fa4:	0801906d 	.word	0x0801906d
 8018fa8:	0801906d 	.word	0x0801906d
 8018fac:	08018ff1 	.word	0x08018ff1
 8018fb0:	0801900f 	.word	0x0801900f
 8018fb4:	0801902d 	.word	0x0801902d
 8018fb8:	0801906d 	.word	0x0801906d
 8018fbc:	0801904b 	.word	0x0801904b
 8018fc0:	0801904b 	.word	0x0801904b
 8018fc4:	0801906d 	.word	0x0801906d
 8018fc8:	0801906d 	.word	0x0801906d
 8018fcc:	0801906d 	.word	0x0801906d
 8018fd0:	0801906d 	.word	0x0801906d
 8018fd4:	08019069 	.word	0x08019069
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	f107 020f 	add.w	r2, r7, #15
 8018fe4:	4611      	mov	r1, r2
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7ff fcee 	bl	80189c8 <VerifyRfFreq>
 8018fec:	4603      	mov	r3, r0
 8018fee:	e03e      	b.n	801906e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8018ff6:	2207      	movs	r2, #7
 8018ff8:	2100      	movs	r1, #0
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7fe ff5f 	bl	8017ebe <RegionCommonValueInRange>
 8019000:	4603      	mov	r3, r0
 8019002:	2b00      	cmp	r3, #0
 8019004:	bf14      	ite	ne
 8019006:	2301      	movne	r3, #1
 8019008:	2300      	moveq	r3, #0
 801900a:	b2db      	uxtb	r3, r3
 801900c:	e02f      	b.n	801906e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f993 3000 	ldrsb.w	r3, [r3]
 8019014:	2205      	movs	r2, #5
 8019016:	2100      	movs	r1, #0
 8019018:	4618      	mov	r0, r3
 801901a:	f7fe ff50 	bl	8017ebe <RegionCommonValueInRange>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	bf14      	ite	ne
 8019024:	2301      	movne	r3, #1
 8019026:	2300      	moveq	r3, #0
 8019028:	b2db      	uxtb	r3, r3
 801902a:	e020      	b.n	801906e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f993 3000 	ldrsb.w	r3, [r3]
 8019032:	2207      	movs	r2, #7
 8019034:	2100      	movs	r1, #0
 8019036:	4618      	mov	r0, r3
 8019038:	f7fe ff41 	bl	8017ebe <RegionCommonValueInRange>
 801903c:	4603      	mov	r3, r0
 801903e:	2b00      	cmp	r3, #0
 8019040:	bf14      	ite	ne
 8019042:	2301      	movne	r3, #1
 8019044:	2300      	moveq	r3, #0
 8019046:	b2db      	uxtb	r3, r3
 8019048:	e011      	b.n	801906e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f993 3000 	ldrsb.w	r3, [r3]
 8019050:	2207      	movs	r2, #7
 8019052:	2100      	movs	r1, #0
 8019054:	4618      	mov	r0, r3
 8019056:	f7fe ff32 	bl	8017ebe <RegionCommonValueInRange>
 801905a:	4603      	mov	r3, r0
 801905c:	2b00      	cmp	r3, #0
 801905e:	bf14      	ite	ne
 8019060:	2301      	movne	r3, #1
 8019062:	2300      	moveq	r3, #0
 8019064:	b2db      	uxtb	r3, r3
 8019066:	e002      	b.n	801906e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019068:	2301      	movs	r3, #1
 801906a:	e000      	b.n	801906e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801906c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801906e:	4618      	mov	r0, r3
 8019070:	3710      	adds	r7, #16
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop

08019078 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b08a      	sub	sp, #40	; 0x28
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019080:	2350      	movs	r3, #80	; 0x50
 8019082:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	791b      	ldrb	r3, [r3, #4]
 801908a:	2b10      	cmp	r3, #16
 801908c:	d162      	bne.n	8019154 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	330f      	adds	r3, #15
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d15e      	bne.n	8019158 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801909a:	2300      	movs	r3, #0
 801909c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80190a0:	2303      	movs	r3, #3
 80190a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80190a6:	e050      	b.n	801914a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80190a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190ac:	2b07      	cmp	r3, #7
 80190ae:	d824      	bhi.n	80190fa <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681a      	ldr	r2, [r3, #0]
 80190b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190b8:	4413      	add	r3, r2
 80190ba:	781b      	ldrb	r3, [r3, #0]
 80190bc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80190be:	69ba      	ldr	r2, [r7, #24]
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6819      	ldr	r1, [r3, #0]
 80190c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190c8:	3301      	adds	r3, #1
 80190ca:	440b      	add	r3, r1
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	021b      	lsls	r3, r3, #8
 80190d0:	4313      	orrs	r3, r2
 80190d2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80190d4:	69ba      	ldr	r2, [r7, #24]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	6819      	ldr	r1, [r3, #0]
 80190da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190de:	3302      	adds	r3, #2
 80190e0:	440b      	add	r3, r1
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	041b      	lsls	r3, r3, #16
 80190e6:	4313      	orrs	r3, r2
 80190e8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80190ea:	69bb      	ldr	r3, [r7, #24]
 80190ec:	2264      	movs	r2, #100	; 0x64
 80190ee:	fb02 f303 	mul.w	r3, r2, r3
 80190f2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80190f4:	2300      	movs	r3, #0
 80190f6:	61fb      	str	r3, [r7, #28]
 80190f8:	e006      	b.n	8019108 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80190fa:	2300      	movs	r3, #0
 80190fc:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80190fe:	2300      	movs	r3, #0
 8019100:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8019104:	2300      	movs	r3, #0
 8019106:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8019108:	69bb      	ldr	r3, [r7, #24]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d00b      	beq.n	8019126 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801910e:	f107 0318 	add.w	r3, r7, #24
 8019112:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8019114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019118:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801911a:	f107 0310 	add.w	r3, r7, #16
 801911e:	4618      	mov	r0, r3
 8019120:	f000 fd14 	bl	8019b4c <RegionEU868ChannelAdd>
 8019124:	e007      	b.n	8019136 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8019126:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801912a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801912c:	f107 030c 	add.w	r3, r7, #12
 8019130:	4618      	mov	r0, r3
 8019132:	f000 fdad 	bl	8019c90 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801913a:	3303      	adds	r3, #3
 801913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019144:	3301      	adds	r3, #1
 8019146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801914a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801914e:	2b0f      	cmp	r3, #15
 8019150:	d9aa      	bls.n	80190a8 <RegionEU868ApplyCFList+0x30>
 8019152:	e002      	b.n	801915a <RegionEU868ApplyCFList+0xe2>
        return;
 8019154:	bf00      	nop
 8019156:	e000      	b.n	801915a <RegionEU868ApplyCFList+0xe2>
        return;
 8019158:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801915a:	3728      	adds	r7, #40	; 0x28
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}

08019160 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	791b      	ldrb	r3, [r3, #4]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d002      	beq.n	8019176 <RegionEU868ChanMaskSet+0x16>
 8019170:	2b01      	cmp	r3, #1
 8019172:	d00b      	beq.n	801918c <RegionEU868ChanMaskSet+0x2c>
 8019174:	e015      	b.n	80191a2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019176:	4b0e      	ldr	r3, [pc, #56]	; (80191b0 <RegionEU868ChanMaskSet+0x50>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2201      	movs	r2, #1
 8019184:	4619      	mov	r1, r3
 8019186:	f7fe ff17 	bl	8017fb8 <RegionCommonChanMaskCopy>
            break;
 801918a:	e00c      	b.n	80191a6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801918c:	4b08      	ldr	r3, [pc, #32]	; (80191b0 <RegionEU868ChanMaskSet+0x50>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2201      	movs	r2, #1
 801919a:	4619      	mov	r1, r3
 801919c:	f7fe ff0c 	bl	8017fb8 <RegionCommonChanMaskCopy>
            break;
 80191a0:	e001      	b.n	80191a6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80191a2:	2300      	movs	r3, #0
 80191a4:	e000      	b.n	80191a8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80191a6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}
 80191b0:	200016d4 	.word	0x200016d4

080191b4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b088      	sub	sp, #32
 80191b8:	af02      	add	r7, sp, #8
 80191ba:	60ba      	str	r2, [r7, #8]
 80191bc:	607b      	str	r3, [r7, #4]
 80191be:	4603      	mov	r3, r0
 80191c0:	73fb      	strb	r3, [r7, #15]
 80191c2:	460b      	mov	r3, r1
 80191c4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80191c6:	2300      	movs	r3, #0
 80191c8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80191ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191ce:	2b07      	cmp	r3, #7
 80191d0:	bfa8      	it	ge
 80191d2:	2307      	movge	r3, #7
 80191d4:	b25a      	sxtb	r2, r3
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191e0:	491e      	ldr	r1, [pc, #120]	; (801925c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7ff fb88 	bl	80188f8 <RegionCommonGetBandwidth>
 80191e8:	4603      	mov	r3, r0
 80191ea:	b2da      	uxtb	r2, r3
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191f6:	2b07      	cmp	r3, #7
 80191f8:	d10a      	bne.n	8019210 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019200:	461a      	mov	r2, r3
 8019202:	4b17      	ldr	r3, [pc, #92]	; (8019260 <RegionEU868ComputeRxWindowParameters+0xac>)
 8019204:	5c9b      	ldrb	r3, [r3, r2]
 8019206:	4618      	mov	r0, r3
 8019208:	f7ff f90a 	bl	8018420 <RegionCommonComputeSymbolTimeFsk>
 801920c:	6178      	str	r0, [r7, #20]
 801920e:	e011      	b.n	8019234 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019216:	461a      	mov	r2, r3
 8019218:	4b11      	ldr	r3, [pc, #68]	; (8019260 <RegionEU868ComputeRxWindowParameters+0xac>)
 801921a:	5c9a      	ldrb	r2, [r3, r2]
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019222:	4619      	mov	r1, r3
 8019224:	4b0d      	ldr	r3, [pc, #52]	; (801925c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801922a:	4619      	mov	r1, r3
 801922c:	4610      	mov	r0, r2
 801922e:	f7ff f8e1 	bl	80183f4 <RegionCommonComputeSymbolTimeLoRa>
 8019232:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019234:	4b0b      	ldr	r3, [pc, #44]	; (8019264 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8019236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019238:	4798      	blx	r3
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	3308      	adds	r3, #8
 801923e:	687a      	ldr	r2, [r7, #4]
 8019240:	320c      	adds	r2, #12
 8019242:	7bb9      	ldrb	r1, [r7, #14]
 8019244:	9201      	str	r2, [sp, #4]
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	4603      	mov	r3, r0
 801924a:	68ba      	ldr	r2, [r7, #8]
 801924c:	6978      	ldr	r0, [r7, #20]
 801924e:	f7ff f8f7 	bl	8018440 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8019252:	bf00      	nop
 8019254:	3718      	adds	r7, #24
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	0801f9e8 	.word	0x0801f9e8
 8019260:	0801f9e0 	.word	0x0801f9e0
 8019264:	0801fa18 	.word	0x0801fa18

08019268 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019268:	b5b0      	push	{r4, r5, r7, lr}
 801926a:	b090      	sub	sp, #64	; 0x40
 801926c:	af0a      	add	r7, sp, #40	; 0x28
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	785b      	ldrb	r3, [r3, #1]
 8019276:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019278:	2300      	movs	r3, #0
 801927a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801927c:	2300      	movs	r3, #0
 801927e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	685b      	ldr	r3, [r3, #4]
 8019284:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019286:	4b5a      	ldr	r3, [pc, #360]	; (80193f0 <RegionEU868RxConfig+0x188>)
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	4798      	blx	r3
 801928c:	4603      	mov	r3, r0
 801928e:	2b00      	cmp	r3, #0
 8019290:	d001      	beq.n	8019296 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019292:	2300      	movs	r3, #0
 8019294:	e0a8      	b.n	80193e8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	7cdb      	ldrb	r3, [r3, #19]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d126      	bne.n	80192ec <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801929e:	4b55      	ldr	r3, [pc, #340]	; (80193f4 <RegionEU868RxConfig+0x18c>)
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	4619      	mov	r1, r3
 80192a8:	460b      	mov	r3, r1
 80192aa:	005b      	lsls	r3, r3, #1
 80192ac:	440b      	add	r3, r1
 80192ae:	009b      	lsls	r3, r3, #2
 80192b0:	4413      	add	r3, r2
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80192b6:	4b4f      	ldr	r3, [pc, #316]	; (80193f4 <RegionEU868RxConfig+0x18c>)
 80192b8:	681a      	ldr	r2, [r3, #0]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	4619      	mov	r1, r3
 80192c0:	460b      	mov	r3, r1
 80192c2:	005b      	lsls	r3, r3, #1
 80192c4:	440b      	add	r3, r1
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	4413      	add	r3, r2
 80192ca:	3304      	adds	r3, #4
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d00c      	beq.n	80192ec <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80192d2:	4b48      	ldr	r3, [pc, #288]	; (80193f4 <RegionEU868RxConfig+0x18c>)
 80192d4:	681a      	ldr	r2, [r3, #0]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	4619      	mov	r1, r3
 80192dc:	460b      	mov	r3, r1
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	440b      	add	r3, r1
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	4413      	add	r3, r2
 80192e6:	3304      	adds	r3, #4
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80192ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192f0:	4a41      	ldr	r2, [pc, #260]	; (80193f8 <RegionEU868RxConfig+0x190>)
 80192f2:	5cd3      	ldrb	r3, [r2, r3]
 80192f4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80192f6:	4b3e      	ldr	r3, [pc, #248]	; (80193f0 <RegionEU868RxConfig+0x188>)
 80192f8:	68db      	ldr	r3, [r3, #12]
 80192fa:	6938      	ldr	r0, [r7, #16]
 80192fc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80192fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019302:	2b07      	cmp	r3, #7
 8019304:	d128      	bne.n	8019358 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8019306:	2300      	movs	r3, #0
 8019308:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801930a:	4b39      	ldr	r3, [pc, #228]	; (80193f0 <RegionEU868RxConfig+0x188>)
 801930c:	699c      	ldr	r4, [r3, #24]
 801930e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019316:	fb02 f303 	mul.w	r3, r2, r3
 801931a:	4619      	mov	r1, r3
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	689b      	ldr	r3, [r3, #8]
 8019320:	b29b      	uxth	r3, r3
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	7c92      	ldrb	r2, [r2, #18]
 8019326:	7df8      	ldrb	r0, [r7, #23]
 8019328:	9209      	str	r2, [sp, #36]	; 0x24
 801932a:	2200      	movs	r2, #0
 801932c:	9208      	str	r2, [sp, #32]
 801932e:	2200      	movs	r2, #0
 8019330:	9207      	str	r2, [sp, #28]
 8019332:	2200      	movs	r2, #0
 8019334:	9206      	str	r2, [sp, #24]
 8019336:	2201      	movs	r2, #1
 8019338:	9205      	str	r2, [sp, #20]
 801933a:	2200      	movs	r2, #0
 801933c:	9204      	str	r2, [sp, #16]
 801933e:	2200      	movs	r2, #0
 8019340:	9203      	str	r2, [sp, #12]
 8019342:	9302      	str	r3, [sp, #8]
 8019344:	2305      	movs	r3, #5
 8019346:	9301      	str	r3, [sp, #4]
 8019348:	4b2c      	ldr	r3, [pc, #176]	; (80193fc <RegionEU868RxConfig+0x194>)
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	2300      	movs	r3, #0
 801934e:	460a      	mov	r2, r1
 8019350:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019354:	47a0      	blx	r4
 8019356:	e024      	b.n	80193a2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019358:	2301      	movs	r3, #1
 801935a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801935c:	4b24      	ldr	r3, [pc, #144]	; (80193f0 <RegionEU868RxConfig+0x188>)
 801935e:	699c      	ldr	r4, [r3, #24]
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	789b      	ldrb	r3, [r3, #2]
 8019364:	461d      	mov	r5, r3
 8019366:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	689b      	ldr	r3, [r3, #8]
 801936e:	b29b      	uxth	r3, r3
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	7c92      	ldrb	r2, [r2, #18]
 8019374:	7df8      	ldrb	r0, [r7, #23]
 8019376:	9209      	str	r2, [sp, #36]	; 0x24
 8019378:	2201      	movs	r2, #1
 801937a:	9208      	str	r2, [sp, #32]
 801937c:	2200      	movs	r2, #0
 801937e:	9207      	str	r2, [sp, #28]
 8019380:	2200      	movs	r2, #0
 8019382:	9206      	str	r2, [sp, #24]
 8019384:	2200      	movs	r2, #0
 8019386:	9205      	str	r2, [sp, #20]
 8019388:	2200      	movs	r2, #0
 801938a:	9204      	str	r2, [sp, #16]
 801938c:	2200      	movs	r2, #0
 801938e:	9203      	str	r2, [sp, #12]
 8019390:	9302      	str	r3, [sp, #8]
 8019392:	2308      	movs	r3, #8
 8019394:	9301      	str	r3, [sp, #4]
 8019396:	2300      	movs	r3, #0
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	2301      	movs	r3, #1
 801939c:	460a      	mov	r2, r1
 801939e:	4629      	mov	r1, r5
 80193a0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	7c5b      	ldrb	r3, [r3, #17]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d005      	beq.n	80193b6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80193aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193ae:	4a14      	ldr	r2, [pc, #80]	; (8019400 <RegionEU868RxConfig+0x198>)
 80193b0:	5cd3      	ldrb	r3, [r2, r3]
 80193b2:	75bb      	strb	r3, [r7, #22]
 80193b4:	e004      	b.n	80193c0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80193b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193ba:	4a12      	ldr	r2, [pc, #72]	; (8019404 <RegionEU868RxConfig+0x19c>)
 80193bc:	5cd3      	ldrb	r3, [r2, r3]
 80193be:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80193c0:	4b0b      	ldr	r3, [pc, #44]	; (80193f0 <RegionEU868RxConfig+0x188>)
 80193c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80193c4:	7dba      	ldrb	r2, [r7, #22]
 80193c6:	320d      	adds	r2, #13
 80193c8:	b2d1      	uxtb	r1, r2
 80193ca:	7dfa      	ldrb	r2, [r7, #23]
 80193cc:	4610      	mov	r0, r2
 80193ce:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	7cdb      	ldrb	r3, [r3, #19]
 80193d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80193d8:	6939      	ldr	r1, [r7, #16]
 80193da:	4618      	mov	r0, r3
 80193dc:	f7ff faaa 	bl	8018934 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	7bfa      	ldrb	r2, [r7, #15]
 80193e4:	701a      	strb	r2, [r3, #0]
    return true;
 80193e6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3718      	adds	r7, #24
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bdb0      	pop	{r4, r5, r7, pc}
 80193f0:	0801fa18 	.word	0x0801fa18
 80193f4:	200016d4 	.word	0x200016d4
 80193f8:	0801f9e0 	.word	0x0801f9e0
 80193fc:	00014585 	.word	0x00014585
 8019400:	0801fa10 	.word	0x0801fa10
 8019404:	0801fa08 	.word	0x0801fa08

08019408 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019408:	b590      	push	{r4, r7, lr}
 801940a:	b093      	sub	sp, #76	; 0x4c
 801940c:	af0a      	add	r7, sp, #40	; 0x28
 801940e:	60f8      	str	r0, [r7, #12]
 8019410:	60b9      	str	r1, [r7, #8]
 8019412:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801941a:	461a      	mov	r2, r3
 801941c:	4b5d      	ldr	r3, [pc, #372]	; (8019594 <RegionEU868TxConfig+0x18c>)
 801941e:	5c9b      	ldrb	r3, [r3, r2]
 8019420:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019428:	4b5b      	ldr	r3, [pc, #364]	; (8019598 <RegionEU868TxConfig+0x190>)
 801942a:	681a      	ldr	r2, [r3, #0]
 801942c:	4b5b      	ldr	r3, [pc, #364]	; (801959c <RegionEU868TxConfig+0x194>)
 801942e:	6819      	ldr	r1, [r3, #0]
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	461c      	mov	r4, r3
 8019436:	4623      	mov	r3, r4
 8019438:	005b      	lsls	r3, r3, #1
 801943a:	4423      	add	r3, r4
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	440b      	add	r3, r1
 8019440:	3309      	adds	r3, #9
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	4619      	mov	r1, r3
 8019446:	460b      	mov	r3, r1
 8019448:	005b      	lsls	r3, r3, #1
 801944a:	440b      	add	r3, r1
 801944c:	00db      	lsls	r3, r3, #3
 801944e:	4413      	add	r3, r2
 8019450:	3302      	adds	r3, #2
 8019452:	f993 3000 	ldrsb.w	r3, [r3]
 8019456:	4619      	mov	r1, r3
 8019458:	f7ff fa39 	bl	80188ce <RegionCommonLimitTxPower>
 801945c:	4603      	mov	r3, r0
 801945e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019466:	494e      	ldr	r1, [pc, #312]	; (80195a0 <RegionEU868TxConfig+0x198>)
 8019468:	4618      	mov	r0, r3
 801946a:	f7ff fa45 	bl	80188f8 <RegionCommonGetBandwidth>
 801946e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019470:	2300      	movs	r3, #0
 8019472:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	6859      	ldr	r1, [r3, #4]
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	689a      	ldr	r2, [r3, #8]
 801947c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019480:	4618      	mov	r0, r3
 8019482:	f7ff f895 	bl	80185b0 <RegionCommonComputeTxPower>
 8019486:	4603      	mov	r3, r0
 8019488:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801948a:	4b46      	ldr	r3, [pc, #280]	; (80195a4 <RegionEU868TxConfig+0x19c>)
 801948c:	68da      	ldr	r2, [r3, #12]
 801948e:	4b43      	ldr	r3, [pc, #268]	; (801959c <RegionEU868TxConfig+0x194>)
 8019490:	6819      	ldr	r1, [r3, #0]
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	4618      	mov	r0, r3
 8019498:	4603      	mov	r3, r0
 801949a:	005b      	lsls	r3, r3, #1
 801949c:	4403      	add	r3, r0
 801949e:	009b      	lsls	r3, r3, #2
 80194a0:	440b      	add	r3, r1
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	4618      	mov	r0, r3
 80194a6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194ae:	2b07      	cmp	r3, #7
 80194b0:	d124      	bne.n	80194fc <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80194b2:	2300      	movs	r3, #0
 80194b4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80194b6:	4b3b      	ldr	r3, [pc, #236]	; (80195a4 <RegionEU868TxConfig+0x19c>)
 80194b8:	69dc      	ldr	r4, [r3, #28]
 80194ba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80194be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80194c2:	fb02 f303 	mul.w	r3, r2, r3
 80194c6:	461a      	mov	r2, r3
 80194c8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194cc:	7ff8      	ldrb	r0, [r7, #31]
 80194ce:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80194d2:	9308      	str	r3, [sp, #32]
 80194d4:	2300      	movs	r3, #0
 80194d6:	9307      	str	r3, [sp, #28]
 80194d8:	2300      	movs	r3, #0
 80194da:	9306      	str	r3, [sp, #24]
 80194dc:	2300      	movs	r3, #0
 80194de:	9305      	str	r3, [sp, #20]
 80194e0:	2301      	movs	r3, #1
 80194e2:	9304      	str	r3, [sp, #16]
 80194e4:	2300      	movs	r3, #0
 80194e6:	9303      	str	r3, [sp, #12]
 80194e8:	2305      	movs	r3, #5
 80194ea:	9302      	str	r3, [sp, #8]
 80194ec:	2300      	movs	r3, #0
 80194ee:	9301      	str	r3, [sp, #4]
 80194f0:	9200      	str	r2, [sp, #0]
 80194f2:	69bb      	ldr	r3, [r7, #24]
 80194f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80194f8:	47a0      	blx	r4
 80194fa:	e01d      	b.n	8019538 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80194fc:	2301      	movs	r3, #1
 80194fe:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019500:	4b28      	ldr	r3, [pc, #160]	; (80195a4 <RegionEU868TxConfig+0x19c>)
 8019502:	69dc      	ldr	r4, [r3, #28]
 8019504:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019508:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801950c:	7ff8      	ldrb	r0, [r7, #31]
 801950e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019512:	9208      	str	r2, [sp, #32]
 8019514:	2200      	movs	r2, #0
 8019516:	9207      	str	r2, [sp, #28]
 8019518:	2200      	movs	r2, #0
 801951a:	9206      	str	r2, [sp, #24]
 801951c:	2200      	movs	r2, #0
 801951e:	9205      	str	r2, [sp, #20]
 8019520:	2201      	movs	r2, #1
 8019522:	9204      	str	r2, [sp, #16]
 8019524:	2200      	movs	r2, #0
 8019526:	9203      	str	r2, [sp, #12]
 8019528:	2208      	movs	r2, #8
 801952a:	9202      	str	r2, [sp, #8]
 801952c:	2201      	movs	r2, #1
 801952e:	9201      	str	r2, [sp, #4]
 8019530:	9300      	str	r3, [sp, #0]
 8019532:	69bb      	ldr	r3, [r7, #24]
 8019534:	2200      	movs	r2, #0
 8019536:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019538:	4b18      	ldr	r3, [pc, #96]	; (801959c <RegionEU868TxConfig+0x194>)
 801953a:	681a      	ldr	r2, [r3, #0]
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	4619      	mov	r1, r3
 8019542:	460b      	mov	r3, r1
 8019544:	005b      	lsls	r3, r3, #1
 8019546:	440b      	add	r3, r1
 8019548:	009b      	lsls	r3, r3, #2
 801954a:	4413      	add	r3, r2
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019554:	4619      	mov	r1, r3
 8019556:	4610      	mov	r0, r2
 8019558:	f7ff fa1e 	bl	8018998 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	899b      	ldrh	r3, [r3, #12]
 8019566:	4619      	mov	r1, r3
 8019568:	4610      	mov	r0, r2
 801956a:	f7ff faa3 	bl	8018ab4 <GetTimeOnAir>
 801956e:	4602      	mov	r2, r0
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019574:	4b0b      	ldr	r3, [pc, #44]	; (80195a4 <RegionEU868TxConfig+0x19c>)
 8019576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019578:	68fa      	ldr	r2, [r7, #12]
 801957a:	8992      	ldrh	r2, [r2, #12]
 801957c:	b2d1      	uxtb	r1, r2
 801957e:	7ffa      	ldrb	r2, [r7, #31]
 8019580:	4610      	mov	r0, r2
 8019582:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	7f7a      	ldrb	r2, [r7, #29]
 8019588:	701a      	strb	r2, [r3, #0]
    return true;
 801958a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801958c:	4618      	mov	r0, r3
 801958e:	3724      	adds	r7, #36	; 0x24
 8019590:	46bd      	mov	sp, r7
 8019592:	bd90      	pop	{r4, r7, pc}
 8019594:	0801f9e0 	.word	0x0801f9e0
 8019598:	200016d0 	.word	0x200016d0
 801959c:	200016d4 	.word	0x200016d4
 80195a0:	0801f9e8 	.word	0x0801f9e8
 80195a4:	0801fa18 	.word	0x0801fa18

080195a8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80195a8:	b590      	push	{r4, r7, lr}
 80195aa:	b093      	sub	sp, #76	; 0x4c
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	60f8      	str	r0, [r7, #12]
 80195b0:	60b9      	str	r1, [r7, #8]
 80195b2:	607a      	str	r2, [r7, #4]
 80195b4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80195b6:	2307      	movs	r3, #7
 80195b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80195bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80195c0:	2200      	movs	r2, #0
 80195c2:	601a      	str	r2, [r3, #0]
 80195c4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80195c6:	2300      	movs	r3, #0
 80195c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80195cc:	2300      	movs	r3, #0
 80195ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80195d2:	2300      	movs	r3, #0
 80195d4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195d6:	e085      	b.n	80196e4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	685a      	ldr	r2, [r3, #4]
 80195dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80195e0:	4413      	add	r3, r2
 80195e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80195e6:	4611      	mov	r1, r2
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7fe fe29 	bl	8018240 <RegionCommonParseLinkAdrReq>
 80195ee:	4603      	mov	r3, r0
 80195f0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80195f4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d07b      	beq.n	80196f4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80195fc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019600:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019604:	4413      	add	r3, r2
 8019606:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801960a:	2307      	movs	r3, #7
 801960c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019614:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801961a:	2b00      	cmp	r3, #0
 801961c:	d109      	bne.n	8019632 <RegionEU868LinkAdrReq+0x8a>
 801961e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019620:	2b00      	cmp	r3, #0
 8019622:	d106      	bne.n	8019632 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019624:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019628:	f023 0301 	bic.w	r3, r3, #1
 801962c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019630:	e058      	b.n	80196e4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019632:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019636:	2b00      	cmp	r3, #0
 8019638:	d003      	beq.n	8019642 <RegionEU868LinkAdrReq+0x9a>
 801963a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801963e:	2b05      	cmp	r3, #5
 8019640:	d903      	bls.n	801964a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019646:	2b06      	cmp	r3, #6
 8019648:	d906      	bls.n	8019658 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801964a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801964e:	f023 0301 	bic.w	r3, r3, #1
 8019652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019656:	e045      	b.n	80196e4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019658:	2300      	movs	r3, #0
 801965a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801965e:	e03d      	b.n	80196dc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019664:	2b06      	cmp	r3, #6
 8019666:	d118      	bne.n	801969a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019668:	4b5f      	ldr	r3, [pc, #380]	; (80197e8 <RegionEU868LinkAdrReq+0x240>)
 801966a:	6819      	ldr	r1, [r3, #0]
 801966c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019670:	4613      	mov	r3, r2
 8019672:	005b      	lsls	r3, r3, #1
 8019674:	4413      	add	r3, r2
 8019676:	009b      	lsls	r3, r3, #2
 8019678:	440b      	add	r3, r1
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d028      	beq.n	80196d2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019680:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019684:	2201      	movs	r2, #1
 8019686:	fa02 f303 	lsl.w	r3, r2, r3
 801968a:	b21a      	sxth	r2, r3
 801968c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801968e:	b21b      	sxth	r3, r3
 8019690:	4313      	orrs	r3, r2
 8019692:	b21b      	sxth	r3, r3
 8019694:	b29b      	uxth	r3, r3
 8019696:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019698:	e01b      	b.n	80196d2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801969a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801969c:	461a      	mov	r2, r3
 801969e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196a2:	fa42 f303 	asr.w	r3, r2, r3
 80196a6:	f003 0301 	and.w	r3, r3, #1
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d011      	beq.n	80196d2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80196ae:	4b4e      	ldr	r3, [pc, #312]	; (80197e8 <RegionEU868LinkAdrReq+0x240>)
 80196b0:	6819      	ldr	r1, [r3, #0]
 80196b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80196b6:	4613      	mov	r3, r2
 80196b8:	005b      	lsls	r3, r3, #1
 80196ba:	4413      	add	r3, r2
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	440b      	add	r3, r1
 80196c0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d105      	bne.n	80196d2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80196c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196ca:	f023 0301 	bic.w	r3, r3, #1
 80196ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80196d2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196d6:	3301      	adds	r3, #1
 80196d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80196dc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196e0:	2b0f      	cmp	r3, #15
 80196e2:	d9bd      	bls.n	8019660 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	7a1b      	ldrb	r3, [r3, #8]
 80196e8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196ec:	429a      	cmp	r2, r3
 80196ee:	f4ff af73 	bcc.w	80195d8 <RegionEU868LinkAdrReq+0x30>
 80196f2:	e000      	b.n	80196f6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80196f4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80196f6:	2302      	movs	r3, #2
 80196f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	7a5b      	ldrb	r3, [r3, #9]
 8019700:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019708:	4618      	mov	r0, r3
 801970a:	f7ff fa23 	bl	8018b54 <RegionEU868GetPhyParam>
 801970e:	4603      	mov	r3, r0
 8019710:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019712:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019716:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	7a9b      	ldrb	r3, [r3, #10]
 801971c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801971e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019722:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019724:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019728:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801972a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801972e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019736:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801973e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	7b5b      	ldrb	r3, [r3, #13]
 8019744:	b25b      	sxtb	r3, r3
 8019746:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019748:	2310      	movs	r3, #16
 801974a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801974c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019750:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019754:	b25b      	sxtb	r3, r3
 8019756:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801975a:	2307      	movs	r3, #7
 801975c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019760:	4b21      	ldr	r3, [pc, #132]	; (80197e8 <RegionEU868LinkAdrReq+0x240>)
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019766:	2307      	movs	r3, #7
 8019768:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801976c:	2300      	movs	r3, #0
 801976e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019778:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801977c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019780:	1c9a      	adds	r2, r3, #2
 8019782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019786:	1c59      	adds	r1, r3, #1
 8019788:	f107 0010 	add.w	r0, r7, #16
 801978c:	4623      	mov	r3, r4
 801978e:	f7fe fda8 	bl	80182e2 <RegionCommonLinkAdrReqVerifyParams>
 8019792:	4603      	mov	r3, r0
 8019794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801979c:	2b07      	cmp	r3, #7
 801979e:	d10d      	bne.n	80197bc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80197a0:	4b11      	ldr	r3, [pc, #68]	; (80197e8 <RegionEU868LinkAdrReq+0x240>)
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80197a8:	220c      	movs	r2, #12
 80197aa:	2100      	movs	r1, #0
 80197ac:	4618      	mov	r0, r3
 80197ae:	f000 fb83 	bl	8019eb8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80197b2:	4b0d      	ldr	r3, [pc, #52]	; (80197e8 <RegionEU868LinkAdrReq+0x240>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80197b8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80197bc:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80197c4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80197cc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80197d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80197d6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80197da:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80197dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	374c      	adds	r7, #76	; 0x4c
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd90      	pop	{r4, r7, pc}
 80197e8:	200016d4 	.word	0x200016d4

080197ec <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80197f4:	2307      	movs	r3, #7
 80197f6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80197f8:	2300      	movs	r3, #0
 80197fa:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	685b      	ldr	r3, [r3, #4]
 8019800:	f107 020e 	add.w	r2, r7, #14
 8019804:	4611      	mov	r1, r2
 8019806:	4618      	mov	r0, r3
 8019808:	f7ff f8de 	bl	80189c8 <VerifyRfFreq>
 801980c:	4603      	mov	r3, r0
 801980e:	f083 0301 	eor.w	r3, r3, #1
 8019812:	b2db      	uxtb	r3, r3
 8019814:	2b00      	cmp	r3, #0
 8019816:	d003      	beq.n	8019820 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019818:	7bfb      	ldrb	r3, [r7, #15]
 801981a:	f023 0301 	bic.w	r3, r3, #1
 801981e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f993 3000 	ldrsb.w	r3, [r3]
 8019826:	2207      	movs	r2, #7
 8019828:	2100      	movs	r1, #0
 801982a:	4618      	mov	r0, r3
 801982c:	f7fe fb47 	bl	8017ebe <RegionCommonValueInRange>
 8019830:	4603      	mov	r3, r0
 8019832:	2b00      	cmp	r3, #0
 8019834:	d103      	bne.n	801983e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019836:	7bfb      	ldrb	r3, [r7, #15]
 8019838:	f023 0302 	bic.w	r3, r3, #2
 801983c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019844:	2205      	movs	r2, #5
 8019846:	2100      	movs	r1, #0
 8019848:	4618      	mov	r0, r3
 801984a:	f7fe fb38 	bl	8017ebe <RegionCommonValueInRange>
 801984e:	4603      	mov	r3, r0
 8019850:	2b00      	cmp	r3, #0
 8019852:	d103      	bne.n	801985c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019854:	7bfb      	ldrb	r3, [r7, #15]
 8019856:	f023 0304 	bic.w	r3, r3, #4
 801985a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801985c:	7bfb      	ldrb	r3, [r7, #15]
}
 801985e:	4618      	mov	r0, r3
 8019860:	3710      	adds	r7, #16
 8019862:	46bd      	mov	sp, r7
 8019864:	bd80      	pop	{r7, pc}
	...

08019868 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b086      	sub	sp, #24
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019870:	2303      	movs	r3, #3
 8019872:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d114      	bne.n	80198a8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019884:	b2db      	uxtb	r3, r3
 8019886:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019888:	f107 0308 	add.w	r3, r7, #8
 801988c:	4618      	mov	r0, r3
 801988e:	f000 f9ff 	bl	8019c90 <RegionEU868ChannelsRemove>
 8019892:	4603      	mov	r3, r0
 8019894:	f083 0301 	eor.w	r3, r3, #1
 8019898:	b2db      	uxtb	r3, r3
 801989a:	2b00      	cmp	r3, #0
 801989c:	d03b      	beq.n	8019916 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801989e:	7dfb      	ldrb	r3, [r7, #23]
 80198a0:	f023 0303 	bic.w	r3, r3, #3
 80198a4:	75fb      	strb	r3, [r7, #23]
 80198a6:	e036      	b.n	8019916 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80198b4:	b2db      	uxtb	r3, r3
 80198b6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80198b8:	f107 030c 	add.w	r3, r7, #12
 80198bc:	4618      	mov	r0, r3
 80198be:	f000 f945 	bl	8019b4c <RegionEU868ChannelAdd>
 80198c2:	4603      	mov	r3, r0
 80198c4:	2b06      	cmp	r3, #6
 80198c6:	d820      	bhi.n	801990a <RegionEU868NewChannelReq+0xa2>
 80198c8:	a201      	add	r2, pc, #4	; (adr r2, 80198d0 <RegionEU868NewChannelReq+0x68>)
 80198ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198ce:	bf00      	nop
 80198d0:	08019915 	.word	0x08019915
 80198d4:	0801990b 	.word	0x0801990b
 80198d8:	0801990b 	.word	0x0801990b
 80198dc:	0801990b 	.word	0x0801990b
 80198e0:	080198ed 	.word	0x080198ed
 80198e4:	080198f7 	.word	0x080198f7
 80198e8:	08019901 	.word	0x08019901
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80198ec:	7dfb      	ldrb	r3, [r7, #23]
 80198ee:	f023 0301 	bic.w	r3, r3, #1
 80198f2:	75fb      	strb	r3, [r7, #23]
                break;
 80198f4:	e00f      	b.n	8019916 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80198f6:	7dfb      	ldrb	r3, [r7, #23]
 80198f8:	f023 0302 	bic.w	r3, r3, #2
 80198fc:	75fb      	strb	r3, [r7, #23]
                break;
 80198fe:	e00a      	b.n	8019916 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019900:	7dfb      	ldrb	r3, [r7, #23]
 8019902:	f023 0303 	bic.w	r3, r3, #3
 8019906:	75fb      	strb	r3, [r7, #23]
                break;
 8019908:	e005      	b.n	8019916 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801990a:	7dfb      	ldrb	r3, [r7, #23]
 801990c:	f023 0303 	bic.w	r3, r3, #3
 8019910:	75fb      	strb	r3, [r7, #23]
                break;
 8019912:	e000      	b.n	8019916 <RegionEU868NewChannelReq+0xae>
                break;
 8019914:	bf00      	nop
            }
        }
    }

    return status;
 8019916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801991a:	4618      	mov	r0, r3
 801991c:	3718      	adds	r7, #24
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop

08019924 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019924:	b480      	push	{r7}
 8019926:	b083      	sub	sp, #12
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801992c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019930:	4618      	mov	r0, r3
 8019932:	370c      	adds	r7, #12
 8019934:	46bd      	mov	sp, r7
 8019936:	bc80      	pop	{r7}
 8019938:	4770      	bx	lr
	...

0801993c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019944:	2303      	movs	r3, #3
 8019946:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019948:	2300      	movs	r3, #0
 801994a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	2b0f      	cmp	r3, #15
 8019952:	d901      	bls.n	8019958 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019954:	2300      	movs	r3, #0
 8019956:	e035      	b.n	80199c4 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	f107 020e 	add.w	r2, r7, #14
 8019960:	4611      	mov	r1, r2
 8019962:	4618      	mov	r0, r3
 8019964:	f7ff f830 	bl	80189c8 <VerifyRfFreq>
 8019968:	4603      	mov	r3, r0
 801996a:	f083 0301 	eor.w	r3, r3, #1
 801996e:	b2db      	uxtb	r3, r3
 8019970:	2b00      	cmp	r3, #0
 8019972:	d003      	beq.n	801997c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019974:	7bfb      	ldrb	r3, [r7, #15]
 8019976:	f023 0301 	bic.w	r3, r3, #1
 801997a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801997c:	4b13      	ldr	r3, [pc, #76]	; (80199cc <RegionEU868DlChannelReq+0x90>)
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	4619      	mov	r1, r3
 8019986:	460b      	mov	r3, r1
 8019988:	005b      	lsls	r3, r3, #1
 801998a:	440b      	add	r3, r1
 801998c:	009b      	lsls	r3, r3, #2
 801998e:	4413      	add	r3, r2
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d103      	bne.n	801999e <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019996:	7bfb      	ldrb	r3, [r7, #15]
 8019998:	f023 0302 	bic.w	r3, r3, #2
 801999c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801999e:	7bfb      	ldrb	r3, [r7, #15]
 80199a0:	2b03      	cmp	r3, #3
 80199a2:	d10d      	bne.n	80199c0 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80199a4:	4b09      	ldr	r3, [pc, #36]	; (80199cc <RegionEU868DlChannelReq+0x90>)
 80199a6:	6819      	ldr	r1, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	4618      	mov	r0, r3
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	685a      	ldr	r2, [r3, #4]
 80199b2:	4603      	mov	r3, r0
 80199b4:	005b      	lsls	r3, r3, #1
 80199b6:	4403      	add	r3, r0
 80199b8:	009b      	lsls	r3, r3, #2
 80199ba:	440b      	add	r3, r1
 80199bc:	3304      	adds	r3, #4
 80199be:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80199c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3710      	adds	r7, #16
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}
 80199cc:	200016d4 	.word	0x200016d4

080199d0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80199d0:	b480      	push	{r7}
 80199d2:	b083      	sub	sp, #12
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	4603      	mov	r3, r0
 80199d8:	460a      	mov	r2, r1
 80199da:	71fb      	strb	r3, [r7, #7]
 80199dc:	4613      	mov	r3, r2
 80199de:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80199e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	370c      	adds	r7, #12
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bc80      	pop	{r7}
 80199ec:	4770      	bx	lr
	...

080199f0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b09a      	sub	sp, #104	; 0x68
 80199f4:	af02      	add	r7, sp, #8
 80199f6:	60f8      	str	r0, [r7, #12]
 80199f8:	60b9      	str	r1, [r7, #8]
 80199fa:	607a      	str	r2, [r7, #4]
 80199fc:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80199fe:	2300      	movs	r3, #0
 8019a00:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019a04:	2300      	movs	r3, #0
 8019a06:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019a12:	2200      	movs	r2, #0
 8019a14:	601a      	str	r2, [r3, #0]
 8019a16:	605a      	str	r2, [r3, #4]
 8019a18:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019a1a:	230c      	movs	r3, #12
 8019a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019a20:	2307      	movs	r3, #7
 8019a22:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019a24:	4b47      	ldr	r3, [pc, #284]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a2c:	2201      	movs	r2, #1
 8019a2e:	2100      	movs	r1, #0
 8019a30:	4618      	mov	r0, r3
 8019a32:	f7fe fa95 	bl	8017f60 <RegionCommonCountChannels>
 8019a36:	4603      	mov	r3, r0
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d10a      	bne.n	8019a52 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a3c:	4b41      	ldr	r3, [pc, #260]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a44:	4b3f      	ldr	r3, [pc, #252]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f042 0207 	orr.w	r2, r2, #7
 8019a4c:	b292      	uxth	r2, r2
 8019a4e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	7a5b      	ldrb	r3, [r3, #9]
 8019a56:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019a62:	4b38      	ldr	r3, [pc, #224]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a6a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019a6c:	4b35      	ldr	r3, [pc, #212]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019a72:	4b35      	ldr	r3, [pc, #212]	; (8019b48 <RegionEU868NextChannel+0x158>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019a78:	2310      	movs	r3, #16
 8019a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019a7c:	f107 0312 	add.w	r3, r7, #18
 8019a80:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	7a9b      	ldrb	r3, [r3, #10]
 8019a92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019a96:	2306      	movs	r3, #6
 8019a98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019a9c:	68fa      	ldr	r2, [r7, #12]
 8019a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019aa2:	320c      	adds	r2, #12
 8019aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019aa8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	7d1b      	ldrb	r3, [r3, #20]
 8019ab0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	8adb      	ldrh	r3, [r3, #22]
 8019abe:	4619      	mov	r1, r3
 8019ac0:	4610      	mov	r0, r2
 8019ac2:	f7fe fff7 	bl	8018ab4 <GetTimeOnAir>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019aca:	f107 0314 	add.w	r3, r7, #20
 8019ace:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019ad0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019ad4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019ad8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	9301      	str	r3, [sp, #4]
 8019ae0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	460b      	mov	r3, r1
 8019ae8:	6839      	ldr	r1, [r7, #0]
 8019aea:	f7fe fe50 	bl	801878e <RegionCommonIdentifyChannels>
 8019aee:	4603      	mov	r3, r0
 8019af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d10e      	bne.n	8019b1a <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019afc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019b00:	3b01      	subs	r3, #1
 8019b02:	4619      	mov	r1, r3
 8019b04:	2000      	movs	r0, #0
 8019b06:	f000 f985 	bl	8019e14 <randr>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	3360      	adds	r3, #96	; 0x60
 8019b0e:	443b      	add	r3, r7
 8019b10:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	701a      	strb	r2, [r3, #0]
 8019b18:	e00e      	b.n	8019b38 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019b1e:	2b0c      	cmp	r3, #12
 8019b20:	d10a      	bne.n	8019b38 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019b22:	4b08      	ldr	r3, [pc, #32]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019b2a:	4b06      	ldr	r3, [pc, #24]	; (8019b44 <RegionEU868NextChannel+0x154>)
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	f042 0207 	orr.w	r2, r2, #7
 8019b32:	b292      	uxth	r2, r2
 8019b34:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3760      	adds	r7, #96	; 0x60
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bd80      	pop	{r7, pc}
 8019b44:	200016d4 	.word	0x200016d4
 8019b48:	200016d0 	.word	0x200016d0

08019b4c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b084      	sub	sp, #16
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019b54:	2300      	movs	r3, #0
 8019b56:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019b58:	2300      	movs	r3, #0
 8019b5a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	791b      	ldrb	r3, [r3, #4]
 8019b64:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019b66:	7b7b      	ldrb	r3, [r7, #13]
 8019b68:	2b02      	cmp	r3, #2
 8019b6a:	d801      	bhi.n	8019b70 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b6c:	2306      	movs	r3, #6
 8019b6e:	e089      	b.n	8019c84 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019b70:	7b7b      	ldrb	r3, [r7, #13]
 8019b72:	2b0f      	cmp	r3, #15
 8019b74:	d901      	bls.n	8019b7a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b76:	2303      	movs	r3, #3
 8019b78:	e084      	b.n	8019c84 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	7a1b      	ldrb	r3, [r3, #8]
 8019b80:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b84:	b25b      	sxtb	r3, r3
 8019b86:	2207      	movs	r2, #7
 8019b88:	2100      	movs	r1, #0
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fe f997 	bl	8017ebe <RegionCommonValueInRange>
 8019b90:	4603      	mov	r3, r0
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d101      	bne.n	8019b9a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019b96:	2301      	movs	r3, #1
 8019b98:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	7a1b      	ldrb	r3, [r3, #8]
 8019ba0:	f343 1303 	sbfx	r3, r3, #4, #4
 8019ba4:	b25b      	sxtb	r3, r3
 8019ba6:	2207      	movs	r2, #7
 8019ba8:	2100      	movs	r1, #0
 8019baa:	4618      	mov	r0, r3
 8019bac:	f7fe f987 	bl	8017ebe <RegionCommonValueInRange>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d101      	bne.n	8019bba <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	7a1b      	ldrb	r3, [r3, #8]
 8019bc0:	f343 0303 	sbfx	r3, r3, #0, #4
 8019bc4:	b25a      	sxtb	r2, r3
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	7a1b      	ldrb	r3, [r3, #8]
 8019bcc:	f343 1303 	sbfx	r3, r3, #4, #4
 8019bd0:	b25b      	sxtb	r3, r3
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	dd01      	ble.n	8019bda <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019bda:	7bbb      	ldrb	r3, [r7, #14]
 8019bdc:	f083 0301 	eor.w	r3, r3, #1
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d010      	beq.n	8019c08 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f107 020c 	add.w	r2, r7, #12
 8019bf0:	4611      	mov	r1, r2
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7fe fee8 	bl	80189c8 <VerifyRfFreq>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	f083 0301 	eor.w	r3, r3, #1
 8019bfe:	b2db      	uxtb	r3, r3
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d001      	beq.n	8019c08 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019c04:	2301      	movs	r3, #1
 8019c06:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019c08:	7bfb      	ldrb	r3, [r7, #15]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d004      	beq.n	8019c18 <RegionEU868ChannelAdd+0xcc>
 8019c0e:	7bbb      	ldrb	r3, [r7, #14]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d001      	beq.n	8019c18 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019c14:	2306      	movs	r3, #6
 8019c16:	e035      	b.n	8019c84 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019c18:	7bfb      	ldrb	r3, [r7, #15]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d001      	beq.n	8019c22 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019c1e:	2305      	movs	r3, #5
 8019c20:	e030      	b.n	8019c84 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019c22:	7bbb      	ldrb	r3, [r7, #14]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d001      	beq.n	8019c2c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019c28:	2304      	movs	r3, #4
 8019c2a:	e02b      	b.n	8019c84 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019c2c:	4b17      	ldr	r3, [pc, #92]	; (8019c8c <RegionEU868ChannelAdd+0x140>)
 8019c2e:	6819      	ldr	r1, [r3, #0]
 8019c30:	7b7a      	ldrb	r2, [r7, #13]
 8019c32:	4613      	mov	r3, r2
 8019c34:	005b      	lsls	r3, r3, #1
 8019c36:	4413      	add	r3, r2
 8019c38:	009b      	lsls	r3, r3, #2
 8019c3a:	18c8      	adds	r0, r1, r3
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	220c      	movs	r2, #12
 8019c42:	4619      	mov	r1, r3
 8019c44:	f000 f8fd 	bl	8019e42 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019c48:	4b10      	ldr	r3, [pc, #64]	; (8019c8c <RegionEU868ChannelAdd+0x140>)
 8019c4a:	6819      	ldr	r1, [r3, #0]
 8019c4c:	7b7a      	ldrb	r2, [r7, #13]
 8019c4e:	7b38      	ldrb	r0, [r7, #12]
 8019c50:	4613      	mov	r3, r2
 8019c52:	005b      	lsls	r3, r3, #1
 8019c54:	4413      	add	r3, r2
 8019c56:	009b      	lsls	r3, r3, #2
 8019c58:	440b      	add	r3, r1
 8019c5a:	3309      	adds	r3, #9
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019c60:	4b0a      	ldr	r3, [pc, #40]	; (8019c8c <RegionEU868ChannelAdd+0x140>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019c68:	b21a      	sxth	r2, r3
 8019c6a:	7b7b      	ldrb	r3, [r7, #13]
 8019c6c:	2101      	movs	r1, #1
 8019c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8019c72:	b21b      	sxth	r3, r3
 8019c74:	4313      	orrs	r3, r2
 8019c76:	b21a      	sxth	r2, r3
 8019c78:	4b04      	ldr	r3, [pc, #16]	; (8019c8c <RegionEU868ChannelAdd+0x140>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	b292      	uxth	r2, r2
 8019c7e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019c82:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	3710      	adds	r7, #16
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}
 8019c8c:	200016d4 	.word	0x200016d4

08019c90 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b086      	sub	sp, #24
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	781b      	ldrb	r3, [r3, #0]
 8019c9c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c9e:	7dfb      	ldrb	r3, [r7, #23]
 8019ca0:	2b02      	cmp	r3, #2
 8019ca2:	d801      	bhi.n	8019ca8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	e016      	b.n	8019cd6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019ca8:	4b0d      	ldr	r3, [pc, #52]	; (8019ce0 <RegionEU868ChannelsRemove+0x50>)
 8019caa:	6819      	ldr	r1, [r3, #0]
 8019cac:	7dfa      	ldrb	r2, [r7, #23]
 8019cae:	4613      	mov	r3, r2
 8019cb0:	005b      	lsls	r3, r3, #1
 8019cb2:	4413      	add	r3, r2
 8019cb4:	009b      	lsls	r3, r3, #2
 8019cb6:	440b      	add	r3, r1
 8019cb8:	461a      	mov	r2, r3
 8019cba:	2300      	movs	r3, #0
 8019cbc:	6013      	str	r3, [r2, #0]
 8019cbe:	6053      	str	r3, [r2, #4]
 8019cc0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019cc2:	4b07      	ldr	r3, [pc, #28]	; (8019ce0 <RegionEU868ChannelsRemove+0x50>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019cca:	7df9      	ldrb	r1, [r7, #23]
 8019ccc:	2210      	movs	r2, #16
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7fe f912 	bl	8017ef8 <RegionCommonChanDisable>
 8019cd4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	3718      	adds	r7, #24
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	200016d4 	.word	0x200016d4

08019ce4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019ce4:	b590      	push	{r4, r7, lr}
 8019ce6:	b085      	sub	sp, #20
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019cf2:	4b20      	ldr	r3, [pc, #128]	; (8019d74 <RegionEU868SetContinuousWave+0x90>)
 8019cf4:	681a      	ldr	r2, [r3, #0]
 8019cf6:	4b20      	ldr	r3, [pc, #128]	; (8019d78 <RegionEU868SetContinuousWave+0x94>)
 8019cf8:	6819      	ldr	r1, [r3, #0]
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	461c      	mov	r4, r3
 8019d00:	4623      	mov	r3, r4
 8019d02:	005b      	lsls	r3, r3, #1
 8019d04:	4423      	add	r3, r4
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	440b      	add	r3, r1
 8019d0a:	3309      	adds	r3, #9
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	4619      	mov	r1, r3
 8019d10:	460b      	mov	r3, r1
 8019d12:	005b      	lsls	r3, r3, #1
 8019d14:	440b      	add	r3, r1
 8019d16:	00db      	lsls	r3, r3, #3
 8019d18:	4413      	add	r3, r2
 8019d1a:	3302      	adds	r3, #2
 8019d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8019d20:	4619      	mov	r1, r3
 8019d22:	f7fe fdd4 	bl	80188ce <RegionCommonLimitTxPower>
 8019d26:	4603      	mov	r3, r0
 8019d28:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019d2e:	4b12      	ldr	r3, [pc, #72]	; (8019d78 <RegionEU868SetContinuousWave+0x94>)
 8019d30:	681a      	ldr	r2, [r3, #0]
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	4619      	mov	r1, r3
 8019d38:	460b      	mov	r3, r1
 8019d3a:	005b      	lsls	r3, r3, #1
 8019d3c:	440b      	add	r3, r1
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	4413      	add	r3, r2
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6859      	ldr	r1, [r3, #4]
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	689a      	ldr	r2, [r3, #8]
 8019d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7fe fc2c 	bl	80185b0 <RegionCommonComputeTxPower>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019d5c:	4b07      	ldr	r3, [pc, #28]	; (8019d7c <RegionEU868SetContinuousWave+0x98>)
 8019d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d60:	687a      	ldr	r2, [r7, #4]
 8019d62:	8992      	ldrh	r2, [r2, #12]
 8019d64:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d68:	68b8      	ldr	r0, [r7, #8]
 8019d6a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019d6c:	bf00      	nop
 8019d6e:	3714      	adds	r7, #20
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd90      	pop	{r4, r7, pc}
 8019d74:	200016d0 	.word	0x200016d0
 8019d78:	200016d4 	.word	0x200016d4
 8019d7c:	0801fa18 	.word	0x0801fa18

08019d80 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d80:	b480      	push	{r7}
 8019d82:	b085      	sub	sp, #20
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	4603      	mov	r3, r0
 8019d88:	71fb      	strb	r3, [r7, #7]
 8019d8a:	460b      	mov	r3, r1
 8019d8c:	71bb      	strb	r3, [r7, #6]
 8019d8e:	4613      	mov	r3, r2
 8019d90:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019d92:	79ba      	ldrb	r2, [r7, #6]
 8019d94:	797b      	ldrb	r3, [r7, #5]
 8019d96:	1ad3      	subs	r3, r2, r3
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	da01      	bge.n	8019da8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019da4:	2300      	movs	r3, #0
 8019da6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019da8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019daa:	4618      	mov	r0, r3
 8019dac:	3714      	adds	r7, #20
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bc80      	pop	{r7}
 8019db2:	4770      	bx	lr

08019db4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019db4:	b480      	push	{r7}
 8019db6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019db8:	4b0d      	ldr	r3, [pc, #52]	; (8019df0 <rand1+0x3c>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	4a0d      	ldr	r2, [pc, #52]	; (8019df4 <rand1+0x40>)
 8019dbe:	fb02 f303 	mul.w	r3, r2, r3
 8019dc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019dc6:	3339      	adds	r3, #57	; 0x39
 8019dc8:	4a09      	ldr	r2, [pc, #36]	; (8019df0 <rand1+0x3c>)
 8019dca:	6013      	str	r3, [r2, #0]
 8019dcc:	4b08      	ldr	r3, [pc, #32]	; (8019df0 <rand1+0x3c>)
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	2303      	movs	r3, #3
 8019dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8019dd6:	1ad1      	subs	r1, r2, r3
 8019dd8:	0849      	lsrs	r1, r1, #1
 8019dda:	440b      	add	r3, r1
 8019ddc:	0f99      	lsrs	r1, r3, #30
 8019dde:	460b      	mov	r3, r1
 8019de0:	07db      	lsls	r3, r3, #31
 8019de2:	1a5b      	subs	r3, r3, r1
 8019de4:	1ad1      	subs	r1, r2, r3
 8019de6:	460b      	mov	r3, r1
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bc80      	pop	{r7}
 8019dee:	4770      	bx	lr
 8019df0:	20000148 	.word	0x20000148
 8019df4:	41c64e6d 	.word	0x41c64e6d

08019df8 <srand1>:

void srand1( uint32_t seed )
{
 8019df8:	b480      	push	{r7}
 8019dfa:	b083      	sub	sp, #12
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
    next = seed;
 8019e00:	4a03      	ldr	r2, [pc, #12]	; (8019e10 <srand1+0x18>)
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6013      	str	r3, [r2, #0]
}
 8019e06:	bf00      	nop
 8019e08:	370c      	adds	r7, #12
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bc80      	pop	{r7}
 8019e0e:	4770      	bx	lr
 8019e10:	20000148 	.word	0x20000148

08019e14 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019e1e:	f7ff ffc9 	bl	8019db4 <rand1>
 8019e22:	4602      	mov	r2, r0
 8019e24:	6839      	ldr	r1, [r7, #0]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	1acb      	subs	r3, r1, r3
 8019e2a:	3301      	adds	r3, #1
 8019e2c:	fb92 f1f3 	sdiv	r1, r2, r3
 8019e30:	fb01 f303 	mul.w	r3, r1, r3
 8019e34:	1ad2      	subs	r2, r2, r3
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	4413      	add	r3, r2
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3708      	adds	r7, #8
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e42:	b480      	push	{r7}
 8019e44:	b085      	sub	sp, #20
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	60f8      	str	r0, [r7, #12]
 8019e4a:	60b9      	str	r1, [r7, #8]
 8019e4c:	4613      	mov	r3, r2
 8019e4e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019e50:	e007      	b.n	8019e62 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e52:	68ba      	ldr	r2, [r7, #8]
 8019e54:	1c53      	adds	r3, r2, #1
 8019e56:	60bb      	str	r3, [r7, #8]
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	1c59      	adds	r1, r3, #1
 8019e5c:	60f9      	str	r1, [r7, #12]
 8019e5e:	7812      	ldrb	r2, [r2, #0]
 8019e60:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e62:	88fb      	ldrh	r3, [r7, #6]
 8019e64:	1e5a      	subs	r2, r3, #1
 8019e66:	80fa      	strh	r2, [r7, #6]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d1f2      	bne.n	8019e52 <memcpy1+0x10>
    }
}
 8019e6c:	bf00      	nop
 8019e6e:	bf00      	nop
 8019e70:	3714      	adds	r7, #20
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bc80      	pop	{r7}
 8019e76:	4770      	bx	lr

08019e78 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e78:	b480      	push	{r7}
 8019e7a:	b085      	sub	sp, #20
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	60f8      	str	r0, [r7, #12]
 8019e80:	60b9      	str	r1, [r7, #8]
 8019e82:	4613      	mov	r3, r2
 8019e84:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019e86:	88fb      	ldrh	r3, [r7, #6]
 8019e88:	3b01      	subs	r3, #1
 8019e8a:	68fa      	ldr	r2, [r7, #12]
 8019e8c:	4413      	add	r3, r2
 8019e8e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e90:	e007      	b.n	8019ea2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019e92:	68ba      	ldr	r2, [r7, #8]
 8019e94:	1c53      	adds	r3, r2, #1
 8019e96:	60bb      	str	r3, [r7, #8]
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	1e59      	subs	r1, r3, #1
 8019e9c:	60f9      	str	r1, [r7, #12]
 8019e9e:	7812      	ldrb	r2, [r2, #0]
 8019ea0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019ea2:	88fb      	ldrh	r3, [r7, #6]
 8019ea4:	1e5a      	subs	r2, r3, #1
 8019ea6:	80fa      	strh	r2, [r7, #6]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d1f2      	bne.n	8019e92 <memcpyr+0x1a>
    }
}
 8019eac:	bf00      	nop
 8019eae:	bf00      	nop
 8019eb0:	3714      	adds	r7, #20
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bc80      	pop	{r7}
 8019eb6:	4770      	bx	lr

08019eb8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b083      	sub	sp, #12
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	460b      	mov	r3, r1
 8019ec2:	70fb      	strb	r3, [r7, #3]
 8019ec4:	4613      	mov	r3, r2
 8019ec6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019ec8:	e004      	b.n	8019ed4 <memset1+0x1c>
    {
        *dst++ = value;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	1c5a      	adds	r2, r3, #1
 8019ece:	607a      	str	r2, [r7, #4]
 8019ed0:	78fa      	ldrb	r2, [r7, #3]
 8019ed2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019ed4:	883b      	ldrh	r3, [r7, #0]
 8019ed6:	1e5a      	subs	r2, r3, #1
 8019ed8:	803a      	strh	r2, [r7, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d1f5      	bne.n	8019eca <memset1+0x12>
    }
}
 8019ede:	bf00      	nop
 8019ee0:	bf00      	nop
 8019ee2:	370c      	adds	r7, #12
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bc80      	pop	{r7}
 8019ee8:	4770      	bx	lr
	...

08019eec <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019eec:	b480      	push	{r7}
 8019eee:	b085      	sub	sp, #20
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8019efc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d101      	bne.n	8019f08 <Crc32+0x1c>
    {
        return 0;
 8019f04:	2300      	movs	r3, #0
 8019f06:	e026      	b.n	8019f56 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019f08:	2300      	movs	r3, #0
 8019f0a:	817b      	strh	r3, [r7, #10]
 8019f0c:	e01d      	b.n	8019f4a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019f0e:	897b      	ldrh	r3, [r7, #10]
 8019f10:	687a      	ldr	r2, [r7, #4]
 8019f12:	4413      	add	r3, r2
 8019f14:	781b      	ldrb	r3, [r3, #0]
 8019f16:	461a      	mov	r2, r3
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	4053      	eors	r3, r2
 8019f1c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019f1e:	2300      	movs	r3, #0
 8019f20:	813b      	strh	r3, [r7, #8]
 8019f22:	e00c      	b.n	8019f3e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	085a      	lsrs	r2, r3, #1
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	f003 0301 	and.w	r3, r3, #1
 8019f2e:	425b      	negs	r3, r3
 8019f30:	490b      	ldr	r1, [pc, #44]	; (8019f60 <Crc32+0x74>)
 8019f32:	400b      	ands	r3, r1
 8019f34:	4053      	eors	r3, r2
 8019f36:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019f38:	893b      	ldrh	r3, [r7, #8]
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	813b      	strh	r3, [r7, #8]
 8019f3e:	893b      	ldrh	r3, [r7, #8]
 8019f40:	2b07      	cmp	r3, #7
 8019f42:	d9ef      	bls.n	8019f24 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019f44:	897b      	ldrh	r3, [r7, #10]
 8019f46:	3301      	adds	r3, #1
 8019f48:	817b      	strh	r3, [r7, #10]
 8019f4a:	897a      	ldrh	r2, [r7, #10]
 8019f4c:	887b      	ldrh	r3, [r7, #2]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d3dd      	bcc.n	8019f0e <Crc32+0x22>
        }
    }

    return ~crc;
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	43db      	mvns	r3, r3
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3714      	adds	r7, #20
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bc80      	pop	{r7}
 8019f5e:	4770      	bx	lr
 8019f60:	edb88320 	.word	0xedb88320

08019f64 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af02      	add	r7, sp, #8
 8019f6a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019f6c:	4a24      	ldr	r2, [pc, #144]	; (801a000 <RadioInit+0x9c>)
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019f72:	4b24      	ldr	r3, [pc, #144]	; (801a004 <RadioInit+0xa0>)
 8019f74:	2200      	movs	r2, #0
 8019f76:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019f78:	4b22      	ldr	r3, [pc, #136]	; (801a004 <RadioInit+0xa0>)
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019f7e:	4b21      	ldr	r3, [pc, #132]	; (801a004 <RadioInit+0xa0>)
 8019f80:	2200      	movs	r2, #0
 8019f82:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f84:	4b1f      	ldr	r3, [pc, #124]	; (801a004 <RadioInit+0xa0>)
 8019f86:	2200      	movs	r2, #0
 8019f88:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019f8a:	481f      	ldr	r0, [pc, #124]	; (801a008 <RadioInit+0xa4>)
 8019f8c:	f001 ffc2 	bl	801bf14 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019f90:	4b1c      	ldr	r3, [pc, #112]	; (801a004 <RadioInit+0xa0>)
 8019f92:	2200      	movs	r2, #0
 8019f94:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019f96:	4b1b      	ldr	r3, [pc, #108]	; (801a004 <RadioInit+0xa0>)
 8019f98:	2200      	movs	r2, #0
 8019f9a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019f9c:	f002 fa56 	bl	801c44c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	2000      	movs	r0, #0
 8019fa4:	f002 fe22 	bl	801cbec <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019fa8:	2204      	movs	r2, #4
 8019faa:	2100      	movs	r1, #0
 8019fac:	2001      	movs	r0, #1
 8019fae:	f002 fbdf 	bl	801c770 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019fba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019fbe:	f002 fb0f 	bl	801c5e0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019fc2:	f000 fe99 	bl	801acf8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	9300      	str	r3, [sp, #0]
 8019fca:	4b10      	ldr	r3, [pc, #64]	; (801a00c <RadioInit+0xa8>)
 8019fcc:	2200      	movs	r2, #0
 8019fce:	f04f 31ff 	mov.w	r1, #4294967295
 8019fd2:	480f      	ldr	r0, [pc, #60]	; (801a010 <RadioInit+0xac>)
 8019fd4:	f004 f82c 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019fd8:	2300      	movs	r3, #0
 8019fda:	9300      	str	r3, [sp, #0]
 8019fdc:	4b0d      	ldr	r3, [pc, #52]	; (801a014 <RadioInit+0xb0>)
 8019fde:	2200      	movs	r2, #0
 8019fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8019fe4:	480c      	ldr	r0, [pc, #48]	; (801a018 <RadioInit+0xb4>)
 8019fe6:	f004 f823 	bl	801e030 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019fea:	4809      	ldr	r0, [pc, #36]	; (801a010 <RadioInit+0xac>)
 8019fec:	f004 f8c4 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019ff0:	4809      	ldr	r0, [pc, #36]	; (801a018 <RadioInit+0xb4>)
 8019ff2:	f004 f8c1 	bl	801e178 <UTIL_TIMER_Stop>
}
 8019ff6:	bf00      	nop
 8019ff8:	3708      	adds	r7, #8
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bd80      	pop	{r7, pc}
 8019ffe:	bf00      	nop
 801a000:	200017d8 	.word	0x200017d8
 801a004:	200017dc 	.word	0x200017dc
 801a008:	0801b0f1 	.word	0x0801b0f1
 801a00c:	0801b079 	.word	0x0801b079
 801a010:	20001838 	.word	0x20001838
 801a014:	0801b08d 	.word	0x0801b08d
 801a018:	20001850 	.word	0x20001850

0801a01c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a020:	f001 ffc0 	bl	801bfa4 <SUBGRF_GetOperatingMode>
 801a024:	4603      	mov	r3, r0
 801a026:	2b07      	cmp	r3, #7
 801a028:	d00a      	beq.n	801a040 <RadioGetStatus+0x24>
 801a02a:	2b07      	cmp	r3, #7
 801a02c:	dc0a      	bgt.n	801a044 <RadioGetStatus+0x28>
 801a02e:	2b04      	cmp	r3, #4
 801a030:	d002      	beq.n	801a038 <RadioGetStatus+0x1c>
 801a032:	2b05      	cmp	r3, #5
 801a034:	d002      	beq.n	801a03c <RadioGetStatus+0x20>
 801a036:	e005      	b.n	801a044 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a038:	2302      	movs	r3, #2
 801a03a:	e004      	b.n	801a046 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a03c:	2301      	movs	r3, #1
 801a03e:	e002      	b.n	801a046 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a040:	2303      	movs	r3, #3
 801a042:	e000      	b.n	801a046 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a044:	2300      	movs	r3, #0
    }
}
 801a046:	4618      	mov	r0, r3
 801a048:	bd80      	pop	{r7, pc}
	...

0801a04c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	4603      	mov	r3, r0
 801a054:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a056:	4a2a      	ldr	r2, [pc, #168]	; (801a100 <RadioSetModem+0xb4>)
 801a058:	79fb      	ldrb	r3, [r7, #7]
 801a05a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a05c:	79fb      	ldrb	r3, [r7, #7]
 801a05e:	4618      	mov	r0, r3
 801a060:	f003 f997 	bl	801d392 <RFW_SetRadioModem>
    switch( modem )
 801a064:	79fb      	ldrb	r3, [r7, #7]
 801a066:	2b05      	cmp	r3, #5
 801a068:	d80e      	bhi.n	801a088 <RadioSetModem+0x3c>
 801a06a:	a201      	add	r2, pc, #4	; (adr r2, 801a070 <RadioSetModem+0x24>)
 801a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a070:	0801a097 	.word	0x0801a097
 801a074:	0801a0a5 	.word	0x0801a0a5
 801a078:	0801a089 	.word	0x0801a089
 801a07c:	0801a0cb 	.word	0x0801a0cb
 801a080:	0801a0d9 	.word	0x0801a0d9
 801a084:	0801a0e7 	.word	0x0801a0e7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a088:	2003      	movs	r0, #3
 801a08a:	f002 fb4b 	bl	801c724 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a08e:	4b1c      	ldr	r3, [pc, #112]	; (801a100 <RadioSetModem+0xb4>)
 801a090:	2200      	movs	r2, #0
 801a092:	735a      	strb	r2, [r3, #13]
        break;
 801a094:	e02f      	b.n	801a0f6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a096:	2000      	movs	r0, #0
 801a098:	f002 fb44 	bl	801c724 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a09c:	4b18      	ldr	r3, [pc, #96]	; (801a100 <RadioSetModem+0xb4>)
 801a09e:	2200      	movs	r2, #0
 801a0a0:	735a      	strb	r2, [r3, #13]
        break;
 801a0a2:	e028      	b.n	801a0f6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a0a4:	2001      	movs	r0, #1
 801a0a6:	f002 fb3d 	bl	801c724 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a0aa:	4b15      	ldr	r3, [pc, #84]	; (801a100 <RadioSetModem+0xb4>)
 801a0ac:	7b5a      	ldrb	r2, [r3, #13]
 801a0ae:	4b14      	ldr	r3, [pc, #80]	; (801a100 <RadioSetModem+0xb4>)
 801a0b0:	7b1b      	ldrb	r3, [r3, #12]
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d01e      	beq.n	801a0f4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a0b6:	4b12      	ldr	r3, [pc, #72]	; (801a100 <RadioSetModem+0xb4>)
 801a0b8:	7b1a      	ldrb	r2, [r3, #12]
 801a0ba:	4b11      	ldr	r3, [pc, #68]	; (801a100 <RadioSetModem+0xb4>)
 801a0bc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a0be:	4b10      	ldr	r3, [pc, #64]	; (801a100 <RadioSetModem+0xb4>)
 801a0c0:	7b5b      	ldrb	r3, [r3, #13]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f000 ffa2 	bl	801b00c <RadioSetPublicNetwork>
        }
        break;
 801a0c8:	e014      	b.n	801a0f4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0ca:	2002      	movs	r0, #2
 801a0cc:	f002 fb2a 	bl	801c724 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0d0:	4b0b      	ldr	r3, [pc, #44]	; (801a100 <RadioSetModem+0xb4>)
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	735a      	strb	r2, [r3, #13]
        break;
 801a0d6:	e00e      	b.n	801a0f6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0d8:	2002      	movs	r0, #2
 801a0da:	f002 fb23 	bl	801c724 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0de:	4b08      	ldr	r3, [pc, #32]	; (801a100 <RadioSetModem+0xb4>)
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	735a      	strb	r2, [r3, #13]
        break;
 801a0e4:	e007      	b.n	801a0f6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a0e6:	2000      	movs	r0, #0
 801a0e8:	f002 fb1c 	bl	801c724 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0ec:	4b04      	ldr	r3, [pc, #16]	; (801a100 <RadioSetModem+0xb4>)
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	735a      	strb	r2, [r3, #13]
        break;
 801a0f2:	e000      	b.n	801a0f6 <RadioSetModem+0xaa>
        break;
 801a0f4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a0f6:	bf00      	nop
 801a0f8:	3708      	adds	r7, #8
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	bd80      	pop	{r7, pc}
 801a0fe:	bf00      	nop
 801a100:	200017dc 	.word	0x200017dc

0801a104 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b082      	sub	sp, #8
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a10c:	6878      	ldr	r0, [r7, #4]
 801a10e:	f002 fac3 	bl	801c698 <SUBGRF_SetRfFrequency>
}
 801a112:	bf00      	nop
 801a114:	3708      	adds	r7, #8
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}

0801a11a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a11a:	b580      	push	{r7, lr}
 801a11c:	b090      	sub	sp, #64	; 0x40
 801a11e:	af0a      	add	r7, sp, #40	; 0x28
 801a120:	60f8      	str	r0, [r7, #12]
 801a122:	60b9      	str	r1, [r7, #8]
 801a124:	603b      	str	r3, [r7, #0]
 801a126:	4613      	mov	r3, r2
 801a128:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a12a:	2301      	movs	r3, #1
 801a12c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a12e:	2300      	movs	r3, #0
 801a130:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a132:	2300      	movs	r3, #0
 801a134:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a136:	f000 fdf2 	bl	801ad1e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a13a:	2000      	movs	r0, #0
 801a13c:	f7ff ff86 	bl	801a04c <RadioSetModem>

    RadioSetChannel( freq );
 801a140:	68f8      	ldr	r0, [r7, #12]
 801a142:	f7ff ffdf 	bl	801a104 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a146:	2301      	movs	r3, #1
 801a148:	9309      	str	r3, [sp, #36]	; 0x24
 801a14a:	2300      	movs	r3, #0
 801a14c:	9308      	str	r3, [sp, #32]
 801a14e:	2300      	movs	r3, #0
 801a150:	9307      	str	r3, [sp, #28]
 801a152:	2300      	movs	r3, #0
 801a154:	9306      	str	r3, [sp, #24]
 801a156:	2300      	movs	r3, #0
 801a158:	9305      	str	r3, [sp, #20]
 801a15a:	2300      	movs	r3, #0
 801a15c:	9304      	str	r3, [sp, #16]
 801a15e:	2300      	movs	r3, #0
 801a160:	9303      	str	r3, [sp, #12]
 801a162:	2300      	movs	r3, #0
 801a164:	9302      	str	r3, [sp, #8]
 801a166:	2303      	movs	r3, #3
 801a168:	9301      	str	r3, [sp, #4]
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	9300      	str	r3, [sp, #0]
 801a16e:	2300      	movs	r3, #0
 801a170:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a174:	68b9      	ldr	r1, [r7, #8]
 801a176:	2000      	movs	r0, #0
 801a178:	f000 f83c 	bl	801a1f4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a17c:	2000      	movs	r0, #0
 801a17e:	f000 fdd5 	bl	801ad2c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a182:	f000 ff71 	bl	801b068 <RadioGetWakeupTime>
 801a186:	4603      	mov	r3, r0
 801a188:	4618      	mov	r0, r3
 801a18a:	f7e8 fd57 	bl	8002c3c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a18e:	f004 f90d 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 801a192:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a194:	e00d      	b.n	801a1b2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a196:	2000      	movs	r0, #0
 801a198:	f000 feb6 	bl	801af08 <RadioRssi>
 801a19c:	4603      	mov	r3, r0
 801a19e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a1a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a1a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	dd02      	ble.n	801a1b2 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	75fb      	strb	r3, [r7, #23]
            break;
 801a1b0:	e006      	b.n	801a1c0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a1b2:	6938      	ldr	r0, [r7, #16]
 801a1b4:	f004 f90c 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 801a1b8:	4602      	mov	r2, r0
 801a1ba:	683b      	ldr	r3, [r7, #0]
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	d8ea      	bhi.n	801a196 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a1c0:	f000 fdad 	bl	801ad1e <RadioStandby>

    return status;
 801a1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3718      	adds	r7, #24
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}

0801a1ce <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a1ce:	b580      	push	{r7, lr}
 801a1d0:	b082      	sub	sp, #8
 801a1d2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a1d8:	2300      	movs	r3, #0
 801a1da:	2200      	movs	r2, #0
 801a1dc:	2100      	movs	r1, #0
 801a1de:	2000      	movs	r0, #0
 801a1e0:	f002 f9fe 	bl	801c5e0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a1e4:	f001 ffaf 	bl	801c146 <SUBGRF_GetRandom>
 801a1e8:	6078      	str	r0, [r7, #4]

    return rnd;
 801a1ea:	687b      	ldr	r3, [r7, #4]
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3708      	adds	r7, #8
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}

0801a1f4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b08a      	sub	sp, #40	; 0x28
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	60b9      	str	r1, [r7, #8]
 801a1fc:	607a      	str	r2, [r7, #4]
 801a1fe:	461a      	mov	r2, r3
 801a200:	4603      	mov	r3, r0
 801a202:	73fb      	strb	r3, [r7, #15]
 801a204:	4613      	mov	r3, r2
 801a206:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a208:	4ab9      	ldr	r2, [pc, #740]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a20a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a20e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a210:	f003 f87d 	bl	801d30e <RFW_DeInit>
    if( rxContinuous == true )
 801a214:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d001      	beq.n	801a220 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a21c:	2300      	movs	r3, #0
 801a21e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a220:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a224:	2b00      	cmp	r3, #0
 801a226:	d004      	beq.n	801a232 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a228:	4ab2      	ldr	r2, [pc, #712]	; (801a4f4 <RadioSetRxConfig+0x300>)
 801a22a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a22e:	7013      	strb	r3, [r2, #0]
 801a230:	e002      	b.n	801a238 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a232:	4bb0      	ldr	r3, [pc, #704]	; (801a4f4 <RadioSetRxConfig+0x300>)
 801a234:	22ff      	movs	r2, #255	; 0xff
 801a236:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a238:	7bfb      	ldrb	r3, [r7, #15]
 801a23a:	2b05      	cmp	r3, #5
 801a23c:	d009      	beq.n	801a252 <RadioSetRxConfig+0x5e>
 801a23e:	2b05      	cmp	r3, #5
 801a240:	f300 81d7 	bgt.w	801a5f2 <RadioSetRxConfig+0x3fe>
 801a244:	2b00      	cmp	r3, #0
 801a246:	f000 80bf 	beq.w	801a3c8 <RadioSetRxConfig+0x1d4>
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	f000 8124 	beq.w	801a498 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a250:	e1cf      	b.n	801a5f2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a252:	2001      	movs	r0, #1
 801a254:	f002 f8bc 	bl	801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a258:	4ba5      	ldr	r3, [pc, #660]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a25a:	2200      	movs	r2, #0
 801a25c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a260:	4aa3      	ldr	r2, [pc, #652]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a266:	4ba2      	ldr	r3, [pc, #648]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a268:	2209      	movs	r2, #9
 801a26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a26e:	4ba0      	ldr	r3, [pc, #640]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a270:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a274:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a276:	68b8      	ldr	r0, [r7, #8]
 801a278:	f002 ff7c 	bl	801d174 <SUBGRF_GetFskBandwidthRegValue>
 801a27c:	4603      	mov	r3, r0
 801a27e:	461a      	mov	r2, r3
 801a280:	4b9b      	ldr	r3, [pc, #620]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a286:	4b9a      	ldr	r3, [pc, #616]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a288:	2200      	movs	r2, #0
 801a28a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a28c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a28e:	00db      	lsls	r3, r3, #3
 801a290:	b29a      	uxth	r2, r3
 801a292:	4b97      	ldr	r3, [pc, #604]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a294:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a296:	4b96      	ldr	r3, [pc, #600]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a298:	2200      	movs	r2, #0
 801a29a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a29c:	4b94      	ldr	r3, [pc, #592]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a29e:	2210      	movs	r2, #16
 801a2a0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a2a2:	4b93      	ldr	r3, [pc, #588]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a2a8:	4b91      	ldr	r3, [pc, #580]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a2ae:	4b91      	ldr	r3, [pc, #580]	; (801a4f4 <RadioSetRxConfig+0x300>)
 801a2b0:	781a      	ldrb	r2, [r3, #0]
 801a2b2:	4b8f      	ldr	r3, [pc, #572]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a2b4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a2b6:	4b8e      	ldr	r3, [pc, #568]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a2b8:	2201      	movs	r2, #1
 801a2ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a2bc:	4b8c      	ldr	r3, [pc, #560]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a2be:	2200      	movs	r2, #0
 801a2c0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a2c2:	2005      	movs	r0, #5
 801a2c4:	f7ff fec2 	bl	801a04c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2c8:	488b      	ldr	r0, [pc, #556]	; (801a4f8 <RadioSetRxConfig+0x304>)
 801a2ca:	f002 fb1f 	bl	801c90c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2ce:	488b      	ldr	r0, [pc, #556]	; (801a4fc <RadioSetRxConfig+0x308>)
 801a2d0:	f002 fbee 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a2d4:	4a8a      	ldr	r2, [pc, #552]	; (801a500 <RadioSetRxConfig+0x30c>)
 801a2d6:	f107 031c 	add.w	r3, r7, #28
 801a2da:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a2de:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2e2:	f107 031c 	add.w	r3, r7, #28
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	f001 feab 	bl	801c042 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a2ec:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a2f0:	f001 fef6 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a2f4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2f8:	f000 fe25 	bl	801af46 <RadioRead>
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a306:	f023 0310 	bic.w	r3, r3, #16
 801a30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a312:	4619      	mov	r1, r3
 801a314:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a318:	f000 fe03 	bl	801af22 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a31c:	2104      	movs	r1, #4
 801a31e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a322:	f000 fdfe 	bl	801af22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a326:	f640 009b 	movw	r0, #2203	; 0x89b
 801a32a:	f000 fe0c 	bl	801af46 <RadioRead>
 801a32e:	4603      	mov	r3, r0
 801a330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a338:	f023 031c 	bic.w	r3, r3, #28
 801a33c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a344:	f043 0308 	orr.w	r3, r3, #8
 801a348:	b2db      	uxtb	r3, r3
 801a34a:	4619      	mov	r1, r3
 801a34c:	f640 009b 	movw	r0, #2203	; 0x89b
 801a350:	f000 fde7 	bl	801af22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a354:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a358:	f000 fdf5 	bl	801af46 <RadioRead>
 801a35c:	4603      	mov	r3, r0
 801a35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a366:	f023 0318 	bic.w	r3, r3, #24
 801a36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a36e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a372:	f043 0318 	orr.w	r3, r3, #24
 801a376:	b2db      	uxtb	r3, r3
 801a378:	4619      	mov	r1, r3
 801a37a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a37e:	f000 fdd0 	bl	801af22 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a382:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a386:	f000 fdde 	bl	801af46 <RadioRead>
 801a38a:	4603      	mov	r3, r0
 801a38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3a0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a3a4:	b2db      	uxtb	r3, r3
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a3ac:	f000 fdb9 	bl	801af22 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a3b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a3b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a3b6:	fb02 f303 	mul.w	r3, r2, r3
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3c2:	4a4b      	ldr	r2, [pc, #300]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3c4:	6093      	str	r3, [r2, #8]
            break;
 801a3c6:	e115      	b.n	801a5f4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a3c8:	2000      	movs	r0, #0
 801a3ca:	f002 f801 	bl	801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a3ce:	4b48      	ldr	r3, [pc, #288]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a3d6:	4a46      	ldr	r2, [pc, #280]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a3dc:	4b44      	ldr	r3, [pc, #272]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3de:	220b      	movs	r2, #11
 801a3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a3e4:	68b8      	ldr	r0, [r7, #8]
 801a3e6:	f002 fec5 	bl	801d174 <SUBGRF_GetFskBandwidthRegValue>
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	461a      	mov	r2, r3
 801a3ee:	4b40      	ldr	r3, [pc, #256]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3f4:	4b3e      	ldr	r3, [pc, #248]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a3fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a3fc:	00db      	lsls	r3, r3, #3
 801a3fe:	b29a      	uxth	r2, r3
 801a400:	4b3b      	ldr	r3, [pc, #236]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a402:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a404:	4b3a      	ldr	r3, [pc, #232]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a406:	2204      	movs	r2, #4
 801a408:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a40a:	4b39      	ldr	r3, [pc, #228]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a40c:	2218      	movs	r2, #24
 801a40e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a410:	4b37      	ldr	r3, [pc, #220]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a412:	2200      	movs	r2, #0
 801a414:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a416:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a41a:	f083 0301 	eor.w	r3, r3, #1
 801a41e:	b2db      	uxtb	r3, r3
 801a420:	461a      	mov	r2, r3
 801a422:	4b33      	ldr	r3, [pc, #204]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a424:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a426:	4b33      	ldr	r3, [pc, #204]	; (801a4f4 <RadioSetRxConfig+0x300>)
 801a428:	781a      	ldrb	r2, [r3, #0]
 801a42a:	4b31      	ldr	r3, [pc, #196]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a42c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a42e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a432:	2b00      	cmp	r3, #0
 801a434:	d003      	beq.n	801a43e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a436:	4b2e      	ldr	r3, [pc, #184]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a438:	22f2      	movs	r2, #242	; 0xf2
 801a43a:	75da      	strb	r2, [r3, #23]
 801a43c:	e002      	b.n	801a444 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a43e:	4b2c      	ldr	r3, [pc, #176]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a440:	2201      	movs	r2, #1
 801a442:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a444:	4b2a      	ldr	r3, [pc, #168]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a446:	2201      	movs	r2, #1
 801a448:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a44a:	f000 fc68 	bl	801ad1e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a44e:	2000      	movs	r0, #0
 801a450:	f7ff fdfc 	bl	801a04c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a454:	4828      	ldr	r0, [pc, #160]	; (801a4f8 <RadioSetRxConfig+0x304>)
 801a456:	f002 fa59 	bl	801c90c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a45a:	4828      	ldr	r0, [pc, #160]	; (801a4fc <RadioSetRxConfig+0x308>)
 801a45c:	f002 fb28 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a460:	4a28      	ldr	r2, [pc, #160]	; (801a504 <RadioSetRxConfig+0x310>)
 801a462:	f107 0314 	add.w	r3, r7, #20
 801a466:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a46a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a46e:	f107 0314 	add.w	r3, r7, #20
 801a472:	4618      	mov	r0, r3
 801a474:	f001 fde5 	bl	801c042 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a478:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a47c:	f001 fe30 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a480:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a482:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a486:	fb02 f303 	mul.w	r3, r2, r3
 801a48a:	461a      	mov	r2, r3
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a492:	4a17      	ldr	r2, [pc, #92]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a494:	6093      	str	r3, [r2, #8]
            break;
 801a496:	e0ad      	b.n	801a5f4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a498:	2000      	movs	r0, #0
 801a49a:	f001 ff99 	bl	801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a49e:	4b14      	ldr	r3, [pc, #80]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a4a0:	2201      	movs	r2, #1
 801a4a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	b2da      	uxtb	r2, r3
 801a4aa:	4b11      	ldr	r3, [pc, #68]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a4ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a4b0:	4a15      	ldr	r2, [pc, #84]	; (801a508 <RadioSetRxConfig+0x314>)
 801a4b2:	68bb      	ldr	r3, [r7, #8]
 801a4b4:	4413      	add	r3, r2
 801a4b6:	781a      	ldrb	r2, [r3, #0]
 801a4b8:	4b0d      	ldr	r3, [pc, #52]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a4ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a4be:	4a0c      	ldr	r2, [pc, #48]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a4c0:	7bbb      	ldrb	r3, [r7, #14]
 801a4c2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a4c6:	68bb      	ldr	r3, [r7, #8]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d105      	bne.n	801a4d8 <RadioSetRxConfig+0x2e4>
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b0b      	cmp	r3, #11
 801a4d0:	d008      	beq.n	801a4e4 <RadioSetRxConfig+0x2f0>
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	2b0c      	cmp	r3, #12
 801a4d6:	d005      	beq.n	801a4e4 <RadioSetRxConfig+0x2f0>
 801a4d8:	68bb      	ldr	r3, [r7, #8]
 801a4da:	2b01      	cmp	r3, #1
 801a4dc:	d116      	bne.n	801a50c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	2b0c      	cmp	r3, #12
 801a4e2:	d113      	bne.n	801a50c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a4e4:	4b02      	ldr	r3, [pc, #8]	; (801a4f0 <RadioSetRxConfig+0x2fc>)
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a4ec:	e012      	b.n	801a514 <RadioSetRxConfig+0x320>
 801a4ee:	bf00      	nop
 801a4f0:	200017dc 	.word	0x200017dc
 801a4f4:	2000014c 	.word	0x2000014c
 801a4f8:	20001814 	.word	0x20001814
 801a4fc:	200017ea 	.word	0x200017ea
 801a500:	0801f434 	.word	0x0801f434
 801a504:	0801f43c 	.word	0x0801f43c
 801a508:	0801faa4 	.word	0x0801faa4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a50c:	4b3b      	ldr	r3, [pc, #236]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a50e:	2200      	movs	r2, #0
 801a510:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a514:	4b39      	ldr	r3, [pc, #228]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a516:	2201      	movs	r2, #1
 801a518:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a51a:	4b38      	ldr	r3, [pc, #224]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a51c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a520:	2b05      	cmp	r3, #5
 801a522:	d004      	beq.n	801a52e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a524:	4b35      	ldr	r3, [pc, #212]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a52a:	2b06      	cmp	r3, #6
 801a52c:	d10a      	bne.n	801a544 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a52e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a530:	2b0b      	cmp	r3, #11
 801a532:	d803      	bhi.n	801a53c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a534:	4b31      	ldr	r3, [pc, #196]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a536:	220c      	movs	r2, #12
 801a538:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a53a:	e006      	b.n	801a54a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a53c:	4a2f      	ldr	r2, [pc, #188]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a53e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a540:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a542:	e002      	b.n	801a54a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a544:	4a2d      	ldr	r2, [pc, #180]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a546:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a548:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a54a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a54e:	4b2b      	ldr	r3, [pc, #172]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a550:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a552:	4b2b      	ldr	r3, [pc, #172]	; (801a600 <RadioSetRxConfig+0x40c>)
 801a554:	781a      	ldrb	r2, [r3, #0]
 801a556:	4b29      	ldr	r3, [pc, #164]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a558:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a55a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a55e:	4b27      	ldr	r3, [pc, #156]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a560:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a564:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a568:	4b24      	ldr	r3, [pc, #144]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a56a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a56e:	f000 fbd6 	bl	801ad1e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a572:	2001      	movs	r0, #1
 801a574:	f7ff fd6a 	bl	801a04c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a578:	4822      	ldr	r0, [pc, #136]	; (801a604 <RadioSetRxConfig+0x410>)
 801a57a:	f002 f9c7 	bl	801c90c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a57e:	4822      	ldr	r0, [pc, #136]	; (801a608 <RadioSetRxConfig+0x414>)
 801a580:	f002 fa96 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a584:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a586:	b2db      	uxtb	r3, r3
 801a588:	4618      	mov	r0, r3
 801a58a:	f001 ff30 	bl	801c3ee <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a58e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a592:	f002 fbe9 	bl	801cd68 <SUBGRF_ReadRegister>
 801a596:	4603      	mov	r3, r0
 801a598:	f003 0301 	and.w	r3, r3, #1
 801a59c:	b2db      	uxtb	r3, r3
 801a59e:	4619      	mov	r1, r3
 801a5a0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a5a4:	f002 fbcc 	bl	801cd40 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a5a8:	4b14      	ldr	r3, [pc, #80]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a5aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a5ae:	2b01      	cmp	r3, #1
 801a5b0:	d10d      	bne.n	801a5ce <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a5b2:	f240 7036 	movw	r0, #1846	; 0x736
 801a5b6:	f002 fbd7 	bl	801cd68 <SUBGRF_ReadRegister>
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	f023 0304 	bic.w	r3, r3, #4
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	4619      	mov	r1, r3
 801a5c4:	f240 7036 	movw	r0, #1846	; 0x736
 801a5c8:	f002 fbba 	bl	801cd40 <SUBGRF_WriteRegister>
 801a5cc:	e00c      	b.n	801a5e8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a5ce:	f240 7036 	movw	r0, #1846	; 0x736
 801a5d2:	f002 fbc9 	bl	801cd68 <SUBGRF_ReadRegister>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	f043 0304 	orr.w	r3, r3, #4
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	4619      	mov	r1, r3
 801a5e0:	f240 7036 	movw	r0, #1846	; 0x736
 801a5e4:	f002 fbac 	bl	801cd40 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a5e8:	4b04      	ldr	r3, [pc, #16]	; (801a5fc <RadioSetRxConfig+0x408>)
 801a5ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5ee:	609a      	str	r2, [r3, #8]
            break;
 801a5f0:	e000      	b.n	801a5f4 <RadioSetRxConfig+0x400>
            break;
 801a5f2:	bf00      	nop
    }
}
 801a5f4:	bf00      	nop
 801a5f6:	3728      	adds	r7, #40	; 0x28
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	200017dc 	.word	0x200017dc
 801a600:	2000014c 	.word	0x2000014c
 801a604:	20001814 	.word	0x20001814
 801a608:	200017ea 	.word	0x200017ea

0801a60c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b086      	sub	sp, #24
 801a610:	af00      	add	r7, sp, #0
 801a612:	60ba      	str	r2, [r7, #8]
 801a614:	607b      	str	r3, [r7, #4]
 801a616:	4603      	mov	r3, r0
 801a618:	73fb      	strb	r3, [r7, #15]
 801a61a:	460b      	mov	r3, r1
 801a61c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a61e:	f002 fe76 	bl	801d30e <RFW_DeInit>
    switch( modem )
 801a622:	7bfb      	ldrb	r3, [r7, #15]
 801a624:	2b04      	cmp	r3, #4
 801a626:	f000 80c7 	beq.w	801a7b8 <RadioSetTxConfig+0x1ac>
 801a62a:	2b04      	cmp	r3, #4
 801a62c:	f300 80d6 	bgt.w	801a7dc <RadioSetTxConfig+0x1d0>
 801a630:	2b00      	cmp	r3, #0
 801a632:	d002      	beq.n	801a63a <RadioSetTxConfig+0x2e>
 801a634:	2b01      	cmp	r3, #1
 801a636:	d059      	beq.n	801a6ec <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a638:	e0d0      	b.n	801a7dc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a63a:	4b77      	ldr	r3, [pc, #476]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a63c:	2200      	movs	r2, #0
 801a63e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a642:	4a75      	ldr	r2, [pc, #468]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a644:	6a3b      	ldr	r3, [r7, #32]
 801a646:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a648:	4b73      	ldr	r3, [pc, #460]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a64a:	220b      	movs	r2, #11
 801a64c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a650:	6878      	ldr	r0, [r7, #4]
 801a652:	f002 fd8f 	bl	801d174 <SUBGRF_GetFskBandwidthRegValue>
 801a656:	4603      	mov	r3, r0
 801a658:	461a      	mov	r2, r3
 801a65a:	4b6f      	ldr	r3, [pc, #444]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a660:	4a6d      	ldr	r2, [pc, #436]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a662:	68bb      	ldr	r3, [r7, #8]
 801a664:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a666:	4b6c      	ldr	r3, [pc, #432]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a668:	2200      	movs	r2, #0
 801a66a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a66c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a66e:	00db      	lsls	r3, r3, #3
 801a670:	b29a      	uxth	r2, r3
 801a672:	4b69      	ldr	r3, [pc, #420]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a674:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a676:	4b68      	ldr	r3, [pc, #416]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a678:	2204      	movs	r2, #4
 801a67a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a67c:	4b66      	ldr	r3, [pc, #408]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a67e:	2218      	movs	r2, #24
 801a680:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a682:	4b65      	ldr	r3, [pc, #404]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a684:	2200      	movs	r2, #0
 801a686:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a688:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a68c:	f083 0301 	eor.w	r3, r3, #1
 801a690:	b2db      	uxtb	r3, r3
 801a692:	461a      	mov	r2, r3
 801a694:	4b60      	ldr	r3, [pc, #384]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a696:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a698:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d003      	beq.n	801a6a8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a6a0:	4b5d      	ldr	r3, [pc, #372]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a6a2:	22f2      	movs	r2, #242	; 0xf2
 801a6a4:	75da      	strb	r2, [r3, #23]
 801a6a6:	e002      	b.n	801a6ae <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a6a8:	4b5b      	ldr	r3, [pc, #364]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a6aa:	2201      	movs	r2, #1
 801a6ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a6ae:	4b5a      	ldr	r3, [pc, #360]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a6b4:	f000 fb33 	bl	801ad1e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a6b8:	2000      	movs	r0, #0
 801a6ba:	f7ff fcc7 	bl	801a04c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6be:	4857      	ldr	r0, [pc, #348]	; (801a81c <RadioSetTxConfig+0x210>)
 801a6c0:	f002 f924 	bl	801c90c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6c4:	4856      	ldr	r0, [pc, #344]	; (801a820 <RadioSetTxConfig+0x214>)
 801a6c6:	f002 f9f3 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a6ca:	4a56      	ldr	r2, [pc, #344]	; (801a824 <RadioSetTxConfig+0x218>)
 801a6cc:	f107 0310 	add.w	r3, r7, #16
 801a6d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6d4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6d8:	f107 0310 	add.w	r3, r7, #16
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f001 fcb0 	bl	801c042 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6e6:	f001 fcfb 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
            break;
 801a6ea:	e078      	b.n	801a7de <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a6ec:	4b4a      	ldr	r3, [pc, #296]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a6f4:	6a3b      	ldr	r3, [r7, #32]
 801a6f6:	b2da      	uxtb	r2, r3
 801a6f8:	4b47      	ldr	r3, [pc, #284]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a6fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a6fe:	4a4a      	ldr	r2, [pc, #296]	; (801a828 <RadioSetTxConfig+0x21c>)
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	4413      	add	r3, r2
 801a704:	781a      	ldrb	r2, [r3, #0]
 801a706:	4b44      	ldr	r3, [pc, #272]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a70c:	4a42      	ldr	r2, [pc, #264]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a70e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a712:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d105      	bne.n	801a728 <RadioSetTxConfig+0x11c>
 801a71c:	6a3b      	ldr	r3, [r7, #32]
 801a71e:	2b0b      	cmp	r3, #11
 801a720:	d008      	beq.n	801a734 <RadioSetTxConfig+0x128>
 801a722:	6a3b      	ldr	r3, [r7, #32]
 801a724:	2b0c      	cmp	r3, #12
 801a726:	d005      	beq.n	801a734 <RadioSetTxConfig+0x128>
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2b01      	cmp	r3, #1
 801a72c:	d107      	bne.n	801a73e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a72e:	6a3b      	ldr	r3, [r7, #32]
 801a730:	2b0c      	cmp	r3, #12
 801a732:	d104      	bne.n	801a73e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a734:	4b38      	ldr	r3, [pc, #224]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a736:	2201      	movs	r2, #1
 801a738:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a73c:	e003      	b.n	801a746 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a73e:	4b36      	ldr	r3, [pc, #216]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a740:	2200      	movs	r2, #0
 801a742:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a746:	4b34      	ldr	r3, [pc, #208]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a748:	2201      	movs	r2, #1
 801a74a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a74c:	4b32      	ldr	r3, [pc, #200]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a74e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a752:	2b05      	cmp	r3, #5
 801a754:	d004      	beq.n	801a760 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a756:	4b30      	ldr	r3, [pc, #192]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a75c:	2b06      	cmp	r3, #6
 801a75e:	d10a      	bne.n	801a776 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a760:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a762:	2b0b      	cmp	r3, #11
 801a764:	d803      	bhi.n	801a76e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a766:	4b2c      	ldr	r3, [pc, #176]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a768:	220c      	movs	r2, #12
 801a76a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a76c:	e006      	b.n	801a77c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a76e:	4a2a      	ldr	r2, [pc, #168]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a772:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a774:	e002      	b.n	801a77c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a776:	4a28      	ldr	r2, [pc, #160]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a77a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a77c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a780:	4b25      	ldr	r3, [pc, #148]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a782:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a784:	4b29      	ldr	r3, [pc, #164]	; (801a82c <RadioSetTxConfig+0x220>)
 801a786:	781a      	ldrb	r2, [r3, #0]
 801a788:	4b23      	ldr	r3, [pc, #140]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a78a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a78c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a790:	4b21      	ldr	r3, [pc, #132]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a792:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a796:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a79a:	4b1f      	ldr	r3, [pc, #124]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a79c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a7a0:	f000 fabd 	bl	801ad1e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a7a4:	2001      	movs	r0, #1
 801a7a6:	f7ff fc51 	bl	801a04c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7aa:	481c      	ldr	r0, [pc, #112]	; (801a81c <RadioSetTxConfig+0x210>)
 801a7ac:	f002 f8ae 	bl	801c90c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7b0:	481b      	ldr	r0, [pc, #108]	; (801a820 <RadioSetTxConfig+0x214>)
 801a7b2:	f002 f97d 	bl	801cab0 <SUBGRF_SetPacketParams>
            break;
 801a7b6:	e012      	b.n	801a7de <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a7b8:	2004      	movs	r0, #4
 801a7ba:	f7ff fc47 	bl	801a04c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a7be:	4b16      	ldr	r3, [pc, #88]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a7c0:	2202      	movs	r2, #2
 801a7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a7c6:	4a14      	ldr	r2, [pc, #80]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a7c8:	6a3b      	ldr	r3, [r7, #32]
 801a7ca:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a7cc:	4b12      	ldr	r3, [pc, #72]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a7ce:	2216      	movs	r2, #22
 801a7d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7d4:	4811      	ldr	r0, [pc, #68]	; (801a81c <RadioSetTxConfig+0x210>)
 801a7d6:	f002 f899 	bl	801c90c <SUBGRF_SetModulationParams>
            break;
 801a7da:	e000      	b.n	801a7de <RadioSetTxConfig+0x1d2>
            break;
 801a7dc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a7de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f002 fbc8 	bl	801cf78 <SUBGRF_SetRfTxPower>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	4b0a      	ldr	r3, [pc, #40]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a7ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a7f2:	210e      	movs	r1, #14
 801a7f4:	f640 101f 	movw	r0, #2335	; 0x91f
 801a7f8:	f002 faa2 	bl	801cd40 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7fc:	4b06      	ldr	r3, [pc, #24]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a7fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a802:	4618      	mov	r0, r3
 801a804:	f002 fd97 	bl	801d336 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a808:	4a03      	ldr	r2, [pc, #12]	; (801a818 <RadioSetTxConfig+0x20c>)
 801a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a80c:	6053      	str	r3, [r2, #4]
}
 801a80e:	bf00      	nop
 801a810:	3718      	adds	r7, #24
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}
 801a816:	bf00      	nop
 801a818:	200017dc 	.word	0x200017dc
 801a81c:	20001814 	.word	0x20001814
 801a820:	200017ea 	.word	0x200017ea
 801a824:	0801f43c 	.word	0x0801f43c
 801a828:	0801faa4 	.word	0x0801faa4
 801a82c:	2000014c 	.word	0x2000014c

0801a830 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a830:	b480      	push	{r7}
 801a832:	b083      	sub	sp, #12
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
    return true;
 801a838:	2301      	movs	r3, #1
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	370c      	adds	r7, #12
 801a83e:	46bd      	mov	sp, r7
 801a840:	bc80      	pop	{r7}
 801a842:	4770      	bx	lr

0801a844 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a844:	b480      	push	{r7}
 801a846:	b085      	sub	sp, #20
 801a848:	af00      	add	r7, sp, #0
 801a84a:	4603      	mov	r3, r0
 801a84c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a84e:	2300      	movs	r3, #0
 801a850:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a852:	79fb      	ldrb	r3, [r7, #7]
 801a854:	2b0a      	cmp	r3, #10
 801a856:	d83e      	bhi.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
 801a858:	a201      	add	r2, pc, #4	; (adr r2, 801a860 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a85e:	bf00      	nop
 801a860:	0801a88d 	.word	0x0801a88d
 801a864:	0801a89d 	.word	0x0801a89d
 801a868:	0801a8ad 	.word	0x0801a8ad
 801a86c:	0801a8bd 	.word	0x0801a8bd
 801a870:	0801a8c5 	.word	0x0801a8c5
 801a874:	0801a8cb 	.word	0x0801a8cb
 801a878:	0801a8d1 	.word	0x0801a8d1
 801a87c:	0801a8d7 	.word	0x0801a8d7
 801a880:	0801a895 	.word	0x0801a895
 801a884:	0801a8a5 	.word	0x0801a8a5
 801a888:	0801a8b5 	.word	0x0801a8b5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a88c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a890:	60fb      	str	r3, [r7, #12]
        break;
 801a892:	e020      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a894:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a898:	60fb      	str	r3, [r7, #12]
        break;
 801a89a:	e01c      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a89c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a8a0:	60fb      	str	r3, [r7, #12]
        break;
 801a8a2:	e018      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a8a4:	f245 1361 	movw	r3, #20833	; 0x5161
 801a8a8:	60fb      	str	r3, [r7, #12]
        break;
 801a8aa:	e014      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a8ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a8b0:	60fb      	str	r3, [r7, #12]
        break;
 801a8b2:	e010      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a8b4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a8b8:	60fb      	str	r3, [r7, #12]
        break;
 801a8ba:	e00c      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a8bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a8c0:	60fb      	str	r3, [r7, #12]
        break;
 801a8c2:	e008      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a8c4:	4b07      	ldr	r3, [pc, #28]	; (801a8e4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a8c6:	60fb      	str	r3, [r7, #12]
        break;
 801a8c8:	e005      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a8ca:	4b07      	ldr	r3, [pc, #28]	; (801a8e8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a8cc:	60fb      	str	r3, [r7, #12]
        break;
 801a8ce:	e002      	b.n	801a8d6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a8d0:	4b06      	ldr	r3, [pc, #24]	; (801a8ec <RadioGetLoRaBandwidthInHz+0xa8>)
 801a8d2:	60fb      	str	r3, [r7, #12]
        break;
 801a8d4:	bf00      	nop
    }

    return bandwidthInHz;
 801a8d6:	68fb      	ldr	r3, [r7, #12]
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3714      	adds	r7, #20
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bc80      	pop	{r7}
 801a8e0:	4770      	bx	lr
 801a8e2:	bf00      	nop
 801a8e4:	0001e848 	.word	0x0001e848
 801a8e8:	0003d090 	.word	0x0003d090
 801a8ec:	0007a120 	.word	0x0007a120

0801a8f0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a8f0:	b480      	push	{r7}
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	4608      	mov	r0, r1
 801a8fa:	4611      	mov	r1, r2
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	4603      	mov	r3, r0
 801a900:	70fb      	strb	r3, [r7, #3]
 801a902:	460b      	mov	r3, r1
 801a904:	803b      	strh	r3, [r7, #0]
 801a906:	4613      	mov	r3, r2
 801a908:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a90a:	883b      	ldrh	r3, [r7, #0]
 801a90c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a90e:	78ba      	ldrb	r2, [r7, #2]
 801a910:	f082 0201 	eor.w	r2, r2, #1
 801a914:	b2d2      	uxtb	r2, r2
 801a916:	2a00      	cmp	r2, #0
 801a918:	d001      	beq.n	801a91e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a91a:	2208      	movs	r2, #8
 801a91c:	e000      	b.n	801a920 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a91e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a920:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a922:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a926:	7c3b      	ldrb	r3, [r7, #16]
 801a928:	7d39      	ldrb	r1, [r7, #20]
 801a92a:	2900      	cmp	r1, #0
 801a92c:	d001      	beq.n	801a932 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a92e:	2102      	movs	r1, #2
 801a930:	e000      	b.n	801a934 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a932:	2100      	movs	r1, #0
 801a934:	440b      	add	r3, r1
 801a936:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a938:	4413      	add	r3, r2
}
 801a93a:	4618      	mov	r0, r3
 801a93c:	370c      	adds	r7, #12
 801a93e:	46bd      	mov	sp, r7
 801a940:	bc80      	pop	{r7}
 801a942:	4770      	bx	lr

0801a944 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a944:	b480      	push	{r7}
 801a946:	b08b      	sub	sp, #44	; 0x2c
 801a948:	af00      	add	r7, sp, #0
 801a94a:	60f8      	str	r0, [r7, #12]
 801a94c:	60b9      	str	r1, [r7, #8]
 801a94e:	4611      	mov	r1, r2
 801a950:	461a      	mov	r2, r3
 801a952:	460b      	mov	r3, r1
 801a954:	71fb      	strb	r3, [r7, #7]
 801a956:	4613      	mov	r3, r2
 801a958:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a95a:	79fb      	ldrb	r3, [r7, #7]
 801a95c:	3304      	adds	r3, #4
 801a95e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a960:	2300      	movs	r3, #0
 801a962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	2b05      	cmp	r3, #5
 801a96a:	d002      	beq.n	801a972 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a96c:	68bb      	ldr	r3, [r7, #8]
 801a96e:	2b06      	cmp	r3, #6
 801a970:	d104      	bne.n	801a97c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a972:	88bb      	ldrh	r3, [r7, #4]
 801a974:	2b0b      	cmp	r3, #11
 801a976:	d801      	bhi.n	801a97c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a978:	230c      	movs	r3, #12
 801a97a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d105      	bne.n	801a98e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a982:	68bb      	ldr	r3, [r7, #8]
 801a984:	2b0b      	cmp	r3, #11
 801a986:	d008      	beq.n	801a99a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	2b0c      	cmp	r3, #12
 801a98c:	d005      	beq.n	801a99a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	2b01      	cmp	r3, #1
 801a992:	d105      	bne.n	801a9a0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	2b0c      	cmp	r3, #12
 801a998:	d102      	bne.n	801a9a0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a99a:	2301      	movs	r3, #1
 801a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a9a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a9a4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a9a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a9aa:	2a00      	cmp	r2, #0
 801a9ac:	d001      	beq.n	801a9b2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a9ae:	2210      	movs	r2, #16
 801a9b0:	e000      	b.n	801a9b4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a9b2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a9b4:	4413      	add	r3, r2
 801a9b6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a9bc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a9be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a9c2:	2a00      	cmp	r2, #0
 801a9c4:	d001      	beq.n	801a9ca <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	e000      	b.n	801a9cc <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a9ca:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a9cc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a9ce:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	2b06      	cmp	r3, #6
 801a9d4:	d803      	bhi.n	801a9de <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	009b      	lsls	r3, r3, #2
 801a9da:	623b      	str	r3, [r7, #32]
 801a9dc:	e00e      	b.n	801a9fc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	3308      	adds	r3, #8
 801a9e2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d004      	beq.n	801a9f6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	3b02      	subs	r3, #2
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	623b      	str	r3, [r7, #32]
 801a9f4:	e002      	b.n	801a9fc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a9f6:	68bb      	ldr	r3, [r7, #8]
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a9fc:	69fb      	ldr	r3, [r7, #28]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	da01      	bge.n	801aa06 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801aa02:	2300      	movs	r3, #0
 801aa04:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801aa06:	69fa      	ldr	r2, [r7, #28]
 801aa08:	6a3b      	ldr	r3, [r7, #32]
 801aa0a:	4413      	add	r3, r2
 801aa0c:	1e5a      	subs	r2, r3, #1
 801aa0e:	6a3b      	ldr	r3, [r7, #32]
 801aa10:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa14:	697a      	ldr	r2, [r7, #20]
 801aa16:	fb03 f202 	mul.w	r2, r3, r2
 801aa1a:	88bb      	ldrh	r3, [r7, #4]
 801aa1c:	4413      	add	r3, r2
    int32_t intermediate =
 801aa1e:	330c      	adds	r3, #12
 801aa20:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	2b06      	cmp	r3, #6
 801aa26:	d802      	bhi.n	801aa2e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801aa28:	69bb      	ldr	r3, [r7, #24]
 801aa2a:	3302      	adds	r3, #2
 801aa2c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801aa2e:	69bb      	ldr	r3, [r7, #24]
 801aa30:	009b      	lsls	r3, r3, #2
 801aa32:	1c5a      	adds	r2, r3, #1
 801aa34:	68bb      	ldr	r3, [r7, #8]
 801aa36:	3b02      	subs	r3, #2
 801aa38:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	372c      	adds	r7, #44	; 0x2c
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bc80      	pop	{r7}
 801aa44:	4770      	bx	lr
	...

0801aa48 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b08a      	sub	sp, #40	; 0x28
 801aa4c:	af04      	add	r7, sp, #16
 801aa4e:	60b9      	str	r1, [r7, #8]
 801aa50:	607a      	str	r2, [r7, #4]
 801aa52:	461a      	mov	r2, r3
 801aa54:	4603      	mov	r3, r0
 801aa56:	73fb      	strb	r3, [r7, #15]
 801aa58:	4613      	mov	r3, r2
 801aa5a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aa60:	2301      	movs	r3, #1
 801aa62:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aa64:	7bfb      	ldrb	r3, [r7, #15]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d002      	beq.n	801aa70 <RadioTimeOnAir+0x28>
 801aa6a:	2b01      	cmp	r3, #1
 801aa6c:	d017      	beq.n	801aa9e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aa6e:	e035      	b.n	801aadc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aa70:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aa74:	8c3a      	ldrh	r2, [r7, #32]
 801aa76:	7bb9      	ldrb	r1, [r7, #14]
 801aa78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa7c:	9301      	str	r3, [sp, #4]
 801aa7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa82:	9300      	str	r3, [sp, #0]
 801aa84:	4603      	mov	r3, r0
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f7ff ff32 	bl	801a8f0 <RadioGetGfskTimeOnAirNumerator>
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa92:	fb02 f303 	mul.w	r3, r2, r3
 801aa96:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	613b      	str	r3, [r7, #16]
        break;
 801aa9c:	e01e      	b.n	801aadc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801aa9e:	8c39      	ldrh	r1, [r7, #32]
 801aaa0:	7bba      	ldrb	r2, [r7, #14]
 801aaa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aaa6:	9302      	str	r3, [sp, #8]
 801aaa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aaac:	9301      	str	r3, [sp, #4]
 801aaae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aab2:	9300      	str	r3, [sp, #0]
 801aab4:	460b      	mov	r3, r1
 801aab6:	6879      	ldr	r1, [r7, #4]
 801aab8:	68b8      	ldr	r0, [r7, #8]
 801aaba:	f7ff ff43 	bl	801a944 <RadioGetLoRaTimeOnAirNumerator>
 801aabe:	4603      	mov	r3, r0
 801aac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aac4:	fb02 f303 	mul.w	r3, r2, r3
 801aac8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aaca:	4a0a      	ldr	r2, [pc, #40]	; (801aaf4 <RadioTimeOnAir+0xac>)
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	4413      	add	r3, r2
 801aad0:	781b      	ldrb	r3, [r3, #0]
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7ff feb6 	bl	801a844 <RadioGetLoRaBandwidthInHz>
 801aad8:	6138      	str	r0, [r7, #16]
        break;
 801aada:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aadc:	697a      	ldr	r2, [r7, #20]
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	4413      	add	r3, r2
 801aae2:	1e5a      	subs	r2, r3, #1
 801aae4:	693b      	ldr	r3, [r7, #16]
 801aae6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aaea:	4618      	mov	r0, r3
 801aaec:	3718      	adds	r7, #24
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd80      	pop	{r7, pc}
 801aaf2:	bf00      	nop
 801aaf4:	0801faa4 	.word	0x0801faa4

0801aaf8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b084      	sub	sp, #16
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	460b      	mov	r3, r1
 801ab02:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801ab04:	2300      	movs	r3, #0
 801ab06:	2200      	movs	r2, #0
 801ab08:	f240 2101 	movw	r1, #513	; 0x201
 801ab0c:	f240 2001 	movw	r0, #513	; 0x201
 801ab10:	f001 fd66 	bl	801c5e0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ab14:	4b73      	ldr	r3, [pc, #460]	; (801ace4 <RadioSend+0x1ec>)
 801ab16:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ab1a:	2101      	movs	r1, #1
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f002 fa03 	bl	801cf28 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ab22:	4b70      	ldr	r3, [pc, #448]	; (801ace4 <RadioSend+0x1ec>)
 801ab24:	781b      	ldrb	r3, [r3, #0]
 801ab26:	2b01      	cmp	r3, #1
 801ab28:	d112      	bne.n	801ab50 <RadioSend+0x58>
 801ab2a:	4b6e      	ldr	r3, [pc, #440]	; (801ace4 <RadioSend+0x1ec>)
 801ab2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ab30:	2b06      	cmp	r3, #6
 801ab32:	d10d      	bne.n	801ab50 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ab34:	f640 0089 	movw	r0, #2185	; 0x889
 801ab38:	f002 f916 	bl	801cd68 <SUBGRF_ReadRegister>
 801ab3c:	4603      	mov	r3, r0
 801ab3e:	f023 0304 	bic.w	r3, r3, #4
 801ab42:	b2db      	uxtb	r3, r3
 801ab44:	4619      	mov	r1, r3
 801ab46:	f640 0089 	movw	r0, #2185	; 0x889
 801ab4a:	f002 f8f9 	bl	801cd40 <SUBGRF_WriteRegister>
 801ab4e:	e00c      	b.n	801ab6a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab50:	f640 0089 	movw	r0, #2185	; 0x889
 801ab54:	f002 f908 	bl	801cd68 <SUBGRF_ReadRegister>
 801ab58:	4603      	mov	r3, r0
 801ab5a:	f043 0304 	orr.w	r3, r3, #4
 801ab5e:	b2db      	uxtb	r3, r3
 801ab60:	4619      	mov	r1, r3
 801ab62:	f640 0089 	movw	r0, #2185	; 0x889
 801ab66:	f002 f8eb 	bl	801cd40 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801ab6a:	4b5e      	ldr	r3, [pc, #376]	; (801ace4 <RadioSend+0x1ec>)
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	2b04      	cmp	r3, #4
 801ab70:	f200 80a8 	bhi.w	801acc4 <RadioSend+0x1cc>
 801ab74:	a201      	add	r2, pc, #4	; (adr r2, 801ab7c <RadioSend+0x84>)
 801ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab7a:	bf00      	nop
 801ab7c:	0801abab 	.word	0x0801abab
 801ab80:	0801ab91 	.word	0x0801ab91
 801ab84:	0801abab 	.word	0x0801abab
 801ab88:	0801ac0d 	.word	0x0801ac0d
 801ab8c:	0801ac2d 	.word	0x0801ac2d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ab90:	4a54      	ldr	r2, [pc, #336]	; (801ace4 <RadioSend+0x1ec>)
 801ab92:	78fb      	ldrb	r3, [r7, #3]
 801ab94:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab96:	4854      	ldr	r0, [pc, #336]	; (801ace8 <RadioSend+0x1f0>)
 801ab98:	f001 ff8a 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab9c:	78fb      	ldrb	r3, [r7, #3]
 801ab9e:	2200      	movs	r2, #0
 801aba0:	4619      	mov	r1, r3
 801aba2:	6878      	ldr	r0, [r7, #4]
 801aba4:	f001 fa3a 	bl	801c01c <SUBGRF_SendPayload>
            break;
 801aba8:	e08d      	b.n	801acc6 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801abaa:	f002 fbb6 	bl	801d31a <RFW_Is_Init>
 801abae:	4603      	mov	r3, r0
 801abb0:	2b01      	cmp	r3, #1
 801abb2:	d11e      	bne.n	801abf2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801abb4:	f107 020d 	add.w	r2, r7, #13
 801abb8:	78fb      	ldrb	r3, [r7, #3]
 801abba:	4619      	mov	r1, r3
 801abbc:	6878      	ldr	r0, [r7, #4]
 801abbe:	f002 fbc4 	bl	801d34a <RFW_TransmitInit>
 801abc2:	4603      	mov	r3, r0
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d10c      	bne.n	801abe2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801abc8:	7b7a      	ldrb	r2, [r7, #13]
 801abca:	4b46      	ldr	r3, [pc, #280]	; (801ace4 <RadioSend+0x1ec>)
 801abcc:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abce:	4846      	ldr	r0, [pc, #280]	; (801ace8 <RadioSend+0x1f0>)
 801abd0:	f001 ff6e 	bl	801cab0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801abd4:	7b7b      	ldrb	r3, [r7, #13]
 801abd6:	2200      	movs	r2, #0
 801abd8:	4619      	mov	r1, r3
 801abda:	6878      	ldr	r0, [r7, #4]
 801abdc:	f001 fa1e 	bl	801c01c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801abe0:	e071      	b.n	801acc6 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801abe2:	4b42      	ldr	r3, [pc, #264]	; (801acec <RadioSend+0x1f4>)
 801abe4:	2201      	movs	r2, #1
 801abe6:	2100      	movs	r1, #0
 801abe8:	2002      	movs	r0, #2
 801abea:	f003 fccf 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801abee:	2303      	movs	r3, #3
 801abf0:	e073      	b.n	801acda <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801abf2:	4a3c      	ldr	r2, [pc, #240]	; (801ace4 <RadioSend+0x1ec>)
 801abf4:	78fb      	ldrb	r3, [r7, #3]
 801abf6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abf8:	483b      	ldr	r0, [pc, #236]	; (801ace8 <RadioSend+0x1f0>)
 801abfa:	f001 ff59 	bl	801cab0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801abfe:	78fb      	ldrb	r3, [r7, #3]
 801ac00:	2200      	movs	r2, #0
 801ac02:	4619      	mov	r1, r3
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	f001 fa09 	bl	801c01c <SUBGRF_SendPayload>
            break;
 801ac0a:	e05c      	b.n	801acc6 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac0c:	4b35      	ldr	r3, [pc, #212]	; (801ace4 <RadioSend+0x1ec>)
 801ac0e:	2202      	movs	r2, #2
 801ac10:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801ac12:	4a34      	ldr	r2, [pc, #208]	; (801ace4 <RadioSend+0x1ec>)
 801ac14:	78fb      	ldrb	r3, [r7, #3]
 801ac16:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac18:	4833      	ldr	r0, [pc, #204]	; (801ace8 <RadioSend+0x1f0>)
 801ac1a:	f001 ff49 	bl	801cab0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ac1e:	78fb      	ldrb	r3, [r7, #3]
 801ac20:	2200      	movs	r2, #0
 801ac22:	4619      	mov	r1, r3
 801ac24:	6878      	ldr	r0, [r7, #4]
 801ac26:	f001 f9f9 	bl	801c01c <SUBGRF_SendPayload>
            break;
 801ac2a:	e04c      	b.n	801acc6 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ac2c:	78fb      	ldrb	r3, [r7, #3]
 801ac2e:	461a      	mov	r2, r3
 801ac30:	6879      	ldr	r1, [r7, #4]
 801ac32:	482f      	ldr	r0, [pc, #188]	; (801acf0 <RadioSend+0x1f8>)
 801ac34:	f000 fccc 	bl	801b5d0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac38:	4b2a      	ldr	r3, [pc, #168]	; (801ace4 <RadioSend+0x1ec>)
 801ac3a:	2202      	movs	r2, #2
 801ac3c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801ac3e:	78fb      	ldrb	r3, [r7, #3]
 801ac40:	3301      	adds	r3, #1
 801ac42:	b2da      	uxtb	r2, r3
 801ac44:	4b27      	ldr	r3, [pc, #156]	; (801ace4 <RadioSend+0x1ec>)
 801ac46:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac48:	4827      	ldr	r0, [pc, #156]	; (801ace8 <RadioSend+0x1f0>)
 801ac4a:	f001 ff31 	bl	801cab0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801ac4e:	2100      	movs	r1, #0
 801ac50:	20f1      	movs	r0, #241	; 0xf1
 801ac52:	f000 f966 	bl	801af22 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801ac56:	2100      	movs	r1, #0
 801ac58:	20f0      	movs	r0, #240	; 0xf0
 801ac5a:	f000 f962 	bl	801af22 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801ac5e:	4b21      	ldr	r3, [pc, #132]	; (801ace4 <RadioSend+0x1ec>)
 801ac60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac62:	2b64      	cmp	r3, #100	; 0x64
 801ac64:	d108      	bne.n	801ac78 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ac66:	2170      	movs	r1, #112	; 0x70
 801ac68:	20f3      	movs	r0, #243	; 0xf3
 801ac6a:	f000 f95a 	bl	801af22 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ac6e:	211d      	movs	r1, #29
 801ac70:	20f2      	movs	r0, #242	; 0xf2
 801ac72:	f000 f956 	bl	801af22 <RadioWrite>
 801ac76:	e007      	b.n	801ac88 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801ac78:	21e1      	movs	r1, #225	; 0xe1
 801ac7a:	20f3      	movs	r0, #243	; 0xf3
 801ac7c:	f000 f951 	bl	801af22 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801ac80:	2104      	movs	r1, #4
 801ac82:	20f2      	movs	r0, #242	; 0xf2
 801ac84:	f000 f94d 	bl	801af22 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ac88:	78fb      	ldrb	r3, [r7, #3]
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	00db      	lsls	r3, r3, #3
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	3302      	adds	r3, #2
 801ac92:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ac94:	89fb      	ldrh	r3, [r7, #14]
 801ac96:	0a1b      	lsrs	r3, r3, #8
 801ac98:	b29b      	uxth	r3, r3
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	20f4      	movs	r0, #244	; 0xf4
 801aca0:	f000 f93f 	bl	801af22 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801aca4:	89fb      	ldrh	r3, [r7, #14]
 801aca6:	b2db      	uxtb	r3, r3
 801aca8:	4619      	mov	r1, r3
 801acaa:	20f5      	movs	r0, #245	; 0xf5
 801acac:	f000 f939 	bl	801af22 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801acb0:	78fb      	ldrb	r3, [r7, #3]
 801acb2:	3301      	adds	r3, #1
 801acb4:	b2db      	uxtb	r3, r3
 801acb6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801acba:	4619      	mov	r1, r3
 801acbc:	480c      	ldr	r0, [pc, #48]	; (801acf0 <RadioSend+0x1f8>)
 801acbe:	f001 f9ad 	bl	801c01c <SUBGRF_SendPayload>
            break;
 801acc2:	e000      	b.n	801acc6 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801acc4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801acc6:	4b07      	ldr	r3, [pc, #28]	; (801ace4 <RadioSend+0x1ec>)
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	4619      	mov	r1, r3
 801accc:	4809      	ldr	r0, [pc, #36]	; (801acf4 <RadioSend+0x1fc>)
 801acce:	f003 fac3 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801acd2:	4808      	ldr	r0, [pc, #32]	; (801acf4 <RadioSend+0x1fc>)
 801acd4:	f003 f9e2 	bl	801e09c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801acd8:	2300      	movs	r3, #0
}
 801acda:	4618      	mov	r0, r3
 801acdc:	3710      	adds	r7, #16
 801acde:	46bd      	mov	sp, r7
 801ace0:	bd80      	pop	{r7, pc}
 801ace2:	bf00      	nop
 801ace4:	200017dc 	.word	0x200017dc
 801ace8:	200017ea 	.word	0x200017ea
 801acec:	0801f444 	.word	0x0801f444
 801acf0:	200016d8 	.word	0x200016d8
 801acf4:	20001838 	.word	0x20001838

0801acf8 <RadioSleep>:

static void RadioSleep( void )
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b082      	sub	sp, #8
 801acfc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801acfe:	2300      	movs	r3, #0
 801ad00:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801ad02:	793b      	ldrb	r3, [r7, #4]
 801ad04:	f043 0304 	orr.w	r3, r3, #4
 801ad08:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801ad0a:	7938      	ldrb	r0, [r7, #4]
 801ad0c:	f001 fa62 	bl	801c1d4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801ad10:	2002      	movs	r0, #2
 801ad12:	f7e7 ff93 	bl	8002c3c <HAL_Delay>
}
 801ad16:	bf00      	nop
 801ad18:	3708      	adds	r7, #8
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}

0801ad1e <RadioStandby>:

static void RadioStandby( void )
{
 801ad1e:	b580      	push	{r7, lr}
 801ad20:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801ad22:	2000      	movs	r0, #0
 801ad24:	f001 fa88 	bl	801c238 <SUBGRF_SetStandby>
}
 801ad28:	bf00      	nop
 801ad2a:	bd80      	pop	{r7, pc}

0801ad2c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b082      	sub	sp, #8
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801ad34:	f002 faf1 	bl	801d31a <RFW_Is_Init>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d102      	bne.n	801ad44 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801ad3e:	f002 fb14 	bl	801d36a <RFW_ReceiveInit>
 801ad42:	e007      	b.n	801ad54 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad44:	2300      	movs	r3, #0
 801ad46:	2200      	movs	r2, #0
 801ad48:	f240 2162 	movw	r1, #610	; 0x262
 801ad4c:	f240 2062 	movw	r0, #610	; 0x262
 801ad50:	f001 fc46 	bl	801c5e0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d006      	beq.n	801ad68 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad5a:	6879      	ldr	r1, [r7, #4]
 801ad5c:	4811      	ldr	r0, [pc, #68]	; (801ada4 <RadioRx+0x78>)
 801ad5e:	f003 fa7b 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad62:	4810      	ldr	r0, [pc, #64]	; (801ada4 <RadioRx+0x78>)
 801ad64:	f003 f99a 	bl	801e09c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad68:	4b0f      	ldr	r3, [pc, #60]	; (801ada8 <RadioRx+0x7c>)
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad6e:	4b0e      	ldr	r3, [pc, #56]	; (801ada8 <RadioRx+0x7c>)
 801ad70:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad74:	2100      	movs	r1, #0
 801ad76:	4618      	mov	r0, r3
 801ad78:	f002 f8d6 	bl	801cf28 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad7c:	4b0a      	ldr	r3, [pc, #40]	; (801ada8 <RadioRx+0x7c>)
 801ad7e:	785b      	ldrb	r3, [r3, #1]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d004      	beq.n	801ad8e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad84:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad88:	f001 fa92 	bl	801c2b0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ad8c:	e005      	b.n	801ad9a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ad8e:	4b06      	ldr	r3, [pc, #24]	; (801ada8 <RadioRx+0x7c>)
 801ad90:	689b      	ldr	r3, [r3, #8]
 801ad92:	019b      	lsls	r3, r3, #6
 801ad94:	4618      	mov	r0, r3
 801ad96:	f001 fa8b 	bl	801c2b0 <SUBGRF_SetRx>
}
 801ad9a:	bf00      	nop
 801ad9c:	3708      	adds	r7, #8
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	bf00      	nop
 801ada4:	20001850 	.word	0x20001850
 801ada8:	200017dc 	.word	0x200017dc

0801adac <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b082      	sub	sp, #8
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801adb4:	f002 fab1 	bl	801d31a <RFW_Is_Init>
 801adb8:	4603      	mov	r3, r0
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d102      	bne.n	801adc4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801adbe:	f002 fad4 	bl	801d36a <RFW_ReceiveInit>
 801adc2:	e007      	b.n	801add4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801adc4:	2300      	movs	r3, #0
 801adc6:	2200      	movs	r2, #0
 801adc8:	f240 2162 	movw	r1, #610	; 0x262
 801adcc:	f240 2062 	movw	r0, #610	; 0x262
 801add0:	f001 fc06 	bl	801c5e0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d006      	beq.n	801ade8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801adda:	6879      	ldr	r1, [r7, #4]
 801addc:	4811      	ldr	r0, [pc, #68]	; (801ae24 <RadioRxBoosted+0x78>)
 801adde:	f003 fa3b 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ade2:	4810      	ldr	r0, [pc, #64]	; (801ae24 <RadioRxBoosted+0x78>)
 801ade4:	f003 f95a 	bl	801e09c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ade8:	4b0f      	ldr	r3, [pc, #60]	; (801ae28 <RadioRxBoosted+0x7c>)
 801adea:	2200      	movs	r2, #0
 801adec:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adee:	4b0e      	ldr	r3, [pc, #56]	; (801ae28 <RadioRxBoosted+0x7c>)
 801adf0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801adf4:	2100      	movs	r1, #0
 801adf6:	4618      	mov	r0, r3
 801adf8:	f002 f896 	bl	801cf28 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801adfc:	4b0a      	ldr	r3, [pc, #40]	; (801ae28 <RadioRxBoosted+0x7c>)
 801adfe:	785b      	ldrb	r3, [r3, #1]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d004      	beq.n	801ae0e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801ae04:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ae08:	f001 fa72 	bl	801c2f0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801ae0c:	e005      	b.n	801ae1a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801ae0e:	4b06      	ldr	r3, [pc, #24]	; (801ae28 <RadioRxBoosted+0x7c>)
 801ae10:	689b      	ldr	r3, [r3, #8]
 801ae12:	019b      	lsls	r3, r3, #6
 801ae14:	4618      	mov	r0, r3
 801ae16:	f001 fa6b 	bl	801c2f0 <SUBGRF_SetRxBoosted>
}
 801ae1a:	bf00      	nop
 801ae1c:	3708      	adds	r7, #8
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
 801ae22:	bf00      	nop
 801ae24:	20001850 	.word	0x20001850
 801ae28:	200017dc 	.word	0x200017dc

0801ae2c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b082      	sub	sp, #8
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	005a      	lsls	r2, r3, #1
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	4413      	add	r3, r2
 801ae3e:	4a0c      	ldr	r2, [pc, #48]	; (801ae70 <RadioSetRxDutyCycle+0x44>)
 801ae40:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801ae42:	2300      	movs	r3, #0
 801ae44:	2200      	movs	r2, #0
 801ae46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae4e:	f001 fbc7 	bl	801c5e0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae52:	4b07      	ldr	r3, [pc, #28]	; (801ae70 <RadioSetRxDutyCycle+0x44>)
 801ae54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae58:	2100      	movs	r1, #0
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f002 f864 	bl	801cf28 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801ae60:	6839      	ldr	r1, [r7, #0]
 801ae62:	6878      	ldr	r0, [r7, #4]
 801ae64:	f001 fa68 	bl	801c338 <SUBGRF_SetRxDutyCycle>
}
 801ae68:	bf00      	nop
 801ae6a:	3708      	adds	r7, #8
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bd80      	pop	{r7, pc}
 801ae70:	200017dc 	.word	0x200017dc

0801ae74 <RadioStartCad>:

static void RadioStartCad( void )
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae78:	4b09      	ldr	r3, [pc, #36]	; (801aea0 <RadioStartCad+0x2c>)
 801ae7a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae7e:	2100      	movs	r1, #0
 801ae80:	4618      	mov	r0, r3
 801ae82:	f002 f851 	bl	801cf28 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801ae86:	2300      	movs	r3, #0
 801ae88:	2200      	movs	r2, #0
 801ae8a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ae8e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ae92:	f001 fba5 	bl	801c5e0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801ae96:	f001 fa7b 	bl	801c390 <SUBGRF_SetCad>
}
 801ae9a:	bf00      	nop
 801ae9c:	bd80      	pop	{r7, pc}
 801ae9e:	bf00      	nop
 801aea0:	200017dc 	.word	0x200017dc

0801aea4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b084      	sub	sp, #16
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	460b      	mov	r3, r1
 801aeae:	70fb      	strb	r3, [r7, #3]
 801aeb0:	4613      	mov	r3, r2
 801aeb2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801aeb4:	883b      	ldrh	r3, [r7, #0]
 801aeb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aeba:	fb02 f303 	mul.w	r3, r2, r3
 801aebe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801aec0:	6878      	ldr	r0, [r7, #4]
 801aec2:	f001 fbe9 	bl	801c698 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801aec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aeca:	4618      	mov	r0, r3
 801aecc:	f002 f854 	bl	801cf78 <SUBGRF_SetRfTxPower>
 801aed0:	4603      	mov	r3, r0
 801aed2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aed4:	210e      	movs	r1, #14
 801aed6:	f640 101f 	movw	r0, #2335	; 0x91f
 801aeda:	f001 ff31 	bl	801cd40 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801aede:	7afb      	ldrb	r3, [r7, #11]
 801aee0:	2101      	movs	r1, #1
 801aee2:	4618      	mov	r0, r3
 801aee4:	f002 f820 	bl	801cf28 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aee8:	f001 fa60 	bl	801c3ac <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aeec:	68f9      	ldr	r1, [r7, #12]
 801aeee:	4805      	ldr	r0, [pc, #20]	; (801af04 <RadioSetTxContinuousWave+0x60>)
 801aef0:	f003 f9b2 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aef4:	4803      	ldr	r0, [pc, #12]	; (801af04 <RadioSetTxContinuousWave+0x60>)
 801aef6:	f003 f8d1 	bl	801e09c <UTIL_TIMER_Start>
}
 801aefa:	bf00      	nop
 801aefc:	3710      	adds	r7, #16
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
 801af02:	bf00      	nop
 801af04:	20001838 	.word	0x20001838

0801af08 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	4603      	mov	r3, r0
 801af10:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801af12:	f001 fe82 	bl	801cc1a <SUBGRF_GetRssiInst>
 801af16:	4603      	mov	r3, r0
 801af18:	b21b      	sxth	r3, r3
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	3708      	adds	r7, #8
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}

0801af22 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801af22:	b580      	push	{r7, lr}
 801af24:	b082      	sub	sp, #8
 801af26:	af00      	add	r7, sp, #0
 801af28:	4603      	mov	r3, r0
 801af2a:	460a      	mov	r2, r1
 801af2c:	80fb      	strh	r3, [r7, #6]
 801af2e:	4613      	mov	r3, r2
 801af30:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801af32:	797a      	ldrb	r2, [r7, #5]
 801af34:	88fb      	ldrh	r3, [r7, #6]
 801af36:	4611      	mov	r1, r2
 801af38:	4618      	mov	r0, r3
 801af3a:	f001 ff01 	bl	801cd40 <SUBGRF_WriteRegister>
}
 801af3e:	bf00      	nop
 801af40:	3708      	adds	r7, #8
 801af42:	46bd      	mov	sp, r7
 801af44:	bd80      	pop	{r7, pc}

0801af46 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801af46:	b580      	push	{r7, lr}
 801af48:	b082      	sub	sp, #8
 801af4a:	af00      	add	r7, sp, #0
 801af4c:	4603      	mov	r3, r0
 801af4e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801af50:	88fb      	ldrh	r3, [r7, #6]
 801af52:	4618      	mov	r0, r3
 801af54:	f001 ff08 	bl	801cd68 <SUBGRF_ReadRegister>
 801af58:	4603      	mov	r3, r0
}
 801af5a:	4618      	mov	r0, r3
 801af5c:	3708      	adds	r7, #8
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd80      	pop	{r7, pc}

0801af62 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af62:	b580      	push	{r7, lr}
 801af64:	b082      	sub	sp, #8
 801af66:	af00      	add	r7, sp, #0
 801af68:	4603      	mov	r3, r0
 801af6a:	6039      	str	r1, [r7, #0]
 801af6c:	80fb      	strh	r3, [r7, #6]
 801af6e:	4613      	mov	r3, r2
 801af70:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801af72:	797b      	ldrb	r3, [r7, #5]
 801af74:	b29a      	uxth	r2, r3
 801af76:	88fb      	ldrh	r3, [r7, #6]
 801af78:	6839      	ldr	r1, [r7, #0]
 801af7a:	4618      	mov	r0, r3
 801af7c:	f001 ff08 	bl	801cd90 <SUBGRF_WriteRegisters>
}
 801af80:	bf00      	nop
 801af82:	3708      	adds	r7, #8
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}

0801af88 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b082      	sub	sp, #8
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	4603      	mov	r3, r0
 801af90:	6039      	str	r1, [r7, #0]
 801af92:	80fb      	strh	r3, [r7, #6]
 801af94:	4613      	mov	r3, r2
 801af96:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801af98:	797b      	ldrb	r3, [r7, #5]
 801af9a:	b29a      	uxth	r2, r3
 801af9c:	88fb      	ldrh	r3, [r7, #6]
 801af9e:	6839      	ldr	r1, [r7, #0]
 801afa0:	4618      	mov	r0, r3
 801afa2:	f001 ff17 	bl	801cdd4 <SUBGRF_ReadRegisters>
}
 801afa6:	bf00      	nop
 801afa8:	3708      	adds	r7, #8
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
	...

0801afb0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b082      	sub	sp, #8
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	4603      	mov	r3, r0
 801afb8:	460a      	mov	r2, r1
 801afba:	71fb      	strb	r3, [r7, #7]
 801afbc:	4613      	mov	r3, r2
 801afbe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801afc0:	79fb      	ldrb	r3, [r7, #7]
 801afc2:	2b01      	cmp	r3, #1
 801afc4:	d10a      	bne.n	801afdc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801afc6:	4a0e      	ldr	r2, [pc, #56]	; (801b000 <RadioSetMaxPayloadLength+0x50>)
 801afc8:	79bb      	ldrb	r3, [r7, #6]
 801afca:	7013      	strb	r3, [r2, #0]
 801afcc:	4b0c      	ldr	r3, [pc, #48]	; (801b000 <RadioSetMaxPayloadLength+0x50>)
 801afce:	781a      	ldrb	r2, [r3, #0]
 801afd0:	4b0c      	ldr	r3, [pc, #48]	; (801b004 <RadioSetMaxPayloadLength+0x54>)
 801afd2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afd4:	480c      	ldr	r0, [pc, #48]	; (801b008 <RadioSetMaxPayloadLength+0x58>)
 801afd6:	f001 fd6b 	bl	801cab0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801afda:	e00d      	b.n	801aff8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801afdc:	4b09      	ldr	r3, [pc, #36]	; (801b004 <RadioSetMaxPayloadLength+0x54>)
 801afde:	7d5b      	ldrb	r3, [r3, #21]
 801afe0:	2b01      	cmp	r3, #1
 801afe2:	d109      	bne.n	801aff8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801afe4:	4a06      	ldr	r2, [pc, #24]	; (801b000 <RadioSetMaxPayloadLength+0x50>)
 801afe6:	79bb      	ldrb	r3, [r7, #6]
 801afe8:	7013      	strb	r3, [r2, #0]
 801afea:	4b05      	ldr	r3, [pc, #20]	; (801b000 <RadioSetMaxPayloadLength+0x50>)
 801afec:	781a      	ldrb	r2, [r3, #0]
 801afee:	4b05      	ldr	r3, [pc, #20]	; (801b004 <RadioSetMaxPayloadLength+0x54>)
 801aff0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aff2:	4805      	ldr	r0, [pc, #20]	; (801b008 <RadioSetMaxPayloadLength+0x58>)
 801aff4:	f001 fd5c 	bl	801cab0 <SUBGRF_SetPacketParams>
}
 801aff8:	bf00      	nop
 801affa:	3708      	adds	r7, #8
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}
 801b000:	2000014c 	.word	0x2000014c
 801b004:	200017dc 	.word	0x200017dc
 801b008:	200017ea 	.word	0x200017ea

0801b00c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b082      	sub	sp, #8
 801b010:	af00      	add	r7, sp, #0
 801b012:	4603      	mov	r3, r0
 801b014:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b016:	4a13      	ldr	r2, [pc, #76]	; (801b064 <RadioSetPublicNetwork+0x58>)
 801b018:	79fb      	ldrb	r3, [r7, #7]
 801b01a:	7313      	strb	r3, [r2, #12]
 801b01c:	4b11      	ldr	r3, [pc, #68]	; (801b064 <RadioSetPublicNetwork+0x58>)
 801b01e:	7b1a      	ldrb	r2, [r3, #12]
 801b020:	4b10      	ldr	r3, [pc, #64]	; (801b064 <RadioSetPublicNetwork+0x58>)
 801b022:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b024:	2001      	movs	r0, #1
 801b026:	f7ff f811 	bl	801a04c <RadioSetModem>
    if( enable == true )
 801b02a:	79fb      	ldrb	r3, [r7, #7]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d00a      	beq.n	801b046 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b030:	2134      	movs	r1, #52	; 0x34
 801b032:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b036:	f001 fe83 	bl	801cd40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b03a:	2144      	movs	r1, #68	; 0x44
 801b03c:	f240 7041 	movw	r0, #1857	; 0x741
 801b040:	f001 fe7e 	bl	801cd40 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b044:	e009      	b.n	801b05a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b046:	2114      	movs	r1, #20
 801b048:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b04c:	f001 fe78 	bl	801cd40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b050:	2124      	movs	r1, #36	; 0x24
 801b052:	f240 7041 	movw	r0, #1857	; 0x741
 801b056:	f001 fe73 	bl	801cd40 <SUBGRF_WriteRegister>
}
 801b05a:	bf00      	nop
 801b05c:	3708      	adds	r7, #8
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
 801b062:	bf00      	nop
 801b064:	200017dc 	.word	0x200017dc

0801b068 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b06c:	f001 ffb8 	bl	801cfe0 <SUBGRF_GetRadioWakeUpTime>
 801b070:	4603      	mov	r3, r0
 801b072:	3303      	adds	r3, #3
}
 801b074:	4618      	mov	r0, r3
 801b076:	bd80      	pop	{r7, pc}

0801b078 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b080:	f000 f80e 	bl	801b0a0 <RadioOnTxTimeoutProcess>
}
 801b084:	bf00      	nop
 801b086:	3708      	adds	r7, #8
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd80      	pop	{r7, pc}

0801b08c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b082      	sub	sp, #8
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b094:	f000 f818 	bl	801b0c8 <RadioOnRxTimeoutProcess>
}
 801b098:	bf00      	nop
 801b09a:	3708      	adds	r7, #8
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}

0801b0a0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b0a4:	4b07      	ldr	r3, [pc, #28]	; (801b0c4 <RadioOnTxTimeoutProcess+0x24>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d008      	beq.n	801b0be <RadioOnTxTimeoutProcess+0x1e>
 801b0ac:	4b05      	ldr	r3, [pc, #20]	; (801b0c4 <RadioOnTxTimeoutProcess+0x24>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	685b      	ldr	r3, [r3, #4]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d003      	beq.n	801b0be <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b0b6:	4b03      	ldr	r3, [pc, #12]	; (801b0c4 <RadioOnTxTimeoutProcess+0x24>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	4798      	blx	r3
    }
}
 801b0be:	bf00      	nop
 801b0c0:	bd80      	pop	{r7, pc}
 801b0c2:	bf00      	nop
 801b0c4:	200017d8 	.word	0x200017d8

0801b0c8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b0cc:	4b07      	ldr	r3, [pc, #28]	; (801b0ec <RadioOnRxTimeoutProcess+0x24>)
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d008      	beq.n	801b0e6 <RadioOnRxTimeoutProcess+0x1e>
 801b0d4:	4b05      	ldr	r3, [pc, #20]	; (801b0ec <RadioOnRxTimeoutProcess+0x24>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	68db      	ldr	r3, [r3, #12]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d003      	beq.n	801b0e6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b0de:	4b03      	ldr	r3, [pc, #12]	; (801b0ec <RadioOnRxTimeoutProcess+0x24>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	68db      	ldr	r3, [r3, #12]
 801b0e4:	4798      	blx	r3
    }
}
 801b0e6:	bf00      	nop
 801b0e8:	bd80      	pop	{r7, pc}
 801b0ea:	bf00      	nop
 801b0ec:	200017d8 	.word	0x200017d8

0801b0f0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b082      	sub	sp, #8
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b0fa:	4a05      	ldr	r2, [pc, #20]	; (801b110 <RadioOnDioIrq+0x20>)
 801b0fc:	88fb      	ldrh	r3, [r7, #6]
 801b0fe:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b102:	f000 f807 	bl	801b114 <RadioIrqProcess>
}
 801b106:	bf00      	nop
 801b108:	3708      	adds	r7, #8
 801b10a:	46bd      	mov	sp, r7
 801b10c:	bd80      	pop	{r7, pc}
 801b10e:	bf00      	nop
 801b110:	200017dc 	.word	0x200017dc

0801b114 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b114:	b5b0      	push	{r4, r5, r7, lr}
 801b116:	b082      	sub	sp, #8
 801b118:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b11a:	2300      	movs	r3, #0
 801b11c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b11e:	2300      	movs	r3, #0
 801b120:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b122:	4ba8      	ldr	r3, [pc, #672]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b124:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b12c:	f000 810d 	beq.w	801b34a <RadioIrqProcess+0x236>
 801b130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b134:	f300 81e8 	bgt.w	801b508 <RadioIrqProcess+0x3f4>
 801b138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b13c:	f000 80f1 	beq.w	801b322 <RadioIrqProcess+0x20e>
 801b140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b144:	f300 81e0 	bgt.w	801b508 <RadioIrqProcess+0x3f4>
 801b148:	2b80      	cmp	r3, #128	; 0x80
 801b14a:	f000 80d6 	beq.w	801b2fa <RadioIrqProcess+0x1e6>
 801b14e:	2b80      	cmp	r3, #128	; 0x80
 801b150:	f300 81da 	bgt.w	801b508 <RadioIrqProcess+0x3f4>
 801b154:	2b20      	cmp	r3, #32
 801b156:	dc49      	bgt.n	801b1ec <RadioIrqProcess+0xd8>
 801b158:	2b00      	cmp	r3, #0
 801b15a:	f340 81d5 	ble.w	801b508 <RadioIrqProcess+0x3f4>
 801b15e:	3b01      	subs	r3, #1
 801b160:	2b1f      	cmp	r3, #31
 801b162:	f200 81d1 	bhi.w	801b508 <RadioIrqProcess+0x3f4>
 801b166:	a201      	add	r2, pc, #4	; (adr r2, 801b16c <RadioIrqProcess+0x58>)
 801b168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b16c:	0801b1f5 	.word	0x0801b1f5
 801b170:	0801b22f 	.word	0x0801b22f
 801b174:	0801b509 	.word	0x0801b509
 801b178:	0801b3e5 	.word	0x0801b3e5
 801b17c:	0801b509 	.word	0x0801b509
 801b180:	0801b509 	.word	0x0801b509
 801b184:	0801b509 	.word	0x0801b509
 801b188:	0801b461 	.word	0x0801b461
 801b18c:	0801b509 	.word	0x0801b509
 801b190:	0801b509 	.word	0x0801b509
 801b194:	0801b509 	.word	0x0801b509
 801b198:	0801b509 	.word	0x0801b509
 801b19c:	0801b509 	.word	0x0801b509
 801b1a0:	0801b509 	.word	0x0801b509
 801b1a4:	0801b509 	.word	0x0801b509
 801b1a8:	0801b47d 	.word	0x0801b47d
 801b1ac:	0801b509 	.word	0x0801b509
 801b1b0:	0801b509 	.word	0x0801b509
 801b1b4:	0801b509 	.word	0x0801b509
 801b1b8:	0801b509 	.word	0x0801b509
 801b1bc:	0801b509 	.word	0x0801b509
 801b1c0:	0801b509 	.word	0x0801b509
 801b1c4:	0801b509 	.word	0x0801b509
 801b1c8:	0801b509 	.word	0x0801b509
 801b1cc:	0801b509 	.word	0x0801b509
 801b1d0:	0801b509 	.word	0x0801b509
 801b1d4:	0801b509 	.word	0x0801b509
 801b1d8:	0801b509 	.word	0x0801b509
 801b1dc:	0801b509 	.word	0x0801b509
 801b1e0:	0801b509 	.word	0x0801b509
 801b1e4:	0801b509 	.word	0x0801b509
 801b1e8:	0801b48b 	.word	0x0801b48b
 801b1ec:	2b40      	cmp	r3, #64	; 0x40
 801b1ee:	f000 816d 	beq.w	801b4cc <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b1f2:	e189      	b.n	801b508 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b1f4:	4874      	ldr	r0, [pc, #464]	; (801b3c8 <RadioIrqProcess+0x2b4>)
 801b1f6:	f002 ffbf 	bl	801e178 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	f001 f81c 	bl	801c238 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b200:	f002 f892 	bl	801d328 <RFW_Is_LongPacketModeEnabled>
 801b204:	4603      	mov	r3, r0
 801b206:	2b01      	cmp	r3, #1
 801b208:	d101      	bne.n	801b20e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b20a:	f002 f8b6 	bl	801d37a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b20e:	4b6f      	ldr	r3, [pc, #444]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	2b00      	cmp	r3, #0
 801b214:	f000 817a 	beq.w	801b50c <RadioIrqProcess+0x3f8>
 801b218:	4b6c      	ldr	r3, [pc, #432]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	f000 8174 	beq.w	801b50c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b224:	4b69      	ldr	r3, [pc, #420]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	4798      	blx	r3
        break;
 801b22c:	e16e      	b.n	801b50c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b22e:	4868      	ldr	r0, [pc, #416]	; (801b3d0 <RadioIrqProcess+0x2bc>)
 801b230:	f002 ffa2 	bl	801e178 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b234:	4b63      	ldr	r3, [pc, #396]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b236:	785b      	ldrb	r3, [r3, #1]
 801b238:	f083 0301 	eor.w	r3, r3, #1
 801b23c:	b2db      	uxtb	r3, r3
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d014      	beq.n	801b26c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b242:	2000      	movs	r0, #0
 801b244:	f000 fff8 	bl	801c238 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b248:	2100      	movs	r1, #0
 801b24a:	f640 1002 	movw	r0, #2306	; 0x902
 801b24e:	f001 fd77 	bl	801cd40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b252:	f640 1044 	movw	r0, #2372	; 0x944
 801b256:	f001 fd87 	bl	801cd68 <SUBGRF_ReadRegister>
 801b25a:	4603      	mov	r3, r0
 801b25c:	f043 0302 	orr.w	r3, r3, #2
 801b260:	b2db      	uxtb	r3, r3
 801b262:	4619      	mov	r1, r3
 801b264:	f640 1044 	movw	r0, #2372	; 0x944
 801b268:	f001 fd6a 	bl	801cd40 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b26c:	1dfb      	adds	r3, r7, #7
 801b26e:	22ff      	movs	r2, #255	; 0xff
 801b270:	4619      	mov	r1, r3
 801b272:	4858      	ldr	r0, [pc, #352]	; (801b3d4 <RadioIrqProcess+0x2c0>)
 801b274:	f000 feb0 	bl	801bfd8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b278:	4857      	ldr	r0, [pc, #348]	; (801b3d8 <RadioIrqProcess+0x2c4>)
 801b27a:	f001 fd0f 	bl	801cc9c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b27e:	4b53      	ldr	r3, [pc, #332]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	2b00      	cmp	r3, #0
 801b284:	f000 8144 	beq.w	801b510 <RadioIrqProcess+0x3fc>
 801b288:	4b50      	ldr	r3, [pc, #320]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	689b      	ldr	r3, [r3, #8]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	f000 813e 	beq.w	801b510 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b294:	4b4b      	ldr	r3, [pc, #300]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	d10e      	bne.n	801b2bc <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b29e:	4b4b      	ldr	r3, [pc, #300]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	689c      	ldr	r4, [r3, #8]
 801b2a4:	79fb      	ldrb	r3, [r7, #7]
 801b2a6:	b299      	uxth	r1, r3
 801b2a8:	4b46      	ldr	r3, [pc, #280]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b2aa:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b2ae:	b21a      	sxth	r2, r3
 801b2b0:	4b44      	ldr	r3, [pc, #272]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b2b2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b2b6:	4847      	ldr	r0, [pc, #284]	; (801b3d4 <RadioIrqProcess+0x2c0>)
 801b2b8:	47a0      	blx	r4
                break;
 801b2ba:	e01d      	b.n	801b2f8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b2bc:	4b41      	ldr	r3, [pc, #260]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2c0:	463a      	mov	r2, r7
 801b2c2:	4611      	mov	r1, r2
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	f001 ff7d 	bl	801d1c4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b2ca:	4b40      	ldr	r3, [pc, #256]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	689c      	ldr	r4, [r3, #8]
 801b2d0:	79fb      	ldrb	r3, [r7, #7]
 801b2d2:	b299      	uxth	r1, r3
 801b2d4:	4b3b      	ldr	r3, [pc, #236]	; (801b3c4 <RadioIrqProcess+0x2b0>)
 801b2d6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b2da:	b218      	sxth	r0, r3
 801b2dc:	683b      	ldr	r3, [r7, #0]
 801b2de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b2e2:	4a3e      	ldr	r2, [pc, #248]	; (801b3dc <RadioIrqProcess+0x2c8>)
 801b2e4:	fb82 5203 	smull	r5, r2, r2, r3
 801b2e8:	1192      	asrs	r2, r2, #6
 801b2ea:	17db      	asrs	r3, r3, #31
 801b2ec:	1ad3      	subs	r3, r2, r3
 801b2ee:	b25b      	sxtb	r3, r3
 801b2f0:	4602      	mov	r2, r0
 801b2f2:	4838      	ldr	r0, [pc, #224]	; (801b3d4 <RadioIrqProcess+0x2c0>)
 801b2f4:	47a0      	blx	r4
                break;
 801b2f6:	bf00      	nop
        break;
 801b2f8:	e10a      	b.n	801b510 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	f000 ff9c 	bl	801c238 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b300:	4b32      	ldr	r3, [pc, #200]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	2b00      	cmp	r3, #0
 801b306:	f000 8105 	beq.w	801b514 <RadioIrqProcess+0x400>
 801b30a:	4b30      	ldr	r3, [pc, #192]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	699b      	ldr	r3, [r3, #24]
 801b310:	2b00      	cmp	r3, #0
 801b312:	f000 80ff 	beq.w	801b514 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b316:	4b2d      	ldr	r3, [pc, #180]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	699b      	ldr	r3, [r3, #24]
 801b31c:	2000      	movs	r0, #0
 801b31e:	4798      	blx	r3
        break;
 801b320:	e0f8      	b.n	801b514 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b322:	2000      	movs	r0, #0
 801b324:	f000 ff88 	bl	801c238 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b328:	4b28      	ldr	r3, [pc, #160]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f000 80f3 	beq.w	801b518 <RadioIrqProcess+0x404>
 801b332:	4b26      	ldr	r3, [pc, #152]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	699b      	ldr	r3, [r3, #24]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	f000 80ed 	beq.w	801b518 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b33e:	4b23      	ldr	r3, [pc, #140]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	699b      	ldr	r3, [r3, #24]
 801b344:	2001      	movs	r0, #1
 801b346:	4798      	blx	r3
        break;
 801b348:	e0e6      	b.n	801b518 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b34a:	4b25      	ldr	r3, [pc, #148]	; (801b3e0 <RadioIrqProcess+0x2cc>)
 801b34c:	2201      	movs	r2, #1
 801b34e:	2100      	movs	r1, #0
 801b350:	2002      	movs	r0, #2
 801b352:	f003 f91b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b356:	f000 fe25 	bl	801bfa4 <SUBGRF_GetOperatingMode>
 801b35a:	4603      	mov	r3, r0
 801b35c:	2b04      	cmp	r3, #4
 801b35e:	d115      	bne.n	801b38c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b360:	4819      	ldr	r0, [pc, #100]	; (801b3c8 <RadioIrqProcess+0x2b4>)
 801b362:	f002 ff09 	bl	801e178 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b366:	2000      	movs	r0, #0
 801b368:	f000 ff66 	bl	801c238 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b36c:	4b17      	ldr	r3, [pc, #92]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	2b00      	cmp	r3, #0
 801b372:	f000 80d3 	beq.w	801b51c <RadioIrqProcess+0x408>
 801b376:	4b15      	ldr	r3, [pc, #84]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	685b      	ldr	r3, [r3, #4]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	f000 80cd 	beq.w	801b51c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b382:	4b12      	ldr	r3, [pc, #72]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	685b      	ldr	r3, [r3, #4]
 801b388:	4798      	blx	r3
        break;
 801b38a:	e0c7      	b.n	801b51c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b38c:	f000 fe0a 	bl	801bfa4 <SUBGRF_GetOperatingMode>
 801b390:	4603      	mov	r3, r0
 801b392:	2b05      	cmp	r3, #5
 801b394:	f040 80c2 	bne.w	801b51c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b398:	480d      	ldr	r0, [pc, #52]	; (801b3d0 <RadioIrqProcess+0x2bc>)
 801b39a:	f002 feed 	bl	801e178 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b39e:	2000      	movs	r0, #0
 801b3a0:	f000 ff4a 	bl	801c238 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b3a4:	4b09      	ldr	r3, [pc, #36]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	f000 80b7 	beq.w	801b51c <RadioIrqProcess+0x408>
 801b3ae:	4b07      	ldr	r3, [pc, #28]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	68db      	ldr	r3, [r3, #12]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	f000 80b1 	beq.w	801b51c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b3ba:	4b04      	ldr	r3, [pc, #16]	; (801b3cc <RadioIrqProcess+0x2b8>)
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	68db      	ldr	r3, [r3, #12]
 801b3c0:	4798      	blx	r3
        break;
 801b3c2:	e0ab      	b.n	801b51c <RadioIrqProcess+0x408>
 801b3c4:	200017dc 	.word	0x200017dc
 801b3c8:	20001838 	.word	0x20001838
 801b3cc:	200017d8 	.word	0x200017d8
 801b3d0:	20001850 	.word	0x20001850
 801b3d4:	200016d8 	.word	0x200016d8
 801b3d8:	20001800 	.word	0x20001800
 801b3dc:	10624dd3 	.word	0x10624dd3
 801b3e0:	0801f45c 	.word	0x0801f45c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b3e4:	4b54      	ldr	r3, [pc, #336]	; (801b538 <RadioIrqProcess+0x424>)
 801b3e6:	2201      	movs	r2, #1
 801b3e8:	2100      	movs	r1, #0
 801b3ea:	2002      	movs	r0, #2
 801b3ec:	f003 f8ce 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b3f0:	4b52      	ldr	r3, [pc, #328]	; (801b53c <RadioIrqProcess+0x428>)
 801b3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	f000 8093 	beq.w	801b520 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b3fa:	4a51      	ldr	r2, [pc, #324]	; (801b540 <RadioIrqProcess+0x42c>)
 801b3fc:	4b4f      	ldr	r3, [pc, #316]	; (801b53c <RadioIrqProcess+0x428>)
 801b3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b400:	0c1b      	lsrs	r3, r3, #16
 801b402:	b2db      	uxtb	r3, r3
 801b404:	4619      	mov	r1, r3
 801b406:	f640 1003 	movw	r0, #2307	; 0x903
 801b40a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b40c:	4a4c      	ldr	r2, [pc, #304]	; (801b540 <RadioIrqProcess+0x42c>)
 801b40e:	4b4b      	ldr	r3, [pc, #300]	; (801b53c <RadioIrqProcess+0x428>)
 801b410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b412:	0a1b      	lsrs	r3, r3, #8
 801b414:	b2db      	uxtb	r3, r3
 801b416:	4619      	mov	r1, r3
 801b418:	f640 1004 	movw	r0, #2308	; 0x904
 801b41c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b41e:	4a48      	ldr	r2, [pc, #288]	; (801b540 <RadioIrqProcess+0x42c>)
 801b420:	4b46      	ldr	r3, [pc, #280]	; (801b53c <RadioIrqProcess+0x428>)
 801b422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b424:	b2db      	uxtb	r3, r3
 801b426:	4619      	mov	r1, r3
 801b428:	f640 1005 	movw	r0, #2309	; 0x905
 801b42c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b42e:	4c44      	ldr	r4, [pc, #272]	; (801b540 <RadioIrqProcess+0x42c>)
 801b430:	4b44      	ldr	r3, [pc, #272]	; (801b544 <RadioIrqProcess+0x430>)
 801b432:	f640 1002 	movw	r0, #2306	; 0x902
 801b436:	4798      	blx	r3
 801b438:	4603      	mov	r3, r0
 801b43a:	f043 0301 	orr.w	r3, r3, #1
 801b43e:	b2db      	uxtb	r3, r3
 801b440:	4619      	mov	r1, r3
 801b442:	f640 1002 	movw	r0, #2306	; 0x902
 801b446:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b448:	4b3c      	ldr	r3, [pc, #240]	; (801b53c <RadioIrqProcess+0x428>)
 801b44a:	2200      	movs	r2, #0
 801b44c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b44e:	2300      	movs	r3, #0
 801b450:	2200      	movs	r2, #0
 801b452:	f240 2162 	movw	r1, #610	; 0x262
 801b456:	f240 2062 	movw	r0, #610	; 0x262
 801b45a:	f001 f8c1 	bl	801c5e0 <SUBGRF_SetDioIrqParams>
        break;
 801b45e:	e05f      	b.n	801b520 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b460:	4b39      	ldr	r3, [pc, #228]	; (801b548 <RadioIrqProcess+0x434>)
 801b462:	2201      	movs	r2, #1
 801b464:	2100      	movs	r1, #0
 801b466:	2002      	movs	r0, #2
 801b468:	f003 f890 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b46c:	f001 ff55 	bl	801d31a <RFW_Is_Init>
 801b470:	4603      	mov	r3, r0
 801b472:	2b01      	cmp	r3, #1
 801b474:	d156      	bne.n	801b524 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b476:	f001 ff86 	bl	801d386 <RFW_ReceivePayload>
        break;
 801b47a:	e053      	b.n	801b524 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b47c:	4b33      	ldr	r3, [pc, #204]	; (801b54c <RadioIrqProcess+0x438>)
 801b47e:	2201      	movs	r2, #1
 801b480:	2100      	movs	r1, #0
 801b482:	2002      	movs	r0, #2
 801b484:	f003 f882 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b488:	e051      	b.n	801b52e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b48a:	4831      	ldr	r0, [pc, #196]	; (801b550 <RadioIrqProcess+0x43c>)
 801b48c:	f002 fe74 	bl	801e178 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b490:	4b2a      	ldr	r3, [pc, #168]	; (801b53c <RadioIrqProcess+0x428>)
 801b492:	785b      	ldrb	r3, [r3, #1]
 801b494:	f083 0301 	eor.w	r3, r3, #1
 801b498:	b2db      	uxtb	r3, r3
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d002      	beq.n	801b4a4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b49e:	2000      	movs	r0, #0
 801b4a0:	f000 feca 	bl	801c238 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b4a4:	4b2b      	ldr	r3, [pc, #172]	; (801b554 <RadioIrqProcess+0x440>)
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d03d      	beq.n	801b528 <RadioIrqProcess+0x414>
 801b4ac:	4b29      	ldr	r3, [pc, #164]	; (801b554 <RadioIrqProcess+0x440>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	68db      	ldr	r3, [r3, #12]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d038      	beq.n	801b528 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b4b6:	4b27      	ldr	r3, [pc, #156]	; (801b554 <RadioIrqProcess+0x440>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	68db      	ldr	r3, [r3, #12]
 801b4bc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b4be:	4b26      	ldr	r3, [pc, #152]	; (801b558 <RadioIrqProcess+0x444>)
 801b4c0:	2201      	movs	r2, #1
 801b4c2:	2100      	movs	r1, #0
 801b4c4:	2002      	movs	r0, #2
 801b4c6:	f003 f861 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b4ca:	e02d      	b.n	801b528 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b4cc:	4b23      	ldr	r3, [pc, #140]	; (801b55c <RadioIrqProcess+0x448>)
 801b4ce:	2201      	movs	r2, #1
 801b4d0:	2100      	movs	r1, #0
 801b4d2:	2002      	movs	r0, #2
 801b4d4:	f003 f85a 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b4d8:	4b18      	ldr	r3, [pc, #96]	; (801b53c <RadioIrqProcess+0x428>)
 801b4da:	785b      	ldrb	r3, [r3, #1]
 801b4dc:	f083 0301 	eor.w	r3, r3, #1
 801b4e0:	b2db      	uxtb	r3, r3
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d002      	beq.n	801b4ec <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b4e6:	2000      	movs	r0, #0
 801b4e8:	f000 fea6 	bl	801c238 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b4ec:	4b19      	ldr	r3, [pc, #100]	; (801b554 <RadioIrqProcess+0x440>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d01b      	beq.n	801b52c <RadioIrqProcess+0x418>
 801b4f4:	4b17      	ldr	r3, [pc, #92]	; (801b554 <RadioIrqProcess+0x440>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	691b      	ldr	r3, [r3, #16]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d016      	beq.n	801b52c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b4fe:	4b15      	ldr	r3, [pc, #84]	; (801b554 <RadioIrqProcess+0x440>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	691b      	ldr	r3, [r3, #16]
 801b504:	4798      	blx	r3
        break;
 801b506:	e011      	b.n	801b52c <RadioIrqProcess+0x418>
        break;
 801b508:	bf00      	nop
 801b50a:	e010      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b50c:	bf00      	nop
 801b50e:	e00e      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b510:	bf00      	nop
 801b512:	e00c      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b514:	bf00      	nop
 801b516:	e00a      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b518:	bf00      	nop
 801b51a:	e008      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b51c:	bf00      	nop
 801b51e:	e006      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b520:	bf00      	nop
 801b522:	e004      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b524:	bf00      	nop
 801b526:	e002      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b528:	bf00      	nop
 801b52a:	e000      	b.n	801b52e <RadioIrqProcess+0x41a>
        break;
 801b52c:	bf00      	nop
    }
}
 801b52e:	bf00      	nop
 801b530:	3708      	adds	r7, #8
 801b532:	46bd      	mov	sp, r7
 801b534:	bdb0      	pop	{r4, r5, r7, pc}
 801b536:	bf00      	nop
 801b538:	0801f470 	.word	0x0801f470
 801b53c:	200017dc 	.word	0x200017dc
 801b540:	0801af23 	.word	0x0801af23
 801b544:	0801af47 	.word	0x0801af47
 801b548:	0801f47c 	.word	0x0801f47c
 801b54c:	0801f488 	.word	0x0801f488
 801b550:	20001850 	.word	0x20001850
 801b554:	200017d8 	.word	0x200017d8
 801b558:	0801f494 	.word	0x0801f494
 801b55c:	0801f4a0 	.word	0x0801f4a0

0801b560 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b560:	b580      	push	{r7, lr}
 801b562:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b564:	4b09      	ldr	r3, [pc, #36]	; (801b58c <RadioTxPrbs+0x2c>)
 801b566:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b56a:	2101      	movs	r1, #1
 801b56c:	4618      	mov	r0, r3
 801b56e:	f001 fcdb 	bl	801cf28 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b572:	4b07      	ldr	r3, [pc, #28]	; (801b590 <RadioTxPrbs+0x30>)
 801b574:	212d      	movs	r1, #45	; 0x2d
 801b576:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b57a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b57c:	f000 ff1f 	bl	801c3be <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b580:	4804      	ldr	r0, [pc, #16]	; (801b594 <RadioTxPrbs+0x34>)
 801b582:	f000 fe75 	bl	801c270 <SUBGRF_SetTx>
}
 801b586:	bf00      	nop
 801b588:	bd80      	pop	{r7, pc}
 801b58a:	bf00      	nop
 801b58c:	200017dc 	.word	0x200017dc
 801b590:	0801af23 	.word	0x0801af23
 801b594:	000fffff 	.word	0x000fffff

0801b598 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b084      	sub	sp, #16
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	4603      	mov	r3, r0
 801b5a0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	f001 fce6 	bl	801cf78 <SUBGRF_SetRfTxPower>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b5b0:	210e      	movs	r1, #14
 801b5b2:	f640 101f 	movw	r0, #2335	; 0x91f
 801b5b6:	f001 fbc3 	bl	801cd40 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b5ba:	7bfb      	ldrb	r3, [r7, #15]
 801b5bc:	2101      	movs	r1, #1
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f001 fcb2 	bl	801cf28 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b5c4:	f000 fef2 	bl	801c3ac <SUBGRF_SetTxContinuousWave>
}
 801b5c8:	bf00      	nop
 801b5ca:	3710      	adds	r7, #16
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}

0801b5d0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b089      	sub	sp, #36	; 0x24
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	60f8      	str	r0, [r7, #12]
 801b5d8:	60b9      	str	r1, [r7, #8]
 801b5da:	4613      	mov	r3, r2
 801b5dc:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	61bb      	str	r3, [r7, #24]
 801b5ea:	e011      	b.n	801b610 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b5ec:	69bb      	ldr	r3, [r7, #24]
 801b5ee:	68ba      	ldr	r2, [r7, #8]
 801b5f0:	4413      	add	r3, r2
 801b5f2:	781a      	ldrb	r2, [r3, #0]
 801b5f4:	69bb      	ldr	r3, [r7, #24]
 801b5f6:	68b9      	ldr	r1, [r7, #8]
 801b5f8:	440b      	add	r3, r1
 801b5fa:	43d2      	mvns	r2, r2
 801b5fc:	b2d2      	uxtb	r2, r2
 801b5fe:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	68fa      	ldr	r2, [r7, #12]
 801b604:	4413      	add	r3, r2
 801b606:	2200      	movs	r2, #0
 801b608:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b60a:	69bb      	ldr	r3, [r7, #24]
 801b60c:	3301      	adds	r3, #1
 801b60e:	61bb      	str	r3, [r7, #24]
 801b610:	79fb      	ldrb	r3, [r7, #7]
 801b612:	69ba      	ldr	r2, [r7, #24]
 801b614:	429a      	cmp	r2, r3
 801b616:	dbe9      	blt.n	801b5ec <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b618:	2300      	movs	r3, #0
 801b61a:	61bb      	str	r3, [r7, #24]
 801b61c:	e049      	b.n	801b6b2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b61e:	69bb      	ldr	r3, [r7, #24]
 801b620:	425a      	negs	r2, r3
 801b622:	f003 0307 	and.w	r3, r3, #7
 801b626:	f002 0207 	and.w	r2, r2, #7
 801b62a:	bf58      	it	pl
 801b62c:	4253      	negpl	r3, r2
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	f1c3 0307 	rsb	r3, r3, #7
 801b634:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b636:	69bb      	ldr	r3, [r7, #24]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	da00      	bge.n	801b63e <payload_integration+0x6e>
 801b63c:	3307      	adds	r3, #7
 801b63e:	10db      	asrs	r3, r3, #3
 801b640:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b642:	69bb      	ldr	r3, [r7, #24]
 801b644:	3301      	adds	r3, #1
 801b646:	425a      	negs	r2, r3
 801b648:	f003 0307 	and.w	r3, r3, #7
 801b64c:	f002 0207 	and.w	r2, r2, #7
 801b650:	bf58      	it	pl
 801b652:	4253      	negpl	r3, r2
 801b654:	b2db      	uxtb	r3, r3
 801b656:	f1c3 0307 	rsb	r3, r3, #7
 801b65a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b65c:	69bb      	ldr	r3, [r7, #24]
 801b65e:	3301      	adds	r3, #1
 801b660:	2b00      	cmp	r3, #0
 801b662:	da00      	bge.n	801b666 <payload_integration+0x96>
 801b664:	3307      	adds	r3, #7
 801b666:	10db      	asrs	r3, r3, #3
 801b668:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b66a:	7dbb      	ldrb	r3, [r7, #22]
 801b66c:	68ba      	ldr	r2, [r7, #8]
 801b66e:	4413      	add	r3, r2
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	461a      	mov	r2, r3
 801b674:	7dfb      	ldrb	r3, [r7, #23]
 801b676:	fa42 f303 	asr.w	r3, r2, r3
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	f003 0301 	and.w	r3, r3, #1
 801b680:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b682:	7ffa      	ldrb	r2, [r7, #31]
 801b684:	7cfb      	ldrb	r3, [r7, #19]
 801b686:	4053      	eors	r3, r2
 801b688:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b68a:	7d3b      	ldrb	r3, [r7, #20]
 801b68c:	68fa      	ldr	r2, [r7, #12]
 801b68e:	4413      	add	r3, r2
 801b690:	781b      	ldrb	r3, [r3, #0]
 801b692:	b25a      	sxtb	r2, r3
 801b694:	7ff9      	ldrb	r1, [r7, #31]
 801b696:	7d7b      	ldrb	r3, [r7, #21]
 801b698:	fa01 f303 	lsl.w	r3, r1, r3
 801b69c:	b25b      	sxtb	r3, r3
 801b69e:	4313      	orrs	r3, r2
 801b6a0:	b259      	sxtb	r1, r3
 801b6a2:	7d3b      	ldrb	r3, [r7, #20]
 801b6a4:	68fa      	ldr	r2, [r7, #12]
 801b6a6:	4413      	add	r3, r2
 801b6a8:	b2ca      	uxtb	r2, r1
 801b6aa:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b6ac:	69bb      	ldr	r3, [r7, #24]
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	61bb      	str	r3, [r7, #24]
 801b6b2:	79fb      	ldrb	r3, [r7, #7]
 801b6b4:	00db      	lsls	r3, r3, #3
 801b6b6:	69ba      	ldr	r2, [r7, #24]
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	dbb0      	blt.n	801b61e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b6bc:	7ffb      	ldrb	r3, [r7, #31]
 801b6be:	01db      	lsls	r3, r3, #7
 801b6c0:	b25a      	sxtb	r2, r3
 801b6c2:	7ffb      	ldrb	r3, [r7, #31]
 801b6c4:	019b      	lsls	r3, r3, #6
 801b6c6:	b25b      	sxtb	r3, r3
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	b25b      	sxtb	r3, r3
 801b6cc:	7ffa      	ldrb	r2, [r7, #31]
 801b6ce:	2a00      	cmp	r2, #0
 801b6d0:	d101      	bne.n	801b6d6 <payload_integration+0x106>
 801b6d2:	2220      	movs	r2, #32
 801b6d4:	e000      	b.n	801b6d8 <payload_integration+0x108>
 801b6d6:	2200      	movs	r2, #0
 801b6d8:	4313      	orrs	r3, r2
 801b6da:	b259      	sxtb	r1, r3
 801b6dc:	79fb      	ldrb	r3, [r7, #7]
 801b6de:	68fa      	ldr	r2, [r7, #12]
 801b6e0:	4413      	add	r3, r2
 801b6e2:	b2ca      	uxtb	r2, r1
 801b6e4:	701a      	strb	r2, [r3, #0]
}
 801b6e6:	bf00      	nop
 801b6e8:	3724      	adds	r7, #36	; 0x24
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	bc80      	pop	{r7}
 801b6ee:	4770      	bx	lr

0801b6f0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b6f0:	b580      	push	{r7, lr}
 801b6f2:	b08c      	sub	sp, #48	; 0x30
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	60b9      	str	r1, [r7, #8]
 801b6f8:	607a      	str	r2, [r7, #4]
 801b6fa:	603b      	str	r3, [r7, #0]
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b700:	2300      	movs	r3, #0
 801b702:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b704:	2300      	movs	r3, #0
 801b706:	623b      	str	r3, [r7, #32]
 801b708:	2300      	movs	r3, #0
 801b70a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b70c:	f001 fdff 	bl	801d30e <RFW_DeInit>

    if( rxContinuous != 0 )
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d001      	beq.n	801b71a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b716:	2300      	movs	r3, #0
 801b718:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	bf14      	ite	ne
 801b720:	2301      	movne	r3, #1
 801b722:	2300      	moveq	r3, #0
 801b724:	b2da      	uxtb	r2, r3
 801b726:	4ba3      	ldr	r3, [pc, #652]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b728:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b72a:	7bfb      	ldrb	r3, [r7, #15]
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d003      	beq.n	801b738 <RadioSetRxGenericConfig+0x48>
 801b730:	2b01      	cmp	r3, #1
 801b732:	f000 80dc 	beq.w	801b8ee <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b736:	e194      	b.n	801ba62 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	689b      	ldr	r3, [r3, #8]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d003      	beq.n	801b748 <RadioSetRxGenericConfig+0x58>
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	68db      	ldr	r3, [r3, #12]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d102      	bne.n	801b74e <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b748:	f04f 33ff 	mov.w	r3, #4294967295
 801b74c:	e18a      	b.n	801ba64 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	7f9b      	ldrb	r3, [r3, #30]
 801b752:	2b08      	cmp	r3, #8
 801b754:	d902      	bls.n	801b75c <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b756:	f04f 33ff 	mov.w	r3, #4294967295
 801b75a:	e183      	b.n	801ba64 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	6919      	ldr	r1, [r3, #16]
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	7f9b      	ldrb	r3, [r3, #30]
 801b764:	b29a      	uxth	r2, r3
 801b766:	f107 0320 	add.w	r3, r7, #32
 801b76a:	4618      	mov	r0, r3
 801b76c:	f001 fec2 	bl	801d4f4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	2b00      	cmp	r3, #0
 801b776:	bf14      	ite	ne
 801b778:	2301      	movne	r3, #1
 801b77a:	2300      	moveq	r3, #0
 801b77c:	b2db      	uxtb	r3, r3
 801b77e:	4618      	mov	r0, r3
 801b780:	f000 fe26 	bl	801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b784:	4b8b      	ldr	r3, [pc, #556]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b786:	2200      	movs	r2, #0
 801b788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	689b      	ldr	r3, [r3, #8]
 801b790:	4a88      	ldr	r2, [pc, #544]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b792:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b79a:	4b86      	ldr	r3, [pc, #536]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b79c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f001 fce5 	bl	801d174 <SUBGRF_GetFskBandwidthRegValue>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	461a      	mov	r2, r3
 801b7ae:	4b81      	ldr	r3, [pc, #516]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b7b4:	4b7f      	ldr	r3, [pc, #508]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	68db      	ldr	r3, [r3, #12]
 801b7be:	b29b      	uxth	r3, r3
 801b7c0:	00db      	lsls	r3, r3, #3
 801b7c2:	b29a      	uxth	r2, r3
 801b7c4:	4b7b      	ldr	r3, [pc, #492]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7c6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b7c8:	68bb      	ldr	r3, [r7, #8]
 801b7ca:	7fda      	ldrb	r2, [r3, #31]
 801b7cc:	4b79      	ldr	r3, [pc, #484]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7ce:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	7f9b      	ldrb	r3, [r3, #30]
 801b7d4:	00db      	lsls	r3, r3, #3
 801b7d6:	b2da      	uxtb	r2, r3
 801b7d8:	4b76      	ldr	r3, [pc, #472]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7da:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b7e2:	4b74      	ldr	r3, [pc, #464]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7e4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d105      	bne.n	801b7fc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	695b      	ldr	r3, [r3, #20]
 801b7f4:	b2da      	uxtb	r2, r3
 801b7f6:	4b6f      	ldr	r3, [pc, #444]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b7f8:	759a      	strb	r2, [r3, #22]
 801b7fa:	e00b      	b.n	801b814 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b802:	2b02      	cmp	r3, #2
 801b804:	d103      	bne.n	801b80e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b806:	4b6b      	ldr	r3, [pc, #428]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b808:	22ff      	movs	r2, #255	; 0xff
 801b80a:	759a      	strb	r2, [r3, #22]
 801b80c:	e002      	b.n	801b814 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b80e:	4b69      	ldr	r3, [pc, #420]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b810:	22ff      	movs	r2, #255	; 0xff
 801b812:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b814:	68bb      	ldr	r3, [r7, #8]
 801b816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b81a:	2b02      	cmp	r3, #2
 801b81c:	d004      	beq.n	801b828 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b824:	2b02      	cmp	r3, #2
 801b826:	d12d      	bne.n	801b884 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b82e:	2bf1      	cmp	r3, #241	; 0xf1
 801b830:	d00c      	beq.n	801b84c <RadioSetRxGenericConfig+0x15c>
 801b832:	68bb      	ldr	r3, [r7, #8]
 801b834:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b838:	2bf2      	cmp	r3, #242	; 0xf2
 801b83a:	d007      	beq.n	801b84c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b842:	2b01      	cmp	r3, #1
 801b844:	d002      	beq.n	801b84c <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b846:	f04f 33ff 	mov.w	r3, #4294967295
 801b84a:	e10b      	b.n	801ba64 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b84c:	2300      	movs	r3, #0
 801b84e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b854:	4b58      	ldr	r3, [pc, #352]	; (801b9b8 <RadioSetRxGenericConfig+0x2c8>)
 801b856:	6819      	ldr	r1, [r3, #0]
 801b858:	f107 0314 	add.w	r3, r7, #20
 801b85c:	4a57      	ldr	r2, [pc, #348]	; (801b9bc <RadioSetRxGenericConfig+0x2cc>)
 801b85e:	4618      	mov	r0, r3
 801b860:	f001 fd48 	bl	801d2f4 <RFW_Init>
 801b864:	4603      	mov	r3, r0
 801b866:	2b00      	cmp	r3, #0
 801b868:	d002      	beq.n	801b870 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b86a:	f04f 33ff 	mov.w	r3, #4294967295
 801b86e:	e0f9      	b.n	801ba64 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b870:	4b50      	ldr	r3, [pc, #320]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b872:	2200      	movs	r2, #0
 801b874:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b876:	4b4f      	ldr	r3, [pc, #316]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b878:	2201      	movs	r2, #1
 801b87a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b87c:	4b4d      	ldr	r3, [pc, #308]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b87e:	2200      	movs	r2, #0
 801b880:	755a      	strb	r2, [r3, #21]
        {
 801b882:	e00e      	b.n	801b8a2 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b884:	68bb      	ldr	r3, [r7, #8]
 801b886:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b88a:	4b4a      	ldr	r3, [pc, #296]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b88c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b88e:	68bb      	ldr	r3, [r7, #8]
 801b890:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b894:	4b47      	ldr	r3, [pc, #284]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b896:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b898:	68bb      	ldr	r3, [r7, #8]
 801b89a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b89e:	4b45      	ldr	r3, [pc, #276]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b8a0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b8a2:	f7ff fa3c 	bl	801ad1e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	f7fe fbd0 	bl	801a04c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b8ac:	4844      	ldr	r0, [pc, #272]	; (801b9c0 <RadioSetRxGenericConfig+0x2d0>)
 801b8ae:	f001 f82d 	bl	801c90c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b8b2:	4844      	ldr	r0, [pc, #272]	; (801b9c4 <RadioSetRxGenericConfig+0x2d4>)
 801b8b4:	f001 f8fc 	bl	801cab0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b8b8:	f107 0320 	add.w	r3, r7, #32
 801b8bc:	4618      	mov	r0, r3
 801b8be:	f000 fbc0 	bl	801c042 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	8b9b      	ldrh	r3, [r3, #28]
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f000 fc0a 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	8b1b      	ldrh	r3, [r3, #24]
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f000 fbe5 	bl	801c0a0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b8dc:	fb03 f202 	mul.w	r2, r3, r2
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	689b      	ldr	r3, [r3, #8]
 801b8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8e8:	4a32      	ldr	r2, [pc, #200]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b8ea:	6093      	str	r3, [r2, #8]
        break;
 801b8ec:	e0b9      	b.n	801ba62 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b8ee:	68bb      	ldr	r3, [r7, #8]
 801b8f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d102      	bne.n	801b8fc <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b8f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8fa:	e0b3      	b.n	801ba64 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b902:	2b01      	cmp	r3, #1
 801b904:	d104      	bne.n	801b910 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b906:	68bb      	ldr	r3, [r7, #8]
 801b908:	695b      	ldr	r3, [r3, #20]
 801b90a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b90e:	e002      	b.n	801b916 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b910:	23ff      	movs	r3, #255	; 0xff
 801b912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	bf14      	ite	ne
 801b91e:	2301      	movne	r3, #1
 801b920:	2300      	moveq	r3, #0
 801b922:	b2db      	uxtb	r3, r3
 801b924:	4618      	mov	r0, r3
 801b926:	f000 fd53 	bl	801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b92a:	683b      	ldr	r3, [r7, #0]
 801b92c:	b2db      	uxtb	r3, r3
 801b92e:	4618      	mov	r0, r3
 801b930:	f000 fd5d 	bl	801c3ee <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b934:	4b1f      	ldr	r3, [pc, #124]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b936:	2201      	movs	r2, #1
 801b938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b942:	4b1c      	ldr	r3, [pc, #112]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b94e:	4b19      	ldr	r3, [pc, #100]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b95a:	4b16      	ldr	r3, [pc, #88]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b95c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b966:	2b02      	cmp	r3, #2
 801b968:	d010      	beq.n	801b98c <RadioSetRxGenericConfig+0x29c>
 801b96a:	2b02      	cmp	r3, #2
 801b96c:	dc2c      	bgt.n	801b9c8 <RadioSetRxGenericConfig+0x2d8>
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d002      	beq.n	801b978 <RadioSetRxGenericConfig+0x288>
 801b972:	2b01      	cmp	r3, #1
 801b974:	d005      	beq.n	801b982 <RadioSetRxGenericConfig+0x292>
            break;
 801b976:	e027      	b.n	801b9c8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b978:	4b0e      	ldr	r3, [pc, #56]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b97a:	2200      	movs	r2, #0
 801b97c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b980:	e023      	b.n	801b9ca <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b982:	4b0c      	ldr	r3, [pc, #48]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b984:	2201      	movs	r2, #1
 801b986:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b98a:	e01e      	b.n	801b9ca <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b992:	2b0b      	cmp	r3, #11
 801b994:	d004      	beq.n	801b9a0 <RadioSetRxGenericConfig+0x2b0>
 801b996:	68bb      	ldr	r3, [r7, #8]
 801b998:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b99c:	2b0c      	cmp	r3, #12
 801b99e:	d104      	bne.n	801b9aa <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b9a0:	4b04      	ldr	r3, [pc, #16]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b9a2:	2201      	movs	r2, #1
 801b9a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b9a8:	e00f      	b.n	801b9ca <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b9aa:	4b02      	ldr	r3, [pc, #8]	; (801b9b4 <RadioSetRxGenericConfig+0x2c4>)
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b9b2:	e00a      	b.n	801b9ca <RadioSetRxGenericConfig+0x2da>
 801b9b4:	200017dc 	.word	0x200017dc
 801b9b8:	200017d8 	.word	0x200017d8
 801b9bc:	20001850 	.word	0x20001850
 801b9c0:	20001814 	.word	0x20001814
 801b9c4:	200017ea 	.word	0x200017ea
            break;
 801b9c8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b9ca:	4b28      	ldr	r3, [pc, #160]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9cc:	2201      	movs	r2, #1
 801b9ce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b9d4:	4b25      	ldr	r3, [pc, #148]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9d6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b9de:	4b23      	ldr	r3, [pc, #140]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9e0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b9e2:	4a22      	ldr	r2, [pc, #136]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9e8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b9f0:	4b1e      	ldr	r3, [pc, #120]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9f2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b9f6:	68bb      	ldr	r3, [r7, #8]
 801b9f8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b9fc:	4b1b      	ldr	r3, [pc, #108]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801b9fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ba02:	f7ff f98c 	bl	801ad1e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ba06:	2001      	movs	r0, #1
 801ba08:	f7fe fb20 	bl	801a04c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ba0c:	4818      	ldr	r0, [pc, #96]	; (801ba70 <RadioSetRxGenericConfig+0x380>)
 801ba0e:	f000 ff7d 	bl	801c90c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ba12:	4818      	ldr	r0, [pc, #96]	; (801ba74 <RadioSetRxGenericConfig+0x384>)
 801ba14:	f001 f84c 	bl	801cab0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801ba18:	4b14      	ldr	r3, [pc, #80]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801ba1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801ba1e:	2b01      	cmp	r3, #1
 801ba20:	d10d      	bne.n	801ba3e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801ba22:	f240 7036 	movw	r0, #1846	; 0x736
 801ba26:	f001 f99f 	bl	801cd68 <SUBGRF_ReadRegister>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	f023 0304 	bic.w	r3, r3, #4
 801ba30:	b2db      	uxtb	r3, r3
 801ba32:	4619      	mov	r1, r3
 801ba34:	f240 7036 	movw	r0, #1846	; 0x736
 801ba38:	f001 f982 	bl	801cd40 <SUBGRF_WriteRegister>
 801ba3c:	e00c      	b.n	801ba58 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ba3e:	f240 7036 	movw	r0, #1846	; 0x736
 801ba42:	f001 f991 	bl	801cd68 <SUBGRF_ReadRegister>
 801ba46:	4603      	mov	r3, r0
 801ba48:	f043 0304 	orr.w	r3, r3, #4
 801ba4c:	b2db      	uxtb	r3, r3
 801ba4e:	4619      	mov	r1, r3
 801ba50:	f240 7036 	movw	r0, #1846	; 0x736
 801ba54:	f001 f974 	bl	801cd40 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ba58:	4b04      	ldr	r3, [pc, #16]	; (801ba6c <RadioSetRxGenericConfig+0x37c>)
 801ba5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba5e:	609a      	str	r2, [r3, #8]
        break;
 801ba60:	bf00      	nop
    }
    return status;
 801ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	3730      	adds	r7, #48	; 0x30
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bd80      	pop	{r7, pc}
 801ba6c:	200017dc 	.word	0x200017dc
 801ba70:	20001814 	.word	0x20001814
 801ba74:	200017ea 	.word	0x200017ea

0801ba78 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b08e      	sub	sp, #56	; 0x38
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	60b9      	str	r1, [r7, #8]
 801ba80:	607b      	str	r3, [r7, #4]
 801ba82:	4603      	mov	r3, r0
 801ba84:	73fb      	strb	r3, [r7, #15]
 801ba86:	4613      	mov	r3, r2
 801ba88:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba8e:	2300      	movs	r3, #0
 801ba90:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ba92:	f001 fc3c 	bl	801d30e <RFW_DeInit>
    switch( modem )
 801ba96:	7bfb      	ldrb	r3, [r7, #15]
 801ba98:	2b03      	cmp	r3, #3
 801ba9a:	f200 8204 	bhi.w	801bea6 <RadioSetTxGenericConfig+0x42e>
 801ba9e:	a201      	add	r2, pc, #4	; (adr r2, 801baa4 <RadioSetTxGenericConfig+0x2c>)
 801baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801baa4:	0801bc29 	.word	0x0801bc29
 801baa8:	0801bd71 	.word	0x0801bd71
 801baac:	0801be69 	.word	0x0801be69
 801bab0:	0801bab5 	.word	0x0801bab5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801bab4:	68bb      	ldr	r3, [r7, #8]
 801bab6:	7c9b      	ldrb	r3, [r3, #18]
 801bab8:	2b08      	cmp	r3, #8
 801baba:	d902      	bls.n	801bac2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801babc:	f04f 33ff 	mov.w	r3, #4294967295
 801bac0:	e206      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801bac2:	68bb      	ldr	r3, [r7, #8]
 801bac4:	6899      	ldr	r1, [r3, #8]
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	7c9b      	ldrb	r3, [r3, #18]
 801baca:	b29a      	uxth	r2, r3
 801bacc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bad0:	4618      	mov	r0, r3
 801bad2:	f001 fd0f 	bl	801d4f4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801bad6:	68bb      	ldr	r3, [r7, #8]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d102      	bne.n	801bae4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801bade:	f04f 33ff 	mov.w	r3, #4294967295
 801bae2:	e1f5      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bae4:	68bb      	ldr	r3, [r7, #8]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	f242 7210 	movw	r2, #10000	; 0x2710
 801baec:	4293      	cmp	r3, r2
 801baee:	d813      	bhi.n	801bb18 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801baf0:	2302      	movs	r3, #2
 801baf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801baf6:	4b99      	ldr	r3, [pc, #612]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801baf8:	2203      	movs	r2, #3
 801bafa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bafc:	4b97      	ldr	r3, [pc, #604]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bafe:	2203      	movs	r2, #3
 801bb00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	4a94      	ldr	r2, [pc, #592]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb0a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	7cda      	ldrb	r2, [r3, #19]
 801bb10:	4b92      	ldr	r3, [pc, #584]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bb16:	e017      	b.n	801bb48 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801bb18:	2300      	movs	r3, #0
 801bb1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bb1e:	4b8f      	ldr	r3, [pc, #572]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb20:	2200      	movs	r2, #0
 801bb22:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bb24:	4b8d      	ldr	r3, [pc, #564]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb26:	2200      	movs	r2, #0
 801bb28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a8a      	ldr	r2, [pc, #552]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb32:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	7cda      	ldrb	r2, [r3, #19]
 801bb38:	4b88      	ldr	r3, [pc, #544]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bb3e:	68bb      	ldr	r3, [r7, #8]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	089b      	lsrs	r3, r3, #2
 801bb44:	4a85      	ldr	r2, [pc, #532]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb46:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	685b      	ldr	r3, [r3, #4]
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	00db      	lsls	r3, r3, #3
 801bb50:	b29a      	uxth	r2, r3
 801bb52:	4b82      	ldr	r3, [pc, #520]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb54:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bb56:	4b81      	ldr	r3, [pc, #516]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb58:	2204      	movs	r2, #4
 801bb5a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bb5c:	68bb      	ldr	r3, [r7, #8]
 801bb5e:	7c9b      	ldrb	r3, [r3, #18]
 801bb60:	00db      	lsls	r3, r3, #3
 801bb62:	b2da      	uxtb	r2, r3
 801bb64:	4b7d      	ldr	r3, [pc, #500]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb66:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bb68:	4b7c      	ldr	r3, [pc, #496]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bb6a:	2200      	movs	r2, #0
 801bb6c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	7d9b      	ldrb	r3, [r3, #22]
 801bb72:	2b02      	cmp	r3, #2
 801bb74:	d003      	beq.n	801bb7e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bb76:	68bb      	ldr	r3, [r7, #8]
 801bb78:	7d1b      	ldrb	r3, [r3, #20]
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	d12b      	bne.n	801bbd6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	7d5b      	ldrb	r3, [r3, #21]
 801bb82:	2bf1      	cmp	r3, #241	; 0xf1
 801bb84:	d00a      	beq.n	801bb9c <RadioSetTxGenericConfig+0x124>
 801bb86:	68bb      	ldr	r3, [r7, #8]
 801bb88:	7d5b      	ldrb	r3, [r3, #21]
 801bb8a:	2bf2      	cmp	r3, #242	; 0xf2
 801bb8c:	d006      	beq.n	801bb9c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	7d5b      	ldrb	r3, [r3, #21]
 801bb92:	2b01      	cmp	r3, #1
 801bb94:	d002      	beq.n	801bb9c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bb96:	f04f 33ff 	mov.w	r3, #4294967295
 801bb9a:	e199      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bba0:	2301      	movs	r3, #1
 801bba2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bba6:	4b6e      	ldr	r3, [pc, #440]	; (801bd60 <RadioSetTxGenericConfig+0x2e8>)
 801bba8:	6819      	ldr	r1, [r3, #0]
 801bbaa:	f107 0320 	add.w	r3, r7, #32
 801bbae:	4a6d      	ldr	r2, [pc, #436]	; (801bd64 <RadioSetTxGenericConfig+0x2ec>)
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f001 fb9f 	bl	801d2f4 <RFW_Init>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d002      	beq.n	801bbc2 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 801bbc0:	e186      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bbc2:	4b66      	ldr	r3, [pc, #408]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bbc8:	4b64      	ldr	r3, [pc, #400]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbca:	2201      	movs	r2, #1
 801bbcc:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bbce:	4b63      	ldr	r3, [pc, #396]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	755a      	strb	r2, [r3, #21]
        {
 801bbd4:	e00b      	b.n	801bbee <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bbd6:	68bb      	ldr	r3, [r7, #8]
 801bbd8:	7d5a      	ldrb	r2, [r3, #21]
 801bbda:	4b60      	ldr	r3, [pc, #384]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbdc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bbde:	68bb      	ldr	r3, [r7, #8]
 801bbe0:	7d9a      	ldrb	r2, [r3, #22]
 801bbe2:	4b5e      	ldr	r3, [pc, #376]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbe4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	7d1a      	ldrb	r2, [r3, #20]
 801bbea:	4b5c      	ldr	r3, [pc, #368]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bbec:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bbee:	f7ff f896 	bl	801ad1e <RadioStandby>
        RadioSetModem( radio_modem );
 801bbf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7fe fa28 	bl	801a04c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbfc:	485a      	ldr	r0, [pc, #360]	; (801bd68 <RadioSetTxGenericConfig+0x2f0>)
 801bbfe:	f000 fe85 	bl	801c90c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc02:	485a      	ldr	r0, [pc, #360]	; (801bd6c <RadioSetTxGenericConfig+0x2f4>)
 801bc04:	f000 ff54 	bl	801cab0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bc08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f000 fa18 	bl	801c042 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	8a1b      	ldrh	r3, [r3, #16]
 801bc16:	4618      	mov	r0, r3
 801bc18:	f000 fa62 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bc1c:	68bb      	ldr	r3, [r7, #8]
 801bc1e:	899b      	ldrh	r3, [r3, #12]
 801bc20:	4618      	mov	r0, r3
 801bc22:	f000 fa3d 	bl	801c0a0 <SUBGRF_SetCrcPolynomial>
        break;
 801bc26:	e13f      	b.n	801bea8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d102      	bne.n	801bc36 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bc30:	f04f 33ff 	mov.w	r3, #4294967295
 801bc34:	e14c      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	7c9b      	ldrb	r3, [r3, #18]
 801bc3a:	2b08      	cmp	r3, #8
 801bc3c:	d902      	bls.n	801bc44 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bc3e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc42:	e145      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	6899      	ldr	r1, [r3, #8]
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	7c9b      	ldrb	r3, [r3, #18]
 801bc4c:	b29a      	uxth	r2, r3
 801bc4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc52:	4618      	mov	r0, r3
 801bc54:	f001 fc4e 	bl	801d4f4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc58:	4b40      	ldr	r3, [pc, #256]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	4a3d      	ldr	r2, [pc, #244]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc66:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bc68:	68bb      	ldr	r3, [r7, #8]
 801bc6a:	7cda      	ldrb	r2, [r3, #19]
 801bc6c:	4b3b      	ldr	r3, [pc, #236]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bc72:	68bb      	ldr	r3, [r7, #8]
 801bc74:	699b      	ldr	r3, [r3, #24]
 801bc76:	4a39      	ldr	r2, [pc, #228]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc78:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc7a:	4b38      	ldr	r3, [pc, #224]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bc80:	68bb      	ldr	r3, [r7, #8]
 801bc82:	685b      	ldr	r3, [r3, #4]
 801bc84:	b29b      	uxth	r3, r3
 801bc86:	00db      	lsls	r3, r3, #3
 801bc88:	b29a      	uxth	r2, r3
 801bc8a:	4b34      	ldr	r3, [pc, #208]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc8c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bc8e:	4b33      	ldr	r3, [pc, #204]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc90:	2204      	movs	r2, #4
 801bc92:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bc94:	68bb      	ldr	r3, [r7, #8]
 801bc96:	7c9b      	ldrb	r3, [r3, #18]
 801bc98:	00db      	lsls	r3, r3, #3
 801bc9a:	b2da      	uxtb	r2, r3
 801bc9c:	4b2f      	ldr	r3, [pc, #188]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bc9e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bca0:	4b2e      	ldr	r3, [pc, #184]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bca2:	2200      	movs	r2, #0
 801bca4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	7d9b      	ldrb	r3, [r3, #22]
 801bcaa:	2b02      	cmp	r3, #2
 801bcac:	d003      	beq.n	801bcb6 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	7d1b      	ldrb	r3, [r3, #20]
 801bcb2:	2b02      	cmp	r3, #2
 801bcb4:	d12a      	bne.n	801bd0c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bcb6:	68bb      	ldr	r3, [r7, #8]
 801bcb8:	7d5b      	ldrb	r3, [r3, #21]
 801bcba:	2bf1      	cmp	r3, #241	; 0xf1
 801bcbc:	d00a      	beq.n	801bcd4 <RadioSetTxGenericConfig+0x25c>
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	7d5b      	ldrb	r3, [r3, #21]
 801bcc2:	2bf2      	cmp	r3, #242	; 0xf2
 801bcc4:	d006      	beq.n	801bcd4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	7d5b      	ldrb	r3, [r3, #21]
 801bcca:	2b01      	cmp	r3, #1
 801bccc:	d002      	beq.n	801bcd4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bcce:	f04f 33ff 	mov.w	r3, #4294967295
 801bcd2:	e0fd      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bcd4:	2301      	movs	r3, #1
 801bcd6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bcd8:	68bb      	ldr	r3, [r7, #8]
 801bcda:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bcdc:	4b20      	ldr	r3, [pc, #128]	; (801bd60 <RadioSetTxGenericConfig+0x2e8>)
 801bcde:	6819      	ldr	r1, [r3, #0]
 801bce0:	f107 0314 	add.w	r3, r7, #20
 801bce4:	4a1f      	ldr	r2, [pc, #124]	; (801bd64 <RadioSetTxGenericConfig+0x2ec>)
 801bce6:	4618      	mov	r0, r3
 801bce8:	f001 fb04 	bl	801d2f4 <RFW_Init>
 801bcec:	4603      	mov	r3, r0
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d002      	beq.n	801bcf8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bcf2:	f04f 33ff 	mov.w	r3, #4294967295
 801bcf6:	e0eb      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bcf8:	4b18      	ldr	r3, [pc, #96]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bcfe:	4b17      	ldr	r3, [pc, #92]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bd00:	2201      	movs	r2, #1
 801bd02:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bd04:	4b15      	ldr	r3, [pc, #84]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bd06:	2200      	movs	r2, #0
 801bd08:	755a      	strb	r2, [r3, #21]
        {
 801bd0a:	e00b      	b.n	801bd24 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bd0c:	68bb      	ldr	r3, [r7, #8]
 801bd0e:	7d5a      	ldrb	r2, [r3, #21]
 801bd10:	4b12      	ldr	r3, [pc, #72]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bd12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	7d9a      	ldrb	r2, [r3, #22]
 801bd18:	4b10      	ldr	r3, [pc, #64]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bd1a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bd1c:	68bb      	ldr	r3, [r7, #8]
 801bd1e:	7d1a      	ldrb	r2, [r3, #20]
 801bd20:	4b0e      	ldr	r3, [pc, #56]	; (801bd5c <RadioSetTxGenericConfig+0x2e4>)
 801bd22:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bd24:	f7fe fffb 	bl	801ad1e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bd28:	2000      	movs	r0, #0
 801bd2a:	f7fe f98f 	bl	801a04c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd2e:	480e      	ldr	r0, [pc, #56]	; (801bd68 <RadioSetTxGenericConfig+0x2f0>)
 801bd30:	f000 fdec 	bl	801c90c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd34:	480d      	ldr	r0, [pc, #52]	; (801bd6c <RadioSetTxGenericConfig+0x2f4>)
 801bd36:	f000 febb 	bl	801cab0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bd3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f000 f97f 	bl	801c042 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bd44:	68bb      	ldr	r3, [r7, #8]
 801bd46:	8a1b      	ldrh	r3, [r3, #16]
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f000 f9c9 	bl	801c0e0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bd4e:	68bb      	ldr	r3, [r7, #8]
 801bd50:	899b      	ldrh	r3, [r3, #12]
 801bd52:	4618      	mov	r0, r3
 801bd54:	f000 f9a4 	bl	801c0a0 <SUBGRF_SetCrcPolynomial>
        break;
 801bd58:	e0a6      	b.n	801bea8 <RadioSetTxGenericConfig+0x430>
 801bd5a:	bf00      	nop
 801bd5c:	200017dc 	.word	0x200017dc
 801bd60:	200017d8 	.word	0x200017d8
 801bd64:	20001838 	.word	0x20001838
 801bd68:	20001814 	.word	0x20001814
 801bd6c:	200017ea 	.word	0x200017ea
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd70:	4b59      	ldr	r3, [pc, #356]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bd72:	2201      	movs	r2, #1
 801bd74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	781a      	ldrb	r2, [r3, #0]
 801bd7c:	4b56      	ldr	r3, [pc, #344]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bd7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bd82:	68bb      	ldr	r3, [r7, #8]
 801bd84:	785a      	ldrb	r2, [r3, #1]
 801bd86:	4b54      	ldr	r3, [pc, #336]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bd88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	789a      	ldrb	r2, [r3, #2]
 801bd90:	4b51      	ldr	r3, [pc, #324]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bd92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bd96:	68bb      	ldr	r3, [r7, #8]
 801bd98:	78db      	ldrb	r3, [r3, #3]
 801bd9a:	2b02      	cmp	r3, #2
 801bd9c:	d010      	beq.n	801bdc0 <RadioSetTxGenericConfig+0x348>
 801bd9e:	2b02      	cmp	r3, #2
 801bda0:	dc20      	bgt.n	801bde4 <RadioSetTxGenericConfig+0x36c>
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d002      	beq.n	801bdac <RadioSetTxGenericConfig+0x334>
 801bda6:	2b01      	cmp	r3, #1
 801bda8:	d005      	beq.n	801bdb6 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bdaa:	e01b      	b.n	801bde4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bdac:	4b4a      	ldr	r3, [pc, #296]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bdae:	2200      	movs	r2, #0
 801bdb0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdb4:	e017      	b.n	801bde6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bdb6:	4b48      	ldr	r3, [pc, #288]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bdb8:	2201      	movs	r2, #1
 801bdba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdbe:	e012      	b.n	801bde6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	2b0b      	cmp	r3, #11
 801bdc6:	d003      	beq.n	801bdd0 <RadioSetTxGenericConfig+0x358>
 801bdc8:	68bb      	ldr	r3, [r7, #8]
 801bdca:	781b      	ldrb	r3, [r3, #0]
 801bdcc:	2b0c      	cmp	r3, #12
 801bdce:	d104      	bne.n	801bdda <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bdd0:	4b41      	ldr	r3, [pc, #260]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bdd2:	2201      	movs	r2, #1
 801bdd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdd8:	e005      	b.n	801bde6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bdda:	4b3f      	ldr	r3, [pc, #252]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bddc:	2200      	movs	r2, #0
 801bdde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bde2:	e000      	b.n	801bde6 <RadioSetTxGenericConfig+0x36e>
            break;
 801bde4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bde6:	4b3c      	ldr	r3, [pc, #240]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bde8:	2201      	movs	r2, #1
 801bdea:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bdec:	68bb      	ldr	r3, [r7, #8]
 801bdee:	889a      	ldrh	r2, [r3, #4]
 801bdf0:	4b39      	ldr	r3, [pc, #228]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bdf2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bdf4:	68bb      	ldr	r3, [r7, #8]
 801bdf6:	799a      	ldrb	r2, [r3, #6]
 801bdf8:	4b37      	ldr	r3, [pc, #220]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bdfa:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bdfc:	68bb      	ldr	r3, [r7, #8]
 801bdfe:	79da      	ldrb	r2, [r3, #7]
 801be00:	4b35      	ldr	r3, [pc, #212]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be02:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801be06:	68bb      	ldr	r3, [r7, #8]
 801be08:	7a1a      	ldrb	r2, [r3, #8]
 801be0a:	4b33      	ldr	r3, [pc, #204]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801be10:	f7fe ff85 	bl	801ad1e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801be14:	2001      	movs	r0, #1
 801be16:	f7fe f919 	bl	801a04c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be1a:	4830      	ldr	r0, [pc, #192]	; (801bedc <RadioSetTxGenericConfig+0x464>)
 801be1c:	f000 fd76 	bl	801c90c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be20:	482f      	ldr	r0, [pc, #188]	; (801bee0 <RadioSetTxGenericConfig+0x468>)
 801be22:	f000 fe45 	bl	801cab0 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801be26:	4b2c      	ldr	r3, [pc, #176]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801be2c:	2b06      	cmp	r3, #6
 801be2e:	d10d      	bne.n	801be4c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801be30:	f640 0089 	movw	r0, #2185	; 0x889
 801be34:	f000 ff98 	bl	801cd68 <SUBGRF_ReadRegister>
 801be38:	4603      	mov	r3, r0
 801be3a:	f023 0304 	bic.w	r3, r3, #4
 801be3e:	b2db      	uxtb	r3, r3
 801be40:	4619      	mov	r1, r3
 801be42:	f640 0089 	movw	r0, #2185	; 0x889
 801be46:	f000 ff7b 	bl	801cd40 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801be4a:	e02d      	b.n	801bea8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801be4c:	f640 0089 	movw	r0, #2185	; 0x889
 801be50:	f000 ff8a 	bl	801cd68 <SUBGRF_ReadRegister>
 801be54:	4603      	mov	r3, r0
 801be56:	f043 0304 	orr.w	r3, r3, #4
 801be5a:	b2db      	uxtb	r3, r3
 801be5c:	4619      	mov	r1, r3
 801be5e:	f640 0089 	movw	r0, #2185	; 0x889
 801be62:	f000 ff6d 	bl	801cd40 <SUBGRF_WriteRegister>
        break;
 801be66:	e01f      	b.n	801bea8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801be68:	68bb      	ldr	r3, [r7, #8]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d004      	beq.n	801be7a <RadioSetTxGenericConfig+0x402>
 801be70:	68bb      	ldr	r3, [r7, #8]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801be78:	d902      	bls.n	801be80 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801be7a:	f04f 33ff 	mov.w	r3, #4294967295
 801be7e:	e027      	b.n	801bed0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801be80:	2003      	movs	r0, #3
 801be82:	f7fe f8e3 	bl	801a04c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801be86:	4b14      	ldr	r3, [pc, #80]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be88:	2202      	movs	r2, #2
 801be8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	4a11      	ldr	r2, [pc, #68]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be94:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801be96:	4b10      	ldr	r3, [pc, #64]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801be98:	2216      	movs	r2, #22
 801be9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be9e:	480f      	ldr	r0, [pc, #60]	; (801bedc <RadioSetTxGenericConfig+0x464>)
 801bea0:	f000 fd34 	bl	801c90c <SUBGRF_SetModulationParams>
        break;
 801bea4:	e000      	b.n	801bea8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801bea6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801beac:	4618      	mov	r0, r3
 801beae:	f001 f863 	bl	801cf78 <SUBGRF_SetRfTxPower>
 801beb2:	4603      	mov	r3, r0
 801beb4:	461a      	mov	r2, r3
 801beb6:	4b08      	ldr	r3, [pc, #32]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801beb8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801bebc:	4b06      	ldr	r3, [pc, #24]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801bebe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bec2:	4618      	mov	r0, r3
 801bec4:	f001 fa37 	bl	801d336 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801bec8:	4a03      	ldr	r2, [pc, #12]	; (801bed8 <RadioSetTxGenericConfig+0x460>)
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	6053      	str	r3, [r2, #4]
    return 0;
 801bece:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bed0:	4618      	mov	r0, r3
 801bed2:	3738      	adds	r7, #56	; 0x38
 801bed4:	46bd      	mov	sp, r7
 801bed6:	bd80      	pop	{r7, pc}
 801bed8:	200017dc 	.word	0x200017dc
 801bedc:	20001814 	.word	0x20001814
 801bee0:	200017ea 	.word	0x200017ea

0801bee4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801bee4:	b480      	push	{r7}
 801bee6:	b085      	sub	sp, #20
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801beec:	2301      	movs	r3, #1
 801beee:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801bef0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bef2:	4618      	mov	r0, r3
 801bef4:	3714      	adds	r7, #20
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bc80      	pop	{r7}
 801befa:	4770      	bx	lr

0801befc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801befc:	b480      	push	{r7}
 801befe:	b083      	sub	sp, #12
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
 801bf04:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bf06:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801bf08:	4618      	mov	r0, r3
 801bf0a:	370c      	adds	r7, #12
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bc80      	pop	{r7}
 801bf10:	4770      	bx	lr
	...

0801bf14 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b084      	sub	sp, #16
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d002      	beq.n	801bf28 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bf22:	4a1d      	ldr	r2, [pc, #116]	; (801bf98 <SUBGRF_Init+0x84>)
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801bf28:	f7e6 fcba 	bl	80028a0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bf2c:	2002      	movs	r0, #2
 801bf2e:	f001 f8ff 	bl	801d130 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801bf32:	4b1a      	ldr	r3, [pc, #104]	; (801bf9c <SUBGRF_Init+0x88>)
 801bf34:	2200      	movs	r2, #0
 801bf36:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bf38:	2000      	movs	r0, #0
 801bf3a:	f000 f97d 	bl	801c238 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801bf3e:	f7f1 ff1f 	bl	800dd80 <RBI_IsTCXO>
 801bf42:	4603      	mov	r3, r0
 801bf44:	2b01      	cmp	r3, #1
 801bf46:	d10e      	bne.n	801bf66 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf48:	2140      	movs	r1, #64	; 0x40
 801bf4a:	2001      	movs	r0, #1
 801bf4c:	f000 fb82 	bl	801c654 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf50:	2100      	movs	r1, #0
 801bf52:	f640 1011 	movw	r0, #2321	; 0x911
 801bf56:	f000 fef3 	bl	801cd40 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf5a:	237f      	movs	r3, #127	; 0x7f
 801bf5c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf5e:	7b38      	ldrb	r0, [r7, #12]
 801bf60:	f000 fa8b 	bl	801c47a <SUBGRF_Calibrate>
 801bf64:	e009      	b.n	801bf7a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf66:	2120      	movs	r1, #32
 801bf68:	f640 1011 	movw	r0, #2321	; 0x911
 801bf6c:	f000 fee8 	bl	801cd40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf70:	2120      	movs	r1, #32
 801bf72:	f640 1012 	movw	r0, #2322	; 0x912
 801bf76:	f000 fee3 	bl	801cd40 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bf7a:	210e      	movs	r1, #14
 801bf7c:	f640 101f 	movw	r0, #2335	; 0x91f
 801bf80:	f000 fede 	bl	801cd40 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bf84:	f7f1 fee0 	bl	800dd48 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bf88:	4b05      	ldr	r3, [pc, #20]	; (801bfa0 <SUBGRF_Init+0x8c>)
 801bf8a:	2201      	movs	r2, #1
 801bf8c:	701a      	strb	r2, [r3, #0]
}
 801bf8e:	bf00      	nop
 801bf90:	3710      	adds	r7, #16
 801bf92:	46bd      	mov	sp, r7
 801bf94:	bd80      	pop	{r7, pc}
 801bf96:	bf00      	nop
 801bf98:	20001874 	.word	0x20001874
 801bf9c:	20001870 	.word	0x20001870
 801bfa0:	20001868 	.word	0x20001868

0801bfa4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bfa4:	b480      	push	{r7}
 801bfa6:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bfa8:	4b02      	ldr	r3, [pc, #8]	; (801bfb4 <SUBGRF_GetOperatingMode+0x10>)
 801bfaa:	781b      	ldrb	r3, [r3, #0]
}
 801bfac:	4618      	mov	r0, r3
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	bc80      	pop	{r7}
 801bfb2:	4770      	bx	lr
 801bfb4:	20001868 	.word	0x20001868

0801bfb8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b082      	sub	sp, #8
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
 801bfc0:	460b      	mov	r3, r1
 801bfc2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bfc4:	78fb      	ldrb	r3, [r7, #3]
 801bfc6:	461a      	mov	r2, r3
 801bfc8:	6879      	ldr	r1, [r7, #4]
 801bfca:	2000      	movs	r0, #0
 801bfcc:	f000 ff24 	bl	801ce18 <SUBGRF_WriteBuffer>
}
 801bfd0:	bf00      	nop
 801bfd2:	3708      	adds	r7, #8
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd80      	pop	{r7, pc}

0801bfd8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b086      	sub	sp, #24
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60f8      	str	r0, [r7, #12]
 801bfe0:	60b9      	str	r1, [r7, #8]
 801bfe2:	4613      	mov	r3, r2
 801bfe4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bfea:	f107 0317 	add.w	r3, r7, #23
 801bfee:	4619      	mov	r1, r3
 801bff0:	68b8      	ldr	r0, [r7, #8]
 801bff2:	f000 fe27 	bl	801cc44 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	79fa      	ldrb	r2, [r7, #7]
 801bffc:	429a      	cmp	r2, r3
 801bffe:	d201      	bcs.n	801c004 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c000:	2301      	movs	r3, #1
 801c002:	e007      	b.n	801c014 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c004:	7df8      	ldrb	r0, [r7, #23]
 801c006:	68bb      	ldr	r3, [r7, #8]
 801c008:	781b      	ldrb	r3, [r3, #0]
 801c00a:	461a      	mov	r2, r3
 801c00c:	68f9      	ldr	r1, [r7, #12]
 801c00e:	f000 ff25 	bl	801ce5c <SUBGRF_ReadBuffer>

    return 0;
 801c012:	2300      	movs	r3, #0
}
 801c014:	4618      	mov	r0, r3
 801c016:	3718      	adds	r7, #24
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}

0801c01c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b084      	sub	sp, #16
 801c020:	af00      	add	r7, sp, #0
 801c022:	60f8      	str	r0, [r7, #12]
 801c024:	460b      	mov	r3, r1
 801c026:	607a      	str	r2, [r7, #4]
 801c028:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c02a:	7afb      	ldrb	r3, [r7, #11]
 801c02c:	4619      	mov	r1, r3
 801c02e:	68f8      	ldr	r0, [r7, #12]
 801c030:	f7ff ffc2 	bl	801bfb8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c034:	6878      	ldr	r0, [r7, #4]
 801c036:	f000 f91b 	bl	801c270 <SUBGRF_SetTx>
}
 801c03a:	bf00      	nop
 801c03c:	3710      	adds	r7, #16
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}

0801c042 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c042:	b580      	push	{r7, lr}
 801c044:	b082      	sub	sp, #8
 801c046:	af00      	add	r7, sp, #0
 801c048:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c04a:	2208      	movs	r2, #8
 801c04c:	6879      	ldr	r1, [r7, #4]
 801c04e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c052:	f000 fe9d 	bl	801cd90 <SUBGRF_WriteRegisters>
    return 0;
 801c056:	2300      	movs	r3, #0
}
 801c058:	4618      	mov	r0, r3
 801c05a:	3708      	adds	r7, #8
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd80      	pop	{r7, pc}

0801c060 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b084      	sub	sp, #16
 801c064:	af00      	add	r7, sp, #0
 801c066:	4603      	mov	r3, r0
 801c068:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c06a:	88fb      	ldrh	r3, [r7, #6]
 801c06c:	0a1b      	lsrs	r3, r3, #8
 801c06e:	b29b      	uxth	r3, r3
 801c070:	b2db      	uxtb	r3, r3
 801c072:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c074:	88fb      	ldrh	r3, [r7, #6]
 801c076:	b2db      	uxtb	r3, r3
 801c078:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c07a:	f000 fb6f 	bl	801c75c <SUBGRF_GetPacketType>
 801c07e:	4603      	mov	r3, r0
 801c080:	2b00      	cmp	r3, #0
 801c082:	d108      	bne.n	801c096 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c084:	f107 030c 	add.w	r3, r7, #12
 801c088:	2202      	movs	r2, #2
 801c08a:	4619      	mov	r1, r3
 801c08c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c090:	f000 fe7e 	bl	801cd90 <SUBGRF_WriteRegisters>
            break;
 801c094:	e000      	b.n	801c098 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c096:	bf00      	nop
    }
}
 801c098:	bf00      	nop
 801c09a:	3710      	adds	r7, #16
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd80      	pop	{r7, pc}

0801c0a0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b084      	sub	sp, #16
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	4603      	mov	r3, r0
 801c0a8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c0aa:	88fb      	ldrh	r3, [r7, #6]
 801c0ac:	0a1b      	lsrs	r3, r3, #8
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	b2db      	uxtb	r3, r3
 801c0b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c0b4:	88fb      	ldrh	r3, [r7, #6]
 801c0b6:	b2db      	uxtb	r3, r3
 801c0b8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c0ba:	f000 fb4f 	bl	801c75c <SUBGRF_GetPacketType>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d108      	bne.n	801c0d6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c0c4:	f107 030c 	add.w	r3, r7, #12
 801c0c8:	2202      	movs	r2, #2
 801c0ca:	4619      	mov	r1, r3
 801c0cc:	f240 60be 	movw	r0, #1726	; 0x6be
 801c0d0:	f000 fe5e 	bl	801cd90 <SUBGRF_WriteRegisters>
            break;
 801c0d4:	e000      	b.n	801c0d8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c0d6:	bf00      	nop
    }
}
 801c0d8:	bf00      	nop
 801c0da:	3710      	adds	r7, #16
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	bd80      	pop	{r7, pc}

0801c0e0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b084      	sub	sp, #16
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	4603      	mov	r3, r0
 801c0e8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c0ee:	f000 fb35 	bl	801c75c <SUBGRF_GetPacketType>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d121      	bne.n	801c13c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c0f8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0fc:	f000 fe34 	bl	801cd68 <SUBGRF_ReadRegister>
 801c100:	4603      	mov	r3, r0
 801c102:	f023 0301 	bic.w	r3, r3, #1
 801c106:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c108:	88fb      	ldrh	r3, [r7, #6]
 801c10a:	0a1b      	lsrs	r3, r3, #8
 801c10c:	b29b      	uxth	r3, r3
 801c10e:	b25b      	sxtb	r3, r3
 801c110:	f003 0301 	and.w	r3, r3, #1
 801c114:	b25a      	sxtb	r2, r3
 801c116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c11a:	4313      	orrs	r3, r2
 801c11c:	b25b      	sxtb	r3, r3
 801c11e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c120:	7bfb      	ldrb	r3, [r7, #15]
 801c122:	4619      	mov	r1, r3
 801c124:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c128:	f000 fe0a 	bl	801cd40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c12c:	88fb      	ldrh	r3, [r7, #6]
 801c12e:	b2db      	uxtb	r3, r3
 801c130:	4619      	mov	r1, r3
 801c132:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c136:	f000 fe03 	bl	801cd40 <SUBGRF_WriteRegister>
            break;
 801c13a:	e000      	b.n	801c13e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c13c:	bf00      	nop
    }
}
 801c13e:	bf00      	nop
 801c140:	3710      	adds	r7, #16
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}

0801c146 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c146:	b580      	push	{r7, lr}
 801c148:	b082      	sub	sp, #8
 801c14a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c150:	2300      	movs	r3, #0
 801c152:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c154:	2300      	movs	r3, #0
 801c156:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c158:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c15c:	f000 fe04 	bl	801cd68 <SUBGRF_ReadRegister>
 801c160:	4603      	mov	r3, r0
 801c162:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c164:	79fb      	ldrb	r3, [r7, #7]
 801c166:	f023 0301 	bic.w	r3, r3, #1
 801c16a:	b2db      	uxtb	r3, r3
 801c16c:	4619      	mov	r1, r3
 801c16e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c172:	f000 fde5 	bl	801cd40 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c176:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c17a:	f000 fdf5 	bl	801cd68 <SUBGRF_ReadRegister>
 801c17e:	4603      	mov	r3, r0
 801c180:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c182:	79bb      	ldrb	r3, [r7, #6]
 801c184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c188:	b2db      	uxtb	r3, r3
 801c18a:	4619      	mov	r1, r3
 801c18c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c190:	f000 fdd6 	bl	801cd40 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c194:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c198:	f000 f88a 	bl	801c2b0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c19c:	463b      	mov	r3, r7
 801c19e:	2204      	movs	r2, #4
 801c1a0:	4619      	mov	r1, r3
 801c1a2:	f640 0019 	movw	r0, #2073	; 0x819
 801c1a6:	f000 fe15 	bl	801cdd4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c1aa:	2000      	movs	r0, #0
 801c1ac:	f000 f844 	bl	801c238 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c1b0:	79fb      	ldrb	r3, [r7, #7]
 801c1b2:	4619      	mov	r1, r3
 801c1b4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c1b8:	f000 fdc2 	bl	801cd40 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c1bc:	79bb      	ldrb	r3, [r7, #6]
 801c1be:	4619      	mov	r1, r3
 801c1c0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c1c4:	f000 fdbc 	bl	801cd40 <SUBGRF_WriteRegister>

    return number;
 801c1c8:	683b      	ldr	r3, [r7, #0]
}
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	3708      	adds	r7, #8
 801c1ce:	46bd      	mov	sp, r7
 801c1d0:	bd80      	pop	{r7, pc}
	...

0801c1d4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c1dc:	2000      	movs	r0, #0
 801c1de:	f7f1 fdba 	bl	800dd56 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c1e2:	2002      	movs	r0, #2
 801c1e4:	f000 ffa4 	bl	801d130 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1e8:	793b      	ldrb	r3, [r7, #4]
 801c1ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1ee:	b2db      	uxtb	r3, r3
 801c1f0:	009b      	lsls	r3, r3, #2
 801c1f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1f4:	793b      	ldrb	r3, [r7, #4]
 801c1f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c1fa:	b2db      	uxtb	r3, r3
 801c1fc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1fe:	b25b      	sxtb	r3, r3
 801c200:	4313      	orrs	r3, r2
 801c202:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c204:	793b      	ldrb	r3, [r7, #4]
 801c206:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c20e:	4313      	orrs	r3, r2
 801c210:	b25b      	sxtb	r3, r3
 801c212:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c214:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c216:	f107 030f 	add.w	r3, r7, #15
 801c21a:	2201      	movs	r2, #1
 801c21c:	4619      	mov	r1, r3
 801c21e:	2084      	movs	r0, #132	; 0x84
 801c220:	f000 fe3e 	bl	801cea0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c224:	4b03      	ldr	r3, [pc, #12]	; (801c234 <SUBGRF_SetSleep+0x60>)
 801c226:	2200      	movs	r2, #0
 801c228:	701a      	strb	r2, [r3, #0]
}
 801c22a:	bf00      	nop
 801c22c:	3710      	adds	r7, #16
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}
 801c232:	bf00      	nop
 801c234:	20001868 	.word	0x20001868

0801c238 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	4603      	mov	r3, r0
 801c240:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c242:	1dfb      	adds	r3, r7, #7
 801c244:	2201      	movs	r2, #1
 801c246:	4619      	mov	r1, r3
 801c248:	2080      	movs	r0, #128	; 0x80
 801c24a:	f000 fe29 	bl	801cea0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c24e:	79fb      	ldrb	r3, [r7, #7]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d103      	bne.n	801c25c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c254:	4b05      	ldr	r3, [pc, #20]	; (801c26c <SUBGRF_SetStandby+0x34>)
 801c256:	2201      	movs	r2, #1
 801c258:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c25a:	e002      	b.n	801c262 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c25c:	4b03      	ldr	r3, [pc, #12]	; (801c26c <SUBGRF_SetStandby+0x34>)
 801c25e:	2202      	movs	r2, #2
 801c260:	701a      	strb	r2, [r3, #0]
}
 801c262:	bf00      	nop
 801c264:	3708      	adds	r7, #8
 801c266:	46bd      	mov	sp, r7
 801c268:	bd80      	pop	{r7, pc}
 801c26a:	bf00      	nop
 801c26c:	20001868 	.word	0x20001868

0801c270 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b084      	sub	sp, #16
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c278:	4b0c      	ldr	r3, [pc, #48]	; (801c2ac <SUBGRF_SetTx+0x3c>)
 801c27a:	2204      	movs	r2, #4
 801c27c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	0c1b      	lsrs	r3, r3, #16
 801c282:	b2db      	uxtb	r3, r3
 801c284:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	0a1b      	lsrs	r3, r3, #8
 801c28a:	b2db      	uxtb	r3, r3
 801c28c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	b2db      	uxtb	r3, r3
 801c292:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c294:	f107 030c 	add.w	r3, r7, #12
 801c298:	2203      	movs	r2, #3
 801c29a:	4619      	mov	r1, r3
 801c29c:	2083      	movs	r0, #131	; 0x83
 801c29e:	f000 fdff 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c2a2:	bf00      	nop
 801c2a4:	3710      	adds	r7, #16
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	bd80      	pop	{r7, pc}
 801c2aa:	bf00      	nop
 801c2ac:	20001868 	.word	0x20001868

0801c2b0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b084      	sub	sp, #16
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2b8:	4b0c      	ldr	r3, [pc, #48]	; (801c2ec <SUBGRF_SetRx+0x3c>)
 801c2ba:	2205      	movs	r2, #5
 801c2bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	0c1b      	lsrs	r3, r3, #16
 801c2c2:	b2db      	uxtb	r3, r3
 801c2c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	0a1b      	lsrs	r3, r3, #8
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2d4:	f107 030c 	add.w	r3, r7, #12
 801c2d8:	2203      	movs	r2, #3
 801c2da:	4619      	mov	r1, r3
 801c2dc:	2082      	movs	r0, #130	; 0x82
 801c2de:	f000 fddf 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c2e2:	bf00      	nop
 801c2e4:	3710      	adds	r7, #16
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}
 801c2ea:	bf00      	nop
 801c2ec:	20001868 	.word	0x20001868

0801c2f0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2f8:	4b0e      	ldr	r3, [pc, #56]	; (801c334 <SUBGRF_SetRxBoosted+0x44>)
 801c2fa:	2205      	movs	r2, #5
 801c2fc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c2fe:	2197      	movs	r1, #151	; 0x97
 801c300:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c304:	f000 fd1c 	bl	801cd40 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	0c1b      	lsrs	r3, r3, #16
 801c30c:	b2db      	uxtb	r3, r3
 801c30e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	0a1b      	lsrs	r3, r3, #8
 801c314:	b2db      	uxtb	r3, r3
 801c316:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	b2db      	uxtb	r3, r3
 801c31c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c31e:	f107 030c 	add.w	r3, r7, #12
 801c322:	2203      	movs	r2, #3
 801c324:	4619      	mov	r1, r3
 801c326:	2082      	movs	r0, #130	; 0x82
 801c328:	f000 fdba 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c32c:	bf00      	nop
 801c32e:	3710      	adds	r7, #16
 801c330:	46bd      	mov	sp, r7
 801c332:	bd80      	pop	{r7, pc}
 801c334:	20001868 	.word	0x20001868

0801c338 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b084      	sub	sp, #16
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	0c1b      	lsrs	r3, r3, #16
 801c346:	b2db      	uxtb	r3, r3
 801c348:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	0a1b      	lsrs	r3, r3, #8
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	b2db      	uxtb	r3, r3
 801c356:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	0c1b      	lsrs	r3, r3, #16
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c360:	683b      	ldr	r3, [r7, #0]
 801c362:	0a1b      	lsrs	r3, r3, #8
 801c364:	b2db      	uxtb	r3, r3
 801c366:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c368:	683b      	ldr	r3, [r7, #0]
 801c36a:	b2db      	uxtb	r3, r3
 801c36c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c36e:	f107 0308 	add.w	r3, r7, #8
 801c372:	2206      	movs	r2, #6
 801c374:	4619      	mov	r1, r3
 801c376:	2094      	movs	r0, #148	; 0x94
 801c378:	f000 fd92 	bl	801cea0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c37c:	4b03      	ldr	r3, [pc, #12]	; (801c38c <SUBGRF_SetRxDutyCycle+0x54>)
 801c37e:	2206      	movs	r2, #6
 801c380:	701a      	strb	r2, [r3, #0]
}
 801c382:	bf00      	nop
 801c384:	3710      	adds	r7, #16
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	bf00      	nop
 801c38c:	20001868 	.word	0x20001868

0801c390 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c390:	b580      	push	{r7, lr}
 801c392:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c394:	2200      	movs	r2, #0
 801c396:	2100      	movs	r1, #0
 801c398:	20c5      	movs	r0, #197	; 0xc5
 801c39a:	f000 fd81 	bl	801cea0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c39e:	4b02      	ldr	r3, [pc, #8]	; (801c3a8 <SUBGRF_SetCad+0x18>)
 801c3a0:	2207      	movs	r2, #7
 801c3a2:	701a      	strb	r2, [r3, #0]
}
 801c3a4:	bf00      	nop
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	20001868 	.word	0x20001868

0801c3ac <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	2100      	movs	r1, #0
 801c3b4:	20d1      	movs	r0, #209	; 0xd1
 801c3b6:	f000 fd73 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c3ba:	bf00      	nop
 801c3bc:	bd80      	pop	{r7, pc}

0801c3be <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c3be:	b580      	push	{r7, lr}
 801c3c0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	2100      	movs	r1, #0
 801c3c6:	20d2      	movs	r0, #210	; 0xd2
 801c3c8:	f000 fd6a 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c3cc:	bf00      	nop
 801c3ce:	bd80      	pop	{r7, pc}

0801c3d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b082      	sub	sp, #8
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c3da:	1dfb      	adds	r3, r7, #7
 801c3dc:	2201      	movs	r2, #1
 801c3de:	4619      	mov	r1, r3
 801c3e0:	209f      	movs	r0, #159	; 0x9f
 801c3e2:	f000 fd5d 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c3e6:	bf00      	nop
 801c3e8:	3708      	adds	r7, #8
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	bd80      	pop	{r7, pc}

0801c3ee <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c3ee:	b580      	push	{r7, lr}
 801c3f0:	b084      	sub	sp, #16
 801c3f2:	af00      	add	r7, sp, #0
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c3f8:	1dfb      	adds	r3, r7, #7
 801c3fa:	2201      	movs	r2, #1
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	20a0      	movs	r0, #160	; 0xa0
 801c400:	f000 fd4e 	bl	801cea0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c404:	79fb      	ldrb	r3, [r7, #7]
 801c406:	2b3f      	cmp	r3, #63	; 0x3f
 801c408:	d91c      	bls.n	801c444 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c40a:	79fb      	ldrb	r3, [r7, #7]
 801c40c:	085b      	lsrs	r3, r3, #1
 801c40e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c410:	2300      	movs	r3, #0
 801c412:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c414:	2300      	movs	r3, #0
 801c416:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c418:	e005      	b.n	801c426 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c41a:	7bfb      	ldrb	r3, [r7, #15]
 801c41c:	089b      	lsrs	r3, r3, #2
 801c41e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c420:	7bbb      	ldrb	r3, [r7, #14]
 801c422:	3301      	adds	r3, #1
 801c424:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c426:	7bfb      	ldrb	r3, [r7, #15]
 801c428:	2b1f      	cmp	r3, #31
 801c42a:	d8f6      	bhi.n	801c41a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c42c:	7bfb      	ldrb	r3, [r7, #15]
 801c42e:	00db      	lsls	r3, r3, #3
 801c430:	b2da      	uxtb	r2, r3
 801c432:	7bbb      	ldrb	r3, [r7, #14]
 801c434:	4413      	add	r3, r2
 801c436:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c438:	7b7b      	ldrb	r3, [r7, #13]
 801c43a:	4619      	mov	r1, r3
 801c43c:	f240 7006 	movw	r0, #1798	; 0x706
 801c440:	f000 fc7e 	bl	801cd40 <SUBGRF_WriteRegister>
    }
}
 801c444:	bf00      	nop
 801c446:	3710      	adds	r7, #16
 801c448:	46bd      	mov	sp, r7
 801c44a:	bd80      	pop	{r7, pc}

0801c44c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c44c:	b580      	push	{r7, lr}
 801c44e:	b082      	sub	sp, #8
 801c450:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c452:	f7f1 fc9c 	bl	800dd8e <RBI_IsDCDC>
 801c456:	4603      	mov	r3, r0
 801c458:	2b01      	cmp	r3, #1
 801c45a:	d102      	bne.n	801c462 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c45c:	2301      	movs	r3, #1
 801c45e:	71fb      	strb	r3, [r7, #7]
 801c460:	e001      	b.n	801c466 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c462:	2300      	movs	r3, #0
 801c464:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c466:	1dfb      	adds	r3, r7, #7
 801c468:	2201      	movs	r2, #1
 801c46a:	4619      	mov	r1, r3
 801c46c:	2096      	movs	r0, #150	; 0x96
 801c46e:	f000 fd17 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c472:	bf00      	nop
 801c474:	3708      	adds	r7, #8
 801c476:	46bd      	mov	sp, r7
 801c478:	bd80      	pop	{r7, pc}

0801c47a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c47a:	b580      	push	{r7, lr}
 801c47c:	b084      	sub	sp, #16
 801c47e:	af00      	add	r7, sp, #0
 801c480:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c482:	793b      	ldrb	r3, [r7, #4]
 801c484:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c488:	b2db      	uxtb	r3, r3
 801c48a:	019b      	lsls	r3, r3, #6
 801c48c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c48e:	793b      	ldrb	r3, [r7, #4]
 801c490:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c494:	b2db      	uxtb	r3, r3
 801c496:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c498:	b25b      	sxtb	r3, r3
 801c49a:	4313      	orrs	r3, r2
 801c49c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c49e:	793b      	ldrb	r3, [r7, #4]
 801c4a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c4a8:	b25b      	sxtb	r3, r3
 801c4aa:	4313      	orrs	r3, r2
 801c4ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c4ae:	793b      	ldrb	r3, [r7, #4]
 801c4b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c4b8:	b25b      	sxtb	r3, r3
 801c4ba:	4313      	orrs	r3, r2
 801c4bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4be:	793b      	ldrb	r3, [r7, #4]
 801c4c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c4c4:	b2db      	uxtb	r3, r3
 801c4c6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c4c8:	b25b      	sxtb	r3, r3
 801c4ca:	4313      	orrs	r3, r2
 801c4cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4ce:	793b      	ldrb	r3, [r7, #4]
 801c4d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4d8:	b25b      	sxtb	r3, r3
 801c4da:	4313      	orrs	r3, r2
 801c4dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c4de:	793b      	ldrb	r3, [r7, #4]
 801c4e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4e8:	4313      	orrs	r3, r2
 801c4ea:	b25b      	sxtb	r3, r3
 801c4ec:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4ee:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c4f0:	f107 030f 	add.w	r3, r7, #15
 801c4f4:	2201      	movs	r2, #1
 801c4f6:	4619      	mov	r1, r3
 801c4f8:	2089      	movs	r0, #137	; 0x89
 801c4fa:	f000 fcd1 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c4fe:	bf00      	nop
 801c500:	3710      	adds	r7, #16
 801c502:	46bd      	mov	sp, r7
 801c504:	bd80      	pop	{r7, pc}
	...

0801c508 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c508:	b580      	push	{r7, lr}
 801c50a:	b084      	sub	sp, #16
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	4a1d      	ldr	r2, [pc, #116]	; (801c588 <SUBGRF_CalibrateImage+0x80>)
 801c514:	4293      	cmp	r3, r2
 801c516:	d904      	bls.n	801c522 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c518:	23e1      	movs	r3, #225	; 0xe1
 801c51a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c51c:	23e9      	movs	r3, #233	; 0xe9
 801c51e:	737b      	strb	r3, [r7, #13]
 801c520:	e027      	b.n	801c572 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	4a19      	ldr	r2, [pc, #100]	; (801c58c <SUBGRF_CalibrateImage+0x84>)
 801c526:	4293      	cmp	r3, r2
 801c528:	d904      	bls.n	801c534 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c52a:	23d7      	movs	r3, #215	; 0xd7
 801c52c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c52e:	23db      	movs	r3, #219	; 0xdb
 801c530:	737b      	strb	r3, [r7, #13]
 801c532:	e01e      	b.n	801c572 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	4a16      	ldr	r2, [pc, #88]	; (801c590 <SUBGRF_CalibrateImage+0x88>)
 801c538:	4293      	cmp	r3, r2
 801c53a:	d904      	bls.n	801c546 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c53c:	23c1      	movs	r3, #193	; 0xc1
 801c53e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c540:	23c5      	movs	r3, #197	; 0xc5
 801c542:	737b      	strb	r3, [r7, #13]
 801c544:	e015      	b.n	801c572 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	4a12      	ldr	r2, [pc, #72]	; (801c594 <SUBGRF_CalibrateImage+0x8c>)
 801c54a:	4293      	cmp	r3, r2
 801c54c:	d904      	bls.n	801c558 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c54e:	2375      	movs	r3, #117	; 0x75
 801c550:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c552:	2381      	movs	r3, #129	; 0x81
 801c554:	737b      	strb	r3, [r7, #13]
 801c556:	e00c      	b.n	801c572 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	4a0f      	ldr	r2, [pc, #60]	; (801c598 <SUBGRF_CalibrateImage+0x90>)
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d904      	bls.n	801c56a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c560:	236b      	movs	r3, #107	; 0x6b
 801c562:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c564:	236f      	movs	r3, #111	; 0x6f
 801c566:	737b      	strb	r3, [r7, #13]
 801c568:	e003      	b.n	801c572 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c56a:	2329      	movs	r3, #41	; 0x29
 801c56c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c56e:	232b      	movs	r3, #43	; 0x2b
 801c570:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c572:	f107 030c 	add.w	r3, r7, #12
 801c576:	2202      	movs	r2, #2
 801c578:	4619      	mov	r1, r3
 801c57a:	2098      	movs	r0, #152	; 0x98
 801c57c:	f000 fc90 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c580:	bf00      	nop
 801c582:	3710      	adds	r7, #16
 801c584:	46bd      	mov	sp, r7
 801c586:	bd80      	pop	{r7, pc}
 801c588:	35a4e900 	.word	0x35a4e900
 801c58c:	32a9f880 	.word	0x32a9f880
 801c590:	2de54480 	.word	0x2de54480
 801c594:	1b6b0b00 	.word	0x1b6b0b00
 801c598:	1954fc40 	.word	0x1954fc40

0801c59c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c59c:	b590      	push	{r4, r7, lr}
 801c59e:	b085      	sub	sp, #20
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	4604      	mov	r4, r0
 801c5a4:	4608      	mov	r0, r1
 801c5a6:	4611      	mov	r1, r2
 801c5a8:	461a      	mov	r2, r3
 801c5aa:	4623      	mov	r3, r4
 801c5ac:	71fb      	strb	r3, [r7, #7]
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	71bb      	strb	r3, [r7, #6]
 801c5b2:	460b      	mov	r3, r1
 801c5b4:	717b      	strb	r3, [r7, #5]
 801c5b6:	4613      	mov	r3, r2
 801c5b8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c5ba:	79fb      	ldrb	r3, [r7, #7]
 801c5bc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c5be:	79bb      	ldrb	r3, [r7, #6]
 801c5c0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c5c2:	797b      	ldrb	r3, [r7, #5]
 801c5c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c5c6:	793b      	ldrb	r3, [r7, #4]
 801c5c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c5ca:	f107 030c 	add.w	r3, r7, #12
 801c5ce:	2204      	movs	r2, #4
 801c5d0:	4619      	mov	r1, r3
 801c5d2:	2095      	movs	r0, #149	; 0x95
 801c5d4:	f000 fc64 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c5d8:	bf00      	nop
 801c5da:	3714      	adds	r7, #20
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	bd90      	pop	{r4, r7, pc}

0801c5e0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c5e0:	b590      	push	{r4, r7, lr}
 801c5e2:	b085      	sub	sp, #20
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	4604      	mov	r4, r0
 801c5e8:	4608      	mov	r0, r1
 801c5ea:	4611      	mov	r1, r2
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	4623      	mov	r3, r4
 801c5f0:	80fb      	strh	r3, [r7, #6]
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	80bb      	strh	r3, [r7, #4]
 801c5f6:	460b      	mov	r3, r1
 801c5f8:	807b      	strh	r3, [r7, #2]
 801c5fa:	4613      	mov	r3, r2
 801c5fc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c5fe:	88fb      	ldrh	r3, [r7, #6]
 801c600:	0a1b      	lsrs	r3, r3, #8
 801c602:	b29b      	uxth	r3, r3
 801c604:	b2db      	uxtb	r3, r3
 801c606:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c608:	88fb      	ldrh	r3, [r7, #6]
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c60e:	88bb      	ldrh	r3, [r7, #4]
 801c610:	0a1b      	lsrs	r3, r3, #8
 801c612:	b29b      	uxth	r3, r3
 801c614:	b2db      	uxtb	r3, r3
 801c616:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c618:	88bb      	ldrh	r3, [r7, #4]
 801c61a:	b2db      	uxtb	r3, r3
 801c61c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c61e:	887b      	ldrh	r3, [r7, #2]
 801c620:	0a1b      	lsrs	r3, r3, #8
 801c622:	b29b      	uxth	r3, r3
 801c624:	b2db      	uxtb	r3, r3
 801c626:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c628:	887b      	ldrh	r3, [r7, #2]
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c62e:	883b      	ldrh	r3, [r7, #0]
 801c630:	0a1b      	lsrs	r3, r3, #8
 801c632:	b29b      	uxth	r3, r3
 801c634:	b2db      	uxtb	r3, r3
 801c636:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c638:	883b      	ldrh	r3, [r7, #0]
 801c63a:	b2db      	uxtb	r3, r3
 801c63c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c63e:	f107 0308 	add.w	r3, r7, #8
 801c642:	2208      	movs	r2, #8
 801c644:	4619      	mov	r1, r3
 801c646:	2008      	movs	r0, #8
 801c648:	f000 fc2a 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c64c:	bf00      	nop
 801c64e:	3714      	adds	r7, #20
 801c650:	46bd      	mov	sp, r7
 801c652:	bd90      	pop	{r4, r7, pc}

0801c654 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	4603      	mov	r3, r0
 801c65c:	6039      	str	r1, [r7, #0]
 801c65e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c660:	79fb      	ldrb	r3, [r7, #7]
 801c662:	f003 0307 	and.w	r3, r3, #7
 801c666:	b2db      	uxtb	r3, r3
 801c668:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c66a:	683b      	ldr	r3, [r7, #0]
 801c66c:	0c1b      	lsrs	r3, r3, #16
 801c66e:	b2db      	uxtb	r3, r3
 801c670:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	0a1b      	lsrs	r3, r3, #8
 801c676:	b2db      	uxtb	r3, r3
 801c678:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	b2db      	uxtb	r3, r3
 801c67e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c680:	f107 030c 	add.w	r3, r7, #12
 801c684:	2204      	movs	r2, #4
 801c686:	4619      	mov	r1, r3
 801c688:	2097      	movs	r0, #151	; 0x97
 801c68a:	f000 fc09 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c68e:	bf00      	nop
 801c690:	3710      	adds	r7, #16
 801c692:	46bd      	mov	sp, r7
 801c694:	bd80      	pop	{r7, pc}
	...

0801c698 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c698:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c69c:	b084      	sub	sp, #16
 801c69e:	af00      	add	r7, sp, #0
 801c6a0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c6a6:	4b1d      	ldr	r3, [pc, #116]	; (801c71c <SUBGRF_SetRfFrequency+0x84>)
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	f083 0301 	eor.w	r3, r3, #1
 801c6ae:	b2db      	uxtb	r3, r3
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d005      	beq.n	801c6c0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c6b4:	6878      	ldr	r0, [r7, #4]
 801c6b6:	f7ff ff27 	bl	801c508 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c6ba:	4b18      	ldr	r3, [pc, #96]	; (801c71c <SUBGRF_SetRfFrequency+0x84>)
 801c6bc:	2201      	movs	r2, #1
 801c6be:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	461c      	mov	r4, r3
 801c6c6:	4615      	mov	r5, r2
 801c6c8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c6cc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c6d0:	4a13      	ldr	r2, [pc, #76]	; (801c720 <SUBGRF_SetRfFrequency+0x88>)
 801c6d2:	f04f 0300 	mov.w	r3, #0
 801c6d6:	4640      	mov	r0, r8
 801c6d8:	4649      	mov	r1, r9
 801c6da:	f7e4 fb57 	bl	8000d8c <__aeabi_uldivmod>
 801c6de:	4602      	mov	r2, r0
 801c6e0:	460b      	mov	r3, r1
 801c6e2:	4613      	mov	r3, r2
 801c6e4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	0e1b      	lsrs	r3, r3, #24
 801c6ea:	b2db      	uxtb	r3, r3
 801c6ec:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	0c1b      	lsrs	r3, r3, #16
 801c6f2:	b2db      	uxtb	r3, r3
 801c6f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	0a1b      	lsrs	r3, r3, #8
 801c6fa:	b2db      	uxtb	r3, r3
 801c6fc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	b2db      	uxtb	r3, r3
 801c702:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c704:	f107 0308 	add.w	r3, r7, #8
 801c708:	2204      	movs	r2, #4
 801c70a:	4619      	mov	r1, r3
 801c70c:	2086      	movs	r0, #134	; 0x86
 801c70e:	f000 fbc7 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c712:	bf00      	nop
 801c714:	3710      	adds	r7, #16
 801c716:	46bd      	mov	sp, r7
 801c718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c71c:	20001870 	.word	0x20001870
 801c720:	01e84800 	.word	0x01e84800

0801c724 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b082      	sub	sp, #8
 801c728:	af00      	add	r7, sp, #0
 801c72a:	4603      	mov	r3, r0
 801c72c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c72e:	79fa      	ldrb	r2, [r7, #7]
 801c730:	4b09      	ldr	r3, [pc, #36]	; (801c758 <SUBGRF_SetPacketType+0x34>)
 801c732:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c734:	79fb      	ldrb	r3, [r7, #7]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d104      	bne.n	801c744 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c73a:	2100      	movs	r1, #0
 801c73c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c740:	f000 fafe 	bl	801cd40 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c744:	1dfb      	adds	r3, r7, #7
 801c746:	2201      	movs	r2, #1
 801c748:	4619      	mov	r1, r3
 801c74a:	208a      	movs	r0, #138	; 0x8a
 801c74c:	f000 fba8 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c750:	bf00      	nop
 801c752:	3708      	adds	r7, #8
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}
 801c758:	20001869 	.word	0x20001869

0801c75c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c75c:	b480      	push	{r7}
 801c75e:	af00      	add	r7, sp, #0
    return PacketType;
 801c760:	4b02      	ldr	r3, [pc, #8]	; (801c76c <SUBGRF_GetPacketType+0x10>)
 801c762:	781b      	ldrb	r3, [r3, #0]
}
 801c764:	4618      	mov	r0, r3
 801c766:	46bd      	mov	sp, r7
 801c768:	bc80      	pop	{r7}
 801c76a:	4770      	bx	lr
 801c76c:	20001869 	.word	0x20001869

0801c770 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b084      	sub	sp, #16
 801c774:	af00      	add	r7, sp, #0
 801c776:	4603      	mov	r3, r0
 801c778:	71fb      	strb	r3, [r7, #7]
 801c77a:	460b      	mov	r3, r1
 801c77c:	71bb      	strb	r3, [r7, #6]
 801c77e:	4613      	mov	r3, r2
 801c780:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c782:	79fb      	ldrb	r3, [r7, #7]
 801c784:	2b01      	cmp	r3, #1
 801c786:	d149      	bne.n	801c81c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c788:	2000      	movs	r0, #0
 801c78a:	f7f1 fb07 	bl	800dd9c <RBI_GetRFOMaxPowerConfig>
 801c78e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c790:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c794:	68fa      	ldr	r2, [r7, #12]
 801c796:	429a      	cmp	r2, r3
 801c798:	da01      	bge.n	801c79e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	2b0e      	cmp	r3, #14
 801c7a2:	d10e      	bne.n	801c7c2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c7a4:	2301      	movs	r3, #1
 801c7a6:	2201      	movs	r2, #1
 801c7a8:	2100      	movs	r1, #0
 801c7aa:	2004      	movs	r0, #4
 801c7ac:	f7ff fef6 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7b0:	79ba      	ldrb	r2, [r7, #6]
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	1ad3      	subs	r3, r2, r3
 801c7b8:	b2db      	uxtb	r3, r3
 801c7ba:	330e      	adds	r3, #14
 801c7bc:	b2db      	uxtb	r3, r3
 801c7be:	71bb      	strb	r3, [r7, #6]
 801c7c0:	e01f      	b.n	801c802 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	2b0a      	cmp	r3, #10
 801c7c6:	d10e      	bne.n	801c7e6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c7c8:	2301      	movs	r3, #1
 801c7ca:	2201      	movs	r2, #1
 801c7cc:	2100      	movs	r1, #0
 801c7ce:	2001      	movs	r0, #1
 801c7d0:	f7ff fee4 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c7d4:	79ba      	ldrb	r2, [r7, #6]
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	b2db      	uxtb	r3, r3
 801c7da:	1ad3      	subs	r3, r2, r3
 801c7dc:	b2db      	uxtb	r3, r3
 801c7de:	330d      	adds	r3, #13
 801c7e0:	b2db      	uxtb	r3, r3
 801c7e2:	71bb      	strb	r3, [r7, #6]
 801c7e4:	e00d      	b.n	801c802 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	2201      	movs	r2, #1
 801c7ea:	2100      	movs	r1, #0
 801c7ec:	2007      	movs	r0, #7
 801c7ee:	f7ff fed5 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7f2:	79ba      	ldrb	r2, [r7, #6]
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	b2db      	uxtb	r3, r3
 801c7f8:	1ad3      	subs	r3, r2, r3
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	330e      	adds	r3, #14
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c802:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c806:	f113 0f11 	cmn.w	r3, #17
 801c80a:	da01      	bge.n	801c810 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c80c:	23ef      	movs	r3, #239	; 0xef
 801c80e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c810:	2118      	movs	r1, #24
 801c812:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c816:	f000 fa93 	bl	801cd40 <SUBGRF_WriteRegister>
 801c81a:	e067      	b.n	801c8ec <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c81c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c820:	f000 faa2 	bl	801cd68 <SUBGRF_ReadRegister>
 801c824:	4603      	mov	r3, r0
 801c826:	f043 031e 	orr.w	r3, r3, #30
 801c82a:	b2db      	uxtb	r3, r3
 801c82c:	4619      	mov	r1, r3
 801c82e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c832:	f000 fa85 	bl	801cd40 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c836:	2001      	movs	r0, #1
 801c838:	f7f1 fab0 	bl	800dd9c <RBI_GetRFOMaxPowerConfig>
 801c83c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c83e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c842:	68fa      	ldr	r2, [r7, #12]
 801c844:	429a      	cmp	r2, r3
 801c846:	da01      	bge.n	801c84c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	2b14      	cmp	r3, #20
 801c850:	d10e      	bne.n	801c870 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c852:	2301      	movs	r3, #1
 801c854:	2200      	movs	r2, #0
 801c856:	2105      	movs	r1, #5
 801c858:	2003      	movs	r0, #3
 801c85a:	f7ff fe9f 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c85e:	79ba      	ldrb	r2, [r7, #6]
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	b2db      	uxtb	r3, r3
 801c864:	1ad3      	subs	r3, r2, r3
 801c866:	b2db      	uxtb	r3, r3
 801c868:	3316      	adds	r3, #22
 801c86a:	b2db      	uxtb	r3, r3
 801c86c:	71bb      	strb	r3, [r7, #6]
 801c86e:	e031      	b.n	801c8d4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	2b11      	cmp	r3, #17
 801c874:	d10e      	bne.n	801c894 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c876:	2301      	movs	r3, #1
 801c878:	2200      	movs	r2, #0
 801c87a:	2103      	movs	r1, #3
 801c87c:	2002      	movs	r0, #2
 801c87e:	f7ff fe8d 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c882:	79ba      	ldrb	r2, [r7, #6]
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	b2db      	uxtb	r3, r3
 801c888:	1ad3      	subs	r3, r2, r3
 801c88a:	b2db      	uxtb	r3, r3
 801c88c:	3316      	adds	r3, #22
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	71bb      	strb	r3, [r7, #6]
 801c892:	e01f      	b.n	801c8d4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	2b0e      	cmp	r3, #14
 801c898:	d10e      	bne.n	801c8b8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c89a:	2301      	movs	r3, #1
 801c89c:	2200      	movs	r2, #0
 801c89e:	2102      	movs	r1, #2
 801c8a0:	2002      	movs	r0, #2
 801c8a2:	f7ff fe7b 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c8a6:	79ba      	ldrb	r2, [r7, #6]
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	b2db      	uxtb	r3, r3
 801c8ac:	1ad3      	subs	r3, r2, r3
 801c8ae:	b2db      	uxtb	r3, r3
 801c8b0:	330e      	adds	r3, #14
 801c8b2:	b2db      	uxtb	r3, r3
 801c8b4:	71bb      	strb	r3, [r7, #6]
 801c8b6:	e00d      	b.n	801c8d4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c8b8:	2301      	movs	r3, #1
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	2107      	movs	r1, #7
 801c8be:	2004      	movs	r0, #4
 801c8c0:	f7ff fe6c 	bl	801c59c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c8c4:	79ba      	ldrb	r2, [r7, #6]
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	b2db      	uxtb	r3, r3
 801c8ca:	1ad3      	subs	r3, r2, r3
 801c8cc:	b2db      	uxtb	r3, r3
 801c8ce:	3316      	adds	r3, #22
 801c8d0:	b2db      	uxtb	r3, r3
 801c8d2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c8d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c8d8:	f113 0f09 	cmn.w	r3, #9
 801c8dc:	da01      	bge.n	801c8e2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c8de:	23f7      	movs	r3, #247	; 0xf7
 801c8e0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c8e2:	2138      	movs	r1, #56	; 0x38
 801c8e4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c8e8:	f000 fa2a 	bl	801cd40 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c8ec:	79bb      	ldrb	r3, [r7, #6]
 801c8ee:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c8f0:	797b      	ldrb	r3, [r7, #5]
 801c8f2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c8f4:	f107 0308 	add.w	r3, r7, #8
 801c8f8:	2202      	movs	r2, #2
 801c8fa:	4619      	mov	r1, r3
 801c8fc:	208e      	movs	r0, #142	; 0x8e
 801c8fe:	f000 facf 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801c902:	bf00      	nop
 801c904:	3710      	adds	r7, #16
 801c906:	46bd      	mov	sp, r7
 801c908:	bd80      	pop	{r7, pc}
	...

0801c90c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c90c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c910:	b086      	sub	sp, #24
 801c912:	af00      	add	r7, sp, #0
 801c914:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c916:	2300      	movs	r3, #0
 801c918:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c91a:	4a61      	ldr	r2, [pc, #388]	; (801caa0 <SUBGRF_SetModulationParams+0x194>)
 801c91c:	f107 0308 	add.w	r3, r7, #8
 801c920:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c924:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	781a      	ldrb	r2, [r3, #0]
 801c92c:	4b5d      	ldr	r3, [pc, #372]	; (801caa4 <SUBGRF_SetModulationParams+0x198>)
 801c92e:	781b      	ldrb	r3, [r3, #0]
 801c930:	429a      	cmp	r2, r3
 801c932:	d004      	beq.n	801c93e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	781b      	ldrb	r3, [r3, #0]
 801c938:	4618      	mov	r0, r3
 801c93a:	f7ff fef3 	bl	801c724 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	781b      	ldrb	r3, [r3, #0]
 801c942:	2b03      	cmp	r3, #3
 801c944:	f200 80a5 	bhi.w	801ca92 <SUBGRF_SetModulationParams+0x186>
 801c948:	a201      	add	r2, pc, #4	; (adr r2, 801c950 <SUBGRF_SetModulationParams+0x44>)
 801c94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c94e:	bf00      	nop
 801c950:	0801c961 	.word	0x0801c961
 801c954:	0801ca21 	.word	0x0801ca21
 801c958:	0801c9e3 	.word	0x0801c9e3
 801c95c:	0801ca4f 	.word	0x0801ca4f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c960:	2308      	movs	r3, #8
 801c962:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	685b      	ldr	r3, [r3, #4]
 801c968:	4a4f      	ldr	r2, [pc, #316]	; (801caa8 <SUBGRF_SetModulationParams+0x19c>)
 801c96a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c96e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c970:	697b      	ldr	r3, [r7, #20]
 801c972:	0c1b      	lsrs	r3, r3, #16
 801c974:	b2db      	uxtb	r3, r3
 801c976:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	0a1b      	lsrs	r3, r3, #8
 801c97c:	b2db      	uxtb	r3, r3
 801c97e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c980:	697b      	ldr	r3, [r7, #20]
 801c982:	b2db      	uxtb	r3, r3
 801c984:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	7b1b      	ldrb	r3, [r3, #12]
 801c98a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	7b5b      	ldrb	r3, [r3, #13]
 801c990:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	2200      	movs	r2, #0
 801c998:	461c      	mov	r4, r3
 801c99a:	4615      	mov	r5, r2
 801c99c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c9a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c9a4:	4a41      	ldr	r2, [pc, #260]	; (801caac <SUBGRF_SetModulationParams+0x1a0>)
 801c9a6:	f04f 0300 	mov.w	r3, #0
 801c9aa:	4640      	mov	r0, r8
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	f7e4 f9ed 	bl	8000d8c <__aeabi_uldivmod>
 801c9b2:	4602      	mov	r2, r0
 801c9b4:	460b      	mov	r3, r1
 801c9b6:	4613      	mov	r3, r2
 801c9b8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c9ba:	697b      	ldr	r3, [r7, #20]
 801c9bc:	0c1b      	lsrs	r3, r3, #16
 801c9be:	b2db      	uxtb	r3, r3
 801c9c0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	0a1b      	lsrs	r3, r3, #8
 801c9c6:	b2db      	uxtb	r3, r3
 801c9c8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	b2db      	uxtb	r3, r3
 801c9ce:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9d0:	7cfb      	ldrb	r3, [r7, #19]
 801c9d2:	b29a      	uxth	r2, r3
 801c9d4:	f107 0308 	add.w	r3, r7, #8
 801c9d8:	4619      	mov	r1, r3
 801c9da:	208b      	movs	r0, #139	; 0x8b
 801c9dc:	f000 fa60 	bl	801cea0 <SUBGRF_WriteCommand>
        break;
 801c9e0:	e058      	b.n	801ca94 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c9e2:	2304      	movs	r3, #4
 801c9e4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	691b      	ldr	r3, [r3, #16]
 801c9ea:	4a2f      	ldr	r2, [pc, #188]	; (801caa8 <SUBGRF_SetModulationParams+0x19c>)
 801c9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9f0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	0c1b      	lsrs	r3, r3, #16
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9fa:	697b      	ldr	r3, [r7, #20]
 801c9fc:	0a1b      	lsrs	r3, r3, #8
 801c9fe:	b2db      	uxtb	r3, r3
 801ca00:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca02:	697b      	ldr	r3, [r7, #20]
 801ca04:	b2db      	uxtb	r3, r3
 801ca06:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	7d1b      	ldrb	r3, [r3, #20]
 801ca0c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca0e:	7cfb      	ldrb	r3, [r7, #19]
 801ca10:	b29a      	uxth	r2, r3
 801ca12:	f107 0308 	add.w	r3, r7, #8
 801ca16:	4619      	mov	r1, r3
 801ca18:	208b      	movs	r0, #139	; 0x8b
 801ca1a:	f000 fa41 	bl	801cea0 <SUBGRF_WriteCommand>
        break;
 801ca1e:	e039      	b.n	801ca94 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ca20:	2304      	movs	r3, #4
 801ca22:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	7e1b      	ldrb	r3, [r3, #24]
 801ca28:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	7e5b      	ldrb	r3, [r3, #25]
 801ca2e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	7e9b      	ldrb	r3, [r3, #26]
 801ca34:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	7edb      	ldrb	r3, [r3, #27]
 801ca3a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca3c:	7cfb      	ldrb	r3, [r7, #19]
 801ca3e:	b29a      	uxth	r2, r3
 801ca40:	f107 0308 	add.w	r3, r7, #8
 801ca44:	4619      	mov	r1, r3
 801ca46:	208b      	movs	r0, #139	; 0x8b
 801ca48:	f000 fa2a 	bl	801cea0 <SUBGRF_WriteCommand>

        break;
 801ca4c:	e022      	b.n	801ca94 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca4e:	2305      	movs	r3, #5
 801ca50:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	685b      	ldr	r3, [r3, #4]
 801ca56:	4a14      	ldr	r2, [pc, #80]	; (801caa8 <SUBGRF_SetModulationParams+0x19c>)
 801ca58:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca5c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca5e:	697b      	ldr	r3, [r7, #20]
 801ca60:	0c1b      	lsrs	r3, r3, #16
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	0a1b      	lsrs	r3, r3, #8
 801ca6a:	b2db      	uxtb	r3, r3
 801ca6c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	b2db      	uxtb	r3, r3
 801ca72:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	7b1b      	ldrb	r3, [r3, #12]
 801ca78:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	7b5b      	ldrb	r3, [r3, #13]
 801ca7e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca80:	7cfb      	ldrb	r3, [r7, #19]
 801ca82:	b29a      	uxth	r2, r3
 801ca84:	f107 0308 	add.w	r3, r7, #8
 801ca88:	4619      	mov	r1, r3
 801ca8a:	208b      	movs	r0, #139	; 0x8b
 801ca8c:	f000 fa08 	bl	801cea0 <SUBGRF_WriteCommand>
        break;
 801ca90:	e000      	b.n	801ca94 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ca92:	bf00      	nop
    }
}
 801ca94:	bf00      	nop
 801ca96:	3718      	adds	r7, #24
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ca9e:	bf00      	nop
 801caa0:	0801f4b0 	.word	0x0801f4b0
 801caa4:	20001869 	.word	0x20001869
 801caa8:	3d090000 	.word	0x3d090000
 801caac:	01e84800 	.word	0x01e84800

0801cab0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801cab0:	b580      	push	{r7, lr}
 801cab2:	b086      	sub	sp, #24
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801cab8:	2300      	movs	r3, #0
 801caba:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cabc:	4a48      	ldr	r2, [pc, #288]	; (801cbe0 <SUBGRF_SetPacketParams+0x130>)
 801cabe:	f107 030c 	add.w	r3, r7, #12
 801cac2:	ca07      	ldmia	r2, {r0, r1, r2}
 801cac4:	c303      	stmia	r3!, {r0, r1}
 801cac6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	781a      	ldrb	r2, [r3, #0]
 801cacc:	4b45      	ldr	r3, [pc, #276]	; (801cbe4 <SUBGRF_SetPacketParams+0x134>)
 801cace:	781b      	ldrb	r3, [r3, #0]
 801cad0:	429a      	cmp	r2, r3
 801cad2:	d004      	beq.n	801cade <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	781b      	ldrb	r3, [r3, #0]
 801cad8:	4618      	mov	r0, r3
 801cada:	f7ff fe23 	bl	801c724 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	781b      	ldrb	r3, [r3, #0]
 801cae2:	2b03      	cmp	r3, #3
 801cae4:	d878      	bhi.n	801cbd8 <SUBGRF_SetPacketParams+0x128>
 801cae6:	a201      	add	r2, pc, #4	; (adr r2, 801caec <SUBGRF_SetPacketParams+0x3c>)
 801cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caec:	0801cafd 	.word	0x0801cafd
 801caf0:	0801cb8d 	.word	0x0801cb8d
 801caf4:	0801cb81 	.word	0x0801cb81
 801caf8:	0801cafd 	.word	0x0801cafd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	7a5b      	ldrb	r3, [r3, #9]
 801cb00:	2bf1      	cmp	r3, #241	; 0xf1
 801cb02:	d10a      	bne.n	801cb1a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cb04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cb08:	f7ff faaa 	bl	801c060 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cb0c:	f248 0005 	movw	r0, #32773	; 0x8005
 801cb10:	f7ff fac6 	bl	801c0a0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cb14:	2302      	movs	r3, #2
 801cb16:	75bb      	strb	r3, [r7, #22]
 801cb18:	e011      	b.n	801cb3e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	7a5b      	ldrb	r3, [r3, #9]
 801cb1e:	2bf2      	cmp	r3, #242	; 0xf2
 801cb20:	d10a      	bne.n	801cb38 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cb22:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cb26:	f7ff fa9b 	bl	801c060 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cb2a:	f241 0021 	movw	r0, #4129	; 0x1021
 801cb2e:	f7ff fab7 	bl	801c0a0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cb32:	2306      	movs	r3, #6
 801cb34:	75bb      	strb	r3, [r7, #22]
 801cb36:	e002      	b.n	801cb3e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	7a5b      	ldrb	r3, [r3, #9]
 801cb3c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cb3e:	2309      	movs	r3, #9
 801cb40:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	885b      	ldrh	r3, [r3, #2]
 801cb46:	0a1b      	lsrs	r3, r3, #8
 801cb48:	b29b      	uxth	r3, r3
 801cb4a:	b2db      	uxtb	r3, r3
 801cb4c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	885b      	ldrh	r3, [r3, #2]
 801cb52:	b2db      	uxtb	r3, r3
 801cb54:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	791b      	ldrb	r3, [r3, #4]
 801cb5a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	795b      	ldrb	r3, [r3, #5]
 801cb60:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	799b      	ldrb	r3, [r3, #6]
 801cb66:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	79db      	ldrb	r3, [r3, #7]
 801cb6c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	7a1b      	ldrb	r3, [r3, #8]
 801cb72:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb74:	7dbb      	ldrb	r3, [r7, #22]
 801cb76:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	7a9b      	ldrb	r3, [r3, #10]
 801cb7c:	753b      	strb	r3, [r7, #20]
        break;
 801cb7e:	e022      	b.n	801cbc6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb80:	2301      	movs	r3, #1
 801cb82:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	7b1b      	ldrb	r3, [r3, #12]
 801cb88:	733b      	strb	r3, [r7, #12]
        break;
 801cb8a:	e01c      	b.n	801cbc6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cb8c:	2306      	movs	r3, #6
 801cb8e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	89db      	ldrh	r3, [r3, #14]
 801cb94:	0a1b      	lsrs	r3, r3, #8
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	b2db      	uxtb	r3, r3
 801cb9a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	89db      	ldrh	r3, [r3, #14]
 801cba0:	b2db      	uxtb	r3, r3
 801cba2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	7c1a      	ldrb	r2, [r3, #16]
 801cba8:	4b0f      	ldr	r3, [pc, #60]	; (801cbe8 <SUBGRF_SetPacketParams+0x138>)
 801cbaa:	4611      	mov	r1, r2
 801cbac:	7019      	strb	r1, [r3, #0]
 801cbae:	4613      	mov	r3, r2
 801cbb0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	7c5b      	ldrb	r3, [r3, #17]
 801cbb6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	7c9b      	ldrb	r3, [r3, #18]
 801cbbc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	7cdb      	ldrb	r3, [r3, #19]
 801cbc2:	747b      	strb	r3, [r7, #17]
        break;
 801cbc4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cbc6:	7dfb      	ldrb	r3, [r7, #23]
 801cbc8:	b29a      	uxth	r2, r3
 801cbca:	f107 030c 	add.w	r3, r7, #12
 801cbce:	4619      	mov	r1, r3
 801cbd0:	208c      	movs	r0, #140	; 0x8c
 801cbd2:	f000 f965 	bl	801cea0 <SUBGRF_WriteCommand>
 801cbd6:	e000      	b.n	801cbda <SUBGRF_SetPacketParams+0x12a>
        return;
 801cbd8:	bf00      	nop
}
 801cbda:	3718      	adds	r7, #24
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}
 801cbe0:	0801f4b8 	.word	0x0801f4b8
 801cbe4:	20001869 	.word	0x20001869
 801cbe8:	2000186a 	.word	0x2000186a

0801cbec <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b084      	sub	sp, #16
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	460a      	mov	r2, r1
 801cbf6:	71fb      	strb	r3, [r7, #7]
 801cbf8:	4613      	mov	r3, r2
 801cbfa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cbfc:	79fb      	ldrb	r3, [r7, #7]
 801cbfe:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cc00:	79bb      	ldrb	r3, [r7, #6]
 801cc02:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cc04:	f107 030c 	add.w	r3, r7, #12
 801cc08:	2202      	movs	r2, #2
 801cc0a:	4619      	mov	r1, r3
 801cc0c:	208f      	movs	r0, #143	; 0x8f
 801cc0e:	f000 f947 	bl	801cea0 <SUBGRF_WriteCommand>
}
 801cc12:	bf00      	nop
 801cc14:	3710      	adds	r7, #16
 801cc16:	46bd      	mov	sp, r7
 801cc18:	bd80      	pop	{r7, pc}

0801cc1a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cc1a:	b580      	push	{r7, lr}
 801cc1c:	b082      	sub	sp, #8
 801cc1e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cc20:	2300      	movs	r3, #0
 801cc22:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cc24:	1d3b      	adds	r3, r7, #4
 801cc26:	2201      	movs	r2, #1
 801cc28:	4619      	mov	r1, r3
 801cc2a:	2015      	movs	r0, #21
 801cc2c:	f000 f95a 	bl	801cee4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cc30:	793b      	ldrb	r3, [r7, #4]
 801cc32:	425b      	negs	r3, r3
 801cc34:	105b      	asrs	r3, r3, #1
 801cc36:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cc38:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	3708      	adds	r7, #8
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bd80      	pop	{r7, pc}

0801cc44 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b084      	sub	sp, #16
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc4e:	f107 030c 	add.w	r3, r7, #12
 801cc52:	2202      	movs	r2, #2
 801cc54:	4619      	mov	r1, r3
 801cc56:	2013      	movs	r0, #19
 801cc58:	f000 f944 	bl	801cee4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc5c:	f7ff fd7e 	bl	801c75c <SUBGRF_GetPacketType>
 801cc60:	4603      	mov	r3, r0
 801cc62:	2b01      	cmp	r3, #1
 801cc64:	d10d      	bne.n	801cc82 <SUBGRF_GetRxBufferStatus+0x3e>
 801cc66:	4b0c      	ldr	r3, [pc, #48]	; (801cc98 <SUBGRF_GetRxBufferStatus+0x54>)
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	2b01      	cmp	r3, #1
 801cc6e:	d108      	bne.n	801cc82 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc70:	f240 7002 	movw	r0, #1794	; 0x702
 801cc74:	f000 f878 	bl	801cd68 <SUBGRF_ReadRegister>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	461a      	mov	r2, r3
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	701a      	strb	r2, [r3, #0]
 801cc80:	e002      	b.n	801cc88 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc82:	7b3a      	ldrb	r2, [r7, #12]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cc88:	7b7a      	ldrb	r2, [r7, #13]
 801cc8a:	683b      	ldr	r3, [r7, #0]
 801cc8c:	701a      	strb	r2, [r3, #0]
}
 801cc8e:	bf00      	nop
 801cc90:	3710      	adds	r7, #16
 801cc92:	46bd      	mov	sp, r7
 801cc94:	bd80      	pop	{r7, pc}
 801cc96:	bf00      	nop
 801cc98:	2000186a 	.word	0x2000186a

0801cc9c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b084      	sub	sp, #16
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cca4:	f107 030c 	add.w	r3, r7, #12
 801cca8:	2203      	movs	r2, #3
 801ccaa:	4619      	mov	r1, r3
 801ccac:	2014      	movs	r0, #20
 801ccae:	f000 f919 	bl	801cee4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ccb2:	f7ff fd53 	bl	801c75c <SUBGRF_GetPacketType>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	461a      	mov	r2, r3
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d002      	beq.n	801cccc <SUBGRF_GetPacketStatus+0x30>
 801ccc6:	2b01      	cmp	r3, #1
 801ccc8:	d013      	beq.n	801ccf2 <SUBGRF_GetPacketStatus+0x56>
 801ccca:	e02a      	b.n	801cd22 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cccc:	7b3a      	ldrb	r2, [r7, #12]
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ccd2:	7b7b      	ldrb	r3, [r7, #13]
 801ccd4:	425b      	negs	r3, r3
 801ccd6:	105b      	asrs	r3, r3, #1
 801ccd8:	b25a      	sxtb	r2, r3
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ccde:	7bbb      	ldrb	r3, [r7, #14]
 801cce0:	425b      	negs	r3, r3
 801cce2:	105b      	asrs	r3, r3, #1
 801cce4:	b25a      	sxtb	r2, r3
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	2200      	movs	r2, #0
 801ccee:	609a      	str	r2, [r3, #8]
            break;
 801ccf0:	e020      	b.n	801cd34 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ccf2:	7b3b      	ldrb	r3, [r7, #12]
 801ccf4:	425b      	negs	r3, r3
 801ccf6:	105b      	asrs	r3, r3, #1
 801ccf8:	b25a      	sxtb	r2, r3
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ccfe:	7b7b      	ldrb	r3, [r7, #13]
 801cd00:	b25b      	sxtb	r3, r3
 801cd02:	3302      	adds	r3, #2
 801cd04:	109b      	asrs	r3, r3, #2
 801cd06:	b25a      	sxtb	r2, r3
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cd0c:	7bbb      	ldrb	r3, [r7, #14]
 801cd0e:	425b      	negs	r3, r3
 801cd10:	105b      	asrs	r3, r3, #1
 801cd12:	b25a      	sxtb	r2, r3
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cd18:	4b08      	ldr	r3, [pc, #32]	; (801cd3c <SUBGRF_GetPacketStatus+0xa0>)
 801cd1a:	681a      	ldr	r2, [r3, #0]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	611a      	str	r2, [r3, #16]
            break;
 801cd20:	e008      	b.n	801cd34 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cd22:	2214      	movs	r2, #20
 801cd24:	2100      	movs	r1, #0
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f000 fc03 	bl	801d532 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	220f      	movs	r2, #15
 801cd30:	701a      	strb	r2, [r3, #0]
            break;
 801cd32:	bf00      	nop
    }
}
 801cd34:	bf00      	nop
 801cd36:	3710      	adds	r7, #16
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	bd80      	pop	{r7, pc}
 801cd3c:	2000186c 	.word	0x2000186c

0801cd40 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b082      	sub	sp, #8
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	4603      	mov	r3, r0
 801cd48:	460a      	mov	r2, r1
 801cd4a:	80fb      	strh	r3, [r7, #6]
 801cd4c:	4613      	mov	r3, r2
 801cd4e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd50:	1d7a      	adds	r2, r7, #5
 801cd52:	88f9      	ldrh	r1, [r7, #6]
 801cd54:	2301      	movs	r3, #1
 801cd56:	4803      	ldr	r0, [pc, #12]	; (801cd64 <SUBGRF_WriteRegister+0x24>)
 801cd58:	f7ed fad2 	bl	800a300 <HAL_SUBGHZ_WriteRegisters>
}
 801cd5c:	bf00      	nop
 801cd5e:	3708      	adds	r7, #8
 801cd60:	46bd      	mov	sp, r7
 801cd62:	bd80      	pop	{r7, pc}
 801cd64:	200003e8 	.word	0x200003e8

0801cd68 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	b084      	sub	sp, #16
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	4603      	mov	r3, r0
 801cd70:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd72:	f107 020f 	add.w	r2, r7, #15
 801cd76:	88f9      	ldrh	r1, [r7, #6]
 801cd78:	2301      	movs	r3, #1
 801cd7a:	4804      	ldr	r0, [pc, #16]	; (801cd8c <SUBGRF_ReadRegister+0x24>)
 801cd7c:	f7ed fb1f 	bl	800a3be <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd80:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	3710      	adds	r7, #16
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}
 801cd8a:	bf00      	nop
 801cd8c:	200003e8 	.word	0x200003e8

0801cd90 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b086      	sub	sp, #24
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	4603      	mov	r3, r0
 801cd98:	6039      	str	r1, [r7, #0]
 801cd9a:	80fb      	strh	r3, [r7, #6]
 801cd9c:	4613      	mov	r3, r2
 801cd9e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cda0:	f3ef 8310 	mrs	r3, PRIMASK
 801cda4:	60fb      	str	r3, [r7, #12]
  return(result);
 801cda6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cda8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdaa:	b672      	cpsid	i
}
 801cdac:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cdae:	88bb      	ldrh	r3, [r7, #4]
 801cdb0:	88f9      	ldrh	r1, [r7, #6]
 801cdb2:	683a      	ldr	r2, [r7, #0]
 801cdb4:	4806      	ldr	r0, [pc, #24]	; (801cdd0 <SUBGRF_WriteRegisters+0x40>)
 801cdb6:	f7ed faa3 	bl	800a300 <HAL_SUBGHZ_WriteRegisters>
 801cdba:	697b      	ldr	r3, [r7, #20]
 801cdbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	f383 8810 	msr	PRIMASK, r3
}
 801cdc4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdc6:	bf00      	nop
 801cdc8:	3718      	adds	r7, #24
 801cdca:	46bd      	mov	sp, r7
 801cdcc:	bd80      	pop	{r7, pc}
 801cdce:	bf00      	nop
 801cdd0:	200003e8 	.word	0x200003e8

0801cdd4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	b086      	sub	sp, #24
 801cdd8:	af00      	add	r7, sp, #0
 801cdda:	4603      	mov	r3, r0
 801cddc:	6039      	str	r1, [r7, #0]
 801cdde:	80fb      	strh	r3, [r7, #6]
 801cde0:	4613      	mov	r3, r2
 801cde2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cde4:	f3ef 8310 	mrs	r3, PRIMASK
 801cde8:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdee:	b672      	cpsid	i
}
 801cdf0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cdf2:	88bb      	ldrh	r3, [r7, #4]
 801cdf4:	88f9      	ldrh	r1, [r7, #6]
 801cdf6:	683a      	ldr	r2, [r7, #0]
 801cdf8:	4806      	ldr	r0, [pc, #24]	; (801ce14 <SUBGRF_ReadRegisters+0x40>)
 801cdfa:	f7ed fae0 	bl	800a3be <HAL_SUBGHZ_ReadRegisters>
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce02:	693b      	ldr	r3, [r7, #16]
 801ce04:	f383 8810 	msr	PRIMASK, r3
}
 801ce08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce0a:	bf00      	nop
 801ce0c:	3718      	adds	r7, #24
 801ce0e:	46bd      	mov	sp, r7
 801ce10:	bd80      	pop	{r7, pc}
 801ce12:	bf00      	nop
 801ce14:	200003e8 	.word	0x200003e8

0801ce18 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b086      	sub	sp, #24
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	4603      	mov	r3, r0
 801ce20:	6039      	str	r1, [r7, #0]
 801ce22:	71fb      	strb	r3, [r7, #7]
 801ce24:	4613      	mov	r3, r2
 801ce26:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce28:	f3ef 8310 	mrs	r3, PRIMASK
 801ce2c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce32:	b672      	cpsid	i
}
 801ce34:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ce36:	79bb      	ldrb	r3, [r7, #6]
 801ce38:	b29b      	uxth	r3, r3
 801ce3a:	79f9      	ldrb	r1, [r7, #7]
 801ce3c:	683a      	ldr	r2, [r7, #0]
 801ce3e:	4806      	ldr	r0, [pc, #24]	; (801ce58 <SUBGRF_WriteBuffer+0x40>)
 801ce40:	f7ed fbd1 	bl	800a5e6 <HAL_SUBGHZ_WriteBuffer>
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	f383 8810 	msr	PRIMASK, r3
}
 801ce4e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce50:	bf00      	nop
 801ce52:	3718      	adds	r7, #24
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bd80      	pop	{r7, pc}
 801ce58:	200003e8 	.word	0x200003e8

0801ce5c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b086      	sub	sp, #24
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	4603      	mov	r3, r0
 801ce64:	6039      	str	r1, [r7, #0]
 801ce66:	71fb      	strb	r3, [r7, #7]
 801ce68:	4613      	mov	r3, r2
 801ce6a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce70:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce76:	b672      	cpsid	i
}
 801ce78:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce7a:	79bb      	ldrb	r3, [r7, #6]
 801ce7c:	b29b      	uxth	r3, r3
 801ce7e:	79f9      	ldrb	r1, [r7, #7]
 801ce80:	683a      	ldr	r2, [r7, #0]
 801ce82:	4806      	ldr	r0, [pc, #24]	; (801ce9c <SUBGRF_ReadBuffer+0x40>)
 801ce84:	f7ed fc02 	bl	800a68c <HAL_SUBGHZ_ReadBuffer>
 801ce88:	697b      	ldr	r3, [r7, #20]
 801ce8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce8c:	693b      	ldr	r3, [r7, #16]
 801ce8e:	f383 8810 	msr	PRIMASK, r3
}
 801ce92:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce94:	bf00      	nop
 801ce96:	3718      	adds	r7, #24
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	200003e8 	.word	0x200003e8

0801cea0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b086      	sub	sp, #24
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	4603      	mov	r3, r0
 801cea8:	6039      	str	r1, [r7, #0]
 801ceaa:	71fb      	strb	r3, [r7, #7]
 801ceac:	4613      	mov	r3, r2
 801ceae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 801ceb4:	60fb      	str	r3, [r7, #12]
  return(result);
 801ceb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ceb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceba:	b672      	cpsid	i
}
 801cebc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801cebe:	88bb      	ldrh	r3, [r7, #4]
 801cec0:	79f9      	ldrb	r1, [r7, #7]
 801cec2:	683a      	ldr	r2, [r7, #0]
 801cec4:	4806      	ldr	r0, [pc, #24]	; (801cee0 <SUBGRF_WriteCommand+0x40>)
 801cec6:	f7ed fadb 	bl	800a480 <HAL_SUBGHZ_ExecSetCmd>
 801ceca:	697b      	ldr	r3, [r7, #20]
 801cecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cece:	693b      	ldr	r3, [r7, #16]
 801ced0:	f383 8810 	msr	PRIMASK, r3
}
 801ced4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ced6:	bf00      	nop
 801ced8:	3718      	adds	r7, #24
 801ceda:	46bd      	mov	sp, r7
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	bf00      	nop
 801cee0:	200003e8 	.word	0x200003e8

0801cee4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b086      	sub	sp, #24
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	4603      	mov	r3, r0
 801ceec:	6039      	str	r1, [r7, #0]
 801ceee:	71fb      	strb	r3, [r7, #7]
 801cef0:	4613      	mov	r3, r2
 801cef2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cef4:	f3ef 8310 	mrs	r3, PRIMASK
 801cef8:	60fb      	str	r3, [r7, #12]
  return(result);
 801cefa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cefc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cefe:	b672      	cpsid	i
}
 801cf00:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801cf02:	88bb      	ldrh	r3, [r7, #4]
 801cf04:	79f9      	ldrb	r1, [r7, #7]
 801cf06:	683a      	ldr	r2, [r7, #0]
 801cf08:	4806      	ldr	r0, [pc, #24]	; (801cf24 <SUBGRF_ReadCommand+0x40>)
 801cf0a:	f7ed fb18 	bl	800a53e <HAL_SUBGHZ_ExecGetCmd>
 801cf0e:	697b      	ldr	r3, [r7, #20]
 801cf10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf12:	693b      	ldr	r3, [r7, #16]
 801cf14:	f383 8810 	msr	PRIMASK, r3
}
 801cf18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cf1a:	bf00      	nop
 801cf1c:	3718      	adds	r7, #24
 801cf1e:	46bd      	mov	sp, r7
 801cf20:	bd80      	pop	{r7, pc}
 801cf22:	bf00      	nop
 801cf24:	200003e8 	.word	0x200003e8

0801cf28 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b084      	sub	sp, #16
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	4603      	mov	r3, r0
 801cf30:	460a      	mov	r2, r1
 801cf32:	71fb      	strb	r3, [r7, #7]
 801cf34:	4613      	mov	r3, r2
 801cf36:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cf3c:	79bb      	ldrb	r3, [r7, #6]
 801cf3e:	2b01      	cmp	r3, #1
 801cf40:	d10d      	bne.n	801cf5e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cf42:	79fb      	ldrb	r3, [r7, #7]
 801cf44:	2b01      	cmp	r3, #1
 801cf46:	d104      	bne.n	801cf52 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf48:	2302      	movs	r3, #2
 801cf4a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf4c:	2004      	movs	r0, #4
 801cf4e:	f000 f8ef 	bl	801d130 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf52:	79fb      	ldrb	r3, [r7, #7]
 801cf54:	2b02      	cmp	r3, #2
 801cf56:	d107      	bne.n	801cf68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf58:	2303      	movs	r3, #3
 801cf5a:	73fb      	strb	r3, [r7, #15]
 801cf5c:	e004      	b.n	801cf68 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf5e:	79bb      	ldrb	r3, [r7, #6]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d101      	bne.n	801cf68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf64:	2301      	movs	r3, #1
 801cf66:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf68:	7bfb      	ldrb	r3, [r7, #15]
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7f0 fef3 	bl	800dd56 <RBI_ConfigRFSwitch>
}
 801cf70:	bf00      	nop
 801cf72:	3710      	adds	r7, #16
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b084      	sub	sp, #16
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	4603      	mov	r3, r0
 801cf80:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf82:	2301      	movs	r3, #1
 801cf84:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf86:	f7f0 fef4 	bl	800dd72 <RBI_GetTxConfig>
 801cf8a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cf8c:	68bb      	ldr	r3, [r7, #8]
 801cf8e:	2b02      	cmp	r3, #2
 801cf90:	d016      	beq.n	801cfc0 <SUBGRF_SetRfTxPower+0x48>
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	2b02      	cmp	r3, #2
 801cf96:	dc16      	bgt.n	801cfc6 <SUBGRF_SetRfTxPower+0x4e>
 801cf98:	68bb      	ldr	r3, [r7, #8]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d003      	beq.n	801cfa6 <SUBGRF_SetRfTxPower+0x2e>
 801cf9e:	68bb      	ldr	r3, [r7, #8]
 801cfa0:	2b01      	cmp	r3, #1
 801cfa2:	d00a      	beq.n	801cfba <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cfa4:	e00f      	b.n	801cfc6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cfa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cfaa:	2b0f      	cmp	r3, #15
 801cfac:	dd02      	ble.n	801cfb4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cfae:	2302      	movs	r3, #2
 801cfb0:	73fb      	strb	r3, [r7, #15]
            break;
 801cfb2:	e009      	b.n	801cfc8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	73fb      	strb	r3, [r7, #15]
            break;
 801cfb8:	e006      	b.n	801cfc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cfba:	2301      	movs	r3, #1
 801cfbc:	73fb      	strb	r3, [r7, #15]
            break;
 801cfbe:	e003      	b.n	801cfc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cfc0:	2302      	movs	r3, #2
 801cfc2:	73fb      	strb	r3, [r7, #15]
            break;
 801cfc4:	e000      	b.n	801cfc8 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cfc6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cfc8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cfcc:	7bfb      	ldrb	r3, [r7, #15]
 801cfce:	2202      	movs	r2, #2
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7ff fbcd 	bl	801c770 <SUBGRF_SetTxParams>

    return paSelect;
 801cfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfd8:	4618      	mov	r0, r3
 801cfda:	3710      	adds	r7, #16
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd80      	pop	{r7, pc}

0801cfe0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cfe0:	b480      	push	{r7}
 801cfe2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cfe4:	2301      	movs	r3, #1
}
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	bc80      	pop	{r7}
 801cfec:	4770      	bx	lr
	...

0801cff0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cff0:	b580      	push	{r7, lr}
 801cff2:	b082      	sub	sp, #8
 801cff4:	af00      	add	r7, sp, #0
 801cff6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cff8:	4b03      	ldr	r3, [pc, #12]	; (801d008 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	2001      	movs	r0, #1
 801cffe:	4798      	blx	r3
}
 801d000:	bf00      	nop
 801d002:	3708      	adds	r7, #8
 801d004:	46bd      	mov	sp, r7
 801d006:	bd80      	pop	{r7, pc}
 801d008:	20001874 	.word	0x20001874

0801d00c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d014:	4b03      	ldr	r3, [pc, #12]	; (801d024 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	2002      	movs	r0, #2
 801d01a:	4798      	blx	r3
}
 801d01c:	bf00      	nop
 801d01e:	3708      	adds	r7, #8
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}
 801d024:	20001874 	.word	0x20001874

0801d028 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d030:	4b03      	ldr	r3, [pc, #12]	; (801d040 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2040      	movs	r0, #64	; 0x40
 801d036:	4798      	blx	r3
}
 801d038:	bf00      	nop
 801d03a:	3708      	adds	r7, #8
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}
 801d040:	20001874 	.word	0x20001874

0801d044 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d044:	b580      	push	{r7, lr}
 801d046:	b082      	sub	sp, #8
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
 801d04c:	460b      	mov	r3, r1
 801d04e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d050:	78fb      	ldrb	r3, [r7, #3]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d002      	beq.n	801d05c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d056:	2b01      	cmp	r3, #1
 801d058:	d005      	beq.n	801d066 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d05a:	e00a      	b.n	801d072 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d05c:	4b07      	ldr	r3, [pc, #28]	; (801d07c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	2080      	movs	r0, #128	; 0x80
 801d062:	4798      	blx	r3
            break;
 801d064:	e005      	b.n	801d072 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d066:	4b05      	ldr	r3, [pc, #20]	; (801d07c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d06e:	4798      	blx	r3
            break;
 801d070:	bf00      	nop
    }
}
 801d072:	bf00      	nop
 801d074:	3708      	adds	r7, #8
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	bf00      	nop
 801d07c:	20001874 	.word	0x20001874

0801d080 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b082      	sub	sp, #8
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d088:	4b04      	ldr	r3, [pc, #16]	; (801d09c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d090:	4798      	blx	r3
}
 801d092:	bf00      	nop
 801d094:	3708      	adds	r7, #8
 801d096:	46bd      	mov	sp, r7
 801d098:	bd80      	pop	{r7, pc}
 801d09a:	bf00      	nop
 801d09c:	20001874 	.word	0x20001874

0801d0a0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b082      	sub	sp, #8
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d0a8:	4b03      	ldr	r3, [pc, #12]	; (801d0b8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	2020      	movs	r0, #32
 801d0ae:	4798      	blx	r3
}
 801d0b0:	bf00      	nop
 801d0b2:	3708      	adds	r7, #8
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bd80      	pop	{r7, pc}
 801d0b8:	20001874 	.word	0x20001874

0801d0bc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b082      	sub	sp, #8
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d0c4:	4b03      	ldr	r3, [pc, #12]	; (801d0d4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	2004      	movs	r0, #4
 801d0ca:	4798      	blx	r3
}
 801d0cc:	bf00      	nop
 801d0ce:	3708      	adds	r7, #8
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}
 801d0d4:	20001874 	.word	0x20001874

0801d0d8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b082      	sub	sp, #8
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d0e0:	4b03      	ldr	r3, [pc, #12]	; (801d0f0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	2008      	movs	r0, #8
 801d0e6:	4798      	blx	r3
}
 801d0e8:	bf00      	nop
 801d0ea:	3708      	adds	r7, #8
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	bd80      	pop	{r7, pc}
 801d0f0:	20001874 	.word	0x20001874

0801d0f4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b082      	sub	sp, #8
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d0fc:	4b03      	ldr	r3, [pc, #12]	; (801d10c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	2010      	movs	r0, #16
 801d102:	4798      	blx	r3
}
 801d104:	bf00      	nop
 801d106:	3708      	adds	r7, #8
 801d108:	46bd      	mov	sp, r7
 801d10a:	bd80      	pop	{r7, pc}
 801d10c:	20001874 	.word	0x20001874

0801d110 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b082      	sub	sp, #8
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d118:	4b04      	ldr	r3, [pc, #16]	; (801d12c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d120:	4798      	blx	r3
}
 801d122:	bf00      	nop
 801d124:	3708      	adds	r7, #8
 801d126:	46bd      	mov	sp, r7
 801d128:	bd80      	pop	{r7, pc}
 801d12a:	bf00      	nop
 801d12c:	20001874 	.word	0x20001874

0801d130 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b084      	sub	sp, #16
 801d134:	af00      	add	r7, sp, #0
 801d136:	4603      	mov	r3, r0
 801d138:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d13a:	f7f0 fe28 	bl	800dd8e <RBI_IsDCDC>
 801d13e:	4603      	mov	r3, r0
 801d140:	2b01      	cmp	r3, #1
 801d142:	d112      	bne.n	801d16a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d144:	f640 1023 	movw	r0, #2339	; 0x923
 801d148:	f7ff fe0e 	bl	801cd68 <SUBGRF_ReadRegister>
 801d14c:	4603      	mov	r3, r0
 801d14e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d150:	7bfb      	ldrb	r3, [r7, #15]
 801d152:	f023 0306 	bic.w	r3, r3, #6
 801d156:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d158:	7bfa      	ldrb	r2, [r7, #15]
 801d15a:	79fb      	ldrb	r3, [r7, #7]
 801d15c:	4313      	orrs	r3, r2
 801d15e:	b2db      	uxtb	r3, r3
 801d160:	4619      	mov	r1, r3
 801d162:	f640 1023 	movw	r0, #2339	; 0x923
 801d166:	f7ff fdeb 	bl	801cd40 <SUBGRF_WriteRegister>
  }
}
 801d16a:	bf00      	nop
 801d16c:	3710      	adds	r7, #16
 801d16e:	46bd      	mov	sp, r7
 801d170:	bd80      	pop	{r7, pc}
	...

0801d174 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d174:	b480      	push	{r7}
 801d176:	b085      	sub	sp, #20
 801d178:	af00      	add	r7, sp, #0
 801d17a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d101      	bne.n	801d186 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d182:	231f      	movs	r3, #31
 801d184:	e016      	b.n	801d1b4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d186:	2300      	movs	r3, #0
 801d188:	73fb      	strb	r3, [r7, #15]
 801d18a:	e00f      	b.n	801d1ac <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d18c:	7bfb      	ldrb	r3, [r7, #15]
 801d18e:	4a0c      	ldr	r2, [pc, #48]	; (801d1c0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d194:	687a      	ldr	r2, [r7, #4]
 801d196:	429a      	cmp	r2, r3
 801d198:	d205      	bcs.n	801d1a6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d19a:	7bfb      	ldrb	r3, [r7, #15]
 801d19c:	4a08      	ldr	r2, [pc, #32]	; (801d1c0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d19e:	00db      	lsls	r3, r3, #3
 801d1a0:	4413      	add	r3, r2
 801d1a2:	791b      	ldrb	r3, [r3, #4]
 801d1a4:	e006      	b.n	801d1b4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d1a6:	7bfb      	ldrb	r3, [r7, #15]
 801d1a8:	3301      	adds	r3, #1
 801d1aa:	73fb      	strb	r3, [r7, #15]
 801d1ac:	7bfb      	ldrb	r3, [r7, #15]
 801d1ae:	2b15      	cmp	r3, #21
 801d1b0:	d9ec      	bls.n	801d18c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d1b2:	e7fe      	b.n	801d1b2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	3714      	adds	r7, #20
 801d1b8:	46bd      	mov	sp, r7
 801d1ba:	bc80      	pop	{r7}
 801d1bc:	4770      	bx	lr
 801d1be:	bf00      	nop
 801d1c0:	0801faa8 	.word	0x0801faa8

0801d1c4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b08a      	sub	sp, #40	; 0x28
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	6078      	str	r0, [r7, #4]
 801d1cc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d1ce:	4b35      	ldr	r3, [pc, #212]	; (801d2a4 <SUBGRF_GetCFO+0xe0>)
 801d1d0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d1d2:	f640 0007 	movw	r0, #2055	; 0x807
 801d1d6:	f7ff fdc7 	bl	801cd68 <SUBGRF_ReadRegister>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d1de:	7ffb      	ldrb	r3, [r7, #31]
 801d1e0:	08db      	lsrs	r3, r3, #3
 801d1e2:	b2db      	uxtb	r3, r3
 801d1e4:	f003 0303 	and.w	r3, r3, #3
 801d1e8:	3328      	adds	r3, #40	; 0x28
 801d1ea:	443b      	add	r3, r7
 801d1ec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1f0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1f2:	7ffb      	ldrb	r3, [r7, #31]
 801d1f4:	f003 0307 	and.w	r3, r3, #7
 801d1f8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d1fa:	7fba      	ldrb	r2, [r7, #30]
 801d1fc:	7f7b      	ldrb	r3, [r7, #29]
 801d1fe:	3301      	adds	r3, #1
 801d200:	fa02 f303 	lsl.w	r3, r2, r3
 801d204:	461a      	mov	r2, r3
 801d206:	4b28      	ldr	r3, [pc, #160]	; (801d2a8 <SUBGRF_GetCFO+0xe4>)
 801d208:	fbb3 f3f2 	udiv	r3, r3, r2
 801d20c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d20e:	69ba      	ldr	r2, [r7, #24]
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	fbb2 f3f3 	udiv	r3, r2, r3
 801d216:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d218:	2301      	movs	r3, #1
 801d21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d222:	697a      	ldr	r2, [r7, #20]
 801d224:	fb02 f303 	mul.w	r3, r2, r3
 801d228:	2b07      	cmp	r3, #7
 801d22a:	d802      	bhi.n	801d232 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d22c:	2302      	movs	r3, #2
 801d22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d236:	697a      	ldr	r2, [r7, #20]
 801d238:	fb02 f303 	mul.w	r3, r2, r3
 801d23c:	2b03      	cmp	r3, #3
 801d23e:	d802      	bhi.n	801d246 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d240:	2304      	movs	r3, #4
 801d242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d246:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d24a:	69bb      	ldr	r3, [r7, #24]
 801d24c:	fb02 f303 	mul.w	r3, r2, r3
 801d250:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d252:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d256:	f7ff fd87 	bl	801cd68 <SUBGRF_ReadRegister>
 801d25a:	4603      	mov	r3, r0
 801d25c:	021b      	lsls	r3, r3, #8
 801d25e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d262:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d264:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d268:	f7ff fd7e 	bl	801cd68 <SUBGRF_ReadRegister>
 801d26c:	4603      	mov	r3, r0
 801d26e:	461a      	mov	r2, r3
 801d270:	6a3b      	ldr	r3, [r7, #32]
 801d272:	4313      	orrs	r3, r2
 801d274:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d276:	6a3b      	ldr	r3, [r7, #32]
 801d278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d005      	beq.n	801d28c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d280:	6a3b      	ldr	r3, [r7, #32]
 801d282:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d286:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d28a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d28c:	693b      	ldr	r3, [r7, #16]
 801d28e:	095b      	lsrs	r3, r3, #5
 801d290:	6a3a      	ldr	r2, [r7, #32]
 801d292:	fb02 f303 	mul.w	r3, r2, r3
 801d296:	11da      	asrs	r2, r3, #7
 801d298:	683b      	ldr	r3, [r7, #0]
 801d29a:	601a      	str	r2, [r3, #0]
}
 801d29c:	bf00      	nop
 801d29e:	3728      	adds	r7, #40	; 0x28
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}
 801d2a4:	0c0a0804 	.word	0x0c0a0804
 801d2a8:	01e84800 	.word	0x01e84800

0801d2ac <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d2ac:	b480      	push	{r7}
 801d2ae:	b087      	sub	sp, #28
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	60b9      	str	r1, [r7, #8]
 801d2b6:	607a      	str	r2, [r7, #4]
 801d2b8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d2be:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2c4:	697b      	ldr	r3, [r7, #20]
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	371c      	adds	r7, #28
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bc80      	pop	{r7}
 801d2ce:	4770      	bx	lr

0801d2d0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d2d0:	b480      	push	{r7}
 801d2d2:	b087      	sub	sp, #28
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	60b9      	str	r1, [r7, #8]
 801d2da:	607a      	str	r2, [r7, #4]
 801d2dc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d2de:	2300      	movs	r3, #0
 801d2e0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d2e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d2e6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2e8:	697b      	ldr	r3, [r7, #20]
}
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	371c      	adds	r7, #28
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	bc80      	pop	{r7}
 801d2f2:	4770      	bx	lr

0801d2f4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d2f4:	b480      	push	{r7}
 801d2f6:	b085      	sub	sp, #20
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	60f8      	str	r0, [r7, #12]
 801d2fc:	60b9      	str	r1, [r7, #8]
 801d2fe:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d300:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d304:	4618      	mov	r0, r3
 801d306:	3714      	adds	r7, #20
 801d308:	46bd      	mov	sp, r7
 801d30a:	bc80      	pop	{r7}
 801d30c:	4770      	bx	lr

0801d30e <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d30e:	b480      	push	{r7}
 801d310:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d312:	bf00      	nop
 801d314:	46bd      	mov	sp, r7
 801d316:	bc80      	pop	{r7}
 801d318:	4770      	bx	lr

0801d31a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d31a:	b480      	push	{r7}
 801d31c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d31e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d320:	4618      	mov	r0, r3
 801d322:	46bd      	mov	sp, r7
 801d324:	bc80      	pop	{r7}
 801d326:	4770      	bx	lr

0801d328 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d328:	b480      	push	{r7}
 801d32a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d32c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d32e:	4618      	mov	r0, r3
 801d330:	46bd      	mov	sp, r7
 801d332:	bc80      	pop	{r7}
 801d334:	4770      	bx	lr

0801d336 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d336:	b480      	push	{r7}
 801d338:	b083      	sub	sp, #12
 801d33a:	af00      	add	r7, sp, #0
 801d33c:	4603      	mov	r3, r0
 801d33e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d340:	bf00      	nop
 801d342:	370c      	adds	r7, #12
 801d344:	46bd      	mov	sp, r7
 801d346:	bc80      	pop	{r7}
 801d348:	4770      	bx	lr

0801d34a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d34a:	b480      	push	{r7}
 801d34c:	b087      	sub	sp, #28
 801d34e:	af00      	add	r7, sp, #0
 801d350:	60f8      	str	r0, [r7, #12]
 801d352:	460b      	mov	r3, r1
 801d354:	607a      	str	r2, [r7, #4]
 801d356:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d358:	f04f 33ff 	mov.w	r3, #4294967295
 801d35c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d35e:	697b      	ldr	r3, [r7, #20]
}
 801d360:	4618      	mov	r0, r3
 801d362:	371c      	adds	r7, #28
 801d364:	46bd      	mov	sp, r7
 801d366:	bc80      	pop	{r7}
 801d368:	4770      	bx	lr

0801d36a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d36a:	b480      	push	{r7}
 801d36c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d36e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d372:	4618      	mov	r0, r3
 801d374:	46bd      	mov	sp, r7
 801d376:	bc80      	pop	{r7}
 801d378:	4770      	bx	lr

0801d37a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d37a:	b480      	push	{r7}
 801d37c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d37e:	bf00      	nop
 801d380:	46bd      	mov	sp, r7
 801d382:	bc80      	pop	{r7}
 801d384:	4770      	bx	lr

0801d386 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d386:	b480      	push	{r7}
 801d388:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d38a:	bf00      	nop
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bc80      	pop	{r7}
 801d390:	4770      	bx	lr

0801d392 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d392:	b480      	push	{r7}
 801d394:	b083      	sub	sp, #12
 801d396:	af00      	add	r7, sp, #0
 801d398:	4603      	mov	r3, r0
 801d39a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d39c:	bf00      	nop
 801d39e:	370c      	adds	r7, #12
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bc80      	pop	{r7}
 801d3a4:	4770      	bx	lr
	...

0801d3a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d3a8:	b480      	push	{r7}
 801d3aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d3ac:	4b04      	ldr	r3, [pc, #16]	; (801d3c0 <UTIL_LPM_Init+0x18>)
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d3b2:	4b04      	ldr	r3, [pc, #16]	; (801d3c4 <UTIL_LPM_Init+0x1c>)
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d3b8:	bf00      	nop
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	bc80      	pop	{r7}
 801d3be:	4770      	bx	lr
 801d3c0:	20001878 	.word	0x20001878
 801d3c4:	2000187c 	.word	0x2000187c

0801d3c8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3c8:	b480      	push	{r7}
 801d3ca:	b087      	sub	sp, #28
 801d3cc:	af00      	add	r7, sp, #0
 801d3ce:	6078      	str	r0, [r7, #4]
 801d3d0:	460b      	mov	r3, r1
 801d3d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3d4:	f3ef 8310 	mrs	r3, PRIMASK
 801d3d8:	613b      	str	r3, [r7, #16]
  return(result);
 801d3da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3de:	b672      	cpsid	i
}
 801d3e0:	bf00      	nop
  
  switch( state )
 801d3e2:	78fb      	ldrb	r3, [r7, #3]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d008      	beq.n	801d3fa <UTIL_LPM_SetStopMode+0x32>
 801d3e8:	2b01      	cmp	r3, #1
 801d3ea:	d10e      	bne.n	801d40a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3ec:	4b0d      	ldr	r3, [pc, #52]	; (801d424 <UTIL_LPM_SetStopMode+0x5c>)
 801d3ee:	681a      	ldr	r2, [r3, #0]
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	4313      	orrs	r3, r2
 801d3f4:	4a0b      	ldr	r2, [pc, #44]	; (801d424 <UTIL_LPM_SetStopMode+0x5c>)
 801d3f6:	6013      	str	r3, [r2, #0]
      break;
 801d3f8:	e008      	b.n	801d40c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	43da      	mvns	r2, r3
 801d3fe:	4b09      	ldr	r3, [pc, #36]	; (801d424 <UTIL_LPM_SetStopMode+0x5c>)
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	4013      	ands	r3, r2
 801d404:	4a07      	ldr	r2, [pc, #28]	; (801d424 <UTIL_LPM_SetStopMode+0x5c>)
 801d406:	6013      	str	r3, [r2, #0]
      break;
 801d408:	e000      	b.n	801d40c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d40a:	bf00      	nop
 801d40c:	697b      	ldr	r3, [r7, #20]
 801d40e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	f383 8810 	msr	PRIMASK, r3
}
 801d416:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d418:	bf00      	nop
 801d41a:	371c      	adds	r7, #28
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bc80      	pop	{r7}
 801d420:	4770      	bx	lr
 801d422:	bf00      	nop
 801d424:	20001878 	.word	0x20001878

0801d428 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d428:	b480      	push	{r7}
 801d42a:	b087      	sub	sp, #28
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
 801d430:	460b      	mov	r3, r1
 801d432:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d434:	f3ef 8310 	mrs	r3, PRIMASK
 801d438:	613b      	str	r3, [r7, #16]
  return(result);
 801d43a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d43c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d43e:	b672      	cpsid	i
}
 801d440:	bf00      	nop
  
  switch(state)
 801d442:	78fb      	ldrb	r3, [r7, #3]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d008      	beq.n	801d45a <UTIL_LPM_SetOffMode+0x32>
 801d448:	2b01      	cmp	r3, #1
 801d44a:	d10e      	bne.n	801d46a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d44c:	4b0d      	ldr	r3, [pc, #52]	; (801d484 <UTIL_LPM_SetOffMode+0x5c>)
 801d44e:	681a      	ldr	r2, [r3, #0]
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	4313      	orrs	r3, r2
 801d454:	4a0b      	ldr	r2, [pc, #44]	; (801d484 <UTIL_LPM_SetOffMode+0x5c>)
 801d456:	6013      	str	r3, [r2, #0]
      break;
 801d458:	e008      	b.n	801d46c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	43da      	mvns	r2, r3
 801d45e:	4b09      	ldr	r3, [pc, #36]	; (801d484 <UTIL_LPM_SetOffMode+0x5c>)
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	4013      	ands	r3, r2
 801d464:	4a07      	ldr	r2, [pc, #28]	; (801d484 <UTIL_LPM_SetOffMode+0x5c>)
 801d466:	6013      	str	r3, [r2, #0]
      break;
 801d468:	e000      	b.n	801d46c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d46a:	bf00      	nop
 801d46c:	697b      	ldr	r3, [r7, #20]
 801d46e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	f383 8810 	msr	PRIMASK, r3
}
 801d476:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d478:	bf00      	nop
 801d47a:	371c      	adds	r7, #28
 801d47c:	46bd      	mov	sp, r7
 801d47e:	bc80      	pop	{r7}
 801d480:	4770      	bx	lr
 801d482:	bf00      	nop
 801d484:	2000187c 	.word	0x2000187c

0801d488 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d488:	b580      	push	{r7, lr}
 801d48a:	b084      	sub	sp, #16
 801d48c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d48e:	f3ef 8310 	mrs	r3, PRIMASK
 801d492:	60bb      	str	r3, [r7, #8]
  return(result);
 801d494:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d496:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d498:	b672      	cpsid	i
}
 801d49a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d49c:	4b12      	ldr	r3, [pc, #72]	; (801d4e8 <UTIL_LPM_EnterLowPower+0x60>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d006      	beq.n	801d4b2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d4a4:	4b11      	ldr	r3, [pc, #68]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d4aa:	4b10      	ldr	r3, [pc, #64]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	4798      	blx	r3
 801d4b0:	e010      	b.n	801d4d4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d4b2:	4b0f      	ldr	r3, [pc, #60]	; (801d4f0 <UTIL_LPM_EnterLowPower+0x68>)
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d006      	beq.n	801d4c8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d4ba:	4b0c      	ldr	r3, [pc, #48]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4bc:	689b      	ldr	r3, [r3, #8]
 801d4be:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d4c0:	4b0a      	ldr	r3, [pc, #40]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4c2:	68db      	ldr	r3, [r3, #12]
 801d4c4:	4798      	blx	r3
 801d4c6:	e005      	b.n	801d4d4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d4c8:	4b08      	ldr	r3, [pc, #32]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4ca:	691b      	ldr	r3, [r3, #16]
 801d4cc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d4ce:	4b07      	ldr	r3, [pc, #28]	; (801d4ec <UTIL_LPM_EnterLowPower+0x64>)
 801d4d0:	695b      	ldr	r3, [r3, #20]
 801d4d2:	4798      	blx	r3
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	f383 8810 	msr	PRIMASK, r3
}
 801d4de:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d4e0:	bf00      	nop
 801d4e2:	3710      	adds	r7, #16
 801d4e4:	46bd      	mov	sp, r7
 801d4e6:	bd80      	pop	{r7, pc}
 801d4e8:	20001878 	.word	0x20001878
 801d4ec:	0801f51c 	.word	0x0801f51c
 801d4f0:	2000187c 	.word	0x2000187c

0801d4f4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4f4:	b480      	push	{r7}
 801d4f6:	b087      	sub	sp, #28
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	60f8      	str	r0, [r7, #12]
 801d4fc:	60b9      	str	r1, [r7, #8]
 801d4fe:	4613      	mov	r3, r2
 801d500:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d506:	68bb      	ldr	r3, [r7, #8]
 801d508:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d50a:	e007      	b.n	801d51c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d50c:	693a      	ldr	r2, [r7, #16]
 801d50e:	1c53      	adds	r3, r2, #1
 801d510:	613b      	str	r3, [r7, #16]
 801d512:	697b      	ldr	r3, [r7, #20]
 801d514:	1c59      	adds	r1, r3, #1
 801d516:	6179      	str	r1, [r7, #20]
 801d518:	7812      	ldrb	r2, [r2, #0]
 801d51a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d51c:	88fb      	ldrh	r3, [r7, #6]
 801d51e:	1e5a      	subs	r2, r3, #1
 801d520:	80fa      	strh	r2, [r7, #6]
 801d522:	2b00      	cmp	r3, #0
 801d524:	d1f2      	bne.n	801d50c <UTIL_MEM_cpy_8+0x18>
    }
}
 801d526:	bf00      	nop
 801d528:	bf00      	nop
 801d52a:	371c      	adds	r7, #28
 801d52c:	46bd      	mov	sp, r7
 801d52e:	bc80      	pop	{r7}
 801d530:	4770      	bx	lr

0801d532 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d532:	b480      	push	{r7}
 801d534:	b085      	sub	sp, #20
 801d536:	af00      	add	r7, sp, #0
 801d538:	6078      	str	r0, [r7, #4]
 801d53a:	460b      	mov	r3, r1
 801d53c:	70fb      	strb	r3, [r7, #3]
 801d53e:	4613      	mov	r3, r2
 801d540:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d546:	e004      	b.n	801d552 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	1c5a      	adds	r2, r3, #1
 801d54c:	60fa      	str	r2, [r7, #12]
 801d54e:	78fa      	ldrb	r2, [r7, #3]
 801d550:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d552:	883b      	ldrh	r3, [r7, #0]
 801d554:	1e5a      	subs	r2, r3, #1
 801d556:	803a      	strh	r2, [r7, #0]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d1f5      	bne.n	801d548 <UTIL_MEM_set_8+0x16>
  }
}
 801d55c:	bf00      	nop
 801d55e:	bf00      	nop
 801d560:	3714      	adds	r7, #20
 801d562:	46bd      	mov	sp, r7
 801d564:	bc80      	pop	{r7}
 801d566:	4770      	bx	lr

0801d568 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d568:	b082      	sub	sp, #8
 801d56a:	b480      	push	{r7}
 801d56c:	b087      	sub	sp, #28
 801d56e:	af00      	add	r7, sp, #0
 801d570:	60f8      	str	r0, [r7, #12]
 801d572:	1d38      	adds	r0, r7, #4
 801d574:	e880 0006 	stmia.w	r0, {r1, r2}
 801d578:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d57a:	2300      	movs	r3, #0
 801d57c:	613b      	str	r3, [r7, #16]
 801d57e:	2300      	movs	r3, #0
 801d580:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d582:	687a      	ldr	r2, [r7, #4]
 801d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d586:	4413      	add	r3, r2
 801d588:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d58a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d58e:	b29a      	uxth	r2, r3
 801d590:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d594:	b29b      	uxth	r3, r3
 801d596:	4413      	add	r3, r2
 801d598:	b29b      	uxth	r3, r3
 801d59a:	b21b      	sxth	r3, r3
 801d59c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d59e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d5a6:	db0a      	blt.n	801d5be <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d5a8:	693b      	ldr	r3, [r7, #16]
 801d5aa:	3301      	adds	r3, #1
 801d5ac:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d5ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d5b8:	b29b      	uxth	r3, r3
 801d5ba:	b21b      	sxth	r3, r3
 801d5bc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	461a      	mov	r2, r3
 801d5c2:	f107 0310 	add.w	r3, r7, #16
 801d5c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d5ce:	68f8      	ldr	r0, [r7, #12]
 801d5d0:	371c      	adds	r7, #28
 801d5d2:	46bd      	mov	sp, r7
 801d5d4:	bc80      	pop	{r7}
 801d5d6:	b002      	add	sp, #8
 801d5d8:	4770      	bx	lr

0801d5da <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d5da:	b082      	sub	sp, #8
 801d5dc:	b480      	push	{r7}
 801d5de:	b087      	sub	sp, #28
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	60f8      	str	r0, [r7, #12]
 801d5e4:	1d38      	adds	r0, r7, #4
 801d5e6:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5ea:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	613b      	str	r3, [r7, #16]
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5f4:	687a      	ldr	r2, [r7, #4]
 801d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5f8:	1ad3      	subs	r3, r2, r3
 801d5fa:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d600:	b29a      	uxth	r2, r3
 801d602:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d606:	b29b      	uxth	r3, r3
 801d608:	1ad3      	subs	r3, r2, r3
 801d60a:	b29b      	uxth	r3, r3
 801d60c:	b21b      	sxth	r3, r3
 801d60e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d614:	2b00      	cmp	r3, #0
 801d616:	da0a      	bge.n	801d62e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d618:	693b      	ldr	r3, [r7, #16]
 801d61a:	3b01      	subs	r3, #1
 801d61c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d61e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d622:	b29b      	uxth	r3, r3
 801d624:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d628:	b29b      	uxth	r3, r3
 801d62a:	b21b      	sxth	r3, r3
 801d62c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	461a      	mov	r2, r3
 801d632:	f107 0310 	add.w	r3, r7, #16
 801d636:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d63a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d63e:	68f8      	ldr	r0, [r7, #12]
 801d640:	371c      	adds	r7, #28
 801d642:	46bd      	mov	sp, r7
 801d644:	bc80      	pop	{r7}
 801d646:	b002      	add	sp, #8
 801d648:	4770      	bx	lr
	...

0801d64c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d64c:	b580      	push	{r7, lr}
 801d64e:	b088      	sub	sp, #32
 801d650:	af02      	add	r7, sp, #8
 801d652:	463b      	mov	r3, r7
 801d654:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d658:	2300      	movs	r3, #0
 801d65a:	60bb      	str	r3, [r7, #8]
 801d65c:	2300      	movs	r3, #0
 801d65e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d660:	4b10      	ldr	r3, [pc, #64]	; (801d6a4 <SysTimeSet+0x58>)
 801d662:	691b      	ldr	r3, [r3, #16]
 801d664:	f107 0208 	add.w	r2, r7, #8
 801d668:	3204      	adds	r2, #4
 801d66a:	4610      	mov	r0, r2
 801d66c:	4798      	blx	r3
 801d66e:	4603      	mov	r3, r0
 801d670:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d672:	f107 0010 	add.w	r0, r7, #16
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	9300      	str	r3, [sp, #0]
 801d67a:	68bb      	ldr	r3, [r7, #8]
 801d67c:	463a      	mov	r2, r7
 801d67e:	ca06      	ldmia	r2, {r1, r2}
 801d680:	f7ff ffab 	bl	801d5da <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d684:	4b07      	ldr	r3, [pc, #28]	; (801d6a4 <SysTimeSet+0x58>)
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	693a      	ldr	r2, [r7, #16]
 801d68a:	4610      	mov	r0, r2
 801d68c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d68e:	4b05      	ldr	r3, [pc, #20]	; (801d6a4 <SysTimeSet+0x58>)
 801d690:	689b      	ldr	r3, [r3, #8]
 801d692:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d696:	4610      	mov	r0, r2
 801d698:	4798      	blx	r3
}
 801d69a:	bf00      	nop
 801d69c:	3718      	adds	r7, #24
 801d69e:	46bd      	mov	sp, r7
 801d6a0:	bd80      	pop	{r7, pc}
 801d6a2:	bf00      	nop
 801d6a4:	0801f600 	.word	0x0801f600

0801d6a8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b08a      	sub	sp, #40	; 0x28
 801d6ac:	af02      	add	r7, sp, #8
 801d6ae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	61bb      	str	r3, [r7, #24]
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	613b      	str	r3, [r7, #16]
 801d6bc:	2300      	movs	r3, #0
 801d6be:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6c0:	4b14      	ldr	r3, [pc, #80]	; (801d714 <SysTimeGet+0x6c>)
 801d6c2:	691b      	ldr	r3, [r3, #16]
 801d6c4:	f107 0218 	add.w	r2, r7, #24
 801d6c8:	3204      	adds	r2, #4
 801d6ca:	4610      	mov	r0, r2
 801d6cc:	4798      	blx	r3
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6d2:	4b10      	ldr	r3, [pc, #64]	; (801d714 <SysTimeGet+0x6c>)
 801d6d4:	68db      	ldr	r3, [r3, #12]
 801d6d6:	4798      	blx	r3
 801d6d8:	4603      	mov	r3, r0
 801d6da:	b21b      	sxth	r3, r3
 801d6dc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6de:	4b0d      	ldr	r3, [pc, #52]	; (801d714 <SysTimeGet+0x6c>)
 801d6e0:	685b      	ldr	r3, [r3, #4]
 801d6e2:	4798      	blx	r3
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6e8:	f107 0010 	add.w	r0, r7, #16
 801d6ec:	69fb      	ldr	r3, [r7, #28]
 801d6ee:	9300      	str	r3, [sp, #0]
 801d6f0:	69bb      	ldr	r3, [r7, #24]
 801d6f2:	f107 0208 	add.w	r2, r7, #8
 801d6f6:	ca06      	ldmia	r2, {r1, r2}
 801d6f8:	f7ff ff36 	bl	801d568 <SysTimeAdd>

  return sysTime;
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	461a      	mov	r2, r3
 801d700:	f107 0310 	add.w	r3, r7, #16
 801d704:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d708:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d70c:	6878      	ldr	r0, [r7, #4]
 801d70e:	3720      	adds	r7, #32
 801d710:	46bd      	mov	sp, r7
 801d712:	bd80      	pop	{r7, pc}
 801d714:	0801f600 	.word	0x0801f600

0801d718 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d718:	b580      	push	{r7, lr}
 801d71a:	b084      	sub	sp, #16
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d720:	2300      	movs	r3, #0
 801d722:	60bb      	str	r3, [r7, #8]
 801d724:	2300      	movs	r3, #0
 801d726:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d728:	4b0a      	ldr	r3, [pc, #40]	; (801d754 <SysTimeGetMcuTime+0x3c>)
 801d72a:	691b      	ldr	r3, [r3, #16]
 801d72c:	f107 0208 	add.w	r2, r7, #8
 801d730:	3204      	adds	r2, #4
 801d732:	4610      	mov	r0, r2
 801d734:	4798      	blx	r3
 801d736:	4603      	mov	r3, r0
 801d738:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	461a      	mov	r2, r3
 801d73e:	f107 0308 	add.w	r3, r7, #8
 801d742:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d746:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d74a:	6878      	ldr	r0, [r7, #4]
 801d74c:	3710      	adds	r7, #16
 801d74e:	46bd      	mov	sp, r7
 801d750:	bd80      	pop	{r7, pc}
 801d752:	bf00      	nop
 801d754:	0801f600 	.word	0x0801f600

0801d758 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d758:	b580      	push	{r7, lr}
 801d75a:	b088      	sub	sp, #32
 801d75c:	af02      	add	r7, sp, #8
 801d75e:	463b      	mov	r3, r7
 801d760:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d764:	4b0f      	ldr	r3, [pc, #60]	; (801d7a4 <SysTimeToMs+0x4c>)
 801d766:	68db      	ldr	r3, [r3, #12]
 801d768:	4798      	blx	r3
 801d76a:	4603      	mov	r3, r0
 801d76c:	b21b      	sxth	r3, r3
 801d76e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d770:	4b0c      	ldr	r3, [pc, #48]	; (801d7a4 <SysTimeToMs+0x4c>)
 801d772:	685b      	ldr	r3, [r3, #4]
 801d774:	4798      	blx	r3
 801d776:	4603      	mov	r3, r0
 801d778:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d77a:	f107 0008 	add.w	r0, r7, #8
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	9300      	str	r3, [sp, #0]
 801d782:	693b      	ldr	r3, [r7, #16]
 801d784:	463a      	mov	r2, r7
 801d786:	ca06      	ldmia	r2, {r1, r2}
 801d788:	f7ff ff27 	bl	801d5da <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d78c:	68bb      	ldr	r3, [r7, #8]
 801d78e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d792:	fb02 f303 	mul.w	r3, r2, r3
 801d796:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d79a:	4413      	add	r3, r2
}
 801d79c:	4618      	mov	r0, r3
 801d79e:	3718      	adds	r7, #24
 801d7a0:	46bd      	mov	sp, r7
 801d7a2:	bd80      	pop	{r7, pc}
 801d7a4:	0801f600 	.word	0x0801f600

0801d7a8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d7a8:	b580      	push	{r7, lr}
 801d7aa:	b08a      	sub	sp, #40	; 0x28
 801d7ac:	af02      	add	r7, sp, #8
 801d7ae:	6078      	str	r0, [r7, #4]
 801d7b0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d7b2:	683b      	ldr	r3, [r7, #0]
 801d7b4:	4a19      	ldr	r2, [pc, #100]	; (801d81c <SysTimeFromMs+0x74>)
 801d7b6:	fba2 2303 	umull	r2, r3, r2, r3
 801d7ba:	099b      	lsrs	r3, r3, #6
 801d7bc:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d7be:	69fb      	ldr	r3, [r7, #28]
 801d7c0:	617b      	str	r3, [r7, #20]
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	b29a      	uxth	r2, r3
 801d7c6:	69fb      	ldr	r3, [r7, #28]
 801d7c8:	b29b      	uxth	r3, r3
 801d7ca:	4619      	mov	r1, r3
 801d7cc:	0149      	lsls	r1, r1, #5
 801d7ce:	1ac9      	subs	r1, r1, r3
 801d7d0:	0089      	lsls	r1, r1, #2
 801d7d2:	440b      	add	r3, r1
 801d7d4:	00db      	lsls	r3, r3, #3
 801d7d6:	b29b      	uxth	r3, r3
 801d7d8:	1ad3      	subs	r3, r2, r3
 801d7da:	b29b      	uxth	r3, r3
 801d7dc:	b21b      	sxth	r3, r3
 801d7de:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d7e0:	f107 030c 	add.w	r3, r7, #12
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	601a      	str	r2, [r3, #0]
 801d7e8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7ea:	4b0d      	ldr	r3, [pc, #52]	; (801d820 <SysTimeFromMs+0x78>)
 801d7ec:	68db      	ldr	r3, [r3, #12]
 801d7ee:	4798      	blx	r3
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	b21b      	sxth	r3, r3
 801d7f4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7f6:	4b0a      	ldr	r3, [pc, #40]	; (801d820 <SysTimeFromMs+0x78>)
 801d7f8:	685b      	ldr	r3, [r3, #4]
 801d7fa:	4798      	blx	r3
 801d7fc:	4603      	mov	r3, r0
 801d7fe:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d800:	6878      	ldr	r0, [r7, #4]
 801d802:	693b      	ldr	r3, [r7, #16]
 801d804:	9300      	str	r3, [sp, #0]
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	f107 0214 	add.w	r2, r7, #20
 801d80c:	ca06      	ldmia	r2, {r1, r2}
 801d80e:	f7ff feab 	bl	801d568 <SysTimeAdd>
}
 801d812:	6878      	ldr	r0, [r7, #4]
 801d814:	3720      	adds	r7, #32
 801d816:	46bd      	mov	sp, r7
 801d818:	bd80      	pop	{r7, pc}
 801d81a:	bf00      	nop
 801d81c:	10624dd3 	.word	0x10624dd3
 801d820:	0801f600 	.word	0x0801f600

0801d824 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d824:	b480      	push	{r7}
 801d826:	b085      	sub	sp, #20
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d82c:	2300      	movs	r3, #0
 801d82e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d830:	e00e      	b.n	801d850 <ee_skip_atoi+0x2c>
 801d832:	68fa      	ldr	r2, [r7, #12]
 801d834:	4613      	mov	r3, r2
 801d836:	009b      	lsls	r3, r3, #2
 801d838:	4413      	add	r3, r2
 801d83a:	005b      	lsls	r3, r3, #1
 801d83c:	4618      	mov	r0, r3
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	1c59      	adds	r1, r3, #1
 801d844:	687a      	ldr	r2, [r7, #4]
 801d846:	6011      	str	r1, [r2, #0]
 801d848:	781b      	ldrb	r3, [r3, #0]
 801d84a:	4403      	add	r3, r0
 801d84c:	3b30      	subs	r3, #48	; 0x30
 801d84e:	60fb      	str	r3, [r7, #12]
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	2b2f      	cmp	r3, #47	; 0x2f
 801d858:	d904      	bls.n	801d864 <ee_skip_atoi+0x40>
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	781b      	ldrb	r3, [r3, #0]
 801d860:	2b39      	cmp	r3, #57	; 0x39
 801d862:	d9e6      	bls.n	801d832 <ee_skip_atoi+0xe>
  return i;
 801d864:	68fb      	ldr	r3, [r7, #12]
}
 801d866:	4618      	mov	r0, r3
 801d868:	3714      	adds	r7, #20
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bc80      	pop	{r7}
 801d86e:	4770      	bx	lr

0801d870 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d870:	b480      	push	{r7}
 801d872:	b099      	sub	sp, #100	; 0x64
 801d874:	af00      	add	r7, sp, #0
 801d876:	60f8      	str	r0, [r7, #12]
 801d878:	60b9      	str	r1, [r7, #8]
 801d87a:	607a      	str	r2, [r7, #4]
 801d87c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d87e:	4b71      	ldr	r3, [pc, #452]	; (801da44 <ee_number+0x1d4>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d002      	beq.n	801d894 <ee_number+0x24>
 801d88e:	4b6e      	ldr	r3, [pc, #440]	; (801da48 <ee_number+0x1d8>)
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d894:	683b      	ldr	r3, [r7, #0]
 801d896:	2b01      	cmp	r3, #1
 801d898:	dd02      	ble.n	801d8a0 <ee_number+0x30>
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	2b24      	cmp	r3, #36	; 0x24
 801d89e:	dd01      	ble.n	801d8a4 <ee_number+0x34>
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	e0ca      	b.n	801da3a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d8a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8a6:	f003 0301 	and.w	r3, r3, #1
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d001      	beq.n	801d8b2 <ee_number+0x42>
 801d8ae:	2330      	movs	r3, #48	; 0x30
 801d8b0:	e000      	b.n	801d8b4 <ee_number+0x44>
 801d8b2:	2320      	movs	r3, #32
 801d8b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d8be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8c0:	f003 0302 	and.w	r3, r3, #2
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d00b      	beq.n	801d8e0 <ee_number+0x70>
  {
    if (num < 0)
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	da08      	bge.n	801d8e0 <ee_number+0x70>
    {
      sign = '-';
 801d8ce:	232d      	movs	r3, #45	; 0x2d
 801d8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	425b      	negs	r3, r3
 801d8d8:	607b      	str	r3, [r7, #4]
      size--;
 801d8da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8dc:	3b01      	subs	r3, #1
 801d8de:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d11e      	bne.n	801d928 <ee_number+0xb8>
    tmp[i++] = '0';
 801d8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8ec:	1c5a      	adds	r2, r3, #1
 801d8ee:	657a      	str	r2, [r7, #84]	; 0x54
 801d8f0:	3360      	adds	r3, #96	; 0x60
 801d8f2:	443b      	add	r3, r7
 801d8f4:	2230      	movs	r2, #48	; 0x30
 801d8f6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8fa:	e018      	b.n	801d92e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	683a      	ldr	r2, [r7, #0]
 801d900:	fbb3 f1f2 	udiv	r1, r3, r2
 801d904:	fb01 f202 	mul.w	r2, r1, r2
 801d908:	1a9b      	subs	r3, r3, r2
 801d90a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d90c:	441a      	add	r2, r3
 801d90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d910:	1c59      	adds	r1, r3, #1
 801d912:	6579      	str	r1, [r7, #84]	; 0x54
 801d914:	7812      	ldrb	r2, [r2, #0]
 801d916:	3360      	adds	r3, #96	; 0x60
 801d918:	443b      	add	r3, r7
 801d91a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d91e:	687a      	ldr	r2, [r7, #4]
 801d920:	683b      	ldr	r3, [r7, #0]
 801d922:	fbb2 f3f3 	udiv	r3, r2, r3
 801d926:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d1e6      	bne.n	801d8fc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d92e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d932:	429a      	cmp	r2, r3
 801d934:	dd01      	ble.n	801d93a <ee_number+0xca>
 801d936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d938:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d93a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d93e:	1ad3      	subs	r3, r2, r3
 801d940:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d944:	f003 0301 	and.w	r3, r3, #1
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d112      	bne.n	801d972 <ee_number+0x102>
 801d94c:	e00c      	b.n	801d968 <ee_number+0xf8>
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	1c5a      	adds	r2, r3, #1
 801d952:	60fa      	str	r2, [r7, #12]
 801d954:	2220      	movs	r2, #32
 801d956:	701a      	strb	r2, [r3, #0]
 801d958:	68bb      	ldr	r3, [r7, #8]
 801d95a:	3b01      	subs	r3, #1
 801d95c:	60bb      	str	r3, [r7, #8]
 801d95e:	68bb      	ldr	r3, [r7, #8]
 801d960:	2b00      	cmp	r3, #0
 801d962:	d101      	bne.n	801d968 <ee_number+0xf8>
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	e068      	b.n	801da3a <ee_number+0x1ca>
 801d968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d96a:	1e5a      	subs	r2, r3, #1
 801d96c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d96e:	2b00      	cmp	r3, #0
 801d970:	dced      	bgt.n	801d94e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d976:	2b00      	cmp	r3, #0
 801d978:	d01b      	beq.n	801d9b2 <ee_number+0x142>
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	1c5a      	adds	r2, r3, #1
 801d97e:	60fa      	str	r2, [r7, #12]
 801d980:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d984:	701a      	strb	r2, [r3, #0]
 801d986:	68bb      	ldr	r3, [r7, #8]
 801d988:	3b01      	subs	r3, #1
 801d98a:	60bb      	str	r3, [r7, #8]
 801d98c:	68bb      	ldr	r3, [r7, #8]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d10f      	bne.n	801d9b2 <ee_number+0x142>
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	e051      	b.n	801da3a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	1c5a      	adds	r2, r3, #1
 801d99a:	60fa      	str	r2, [r7, #12]
 801d99c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d9a0:	701a      	strb	r2, [r3, #0]
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	3b01      	subs	r3, #1
 801d9a6:	60bb      	str	r3, [r7, #8]
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d101      	bne.n	801d9b2 <ee_number+0x142>
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	e043      	b.n	801da3a <ee_number+0x1ca>
 801d9b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d9b4:	1e5a      	subs	r2, r3, #1
 801d9b6:	66ba      	str	r2, [r7, #104]	; 0x68
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	dcec      	bgt.n	801d996 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d9bc:	e00c      	b.n	801d9d8 <ee_number+0x168>
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	1c5a      	adds	r2, r3, #1
 801d9c2:	60fa      	str	r2, [r7, #12]
 801d9c4:	2230      	movs	r2, #48	; 0x30
 801d9c6:	701a      	strb	r2, [r3, #0]
 801d9c8:	68bb      	ldr	r3, [r7, #8]
 801d9ca:	3b01      	subs	r3, #1
 801d9cc:	60bb      	str	r3, [r7, #8]
 801d9ce:	68bb      	ldr	r3, [r7, #8]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d101      	bne.n	801d9d8 <ee_number+0x168>
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	e030      	b.n	801da3a <ee_number+0x1ca>
 801d9d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9da:	1e5a      	subs	r2, r3, #1
 801d9dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	dbec      	blt.n	801d9be <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9e4:	e010      	b.n	801da08 <ee_number+0x198>
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	1c5a      	adds	r2, r3, #1
 801d9ea:	60fa      	str	r2, [r7, #12]
 801d9ec:	f107 0110 	add.w	r1, r7, #16
 801d9f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9f2:	440a      	add	r2, r1
 801d9f4:	7812      	ldrb	r2, [r2, #0]
 801d9f6:	701a      	strb	r2, [r3, #0]
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	3b01      	subs	r3, #1
 801d9fc:	60bb      	str	r3, [r7, #8]
 801d9fe:	68bb      	ldr	r3, [r7, #8]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d101      	bne.n	801da08 <ee_number+0x198>
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	e018      	b.n	801da3a <ee_number+0x1ca>
 801da08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da0a:	1e5a      	subs	r2, r3, #1
 801da0c:	657a      	str	r2, [r7, #84]	; 0x54
 801da0e:	2b00      	cmp	r3, #0
 801da10:	dce9      	bgt.n	801d9e6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801da12:	e00c      	b.n	801da2e <ee_number+0x1be>
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	1c5a      	adds	r2, r3, #1
 801da18:	60fa      	str	r2, [r7, #12]
 801da1a:	2220      	movs	r2, #32
 801da1c:	701a      	strb	r2, [r3, #0]
 801da1e:	68bb      	ldr	r3, [r7, #8]
 801da20:	3b01      	subs	r3, #1
 801da22:	60bb      	str	r3, [r7, #8]
 801da24:	68bb      	ldr	r3, [r7, #8]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d101      	bne.n	801da2e <ee_number+0x1be>
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	e005      	b.n	801da3a <ee_number+0x1ca>
 801da2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da30:	1e5a      	subs	r2, r3, #1
 801da32:	66ba      	str	r2, [r7, #104]	; 0x68
 801da34:	2b00      	cmp	r3, #0
 801da36:	dced      	bgt.n	801da14 <ee_number+0x1a4>

  return str;
 801da38:	68fb      	ldr	r3, [r7, #12]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3764      	adds	r7, #100	; 0x64
 801da3e:	46bd      	mov	sp, r7
 801da40:	bc80      	pop	{r7}
 801da42:	4770      	bx	lr
 801da44:	20000150 	.word	0x20000150
 801da48:	20000154 	.word	0x20000154

0801da4c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da4c:	b580      	push	{r7, lr}
 801da4e:	b092      	sub	sp, #72	; 0x48
 801da50:	af04      	add	r7, sp, #16
 801da52:	60f8      	str	r0, [r7, #12]
 801da54:	60b9      	str	r1, [r7, #8]
 801da56:	607a      	str	r2, [r7, #4]
 801da58:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da5a:	68bb      	ldr	r3, [r7, #8]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	dc01      	bgt.n	801da64 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da60:	2300      	movs	r3, #0
 801da62:	e13e      	b.n	801dce2 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da68:	e128      	b.n	801dcbc <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	1ad2      	subs	r2, r2, r3
 801da70:	68bb      	ldr	r3, [r7, #8]
 801da72:	3b01      	subs	r3, #1
 801da74:	429a      	cmp	r2, r3
 801da76:	f280 812e 	bge.w	801dcd6 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	2b25      	cmp	r3, #37	; 0x25
 801da80:	d006      	beq.n	801da90 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da82:	687a      	ldr	r2, [r7, #4]
 801da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da86:	1c59      	adds	r1, r3, #1
 801da88:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da8a:	7812      	ldrb	r2, [r2, #0]
 801da8c:	701a      	strb	r2, [r3, #0]
      continue;
 801da8e:	e112      	b.n	801dcb6 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801da90:	2300      	movs	r3, #0
 801da92:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	3301      	adds	r3, #1
 801da98:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	781b      	ldrb	r3, [r3, #0]
 801da9e:	2b30      	cmp	r3, #48	; 0x30
 801daa0:	d103      	bne.n	801daaa <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801daa2:	6a3b      	ldr	r3, [r7, #32]
 801daa4:	f043 0301 	orr.w	r3, r3, #1
 801daa8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801daaa:	f04f 33ff 	mov.w	r3, #4294967295
 801daae:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	781b      	ldrb	r3, [r3, #0]
 801dab4:	2b2f      	cmp	r3, #47	; 0x2f
 801dab6:	d908      	bls.n	801daca <tiny_vsnprintf_like+0x7e>
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	781b      	ldrb	r3, [r3, #0]
 801dabc:	2b39      	cmp	r3, #57	; 0x39
 801dabe:	d804      	bhi.n	801daca <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801dac0:	1d3b      	adds	r3, r7, #4
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7ff feae 	bl	801d824 <ee_skip_atoi>
 801dac8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801daca:	f04f 33ff 	mov.w	r3, #4294967295
 801dace:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801dad0:	f04f 33ff 	mov.w	r3, #4294967295
 801dad4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801dad6:	230a      	movs	r3, #10
 801dad8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	781b      	ldrb	r3, [r3, #0]
 801dade:	3b58      	subs	r3, #88	; 0x58
 801dae0:	2b20      	cmp	r3, #32
 801dae2:	f200 8094 	bhi.w	801dc0e <tiny_vsnprintf_like+0x1c2>
 801dae6:	a201      	add	r2, pc, #4	; (adr r2, 801daec <tiny_vsnprintf_like+0xa0>)
 801dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801daec:	0801dbf7 	.word	0x0801dbf7
 801daf0:	0801dc0f 	.word	0x0801dc0f
 801daf4:	0801dc0f 	.word	0x0801dc0f
 801daf8:	0801dc0f 	.word	0x0801dc0f
 801dafc:	0801dc0f 	.word	0x0801dc0f
 801db00:	0801dc0f 	.word	0x0801dc0f
 801db04:	0801dc0f 	.word	0x0801dc0f
 801db08:	0801dc0f 	.word	0x0801dc0f
 801db0c:	0801dc0f 	.word	0x0801dc0f
 801db10:	0801dc0f 	.word	0x0801dc0f
 801db14:	0801dc0f 	.word	0x0801dc0f
 801db18:	0801db7b 	.word	0x0801db7b
 801db1c:	0801dc05 	.word	0x0801dc05
 801db20:	0801dc0f 	.word	0x0801dc0f
 801db24:	0801dc0f 	.word	0x0801dc0f
 801db28:	0801dc0f 	.word	0x0801dc0f
 801db2c:	0801dc0f 	.word	0x0801dc0f
 801db30:	0801dc05 	.word	0x0801dc05
 801db34:	0801dc0f 	.word	0x0801dc0f
 801db38:	0801dc0f 	.word	0x0801dc0f
 801db3c:	0801dc0f 	.word	0x0801dc0f
 801db40:	0801dc0f 	.word	0x0801dc0f
 801db44:	0801dc0f 	.word	0x0801dc0f
 801db48:	0801dc0f 	.word	0x0801dc0f
 801db4c:	0801dc0f 	.word	0x0801dc0f
 801db50:	0801dc0f 	.word	0x0801dc0f
 801db54:	0801dc0f 	.word	0x0801dc0f
 801db58:	0801db9b 	.word	0x0801db9b
 801db5c:	0801dc0f 	.word	0x0801dc0f
 801db60:	0801dc5b 	.word	0x0801dc5b
 801db64:	0801dc0f 	.word	0x0801dc0f
 801db68:	0801dc0f 	.word	0x0801dc0f
 801db6c:	0801dbff 	.word	0x0801dbff
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db72:	1c5a      	adds	r2, r3, #1
 801db74:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db76:	2220      	movs	r2, #32
 801db78:	701a      	strb	r2, [r3, #0]
 801db7a:	69fb      	ldr	r3, [r7, #28]
 801db7c:	3b01      	subs	r3, #1
 801db7e:	61fb      	str	r3, [r7, #28]
 801db80:	69fb      	ldr	r3, [r7, #28]
 801db82:	2b00      	cmp	r3, #0
 801db84:	dcf4      	bgt.n	801db70 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db86:	683b      	ldr	r3, [r7, #0]
 801db88:	1d1a      	adds	r2, r3, #4
 801db8a:	603a      	str	r2, [r7, #0]
 801db8c:	6819      	ldr	r1, [r3, #0]
 801db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db90:	1c5a      	adds	r2, r3, #1
 801db92:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db94:	b2ca      	uxtb	r2, r1
 801db96:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db98:	e08d      	b.n	801dcb6 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801db9a:	683b      	ldr	r3, [r7, #0]
 801db9c:	1d1a      	adds	r2, r3, #4
 801db9e:	603a      	str	r2, [r7, #0]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d101      	bne.n	801dbae <tiny_vsnprintf_like+0x162>
 801dbaa:	4b50      	ldr	r3, [pc, #320]	; (801dcec <tiny_vsnprintf_like+0x2a0>)
 801dbac:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801dbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dbb0:	f7e2 fae2 	bl	8000178 <strlen>
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801dbb8:	e004      	b.n	801dbc4 <tiny_vsnprintf_like+0x178>
 801dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbbc:	1c5a      	adds	r2, r3, #1
 801dbbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbc0:	2220      	movs	r2, #32
 801dbc2:	701a      	strb	r2, [r3, #0]
 801dbc4:	69fb      	ldr	r3, [r7, #28]
 801dbc6:	1e5a      	subs	r2, r3, #1
 801dbc8:	61fa      	str	r2, [r7, #28]
 801dbca:	693a      	ldr	r2, [r7, #16]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	dbf4      	blt.n	801dbba <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbd4:	e00a      	b.n	801dbec <tiny_vsnprintf_like+0x1a0>
 801dbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbd8:	1c53      	adds	r3, r2, #1
 801dbda:	627b      	str	r3, [r7, #36]	; 0x24
 801dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbde:	1c59      	adds	r1, r3, #1
 801dbe0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbe2:	7812      	ldrb	r2, [r2, #0]
 801dbe4:	701a      	strb	r2, [r3, #0]
 801dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe8:	3301      	adds	r3, #1
 801dbea:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbee:	693b      	ldr	r3, [r7, #16]
 801dbf0:	429a      	cmp	r2, r3
 801dbf2:	dbf0      	blt.n	801dbd6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbf4:	e05f      	b.n	801dcb6 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbf6:	6a3b      	ldr	r3, [r7, #32]
 801dbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbfc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbfe:	2310      	movs	r3, #16
 801dc00:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dc02:	e02b      	b.n	801dc5c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dc04:	6a3b      	ldr	r3, [r7, #32]
 801dc06:	f043 0302 	orr.w	r3, r3, #2
 801dc0a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dc0c:	e025      	b.n	801dc5a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	781b      	ldrb	r3, [r3, #0]
 801dc12:	2b25      	cmp	r3, #37	; 0x25
 801dc14:	d004      	beq.n	801dc20 <tiny_vsnprintf_like+0x1d4>
 801dc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc18:	1c5a      	adds	r2, r3, #1
 801dc1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dc1c:	2225      	movs	r2, #37	; 0x25
 801dc1e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	1ad2      	subs	r2, r2, r3
 801dc26:	68bb      	ldr	r3, [r7, #8]
 801dc28:	3b01      	subs	r3, #1
 801dc2a:	429a      	cmp	r2, r3
 801dc2c:	da16      	bge.n	801dc5c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	781b      	ldrb	r3, [r3, #0]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d006      	beq.n	801dc44 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dc36:	687a      	ldr	r2, [r7, #4]
 801dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc3a:	1c59      	adds	r1, r3, #1
 801dc3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dc3e:	7812      	ldrb	r2, [r2, #0]
 801dc40:	701a      	strb	r2, [r3, #0]
 801dc42:	e002      	b.n	801dc4a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	3b01      	subs	r3, #1
 801dc48:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	1ad2      	subs	r2, r2, r3
 801dc50:	68bb      	ldr	r3, [r7, #8]
 801dc52:	3b01      	subs	r3, #1
 801dc54:	429a      	cmp	r2, r3
 801dc56:	db2d      	blt.n	801dcb4 <tiny_vsnprintf_like+0x268>
 801dc58:	e000      	b.n	801dc5c <tiny_vsnprintf_like+0x210>
        break;
 801dc5a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc5c:	697b      	ldr	r3, [r7, #20]
 801dc5e:	2b6c      	cmp	r3, #108	; 0x6c
 801dc60:	d105      	bne.n	801dc6e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dc62:	683b      	ldr	r3, [r7, #0]
 801dc64:	1d1a      	adds	r2, r3, #4
 801dc66:	603a      	str	r2, [r7, #0]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	637b      	str	r3, [r7, #52]	; 0x34
 801dc6c:	e00f      	b.n	801dc8e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dc6e:	6a3b      	ldr	r3, [r7, #32]
 801dc70:	f003 0302 	and.w	r3, r3, #2
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d005      	beq.n	801dc84 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dc78:	683b      	ldr	r3, [r7, #0]
 801dc7a:	1d1a      	adds	r2, r3, #4
 801dc7c:	603a      	str	r2, [r7, #0]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	637b      	str	r3, [r7, #52]	; 0x34
 801dc82:	e004      	b.n	801dc8e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	1d1a      	adds	r2, r3, #4
 801dc88:	603a      	str	r2, [r7, #0]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc8e:	68bb      	ldr	r3, [r7, #8]
 801dc90:	1e5a      	subs	r2, r3, #1
 801dc92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	1acb      	subs	r3, r1, r3
 801dc98:	1ad1      	subs	r1, r2, r3
 801dc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc9c:	6a3b      	ldr	r3, [r7, #32]
 801dc9e:	9302      	str	r3, [sp, #8]
 801dca0:	69bb      	ldr	r3, [r7, #24]
 801dca2:	9301      	str	r3, [sp, #4]
 801dca4:	69fb      	ldr	r3, [r7, #28]
 801dca6:	9300      	str	r3, [sp, #0]
 801dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dcac:	f7ff fde0 	bl	801d870 <ee_number>
 801dcb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dcb2:	e000      	b.n	801dcb6 <tiny_vsnprintf_like+0x26a>
        continue;
 801dcb4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	3301      	adds	r3, #1
 801dcba:	607b      	str	r3, [r7, #4]
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	f47f aed2 	bne.w	801da6a <tiny_vsnprintf_like+0x1e>
 801dcc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	1ad2      	subs	r2, r2, r3
 801dccc:	68bb      	ldr	r3, [r7, #8]
 801dcce:	3b01      	subs	r3, #1
 801dcd0:	429a      	cmp	r2, r3
 801dcd2:	f6bf aeca 	bge.w	801da6a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcd8:	2200      	movs	r2, #0
 801dcda:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dcdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	1ad3      	subs	r3, r2, r3
}
 801dce2:	4618      	mov	r0, r3
 801dce4:	3738      	adds	r7, #56	; 0x38
 801dce6:	46bd      	mov	sp, r7
 801dce8:	bd80      	pop	{r7, pc}
 801dcea:	bf00      	nop
 801dcec:	0801f514 	.word	0x0801f514

0801dcf0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b090      	sub	sp, #64	; 0x40
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dcf8:	4b73      	ldr	r3, [pc, #460]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcfe:	4b72      	ldr	r3, [pc, #456]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd00:	681a      	ldr	r2, [r3, #0]
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	4013      	ands	r3, r2
 801dd06:	4a70      	ldr	r2, [pc, #448]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd08:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dd0a:	4b70      	ldr	r3, [pc, #448]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dd10:	4b6f      	ldr	r3, [pc, #444]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dd16:	4b6f      	ldr	r3, [pc, #444]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dd1c:	4b6e      	ldr	r3, [pc, #440]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dd22:	e08d      	b.n	801de40 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dd24:	2300      	movs	r3, #0
 801dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd28:	e002      	b.n	801dd30 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2c:	3301      	adds	r3, #1
 801dd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd30:	4a6a      	ldr	r2, [pc, #424]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd3a:	401a      	ands	r2, r3
 801dd3c:	4b62      	ldr	r3, [pc, #392]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	4013      	ands	r3, r2
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d0f1      	beq.n	801dd2a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd46:	4a65      	ldr	r2, [pc, #404]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd50:	401a      	ands	r2, r3
 801dd52:	4b5d      	ldr	r3, [pc, #372]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	4013      	ands	r3, r2
 801dd58:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd5a:	4a60      	ldr	r2, [pc, #384]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd5e:	00db      	lsls	r3, r3, #3
 801dd60:	4413      	add	r3, r2
 801dd62:	685a      	ldr	r2, [r3, #4]
 801dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd66:	4013      	ands	r3, r2
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d106      	bne.n	801dd7a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd6c:	4a5b      	ldr	r2, [pc, #364]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd70:	00db      	lsls	r3, r3, #3
 801dd72:	4413      	add	r3, r2
 801dd74:	f04f 32ff 	mov.w	r2, #4294967295
 801dd78:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd7a:	4a58      	ldr	r2, [pc, #352]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd7e:	00db      	lsls	r3, r3, #3
 801dd80:	4413      	add	r3, r2
 801dd82:	685a      	ldr	r2, [r3, #4]
 801dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd86:	4013      	ands	r3, r2
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f000 f907 	bl	801df9c <SEQ_BitPosition>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	461a      	mov	r2, r3
 801dd92:	4b53      	ldr	r3, [pc, #332]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801dd94:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd96:	4a51      	ldr	r2, [pc, #324]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd9a:	00db      	lsls	r3, r3, #3
 801dd9c:	4413      	add	r3, r2
 801dd9e:	685a      	ldr	r2, [r3, #4]
 801dda0:	4b4f      	ldr	r3, [pc, #316]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	2101      	movs	r1, #1
 801dda6:	fa01 f303 	lsl.w	r3, r1, r3
 801ddaa:	43db      	mvns	r3, r3
 801ddac:	401a      	ands	r2, r3
 801ddae:	494b      	ldr	r1, [pc, #300]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddb2:	00db      	lsls	r3, r3, #3
 801ddb4:	440b      	add	r3, r1
 801ddb6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddb8:	f3ef 8310 	mrs	r3, PRIMASK
 801ddbc:	61bb      	str	r3, [r7, #24]
  return(result);
 801ddbe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ddc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ddc2:	b672      	cpsid	i
}
 801ddc4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ddc6:	4b46      	ldr	r3, [pc, #280]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	2201      	movs	r2, #1
 801ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 801ddd0:	43da      	mvns	r2, r3
 801ddd2:	4b3e      	ldr	r3, [pc, #248]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	4013      	ands	r3, r2
 801ddd8:	4a3c      	ldr	r2, [pc, #240]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801ddda:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dddc:	2301      	movs	r3, #1
 801ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dde0:	e013      	b.n	801de0a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801dde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dde4:	3b01      	subs	r3, #1
 801dde6:	4a3d      	ldr	r2, [pc, #244]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dde8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ddec:	4b3c      	ldr	r3, [pc, #240]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	2201      	movs	r2, #1
 801ddf2:	fa02 f303 	lsl.w	r3, r2, r3
 801ddf6:	43da      	mvns	r2, r3
 801ddf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddfa:	3b01      	subs	r3, #1
 801ddfc:	400a      	ands	r2, r1
 801ddfe:	4937      	ldr	r1, [pc, #220]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801de00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801de04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de06:	3b01      	subs	r3, #1
 801de08:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d1e8      	bne.n	801dde2 <UTIL_SEQ_Run+0xf2>
 801de10:	6a3b      	ldr	r3, [r7, #32]
 801de12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de14:	697b      	ldr	r3, [r7, #20]
 801de16:	f383 8810 	msr	PRIMASK, r3
}
 801de1a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801de1c:	4b30      	ldr	r3, [pc, #192]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	4a30      	ldr	r2, [pc, #192]	; (801dee4 <UTIL_SEQ_Run+0x1f4>)
 801de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de26:	4798      	blx	r3

    local_taskset = TaskSet;
 801de28:	4b28      	ldr	r3, [pc, #160]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801de2e:	4b28      	ldr	r3, [pc, #160]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801de34:	4b27      	ldr	r3, [pc, #156]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801de3a:	4b27      	ldr	r3, [pc, #156]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801de40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de44:	401a      	ands	r2, r3
 801de46:	4b20      	ldr	r3, [pc, #128]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	4013      	ands	r3, r2
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d005      	beq.n	801de5c <UTIL_SEQ_Run+0x16c>
 801de50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de54:	4013      	ands	r3, r2
 801de56:	2b00      	cmp	r3, #0
 801de58:	f43f af64 	beq.w	801dd24 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de5c:	4b20      	ldr	r3, [pc, #128]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801de5e:	f04f 32ff 	mov.w	r2, #4294967295
 801de62:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de64:	f000 f88e 	bl	801df84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de68:	f3ef 8310 	mrs	r3, PRIMASK
 801de6c:	613b      	str	r3, [r7, #16]
  return(result);
 801de6e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de72:	b672      	cpsid	i
}
 801de74:	bf00      	nop
  local_taskset = TaskSet;
 801de76:	4b15      	ldr	r3, [pc, #84]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de7c:	4b14      	ldr	r3, [pc, #80]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de82:	4b14      	ldr	r3, [pc, #80]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de8c:	401a      	ands	r2, r3
 801de8e:	4b0e      	ldr	r3, [pc, #56]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801de90:	681b      	ldr	r3, [r3, #0]
 801de92:	4013      	ands	r3, r2
 801de94:	2b00      	cmp	r3, #0
 801de96:	d107      	bne.n	801dea8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de98:	4b0f      	ldr	r3, [pc, #60]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801de9a:	681a      	ldr	r2, [r3, #0]
 801de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de9e:	4013      	ands	r3, r2
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d101      	bne.n	801dea8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801dea4:	f7e4 fd80 	bl	80029a8 <UTIL_SEQ_Idle>
 801dea8:	69fb      	ldr	r3, [r7, #28]
 801deaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	f383 8810 	msr	PRIMASK, r3
}
 801deb2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801deb4:	f000 f86c 	bl	801df90 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801deb8:	4a03      	ldr	r2, [pc, #12]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801debc:	6013      	str	r3, [r2, #0]

  return;
 801debe:	bf00      	nop
}
 801dec0:	3740      	adds	r7, #64	; 0x40
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd80      	pop	{r7, pc}
 801dec6:	bf00      	nop
 801dec8:	2000015c 	.word	0x2000015c
 801decc:	20001880 	.word	0x20001880
 801ded0:	20001884 	.word	0x20001884
 801ded4:	20000158 	.word	0x20000158
 801ded8:	20001888 	.word	0x20001888
 801dedc:	200018a0 	.word	0x200018a0
 801dee0:	2000188c 	.word	0x2000188c
 801dee4:	20001890 	.word	0x20001890

0801dee8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b088      	sub	sp, #32
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801def4:	f3ef 8310 	mrs	r3, PRIMASK
 801def8:	617b      	str	r3, [r7, #20]
  return(result);
 801defa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801defc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801defe:	b672      	cpsid	i
}
 801df00:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801df02:	68f8      	ldr	r0, [r7, #12]
 801df04:	f000 f84a 	bl	801df9c <SEQ_BitPosition>
 801df08:	4603      	mov	r3, r0
 801df0a:	4619      	mov	r1, r3
 801df0c:	4a06      	ldr	r2, [pc, #24]	; (801df28 <UTIL_SEQ_RegTask+0x40>)
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801df14:	69fb      	ldr	r3, [r7, #28]
 801df16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df18:	69bb      	ldr	r3, [r7, #24]
 801df1a:	f383 8810 	msr	PRIMASK, r3
}
 801df1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801df20:	bf00      	nop
}
 801df22:	3720      	adds	r7, #32
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}
 801df28:	20001890 	.word	0x20001890

0801df2c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801df2c:	b480      	push	{r7}
 801df2e:	b087      	sub	sp, #28
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
 801df34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df36:	f3ef 8310 	mrs	r3, PRIMASK
 801df3a:	60fb      	str	r3, [r7, #12]
  return(result);
 801df3c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801df3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801df40:	b672      	cpsid	i
}
 801df42:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df44:	4b0d      	ldr	r3, [pc, #52]	; (801df7c <UTIL_SEQ_SetTask+0x50>)
 801df46:	681a      	ldr	r2, [r3, #0]
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	4313      	orrs	r3, r2
 801df4c:	4a0b      	ldr	r2, [pc, #44]	; (801df7c <UTIL_SEQ_SetTask+0x50>)
 801df4e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df50:	4a0b      	ldr	r2, [pc, #44]	; (801df80 <UTIL_SEQ_SetTask+0x54>)
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	431a      	orrs	r2, r3
 801df5c:	4908      	ldr	r1, [pc, #32]	; (801df80 <UTIL_SEQ_SetTask+0x54>)
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df68:	693b      	ldr	r3, [r7, #16]
 801df6a:	f383 8810 	msr	PRIMASK, r3
}
 801df6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df70:	bf00      	nop
}
 801df72:	371c      	adds	r7, #28
 801df74:	46bd      	mov	sp, r7
 801df76:	bc80      	pop	{r7}
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop
 801df7c:	20001880 	.word	0x20001880
 801df80:	200018a0 	.word	0x200018a0

0801df84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df84:	b480      	push	{r7}
 801df86:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df88:	bf00      	nop
}
 801df8a:	46bd      	mov	sp, r7
 801df8c:	bc80      	pop	{r7}
 801df8e:	4770      	bx	lr

0801df90 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df90:	b480      	push	{r7}
 801df92:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df94:	bf00      	nop
}
 801df96:	46bd      	mov	sp, r7
 801df98:	bc80      	pop	{r7}
 801df9a:	4770      	bx	lr

0801df9c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df9c:	b480      	push	{r7}
 801df9e:	b085      	sub	sp, #20
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801dfac:	68bb      	ldr	r3, [r7, #8]
 801dfae:	0c1b      	lsrs	r3, r3, #16
 801dfb0:	041b      	lsls	r3, r3, #16
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d104      	bne.n	801dfc0 <SEQ_BitPosition+0x24>
 801dfb6:	2310      	movs	r3, #16
 801dfb8:	73fb      	strb	r3, [r7, #15]
 801dfba:	68bb      	ldr	r3, [r7, #8]
 801dfbc:	041b      	lsls	r3, r3, #16
 801dfbe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801dfc0:	68bb      	ldr	r3, [r7, #8]
 801dfc2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d105      	bne.n	801dfd6 <SEQ_BitPosition+0x3a>
 801dfca:	7bfb      	ldrb	r3, [r7, #15]
 801dfcc:	3308      	adds	r3, #8
 801dfce:	73fb      	strb	r3, [r7, #15]
 801dfd0:	68bb      	ldr	r3, [r7, #8]
 801dfd2:	021b      	lsls	r3, r3, #8
 801dfd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801dfd6:	68bb      	ldr	r3, [r7, #8]
 801dfd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d105      	bne.n	801dfec <SEQ_BitPosition+0x50>
 801dfe0:	7bfb      	ldrb	r3, [r7, #15]
 801dfe2:	3304      	adds	r3, #4
 801dfe4:	73fb      	strb	r3, [r7, #15]
 801dfe6:	68bb      	ldr	r3, [r7, #8]
 801dfe8:	011b      	lsls	r3, r3, #4
 801dfea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfec:	68bb      	ldr	r3, [r7, #8]
 801dfee:	0f1b      	lsrs	r3, r3, #28
 801dff0:	4a06      	ldr	r2, [pc, #24]	; (801e00c <SEQ_BitPosition+0x70>)
 801dff2:	5cd2      	ldrb	r2, [r2, r3]
 801dff4:	7bfb      	ldrb	r3, [r7, #15]
 801dff6:	4413      	add	r3, r2
 801dff8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dffa:	7bfb      	ldrb	r3, [r7, #15]
 801dffc:	f1c3 031f 	rsb	r3, r3, #31
 801e000:	b2db      	uxtb	r3, r3
}
 801e002:	4618      	mov	r0, r3
 801e004:	3714      	adds	r7, #20
 801e006:	46bd      	mov	sp, r7
 801e008:	bc80      	pop	{r7}
 801e00a:	4770      	bx	lr
 801e00c:	0801fb58 	.word	0x0801fb58

0801e010 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e014:	4b04      	ldr	r3, [pc, #16]	; (801e028 <UTIL_TIMER_Init+0x18>)
 801e016:	2200      	movs	r2, #0
 801e018:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e01a:	4b04      	ldr	r3, [pc, #16]	; (801e02c <UTIL_TIMER_Init+0x1c>)
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	4798      	blx	r3
 801e020:	4603      	mov	r3, r0
}
 801e022:	4618      	mov	r0, r3
 801e024:	bd80      	pop	{r7, pc}
 801e026:	bf00      	nop
 801e028:	200018a8 	.word	0x200018a8
 801e02c:	0801f5d4 	.word	0x0801f5d4

0801e030 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b084      	sub	sp, #16
 801e034:	af00      	add	r7, sp, #0
 801e036:	60f8      	str	r0, [r7, #12]
 801e038:	60b9      	str	r1, [r7, #8]
 801e03a:	603b      	str	r3, [r7, #0]
 801e03c:	4613      	mov	r3, r2
 801e03e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d023      	beq.n	801e08e <UTIL_TIMER_Create+0x5e>
 801e046:	683b      	ldr	r3, [r7, #0]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d020      	beq.n	801e08e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	2200      	movs	r2, #0
 801e050:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e052:	4b11      	ldr	r3, [pc, #68]	; (801e098 <UTIL_TIMER_Create+0x68>)
 801e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e056:	68b8      	ldr	r0, [r7, #8]
 801e058:	4798      	blx	r3
 801e05a:	4602      	mov	r2, r0
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	2200      	movs	r2, #0
 801e064:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	2200      	movs	r2, #0
 801e06a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	2200      	movs	r2, #0
 801e070:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	683a      	ldr	r2, [r7, #0]
 801e076:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	69ba      	ldr	r2, [r7, #24]
 801e07c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	79fa      	ldrb	r2, [r7, #7]
 801e082:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	2200      	movs	r2, #0
 801e088:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e08a:	2300      	movs	r3, #0
 801e08c:	e000      	b.n	801e090 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e08e:	2301      	movs	r3, #1
  }
}
 801e090:	4618      	mov	r0, r3
 801e092:	3710      	adds	r7, #16
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}
 801e098:	0801f5d4 	.word	0x0801f5d4

0801e09c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b08a      	sub	sp, #40	; 0x28
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d056      	beq.n	801e15e <UTIL_TIMER_Start+0xc2>
 801e0b0:	6878      	ldr	r0, [r7, #4]
 801e0b2:	f000 f9a9 	bl	801e408 <TimerExists>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	f083 0301 	eor.w	r3, r3, #1
 801e0bc:	b2db      	uxtb	r3, r3
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d04d      	beq.n	801e15e <UTIL_TIMER_Start+0xc2>
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	7a5b      	ldrb	r3, [r3, #9]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d149      	bne.n	801e15e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0ca:	f3ef 8310 	mrs	r3, PRIMASK
 801e0ce:	613b      	str	r3, [r7, #16]
  return(result);
 801e0d0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0d4:	b672      	cpsid	i
}
 801e0d6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	685b      	ldr	r3, [r3, #4]
 801e0dc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e0de:	4b24      	ldr	r3, [pc, #144]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e0e0:	6a1b      	ldr	r3, [r3, #32]
 801e0e2:	4798      	blx	r3
 801e0e4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0e6:	6a3a      	ldr	r2, [r7, #32]
 801e0e8:	69bb      	ldr	r3, [r7, #24]
 801e0ea:	429a      	cmp	r2, r3
 801e0ec:	d201      	bcs.n	801e0f2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0ee:	69bb      	ldr	r3, [r7, #24]
 801e0f0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6a3a      	ldr	r2, [r7, #32]
 801e0f6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2200      	movs	r2, #0
 801e0fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	2201      	movs	r2, #1
 801e102:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	2200      	movs	r2, #0
 801e108:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e10a:	4b1a      	ldr	r3, [pc, #104]	; (801e174 <UTIL_TIMER_Start+0xd8>)
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d106      	bne.n	801e120 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e112:	4b17      	ldr	r3, [pc, #92]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e114:	691b      	ldr	r3, [r3, #16]
 801e116:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e118:	6878      	ldr	r0, [r7, #4]
 801e11a:	f000 f9eb 	bl	801e4f4 <TimerInsertNewHeadTimer>
 801e11e:	e017      	b.n	801e150 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e120:	4b13      	ldr	r3, [pc, #76]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e122:	699b      	ldr	r3, [r3, #24]
 801e124:	4798      	blx	r3
 801e126:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681a      	ldr	r2, [r3, #0]
 801e12c:	697b      	ldr	r3, [r7, #20]
 801e12e:	441a      	add	r2, r3
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681a      	ldr	r2, [r3, #0]
 801e138:	4b0e      	ldr	r3, [pc, #56]	; (801e174 <UTIL_TIMER_Start+0xd8>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	429a      	cmp	r2, r3
 801e140:	d203      	bcs.n	801e14a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e142:	6878      	ldr	r0, [r7, #4]
 801e144:	f000 f9d6 	bl	801e4f4 <TimerInsertNewHeadTimer>
 801e148:	e002      	b.n	801e150 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e14a:	6878      	ldr	r0, [r7, #4]
 801e14c:	f000 f9a2 	bl	801e494 <TimerInsertTimer>
 801e150:	69fb      	ldr	r3, [r7, #28]
 801e152:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	f383 8810 	msr	PRIMASK, r3
}
 801e15a:	bf00      	nop
  {
 801e15c:	e002      	b.n	801e164 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e15e:	2301      	movs	r3, #1
 801e160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e168:	4618      	mov	r0, r3
 801e16a:	3728      	adds	r7, #40	; 0x28
 801e16c:	46bd      	mov	sp, r7
 801e16e:	bd80      	pop	{r7, pc}
 801e170:	0801f5d4 	.word	0x0801f5d4
 801e174:	200018a8 	.word	0x200018a8

0801e178 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e178:	b580      	push	{r7, lr}
 801e17a:	b088      	sub	sp, #32
 801e17c:	af00      	add	r7, sp, #0
 801e17e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e180:	2300      	movs	r3, #0
 801e182:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d05b      	beq.n	801e242 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e18a:	f3ef 8310 	mrs	r3, PRIMASK
 801e18e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e190:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e194:	b672      	cpsid	i
}
 801e196:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e198:	4b2d      	ldr	r3, [pc, #180]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e19e:	4b2c      	ldr	r3, [pc, #176]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2201      	movs	r2, #1
 801e1a8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e1aa:	4b29      	ldr	r3, [pc, #164]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d041      	beq.n	801e236 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e1b8:	4b25      	ldr	r3, [pc, #148]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	687a      	ldr	r2, [r7, #4]
 801e1be:	429a      	cmp	r2, r3
 801e1c0:	d134      	bne.n	801e22c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e1c2:	4b23      	ldr	r3, [pc, #140]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e1ca:	4b21      	ldr	r3, [pc, #132]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1cc:	681b      	ldr	r3, [r3, #0]
 801e1ce:	695b      	ldr	r3, [r3, #20]
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d00a      	beq.n	801e1ea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e1d4:	4b1e      	ldr	r3, [pc, #120]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	695b      	ldr	r3, [r3, #20]
 801e1da:	4a1d      	ldr	r2, [pc, #116]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1dc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e1de:	4b1c      	ldr	r3, [pc, #112]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	4618      	mov	r0, r3
 801e1e4:	f000 f92c 	bl	801e440 <TimerSetTimeout>
 801e1e8:	e023      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1ea:	4b1a      	ldr	r3, [pc, #104]	; (801e254 <UTIL_TIMER_Stop+0xdc>)
 801e1ec:	68db      	ldr	r3, [r3, #12]
 801e1ee:	4798      	blx	r3
            TimerListHead = NULL;
 801e1f0:	4b17      	ldr	r3, [pc, #92]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	601a      	str	r2, [r3, #0]
 801e1f6:	e01c      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1f8:	697a      	ldr	r2, [r7, #20]
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d110      	bne.n	801e222 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e200:	697b      	ldr	r3, [r7, #20]
 801e202:	695b      	ldr	r3, [r3, #20]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d006      	beq.n	801e216 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e208:	697b      	ldr	r3, [r7, #20]
 801e20a:	695b      	ldr	r3, [r3, #20]
 801e20c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e20e:	69bb      	ldr	r3, [r7, #24]
 801e210:	697a      	ldr	r2, [r7, #20]
 801e212:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e214:	e00d      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e216:	2300      	movs	r3, #0
 801e218:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e21a:	69bb      	ldr	r3, [r7, #24]
 801e21c:	697a      	ldr	r2, [r7, #20]
 801e21e:	615a      	str	r2, [r3, #20]
            break;
 801e220:	e007      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e222:	697b      	ldr	r3, [r7, #20]
 801e224:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	695b      	ldr	r3, [r3, #20]
 801e22a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d1e2      	bne.n	801e1f8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e232:	2300      	movs	r3, #0
 801e234:	77fb      	strb	r3, [r7, #31]
 801e236:	693b      	ldr	r3, [r7, #16]
 801e238:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e23a:	68bb      	ldr	r3, [r7, #8]
 801e23c:	f383 8810 	msr	PRIMASK, r3
}
 801e240:	e001      	b.n	801e246 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e242:	2301      	movs	r3, #1
 801e244:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e246:	7ffb      	ldrb	r3, [r7, #31]
}
 801e248:	4618      	mov	r0, r3
 801e24a:	3720      	adds	r7, #32
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}
 801e250:	200018a8 	.word	0x200018a8
 801e254:	0801f5d4 	.word	0x0801f5d4

0801e258 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
 801e260:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e262:	2300      	movs	r3, #0
 801e264:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d102      	bne.n	801e272 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e26c:	2301      	movs	r3, #1
 801e26e:	73fb      	strb	r3, [r7, #15]
 801e270:	e014      	b.n	801e29c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e272:	4b0d      	ldr	r3, [pc, #52]	; (801e2a8 <UTIL_TIMER_SetPeriod+0x50>)
 801e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e276:	6838      	ldr	r0, [r7, #0]
 801e278:	4798      	blx	r3
 801e27a:	4602      	mov	r2, r0
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e280:	6878      	ldr	r0, [r7, #4]
 801e282:	f000 f8c1 	bl	801e408 <TimerExists>
 801e286:	4603      	mov	r3, r0
 801e288:	2b00      	cmp	r3, #0
 801e28a:	d007      	beq.n	801e29c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e28c:	6878      	ldr	r0, [r7, #4]
 801e28e:	f7ff ff73 	bl	801e178 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e292:	6878      	ldr	r0, [r7, #4]
 801e294:	f7ff ff02 	bl	801e09c <UTIL_TIMER_Start>
 801e298:	4603      	mov	r3, r0
 801e29a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e29c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e29e:	4618      	mov	r0, r3
 801e2a0:	3710      	adds	r7, #16
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	bd80      	pop	{r7, pc}
 801e2a6:	bf00      	nop
 801e2a8:	0801f5d4 	.word	0x0801f5d4

0801e2ac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e2ac:	b590      	push	{r4, r7, lr}
 801e2ae:	b089      	sub	sp, #36	; 0x24
 801e2b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801e2b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801e2b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e2ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e2bc:	b672      	cpsid	i
}
 801e2be:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e2c0:	4b38      	ldr	r3, [pc, #224]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2c2:	695b      	ldr	r3, [r3, #20]
 801e2c4:	4798      	blx	r3
 801e2c6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e2c8:	4b36      	ldr	r3, [pc, #216]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2ca:	691b      	ldr	r3, [r3, #16]
 801e2cc:	4798      	blx	r3
 801e2ce:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e2d0:	693a      	ldr	r2, [r7, #16]
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	1ad3      	subs	r3, r2, r3
 801e2d6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e2d8:	4b33      	ldr	r3, [pc, #204]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d037      	beq.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e2e0:	4b31      	ldr	r3, [pc, #196]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2e6:	69fb      	ldr	r3, [r7, #28]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	68fa      	ldr	r2, [r7, #12]
 801e2ec:	429a      	cmp	r2, r3
 801e2ee:	d206      	bcs.n	801e2fe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2f0:	69fb      	ldr	r3, [r7, #28]
 801e2f2:	681a      	ldr	r2, [r3, #0]
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	1ad2      	subs	r2, r2, r3
 801e2f8:	69fb      	ldr	r3, [r7, #28]
 801e2fa:	601a      	str	r2, [r3, #0]
 801e2fc:	e002      	b.n	801e304 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	2200      	movs	r2, #0
 801e302:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e304:	69fb      	ldr	r3, [r7, #28]
 801e306:	695b      	ldr	r3, [r3, #20]
 801e308:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e30a:	69fb      	ldr	r3, [r7, #28]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d1ea      	bne.n	801e2e6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e310:	e01e      	b.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e312:	4b25      	ldr	r3, [pc, #148]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e318:	4b23      	ldr	r3, [pc, #140]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	695b      	ldr	r3, [r3, #20]
 801e31e:	4a22      	ldr	r2, [pc, #136]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e320:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e322:	69fb      	ldr	r3, [r7, #28]
 801e324:	2200      	movs	r2, #0
 801e326:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e328:	69fb      	ldr	r3, [r7, #28]
 801e32a:	2200      	movs	r2, #0
 801e32c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e32e:	69fb      	ldr	r3, [r7, #28]
 801e330:	68db      	ldr	r3, [r3, #12]
 801e332:	69fa      	ldr	r2, [r7, #28]
 801e334:	6912      	ldr	r2, [r2, #16]
 801e336:	4610      	mov	r0, r2
 801e338:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e33a:	69fb      	ldr	r3, [r7, #28]
 801e33c:	7adb      	ldrb	r3, [r3, #11]
 801e33e:	2b01      	cmp	r3, #1
 801e340:	d106      	bne.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e342:	69fb      	ldr	r3, [r7, #28]
 801e344:	7a9b      	ldrb	r3, [r3, #10]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d102      	bne.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e34a:	69f8      	ldr	r0, [r7, #28]
 801e34c:	f7ff fea6 	bl	801e09c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e350:	4b15      	ldr	r3, [pc, #84]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d00d      	beq.n	801e374 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e358:	4b13      	ldr	r3, [pc, #76]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d0d7      	beq.n	801e312 <UTIL_TIMER_IRQ_Handler+0x66>
 801e362:	4b11      	ldr	r3, [pc, #68]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	681c      	ldr	r4, [r3, #0]
 801e368:	4b0e      	ldr	r3, [pc, #56]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e36a:	699b      	ldr	r3, [r3, #24]
 801e36c:	4798      	blx	r3
 801e36e:	4603      	mov	r3, r0
 801e370:	429c      	cmp	r4, r3
 801e372:	d3ce      	bcc.n	801e312 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e374:	4b0c      	ldr	r3, [pc, #48]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d009      	beq.n	801e390 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e37c:	4b0a      	ldr	r3, [pc, #40]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	7a1b      	ldrb	r3, [r3, #8]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d104      	bne.n	801e390 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e386:	4b08      	ldr	r3, [pc, #32]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	4618      	mov	r0, r3
 801e38c:	f000 f858 	bl	801e440 <TimerSetTimeout>
 801e390:	69bb      	ldr	r3, [r7, #24]
 801e392:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	f383 8810 	msr	PRIMASK, r3
}
 801e39a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e39c:	bf00      	nop
 801e39e:	3724      	adds	r7, #36	; 0x24
 801e3a0:	46bd      	mov	sp, r7
 801e3a2:	bd90      	pop	{r4, r7, pc}
 801e3a4:	0801f5d4 	.word	0x0801f5d4
 801e3a8:	200018a8 	.word	0x200018a8

0801e3ac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e3ac:	b580      	push	{r7, lr}
 801e3ae:	b082      	sub	sp, #8
 801e3b0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e3b2:	4b06      	ldr	r3, [pc, #24]	; (801e3cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801e3b4:	69db      	ldr	r3, [r3, #28]
 801e3b6:	4798      	blx	r3
 801e3b8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e3ba:	4b04      	ldr	r3, [pc, #16]	; (801e3cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801e3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	4798      	blx	r3
 801e3c2:	4603      	mov	r3, r0
}
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	3708      	adds	r7, #8
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	bd80      	pop	{r7, pc}
 801e3cc:	0801f5d4 	.word	0x0801f5d4

0801e3d0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b084      	sub	sp, #16
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e3d8:	4b0a      	ldr	r3, [pc, #40]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3da:	69db      	ldr	r3, [r3, #28]
 801e3dc:	4798      	blx	r3
 801e3de:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e3e0:	4b08      	ldr	r3, [pc, #32]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3e4:	6878      	ldr	r0, [r7, #4]
 801e3e6:	4798      	blx	r3
 801e3e8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3ea:	4b06      	ldr	r3, [pc, #24]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3ee:	68f9      	ldr	r1, [r7, #12]
 801e3f0:	68ba      	ldr	r2, [r7, #8]
 801e3f2:	1a8a      	subs	r2, r1, r2
 801e3f4:	4610      	mov	r0, r2
 801e3f6:	4798      	blx	r3
 801e3f8:	4603      	mov	r3, r0
}
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	3710      	adds	r7, #16
 801e3fe:	46bd      	mov	sp, r7
 801e400:	bd80      	pop	{r7, pc}
 801e402:	bf00      	nop
 801e404:	0801f5d4 	.word	0x0801f5d4

0801e408 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e408:	b480      	push	{r7}
 801e40a:	b085      	sub	sp, #20
 801e40c:	af00      	add	r7, sp, #0
 801e40e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e410:	4b0a      	ldr	r3, [pc, #40]	; (801e43c <TimerExists+0x34>)
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e416:	e008      	b.n	801e42a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e418:	68fa      	ldr	r2, [r7, #12]
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d101      	bne.n	801e424 <TimerExists+0x1c>
    {
      return true;
 801e420:	2301      	movs	r3, #1
 801e422:	e006      	b.n	801e432 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	695b      	ldr	r3, [r3, #20]
 801e428:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d1f3      	bne.n	801e418 <TimerExists+0x10>
  }
  return false;
 801e430:	2300      	movs	r3, #0
}
 801e432:	4618      	mov	r0, r3
 801e434:	3714      	adds	r7, #20
 801e436:	46bd      	mov	sp, r7
 801e438:	bc80      	pop	{r7}
 801e43a:	4770      	bx	lr
 801e43c:	200018a8 	.word	0x200018a8

0801e440 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e440:	b590      	push	{r4, r7, lr}
 801e442:	b085      	sub	sp, #20
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e448:	4b11      	ldr	r3, [pc, #68]	; (801e490 <TimerSetTimeout+0x50>)
 801e44a:	6a1b      	ldr	r3, [r3, #32]
 801e44c:	4798      	blx	r3
 801e44e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	2201      	movs	r2, #1
 801e454:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	681c      	ldr	r4, [r3, #0]
 801e45a:	4b0d      	ldr	r3, [pc, #52]	; (801e490 <TimerSetTimeout+0x50>)
 801e45c:	699b      	ldr	r3, [r3, #24]
 801e45e:	4798      	blx	r3
 801e460:	4602      	mov	r2, r0
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	4413      	add	r3, r2
 801e466:	429c      	cmp	r4, r3
 801e468:	d207      	bcs.n	801e47a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e46a:	4b09      	ldr	r3, [pc, #36]	; (801e490 <TimerSetTimeout+0x50>)
 801e46c:	699b      	ldr	r3, [r3, #24]
 801e46e:	4798      	blx	r3
 801e470:	4602      	mov	r2, r0
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	441a      	add	r2, r3
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e47a:	4b05      	ldr	r3, [pc, #20]	; (801e490 <TimerSetTimeout+0x50>)
 801e47c:	689b      	ldr	r3, [r3, #8]
 801e47e:	687a      	ldr	r2, [r7, #4]
 801e480:	6812      	ldr	r2, [r2, #0]
 801e482:	4610      	mov	r0, r2
 801e484:	4798      	blx	r3
}
 801e486:	bf00      	nop
 801e488:	3714      	adds	r7, #20
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd90      	pop	{r4, r7, pc}
 801e48e:	bf00      	nop
 801e490:	0801f5d4 	.word	0x0801f5d4

0801e494 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e494:	b480      	push	{r7}
 801e496:	b085      	sub	sp, #20
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e49c:	4b14      	ldr	r3, [pc, #80]	; (801e4f0 <TimerInsertTimer+0x5c>)
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e4a2:	4b13      	ldr	r3, [pc, #76]	; (801e4f0 <TimerInsertTimer+0x5c>)
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	695b      	ldr	r3, [r3, #20]
 801e4a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e4aa:	e012      	b.n	801e4d2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681a      	ldr	r2, [r3, #0]
 801e4b0:	68bb      	ldr	r3, [r7, #8]
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d905      	bls.n	801e4c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e4b8:	68bb      	ldr	r3, [r7, #8]
 801e4ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e4bc:	68bb      	ldr	r3, [r7, #8]
 801e4be:	695b      	ldr	r3, [r3, #20]
 801e4c0:	60bb      	str	r3, [r7, #8]
 801e4c2:	e006      	b.n	801e4d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	687a      	ldr	r2, [r7, #4]
 801e4c8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	68ba      	ldr	r2, [r7, #8]
 801e4ce:	615a      	str	r2, [r3, #20]
        return;
 801e4d0:	e009      	b.n	801e4e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	695b      	ldr	r3, [r3, #20]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d1e8      	bne.n	801e4ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	687a      	ldr	r2, [r7, #4]
 801e4de:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2200      	movs	r2, #0
 801e4e4:	615a      	str	r2, [r3, #20]
}
 801e4e6:	3714      	adds	r7, #20
 801e4e8:	46bd      	mov	sp, r7
 801e4ea:	bc80      	pop	{r7}
 801e4ec:	4770      	bx	lr
 801e4ee:	bf00      	nop
 801e4f0:	200018a8 	.word	0x200018a8

0801e4f4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4f4:	b580      	push	{r7, lr}
 801e4f6:	b084      	sub	sp, #16
 801e4f8:	af00      	add	r7, sp, #0
 801e4fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4fc:	4b0b      	ldr	r3, [pc, #44]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	2b00      	cmp	r3, #0
 801e506:	d002      	beq.n	801e50e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	2200      	movs	r2, #0
 801e50c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	68fa      	ldr	r2, [r7, #12]
 801e512:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e514:	4a05      	ldr	r2, [pc, #20]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e51a:	4b04      	ldr	r3, [pc, #16]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	4618      	mov	r0, r3
 801e520:	f7ff ff8e 	bl	801e440 <TimerSetTimeout>
}
 801e524:	bf00      	nop
 801e526:	3710      	adds	r7, #16
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}
 801e52c:	200018a8 	.word	0x200018a8

0801e530 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e534:	2218      	movs	r2, #24
 801e536:	2100      	movs	r1, #0
 801e538:	4807      	ldr	r0, [pc, #28]	; (801e558 <UTIL_ADV_TRACE_Init+0x28>)
 801e53a:	f7fe fffa 	bl	801d532 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e53e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e542:	2100      	movs	r1, #0
 801e544:	4805      	ldr	r0, [pc, #20]	; (801e55c <UTIL_ADV_TRACE_Init+0x2c>)
 801e546:	f7fe fff4 	bl	801d532 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e54a:	4b05      	ldr	r3, [pc, #20]	; (801e560 <UTIL_ADV_TRACE_Init+0x30>)
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	4805      	ldr	r0, [pc, #20]	; (801e564 <UTIL_ADV_TRACE_Init+0x34>)
 801e550:	4798      	blx	r3
 801e552:	4603      	mov	r3, r0
}
 801e554:	4618      	mov	r0, r3
 801e556:	bd80      	pop	{r7, pc}
 801e558:	200018ac 	.word	0x200018ac
 801e55c:	200018c4 	.word	0x200018c4
 801e560:	0801f614 	.word	0x0801f614
 801e564:	0801e7d1 	.word	0x0801e7d1

0801e568 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e568:	b480      	push	{r7}
 801e56a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e56c:	4b06      	ldr	r3, [pc, #24]	; (801e588 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e56e:	8a5a      	ldrh	r2, [r3, #18]
 801e570:	4b05      	ldr	r3, [pc, #20]	; (801e588 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e572:	8a1b      	ldrh	r3, [r3, #16]
 801e574:	429a      	cmp	r2, r3
 801e576:	d101      	bne.n	801e57c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e578:	2301      	movs	r3, #1
 801e57a:	e000      	b.n	801e57e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e57c:	2300      	movs	r3, #0
}
 801e57e:	4618      	mov	r0, r3
 801e580:	46bd      	mov	sp, r7
 801e582:	bc80      	pop	{r7}
 801e584:	4770      	bx	lr
 801e586:	bf00      	nop
 801e588:	200018ac 	.word	0x200018ac

0801e58c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e58c:	b408      	push	{r3}
 801e58e:	b580      	push	{r7, lr}
 801e590:	b08d      	sub	sp, #52	; 0x34
 801e592:	af00      	add	r7, sp, #0
 801e594:	60f8      	str	r0, [r7, #12]
 801e596:	60b9      	str	r1, [r7, #8]
 801e598:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e59a:	2300      	movs	r3, #0
 801e59c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e59e:	2300      	movs	r3, #0
 801e5a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e5a2:	4b37      	ldr	r3, [pc, #220]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5a4:	7a1b      	ldrb	r3, [r3, #8]
 801e5a6:	461a      	mov	r2, r3
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	4293      	cmp	r3, r2
 801e5ac:	d902      	bls.n	801e5b4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e5ae:	f06f 0304 	mvn.w	r3, #4
 801e5b2:	e05e      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e5b4:	4b32      	ldr	r3, [pc, #200]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5b6:	68da      	ldr	r2, [r3, #12]
 801e5b8:	68bb      	ldr	r3, [r7, #8]
 801e5ba:	4013      	ands	r3, r2
 801e5bc:	68ba      	ldr	r2, [r7, #8]
 801e5be:	429a      	cmp	r2, r3
 801e5c0:	d002      	beq.n	801e5c8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e5c2:	f06f 0305 	mvn.w	r3, #5
 801e5c6:	e054      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e5c8:	4b2d      	ldr	r3, [pc, #180]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5ca:	685b      	ldr	r3, [r3, #4]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d00a      	beq.n	801e5e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d007      	beq.n	801e5e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e5d6:	4b2a      	ldr	r3, [pc, #168]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5d8:	685b      	ldr	r3, [r3, #4]
 801e5da:	f107 0116 	add.w	r1, r7, #22
 801e5de:	f107 0218 	add.w	r2, r7, #24
 801e5e2:	4610      	mov	r0, r2
 801e5e4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5ea:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5f4:	4823      	ldr	r0, [pc, #140]	; (801e684 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5f6:	f7ff fa29 	bl	801da4c <tiny_vsnprintf_like>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5fe:	f000 f9f1 	bl	801e9e4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e602:	8afa      	ldrh	r2, [r7, #22]
 801e604:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e606:	4413      	add	r3, r2
 801e608:	b29b      	uxth	r3, r3
 801e60a:	f107 0214 	add.w	r2, r7, #20
 801e60e:	4611      	mov	r1, r2
 801e610:	4618      	mov	r0, r3
 801e612:	f000 f969 	bl	801e8e8 <TRACE_AllocateBufer>
 801e616:	4603      	mov	r3, r0
 801e618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e61c:	d025      	beq.n	801e66a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e61e:	2300      	movs	r3, #0
 801e620:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e622:	e00e      	b.n	801e642 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e626:	8aba      	ldrh	r2, [r7, #20]
 801e628:	3330      	adds	r3, #48	; 0x30
 801e62a:	443b      	add	r3, r7
 801e62c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e630:	4b15      	ldr	r3, [pc, #84]	; (801e688 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e632:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e634:	8abb      	ldrh	r3, [r7, #20]
 801e636:	3301      	adds	r3, #1
 801e638:	b29b      	uxth	r3, r3
 801e63a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e63c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e63e:	3301      	adds	r3, #1
 801e640:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e642:	8afb      	ldrh	r3, [r7, #22]
 801e644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e646:	429a      	cmp	r2, r3
 801e648:	d3ec      	bcc.n	801e624 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e64a:	8abb      	ldrh	r3, [r7, #20]
 801e64c:	461a      	mov	r2, r3
 801e64e:	4b0e      	ldr	r3, [pc, #56]	; (801e688 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e650:	18d0      	adds	r0, r2, r3
 801e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e656:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e65a:	f7ff f9f7 	bl	801da4c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e65e:	f000 f9df 	bl	801ea20 <TRACE_UnLock>

    return TRACE_Send();
 801e662:	f000 f831 	bl	801e6c8 <TRACE_Send>
 801e666:	4603      	mov	r3, r0
 801e668:	e003      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e66a:	f000 f9d9 	bl	801ea20 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e66e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e672:	4618      	mov	r0, r3
 801e674:	3734      	adds	r7, #52	; 0x34
 801e676:	46bd      	mov	sp, r7
 801e678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e67c:	b001      	add	sp, #4
 801e67e:	4770      	bx	lr
 801e680:	200018ac 	.word	0x200018ac
 801e684:	20001cc4 	.word	0x20001cc4
 801e688:	200018c4 	.word	0x200018c4

0801e68c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e68c:	b480      	push	{r7}
 801e68e:	b083      	sub	sp, #12
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e694:	4a03      	ldr	r2, [pc, #12]	; (801e6a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	6053      	str	r3, [r2, #4]
}
 801e69a:	bf00      	nop
 801e69c:	370c      	adds	r7, #12
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	bc80      	pop	{r7}
 801e6a2:	4770      	bx	lr
 801e6a4:	200018ac 	.word	0x200018ac

0801e6a8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e6a8:	b480      	push	{r7}
 801e6aa:	b083      	sub	sp, #12
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e6b2:	4a04      	ldr	r2, [pc, #16]	; (801e6c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e6b4:	79fb      	ldrb	r3, [r7, #7]
 801e6b6:	7213      	strb	r3, [r2, #8]
}
 801e6b8:	bf00      	nop
 801e6ba:	370c      	adds	r7, #12
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	bc80      	pop	{r7}
 801e6c0:	4770      	bx	lr
 801e6c2:	bf00      	nop
 801e6c4:	200018ac 	.word	0x200018ac

0801e6c8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b088      	sub	sp, #32
 801e6cc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6d6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6da:	613b      	str	r3, [r7, #16]
  return(result);
 801e6dc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e6de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6e0:	b672      	cpsid	i
}
 801e6e2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6e4:	f000 f9ba 	bl	801ea5c <TRACE_IsLocked>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d15d      	bne.n	801e7aa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6ee:	f000 f979 	bl	801e9e4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6f2:	4b34      	ldr	r3, [pc, #208]	; (801e7c4 <TRACE_Send+0xfc>)
 801e6f4:	8a1a      	ldrh	r2, [r3, #16]
 801e6f6:	4b33      	ldr	r3, [pc, #204]	; (801e7c4 <TRACE_Send+0xfc>)
 801e6f8:	8a5b      	ldrh	r3, [r3, #18]
 801e6fa:	429a      	cmp	r2, r3
 801e6fc:	d04d      	beq.n	801e79a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6fe:	4b31      	ldr	r3, [pc, #196]	; (801e7c4 <TRACE_Send+0xfc>)
 801e700:	789b      	ldrb	r3, [r3, #2]
 801e702:	2b01      	cmp	r3, #1
 801e704:	d117      	bne.n	801e736 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e706:	4b2f      	ldr	r3, [pc, #188]	; (801e7c4 <TRACE_Send+0xfc>)
 801e708:	881a      	ldrh	r2, [r3, #0]
 801e70a:	4b2e      	ldr	r3, [pc, #184]	; (801e7c4 <TRACE_Send+0xfc>)
 801e70c:	8a1b      	ldrh	r3, [r3, #16]
 801e70e:	1ad3      	subs	r3, r2, r3
 801e710:	b29a      	uxth	r2, r3
 801e712:	4b2c      	ldr	r3, [pc, #176]	; (801e7c4 <TRACE_Send+0xfc>)
 801e714:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e716:	4b2b      	ldr	r3, [pc, #172]	; (801e7c4 <TRACE_Send+0xfc>)
 801e718:	2202      	movs	r2, #2
 801e71a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e71c:	4b29      	ldr	r3, [pc, #164]	; (801e7c4 <TRACE_Send+0xfc>)
 801e71e:	2200      	movs	r2, #0
 801e720:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e722:	4b28      	ldr	r3, [pc, #160]	; (801e7c4 <TRACE_Send+0xfc>)
 801e724:	8a9b      	ldrh	r3, [r3, #20]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d105      	bne.n	801e736 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e72a:	4b26      	ldr	r3, [pc, #152]	; (801e7c4 <TRACE_Send+0xfc>)
 801e72c:	2200      	movs	r2, #0
 801e72e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e730:	4b24      	ldr	r3, [pc, #144]	; (801e7c4 <TRACE_Send+0xfc>)
 801e732:	2200      	movs	r2, #0
 801e734:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e736:	4b23      	ldr	r3, [pc, #140]	; (801e7c4 <TRACE_Send+0xfc>)
 801e738:	789b      	ldrb	r3, [r3, #2]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d115      	bne.n	801e76a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e73e:	4b21      	ldr	r3, [pc, #132]	; (801e7c4 <TRACE_Send+0xfc>)
 801e740:	8a5a      	ldrh	r2, [r3, #18]
 801e742:	4b20      	ldr	r3, [pc, #128]	; (801e7c4 <TRACE_Send+0xfc>)
 801e744:	8a1b      	ldrh	r3, [r3, #16]
 801e746:	429a      	cmp	r2, r3
 801e748:	d908      	bls.n	801e75c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e74a:	4b1e      	ldr	r3, [pc, #120]	; (801e7c4 <TRACE_Send+0xfc>)
 801e74c:	8a5a      	ldrh	r2, [r3, #18]
 801e74e:	4b1d      	ldr	r3, [pc, #116]	; (801e7c4 <TRACE_Send+0xfc>)
 801e750:	8a1b      	ldrh	r3, [r3, #16]
 801e752:	1ad3      	subs	r3, r2, r3
 801e754:	b29a      	uxth	r2, r3
 801e756:	4b1b      	ldr	r3, [pc, #108]	; (801e7c4 <TRACE_Send+0xfc>)
 801e758:	829a      	strh	r2, [r3, #20]
 801e75a:	e006      	b.n	801e76a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e75c:	4b19      	ldr	r3, [pc, #100]	; (801e7c4 <TRACE_Send+0xfc>)
 801e75e:	8a1b      	ldrh	r3, [r3, #16]
 801e760:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e764:	b29a      	uxth	r2, r3
 801e766:	4b17      	ldr	r3, [pc, #92]	; (801e7c4 <TRACE_Send+0xfc>)
 801e768:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e76a:	4b16      	ldr	r3, [pc, #88]	; (801e7c4 <TRACE_Send+0xfc>)
 801e76c:	8a1b      	ldrh	r3, [r3, #16]
 801e76e:	461a      	mov	r2, r3
 801e770:	4b15      	ldr	r3, [pc, #84]	; (801e7c8 <TRACE_Send+0x100>)
 801e772:	4413      	add	r3, r2
 801e774:	61bb      	str	r3, [r7, #24]
 801e776:	697b      	ldr	r3, [r7, #20]
 801e778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e77a:	68fb      	ldr	r3, [r7, #12]
 801e77c:	f383 8810 	msr	PRIMASK, r3
}
 801e780:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e782:	f7e4 fa17 	bl	8002bb4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e786:	4b11      	ldr	r3, [pc, #68]	; (801e7cc <TRACE_Send+0x104>)
 801e788:	68db      	ldr	r3, [r3, #12]
 801e78a:	4a0e      	ldr	r2, [pc, #56]	; (801e7c4 <TRACE_Send+0xfc>)
 801e78c:	8a92      	ldrh	r2, [r2, #20]
 801e78e:	4611      	mov	r1, r2
 801e790:	69b8      	ldr	r0, [r7, #24]
 801e792:	4798      	blx	r3
 801e794:	4603      	mov	r3, r0
 801e796:	77fb      	strb	r3, [r7, #31]
 801e798:	e00d      	b.n	801e7b6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e79a:	f000 f941 	bl	801ea20 <TRACE_UnLock>
 801e79e:	697b      	ldr	r3, [r7, #20]
 801e7a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7a2:	68bb      	ldr	r3, [r7, #8]
 801e7a4:	f383 8810 	msr	PRIMASK, r3
}
 801e7a8:	e005      	b.n	801e7b6 <TRACE_Send+0xee>
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	f383 8810 	msr	PRIMASK, r3
}
 801e7b4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	3720      	adds	r7, #32
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
 801e7c2:	bf00      	nop
 801e7c4:	200018ac 	.word	0x200018ac
 801e7c8:	200018c4 	.word	0x200018c4
 801e7cc:	0801f614 	.word	0x0801f614

0801e7d0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b088      	sub	sp, #32
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e7d8:	2300      	movs	r3, #0
 801e7da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e7e0:	617b      	str	r3, [r7, #20]
  return(result);
 801e7e2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7e6:	b672      	cpsid	i
}
 801e7e8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7ea:	4b3c      	ldr	r3, [pc, #240]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7ec:	789b      	ldrb	r3, [r3, #2]
 801e7ee:	2b02      	cmp	r3, #2
 801e7f0:	d106      	bne.n	801e800 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7f2:	4b3a      	ldr	r3, [pc, #232]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7f8:	4b38      	ldr	r3, [pc, #224]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	821a      	strh	r2, [r3, #16]
 801e7fe:	e00a      	b.n	801e816 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e800:	4b36      	ldr	r3, [pc, #216]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e802:	8a1a      	ldrh	r2, [r3, #16]
 801e804:	4b35      	ldr	r3, [pc, #212]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e806:	8a9b      	ldrh	r3, [r3, #20]
 801e808:	4413      	add	r3, r2
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e810:	b29a      	uxth	r2, r3
 801e812:	4b32      	ldr	r3, [pc, #200]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e814:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e816:	4b31      	ldr	r3, [pc, #196]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e818:	8a1a      	ldrh	r2, [r3, #16]
 801e81a:	4b30      	ldr	r3, [pc, #192]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e81c:	8a5b      	ldrh	r3, [r3, #18]
 801e81e:	429a      	cmp	r2, r3
 801e820:	d04d      	beq.n	801e8be <TRACE_TxCpltCallback+0xee>
 801e822:	4b2e      	ldr	r3, [pc, #184]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e824:	8adb      	ldrh	r3, [r3, #22]
 801e826:	2b01      	cmp	r3, #1
 801e828:	d149      	bne.n	801e8be <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e82a:	4b2c      	ldr	r3, [pc, #176]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e82c:	789b      	ldrb	r3, [r3, #2]
 801e82e:	2b01      	cmp	r3, #1
 801e830:	d117      	bne.n	801e862 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e832:	4b2a      	ldr	r3, [pc, #168]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e834:	881a      	ldrh	r2, [r3, #0]
 801e836:	4b29      	ldr	r3, [pc, #164]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e838:	8a1b      	ldrh	r3, [r3, #16]
 801e83a:	1ad3      	subs	r3, r2, r3
 801e83c:	b29a      	uxth	r2, r3
 801e83e:	4b27      	ldr	r3, [pc, #156]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e840:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e842:	4b26      	ldr	r3, [pc, #152]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e844:	2202      	movs	r2, #2
 801e846:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e848:	4b24      	ldr	r3, [pc, #144]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e84a:	2200      	movs	r2, #0
 801e84c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e84e:	4b23      	ldr	r3, [pc, #140]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e850:	8a9b      	ldrh	r3, [r3, #20]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d105      	bne.n	801e862 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e856:	4b21      	ldr	r3, [pc, #132]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e858:	2200      	movs	r2, #0
 801e85a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e85c:	4b1f      	ldr	r3, [pc, #124]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e85e:	2200      	movs	r2, #0
 801e860:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e862:	4b1e      	ldr	r3, [pc, #120]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e864:	789b      	ldrb	r3, [r3, #2]
 801e866:	2b00      	cmp	r3, #0
 801e868:	d115      	bne.n	801e896 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e86a:	4b1c      	ldr	r3, [pc, #112]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e86c:	8a5a      	ldrh	r2, [r3, #18]
 801e86e:	4b1b      	ldr	r3, [pc, #108]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e870:	8a1b      	ldrh	r3, [r3, #16]
 801e872:	429a      	cmp	r2, r3
 801e874:	d908      	bls.n	801e888 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e876:	4b19      	ldr	r3, [pc, #100]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e878:	8a5a      	ldrh	r2, [r3, #18]
 801e87a:	4b18      	ldr	r3, [pc, #96]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e87c:	8a1b      	ldrh	r3, [r3, #16]
 801e87e:	1ad3      	subs	r3, r2, r3
 801e880:	b29a      	uxth	r2, r3
 801e882:	4b16      	ldr	r3, [pc, #88]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e884:	829a      	strh	r2, [r3, #20]
 801e886:	e006      	b.n	801e896 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e888:	4b14      	ldr	r3, [pc, #80]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e88a:	8a1b      	ldrh	r3, [r3, #16]
 801e88c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e890:	b29a      	uxth	r2, r3
 801e892:	4b12      	ldr	r3, [pc, #72]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e894:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e896:	4b11      	ldr	r3, [pc, #68]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e898:	8a1b      	ldrh	r3, [r3, #16]
 801e89a:	461a      	mov	r2, r3
 801e89c:	4b10      	ldr	r3, [pc, #64]	; (801e8e0 <TRACE_TxCpltCallback+0x110>)
 801e89e:	4413      	add	r3, r2
 801e8a0:	61fb      	str	r3, [r7, #28]
 801e8a2:	69bb      	ldr	r3, [r7, #24]
 801e8a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a6:	693b      	ldr	r3, [r7, #16]
 801e8a8:	f383 8810 	msr	PRIMASK, r3
}
 801e8ac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e8ae:	4b0d      	ldr	r3, [pc, #52]	; (801e8e4 <TRACE_TxCpltCallback+0x114>)
 801e8b0:	68db      	ldr	r3, [r3, #12]
 801e8b2:	4a0a      	ldr	r2, [pc, #40]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e8b4:	8a92      	ldrh	r2, [r2, #20]
 801e8b6:	4611      	mov	r1, r2
 801e8b8:	69f8      	ldr	r0, [r7, #28]
 801e8ba:	4798      	blx	r3
 801e8bc:	e00a      	b.n	801e8d4 <TRACE_TxCpltCallback+0x104>
 801e8be:	69bb      	ldr	r3, [r7, #24]
 801e8c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	f383 8810 	msr	PRIMASK, r3
}
 801e8c8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e8ca:	f7e4 f97b 	bl	8002bc4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e8ce:	f000 f8a7 	bl	801ea20 <TRACE_UnLock>
  }
}
 801e8d2:	bf00      	nop
 801e8d4:	bf00      	nop
 801e8d6:	3720      	adds	r7, #32
 801e8d8:	46bd      	mov	sp, r7
 801e8da:	bd80      	pop	{r7, pc}
 801e8dc:	200018ac 	.word	0x200018ac
 801e8e0:	200018c4 	.word	0x200018c4
 801e8e4:	0801f614 	.word	0x0801f614

0801e8e8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8e8:	b480      	push	{r7}
 801e8ea:	b087      	sub	sp, #28
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	4603      	mov	r3, r0
 801e8f0:	6039      	str	r1, [r7, #0]
 801e8f2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8f8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8fa:	f3ef 8310 	mrs	r3, PRIMASK
 801e8fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801e900:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e904:	b672      	cpsid	i
}
 801e906:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e908:	4b35      	ldr	r3, [pc, #212]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e90a:	8a5a      	ldrh	r2, [r3, #18]
 801e90c:	4b34      	ldr	r3, [pc, #208]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e90e:	8a1b      	ldrh	r3, [r3, #16]
 801e910:	429a      	cmp	r2, r3
 801e912:	d11b      	bne.n	801e94c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e914:	4b32      	ldr	r3, [pc, #200]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e916:	8a5b      	ldrh	r3, [r3, #18]
 801e918:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e91c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e91e:	88fa      	ldrh	r2, [r7, #6]
 801e920:	8afb      	ldrh	r3, [r7, #22]
 801e922:	429a      	cmp	r2, r3
 801e924:	d33a      	bcc.n	801e99c <TRACE_AllocateBufer+0xb4>
 801e926:	4b2e      	ldr	r3, [pc, #184]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e928:	8a1b      	ldrh	r3, [r3, #16]
 801e92a:	88fa      	ldrh	r2, [r7, #6]
 801e92c:	429a      	cmp	r2, r3
 801e92e:	d235      	bcs.n	801e99c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e930:	4b2b      	ldr	r3, [pc, #172]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e932:	2201      	movs	r2, #1
 801e934:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e936:	4b2a      	ldr	r3, [pc, #168]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e938:	8a5a      	ldrh	r2, [r3, #18]
 801e93a:	4b29      	ldr	r3, [pc, #164]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e93c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e93e:	4b28      	ldr	r3, [pc, #160]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e940:	8a1b      	ldrh	r3, [r3, #16]
 801e942:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e944:	4b26      	ldr	r3, [pc, #152]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e946:	2200      	movs	r2, #0
 801e948:	825a      	strh	r2, [r3, #18]
 801e94a:	e027      	b.n	801e99c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e94c:	4b24      	ldr	r3, [pc, #144]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e94e:	8a5a      	ldrh	r2, [r3, #18]
 801e950:	4b23      	ldr	r3, [pc, #140]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e952:	8a1b      	ldrh	r3, [r3, #16]
 801e954:	429a      	cmp	r2, r3
 801e956:	d91b      	bls.n	801e990 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e958:	4b21      	ldr	r3, [pc, #132]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e95a:	8a5b      	ldrh	r3, [r3, #18]
 801e95c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e960:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e962:	88fa      	ldrh	r2, [r7, #6]
 801e964:	8afb      	ldrh	r3, [r7, #22]
 801e966:	429a      	cmp	r2, r3
 801e968:	d318      	bcc.n	801e99c <TRACE_AllocateBufer+0xb4>
 801e96a:	4b1d      	ldr	r3, [pc, #116]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e96c:	8a1b      	ldrh	r3, [r3, #16]
 801e96e:	88fa      	ldrh	r2, [r7, #6]
 801e970:	429a      	cmp	r2, r3
 801e972:	d213      	bcs.n	801e99c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e974:	4b1a      	ldr	r3, [pc, #104]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e976:	2201      	movs	r2, #1
 801e978:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e97a:	4b19      	ldr	r3, [pc, #100]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e97c:	8a5a      	ldrh	r2, [r3, #18]
 801e97e:	4b18      	ldr	r3, [pc, #96]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e980:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e982:	4b17      	ldr	r3, [pc, #92]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e984:	8a1b      	ldrh	r3, [r3, #16]
 801e986:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e988:	4b15      	ldr	r3, [pc, #84]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e98a:	2200      	movs	r2, #0
 801e98c:	825a      	strh	r2, [r3, #18]
 801e98e:	e005      	b.n	801e99c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e990:	4b13      	ldr	r3, [pc, #76]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e992:	8a1a      	ldrh	r2, [r3, #16]
 801e994:	4b12      	ldr	r3, [pc, #72]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e996:	8a5b      	ldrh	r3, [r3, #18]
 801e998:	1ad3      	subs	r3, r2, r3
 801e99a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e99c:	8afa      	ldrh	r2, [r7, #22]
 801e99e:	88fb      	ldrh	r3, [r7, #6]
 801e9a0:	429a      	cmp	r2, r3
 801e9a2:	d90f      	bls.n	801e9c4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e9a4:	4b0e      	ldr	r3, [pc, #56]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9a6:	8a5a      	ldrh	r2, [r3, #18]
 801e9a8:	683b      	ldr	r3, [r7, #0]
 801e9aa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e9ac:	4b0c      	ldr	r3, [pc, #48]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9ae:	8a5a      	ldrh	r2, [r3, #18]
 801e9b0:	88fb      	ldrh	r3, [r7, #6]
 801e9b2:	4413      	add	r3, r2
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e9ba:	b29a      	uxth	r2, r3
 801e9bc:	4b08      	ldr	r3, [pc, #32]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9be:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	82bb      	strh	r3, [r7, #20]
 801e9c4:	693b      	ldr	r3, [r7, #16]
 801e9c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9c8:	68bb      	ldr	r3, [r7, #8]
 801e9ca:	f383 8810 	msr	PRIMASK, r3
}
 801e9ce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e9d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e9d4:	4618      	mov	r0, r3
 801e9d6:	371c      	adds	r7, #28
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bc80      	pop	{r7}
 801e9dc:	4770      	bx	lr
 801e9de:	bf00      	nop
 801e9e0:	200018ac 	.word	0x200018ac

0801e9e4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9e4:	b480      	push	{r7}
 801e9e6:	b085      	sub	sp, #20
 801e9e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9ea:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ee:	607b      	str	r3, [r7, #4]
  return(result);
 801e9f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9f4:	b672      	cpsid	i
}
 801e9f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9f8:	4b08      	ldr	r3, [pc, #32]	; (801ea1c <TRACE_Lock+0x38>)
 801e9fa:	8adb      	ldrh	r3, [r3, #22]
 801e9fc:	3301      	adds	r3, #1
 801e9fe:	b29a      	uxth	r2, r3
 801ea00:	4b06      	ldr	r3, [pc, #24]	; (801ea1c <TRACE_Lock+0x38>)
 801ea02:	82da      	strh	r2, [r3, #22]
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea08:	68bb      	ldr	r3, [r7, #8]
 801ea0a:	f383 8810 	msr	PRIMASK, r3
}
 801ea0e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea10:	bf00      	nop
 801ea12:	3714      	adds	r7, #20
 801ea14:	46bd      	mov	sp, r7
 801ea16:	bc80      	pop	{r7}
 801ea18:	4770      	bx	lr
 801ea1a:	bf00      	nop
 801ea1c:	200018ac 	.word	0x200018ac

0801ea20 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ea20:	b480      	push	{r7}
 801ea22:	b085      	sub	sp, #20
 801ea24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea26:	f3ef 8310 	mrs	r3, PRIMASK
 801ea2a:	607b      	str	r3, [r7, #4]
  return(result);
 801ea2c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea30:	b672      	cpsid	i
}
 801ea32:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ea34:	4b08      	ldr	r3, [pc, #32]	; (801ea58 <TRACE_UnLock+0x38>)
 801ea36:	8adb      	ldrh	r3, [r3, #22]
 801ea38:	3b01      	subs	r3, #1
 801ea3a:	b29a      	uxth	r2, r3
 801ea3c:	4b06      	ldr	r3, [pc, #24]	; (801ea58 <TRACE_UnLock+0x38>)
 801ea3e:	82da      	strh	r2, [r3, #22]
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea44:	68bb      	ldr	r3, [r7, #8]
 801ea46:	f383 8810 	msr	PRIMASK, r3
}
 801ea4a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea4c:	bf00      	nop
 801ea4e:	3714      	adds	r7, #20
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bc80      	pop	{r7}
 801ea54:	4770      	bx	lr
 801ea56:	bf00      	nop
 801ea58:	200018ac 	.word	0x200018ac

0801ea5c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea5c:	b480      	push	{r7}
 801ea5e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea60:	4b05      	ldr	r3, [pc, #20]	; (801ea78 <TRACE_IsLocked+0x1c>)
 801ea62:	8adb      	ldrh	r3, [r3, #22]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	bf14      	ite	ne
 801ea68:	2301      	movne	r3, #1
 801ea6a:	2300      	moveq	r3, #0
 801ea6c:	b2db      	uxtb	r3, r3
}
 801ea6e:	4618      	mov	r0, r3
 801ea70:	46bd      	mov	sp, r7
 801ea72:	bc80      	pop	{r7}
 801ea74:	4770      	bx	lr
 801ea76:	bf00      	nop
 801ea78:	200018ac 	.word	0x200018ac

0801ea7c <memset>:
 801ea7c:	4402      	add	r2, r0
 801ea7e:	4603      	mov	r3, r0
 801ea80:	4293      	cmp	r3, r2
 801ea82:	d100      	bne.n	801ea86 <memset+0xa>
 801ea84:	4770      	bx	lr
 801ea86:	f803 1b01 	strb.w	r1, [r3], #1
 801ea8a:	e7f9      	b.n	801ea80 <memset+0x4>

0801ea8c <__libc_init_array>:
 801ea8c:	b570      	push	{r4, r5, r6, lr}
 801ea8e:	4d0d      	ldr	r5, [pc, #52]	; (801eac4 <__libc_init_array+0x38>)
 801ea90:	4c0d      	ldr	r4, [pc, #52]	; (801eac8 <__libc_init_array+0x3c>)
 801ea92:	1b64      	subs	r4, r4, r5
 801ea94:	10a4      	asrs	r4, r4, #2
 801ea96:	2600      	movs	r6, #0
 801ea98:	42a6      	cmp	r6, r4
 801ea9a:	d109      	bne.n	801eab0 <__libc_init_array+0x24>
 801ea9c:	4d0b      	ldr	r5, [pc, #44]	; (801eacc <__libc_init_array+0x40>)
 801ea9e:	4c0c      	ldr	r4, [pc, #48]	; (801ead0 <__libc_init_array+0x44>)
 801eaa0:	f000 f8fe 	bl	801eca0 <_init>
 801eaa4:	1b64      	subs	r4, r4, r5
 801eaa6:	10a4      	asrs	r4, r4, #2
 801eaa8:	2600      	movs	r6, #0
 801eaaa:	42a6      	cmp	r6, r4
 801eaac:	d105      	bne.n	801eaba <__libc_init_array+0x2e>
 801eaae:	bd70      	pop	{r4, r5, r6, pc}
 801eab0:	f855 3b04 	ldr.w	r3, [r5], #4
 801eab4:	4798      	blx	r3
 801eab6:	3601      	adds	r6, #1
 801eab8:	e7ee      	b.n	801ea98 <__libc_init_array+0xc>
 801eaba:	f855 3b04 	ldr.w	r3, [r5], #4
 801eabe:	4798      	blx	r3
 801eac0:	3601      	adds	r6, #1
 801eac2:	e7f2      	b.n	801eaaa <__libc_init_array+0x1e>
 801eac4:	0801fc48 	.word	0x0801fc48
 801eac8:	0801fc48 	.word	0x0801fc48
 801eacc:	0801fc48 	.word	0x0801fc48
 801ead0:	0801fc50 	.word	0x0801fc50

0801ead4 <__retarget_lock_acquire_recursive>:
 801ead4:	4770      	bx	lr

0801ead6 <__retarget_lock_release_recursive>:
 801ead6:	4770      	bx	lr

0801ead8 <register_fini>:
 801ead8:	4b02      	ldr	r3, [pc, #8]	; (801eae4 <register_fini+0xc>)
 801eada:	b113      	cbz	r3, 801eae2 <register_fini+0xa>
 801eadc:	4802      	ldr	r0, [pc, #8]	; (801eae8 <register_fini+0x10>)
 801eade:	f000 b805 	b.w	801eaec <atexit>
 801eae2:	4770      	bx	lr
 801eae4:	00000000 	.word	0x00000000
 801eae8:	0801eaf9 	.word	0x0801eaf9

0801eaec <atexit>:
 801eaec:	2300      	movs	r3, #0
 801eaee:	4601      	mov	r1, r0
 801eaf0:	461a      	mov	r2, r3
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f000 b814 	b.w	801eb20 <__register_exitproc>

0801eaf8 <__libc_fini_array>:
 801eaf8:	b538      	push	{r3, r4, r5, lr}
 801eafa:	4d07      	ldr	r5, [pc, #28]	; (801eb18 <__libc_fini_array+0x20>)
 801eafc:	4c07      	ldr	r4, [pc, #28]	; (801eb1c <__libc_fini_array+0x24>)
 801eafe:	1b64      	subs	r4, r4, r5
 801eb00:	10a4      	asrs	r4, r4, #2
 801eb02:	b91c      	cbnz	r4, 801eb0c <__libc_fini_array+0x14>
 801eb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb08:	f000 b8d0 	b.w	801ecac <_fini>
 801eb0c:	3c01      	subs	r4, #1
 801eb0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eb12:	4798      	blx	r3
 801eb14:	e7f5      	b.n	801eb02 <__libc_fini_array+0xa>
 801eb16:	bf00      	nop
 801eb18:	0801fc50 	.word	0x0801fc50
 801eb1c:	0801fc54 	.word	0x0801fc54

0801eb20 <__register_exitproc>:
 801eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb24:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eb94 <__register_exitproc+0x74>
 801eb28:	4606      	mov	r6, r0
 801eb2a:	f8da 0000 	ldr.w	r0, [sl]
 801eb2e:	4698      	mov	r8, r3
 801eb30:	460f      	mov	r7, r1
 801eb32:	4691      	mov	r9, r2
 801eb34:	f7ff ffce 	bl	801ead4 <__retarget_lock_acquire_recursive>
 801eb38:	4b17      	ldr	r3, [pc, #92]	; (801eb98 <__register_exitproc+0x78>)
 801eb3a:	681c      	ldr	r4, [r3, #0]
 801eb3c:	b90c      	cbnz	r4, 801eb42 <__register_exitproc+0x22>
 801eb3e:	4c17      	ldr	r4, [pc, #92]	; (801eb9c <__register_exitproc+0x7c>)
 801eb40:	601c      	str	r4, [r3, #0]
 801eb42:	6865      	ldr	r5, [r4, #4]
 801eb44:	f8da 0000 	ldr.w	r0, [sl]
 801eb48:	2d1f      	cmp	r5, #31
 801eb4a:	dd05      	ble.n	801eb58 <__register_exitproc+0x38>
 801eb4c:	f7ff ffc3 	bl	801ead6 <__retarget_lock_release_recursive>
 801eb50:	f04f 30ff 	mov.w	r0, #4294967295
 801eb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb58:	b19e      	cbz	r6, 801eb82 <__register_exitproc+0x62>
 801eb5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb5e:	2201      	movs	r2, #1
 801eb60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb64:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb68:	40aa      	lsls	r2, r5
 801eb6a:	4313      	orrs	r3, r2
 801eb6c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb70:	2e02      	cmp	r6, #2
 801eb72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb76:	bf02      	ittt	eq
 801eb78:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb7c:	4313      	orreq	r3, r2
 801eb7e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb82:	1c6b      	adds	r3, r5, #1
 801eb84:	3502      	adds	r5, #2
 801eb86:	6063      	str	r3, [r4, #4]
 801eb88:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb8c:	f7ff ffa3 	bl	801ead6 <__retarget_lock_release_recursive>
 801eb90:	2000      	movs	r0, #0
 801eb92:	e7df      	b.n	801eb54 <__register_exitproc+0x34>
 801eb94:	20000160 	.word	0x20000160
 801eb98:	20001ec8 	.word	0x20001ec8
 801eb9c:	20001ecc 	.word	0x20001ecc

0801eba0 <floor>:
 801eba0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eba8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ebac:	2e13      	cmp	r6, #19
 801ebae:	460b      	mov	r3, r1
 801ebb0:	4607      	mov	r7, r0
 801ebb2:	460c      	mov	r4, r1
 801ebb4:	4605      	mov	r5, r0
 801ebb6:	dc32      	bgt.n	801ec1e <floor+0x7e>
 801ebb8:	2e00      	cmp	r6, #0
 801ebba:	da14      	bge.n	801ebe6 <floor+0x46>
 801ebbc:	a334      	add	r3, pc, #208	; (adr r3, 801ec90 <floor+0xf0>)
 801ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc2:	f7e1 fae7 	bl	8000194 <__adddf3>
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	2300      	movs	r3, #0
 801ebca:	f7e1 ff29 	bl	8000a20 <__aeabi_dcmpgt>
 801ebce:	b138      	cbz	r0, 801ebe0 <floor+0x40>
 801ebd0:	2c00      	cmp	r4, #0
 801ebd2:	da56      	bge.n	801ec82 <floor+0xe2>
 801ebd4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ebd8:	4325      	orrs	r5, r4
 801ebda:	d055      	beq.n	801ec88 <floor+0xe8>
 801ebdc:	4c2e      	ldr	r4, [pc, #184]	; (801ec98 <floor+0xf8>)
 801ebde:	2500      	movs	r5, #0
 801ebe0:	4623      	mov	r3, r4
 801ebe2:	462f      	mov	r7, r5
 801ebe4:	e025      	b.n	801ec32 <floor+0x92>
 801ebe6:	4a2d      	ldr	r2, [pc, #180]	; (801ec9c <floor+0xfc>)
 801ebe8:	fa42 f806 	asr.w	r8, r2, r6
 801ebec:	ea01 0208 	and.w	r2, r1, r8
 801ebf0:	4302      	orrs	r2, r0
 801ebf2:	d01e      	beq.n	801ec32 <floor+0x92>
 801ebf4:	a326      	add	r3, pc, #152	; (adr r3, 801ec90 <floor+0xf0>)
 801ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebfa:	f7e1 facb 	bl	8000194 <__adddf3>
 801ebfe:	2200      	movs	r2, #0
 801ec00:	2300      	movs	r3, #0
 801ec02:	f7e1 ff0d 	bl	8000a20 <__aeabi_dcmpgt>
 801ec06:	2800      	cmp	r0, #0
 801ec08:	d0ea      	beq.n	801ebe0 <floor+0x40>
 801ec0a:	2c00      	cmp	r4, #0
 801ec0c:	bfbe      	ittt	lt
 801ec0e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ec12:	4133      	asrlt	r3, r6
 801ec14:	18e4      	addlt	r4, r4, r3
 801ec16:	ea24 0408 	bic.w	r4, r4, r8
 801ec1a:	2500      	movs	r5, #0
 801ec1c:	e7e0      	b.n	801ebe0 <floor+0x40>
 801ec1e:	2e33      	cmp	r6, #51	; 0x33
 801ec20:	dd0b      	ble.n	801ec3a <floor+0x9a>
 801ec22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ec26:	d104      	bne.n	801ec32 <floor+0x92>
 801ec28:	4602      	mov	r2, r0
 801ec2a:	f7e1 fab3 	bl	8000194 <__adddf3>
 801ec2e:	4607      	mov	r7, r0
 801ec30:	460b      	mov	r3, r1
 801ec32:	4638      	mov	r0, r7
 801ec34:	4619      	mov	r1, r3
 801ec36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec3a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ec3e:	f04f 38ff 	mov.w	r8, #4294967295
 801ec42:	fa28 f802 	lsr.w	r8, r8, r2
 801ec46:	ea10 0f08 	tst.w	r0, r8
 801ec4a:	d0f2      	beq.n	801ec32 <floor+0x92>
 801ec4c:	a310      	add	r3, pc, #64	; (adr r3, 801ec90 <floor+0xf0>)
 801ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec52:	f7e1 fa9f 	bl	8000194 <__adddf3>
 801ec56:	2200      	movs	r2, #0
 801ec58:	2300      	movs	r3, #0
 801ec5a:	f7e1 fee1 	bl	8000a20 <__aeabi_dcmpgt>
 801ec5e:	2800      	cmp	r0, #0
 801ec60:	d0be      	beq.n	801ebe0 <floor+0x40>
 801ec62:	2c00      	cmp	r4, #0
 801ec64:	da0a      	bge.n	801ec7c <floor+0xdc>
 801ec66:	2e14      	cmp	r6, #20
 801ec68:	d101      	bne.n	801ec6e <floor+0xce>
 801ec6a:	3401      	adds	r4, #1
 801ec6c:	e006      	b.n	801ec7c <floor+0xdc>
 801ec6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec72:	2301      	movs	r3, #1
 801ec74:	40b3      	lsls	r3, r6
 801ec76:	441d      	add	r5, r3
 801ec78:	42af      	cmp	r7, r5
 801ec7a:	d8f6      	bhi.n	801ec6a <floor+0xca>
 801ec7c:	ea25 0508 	bic.w	r5, r5, r8
 801ec80:	e7ae      	b.n	801ebe0 <floor+0x40>
 801ec82:	2500      	movs	r5, #0
 801ec84:	462c      	mov	r4, r5
 801ec86:	e7ab      	b.n	801ebe0 <floor+0x40>
 801ec88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ec8c:	e7a8      	b.n	801ebe0 <floor+0x40>
 801ec8e:	bf00      	nop
 801ec90:	8800759c 	.word	0x8800759c
 801ec94:	7e37e43c 	.word	0x7e37e43c
 801ec98:	bff00000 	.word	0xbff00000
 801ec9c:	000fffff 	.word	0x000fffff

0801eca0 <_init>:
 801eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eca2:	bf00      	nop
 801eca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eca6:	bc08      	pop	{r3}
 801eca8:	469e      	mov	lr, r3
 801ecaa:	4770      	bx	lr

0801ecac <_fini>:
 801ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecae:	bf00      	nop
 801ecb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecb2:	bc08      	pop	{r3}
 801ecb4:	469e      	mov	lr, r3
 801ecb6:	4770      	bx	lr
