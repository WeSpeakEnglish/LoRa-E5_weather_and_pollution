
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d760  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  0801d898  0801d898  0002d898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801e754  0801e754  0002e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e82c  0801e82c  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801e82c  0801e82c  0002e82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e834  0801e834  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801e834  0801e834  0002e834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e83c  0801e83c  0002e83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801e840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f18  20000164  0801e9a4  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000207c  0801e9a4  0003207c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c734  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b7dc  00000000  00000000  0007c905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e48  00000000  00000000  000880e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002f7b  00000000  00000000  0008bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bb07  00000000  00000000  0008eeab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d0e2  00000000  00000000  000ba9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daf0b  00000000  00000000  00107a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010534  00000000  00000000  001e29a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f2ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d880 	.word	0x0801d880

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801d880 	.word	0x0801d880

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ce:	4013      	ands	r3, r2
 80010d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_ADC_Init+0x94>)
 80010e2:	4a24      	ldr	r2, [pc, #144]	; (8001174 <MX_ADC_Init+0x98>)
 80010e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_ADC_Init+0x94>)
 80010e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_ADC_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_ADC_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_ADC_Init+0x94>)
 8001102:	2204      	movs	r2, #4
 8001104:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_ADC_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC_Init+0x94>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_ADC_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_ADC_Init+0x94>)
 800113c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_ADC_Init+0x94>)
 8001144:	2207      	movs	r2, #7
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_ADC_Init+0x94>)
 800114a:	2207      	movs	r2, #7
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_ADC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_ADC_Init+0x94>)
 800115e:	f002 fd0f 	bl	8003b80 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001168:	f000 fe8e 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000180 	.word	0x20000180
 8001174:	40012400 	.word	0x40012400

08001178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_ADC_MspInit+0x24>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d103      	bne.n	8001192 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800118a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800118e:	f7ff ff7b 	bl	8001088 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012400 	.word	0x40012400

080011a0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_ADC_MspDeInit+0x24>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d103      	bne.n	80011ba <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b6:	f7ff ff7f 	bl	80010b8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012400 	.word	0x40012400

080011c8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <SYS_InitMeasurement+0x14>)
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <SYS_InitMeasurement+0x18>)
 80011d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000180 	.word	0x20000180
 80011e0:	40012400 	.word	0x40012400

080011e4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <SYS_GetBatteryLevel+0x5c>)
 80011f4:	f000 f82a 	bl	800124c <ADC_ReadChannels>
 80011f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	e016      	b.n	8001234 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <SYS_GetBatteryLevel+0x60>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	4293      	cmp	r3, r2
 8001210:	d00b      	beq.n	800122a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <SYS_GetBatteryLevel+0x60>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f640 43e4 	movw	r3, #3300	; 0xce4
 800121c:	fb03 f202 	mul.w	r2, r3, r2
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	e004      	b.n	8001234 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SYS_GetBatteryLevel+0x64>)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001234:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	b4002000 	.word	0xb4002000
 8001244:	1fff75aa 	.word	0x1fff75aa
 8001248:	004c08d8 	.word	0x004c08d8

0800124c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001264:	f7ff ff3a 	bl	80010dc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <ADC_ReadChannels+0x88>)
 800126a:	f003 faa8 	bl	80047be <HAL_ADCEx_Calibration_Start>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001274:	f000 fe08 	bl	8001e88 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <ADC_ReadChannels+0x88>)
 800128c:	f002 ffb4 	bl	80041f8 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001296:	f000 fdf7 	bl	8001e88 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <ADC_ReadChannels+0x88>)
 800129c:	f002 fe90 	bl	8003fc0 <HAL_ADC_Start>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80012a6:	f000 fdef 	bl	8001e88 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012aa:	f04f 31ff 	mov.w	r1, #4294967295
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012b0:	f002 fefe 	bl	80040b0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012b6:	f002 fec9 	bl	800404c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012bc:	f002 ff8f 	bl	80041de <HAL_ADC_GetValue>
 80012c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <ADC_ReadChannels+0x88>)
 80012c4:	f002 fdf0 	bl	8003ea8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000180 	.word	0x20000180

080012d8 <LL_AHB1_GRP1_EnableClock>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800130c:	2004      	movs	r0, #4
 800130e:	f7ff ffe3 	bl	80012d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff ffe0 	bl	80012d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	200b      	movs	r0, #11
 800131e:	f003 fbf4 	bl	8004b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001322:	200b      	movs	r0, #11
 8001324:	f003 fc0b 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	200c      	movs	r0, #12
 800132e:	f003 fbec 	bl	8004b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001332:	200c      	movs	r0, #12
 8001334:	f003 fc03 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	203d      	movs	r0, #61	; 0x3d
 800133e:	f003 fbe4 	bl	8004b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001342:	203d      	movs	r0, #61	; 0x3d
 8001344:	f003 fbfb 	bl	8004b3e <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001362:	d311      	bcc.n	8001388 <FLASH_IF_Write+0x3c>
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <FLASH_IF_Write+0x48>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	029a      	lsls	r2, r3, #10
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <FLASH_IF_Write+0x4c>)
 800136c:	4013      	ands	r3, r2
 800136e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001372:	3b01      	subs	r3, #1
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4293      	cmp	r3, r2
 8001378:	d306      	bcc.n	8001388 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f85a 	bl	8001438 <FLASH_IF_INT_Write>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	1fff75e0 	.word	0x1fff75e0
 8001398:	03fffc00 	.word	0x03fffc00

0800139c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013b2:	d311      	bcc.n	80013d8 <FLASH_IF_Read+0x3c>
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <FLASH_IF_Read+0x48>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	029a      	lsls	r2, r3, #10
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <FLASH_IF_Read+0x4c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d306      	bcc.n	80013d8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f93a 	bl	8001648 <FLASH_IF_INT_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	1fff75e0 	.word	0x1fff75e0
 80013e8:	03fffc00 	.word	0x03fffc00

080013ec <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001400:	d310      	bcc.n	8001424 <FLASH_IF_Erase+0x38>
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <FLASH_IF_Erase+0x44>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	029a      	lsls	r2, r3, #10
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <FLASH_IF_Erase+0x48>)
 800140a:	4013      	ands	r3, r2
 800140c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001410:	3b01      	subs	r3, #1
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4293      	cmp	r3, r2
 8001416:	d305      	bcc.n	8001424 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f932 	bl	8001684 <FLASH_IF_INT_Erase>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	1fff75e0 	.word	0x1fff75e0
 8001434:	03fffc00 	.word	0x03fffc00

08001438 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <FLASH_IF_INT_Write+0x3e>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <FLASH_IF_INT_Write+0x3e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001476:	f06f 0305 	mvn.w	r3, #5
 800147a:	e0da      	b.n	8001632 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800147c:	f000 f992 	bl	80017a4 <FLASH_IF_INT_Clear_Error>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001486:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 80cf 	bne.w	800162e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001490:	f004 f832 	bl	80054f8 <HAL_FLASH_Unlock>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80c6 	bne.w	8001628 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80014a2:	4b66      	ldr	r3, [pc, #408]	; (800163c <FLASH_IF_INT_Write+0x204>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0299      	lsls	r1, r3, #10
 80014a8:	4b65      	ldr	r3, [pc, #404]	; (8001640 <FLASH_IF_INT_Write+0x208>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	0adb      	lsrs	r3, r3, #11
 80014b8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80014ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a5d      	ldr	r2, [pc, #372]	; (800163c <FLASH_IF_INT_Write+0x204>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	0291      	lsls	r1, r2, #10
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <FLASH_IF_INT_Write+0x208>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d4:	fb01 f202 	mul.w	r2, r1, r2
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	0ada      	lsrs	r2, r3, #11
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d905      	bls.n	80014f6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fa:	e089      	b.n	8001610 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001502:	02db      	lsls	r3, r3, #11
 8001504:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f925 	bl	8001758 <FLASH_IF_INT_IsEmpty>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d031      	beq.n	8001578 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800151c:	23fa      	movs	r3, #250	; 0xfa
 800151e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001522:	e07e      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001524:	4b47      	ldr	r3, [pc, #284]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f88a 	bl	8001648 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153e:	4413      	add	r3, r2
 8001540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001544:	b292      	uxth	r2, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f01a fdc2 	bl	801c0d0 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f896 	bl	8001684 <FLASH_IF_INT_Erase>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800155e:	23fe      	movs	r3, #254	; 0xfe
 8001560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001564:	e05d      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <FLASH_IF_INT_Write+0x20c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e005      	b.n	8001584 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
 8001588:	e026      	b.n	80015d8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800158a:	6a3a      	ldr	r2, [r7, #32]
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001596:	2001      	movs	r0, #1
 8001598:	f003 ff6a 	bl	8005470 <HAL_FLASH_Program>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d113      	bne.n	80015ca <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	4413      	add	r3, r2
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	4299      	cmp	r1, r3
 80015b4:	bf08      	it	eq
 80015b6:	4290      	cmpeq	r0, r2
 80015b8:	d003      	beq.n	80015c2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80015ba:	23fc      	movs	r3, #252	; 0xfc
 80015bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80015c0:	e00e      	b.n	80015e0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3308      	adds	r3, #8
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	e003      	b.n	80015d2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80015ca:	23fc      	movs	r3, #252	; 0xfc
 80015cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80015d0:	e006      	b.n	80015e0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	3308      	adds	r3, #8
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3d4      	bcc.n	800158a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80015e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80015e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	4413      	add	r3, r2
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80015f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	4413      	add	r3, r2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001602:	bf28      	it	cs
 8001604:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	3301      	adds	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001618:	429a      	cmp	r2, r3
 800161a:	f4ff af6f 	bcc.w	80014fc <FLASH_IF_INT_Write+0xc4>
 800161e:	e000      	b.n	8001622 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001620:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001622:	f003 ff8b 	bl	800553c <HAL_FLASH_Lock>
 8001626:	e002      	b.n	800162e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001628:	23fb      	movs	r3, #251	; 0xfb
 800162a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800162e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001632:	4618      	mov	r0, r3
 8001634:	3740      	adds	r7, #64	; 0x40
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	1fff75e0 	.word	0x1fff75e0
 8001640:	03fffc00 	.word	0x03fffc00
 8001644:	200001e4 	.word	0x200001e4

08001648 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <FLASH_IF_INT_Read+0x1c>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001664:	f06f 0305 	mvn.w	r3, #5
 8001668:	e008      	b.n	800167c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f01a fd2c 	bl	801c0d0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80016a4:	f06f 0305 	mvn.w	r3, #5
 80016a8:	e04e      	b.n	8001748 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80016aa:	f000 f87b 	bl	80017a4 <FLASH_IF_INT_Clear_Error>
 80016ae:	4603      	mov	r3, r0
 80016b0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80016b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d144      	bne.n	8001744 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016ba:	f003 ff1d 	bl	80054f8 <HAL_FLASH_Unlock>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13d      	bne.n	8001740 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80016c4:	2302      	movs	r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <FLASH_IF_INT_Erase+0xcc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0299      	lsls	r1, r3, #10
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <FLASH_IF_INT_Erase+0xd0>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	0adb      	lsrs	r3, r3, #11
 80016e4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <FLASH_IF_INT_Erase+0xcc>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	0291      	lsls	r1, r2, #10
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <FLASH_IF_INT_Erase+0xd0>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001700:	fb01 f202 	mul.w	r2, r1, r2
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	0ada      	lsrs	r2, r3, #11
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	3301      	adds	r3, #1
 800170e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001710:	f107 0214 	add.w	r2, r7, #20
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f003 ffee 	bl	80056fc <HAL_FLASHEx_Erase>
 8001720:	4603      	mov	r3, r0
 8001722:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001724:	7fbb      	ldrb	r3, [r7, #30]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d101      	bne.n	8001734 <FLASH_IF_INT_Erase+0xb0>
 8001730:	2301      	movs	r3, #1
 8001732:	e001      	b.n	8001738 <FLASH_IF_INT_Erase+0xb4>
 8001734:	f06f 0301 	mvn.w	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800173a:	f003 feff 	bl	800553c <HAL_FLASH_Lock>
 800173e:	e001      	b.n	8001744 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001740:	23fb      	movs	r3, #251	; 0xfb
 8001742:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001744:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	1fff75e0 	.word	0x1fff75e0
 8001754:	03fffc00 	.word	0x03fffc00

08001758 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	e011      	b.n	8001790 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001776:	bf08      	it	eq
 8001778:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800177c:	d002      	beq.n	8001784 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800177e:	2301      	movs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      break;
 8001782:	e009      	b.n	8001798 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3308      	adds	r3, #8
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3e9      	bcc.n	800176c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80017aa:	23fb      	movs	r3, #251	; 0xfb
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80017ae:	f003 fea3 	bl	80054f8 <HAL_FLASH_Unlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d110      	bne.n	80017da <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80017c6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80017ca:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80017cc:	f003 feb6 	bl	800553c <HAL_FLASH_Lock>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	58004000 	.word	0x58004000

080017ec <LL_AHB2_GRP1_EnableClock>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdb 	bl	80017ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff ffd8 	bl	80017ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff ffd5 	bl	80017ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001848:	4825      	ldr	r0, [pc, #148]	; (80018e0 <MX_GPIO_Init+0xc4>)
 800184a:	f004 fa59 	bl	8005d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_GPIO_Init+0xc4>)
 8001854:	f004 fa54 	bl	8005d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f240 2131 	movw	r1, #561	; 0x231
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f004 fa4d 	bl	8005d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001866:	2338      	movs	r3, #56	; 0x38
 8001868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <MX_GPIO_Init+0xc4>)
 800187c:	f004 f812 	bl	80058a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <MX_GPIO_Init+0xc4>)
 8001898:	f004 f804 	bl	80058a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800189c:	2331      	movs	r3, #49	; 0x31
 800189e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f003 fff6 	bl	80058a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 80018b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018be:	2311      	movs	r3, #17
 80018c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f003 ffe7 	bl	80058a4 <HAL_GPIO_Init>

}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48000400 	.word	0x48000400

080018e4 <LL_AHB2_GRP1_EnableClock>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001908:	68fb      	ldr	r3, [r7, #12]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_APB1_GRP1_EnableClock>:
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_I2C2_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_I2C2_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <MX_I2C2_Init+0x7c>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_I2C2_Init+0x74>)
 800195c:	2201      	movs	r2, #1
 800195e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_I2C2_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_I2C2_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800197e:	480e      	ldr	r0, [pc, #56]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001980:	f004 f9ee 	bl	8005d60 <HAL_I2C_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800198a:	f000 fa7d 	bl	8001e88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198e:	2100      	movs	r1, #0
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <MX_I2C2_Init+0x74>)
 8001992:	f004 fec9 	bl	8006728 <HAL_I2CEx_ConfigAnalogFilter>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800199c:	f000 fa74 	bl	8001e88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_I2C2_Init+0x74>)
 80019a4:	f004 ff0a 	bl	80067bc <HAL_I2CEx_ConfigDigitalFilter>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fa6b 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001e8 	.word	0x200001e8
 80019bc:	40005800 	.word	0x40005800
 80019c0:	00707cbb 	.word	0x00707cbb

080019c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b096      	sub	sp, #88	; 0x58
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2238      	movs	r2, #56	; 0x38
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f01b fe37 	bl	801d658 <memset>
  if(i2cHandle->Instance==I2C2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_I2C_MspInit+0xb0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d13b      	bne.n	8001a6c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019f8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 f996 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a0e:	f000 fa3b 	bl	8001e88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff ff66 	bl	80018e4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff ff63 	bl	80018e4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a24:	2312      	movs	r3, #18
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a30:	2304      	movs	r3, #4
 8001a32:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f003 ff31 	bl	80058a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a50:	2301      	movs	r3, #1
 8001a52:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a54:	2304      	movs	r3, #4
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <HAL_I2C_MspInit+0xb4>)
 8001a60:	f003 ff20 	bl	80058a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a64:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a68:	f7ff ff54 	bl	8001914 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3758      	adds	r7, #88	; 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005800 	.word	0x40005800
 8001a78:	48000400 	.word	0x48000400

08001a7c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	f023 0218 	bic.w	r2, r3, #24
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f001 fe7a 	bl	80037a4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f83e 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab4:	f7ff feb2 	bl	800181c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ab8:	f00a f946 	bl	800bd48 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001abc:	f001 facc 	bl	8003058 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001ac0:	f7ff ff40 	bl	8001944 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001ac4:	f000 ff22 	bl	800290c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001ac8:	f000 ff54 	bl	8002974 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001acc:	f000 fb40 	bl	8002150 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <main+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]

  F1_QueueIni(); // init Function queue
 8001ad6:	f000 f9e3 	bl	8001ea0 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)aRXBufferUser, RX_BUFFER_SIZE);
 8001ada:	2220      	movs	r2, #32
 8001adc:	4910      	ldr	r1, [pc, #64]	; (8001b20 <main+0x78>)
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <main+0x7c>)
 8001ae0:	f007 fe32 	bl	8009748 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f004 f907 	bl	8005d00 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001af2:	480d      	ldr	r0, [pc, #52]	; (8001b28 <main+0x80>)
 8001af4:	f007 fbaa 	bl	800924c <HAL_TIM_Base_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001af8:	f00a f92e 	bl	800bd58 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    F1_pull()();
 8001afc:	f000 fa14 	bl	8001f28 <F1_pull>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4798      	blx	r3
    if(UART2_SET)MeasurePM_sens();
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <main+0x74>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <main+0x68>
 8001b0c:	f000 f87a 	bl	8001c04 <MeasurePM_sens>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001b10:	2120      	movs	r1, #32
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <main+0x84>)
 8001b14:	f004 f90b 	bl	8005d2e <HAL_GPIO_TogglePin>
    MX_LoRaWAN_Process();
 8001b18:	e7ee      	b.n	8001af8 <main+0x50>
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	2000023c 	.word	0x2000023c
 8001b24:	200004b0 	.word	0x200004b0
 8001b28:	2000037c 	.word	0x2000037c
 8001b2c:	48000400 	.word	0x48000400

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09a      	sub	sp, #104	; 0x68
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2248      	movs	r2, #72	; 0x48
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f01b fd8a 	bl	801d658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b56:	f004 fe7d 	bl	8006854 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ff8e 	bl	8001a7c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <SystemClock_Config+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <SystemClock_Config+0xb8>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <SystemClock_Config+0xb8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001b80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b86:	2381      	movs	r3, #129	; 0x81
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 f9a3 	bl	8006eec <HAL_RCC_OscConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001bac:	f000 f96c 	bl	8001e88 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001bb0:	234f      	movs	r3, #79	; 0x4f
 8001bb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fd0e 	bl	80075f0 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bda:	f000 f955 	bl	8001e88 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3768      	adds	r7, #104	; 0x68
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	58000400 	.word	0x58000400

08001bec <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f004 f881 	bl	8005d00 <HAL_GPIO_WritePin>

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	if(aRXBufferUser[0]==0x02 && aRXBufferUser[31]== 0x03){
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d137      	bne.n	8001c84 <MeasurePM_sens+0x80>
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c16:	7fdb      	ldrb	r3, [r3, #31]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d132      	bne.n	8001c84 <MeasurePM_sens+0x80>

		PM2_5 = aRXBufferUser[5] + aRXBufferUser[6] * 256
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c20:	795b      	ldrb	r3, [r3, #5]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c28:	799b      	ldrb	r3, [r3, #6]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	441a      	add	r2, r3
				+ aRXBufferUser[7] * 65536;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c32:	79db      	ldrb	r3, [r3, #7]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
		PM2_5 = aRXBufferUser[5] + aRXBufferUser[6] * 256
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MeasurePM_sens+0xa8>)
 8001c3e:	601a      	str	r2, [r3, #0]
		PM10 = aRXBufferUser[9] + aRXBufferUser[10] * 256
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c42:	7a5b      	ldrb	r3, [r3, #9]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c4a:	7a9b      	ldrb	r3, [r3, #10]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	441a      	add	r2, r3
				+ aRXBufferUser[11] * 65536;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c54:	7adb      	ldrb	r3, [r3, #11]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
		PM10 = aRXBufferUser[9] + aRXBufferUser[10] * 256
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MeasurePM_sens+0xac>)
 8001c60:	601a      	str	r2, [r3, #0]
		PM1 = aRXBufferUser[1] + aRXBufferUser[2] * 256
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c6c:	789b      	ldrb	r3, [r3, #2]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	441a      	add	r2, r3
				+ aRXBufferUser[3] * 65536;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	4413      	add	r3, r2
 8001c7e:	461a      	mov	r2, r3
		PM1 = aRXBufferUser[1] + aRXBufferUser[2] * 256
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MeasurePM_sens+0xb0>)
 8001c82:	601a      	str	r2, [r3, #0]

}
		   HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE, &RxLen, 1000);
 8001c84:	1dbb      	adds	r3, r7, #6
 8001c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	4906      	ldr	r1, [pc, #24]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <MeasurePM_sens+0xb4>)
 8001c92:	f009 fee8 	bl	800ba66 <HAL_UARTEx_ReceiveToIdle>
	       HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE);
 8001c96:	2220      	movs	r2, #32
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <MeasurePM_sens+0xa4>)
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MeasurePM_sens+0xb4>)
 8001c9c:	f007 fd54 	bl	8009748 <HAL_UART_Receive_IT>


}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000023c 	.word	0x2000023c
 8001cac:	2000025c 	.word	0x2000025c
 8001cb0:	20000264 	.word	0x20000264
 8001cb4:	20000260 	.word	0x20000260
 8001cb8:	200004b0 	.word	0x200004b0
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <MeasureTempHum>:

void MeasureTempHum(void){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2306      	movs	r3, #6
 8001ccc:	4a40      	ldr	r2, [pc, #256]	; (8001dd0 <MeasureTempHum+0x110>)
 8001cce:	2188      	movs	r1, #136	; 0x88
 8001cd0:	4840      	ldr	r0, [pc, #256]	; (8001dd4 <MeasureTempHum+0x114>)
 8001cd2:	f004 f9c9 	bl	8006068 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <MeasureTempHum+0x110>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <MeasureTempHum+0x110>)
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <MeasureTempHum+0x118>)
 8001cec:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <MeasureTempHum+0x110>)
 8001cf0:	78db      	ldrb	r3, [r3, #3]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <MeasureTempHum+0x110>)
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <MeasureTempHum+0x11c>)
 8001d04:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <MeasureTempHum+0x118>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ffc0 	bl	8000c90 <__aeabi_ui2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb9c 	bl	8000450 <__aeabi_f2d>
 8001d18:	a329      	add	r3, pc, #164	; (adr r3, 8001dc0 <MeasureTempHum+0x100>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fbef 	bl	8000500 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	a327      	add	r3, pc, #156	; (adr r3, 8001dc8 <MeasureTempHum+0x108>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fd10 	bl	8000754 <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <MeasureTempHum+0x120>)
 8001d42:	f7fe fa25 	bl	8000190 <__aeabi_dsub>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe fe99 	bl	8000a84 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <MeasureTempHum+0x124>)
 8001d56:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MeasureTempHum+0x11c>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe ff97 	bl	8000c90 <__aeabi_ui2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb73 	bl	8000450 <__aeabi_f2d>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <MeasureTempHum+0x128>)
 8001d70:	f7fe fbc6 	bl	8000500 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	a312      	add	r3, pc, #72	; (adr r3, 8001dc8 <MeasureTempHum+0x108>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fce7 	bl	8000754 <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MeasureTempHum+0x12c>)
 8001d94:	f7fe f9fc 	bl	8000190 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe fe70 	bl	8000a84 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MeasureTempHum+0x130>)
 8001da8:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <MeasureTempHum+0x134>)
 8001db2:	2188      	movs	r1, #136	; 0x88
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <MeasureTempHum+0x114>)
 8001db6:	f004 f863 	bl	8005e80 <HAL_I2C_Master_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	4065e000 	.word	0x4065e000
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40efffe0 	.word	0x40efffe0
 8001dd0:	20000274 	.word	0x20000274
 8001dd4:	200001e8 	.word	0x200001e8
 8001dd8:	2000027a 	.word	0x2000027a
 8001ddc:	2000027c 	.word	0x2000027c
 8001de0:	40468000 	.word	0x40468000
 8001de4:	20000268 	.word	0x20000268
 8001de8:	405f4000 	.word	0x405f4000
 8001dec:	40180000 	.word	0x40180000
 8001df0:	2000026c 	.word	0x2000026c
 8001df4:	20000001 	.word	0x20000001

08001df8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d12e      	bne.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x6e>
   {
	  counter++;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e10:	6013      	str	r3, [r2, #0]
      switch(counter){
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8001e1a:	d007      	beq.n	8001e2c <HAL_TIM_PeriodElapsedCallback+0x34>
 8001e1c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8001e20:	dc0f      	bgt.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d006      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001e26:	2b0a      	cmp	r3, #10
 8001e28:	d008      	beq.n	8001e3c <HAL_TIM_PeriodElapsedCallback+0x44>
 8001e2a:	e00a      	b.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 8001e2c:	4812      	ldr	r0, [pc, #72]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e2e:	f000 f847 	bl	8001ec0 <F1_push>

    	  break;
 8001e32:	e006      	b.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]

    	  break;
 8001e3a:	e002      	b.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);

    	  PM_measure_flag = 0;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
      }
      F1_push(MeasureTempHum);
 8001e42:	480f      	ldr	r0, [pc, #60]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e44:	f000 f83c 	bl	8001ec0 <F1_push>

      counter %= 20;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e4e:	fb83 2301 	smull	r2, r3, r3, r1
 8001e52:	10da      	asrs	r2, r3, #3
 8001e54:	17cb      	asrs	r3, r1, #31
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	1aca      	subs	r2, r1, r3
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e64:	601a      	str	r2, [r3, #0]
   }
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000037c 	.word	0x2000037c
 8001e74:	20000270 	.word	0x20000270
 8001e78:	08001bed 	.word	0x08001bed
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	08001cc1 	.word	0x08001cc1
 8001e84:	66666667 	.word	0x66666667

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>

08001e92 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <F1_QueueIni+0x18>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <F1_QueueIni+0x1c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000280 	.word	0x20000280
 8001ebc:	20000284 	.word	0x20000284

08001ec0 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <F1_push+0x5c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	425a      	negs	r2, r3
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	f002 020f 	and.w	r2, r2, #15
 8001ed8:	bf58      	it	pl
 8001eda:	4253      	negpl	r3, r2
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <F1_push+0x60>)
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <F1_push+0x28>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e014      	b.n	8001f12 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <F1_push+0x5c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	490b      	ldr	r1, [pc, #44]	; (8001f1c <F1_push+0x5c>)
 8001ef0:	600a      	str	r2, [r1, #0]
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <F1_push+0x64>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <F1_push+0x5c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	425a      	negs	r2, r3
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	f002 020f 	and.w	r2, r2, #15
 8001f08:	bf58      	it	pl
 8001f0a:	4253      	negpl	r3, r2
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <F1_push+0x5c>)
 8001f0e:	6013      	str	r3, [r2, #0]
  return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000280 	.word	0x20000280
 8001f20:	20000284 	.word	0x20000284
 8001f24:	20000288 	.word	0x20000288

08001f28 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <F1_pull+0x4c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <F1_pull+0x50>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d101      	bne.n	8001f3e <F1_pull+0x16>
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <F1_pull+0x54>)
 8001f3c:	e014      	b.n	8001f68 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <F1_pull+0x50>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <F1_pull+0x50>)
 8001f46:	600a      	str	r2, [r1, #0]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <F1_pull+0x58>)
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <F1_pull+0x50>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	425a      	negs	r2, r3
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	f002 020f 	and.w	r2, r2, #15
 8001f5e:	bf58      	it	pl
 8001f60:	4253      	negpl	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <F1_pull+0x50>)
 8001f64:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001f66:	687b      	ldr	r3, [r7, #4]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000280 	.word	0x20000280
 8001f78:	20000284 	.word	0x20000284
 8001f7c:	08001e93 	.word	0x08001e93
 8001f80:	20000288 	.word	0x20000288

08001f84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_APB1_GRP1_EnableClock>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	222c      	movs	r2, #44	; 0x2c
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f01b fb39 	bl	801d658 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_RTC_Init+0x9c>)
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <MX_RTC_Init+0xa0>)
 8001fea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <MX_RTC_Init+0x9c>)
 8001fee:	221f      	movs	r2, #31
 8001ff0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_RTC_Init+0x9c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_RTC_Init+0x9c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_RTC_Init+0x9c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_RTC_Init+0x9c>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_RTC_Init+0x9c>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_RTC_Init+0x9c>)
 8002014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800201a:	4815      	ldr	r0, [pc, #84]	; (8002070 <MX_RTC_Init+0x9c>)
 800201c:	f005 ffa4 	bl	8007f68 <HAL_RTC_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002026:	f7ff ff2f 	bl	8001e88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800202a:	4811      	ldr	r0, [pc, #68]	; (8002070 <MX_RTC_Init+0x9c>)
 800202c:	f006 fa9a 	bl	8008564 <HAL_RTCEx_SetSSRU_IT>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002036:	f7ff ff27 	bl	8001e88 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002046:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800204a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800204c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_RTC_Init+0x9c>)
 800205a:	f006 f807 	bl	800806c <HAL_RTC_SetAlarm_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002064:	f7ff ff10 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200002c8 	.word	0x200002c8
 8002074:	40002800 	.word	0x40002800

08002078 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	; 0x40
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	2238      	movs	r2, #56	; 0x38
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f01b fae5 	bl	801d658 <memset>
  if(rtcHandle->Instance==RTC)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a16      	ldr	r2, [pc, #88]	; (80020ec <HAL_RTC_MspInit+0x74>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d125      	bne.n	80020e4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800209c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800209e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	4618      	mov	r0, r3
 80020aa:	f005 fe43 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020b4:	f7ff fee8 	bl	8001e88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020b8:	f7ff ff64 	bl	8001f84 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020c0:	f7ff ff70 	bl	8001fa4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2002      	movs	r0, #2
 80020ca:	f002 fd1e 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80020ce:	2002      	movs	r0, #2
 80020d0:	f002 fd35 	bl	8004b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	202a      	movs	r0, #42	; 0x2a
 80020da:	f002 fd16 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80020de:	202a      	movs	r0, #42	; 0x2a
 80020e0:	f002 fd2d 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020e4:	bf00      	nop
 80020e6:	3740      	adds	r7, #64	; 0x40
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40002800 	.word	0x40002800

080020f0 <LL_AHB2_GRP1_EnableClock>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <LL_APB1_GRP1_EnableClock>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <MX_SPI2_Init+0x78>)
 8002158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_SPI2_Init+0x74>)
 800215c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002160:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_SPI2_Init+0x74>)
 800216a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800216e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_SPI2_Init+0x74>)
 800217e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002182:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002186:	2218      	movs	r2, #24
 8002188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_SPI2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_SPI2_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_SPI2_Init+0x74>)
 800219e:	2207      	movs	r2, #7
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_SPI2_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_SPI2_Init+0x74>)
 80021aa:	2208      	movs	r2, #8
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_SPI2_Init+0x74>)
 80021b0:	f006 fa66 	bl	8008680 <HAL_SPI_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021ba:	f7ff fe65 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000300 	.word	0x20000300
 80021c8:	40003800 	.word	0x40003800

080021cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b096      	sub	sp, #88	; 0x58
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	2238      	movs	r2, #56	; 0x38
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f01b fa33 	bl	801d658 <memset>
  if(spiHandle->Instance==SPI2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_SPI_MspInit+0xb0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d13b      	bne.n	8002274 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80021fc:	2310      	movs	r3, #16
 80021fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4618      	mov	r0, r3
 800220c:	f005 fd92 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002216:	f7ff fe37 	bl	8001e88 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800221e:	f7ff ff7f 	bl	8002120 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2002      	movs	r0, #2
 8002224:	f7ff ff64 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	2001      	movs	r0, #1
 800222a:	f7ff ff61 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800222e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002240:	2305      	movs	r3, #5
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <HAL_SPI_MspInit+0xb4>)
 800224c:	f003 fb2a 	bl	80058a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002262:	2305      	movs	r3, #5
 8002264:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002270:	f003 fb18 	bl	80058a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002274:	bf00      	nop
 8002276:	3758      	adds	r7, #88	; 0x58
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40003800 	.word	0x40003800
 8002280:	48000400 	.word	0x48000400

08002284 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800228a:	2201      	movs	r2, #1
 800228c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	58000400 	.word	0x58000400

0800229c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80022b8:	f001 fa94 	bl	80037e4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80022bc:	f7ff ffe2 	bl	8002284 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f004 fb59 	bl	8006978 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}

080022ca <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80022ce:	f001 fa97 	bl	8003800 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80022d2:	f001 f90b 	bl	80034ec <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}

080022da <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80022de:	f001 fa81 	bl	80037e4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80022e2:	2101      	movs	r1, #1
 80022e4:	2000      	movs	r0, #0
 80022e6:	f004 fac3 	bl	8006870 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}

080022ee <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80022f2:	f001 fa85 	bl	8003800 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230a:	e7fe      	b.n	800230a <NMI_Handler+0x4>

0800230c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <HardFault_Handler+0x4>

08002312 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <MemManage_Handler+0x4>

08002318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <BusFault_Handler+0x4>

0800231e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <UsageFault_Handler+0x4>

08002324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800235a:	f006 f93f 	bl	80085dc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200002c8 	.word	0x200002c8

08002368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Channel1_IRQHandler+0x10>)
 800236e:	f002 fe7d 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000544 	.word	0x20000544

0800237c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel2_IRQHandler+0x10>)
 8002382:	f002 fe73 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200005a4 	.word	0x200005a4

08002390 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <TIM16_IRQHandler+0x18>)
 8002396:	f006 ffa5 	bl	80092e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <TIM16_IRQHandler+0x1c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a02      	ldr	r2, [pc, #8]	; (80023ac <TIM16_IRQHandler+0x1c>)
 80023a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000037c 	.word	0x2000037c
 80023ac:	20000364 	.word	0x20000364

080023b0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <TIM17_IRQHandler+0x18>)
 80023b6:	f006 ff95 	bl	80092e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <TIM17_IRQHandler+0x1c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a02      	ldr	r2, [pc, #8]	; (80023cc <TIM17_IRQHandler+0x1c>)
 80023c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200003c8 	.word	0x200003c8
 80023cc:	20000368 	.word	0x20000368

080023d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <USART1_IRQHandler+0x10>)
 80023d6:	f007 fa83 	bl	80098e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000041c 	.word	0x2000041c

080023e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USART2_IRQHandler+0x10>)
 80023ea:	f007 fa79 	bl	80098e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200004b0 	.word	0x200004b0

080023f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <RTC_Alarm_IRQHandler+0x10>)
 80023fe:	f005 ff9d 	bl	800833c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200002c8 	.word	0x200002c8

0800240c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002412:	f006 fd25 	bl	8008e60 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000036c 	.word	0x2000036c

08002420 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002426:	f002 ffd1 	bl	80053cc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200005a4 	.word	0x200005a4

08002434 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002458:	68fb      	ldr	r3, [r7, #12]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_SUBGHZ_Init+0x20>)
 800246a:	2208      	movs	r2, #8
 800246c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_SUBGHZ_Init+0x20>)
 8002470:	f006 fa74 	bl	800895c <HAL_SUBGHZ_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800247a:	f7ff fd05 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000036c 	.word	0x2000036c

08002488 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff ffcf 	bl	8002434 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2032      	movs	r0, #50	; 0x32
 800249c:	f002 fb35 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80024a0:	2032      	movs	r0, #50	; 0x32
 80024a2:	f002 fb4c 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <LL_RCC_SetClkAfterWakeFromStop>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <LL_FLASH_GetUDN+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	1fff7580 	.word	0x1fff7580

080024e8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <LL_FLASH_GetDeviceID+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	1fff7584 	.word	0x1fff7584

08002500 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <LL_FLASH_GetSTCompanyID+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0a1b      	lsrs	r3, r3, #8
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	1fff7584 	.word	0x1fff7584

08002518 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff ffc6 	bl	80024ae <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002522:	f01a fb63 	bl	801cbec <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <SystemApp_Init+0x50>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800252c:	f000 f98c 	bl	8002848 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002530:	f01a fdec 	bl	801d10c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <SystemApp_Init+0x54>)
 8002536:	f01a fe97 	bl	801d268 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <SystemApp_Init+0x58>)
 800253c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002540:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002542:	2002      	movs	r0, #2
 8002544:	f01a fe9e 	bl	801d284 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002548:	f7fe fe3e 	bl	80011c8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800254c:	f000 f9b4 	bl	80028b8 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002550:	f019 fd18 	bl	801bf84 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002554:	2101      	movs	r1, #1
 8002556:	2001      	movs	r0, #1
 8002558:	f019 fd54 	bl	801c004 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800255c:	2101      	movs	r1, #1
 800255e:	2001      	movs	r0, #1
 8002560:	f019 fd20 	bl	801bfa4 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000378 	.word	0x20000378
 800256c:	08002741 	.word	0x08002741
 8002570:	58004000 	.word	0x58004000

08002574 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002578:	f019 fd74 	bl	801c064 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800258a:	f7fe fe2b 	bl	80011e4 <SYS_GetBatteryLevel>
 800258e:	4603      	mov	r3, r0
 8002590:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002598:	4293      	cmp	r3, r2
 800259a:	d902      	bls.n	80025a2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 800259c:	23fe      	movs	r3, #254	; 0xfe
 800259e:	71fb      	strb	r3, [r7, #7]
 80025a0:	e014      	b.n	80025cc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80025a2:	88bb      	ldrh	r3, [r7, #4]
 80025a4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80025a8:	d202      	bcs.n	80025b0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	e00d      	b.n	80025cc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80025b0:	88bb      	ldrh	r3, [r7, #4]
 80025b2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80025b6:	461a      	mov	r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	01db      	lsls	r3, r3, #7
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <GetBatteryLevel+0x58>)
 80025c4:	fba3 2302 	umull	r2, r3, r3, r2
 80025c8:	09db      	lsrs	r3, r3, #7
 80025ca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80025cc:	79fb      	ldrb	r3, [r7, #7]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	1b4e81b5 	.word	0x1b4e81b5

080025dc <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f93b 	bl	8002864 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fba5 	bl	8000d40 <__aeabi_f2iz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80025fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002606:	b590      	push	{r4, r7, lr}
 8002608:	b087      	sub	sp, #28
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002612:	f7ff ff5f 	bl	80024d4 <LL_FLASH_GetUDN>
 8002616:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d138      	bne.n	8002692 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002620:	f001 f8fc 	bl	800381c <HAL_GetUIDw0>
 8002624:	4604      	mov	r4, r0
 8002626:	f001 f90d 	bl	8003844 <HAL_GetUIDw2>
 800262a:	4603      	mov	r3, r0
 800262c:	4423      	add	r3, r4
 800262e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002630:	f001 f8fe 	bl	8003830 <HAL_GetUIDw1>
 8002634:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	0e1a      	lsrs	r2, r3, #24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3307      	adds	r3, #7
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	0c1a      	lsrs	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3306      	adds	r3, #6
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	0a1a      	lsrs	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3305      	adds	r3, #5
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0e1a      	lsrs	r2, r3, #24
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3303      	adds	r3, #3
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0c1a      	lsrs	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3302      	adds	r3, #2
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0a1a      	lsrs	r2, r3, #8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002690:	e031      	b.n	80026f6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3307      	adds	r3, #7
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	0a1a      	lsrs	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3306      	adds	r3, #6
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0c1a      	lsrs	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3305      	adds	r3, #5
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	0e1a      	lsrs	r2, r3, #24
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80026c0:	f7ff ff12 	bl	80024e8 <LL_FLASH_GetDeviceID>
 80026c4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3303      	adds	r3, #3
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80026d0:	f7ff ff16 	bl	8002500 <LL_FLASH_GetSTCompanyID>
 80026d4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3302      	adds	r3, #2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	0a1a      	lsrs	r2, r3, #8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3301      	adds	r3, #1
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}

080026fe <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80026fe:	b590      	push	{r4, r7, lr}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002706:	f7ff fee5 	bl	80024d4 <LL_FLASH_GetUDN>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d10d      	bne.n	8002736 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800271a:	f001 f87f 	bl	800381c <HAL_GetUIDw0>
 800271e:	4604      	mov	r4, r0
 8002720:	f001 f886 	bl	8003830 <HAL_GetUIDw1>
 8002724:	4603      	mov	r3, r0
 8002726:	405c      	eors	r4, r3
 8002728:	f001 f88c 	bl	8003844 <HAL_GetUIDw2>
 800272c:	4603      	mov	r3, r0
 800272e:	ea84 0203 	eor.w	r2, r4, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
	...

08002740 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	4618      	mov	r0, r3
 8002750:	f019 fd98 	bl	801c284 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <TimestampNow+0x3c>)
 800275e:	2110      	movs	r1, #16
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f81d 	bl	80027a0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fd fd06 	bl	8000178 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29a      	uxth	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	0801d898 	.word	0x0801d898

08002780 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002784:	2101      	movs	r1, #1
 8002786:	2002      	movs	r0, #2
 8002788:	f019 fc0c 	bl	801bfa4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002794:	2100      	movs	r1, #0
 8002796:	2002      	movs	r0, #2
 8002798:	f019 fc04 	bl	801bfa4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80027a0:	b40c      	push	{r2, r3}
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f019 ff35 	bl	801c628 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027c8:	b002      	add	sp, #8
 80027ca:	4770      	bx	lr

080027cc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_GetTick+0x24>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80027f2:	f000 f9dd 	bl	8002bb0 <TIMER_IF_GetTimerValue>
 80027f6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000378 	.word	0x20000378

08002808 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fa53 	bl	8002cbe <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <LL_EXTI_EnableIT_32_63+0x24>)
 800282a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800282e:	4905      	ldr	r1, [pc, #20]	; (8002844 <LL_EXTI_EnableIT_32_63+0x24>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	58000800 	.word	0x58000800

08002848 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 800284c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002850:	f7ff ffe6 	bl	8002820 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002854:	f001 f800 	bl	8003858 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002858:	f001 f804 	bl	8003864 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800285c:	f001 f808 	bl	8003870 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}

08002864 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <EnvSensors_Read+0x40>)
 800286e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <EnvSensors_Read+0x44>)
 8002872:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <EnvSensors_Read+0x48>)
 8002876:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <EnvSensors_Read+0x4c>)
 800288e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <EnvSensors_Read+0x50>)
 8002894:	611a      	str	r2, [r3, #16]

  return 0;
 8002896:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	42480000 	.word	0x42480000
 80028a8:	41900000 	.word	0x41900000
 80028ac:	447a0000 	.word	0x447a0000
 80028b0:	003e090d 	.word	0x003e090d
 80028b4:	000503ab 	.word	0x000503ab

080028b8 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80028c2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_APB2_GRP1_EnableClock>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
	...

0800290c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_TIM16_Init+0x60>)
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <MX_TIM16_Init+0x64>)
 8002914:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_TIM16_Init+0x60>)
 8002918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800291c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <MX_TIM16_Init+0x60>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_TIM16_Init+0x60>)
 8002926:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800292a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_TIM16_Init+0x60>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_TIM16_Init+0x60>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_TIM16_Init+0x60>)
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800293e:	480b      	ldr	r0, [pc, #44]	; (800296c <MX_TIM16_Init+0x60>)
 8002940:	f006 fc2c 	bl	800919c <HAL_TIM_Base_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800294a:	f7ff fa9d 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800294e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002952:	f7ff ffc2 	bl	80028da <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	201c      	movs	r0, #28
 800295c:	f002 f8d5 	bl	8004b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002960:	201c      	movs	r0, #28
 8002962:	f002 f8ec 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000037c 	.word	0x2000037c
 8002970:	40014400 	.word	0x40014400

08002974 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <MX_TIM17_Init+0x5c>)
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <MX_TIM17_Init+0x60>)
 800297c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MX_TIM17_Init+0x5c>)
 8002980:	2200      	movs	r2, #0
 8002982:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_TIM17_Init+0x5c>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_TIM17_Init+0x5c>)
 800298c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002990:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_TIM17_Init+0x5c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <MX_TIM17_Init+0x5c>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_TIM17_Init+0x5c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80029a4:	480a      	ldr	r0, [pc, #40]	; (80029d0 <MX_TIM17_Init+0x5c>)
 80029a6:	f006 fbf9 	bl	800919c <HAL_TIM_Base_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80029b0:	f7ff fa6a 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80029b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029b8:	f7ff ff8f 	bl	80028da <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	201d      	movs	r0, #29
 80029c2:	f002 f8a2 	bl	8004b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80029c6:	201d      	movs	r0, #29
 80029c8:	f002 f8b9 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200003c8 	.word	0x200003c8
 80029d4:	40014800 	.word	0x40014800

080029d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_TIM_Base_MspInit+0x58>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029ee:	f7ff ff74 	bl	80028da <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	201c      	movs	r0, #28
 80029f8:	f002 f887 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80029fc:	201c      	movs	r0, #28
 80029fe:	f002 f89e 	bl	8004b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002a02:	e010      	b.n	8002a26 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10b      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a12:	f7ff ff62 	bl	80028da <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	201d      	movs	r0, #29
 8002a1c:	f002 f875 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002a20:	201d      	movs	r0, #29
 8002a22:	f002 f88c 	bl	8004b3e <HAL_NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800

08002a38 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <TIMER_IF_Init+0x5c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	f083 0301 	eor.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <TIMER_IF_Init+0x60>)
 8002a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a70:	f7ff fab0 	bl	8001fd4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a74:	f000 f856 	bl	8002b24 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <TIMER_IF_Init+0x60>)
 8002a7e:	f005 fc01 	bl	8008284 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <TIMER_IF_Init+0x60>)
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <TIMER_IF_Init+0x60>)
 8002a8c:	f005 fd38 	bl	8008500 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f000 f9d3 	bl	8002e3c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002a96:	f000 f85f 	bl	8002b58 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <TIMER_IF_Init+0x5c>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000414 	.word	0x20000414
 8002ab0:	200002c8 	.word	0x200002c8

08002ab4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	; 0x38
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	222c      	movs	r2, #44	; 0x2c
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f01a fdc4 	bl	801d658 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002ad0:	f000 f828 	bl	8002b24 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <TIMER_IF_StartTimer+0x68>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002aec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002af0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	4807      	ldr	r0, [pc, #28]	; (8002b20 <TIMER_IF_StartTimer+0x6c>)
 8002b02:	f005 fab3 	bl	800806c <HAL_RTC_SetAlarm_IT>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b0c:	f7ff f9bc 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3738      	adds	r7, #56	; 0x38
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000418 	.word	0x20000418
 8002b20:	200002c8 	.word	0x200002c8

08002b24 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <TIMER_IF_StopTimer+0x2c>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <TIMER_IF_StopTimer+0x30>)
 8002b3a:	f005 fba3 	bl	8008284 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <TIMER_IF_StopTimer+0x30>)
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40002800 	.word	0x40002800
 8002b54:	200002c8 	.word	0x200002c8

08002b58 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002b5c:	f000 f98e 	bl	8002e7c <GetTimerTicks>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <TIMER_IF_SetTimerContext+0x18>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b66:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <TIMER_IF_SetTimerContext+0x18>)
 8002b68:	681b      	ldr	r3, [r3, #0]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000418 	.word	0x20000418

08002b74 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <TIMER_IF_GetTimerContext+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000418 	.word	0x20000418

08002b88 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002b92:	f000 f973 	bl	8002e7c <GetTimerTicks>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000418 	.word	0x20000418

08002bb0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <TIMER_IF_GetTimerValue+0x24>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002bc2:	f000 f95b 	bl	8002e7c <GetTimerTicks>
 8002bc6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000414 	.word	0x20000414

08002bd8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002be2:	2303      	movs	r3, #3
 8002be4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002bf2:	b5b0      	push	{r4, r5, r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	2000      	movs	r0, #0
 8002c02:	460a      	mov	r2, r1
 8002c04:	4603      	mov	r3, r0
 8002c06:	0d95      	lsrs	r5, r2, #22
 8002c08:	0294      	lsls	r4, r2, #10
 8002c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fe f8b9 	bl	8000d8c <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}

08002c2c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002c2c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c36:	2100      	movs	r1, #0
 8002c38:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	4605      	mov	r5, r0
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f04f 0a00 	mov.w	sl, #0
 8002c4a:	f04f 0b00 	mov.w	fp, #0
 8002c4e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002c52:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002c56:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002c5a:	4650      	mov	r0, sl
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	1b02      	subs	r2, r0, r4
 8002c60:	eb61 0305 	sbc.w	r3, r1, r5
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	0099      	lsls	r1, r3, #2
 8002c6e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c72:	0090      	lsls	r0, r2, #2
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	eb12 0804 	adds.w	r8, r2, r4
 8002c7c:	eb43 0905 	adc.w	r9, r3, r5
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c94:	4690      	mov	r8, r2
 8002c96:	4699      	mov	r9, r3
 8002c98:	4640      	mov	r0, r8
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	0a82      	lsrs	r2, r0, #10
 8002ca6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002caa:	0a8b      	lsrs	r3, r1, #10
 8002cac:	4613      	mov	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cbc:	4770      	bx	lr

08002cbe <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff93 	bl	8002bf2 <TIMER_IF_Convert_ms2Tick>
 8002ccc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002cce:	f000 f8d5 	bl	8002e7c <GetTimerTicks>
 8002cd2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cd4:	e000      	b.n	8002cd8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002cd6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cd8:	f000 f8d0 	bl	8002e7c <GetTimerTicks>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d8f6      	bhi.n	8002cd6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002cfa:	f01a f8c5 	bl	801ce88 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d0e:	f000 f8a5 	bl	8002e5c <TIMER_IF_BkUp_Read_MSBticks>
 8002d12:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f88f 	bl	8002e3c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002d34:	f000 f8a2 	bl	8002e7c <GetTimerTicks>
 8002d38:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002d3a:	f000 f88f 	bl	8002e5c <TIMER_IF_BkUp_Read_MSBticks>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	2200      	movs	r2, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	000b      	movs	r3, r1
 8002d54:	2200      	movs	r2, #0
 8002d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d58:	2000      	movs	r0, #0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	eb12 0804 	adds.w	r8, r2, r4
 8002d62:	eb43 0905 	adc.w	r9, r3, r5
 8002d66:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	0a82      	lsrs	r2, r0, #10
 8002d78:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d7c:	0a8b      	lsrs	r3, r1, #10
 8002d7e:	4613      	mov	r3, r2
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2200      	movs	r2, #0
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002d90:	f04f 0b00 	mov.w	fp, #0
 8002d94:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff46 	bl	8002c2c <TIMER_IF_Convert_Tick2ms>
 8002da0:	4603      	mov	r3, r0
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002db4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002dc2:	f005 fc2f 	bl	8008624 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200002c8 	.word	0x200002c8

08002dd4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	2101      	movs	r1, #1
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002de2:	f005 fc1f 	bl	8008624 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200002c8 	.word	0x200002c8

08002df4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e02:	f005 fc27 	bl	8008654 <HAL_RTCEx_BKUPRead>
 8002e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e08:	687b      	ldr	r3, [r7, #4]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200002c8 	.word	0x200002c8

08002e18 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e22:	2101      	movs	r1, #1
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e26:	f005 fc15 	bl	8008654 <HAL_RTCEx_BKUPRead>
 8002e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002e2c:	687b      	ldr	r3, [r7, #4]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200002c8 	.word	0x200002c8

08002e3c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4803      	ldr	r0, [pc, #12]	; (8002e58 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002e4a:	f005 fbeb 	bl	8008624 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200002c8 	.word	0x200002c8

08002e5c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e62:	2102      	movs	r1, #2
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e66:	f005 fbf5 	bl	8008654 <HAL_RTCEx_BKUPRead>
 8002e6a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e6c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200002c8 	.word	0x200002c8

08002e7c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e82:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <GetTimerTicks+0x34>)
 8002e84:	f7ff fdd8 	bl	8002a38 <LL_RTC_TIME_GetSubSecond>
 8002e88:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e8a:	e003      	b.n	8002e94 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <GetTimerTicks+0x34>)
 8002e8e:	f7ff fdd3 	bl	8002a38 <LL_RTC_TIME_GetSubSecond>
 8002e92:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e94:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <GetTimerTicks+0x34>)
 8002e96:	f7ff fdcf 	bl	8002a38 <LL_RTC_TIME_GetSubSecond>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d1f4      	bne.n	8002e8c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40002800 	.word	0x40002800

08002eb4 <LL_AHB2_GRP1_EnableClock>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <LL_APB1_GRP1_EnableClock>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f08:	68fb      	ldr	r3, [r7, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <LL_APB1_GRP1_DisableClock>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <LL_APB2_GRP1_EnableClock>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_APB2_GRP1_DisableClock>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	4013      	ands	r3, r2
 8002f80:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <LL_SYSCFG_EnableFastModePlus>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000

08002fb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fb6:	4a27      	ldr	r2, [pc, #156]	; (8003054 <MX_USART1_UART_Init+0xa4>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002ff4:	2240      	movs	r2, #64	; 0x40
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8002ffa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8003002:	2200      	movs	r2, #0
 8003004:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003006:	4812      	ldr	r0, [pc, #72]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 8003008:	f006 fb4e 	bl	80096a8 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003012:	f7fe ff39 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003016:	2100      	movs	r1, #0
 8003018:	480d      	ldr	r0, [pc, #52]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 800301a:	f008 fca8 	bl	800b96e <HAL_UARTEx_SetTxFifoThreshold>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003024:	f7fe ff30 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003028:	2100      	movs	r1, #0
 800302a:	4809      	ldr	r0, [pc, #36]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 800302c:	f008 fcdd 	bl	800b9ea <HAL_UARTEx_SetRxFifoThreshold>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003036:	f7fe ff27 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <MX_USART1_UART_Init+0xa0>)
 800303c:	f008 fc24 	bl	800b888 <HAL_UARTEx_EnableFifoMode>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003046:	f7fe ff1f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000041c 	.word	0x2000041c
 8003054:	40013800 	.word	0x40013800

08003058 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <MX_USART2_UART_Init+0x94>)
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <MX_USART2_UART_Init+0x98>)
 8003060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <MX_USART2_UART_Init+0x94>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <MX_USART2_UART_Init+0x94>)
 800307e:	220c      	movs	r2, #12
 8003080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <MX_USART2_UART_Init+0x94>)
 800308a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800308e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <MX_USART2_UART_Init+0x94>)
 8003098:	2200      	movs	r2, #0
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <MX_USART2_UART_Init+0x94>)
 800309e:	2200      	movs	r2, #0
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030a2:	4812      	ldr	r0, [pc, #72]	; (80030ec <MX_USART2_UART_Init+0x94>)
 80030a4:	f006 fb00 	bl	80096a8 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80030ae:	f7fe feeb 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b2:	2100      	movs	r1, #0
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <MX_USART2_UART_Init+0x94>)
 80030b6:	f008 fc5a 	bl	800b96e <HAL_UARTEx_SetTxFifoThreshold>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80030c0:	f7fe fee2 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c4:	2100      	movs	r1, #0
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <MX_USART2_UART_Init+0x94>)
 80030c8:	f008 fc8f 	bl	800b9ea <HAL_UARTEx_SetRxFifoThreshold>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80030d2:	f7fe fed9 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_USART2_UART_Init+0x94>)
 80030d8:	f008 fc11 	bl	800b8fe <HAL_UARTEx_DisableFifoMode>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80030e2:	f7fe fed1 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200004b0 	.word	0x200004b0
 80030f0:	40004400 	.word	0x40004400

080030f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b09a      	sub	sp, #104	; 0x68
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800310c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	2238      	movs	r2, #56	; 0x38
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f01a fa98 	bl	801d658 <memset>
  if(uartHandle->Instance==USART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6f      	ldr	r2, [pc, #444]	; (80032ec <HAL_UART_MspInit+0x1f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f040 80a4 	bne.w	800327c <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003138:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800313c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fdf6 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800314e:	f7fe fe9b 	bl	8001e88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003152:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003156:	f7ff feef 	bl	8002f38 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	2002      	movs	r0, #2
 800315c:	f7ff feaa 	bl	8002eb4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003160:	23c0      	movs	r3, #192	; 0xc0
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003168:	2301      	movs	r3, #1
 800316a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800316c:	2301      	movs	r3, #1
 800316e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003170:	2307      	movs	r3, #7
 8003172:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003178:	4619      	mov	r1, r3
 800317a:	485d      	ldr	r0, [pc, #372]	; (80032f0 <HAL_UART_MspInit+0x1fc>)
 800317c:	f002 fb92 	bl	80058a4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003180:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003184:	f7ff ff02 	bl	8002f8c <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800318c:	f7ff fefe 	bl	8002f8c <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003190:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_UART_MspInit+0x200>)
 8003192:	4a59      	ldr	r2, [pc, #356]	; (80032f8 <HAL_UART_MspInit+0x204>)
 8003194:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003196:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_UART_MspInit+0x200>)
 8003198:	2212      	movs	r2, #18
 800319a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_UART_MspInit+0x200>)
 800319e:	2210      	movs	r2, #16
 80031a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031ba:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031bc:	2200      	movs	r2, #0
 80031be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031c6:	484b      	ldr	r0, [pc, #300]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031c8:	f001 fcd6 	bl	8004b78 <HAL_DMA_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80031d2:	f7fe fe59 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a46      	ldr	r2, [pc, #280]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031da:	67da      	str	r2, [r3, #124]	; 0x7c
 80031dc:	4a45      	ldr	r2, [pc, #276]	; (80032f4 <HAL_UART_MspInit+0x200>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_UART_MspInit+0x208>)
 80031e4:	4a46      	ldr	r2, [pc, #280]	; (8003300 <HAL_UART_MspInit+0x20c>)
 80031e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_UART_MspInit+0x208>)
 80031ea:	2211      	movs	r2, #17
 80031ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_UART_MspInit+0x208>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_UART_MspInit+0x208>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_UART_MspInit+0x208>)
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_UART_MspInit+0x208>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_UART_MspInit+0x208>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_UART_MspInit+0x208>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_UART_MspInit+0x208>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003218:	4838      	ldr	r0, [pc, #224]	; (80032fc <HAL_UART_MspInit+0x208>)
 800321a:	f001 fcad 	bl	8004b78 <HAL_DMA_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003224:	f7fe fe30 	bl	8001e88 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003228:	2300      	movs	r3, #0
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800322c:	2300      	movs	r3, #0
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003244:	4619      	mov	r1, r3
 8003246:	482d      	ldr	r0, [pc, #180]	; (80032fc <HAL_UART_MspInit+0x208>)
 8003248:	f002 f880 	bl	800534c <HAL_DMAEx_ConfigMuxSync>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003252:	f7fe fe19 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_UART_MspInit+0x208>)
 800325a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <HAL_UART_MspInit+0x208>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2102      	movs	r1, #2
 8003268:	2024      	movs	r0, #36	; 0x24
 800326a:	f001 fc4e 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800326e:	2024      	movs	r0, #36	; 0x24
 8003270:	f001 fc65 	bl	8004b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003274:	200c      	movs	r0, #12
 8003276:	f001 fc62 	bl	8004b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800327a:	e033      	b.n	80032e4 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <HAL_UART_MspInit+0x210>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12e      	bne.n	80032e4 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003286:	2302      	movs	r3, #2
 8003288:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800328a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800328e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fd4d 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80032a0:	f7fe fdf2 	bl	8001e88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032a8:	f7ff fe1c 	bl	8002ee4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff fe01 	bl	8002eb4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80032b2:	230c      	movs	r3, #12
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ba:	2301      	movs	r3, #1
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032be:	2301      	movs	r3, #1
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032c2:	2307      	movs	r3, #7
 80032c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032ca:	4619      	mov	r1, r3
 80032cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d0:	f002 fae8 	bl	80058a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2025      	movs	r0, #37	; 0x25
 80032da:	f001 fc16 	bl	8004b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032de:	2025      	movs	r0, #37	; 0x25
 80032e0:	f001 fc2d 	bl	8004b3e <HAL_NVIC_EnableIRQ>
}
 80032e4:	bf00      	nop
 80032e6:	3768      	adds	r7, #104	; 0x68
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013800 	.word	0x40013800
 80032f0:	48000400 	.word	0x48000400
 80032f4:	20000544 	.word	0x20000544
 80032f8:	40020008 	.word	0x40020008
 80032fc:	200005a4 	.word	0x200005a4
 8003300:	4002001c 	.word	0x4002001c
 8003304:	40004400 	.word	0x40004400

08003308 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_UART_MspDeInit+0x6c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d116      	bne.n	8003348 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800331a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800331e:	f7ff fe23 	bl	8002f68 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003322:	21c0      	movs	r1, #192	; 0xc0
 8003324:	4814      	ldr	r0, [pc, #80]	; (8003378 <HAL_UART_MspDeInit+0x70>)
 8003326:	f002 fc1d 	bl	8005b64 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fcca 	bl	8004cc8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fcc4 	bl	8004cc8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003340:	2024      	movs	r0, #36	; 0x24
 8003342:	f001 fc0a 	bl	8004b5a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003346:	e010      	b.n	800336a <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_UART_MspDeInit+0x74>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10b      	bne.n	800336a <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003352:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003356:	f7ff fddd 	bl	8002f14 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800335a:	210c      	movs	r1, #12
 800335c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003360:	f002 fc00 	bl	8005b64 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003364:	2025      	movs	r0, #37	; 0x25
 8003366:	f001 fbf8 	bl	8004b5a <HAL_NVIC_DisableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40013800 	.word	0x40013800
 8003378:	48000400 	.word	0x48000400
 800337c:	40004400 	.word	0x40004400

08003380 <LL_APB2_GRP1_ForceReset>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <LL_APB2_GRP1_ReleaseReset>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b8:	4013      	ands	r3, r2
 80033ba:	640b      	str	r3, [r1, #64]	; 0x40
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
	...

080033c8 <LL_EXTI_EnableIT_0_31>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <LL_EXTI_EnableIT_0_31+0x24>)
 80033d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033d6:	4905      	ldr	r1, [pc, #20]	; (80033ec <LL_EXTI_EnableIT_0_31+0x24>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	58000800 	.word	0x58000800

080033f0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <vcom_Init+0x28>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80033fe:	f7fd ff83 	bl	8001308 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003402:	f7ff fdd5 	bl	8002fb0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003406:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800340a:	f7ff ffdd 	bl	80033c8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800340e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000608 	.word	0x20000608

0800341c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003420:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003424:	f7ff ffac 	bl	8003380 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003428:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800342c:	f7ff ffb9 	bl	80033a2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <vcom_DeInit+0x28>)
 8003432:	f7ff ff69 	bl	8003308 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003436:	200f      	movs	r0, #15
 8003438:	f001 fb8f 	bl	8004b5a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800343c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800343e:	4618      	mov	r0, r3
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000041c 	.word	0x2000041c

08003448 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	461a      	mov	r2, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4804      	ldr	r0, [pc, #16]	; (800346c <vcom_Trace_DMA+0x24>)
 800345c:	f006 f9c0 	bl	80097e0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003460:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000041c 	.word	0x2000041c

08003470 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <vcom_ReceiveInit+0x70>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800347e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003482:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	e893 0006 	ldmia.w	r3, {r1, r2}
 800348c:	4815      	ldr	r0, [pc, #84]	; (80034e4 <vcom_ReceiveInit+0x74>)
 800348e:	f008 f96e 	bl	800b76e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003492:	bf00      	nop
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <vcom_ReceiveInit+0x74>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d0f7      	beq.n	8003494 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80034a4:	bf00      	nop
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <vcom_ReceiveInit+0x74>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d1f7      	bne.n	80034a6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <vcom_ReceiveInit+0x74>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <vcom_ReceiveInit+0x74>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034c4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <vcom_ReceiveInit+0x74>)
 80034c8:	f008 f9ac 	bl	800b824 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80034cc:	2201      	movs	r2, #1
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <vcom_ReceiveInit+0x78>)
 80034d0:	4804      	ldr	r0, [pc, #16]	; (80034e4 <vcom_ReceiveInit+0x74>)
 80034d2:	f006 f939 	bl	8009748 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80034d6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	2000060c 	.word	0x2000060c
 80034e4:	2000041c 	.word	0x2000041c
 80034e8:	20000604 	.word	0x20000604

080034ec <vcom_Resume>:

void vcom_Resume(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034f0:	4808      	ldr	r0, [pc, #32]	; (8003514 <vcom_Resume+0x28>)
 80034f2:	f006 f8d9 	bl	80096a8 <HAL_UART_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <vcom_Resume+0x14>
  {
    Error_Handler();
 80034fc:	f7fe fcc4 	bl	8001e88 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <vcom_Resume+0x2c>)
 8003502:	f001 fb39 	bl	8004b78 <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <vcom_Resume+0x24>
  {
    Error_Handler();
 800350c:	f7fe fcbc 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	2000041c 	.word	0x2000041c
 8003518:	20000544 	.word	0x20000544

0800351c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_UART_TxCpltCallback+0x24>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d103      	bne.n	8003536 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_UART_TxCpltCallback+0x28>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2000      	movs	r0, #0
 8003534:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40013800 	.word	0x40013800
 8003544:	20000608 	.word	0x20000608

08003548 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_UART_RxCpltCallback+0x54>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_UART_RxCpltCallback+0x58>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_UART_RxCpltCallback+0x30>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_UART_RxCpltCallback+0x58>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	2101      	movs	r1, #1
 8003574:	480b      	ldr	r0, [pc, #44]	; (80035a4 <HAL_UART_RxCpltCallback+0x5c>)
 8003576:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003578:	2201      	movs	r2, #1
 800357a:	490a      	ldr	r1, [pc, #40]	; (80035a4 <HAL_UART_RxCpltCallback+0x5c>)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f006 f8e3 	bl	8009748 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_UART_RxCpltCallback+0x60>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d102      	bne.n	8003592 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_UART_RxCpltCallback+0x64>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40013800 	.word	0x40013800
 80035a0:	2000060c 	.word	0x2000060c
 80035a4:	20000604 	.word	0x20000604
 80035a8:	40004400 	.word	0x40004400
 80035ac:	20000008 	.word	0x20000008

080035b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035b0:	480d      	ldr	r0, [pc, #52]	; (80035e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035b4:	f7ff f98b 	bl	80028ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035b8:	480c      	ldr	r0, [pc, #48]	; (80035ec <LoopForever+0x6>)
  ldr r1, =_edata
 80035ba:	490d      	ldr	r1, [pc, #52]	; (80035f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <LoopForever+0xe>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c0:	e002      	b.n	80035c8 <LoopCopyDataInit>

080035c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035c6:	3304      	adds	r3, #4

080035c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035cc:	d3f9      	bcc.n	80035c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d0:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <LoopForever+0x16>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d4:	e001      	b.n	80035da <LoopFillZerobss>

080035d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d8:	3204      	adds	r2, #4

080035da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035dc:	d3fb      	bcc.n	80035d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035de:	f01a f843 	bl	801d668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035e2:	f7fe fa61 	bl	8001aa8 <main>

080035e6 <LoopForever>:

LoopForever:
    b LoopForever
 80035e6:	e7fe      	b.n	80035e6 <LoopForever>
  ldr   r0, =_estack
 80035e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80035ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80035f4:	0801e840 	.word	0x0801e840
  ldr r2, =_sbss
 80035f8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80035fc:	2000207c 	.word	0x2000207c

08003600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC_IRQHandler>

08003602 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003616:	2310      	movs	r3, #16
 8003618:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800361a:	2301      	movs	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362e:	f002 f939 	bl	80058a4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003632:	2320      	movs	r3, #32
 8003634:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4619      	mov	r1, r3
 800363a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800363e:	f002 f931 	bl	80058a4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003642:	2200      	movs	r2, #0
 8003644:	2120      	movs	r1, #32
 8003646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364a:	f002 fb59 	bl	8005d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800364e:	2200      	movs	r2, #0
 8003650:	2110      	movs	r1, #16
 8003652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003656:	f002 fb53 	bl	8005d00 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d83f      	bhi.n	80036f4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	0800368d 	.word	0x0800368d
 8003680:	080036a7 	.word	0x080036a7
 8003684:	080036c1 	.word	0x080036c1
 8003688:	080036db 	.word	0x080036db
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800368c:	2200      	movs	r2, #0
 800368e:	2110      	movs	r1, #16
 8003690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003694:	f002 fb34 	bl	8005d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	2120      	movs	r1, #32
 800369c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a0:	f002 fb2e 	bl	8005d00 <HAL_GPIO_WritePin>
      break;      
 80036a4:	e027      	b.n	80036f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80036a6:	2201      	movs	r2, #1
 80036a8:	2110      	movs	r1, #16
 80036aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ae:	f002 fb27 	bl	8005d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80036b2:	2200      	movs	r2, #0
 80036b4:	2120      	movs	r1, #32
 80036b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ba:	f002 fb21 	bl	8005d00 <HAL_GPIO_WritePin>
      break;
 80036be:	e01a      	b.n	80036f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80036c0:	2201      	movs	r2, #1
 80036c2:	2110      	movs	r1, #16
 80036c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c8:	f002 fb1a 	bl	8005d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80036cc:	2201      	movs	r2, #1
 80036ce:	2120      	movs	r1, #32
 80036d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d4:	f002 fb14 	bl	8005d00 <HAL_GPIO_WritePin>
      break;
 80036d8:	e00d      	b.n	80036f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80036da:	2200      	movs	r2, #0
 80036dc:	2110      	movs	r1, #16
 80036de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e2:	f002 fb0d 	bl	8005d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80036e6:	2201      	movs	r2, #1
 80036e8:	2120      	movs	r1, #32
 80036ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ee:	f002 fb07 	bl	8005d00 <HAL_GPIO_WritePin>
      break;
 80036f2:	e000      	b.n	80036f6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80036f4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003704:	2302      	movs	r3, #2
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003720:	2301      	movs	r3, #1
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800373a:	230f      	movs	r3, #15
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e001      	b.n	8003744 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003740:	2316      	movs	r3, #22
 8003742:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a03      	ldr	r2, [pc, #12]	; (8003768 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6053      	str	r3, [r2, #4]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	e0042000 	.word	0xe0042000

0800376c <LL_DBGMCU_EnableDBGStopMode>:
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a03      	ldr	r2, [pc, #12]	; (8003784 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003776:	f043 0302 	orr.w	r3, r3, #2
 800377a:	6053      	str	r3, [r2, #4]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	e0042000 	.word	0xe0042000

08003788 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6053      	str	r3, [r2, #4]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	e0042000 	.word	0xe0042000

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ae:	2003      	movs	r0, #3
 80037b0:	f001 f9a0 	bl	8004af4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037b4:	f004 f8e0 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80037b8:	4603      	mov	r3, r0
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_Init+0x3c>)
 80037bc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037be:	200f      	movs	r0, #15
 80037c0:	f7ff f804 	bl	80027cc <HAL_InitTick>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	e001      	b.n	80037d4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037d0:	f7fe fd93 	bl	80022fa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037d4:	79fb      	ldrb	r3, [r7, #7]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_SuspendTick+0x18>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_SuspendTick+0x18>)
 80037ee:	f023 0302 	bic.w	r3, r3, #2
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <HAL_ResumeTick+0x18>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <HAL_ResumeTick+0x18>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003820:	4b02      	ldr	r3, [pc, #8]	; (800382c <HAL_GetUIDw0+0x10>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	1fff7590 	.word	0x1fff7590

08003830 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_GetUIDw1+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	1fff7594 	.word	0x1fff7594

08003844 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <HAL_GetUIDw2+0x10>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	1fff7598 	.word	0x1fff7598

08003858 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800385c:	f7ff ff78 	bl	8003750 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003868:	f7ff ff80 	bl	800376c <LL_DBGMCU_EnableDBGStopMode>
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003874:	f7ff ff88 	bl	8003788 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}

0800387c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2107      	movs	r1, #7
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	401a      	ands	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2107      	movs	r1, #7
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	210f      	movs	r1, #15
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	401a      	ands	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 010f 	and.w	r1, r3, #15
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	43db      	mvns	r3, r3
 80039ec:	401a      	ands	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0219      	lsls	r1, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	400b      	ands	r3, r1
 80039f6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80039fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a1e:	f023 0317 	bic.w	r3, r3, #23
 8003a22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a44:	f023 0317 	bic.w	r3, r3, #23
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6093      	str	r3, [r2, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a8c:	f023 0317 	bic.w	r3, r3, #23
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ab2:	f023 0317 	bic.w	r3, r3, #23
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <LL_ADC_IsEnabled+0x18>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <LL_ADC_IsEnabled+0x1a>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d101      	bne.n	8003b04 <LL_ADC_IsDisableOngoing+0x18>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <LL_ADC_IsDisableOngoing+0x1a>
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	f023 0317 	bic.w	r3, r3, #23
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	f023 0317 	bic.w	r3, r3, #23
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d101      	bne.n	8003b74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e17e      	b.n	8003ea0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fd fae1 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff44 	bl	8003a56 <LL_ADC_IsInternalRegulatorEnabled>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d115      	bne.n	8003c00 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff18 	bl	8003a0e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_ADC_Init+0x2d8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	4a9d      	ldr	r2, [pc, #628]	; (8003e5c <HAL_ADC_Init+0x2dc>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	3301      	adds	r3, #1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bf2:	e002      	b.n	8003bfa <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f9      	bne.n	8003bf4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ff26 	bl	8003a56 <LL_ADC_IsInternalRegulatorEnabled>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff93 	bl	8003b5c <LL_ADC_REG_IsConversionOngoing>
 8003c36:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 8124 	bne.w	8003e8e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 8120 	bne.w	8003e8e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff30 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 80a7 	bne.w	8003dbe <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7e1b      	ldrb	r3, [r3, #24]
 8003c78:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003c7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7e5b      	ldrb	r3, [r3, #25]
 8003c80:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c82:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7e9b      	ldrb	r3, [r3, #26]
 8003c88:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c8a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_ADC_Init+0x11a>
 8003c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c98:	e000      	b.n	8003c9c <HAL_ADC_Init+0x11c>
 8003c9a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c9c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ca2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da04      	bge.n	8003cb6 <HAL_ADC_Init+0x136>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cb4:	e001      	b.n	8003cba <HAL_ADC_Init+0x13a>
 8003cb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003cba:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cc2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003cc4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d114      	bne.n	8003d00 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7e9b      	ldrb	r3, [r3, #26]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e00b      	b.n	8003d00 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d14:	4313      	orrs	r3, r2
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003d26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d40:	4313      	orrs	r3, r2
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d111      	bne.n	8003d76 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d5e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003d64:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003d6a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_ADC_Init+0x2e0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	430b      	orrs	r3, r1
 8003d88:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d92:	d014      	beq.n	8003dbe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d00f      	beq.n	8003dbe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da6:	d00a      	beq.n	8003dbe <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_ADC_Init+0x2e4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003db8:	492a      	ldr	r1, [pc, #168]	; (8003e64 <HAL_ADC_Init+0x2e4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2100      	movs	r1, #0
 8003dca:	f7ff fd76 	bl	80038ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4923      	ldr	r1, [pc, #140]	; (8003e68 <HAL_ADC_Init+0x2e8>)
 8003dda:	f7ff fd6e 	bl	80038ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f062 020f 	orn	r2, r2, #15
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
 8003df6:	e017      	b.n	8003e28 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e00:	d112      	bne.n	8003e28 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	f003 031c 	and.w	r3, r3, #28
 8003e14:	f06f 020f 	mvn.w	r2, #15
 8003e18:	fa02 f103 	lsl.w	r1, r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fd61 	bl	80038f6 <LL_ADC_GetSamplingTimeCommonChannels>
 8003e34:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d116      	bne.n	8003e6c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	f023 0303 	bic.w	r3, r3, #3
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e54:	e023      	b.n	8003e9e <HAL_ADC_Init+0x31e>
 8003e56:	bf00      	nop
 8003e58:	20000004 	.word	0x20000004
 8003e5c:	053e2d63 	.word	0x053e2d63
 8003e60:	1ffffc02 	.word	0x1ffffc02
 8003e64:	40012708 	.word	0x40012708
 8003e68:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f023 0312 	bic.w	r3, r3, #18
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e8c:	e007      	b.n	8003e9e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07a      	b.n	8003fb0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 face 	bl	8004468 <ADC_ConversionStop>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb92 	bl	8004600 <ADC_Disable>
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fd9f 	bl	8003a34 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003f04:	f023 0303 	bic.w	r3, r3, #3
 8003f08:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f240 329f 	movw	r2, #927	; 0x39f
 8003f12:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68d9      	ldr	r1, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_ADC_DeInit+0x110>)
 8003f20:	400b      	ands	r3, r1
 8003f22:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003f32:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0207 	bic.w	r2, r2, #7
 8003f42:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f52:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_ADC_DeInit+0x114>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <HAL_ADC_DeInit+0x114>)
 8003f88:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003f8c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd f906 	bl	80011a0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	833e0200 	.word	0x833e0200
 8003fbc:	40012708 	.word	0x40012708

08003fc0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fdc5 	bl	8003b5c <LL_ADC_REG_IsConversionOngoing>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d132      	bne.n	800403e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Start+0x26>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e02e      	b.n	8004044 <HAL_ADC_Start+0x84>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa80 	bl	80044f4 <ADC_Enable>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11a      	bne.n	8004034 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	221c      	movs	r2, #28
 800401e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fd6f 	bl	8003b10 <LL_ADC_REG_StartConversion>
 8004032:	e006      	b.n	8004042 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800403c:	e001      	b.n	8004042 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_ADC_Stop+0x16>
 800405e:	2302      	movs	r3, #2
 8004060:	e022      	b.n	80040a8 <HAL_ADC_Stop+0x5c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9fc 	bl	8004468 <ADC_ConversionStop>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d111      	bne.n	800409e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fac0 	bl	8004600 <ADC_Disable>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d102      	bne.n	80040c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80040c2:	2308      	movs	r3, #8
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e010      	b.n	80040ea <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e077      	b.n	80041d6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80040e6:	2304      	movs	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040ea:	f7fe fb79 	bl	80027e0 <HAL_GetTick>
 80040ee:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80040f0:	e021      	b.n	8004136 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d01d      	beq.n	8004136 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80040fa:	f7fe fb71 	bl	80027e0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <HAL_ADC_PollForConversion+0x60>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d112      	bne.n	8004136 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0d6      	beq.n	80040f2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fbe6 	bl	8003926 <LL_ADC_REG_IsTriggerSourceSWStart>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d031      	beq.n	80041c4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7e9b      	ldrb	r3, [r3, #26]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d12d      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	d126      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fcee 	bl	8003b5c <LL_ADC_REG_IsConversionOngoing>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d112      	bne.n	80041ac <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 020c 	bic.w	r2, r2, #12
 8004194:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	; 0x58
 80041aa:	e00b      	b.n	80041c4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7e1b      	ldrb	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	220c      	movs	r2, #12
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x28>
 800421c:	2302      	movs	r3, #2
 800421e:	e110      	b.n	8004442 <HAL_ADC_ConfigChannel+0x24a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fc95 	bl	8003b5c <LL_ADC_REG_IsConversionOngoing>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 80f7 	bne.w	8004428 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	f000 80b1 	beq.w	80043a6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800424c:	d004      	beq.n	8004258 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004252:	4a7e      	ldr	r2, [pc, #504]	; (800444c <HAL_ADC_ConfigChannel+0x254>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7ff fb92 	bl	800398c <LL_ADC_REG_SetSequencerChAdd>
 8004268:	e041      	b.n	80042ee <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	210f      	movs	r1, #15
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	401a      	ands	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_ADC_ConfigChannel+0xa0>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	e011      	b.n	80042bc <HAL_ADC_ConfigChannel+0xc4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	6849      	ldr	r1, [r1, #4]
 80042c0:	f001 011f 	and.w	r1, r1, #31
 80042c4:	408b      	lsls	r3, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d808      	bhi.n	80042ee <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7ff fb2e 	bl	800394a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f7ff fb6b 	bl	80039d6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f280 8097 	bge.w	8004438 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800430a:	4851      	ldr	r0, [pc, #324]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 800430c:	f7ff fac8 	bl	80038a0 <LL_ADC_GetCommonPathInternalCh>
 8004310:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4f      	ldr	r2, [pc, #316]	; (8004454 <HAL_ADC_ConfigChannel+0x25c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d120      	bne.n	800435e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11b      	bne.n	800435e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800432c:	4619      	mov	r1, r3
 800432e:	4848      	ldr	r0, [pc, #288]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 8004330:	f7ff faa4 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_ADC_ConfigChannel+0x260>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	4a48      	ldr	r2, [pc, #288]	; (800445c <HAL_ADC_ConfigChannel+0x264>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800434e:	e002      	b.n	8004356 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f9      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800435c:	e06c      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3f      	ldr	r2, [pc, #252]	; (8004460 <HAL_ADC_ConfigChannel+0x268>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004378:	4619      	mov	r1, r3
 800437a:	4835      	ldr	r0, [pc, #212]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 800437c:	f7ff fa7e 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
 8004380:	e05a      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a37      	ldr	r2, [pc, #220]	; (8004464 <HAL_ADC_ConfigChannel+0x26c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d155      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d150      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800439c:	4619      	mov	r1, r3
 800439e:	482c      	ldr	r0, [pc, #176]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 80043a0:	f7ff fa6c 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
 80043a4:	e048      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ae:	d004      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043b4:	4a25      	ldr	r2, [pc, #148]	; (800444c <HAL_ADC_ConfigChannel+0x254>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d107      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7ff faf3 	bl	80039b0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da32      	bge.n	8004438 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d2:	481f      	ldr	r0, [pc, #124]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 80043d4:	f7ff fa64 	bl	80038a0 <LL_ADC_GetCommonPathInternalCh>
 80043d8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_ADC_ConfigChannel+0x25c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d107      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ea:	4619      	mov	r1, r3
 80043ec:	4818      	ldr	r0, [pc, #96]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 80043ee:	f7ff fa45 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
 80043f2:	e021      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_ADC_ConfigChannel+0x268>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d107      	bne.n	800440e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004404:	4619      	mov	r1, r3
 8004406:	4812      	ldr	r0, [pc, #72]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 8004408:	f7ff fa38 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
 800440c:	e014      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_ADC_ConfigChannel+0x26c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10f      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800441e:	4619      	mov	r1, r3
 8004420:	480b      	ldr	r0, [pc, #44]	; (8004450 <HAL_ADC_ConfigChannel+0x258>)
 8004422:	f7ff fa2b 	bl	800387c <LL_ADC_SetCommonPathInternalCh>
 8004426:	e007      	b.n	8004438 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004440:	7ffb      	ldrb	r3, [r7, #31]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	80000004 	.word	0x80000004
 8004450:	40012708 	.word	0x40012708
 8004454:	b0001000 	.word	0xb0001000
 8004458:	20000004 	.word	0x20000004
 800445c:	053e2d63 	.word	0x053e2d63
 8004460:	b8004000 	.word	0xb8004000
 8004464:	b4002000 	.word	0xb4002000

08004468 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fb71 	bl	8003b5c <LL_ADC_REG_IsConversionOngoing>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d033      	beq.n	80044e8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fb31 	bl	8003aec <LL_ADC_IsDisableOngoing>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fb4e 	bl	8003b36 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800449a:	f7fe f9a1 	bl	80027e0 <HAL_GetTick>
 800449e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044a0:	e01b      	b.n	80044da <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044a2:	f7fe f99d 	bl	80027e0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d914      	bls.n	80044da <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	f043 0210 	orr.w	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e007      	b.n	80044ea <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1dc      	bne.n	80044a2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fadf 	bl	8003ac8 <LL_ADC_IsEnabled>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d169      	bne.n	80045e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <ADC_Enable+0xfc>)
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	f043 0210 	orr.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e055      	b.n	80045e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fa9c 	bl	8003a7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004544:	482b      	ldr	r0, [pc, #172]	; (80045f4 <ADC_Enable+0x100>)
 8004546:	f7ff f9ab 	bl	80038a0 <LL_ADC_GetCommonPathInternalCh>
 800454a:	4603      	mov	r3, r0
 800454c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00f      	beq.n	8004574 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <ADC_Enable+0x104>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	4a28      	ldr	r2, [pc, #160]	; (80045fc <ADC_Enable+0x108>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	099b      	lsrs	r3, r3, #6
 8004562:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004564:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004566:	e002      	b.n	800456e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3b01      	subs	r3, #1
 800456c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f9      	bne.n	8004568 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	7e5b      	ldrb	r3, [r3, #25]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d033      	beq.n	80045e4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800457c:	f7fe f930 	bl	80027e0 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004582:	e028      	b.n	80045d6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fa9d 	bl	8003ac8 <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fa6f 	bl	8003a7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800459e:	f7fe f91f 	bl	80027e0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d914      	bls.n	80045d6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00d      	beq.n	80045d6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e007      	b.n	80045e6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d1cf      	bne.n	8004584 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	80000017 	.word	0x80000017
 80045f4:	40012708 	.word	0x40012708
 80045f8:	20000004 	.word	0x20000004
 80045fc:	053e2d63 	.word	0x053e2d63

08004600 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fa6d 	bl	8003aec <LL_ADC_IsDisableOngoing>
 8004612:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fa55 	bl	8003ac8 <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d047      	beq.n	80046b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d144      	bne.n	80046b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0305 	and.w	r3, r3, #5
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10c      	bne.n	8004652 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fa30 	bl	8003aa2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2203      	movs	r2, #3
 8004648:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800464a:	f7fe f8c9 	bl	80027e0 <HAL_GetTick>
 800464e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004650:	e029      	b.n	80046a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e023      	b.n	80046b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800466e:	f7fe f8b7 	bl	80027e0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d914      	bls.n	80046a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f043 0210 	orr.w	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e007      	b.n	80046b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1dc      	bne.n	800466e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <LL_ADC_SetCalibrationFactor>:
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046ce:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <LL_ADC_GetCalibrationFactor>:
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <LL_ADC_Enable>:
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004712:	f023 0317 	bic.w	r3, r3, #23
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <LL_ADC_Disable>:
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004738:	f023 0317 	bic.w	r3, r3, #23
 800473c:	f043 0202 	orr.w	r2, r3, #2
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <LL_ADC_IsEnabled>:
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <LL_ADC_IsEnabled+0x18>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <LL_ADC_IsEnabled+0x1a>
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <LL_ADC_StartCalibration>:
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004782:	f023 0317 	bic.w	r3, r3, #23
 8004786:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <LL_ADC_IsCalibrationOnGoing>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ac:	d101      	bne.n	80047b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_ADCEx_Calibration_Start+0x1e>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b9      	b.n	8004950 <HAL_ADCEx_Calibration_Start+0x192>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff0b 	bl	8004600 <ADC_Disable>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ffab 	bl	800474e <LL_ADC_IsEnabled>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 809d 	bne.w	800493a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004808:	f043 0202 	orr.w	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	f248 0303 	movw	r3, #32771	; 0x8003
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800482c:	f023 0303 	bic.w	r3, r3, #3
 8004830:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e02e      	b.n	8004896 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff98 	bl	8004772 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004842:	e014      	b.n	800486e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	3301      	adds	r3, #1
 8004848:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004850:	d30d      	bcc.n	800486e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f023 0312 	bic.w	r3, r3, #18
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e070      	b.n	8004950 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff90 	bl	8004798 <LL_ADC_IsCalibrationOnGoing>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e2      	bne.n	8004844 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff2f 	bl	80046e6 <LL_ADC_GetCalibrationFactor>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2b07      	cmp	r3, #7
 800489a:	d9cd      	bls.n	8004838 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff29 	bl	8004702 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ff01 	bl	80046be <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ff31 	bl	8004728 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048c6:	f7fd ff8b 	bl	80027e0 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048cc:	e01c      	b.n	8004908 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048ce:	f7fd ff87 	bl	80027e0 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d915      	bls.n	8004908 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff34 	bl	800474e <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f043 0210 	orr.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e023      	b.n	8004950 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff1e 	bl	800474e <LL_ADC_IsEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1da      	bne.n	80048ce <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68d9      	ldr	r1, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	430a      	orrs	r2, r1
 8004926:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f023 0303 	bic.w	r3, r3, #3
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
 8004938:	e005      	b.n	8004946 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800494e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4906      	ldr	r1, [pc, #24]	; (80049f0 <__NVIC_EnableIRQ+0x34>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100

080049f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db12      	blt.n	8004a2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	490a      	ldr	r1, [pc, #40]	; (8004a38 <__NVIC_DisableIRQ+0x44>)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2001      	movs	r0, #1
 8004a16:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1a:	3320      	adds	r3, #32
 8004a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a20:	f3bf 8f4f 	dsb	sy
}
 8004a24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a26:	f3bf 8f6f 	isb	sy
}
 8004a2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
         );
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff2b 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	4603      	mov	r3, r0
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b18:	f7ff ff42 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	f7ff ffb4 	bl	8004a90 <NVIC_EncodePriority>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff83 	bl	8004a3c <__NVIC_SetPriority>
}
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	4603      	mov	r3, r0
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff35 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ff43 	bl	80049f4 <__NVIC_DisableIRQ>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e08e      	b.n	8004ca8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_DMA_Init+0x138>)
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d80f      	bhi.n	8004bb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b45      	ldr	r3, [pc, #276]	; (8004cb4 <HAL_DMA_Init+0x13c>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a45      	ldr	r2, [pc, #276]	; (8004cb8 <HAL_DMA_Init+0x140>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a42      	ldr	r2, [pc, #264]	; (8004cbc <HAL_DMA_Init+0x144>)
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8004bb4:	e00e      	b.n	8004bd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b40      	ldr	r3, [pc, #256]	; (8004cc0 <HAL_DMA_Init+0x148>)
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a3d      	ldr	r2, [pc, #244]	; (8004cb8 <HAL_DMA_Init+0x140>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <HAL_DMA_Init+0x14c>)
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb24 	bl	8005274 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c34:	d102      	bne.n	8004c3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_DMA_Init+0x106>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d80c      	bhi.n	8004c7e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb4d 	bl	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e008      	b.n	8004c90 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40020407 	.word	0x40020407
 8004cb4:	bffdfff8 	.word	0xbffdfff8
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	40020000 	.word	0x40020000
 8004cc0:	bffdfbf8 	.word	0xbffdfbf8
 8004cc4:	40020400 	.word	0x40020400

08004cc8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07b      	b.n	8004dd2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <HAL_DMA_DeInit+0x114>)
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d80f      	bhi.n	8004d16 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_DMA_DeInit+0x118>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_DMA_DeInit+0x11c>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	009a      	lsls	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <HAL_DMA_DeInit+0x120>)
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
 8004d14:	e00e      	b.n	8004d34 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_DMA_DeInit+0x124>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	4a30      	ldr	r2, [pc, #192]	; (8004de4 <HAL_DMA_DeInit+0x11c>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	009a      	lsls	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <HAL_DMA_DeInit+0x128>)
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f003 021c 	and.w	r2, r3, #28
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fa8f 	bl	8005274 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d66:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00f      	beq.n	8004d90 <HAL_DMA_DeInit+0xc8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d80b      	bhi.n	8004d90 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fac3 	bl	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40020407 	.word	0x40020407
 8004de0:	bffdfff8 	.word	0xbffdfff8
 8004de4:	cccccccd 	.word	0xcccccccd
 8004de8:	40020000 	.word	0x40020000
 8004dec:	bffdfbf8 	.word	0xbffdfbf8
 8004df0:	40020400 	.word	0x40020400

08004df4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_Start_IT+0x20>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e069      	b.n	8004ee8 <HAL_DMA_Start_IT+0xf4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d155      	bne.n	8004ed4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f9d3 	bl	80051f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 020e 	orr.w	r2, r2, #14
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e00f      	b.n	8004e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 020a 	orr.w	r2, r2, #10
 8004e8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e008      	b.n	8004ee6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04f      	b.n	8004fa2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d008      	beq.n	8004f20 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e040      	b.n	8004fa2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 020e 	bic.w	r2, r2, #14
 8004f2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	f003 021c 	and.w	r2, r3, #28
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d005      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e047      	b.n	8005060 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 020e 	bic.w	r2, r2, #14
 8004fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	f003 021c 	and.w	r2, r3, #28
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f202 	lsl.w	r2, r1, r2
 8005012:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800501c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800503e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
    }
  }
  return status;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	f003 031c 	and.w	r3, r3, #28
 800508c:	2204      	movs	r2, #4
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d027      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x7c>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d022      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f003 021c 	and.w	r2, r3, #28
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2104      	movs	r1, #4
 80050ce:	fa01 f202 	lsl.w	r2, r1, r2
 80050d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8081 	beq.w	80051e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80050e6:	e07b      	b.n	80051e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f003 031c 	and.w	r3, r3, #28
 80050f0:	2202      	movs	r2, #2
 80050f2:	409a      	lsls	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03d      	beq.n	8005178 <HAL_DMA_IRQHandler+0x10c>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d038      	beq.n	8005178 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020a 	bic.w	r2, r2, #10
 8005122:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_DMA_IRQHandler+0x180>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d909      	bls.n	800514c <HAL_DMA_IRQHandler+0xe0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	f003 031c 	and.w	r3, r3, #28
 8005140:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <HAL_DMA_IRQHandler+0x184>)
 8005142:	2102      	movs	r1, #2
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	6053      	str	r3, [r2, #4]
 800514a:	e008      	b.n	800515e <HAL_DMA_IRQHandler+0xf2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	f003 031c 	and.w	r3, r3, #28
 8005154:	4a27      	ldr	r2, [pc, #156]	; (80051f4 <HAL_DMA_IRQHandler+0x188>)
 8005156:	2102      	movs	r1, #2
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d038      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005176:	e033      	b.n	80051e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	f003 031c 	and.w	r3, r3, #28
 8005180:	2208      	movs	r2, #8
 8005182:	409a      	lsls	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02a      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x176>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d025      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 020e 	bic.w	r2, r2, #14
 80051a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f003 021c 	and.w	r2, r3, #28
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
}
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40020080 	.word	0x40020080
 80051f0:	40020400 	.word	0x40020400
 80051f4:	40020000 	.word	0x40020000

080051f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800520e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005220:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f003 021c 	and.w	r2, r3, #28
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2101      	movs	r1, #1
 8005230:	fa01 f202 	lsl.w	r2, r1, r2
 8005234:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b10      	cmp	r3, #16
 8005244:	d108      	bne.n	8005258 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005256:	e007      	b.n	8005268 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
	...

08005274 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d813      	bhi.n	80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005294:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	3b08      	subs	r3, #8
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e011      	b.n	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80052ba:	4413      	add	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	3b08      	subs	r3, #8
 80052c8:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	3307      	adds	r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80052d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40020407 	.word	0x40020407
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	4002081c 	.word	0x4002081c
 8005300:	40020880 	.word	0x40020880

08005304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005314:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a08      	ldr	r2, [pc, #32]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005328:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b01      	subs	r3, #1
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2201      	movs	r2, #1
 8005334:	409a      	lsls	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800533a:	bf00      	nop
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	1000823f 	.word	0x1000823f
 8005348:	40020940 	.word	0x40020940

0800534c <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d12b      	bne.n	80053ba <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_DMAEx_ConfigMuxSync+0x24>
 800536c:	2302      	movs	r3, #2
 800536e:	e028      	b.n	80053c2 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	3b01      	subs	r3, #1
 800538c:	04db      	lsls	r3, r3, #19
 800538e:	431a      	orrs	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	431a      	orrs	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	7a1b      	ldrb	r3, [r3, #8]
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	7a5b      	ldrb	r3, [r3, #9]
 80053a2:	025b      	lsls	r3, r3, #9
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e003      	b.n	80053c2 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01a      	beq.n	800541a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	2b00      	cmp	r3, #0
 8005420:	d022      	beq.n	8005468 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	4013      	ands	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01a      	beq.n	8005468 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005440:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800544a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
      }
    }
  }
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_FLASH_Program+0x80>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_FLASH_Program+0x1a>
 8005486:	2302      	movs	r3, #2
 8005488:	e02d      	b.n	80054e6 <HAL_FLASH_Program+0x76>
 800548a:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <HAL_FLASH_Program+0x80>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_FLASH_Program+0x80>)
 8005492:	2200      	movs	r2, #0
 8005494:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800549a:	f000 f869 	bl	8005570 <FLASH_WaitForLastOperation>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11a      	bne.n	80054de <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	68b8      	ldr	r0, [r7, #8]
 80054b4:	f000 f8be 	bl	8005634 <FLASH_Program_DoubleWord>
 80054b8:	e004      	b.n	80054c4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	4619      	mov	r1, r3
 80054be:	68b8      	ldr	r0, [r7, #8]
 80054c0:	f000 f8de 	bl	8005680 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054c8:	f000 f852 	bl	8005570 <FLASH_WaitForLastOperation>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_FLASH_Program+0x84>)
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	4906      	ldr	r1, [pc, #24]	; (80054f4 <HAL_FLASH_Program+0x84>)
 80054da:	4013      	ands	r3, r2
 80054dc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <HAL_FLASH_Program+0x80>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000610 	.word	0x20000610
 80054f4:	58004000 	.word	0x58004000

080054f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_FLASH_Unlock+0x38>)
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	da0b      	bge.n	8005522 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_FLASH_Unlock+0x38>)
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_FLASH_Unlock+0x3c>)
 800550e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_FLASH_Unlock+0x38>)
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <HAL_FLASH_Unlock+0x40>)
 8005514:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_FLASH_Unlock+0x38>)
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da01      	bge.n	8005522 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005522:	79fb      	ldrb	r3, [r7, #7]
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	58004000 	.word	0x58004000
 8005534:	45670123 	.word	0x45670123
 8005538:	cdef89ab 	.word	0xcdef89ab

0800553c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_FLASH_Lock+0x30>)
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <HAL_FLASH_Lock+0x30>)
 800554c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005550:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_FLASH_Lock+0x30>)
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	db01      	blt.n	800555e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800555e:	79fb      	ldrb	r3, [r7, #7]
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	58004000 	.word	0x58004000

08005570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7fd f932 	bl	80027e0 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800557e:	e009      	b.n	8005594 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005580:	f7fd f92e 	bl	80027e0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d801      	bhi.n	8005594 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e047      	b.n	8005624 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005594:	4b25      	ldr	r3, [pc, #148]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d0ee      	beq.n	8005580 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80055a2:	4b22      	ldr	r3, [pc, #136]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80055b2:	4b1e      	ldr	r3, [pc, #120]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80055be:	4013      	ands	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <FLASH_WaitForLastOperation+0x6c>
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055d6:	4915      	ldr	r1, [pc, #84]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	618b      	str	r3, [r1, #24]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <FLASH_WaitForLastOperation+0x80>
 80055e6:	4a11      	ldr	r2, [pc, #68]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80055ee:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00e      	beq.n	8005614 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <FLASH_WaitForLastOperation+0xc0>)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e011      	b.n	8005624 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005600:	f7fd f8ee 	bl	80027e0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d801      	bhi.n	8005614 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e007      	b.n	8005624 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <FLASH_WaitForLastOperation+0xbc>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005620:	d0ee      	beq.n	8005600 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	58004000 	.word	0x58004000
 8005630:	20000610 	.word	0x20000610

08005634 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005640:	4b0e      	ldr	r3, [pc, #56]	; (800567c <FLASH_Program_DoubleWord+0x48>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <FLASH_Program_DoubleWord+0x48>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005652:	f3bf 8f6f 	isb	sy
}
 8005656:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	000a      	movs	r2, r1
 8005666:	2300      	movs	r3, #0
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	3104      	adds	r1, #4
 800566c:	4613      	mov	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	58004000 	.word	0x58004000

08005680 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005696:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <FLASH_Program_Fast+0x78>)
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <FLASH_Program_Fast+0x78>)
 800569c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80056a8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80056aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80056ac:	b672      	cpsid	i
}
 80056ae:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	3304      	adds	r3, #4
 80056bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3304      	adds	r3, #4
 80056c2:	617b      	str	r3, [r7, #20]
    row_index--;
 80056c4:	7ffb      	ldrb	r3, [r7, #31]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ef      	bne.n	80056b0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80056d0:	bf00      	nop
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <FLASH_Program_Fast+0x78>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056de:	d0f8      	beq.n	80056d2 <FLASH_Program_Fast+0x52>
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f383 8810 	msr	PRIMASK, r3
}
 80056ea:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80056ec:	bf00      	nop
 80056ee:	3724      	adds	r7, #36	; 0x24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	58004000 	.word	0x58004000

080056fc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005706:	4b28      	ldr	r3, [pc, #160]	; (80057a8 <HAL_FLASHEx_Erase+0xac>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_FLASHEx_Erase+0x16>
 800570e:	2302      	movs	r3, #2
 8005710:	e046      	b.n	80057a0 <HAL_FLASHEx_Erase+0xa4>
 8005712:	4b25      	ldr	r3, [pc, #148]	; (80057a8 <HAL_FLASHEx_Erase+0xac>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005718:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <HAL_FLASHEx_Erase+0xac>)
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800571e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005722:	f7ff ff25 	bl	8005570 <FLASH_WaitForLastOperation>
 8005726:	4603      	mov	r3, r0
 8005728:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d133      	bne.n	8005798 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d108      	bne.n	800574a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005738:	f000 f838 	bl	80057ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800573c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005740:	f7ff ff16 	bl	8005570 <FLASH_WaitForLastOperation>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e024      	b.n	8005794 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	e012      	b.n	8005780 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f000 f836 	bl	80057cc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005764:	f7ff ff04 	bl	8005570 <FLASH_WaitForLastOperation>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	601a      	str	r2, [r3, #0]
          break;
 8005778:	e00a      	b.n	8005790 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3301      	adds	r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4413      	add	r3, r2
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d3e4      	bcc.n	800575a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005790:	f000 f878 	bl	8005884 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005794:	f000 f832 	bl	80057fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <HAL_FLASHEx_Erase+0xac>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]

  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000610 	.word	0x20000610

080057ac <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <FLASH_MassErase+0x1c>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <FLASH_MassErase+0x1c>)
 80057b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	6153      	str	r3, [r2, #20]
#endif
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	58004000 	.word	0x58004000

080057cc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <FLASH_PageErase+0x2c>)
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <FLASH_PageErase+0x2c>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	f043 0302 	orr.w	r3, r3, #2
 80057ec:	6153      	str	r3, [r2, #20]
#endif
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	58004000 	.word	0x58004000

080057fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005808:	2b01      	cmp	r3, #1
 800580a:	d117      	bne.n	800583c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800580c:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <FLASH_FlushCaches+0x84>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005812:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005816:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005818:	4b19      	ldr	r3, [pc, #100]	; (8005880 <FLASH_FlushCaches+0x84>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <FLASH_FlushCaches+0x84>)
 800581e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <FLASH_FlushCaches+0x84>)
 800582a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a12      	ldr	r2, [pc, #72]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <FLASH_FlushCaches+0x84>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005844:	2b01      	cmp	r3, #1
 8005846:	d117      	bne.n	8005878 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <FLASH_FlushCaches+0x84>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <FLASH_FlushCaches+0x84>)
 800584e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005852:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a09      	ldr	r2, [pc, #36]	; (8005880 <FLASH_FlushCaches+0x84>)
 800585a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800586a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800586c:	4b04      	ldr	r3, [pc, #16]	; (8005880 <FLASH_FlushCaches+0x84>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a03      	ldr	r2, [pc, #12]	; (8005880 <FLASH_FlushCaches+0x84>)
 8005872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005876:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	58004000 	.word	0x58004000

08005884 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <FLASH_AcknowledgePageErase+0x1c>)
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <FLASH_AcknowledgePageErase+0x1c>)
 800588e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005892:	f023 0302 	bic.w	r3, r3, #2
 8005896:	6153      	str	r3, [r2, #20]
#endif
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr
 80058a0:	58004000 	.word	0x58004000

080058a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058b2:	e140      	b.n	8005b36 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	2101      	movs	r1, #1
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8132 	beq.w	8005b30 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d005      	beq.n	80058e4 <HAL_GPIO_Init+0x40>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d130      	bne.n	8005946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	2203      	movs	r2, #3
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4013      	ands	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800591a:	2201      	movs	r2, #1
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 0201 	and.w	r2, r3, #1
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d017      	beq.n	8005982 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	2203      	movs	r2, #3
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4013      	ands	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d123      	bne.n	80059d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3208      	adds	r2, #8
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	220f      	movs	r2, #15
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	08da      	lsrs	r2, r3, #3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3208      	adds	r2, #8
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4013      	ands	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0203 	and.w	r2, r3, #3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 808c 	beq.w	8005b30 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a18:	4a4e      	ldr	r2, [pc, #312]	; (8005b54 <HAL_GPIO_Init+0x2b0>)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	089b      	lsrs	r3, r3, #2
 8005a1e:	3302      	adds	r3, #2
 8005a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	2207      	movs	r2, #7
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a42:	d00d      	beq.n	8005a60 <HAL_GPIO_Init+0x1bc>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a44      	ldr	r2, [pc, #272]	; (8005b58 <HAL_GPIO_Init+0x2b4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <HAL_GPIO_Init+0x1b8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a43      	ldr	r2, [pc, #268]	; (8005b5c <HAL_GPIO_Init+0x2b8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_GPIO_Init+0x1b4>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e004      	b.n	8005a62 <HAL_GPIO_Init+0x1be>
 8005a58:	2307      	movs	r3, #7
 8005a5a:	e002      	b.n	8005a62 <HAL_GPIO_Init+0x1be>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_GPIO_Init+0x1be>
 8005a60:	2300      	movs	r3, #0
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	f002 0203 	and.w	r2, r2, #3
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a72:	4938      	ldr	r1, [pc, #224]	; (8005b54 <HAL_GPIO_Init+0x2b0>)
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a80:	4b37      	ldr	r3, [pc, #220]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005aa4:	4a2e      	ldr	r2, [pc, #184]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005ad4:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ada:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005afa:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005b28:	4a0d      	ldr	r2, [pc, #52]	; (8005b60 <HAL_GPIO_Init+0x2bc>)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3301      	adds	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f aeb7 	bne.w	80058b4 <HAL_GPIO_Init+0x10>
  }
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	48000400 	.word	0x48000400
 8005b5c:	48000800 	.word	0x48000800
 8005b60:	58000800 	.word	0x58000800

08005b64 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005b72:	e0af      	b.n	8005cd4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005b74:	2201      	movs	r2, #1
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a2 	beq.w	8005cce <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005b8a:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_GPIO_DeInit+0x18c>)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	3302      	adds	r3, #2
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_GPIO_DeInit+0x6c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <HAL_GPIO_DeInit+0x190>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <HAL_GPIO_DeInit+0x68>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a4e      	ldr	r2, [pc, #312]	; (8005cf8 <HAL_GPIO_DeInit+0x194>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_GPIO_DeInit+0x64>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e004      	b.n	8005bd2 <HAL_GPIO_DeInit+0x6e>
 8005bc8:	2307      	movs	r3, #7
 8005bca:	e002      	b.n	8005bd2 <HAL_GPIO_DeInit+0x6e>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_GPIO_DeInit+0x6e>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	f002 0203 	and.w	r2, r2, #3
 8005bd8:	0092      	lsls	r2, r2, #2
 8005bda:	4093      	lsls	r3, r2
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d136      	bne.n	8005c50 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005be2:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005be4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	4943      	ldr	r1, [pc, #268]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005bf6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	493f      	ldr	r1, [pc, #252]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	493b      	ldr	r1, [pc, #236]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005c14:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	4937      	ldr	r1, [pc, #220]	; (8005cfc <HAL_GPIO_DeInit+0x198>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	2207      	movs	r2, #7
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005c32:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <HAL_GPIO_DeInit+0x18c>)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	089b      	lsrs	r3, r3, #2
 8005c38:	3302      	adds	r3, #2
 8005c3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	43da      	mvns	r2, r3
 8005c42:	482b      	ldr	r0, [pc, #172]	; (8005cf0 <HAL_GPIO_DeInit+0x18c>)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	400a      	ands	r2, r1
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	2103      	movs	r1, #3
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	08da      	lsrs	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3208      	adds	r2, #8
 8005c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	220f      	movs	r2, #15
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	08d2      	lsrs	r2, r2, #3
 8005c84:	4019      	ands	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	2103      	movs	r1, #3
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	2103      	movs	r1, #3
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	401a      	ands	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f af49 	bne.w	8005b74 <HAL_GPIO_DeInit+0x10>
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	48000800 	.word	0x48000800
 8005cfc:	58000800 	.word	0x58000800

08005d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d10:	787b      	ldrb	r3, [r7, #1]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d16:	887a      	ldrh	r2, [r7, #2]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d1c:	e002      	b.n	8005d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d1e:	887a      	ldrh	r2, [r7, #2]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d40:	887a      	ldrh	r2, [r7, #2]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4013      	ands	r3, r2
 8005d46:	041a      	lsls	r2, r3, #16
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	43d9      	mvns	r1, r3
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	400b      	ands	r3, r1
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	619a      	str	r2, [r3, #24]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e081      	b.n	8005e76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb fe1c 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	; 0x24
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	e006      	b.n	8005de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d104      	bne.n	8005dfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	817b      	strh	r3, [r7, #10]
 8005e90:	4613      	mov	r3, r2
 8005e92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	f040 80da 	bne.w	8006056 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_I2C_Master_Transmit+0x30>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0d3      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eb8:	f7fc fc92 	bl	80027e0 <HAL_GetTick>
 8005ebc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2319      	movs	r3, #25
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f9e5 	bl	800629a <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0be      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2221      	movs	r2, #33	; 0x21
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	893a      	ldrh	r2, [r7, #8]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2bff      	cmp	r3, #255	; 0xff
 8005f0a:	d90e      	bls.n	8005f2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	22ff      	movs	r2, #255	; 0xff
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	8979      	ldrh	r1, [r7, #10]
 8005f1a:	4b51      	ldr	r3, [pc, #324]	; (8006060 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fbd0 	bl	80066c8 <I2C_TransferConfig>
 8005f28:	e06c      	b.n	8006004 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	8979      	ldrh	r1, [r7, #10]
 8005f3c:	4b48      	ldr	r3, [pc, #288]	; (8006060 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fbbf 	bl	80066c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f4a:	e05b      	b.n	8006004 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	6a39      	ldr	r1, [r7, #32]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f9e2 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e07b      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d034      	beq.n	8006004 <HAL_I2C_Master_Transmit+0x184>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d130      	bne.n	8006004 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f974 	bl	800629a <I2C_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e04d      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2bff      	cmp	r3, #255	; 0xff
 8005fc4:	d90e      	bls.n	8005fe4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	8979      	ldrh	r1, [r7, #10]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fb73 	bl	80066c8 <I2C_TransferConfig>
 8005fe2:	e00f      	b.n	8006004 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	8979      	ldrh	r1, [r7, #10]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fb62 	bl	80066c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d19e      	bne.n	8005f4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6a39      	ldr	r1, [r7, #32]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f9c1 	bl	800639a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e01a      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2220      	movs	r2, #32
 8006028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6859      	ldr	r1, [r3, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_I2C_Master_Transmit+0x1e4>)
 8006036:	400b      	ands	r3, r1
 8006038:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	80002000 	.word	0x80002000
 8006064:	fe00e800 	.word	0xfe00e800

08006068 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	461a      	mov	r2, r3
 8006074:	460b      	mov	r3, r1
 8006076:	817b      	strh	r3, [r7, #10]
 8006078:	4613      	mov	r3, r2
 800607a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 80db 	bne.w	8006240 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_I2C_Master_Receive+0x30>
 8006094:	2302      	movs	r3, #2
 8006096:	e0d4      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060a0:	f7fc fb9e 	bl	80027e0 <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2319      	movs	r3, #25
 80060ac:	2201      	movs	r2, #1
 80060ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f8f1 	bl	800629a <I2C_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e0bf      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2222      	movs	r2, #34	; 0x22
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2210      	movs	r2, #16
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	893a      	ldrh	r2, [r7, #8]
 80060e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2bff      	cmp	r3, #255	; 0xff
 80060f2:	d90e      	bls.n	8006112 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	8979      	ldrh	r1, [r7, #10]
 8006102:	4b52      	ldr	r3, [pc, #328]	; (800624c <HAL_I2C_Master_Receive+0x1e4>)
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fadc 	bl	80066c8 <I2C_TransferConfig>
 8006110:	e06d      	b.n	80061ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	b2da      	uxtb	r2, r3
 8006122:	8979      	ldrh	r1, [r7, #10]
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <HAL_I2C_Master_Receive+0x1e4>)
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 facb 	bl	80066c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006132:	e05c      	b.n	80061ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	6a39      	ldr	r1, [r7, #32]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f96b 	bl	8006414 <I2C_WaitOnRXNEFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e07c      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d034      	beq.n	80061ee <HAL_I2C_Master_Receive+0x186>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d130      	bne.n	80061ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2200      	movs	r2, #0
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f87f 	bl	800629a <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e04d      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2bff      	cmp	r3, #255	; 0xff
 80061ae:	d90e      	bls.n	80061ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	22ff      	movs	r2, #255	; 0xff
 80061b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	8979      	ldrh	r1, [r7, #10]
 80061be:	2300      	movs	r3, #0
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fa7e 	bl	80066c8 <I2C_TransferConfig>
 80061cc:	e00f      	b.n	80061ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	8979      	ldrh	r1, [r7, #10]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fa6d 	bl	80066c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d19d      	bne.n	8006134 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	6a39      	ldr	r1, [r7, #32]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f8cc 	bl	800639a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e01a      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2220      	movs	r2, #32
 8006212:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <HAL_I2C_Master_Receive+0x1e8>)
 8006220:	400b      	ands	r3, r1
 8006222:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	80002400 	.word	0x80002400
 8006250:	fe00e800 	.word	0xfe00e800

08006254 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d103      	bne.n	8006272 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d007      	beq.n	8006290 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	619a      	str	r2, [r3, #24]
  }
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	4613      	mov	r3, r2
 80062a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062aa:	e022      	b.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d01e      	beq.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b4:	f7fc fa94 	bl	80027e0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d302      	bcc.n	80062ca <I2C_WaitOnFlagUntilTimeout+0x30>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d113      	bne.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00f      	b.n	8006312 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	429a      	cmp	r2, r3
 800630e:	d0cd      	beq.n	80062ac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006326:	e02c      	b.n	8006382 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f8eb 	bl	8006508 <I2C_IsErrorOccurred>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e02a      	b.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d01e      	beq.n	8006382 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fc fa4c 	bl	80027e0 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e007      	b.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d1cb      	bne.n	8006328 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a6:	e028      	b.n	80063fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f8ab 	bl	8006508 <I2C_IsErrorOccurred>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e026      	b.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063bc:	f7fc fa10 	bl	80027e0 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d113      	bne.n	80063fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e007      	b.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d1cf      	bne.n	80063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006420:	e064      	b.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f86e 	bl	8006508 <I2C_IsErrorOccurred>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e062      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b20      	cmp	r3, #32
 8006442:	d138      	bne.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b04      	cmp	r3, #4
 8006450:	d105      	bne.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e04e      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b10      	cmp	r3, #16
 800646a:	d107      	bne.n	800647c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2210      	movs	r2, #16
 8006472:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2204      	movs	r2, #4
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
 800647a:	e002      	b.n	8006482 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2220      	movs	r2, #32
 8006488:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6859      	ldr	r1, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006496:	400b      	ands	r3, r1
 8006498:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e022      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fc f993 	bl	80027e0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10f      	bne.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e007      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d193      	bne.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	d068      	beq.n	8006606 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2210      	movs	r2, #16
 800653a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800653c:	e049      	b.n	80065d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d045      	beq.n	80065d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fc f94b 	bl	80027e0 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_IsErrorOccurred+0x54>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d13a      	bne.n	80065d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006566:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800656e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657e:	d121      	bne.n	80065c4 <I2C_IsErrorOccurred+0xbc>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006586:	d01d      	beq.n	80065c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006588:	7cfb      	ldrb	r3, [r7, #19]
 800658a:	2b20      	cmp	r3, #32
 800658c:	d01a      	beq.n	80065c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800659c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800659e:	f7fc f91f 	bl	80027e0 <HAL_GetTick>
 80065a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065a4:	e00e      	b.n	80065c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065a6:	f7fc f91b 	bl	80027e0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b19      	cmp	r3, #25
 80065b2:	d907      	bls.n	80065c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	f043 0320 	orr.w	r3, r3, #32
 80065ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80065c2:	e006      	b.n	80065d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d1e9      	bne.n	80065a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d003      	beq.n	80065e8 <I2C_IsErrorOccurred+0xe0>
 80065e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0aa      	beq.n	800653e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2220      	movs	r2, #32
 80065f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f043 0304 	orr.w	r3, r3, #4
 80065fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f043 0308 	orr.w	r3, r3, #8
 8006640:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800664a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f043 0302 	orr.w	r3, r3, #2
 8006662:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01c      	beq.n	80066b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fde9 	bl	8006254 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <I2C_IsErrorOccurred+0x1bc>)
 800668e:	400b      	ands	r3, r1
 8006690:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	431a      	orrs	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	; 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	fe00e800 	.word	0xfe00e800

080066c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	817b      	strh	r3, [r7, #10]
 80066d6:	4613      	mov	r3, r2
 80066d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066e0:	7a7b      	ldrb	r3, [r7, #9]
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	0d5b      	lsrs	r3, r3, #21
 8006702:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <I2C_TransferConfig+0x5c>)
 8006708:	430b      	orrs	r3, r1
 800670a:	43db      	mvns	r3, r3
 800670c:	ea02 0103 	and.w	r1, r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr
 8006724:	03ff63ff 	.word	0x03ff63ff

08006728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b20      	cmp	r3, #32
 800673c:	d138      	bne.n	80067b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006748:	2302      	movs	r3, #2
 800674a:	e032      	b.n	80067b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800677a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6819      	ldr	r1, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d139      	bne.n	8006846 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067dc:	2302      	movs	r3, #2
 80067de:	e033      	b.n	8006848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2224      	movs	r2, #36	; 0x24
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800680e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e000      	b.n	8006848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006846:	2302      	movs	r3, #2
  }
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
	...

08006854 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <HAL_PWR_EnableBkUpAccess+0x18>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a03      	ldr	r2, [pc, #12]	; (800686c <HAL_PWR_EnableBkUpAccess+0x18>)
 800685e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006862:	6013      	str	r3, [r2, #0]
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr
 800686c:	58000400 	.word	0x58000400

08006870 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10c      	bne.n	800689c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688e:	d10d      	bne.n	80068ac <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006890:	f000 f83c 	bl	800690c <HAL_PWREx_DisableLowPowerRunMode>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800689a:	e015      	b.n	80068c8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80068a8:	f000 f822 	bl	80068f0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80068b2:	f023 0304 	bic.w	r3, r3, #4
 80068b6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80068be:	bf30      	wfi
 80068c0:	e002      	b.n	80068c8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80068c2:	bf40      	sev
    __WFE();
 80068c4:	bf20      	wfe
    __WFE();
 80068c6:	bf20      	wfe
  }
}
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	58000400 	.word	0x58000400
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_PWREx_GetVoltageRange+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr
 80068ec:	58000400 	.word	0x58000400

080068f0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a03      	ldr	r2, [pc, #12]	; (8006908 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80068fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	58000400 	.word	0x58000400

0800690c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2232      	movs	r2, #50	; 0x32
 8006924:	fb02 f303 	mul.w	r3, r2, r3
 8006928:	4a12      	ldr	r2, [pc, #72]	; (8006974 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	0c9b      	lsrs	r3, r3, #18
 8006930:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006932:	e002      	b.n	800693a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3b01      	subs	r3, #1
 8006938:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006946:	d102      	bne.n	800694e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f2      	bne.n	8006934 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695a:	d101      	bne.n	8006960 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e000      	b.n	8006962 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	58000400 	.word	0x58000400
 8006970:	20000004 	.word	0x20000004
 8006974:	431bde83 	.word	0x431bde83

08006978 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	4a0e      	ldr	r2, [pc, #56]	; (80069c4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80069a4:	bf30      	wfi
 80069a6:	e002      	b.n	80069ae <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80069a8:	bf40      	sev
    __WFE();
 80069aa:	bf20      	wfe
    __WFE();
 80069ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069b4:	f023 0304 	bic.w	r3, r3, #4
 80069b8:	6113      	str	r3, [r2, #16]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	58000400 	.word	0x58000400
 80069c8:	e000ed00 	.word	0xe000ed00

080069cc <LL_PWR_IsEnabledBkUpAccess>:
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069dc:	d101      	bne.n	80069e2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr
 80069ec:	58000400 	.word	0x58000400

080069f0 <LL_RCC_HSE_EnableTcxo>:
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a02:	6013      	str	r3, [r2, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <LL_RCC_HSE_DisableTcxo>:
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a1e:	6013      	str	r3, [r2, #0]
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3a:	d101      	bne.n	8006a40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <LL_RCC_HSE_Enable>:
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <LL_RCC_HSE_Disable>:
{
 8006a66:	b480      	push	{r7}
 8006a68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a78:	6013      	str	r3, [r2, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <LL_RCC_HSE_IsReady>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a94:	d101      	bne.n	8006a9a <LL_RCC_HSE_IsReady+0x18>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <LL_RCC_HSE_IsReady+0x1a>
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_HSI_Enable>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <LL_RCC_HSI_Disable>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <LL_RCC_HSI_IsReady>:
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aee:	d101      	bne.n	8006af4 <LL_RCC_HSI_IsReady+0x18>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <LL_RCC_HSI_IsReady+0x1a>
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <LL_RCC_HSI_SetCalibTrimming>:
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	604b      	str	r3, [r1, #4]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <LL_RCC_LSE_IsReady>:
{
 8006b26:	b480      	push	{r7}
 8006b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d101      	bne.n	8006b3e <LL_RCC_LSE_IsReady+0x18>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <LL_RCC_LSE_IsReady+0x1a>
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <LL_RCC_LSI_Enable>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr

08006b68 <LL_RCC_LSI_Disable>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <LL_RCC_LSI_IsReady>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d101      	bne.n	8006ba0 <LL_RCC_LSI_IsReady+0x18>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <LL_RCC_LSI_IsReady+0x1a>
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <LL_RCC_MSI_Enable>:
{
 8006baa:	b480      	push	{r7}
 8006bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bb8:	f043 0301 	orr.w	r3, r3, #1
 8006bbc:	6013      	str	r3, [r2, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <LL_RCC_MSI_Disable>:
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	6013      	str	r3, [r2, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <LL_RCC_MSI_IsReady>:
{
 8006be2:	b480      	push	{r7}
 8006be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d101      	bne.n	8006bf8 <LL_RCC_MSI_IsReady+0x16>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <LL_RCC_MSI_IsReady+0x18>
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006c02:	b480      	push	{r7}
 8006c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d101      	bne.n	8006c18 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <LL_RCC_MSI_GetRange>:
{
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <LL_RCC_SetSysClkSource>:
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f023 0203 	bic.w	r2, r3, #3
 8006c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	608b      	str	r3, [r1, #8]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <LL_RCC_GetSysClkSource>:
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <LL_RCC_SetAHBPrescaler>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <LL_RCC_SetAHB3Prescaler>:
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cea:	f023 020f 	bic.w	r2, r3, #15
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <LL_RCC_SetAPB1Prescaler>:
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr

08006d2c <LL_RCC_SetAPB2Prescaler>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <LL_RCC_GetAHBPrescaler>:
{
 8006d52:	b480      	push	{r7}
 8006d54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <LL_RCC_GetAHB3Prescaler>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_GetAPB1Prescaler>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <LL_RCC_GetAPB2Prescaler>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006dae:	b480      	push	{r7}
 8006db0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc0:	6013      	str	r3, [r2, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ddc:	6013      	str	r3, [r2, #0]
}
 8006dde:	bf00      	nop
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df8:	d101      	bne.n	8006dfe <LL_RCC_PLL_IsReady+0x18>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <LL_RCC_PLL_IsReady+0x1a>
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr

08006e36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e36:	b480      	push	{r7}
 8006e38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0303 	and.w	r3, r3, #3
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006e62:	b480      	push	{r7}
 8006e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e74:	d101      	bne.n	8006e7a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e98:	d101      	bne.n	8006e9e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eba:	d101      	bne.n	8006ec0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr

08006eca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006edc:	d101      	bne.n	8006ee2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e36f      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efe:	f7ff fece 	bl	8006c9e <LL_RCC_GetSysClkSource>
 8006f02:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f04:	f7ff ffa2 	bl	8006e4c <LL_RCC_PLL_GetMainSource>
 8006f08:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80c4 	beq.w	80070a0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_RCC_OscConfig+0x3e>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d176      	bne.n	8007012 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d173      	bne.n	8007012 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e353      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_OscConfig+0x68>
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f52:	e006      	b.n	8006f62 <HAL_RCC_OscConfig+0x76>
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d222      	bcs.n	8006fac <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fd3c 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e331      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f84:	f043 0308 	orr.w	r3, r3, #8
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fe53 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>
 8006faa:	e021      	b.n	8006ff0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb6:	f043 0308 	orr.w	r3, r3, #8
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fe3a 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fd01 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e2f6      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ff0:	f000 fcc2 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4aa7      	ldr	r2, [pc, #668]	; (8007294 <HAL_RCC_OscConfig+0x3a8>)
 8006ff8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006ffa:	4ba7      	ldr	r3, [pc, #668]	; (8007298 <HAL_RCC_OscConfig+0x3ac>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fb fbe4 	bl	80027cc <HAL_InitTick>
 8007004:	4603      	mov	r3, r0
 8007006:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d047      	beq.n	800709e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800700e:	7cfb      	ldrb	r3, [r7, #19]
 8007010:	e2e5      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d02c      	beq.n	8007074 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800701a:	f7ff fdc6 	bl	8006baa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800701e:	f7fb fbdf 	bl	80027e0 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007026:	f7fb fbdb 	bl	80027e0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e2d2      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007038:	f7ff fdd3 	bl	8006be2 <LL_RCC_MSI_IsReady>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f1      	beq.n	8007026 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800704c:	f043 0308 	orr.w	r3, r3, #8
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fdef 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>
 8007072:	e015      	b.n	80070a0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007074:	f7ff fda7 	bl	8006bc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007078:	f7fb fbb2 	bl	80027e0 <HAL_GetTick>
 800707c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007080:	f7fb fbae 	bl	80027e0 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e2a5      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007092:	f7ff fda6 	bl	8006be2 <LL_RCC_MSI_IsReady>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f1      	bne.n	8007080 <HAL_RCC_OscConfig+0x194>
 800709c:	e000      	b.n	80070a0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800709e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d058      	beq.n	800715e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d005      	beq.n	80070be <HAL_RCC_OscConfig+0x1d2>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b0c      	cmp	r3, #12
 80070b6:	d108      	bne.n	80070ca <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d105      	bne.n	80070ca <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d14b      	bne.n	800715e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e289      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80070ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070dc:	4313      	orrs	r3, r2
 80070de:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d102      	bne.n	80070f0 <HAL_RCC_OscConfig+0x204>
 80070ea:	f7ff fcae 	bl	8006a4a <LL_RCC_HSE_Enable>
 80070ee:	e00d      	b.n	800710c <HAL_RCC_OscConfig+0x220>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80070f8:	d104      	bne.n	8007104 <HAL_RCC_OscConfig+0x218>
 80070fa:	f7ff fc79 	bl	80069f0 <LL_RCC_HSE_EnableTcxo>
 80070fe:	f7ff fca4 	bl	8006a4a <LL_RCC_HSE_Enable>
 8007102:	e003      	b.n	800710c <HAL_RCC_OscConfig+0x220>
 8007104:	f7ff fcaf 	bl	8006a66 <LL_RCC_HSE_Disable>
 8007108:	f7ff fc80 	bl	8006a0c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d012      	beq.n	800713a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007114:	f7fb fb64 	bl	80027e0 <HAL_GetTick>
 8007118:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800711c:	f7fb fb60 	bl	80027e0 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b64      	cmp	r3, #100	; 0x64
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e257      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800712e:	f7ff fca8 	bl	8006a82 <LL_RCC_HSE_IsReady>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f1      	beq.n	800711c <HAL_RCC_OscConfig+0x230>
 8007138:	e011      	b.n	800715e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713a:	f7fb fb51 	bl	80027e0 <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007142:	f7fb fb4d 	bl	80027e0 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b64      	cmp	r3, #100	; 0x64
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e244      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007154:	f7ff fc95 	bl	8006a82 <LL_RCC_HSE_IsReady>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f1      	bne.n	8007142 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d046      	beq.n	80071f8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b04      	cmp	r3, #4
 800716e:	d005      	beq.n	800717c <HAL_RCC_OscConfig+0x290>
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d10e      	bne.n	8007194 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d10b      	bne.n	8007194 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e22a      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fcb6 	bl	8006afe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007192:	e031      	b.n	80071f8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d019      	beq.n	80071d0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800719c:	f7ff fc82 	bl	8006aa4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fb fb1e 	bl	80027e0 <HAL_GetTick>
 80071a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071a8:	f7fb fb1a 	bl	80027e0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e211      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071ba:	f7ff fc8f 	bl	8006adc <LL_RCC_HSI_IsReady>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f1      	beq.n	80071a8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fc98 	bl	8006afe <LL_RCC_HSI_SetCalibTrimming>
 80071ce:	e013      	b.n	80071f8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071d0:	f7ff fc76 	bl	8006ac0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d4:	f7fb fb04 	bl	80027e0 <HAL_GetTick>
 80071d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071dc:	f7fb fb00 	bl	80027e0 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e1f7      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80071ee:	f7ff fc75 	bl	8006adc <LL_RCC_HSI_IsReady>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f1      	bne.n	80071dc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d06e      	beq.n	80072e2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d056      	beq.n	80072ba <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800720c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007214:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	429a      	cmp	r2, r3
 8007222:	d031      	beq.n	8007288 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e1d0      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d013      	beq.n	800726e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007246:	f7ff fc8f 	bl	8006b68 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800724a:	f7fb fac9 	bl	80027e0 <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007252:	f7fb fac5 	bl	80027e0 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b11      	cmp	r3, #17
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e1bc      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007264:	f7ff fc90 	bl	8006b88 <LL_RCC_LSI_IsReady>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f1      	bne.n	8007252 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800726e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007276:	f023 0210 	bic.w	r2, r3, #16
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007288:	f7ff fc5e 	bl	8006b48 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728c:	f7fb faa8 	bl	80027e0 <HAL_GetTick>
 8007290:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007292:	e00c      	b.n	80072ae <HAL_RCC_OscConfig+0x3c2>
 8007294:	20000004 	.word	0x20000004
 8007298:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729c:	f7fb faa0 	bl	80027e0 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b11      	cmp	r3, #17
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e197      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80072ae:	f7ff fc6b 	bl	8006b88 <LL_RCC_LSI_IsReady>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f1      	beq.n	800729c <HAL_RCC_OscConfig+0x3b0>
 80072b8:	e013      	b.n	80072e2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ba:	f7ff fc55 	bl	8006b68 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072be:	f7fb fa8f 	bl	80027e0 <HAL_GetTick>
 80072c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072c6:	f7fb fa8b 	bl	80027e0 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b11      	cmp	r3, #17
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e182      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80072d8:	f7ff fc56 	bl	8006b88 <LL_RCC_LSI_IsReady>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f1      	bne.n	80072c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80d8 	beq.w	80074a0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80072f0:	f7ff fb6c 	bl	80069cc <LL_PWR_IsEnabledBkUpAccess>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d113      	bne.n	8007322 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072fa:	f7ff faab 	bl	8006854 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072fe:	f7fb fa6f 	bl	80027e0 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007306:	f7fb fa6b 	bl	80027e0 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e162      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007318:	f7ff fb58 	bl	80069cc <LL_PWR_IsEnabledBkUpAccess>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f1      	beq.n	8007306 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d07b      	beq.n	8007422 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b85      	cmp	r3, #133	; 0x85
 8007330:	d003      	beq.n	800733a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b05      	cmp	r3, #5
 8007338:	d109      	bne.n	800734e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800733a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007346:	f043 0304 	orr.w	r3, r3, #4
 800734a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734e:	f7fb fa47 	bl	80027e0 <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007368:	e00a      	b.n	8007380 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fb fa39 	bl	80027e0 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f241 3288 	movw	r2, #5000	; 0x1388
 8007378:	4293      	cmp	r3, r2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e12e      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007380:	f7ff fbd1 	bl	8006b26 <LL_RCC_LSE_IsReady>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0ef      	beq.n	800736a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b81      	cmp	r3, #129	; 0x81
 8007390:	d003      	beq.n	800739a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b85      	cmp	r3, #133	; 0x85
 8007398:	d121      	bne.n	80073de <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739a:	f7fb fa21 	bl	80027e0 <HAL_GetTick>
 800739e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073b4:	e00a      	b.n	80073cc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b6:	f7fb fa13 	bl	80027e0 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e108      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0ec      	beq.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80073dc:	e060      	b.n	80074a0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073de:	f7fb f9ff 	bl	80027e0 <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073f8:	e00a      	b.n	8007410 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fb f9f1 	bl	80027e0 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0e6      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ec      	bne.n	80073fa <HAL_RCC_OscConfig+0x50e>
 8007420:	e03e      	b.n	80074a0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007422:	f7fb f9dd 	bl	80027e0 <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800743c:	e00a      	b.n	8007454 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743e:	f7fb f9cf 	bl	80027e0 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f241 3288 	movw	r2, #5000	; 0x1388
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e0c4      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1ec      	bne.n	800743e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007464:	f7fb f9bc 	bl	80027e0 <HAL_GetTick>
 8007468:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800746a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800747e:	e00a      	b.n	8007496 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007480:	f7fb f9ae 	bl	80027e0 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	f241 3288 	movw	r2, #5000	; 0x1388
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e0a3      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007496:	f7ff fb46 	bl	8006b26 <LL_RCC_LSE_IsReady>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ef      	bne.n	8007480 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8099 	beq.w	80075dc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b0c      	cmp	r3, #12
 80074ae:	d06c      	beq.n	800758a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d14b      	bne.n	8007550 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b8:	f7ff fc87 	bl	8006dca <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074bc:	f7fb f990 	bl	80027e0 <HAL_GetTick>
 80074c0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c4:	f7fb f98c 	bl	80027e0 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b0a      	cmp	r3, #10
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e083      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80074d6:	f7ff fc86 	bl	8006de6 <LL_RCC_PLL_IsReady>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f1      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	4b40      	ldr	r3, [pc, #256]	; (80075e8 <HAL_RCC_OscConfig+0x6fc>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074f2:	4311      	orrs	r1, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074f8:	0212      	lsls	r2, r2, #8
 80074fa:	4311      	orrs	r1, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007500:	4311      	orrs	r1, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007506:	4311      	orrs	r1, r2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800750c:	430a      	orrs	r2, r1
 800750e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007512:	4313      	orrs	r3, r2
 8007514:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007516:	f7ff fc4a 	bl	8006dae <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007528:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800752a:	f7fb f959 	bl	80027e0 <HAL_GetTick>
 800752e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007532:	f7fb f955 	bl	80027e0 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b0a      	cmp	r3, #10
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e04c      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007544:	f7ff fc4f 	bl	8006de6 <LL_RCC_PLL_IsReady>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f1      	beq.n	8007532 <HAL_RCC_OscConfig+0x646>
 800754e:	e045      	b.n	80075dc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007550:	f7ff fc3b 	bl	8006dca <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007554:	f7fb f944 	bl	80027e0 <HAL_GetTick>
 8007558:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7fb f940 	bl	80027e0 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b0a      	cmp	r3, #10
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e037      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800756e:	f7ff fc3a 	bl	8006de6 <LL_RCC_PLL_IsReady>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f1      	bne.n	800755c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007582:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <HAL_RCC_OscConfig+0x700>)
 8007584:	4013      	ands	r3, r2
 8007586:	60cb      	str	r3, [r1, #12]
 8007588:	e028      	b.n	80075dc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e023      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f003 0203 	and.w	r2, r3, #3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d115      	bne.n	80075d8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d10e      	bne.n	80075d8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d106      	bne.n	80075d8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	11c1808c 	.word	0x11c1808c
 80075ec:	eefefffc 	.word	0xeefefffc

080075f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e10f      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007604:	4b89      	ldr	r3, [pc, #548]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d91b      	bls.n	800764a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007612:	4b86      	ldr	r3, [pc, #536]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 0207 	bic.w	r2, r3, #7
 800761a:	4984      	ldr	r1, [pc, #528]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	4313      	orrs	r3, r2
 8007620:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007622:	f7fb f8dd 	bl	80027e0 <HAL_GetTick>
 8007626:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007628:	e008      	b.n	800763c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800762a:	f7fb f8d9 	bl	80027e0 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e0f3      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763c:	4b7b      	ldr	r3, [pc, #492]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d1ef      	bne.n	800762a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fb2a 	bl	8006cb4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007660:	f7fb f8be 	bl	80027e0 <HAL_GetTick>
 8007664:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007668:	f7fb f8ba 	bl	80027e0 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e0d4      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800767a:	f7ff fbf2 	bl	8006e62 <LL_RCC_IsActiveFlag_HPRE>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f1      	beq.n	8007668 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d016      	beq.n	80076be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fb20 	bl	8006cda <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800769a:	f7fb f8a1 	bl	80027e0 <HAL_GetTick>
 800769e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076a0:	e008      	b.n	80076b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076a2:	f7fb f89d 	bl	80027e0 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d901      	bls.n	80076b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e0b7      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076b4:	f7ff fbe6 	bl	8006e84 <LL_RCC_IsActiveFlag_SHDHPRE>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f1      	beq.n	80076a2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fb19 	bl	8006d06 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076d4:	f7fb f884 	bl	80027e0 <HAL_GetTick>
 80076d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076dc:	f7fb f880 	bl	80027e0 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e09a      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80076ee:	f7ff fbdb 	bl	8006ea8 <LL_RCC_IsActiveFlag_PPRE1>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0f1      	beq.n	80076dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d017      	beq.n	8007734 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fb0e 	bl	8006d2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007710:	f7fb f866 	bl	80027e0 <HAL_GetTick>
 8007714:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007718:	f7fb f862 	bl	80027e0 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e07c      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800772a:	f7ff fbce 	bl	8006eca <LL_RCC_IsActiveFlag_PPRE2>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f1      	beq.n	8007718 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d043      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d106      	bne.n	8007756 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007748:	f7ff f99b 	bl	8006a82 <LL_RCC_HSE_IsReady>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11e      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e066      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d106      	bne.n	800776c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800775e:	f7ff fb42 	bl	8006de6 <LL_RCC_PLL_IsReady>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d113      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e05b      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007774:	f7ff fa35 	bl	8006be2 <LL_RCC_MSI_IsReady>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e050      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007782:	f7ff f9ab 	bl	8006adc <LL_RCC_HSI_IsReady>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e049      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff fa6f 	bl	8006c78 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800779a:	f7fb f821 	bl	80027e0 <HAL_GetTick>
 800779e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a0:	e00a      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a2:	f7fb f81d 	bl	80027e0 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e035      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b8:	f7ff fa71 	bl	8006c9e <LL_RCC_GetSysClkSource>
 80077bc:	4602      	mov	r2, r0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1ec      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077c8:	4b18      	ldr	r3, [pc, #96]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d21b      	bcs.n	800780e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 0207 	bic.w	r2, r3, #7
 80077de:	4913      	ldr	r1, [pc, #76]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077e6:	f7fa fffb 	bl	80027e0 <HAL_GetTick>
 80077ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077ee:	f7fa fff7 	bl	80027e0 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e011      	b.n	8007824 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <HAL_RCC_ClockConfig+0x23c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d1ef      	bne.n	80077ee <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800780e:	f000 f8b3 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8007812:	4603      	mov	r3, r0
 8007814:	4a06      	ldr	r2, [pc, #24]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fa ffd5 	bl	80027cc <HAL_InitTick>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	58004000 	.word	0x58004000
 8007830:	20000004 	.word	0x20000004
 8007834:	2000000c 	.word	0x2000000c

08007838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007846:	f7ff fa2a 	bl	8006c9e <LL_RCC_GetSysClkSource>
 800784a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800784c:	f7ff fafe 	bl	8006e4c <LL_RCC_PLL_GetMainSource>
 8007850:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_RCC_GetSysClockFreq+0x2c>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d139      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d136      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007864:	f7ff f9cd 	bl	8006c02 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d115      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x62>
 800786e:	f7ff f9c8 	bl	8006c02 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <HAL_RCC_GetSysClockFreq+0x4e>
 8007878:	f7ff f9d3 	bl	8006c22 <LL_RCC_MSI_GetRange>
 800787c:	4603      	mov	r3, r0
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	e005      	b.n	8007892 <HAL_RCC_GetSysClockFreq+0x5a>
 8007886:	f7ff f9d7 	bl	8006c38 <LL_RCC_MSI_GetRangeAfterStandby>
 800788a:	4603      	mov	r3, r0
 800788c:	0a1b      	lsrs	r3, r3, #8
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	4a36      	ldr	r2, [pc, #216]	; (800796c <HAL_RCC_GetSysClockFreq+0x134>)
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	e014      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x8c>
 800789a:	f7ff f9b2 	bl	8006c02 <LL_RCC_MSI_IsEnabledRangeSelect>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d106      	bne.n	80078b2 <HAL_RCC_GetSysClockFreq+0x7a>
 80078a4:	f7ff f9bd 	bl	8006c22 <LL_RCC_MSI_GetRange>
 80078a8:	4603      	mov	r3, r0
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	e005      	b.n	80078be <HAL_RCC_GetSysClockFreq+0x86>
 80078b2:	f7ff f9c1 	bl	8006c38 <LL_RCC_MSI_GetRangeAfterStandby>
 80078b6:	4603      	mov	r3, r0
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	4a2b      	ldr	r2, [pc, #172]	; (800796c <HAL_RCC_GetSysClockFreq+0x134>)
 80078c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d115      	bne.n	80078f8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078d0:	e012      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d102      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <HAL_RCC_GetSysClockFreq+0x138>)
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e00c      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d109      	bne.n	80078f8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078e4:	f7ff f8a0 	bl	8006a28 <LL_RCC_HSE_IsEnabledDiv2>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d102      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80078ee:	4b20      	ldr	r3, [pc, #128]	; (8007970 <HAL_RCC_GetSysClockFreq+0x138>)
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	e001      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80078f4:	4b1f      	ldr	r3, [pc, #124]	; (8007974 <HAL_RCC_GetSysClockFreq+0x13c>)
 80078f6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078f8:	f7ff f9d1 	bl	8006c9e <LL_RCC_GetSysClkSource>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b0c      	cmp	r3, #12
 8007900:	d12f      	bne.n	8007962 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007902:	f7ff faa3 	bl	8006e4c <LL_RCC_PLL_GetMainSource>
 8007906:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d003      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0xde>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d003      	beq.n	800791c <HAL_RCC_GetSysClockFreq+0xe4>
 8007914:	e00d      	b.n	8007932 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007916:	4b16      	ldr	r3, [pc, #88]	; (8007970 <HAL_RCC_GetSysClockFreq+0x138>)
 8007918:	60fb      	str	r3, [r7, #12]
        break;
 800791a:	e00d      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800791c:	f7ff f884 	bl	8006a28 <LL_RCC_HSE_IsEnabledDiv2>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d102      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007926:	4b12      	ldr	r3, [pc, #72]	; (8007970 <HAL_RCC_GetSysClockFreq+0x138>)
 8007928:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800792a:	e005      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800792c:	4b11      	ldr	r3, [pc, #68]	; (8007974 <HAL_RCC_GetSysClockFreq+0x13c>)
 800792e:	60fb      	str	r3, [r7, #12]
        break;
 8007930:	e002      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	60fb      	str	r3, [r7, #12]
        break;
 8007936:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007938:	f7ff fa66 	bl	8006e08 <LL_RCC_PLL_GetN>
 800793c:	4602      	mov	r2, r0
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	fb03 f402 	mul.w	r4, r3, r2
 8007944:	f7ff fa77 	bl	8006e36 <LL_RCC_PLL_GetDivider>
 8007948:	4603      	mov	r3, r0
 800794a:	091b      	lsrs	r3, r3, #4
 800794c:	3301      	adds	r3, #1
 800794e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007952:	f7ff fa65 	bl	8006e20 <LL_RCC_PLL_GetR>
 8007956:	4603      	mov	r3, r0
 8007958:	0f5b      	lsrs	r3, r3, #29
 800795a:	3301      	adds	r3, #1
 800795c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007960:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007962:	697b      	ldr	r3, [r7, #20]
}
 8007964:	4618      	mov	r0, r3
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}
 800796c:	0801e180 	.word	0x0801e180
 8007970:	00f42400 	.word	0x00f42400
 8007974:	01e84800 	.word	0x01e84800

08007978 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007978:	b598      	push	{r3, r4, r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800797c:	f7ff ff5c 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 8007980:	4604      	mov	r4, r0
 8007982:	f7ff f9e6 	bl	8006d52 <LL_RCC_GetAHBPrescaler>
 8007986:	4603      	mov	r3, r0
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	4a03      	ldr	r2, [pc, #12]	; (800799c <HAL_RCC_GetHCLKFreq+0x24>)
 8007990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007994:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd98      	pop	{r3, r4, r7, pc}
 800799c:	0801e120 	.word	0x0801e120

080079a0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a0:	b598      	push	{r3, r4, r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079a4:	f7ff ffe8 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80079a8:	4604      	mov	r4, r0
 80079aa:	f7ff f9ea 	bl	8006d82 <LL_RCC_GetAPB1Prescaler>
 80079ae:	4603      	mov	r3, r0
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	4a03      	ldr	r2, [pc, #12]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079bc:	4618      	mov	r0, r3
 80079be:	bd98      	pop	{r3, r4, r7, pc}
 80079c0:	0801e160 	.word	0x0801e160

080079c4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c4:	b598      	push	{r3, r4, r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80079c8:	f7ff ffd6 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80079cc:	4604      	mov	r4, r0
 80079ce:	f7ff f9e3 	bl	8006d98 <LL_RCC_GetAPB2Prescaler>
 80079d2:	4603      	mov	r3, r0
 80079d4:	0adb      	lsrs	r3, r3, #11
 80079d6:	4a03      	ldr	r2, [pc, #12]	; (80079e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd98      	pop	{r3, r4, r7, pc}
 80079e4:	0801e160 	.word	0x0801e160

080079e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80079fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fe:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007a00:	f7ff f9b2 	bl	8006d68 <LL_RCC_GetAHB3Prescaler>
 8007a04:	4603      	mov	r3, r0
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	4a0c      	ldr	r2, [pc, #48]	; (8007a40 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	0c9c      	lsrs	r4, r3, #18
 8007a24:	f7fe ff58 	bl	80068d8 <HAL_PWREx_GetVoltageRange>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 f80b 	bl	8007a48 <RCC_SetFlashLatency>
 8007a32:	4603      	mov	r3, r0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}
 8007a3c:	0801e180 	.word	0x0801e180
 8007a40:	0801e120 	.word	0x0801e120
 8007a44:	431bde83 	.word	0x431bde83

08007a48 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007a52:	4a3a      	ldr	r2, [pc, #232]	; (8007b3c <RCC_SetFlashLatency+0xf4>)
 8007a54:	f107 0320 	add.w	r3, r7, #32
 8007a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007a62:	4a37      	ldr	r2, [pc, #220]	; (8007b40 <RCC_SetFlashLatency+0xf8>)
 8007a64:	f107 0318 	add.w	r3, r7, #24
 8007a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a6c:	6018      	str	r0, [r3, #0]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007a72:	4a34      	ldr	r2, [pc, #208]	; (8007b44 <RCC_SetFlashLatency+0xfc>)
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a7e:	2300      	movs	r3, #0
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a88:	d11b      	bne.n	8007ac2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a8e:	e014      	b.n	8007aba <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	3338      	adds	r3, #56	; 0x38
 8007a96:	443b      	add	r3, r7
 8007a98:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d807      	bhi.n	8007ab4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	3338      	adds	r3, #56	; 0x38
 8007aaa:	443b      	add	r3, r7
 8007aac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ab2:	e021      	b.n	8007af8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d9e7      	bls.n	8007a90 <RCC_SetFlashLatency+0x48>
 8007ac0:	e01a      	b.n	8007af8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac6:	e014      	b.n	8007af2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	3338      	adds	r3, #56	; 0x38
 8007ace:	443b      	add	r3, r7
 8007ad0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d807      	bhi.n	8007aec <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	3338      	adds	r3, #56	; 0x38
 8007ae2:	443b      	add	r3, r7
 8007ae4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aea:	e005      	b.n	8007af8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	3301      	adds	r3, #1
 8007af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d9e7      	bls.n	8007ac8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007af8:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <RCC_SetFlashLatency+0x100>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f023 0207 	bic.w	r2, r3, #7
 8007b00:	4911      	ldr	r1, [pc, #68]	; (8007b48 <RCC_SetFlashLatency+0x100>)
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	4313      	orrs	r3, r2
 8007b06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b08:	f7fa fe6a 	bl	80027e0 <HAL_GetTick>
 8007b0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b0e:	e008      	b.n	8007b22 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b10:	f7fa fe66 	bl	80027e0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e007      	b.n	8007b32 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <RCC_SetFlashLatency+0x100>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d1ef      	bne.n	8007b10 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3738      	adds	r7, #56	; 0x38
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	0801d8a4 	.word	0x0801d8a4
 8007b40:	0801d8ac 	.word	0x0801d8ac
 8007b44:	0801d8b4 	.word	0x0801d8b4
 8007b48:	58004000 	.word	0x58004000

08007b4c <LL_RCC_LSE_IsReady>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d101      	bne.n	8007b64 <LL_RCC_LSE_IsReady+0x18>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <LL_RCC_LSE_IsReady+0x1a>
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <LL_RCC_SetUSARTClockSource>:
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	43db      	mvns	r3, r3
 8007b84:	401a      	ands	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <LL_RCC_SetI2SClockSource>:
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <LL_RCC_SetLPUARTClockSource>:
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <LL_RCC_SetI2CClockSource>:
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	091b      	lsrs	r3, r3, #4
 8007c06:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	401a      	ands	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr

08007c2a <LL_RCC_SetLPTIMClockSource>:
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	0c1b      	lsrs	r3, r3, #16
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	041b      	lsls	r3, r3, #16
 8007c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr

08007c5c <LL_RCC_SetRNGClockSource>:
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <LL_RCC_SetADCClockSource>:
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <LL_RCC_SetRTCClockSource>:
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr

08007cda <LL_RCC_GetRTCClockSource>:
{
 8007cda:	b480      	push	{r7}
 8007cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr

08007cf2 <LL_RCC_ForceBackupDomainReset>:
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007d12:	b480      	push	{r7}
 8007d14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007d40:	2300      	movs	r3, #0
 8007d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007d44:	2300      	movs	r3, #0
 8007d46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d058      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007d54:	f7fe fd7e 	bl	8006854 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d58:	f7fa fd42 	bl	80027e0 <HAL_GetTick>
 8007d5c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d5e:	e009      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d60:	f7fa fd3e 	bl	80027e0 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d902      	bls.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	74fb      	strb	r3, [r7, #19]
        break;
 8007d72:	e006      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d74:	4b7b      	ldr	r3, [pc, #492]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d80:	d1ee      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007d82:	7cfb      	ldrb	r3, [r7, #19]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d13c      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007d88:	f7ff ffa7 	bl	8007cda <LL_RCC_GetRTCClockSource>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d00f      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007da4:	f7ff ffa5 	bl	8007cf2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007da8:	f7ff ffb3 	bl	8007d12 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d014      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fa fd0e 	bl	80027e0 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dc8:	f7fa fd0a 	bl	80027e0 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d902      	bls.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	74fb      	strb	r3, [r7, #19]
            break;
 8007dde:	e004      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007de0:	f7ff feb4 	bl	8007b4c <LL_RCC_LSE_IsReady>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d1ee      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007dea:	7cfb      	ldrb	r3, [r7, #19]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff ff5b 	bl	8007cb0 <LL_RCC_SetRTCClockSource>
 8007dfa:	e004      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dfc:	7cfb      	ldrb	r3, [r7, #19]
 8007dfe:	74bb      	strb	r3, [r7, #18]
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7cfb      	ldrb	r3, [r7, #19]
 8007e04:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fea9 	bl	8007b6e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff fe9e 	bl	8007b6e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fec0 	bl	8007bc8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff fee6 	bl	8007c2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fedb 	bl	8007c2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fed0 	bl	8007c2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fea9 	bl	8007bf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff fe9e 	bl	8007bf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fe93 	bl	8007bf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d011      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fe5e 	bl	8007b9e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eea:	d107      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d010      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fea5 	bl	8007c5c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d107      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f28:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fea3 	bl	8007c86 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f48:	d107      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f58:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007f5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	58000400 	.word	0x58000400

08007f68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d071      	beq.n	800805e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fa f872 	bl	8002078 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f9c:	4b32      	ldr	r3, [pc, #200]	; (8008068 <HAL_RTC_Init+0x100>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d051      	beq.n	800804c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fa8:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <HAL_RTC_Init+0x100>)
 8007faa:	22ca      	movs	r2, #202	; 0xca
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24
 8007fae:	4b2e      	ldr	r3, [pc, #184]	; (8008068 <HAL_RTC_Init+0x100>)
 8007fb0:	2253      	movs	r2, #83	; 0x53
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa11 	bl	80083dc <RTC_EnterInitMode>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d13f      	bne.n	8008044 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007fc4:	4b28      	ldr	r3, [pc, #160]	; (8008068 <HAL_RTC_Init+0x100>)
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	4a27      	ldr	r2, [pc, #156]	; (8008068 <HAL_RTC_Init+0x100>)
 8007fca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <HAL_RTC_Init+0x100>)
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6859      	ldr	r1, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	4319      	orrs	r1, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	491f      	ldr	r1, [pc, #124]	; (8008068 <HAL_RTC_Init+0x100>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	491b      	ldr	r1, [pc, #108]	; (8008068 <HAL_RTC_Init+0x100>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007ffe:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <HAL_RTC_Init+0x100>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	430b      	orrs	r3, r1
 8008010:	4915      	ldr	r1, [pc, #84]	; (8008068 <HAL_RTC_Init+0x100>)
 8008012:	4313      	orrs	r3, r2
 8008014:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa14 	bl	8008444 <RTC_ExitInitMode>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10e      	bne.n	8008044 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <HAL_RTC_Init+0x100>)
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a19      	ldr	r1, [r3, #32]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	4319      	orrs	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	430b      	orrs	r3, r1
 800803e:	490a      	ldr	r1, [pc, #40]	; (8008068 <HAL_RTC_Init+0x100>)
 8008040:	4313      	orrs	r3, r2
 8008042:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008044:	4b08      	ldr	r3, [pc, #32]	; (8008068 <HAL_RTC_Init+0x100>)
 8008046:	22ff      	movs	r2, #255	; 0xff
 8008048:	625a      	str	r2, [r3, #36]	; 0x24
 800804a:	e001      	b.n	8008050 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40002800 	.word	0x40002800

0800806c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800806c:	b590      	push	{r4, r7, lr}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_RTC_SetAlarm_IT+0x1e>
 8008086:	2302      	movs	r3, #2
 8008088:	e0f3      	b.n	8008272 <HAL_RTC_SetAlarm_IT+0x206>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800809a:	4b78      	ldr	r3, [pc, #480]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d06a      	beq.n	8008182 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d13a      	bne.n	8008128 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80080b2:	4b72      	ldr	r3, [pc, #456]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f9f5 	bl	80084c0 <RTC_ByteToBcd2>
 80080d6:	4603      	mov	r3, r0
 80080d8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f9ee 	bl	80084c0 <RTC_ByteToBcd2>
 80080e4:	4603      	mov	r3, r0
 80080e6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080e8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	789b      	ldrb	r3, [r3, #2]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 f9e6 	bl	80084c0 <RTC_ByteToBcd2>
 80080f4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080f6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	78db      	ldrb	r3, [r3, #3]
 80080fe:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008100:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f9d8 	bl	80084c0 <RTC_ByteToBcd2>
 8008110:	4603      	mov	r3, r0
 8008112:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008114:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800811c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e02c      	b.n	8008182 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008130:	d00d      	beq.n	800814e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813a:	d008      	beq.n	800814e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800813c:	4b4f      	ldr	r3, [pc, #316]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800815a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008160:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008168:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008170:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008172:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008178:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008182:	4b3e      	ldr	r3, [pc, #248]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008184:	22ca      	movs	r2, #202	; 0xca
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
 8008188:	4b3c      	ldr	r3, [pc, #240]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800818a:	2253      	movs	r2, #83	; 0x53
 800818c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	d12c      	bne.n	80081f2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008198:	4b38      	ldr	r3, [pc, #224]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	4a37      	ldr	r2, [pc, #220]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800819e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80081a2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80081a4:	4b35      	ldr	r3, [pc, #212]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b0:	d107      	bne.n	80081c2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	4930      	ldr	r1, [pc, #192]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	644b      	str	r3, [r1, #68]	; 0x44
 80081c0:	e006      	b.n	80081d0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80081c2:	4a2e      	ldr	r2, [pc, #184]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80081c8:	4a2c      	ldr	r2, [pc, #176]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	f043 0201 	orr.w	r2, r3, #1
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80081e4:	4b25      	ldr	r3, [pc, #148]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	4a24      	ldr	r2, [pc, #144]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081ea:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80081ee:	6193      	str	r3, [r2, #24]
 80081f0:	e02b      	b.n	800824a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80081f2:	4b22      	ldr	r3, [pc, #136]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	4a21      	ldr	r2, [pc, #132]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 80081f8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80081fc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80081fe:	4b1f      	ldr	r3, [pc, #124]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008200:	2202      	movs	r2, #2
 8008202:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800820a:	d107      	bne.n	800821c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	4919      	ldr	r1, [pc, #100]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008216:	4313      	orrs	r3, r2
 8008218:	64cb      	str	r3, [r1, #76]	; 0x4c
 800821a:	e006      	b.n	800822a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800821c:	4a17      	ldr	r2, [pc, #92]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008222:	4a16      	ldr	r2, [pc, #88]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800822a:	4a14      	ldr	r2, [pc, #80]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	f043 0202 	orr.w	r2, r3, #2
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	4a0e      	ldr	r2, [pc, #56]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 8008244:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008248:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800824a:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <HAL_RTC_SetAlarm_IT+0x214>)
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008250:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <HAL_RTC_SetAlarm_IT+0x214>)
 8008252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008256:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800825a:	4b08      	ldr	r3, [pc, #32]	; (800827c <HAL_RTC_SetAlarm_IT+0x210>)
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd90      	pop	{r4, r7, pc}
 800827a:	bf00      	nop
 800827c:	40002800 	.word	0x40002800
 8008280:	58000800 	.word	0x58000800

08008284 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_RTC_DeactivateAlarm+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e048      	b.n	800832e <HAL_RTC_DeactivateAlarm+0xaa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082ac:	4b22      	ldr	r3, [pc, #136]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ae:	22ca      	movs	r2, #202	; 0xca
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24
 80082b2:	4b21      	ldr	r3, [pc, #132]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082b4:	2253      	movs	r2, #83	; 0x53
 80082b6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082be:	d115      	bne.n	80082ec <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80082c0:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	4a1c      	ldr	r2, [pc, #112]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80082ca:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80082cc:	4b1a      	ldr	r3, [pc, #104]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d0:	4a19      	ldr	r2, [pc, #100]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082d6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	f023 0201 	bic.w	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80082ea:	e014      	b.n	8008316 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80082ec:	4b12      	ldr	r3, [pc, #72]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082f2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80082f6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fc:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008302:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	f023 0202 	bic.w	r2, r3, #2
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008312:	2202      	movs	r2, #2
 8008314:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008316:	4b08      	ldr	r3, [pc, #32]	; (8008338 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	40002800 	.word	0x40002800

0800833c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008346:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	4013      	ands	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800835a:	4b0c      	ldr	r3, [pc, #48]	; (800838c <HAL_RTC_AlarmIRQHandler+0x50>)
 800835c:	2201      	movs	r2, #1
 800835e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fa fcc6 	bl	8002cf2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008372:	2202      	movs	r2, #2
 8008374:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f94a 	bl	8008610 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40002800 	.word	0x40002800

08008390 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <HAL_RTC_WaitForSynchro+0x48>)
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	4a0e      	ldr	r2, [pc, #56]	; (80083d8 <HAL_RTC_WaitForSynchro+0x48>)
 800839e:	f023 0320 	bic.w	r3, r3, #32
 80083a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80083a4:	f7fa fa1c 	bl	80027e0 <HAL_GetTick>
 80083a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083aa:	e009      	b.n	80083c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083ac:	f7fa fa18 	bl	80027e0 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ba:	d901      	bls.n	80083c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e006      	b.n	80083ce <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RTC_WaitForSynchro+0x48>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0ef      	beq.n	80083ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40002800 	.word	0x40002800

080083dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <RTC_EnterInitMode+0x64>)
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d120      	bne.n	8008436 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <RTC_EnterInitMode+0x64>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	4a11      	ldr	r2, [pc, #68]	; (8008440 <RTC_EnterInitMode+0x64>)
 80083fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008400:	f7fa f9ee 	bl	80027e0 <HAL_GetTick>
 8008404:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008406:	e00d      	b.n	8008424 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008408:	f7fa f9ea 	bl	80027e0 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008416:	d905      	bls.n	8008424 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2203      	movs	r2, #3
 8008420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008424:	4b06      	ldr	r3, [pc, #24]	; (8008440 <RTC_EnterInitMode+0x64>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <RTC_EnterInitMode+0x5a>
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b03      	cmp	r3, #3
 8008434:	d1e8      	bne.n	8008408 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40002800 	.word	0x40002800

08008444 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008450:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <RTC_ExitInitMode+0x78>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4a19      	ldr	r2, [pc, #100]	; (80084bc <RTC_ExitInitMode+0x78>)
 8008456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800845a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800845c:	4b17      	ldr	r3, [pc, #92]	; (80084bc <RTC_ExitInitMode+0x78>)
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff ff91 	bl	8008390 <HAL_RTC_WaitForSynchro>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01e      	beq.n	80084b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e017      	b.n	80084b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008482:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <RTC_ExitInitMode+0x78>)
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	4a0d      	ldr	r2, [pc, #52]	; (80084bc <RTC_ExitInitMode+0x78>)
 8008488:	f023 0320 	bic.w	r3, r3, #32
 800848c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff ff7e 	bl	8008390 <HAL_RTC_WaitForSynchro>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2203      	movs	r2, #3
 800849e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <RTC_ExitInitMode+0x78>)
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	4a04      	ldr	r2, [pc, #16]	; (80084bc <RTC_ExitInitMode+0x78>)
 80084ac:	f043 0320 	orr.w	r3, r3, #32
 80084b0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40002800 	.word	0x40002800

080084c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80084d2:	e005      	b.n	80084e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	3b0a      	subs	r3, #10
 80084de:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	2b09      	cmp	r3, #9
 80084e4:	d8f6      	bhi.n	80084d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b2db      	uxtb	r3, r3
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr
	...

08008500 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008512:	2302      	movs	r3, #2
 8008514:	e01f      	b.n	8008556 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008526:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008528:	22ca      	movs	r2, #202	; 0xca
 800852a:	625a      	str	r2, [r3, #36]	; 0x24
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800852e:	2253      	movs	r2, #83	; 0x53
 8008530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008532:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008538:	f043 0320 	orr.w	r3, r3, #32
 800853c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853e:	4b08      	ldr	r3, [pc, #32]	; (8008560 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008540:	22ff      	movs	r2, #255	; 0xff
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr
 8008560:	40002800 	.word	0x40002800

08008564 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_RTCEx_SetSSRU_IT+0x16>
 8008576:	2302      	movs	r3, #2
 8008578:	e027      	b.n	80085ca <HAL_RTCEx_SetSSRU_IT+0x66>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800858c:	22ca      	movs	r2, #202	; 0xca
 800858e:	625a      	str	r2, [r3, #36]	; 0x24
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008592:	2253      	movs	r2, #83	; 0x53
 8008594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	4a0e      	ldr	r2, [pc, #56]	; (80085d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80085a2:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80085a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a8:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80085aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085b2:	4b08      	ldr	r3, [pc, #32]	; (80085d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085b4:	22ff      	movs	r2, #255	; 0xff
 80085b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	40002800 	.word	0x40002800
 80085d8:	58000800 	.word	0x58000800

080085dc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80085e4:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80085e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80085f2:	2240      	movs	r2, #64	; 0x40
 80085f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7fa fb85 	bl	8002d06 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	40002800 	.word	0x40002800

08008610 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr
	...

08008624 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008632:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4413      	add	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	4000b100 	.word	0x4000b100

08008654 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <HAL_RTCEx_BKUPRead+0x28>)
 8008660:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	4000b100 	.word	0x4000b100

08008680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e0c6      	b.n	8008820 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	d108      	bne.n	80086ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086a2:	d009      	beq.n	80086b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	61da      	str	r2, [r3, #28]
 80086aa:	e005      	b.n	80086b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7f9 fd7d 	bl	80021cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086f2:	d902      	bls.n	80086fa <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e002      	b.n	8008700 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008708:	d007      	beq.n	800871a <HAL_SPI_Init+0x9a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008712:	d002      	beq.n	800871a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875c:	ea42 0103 	orr.w	r1, r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008778:	d11b      	bne.n	80087b2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10b      	bne.n	800879a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800878a:	d903      	bls.n	8008794 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
 8008792:	e002      	b.n	800879a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d107      	bne.n	80087b2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	f003 0204 	and.w	r2, r3, #4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80087d8:	ea42 0103 	orr.w	r1, r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f2:	d105      	bne.n	8008800 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b292      	uxth	r2, r2
 80087fe:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800880e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <LL_PWR_SetRadioBusyTrigger>:
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008838:	4904      	ldr	r1, [pc, #16]	; (800884c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4313      	orrs	r3, r2
 800883e:	608b      	str	r3, [r1, #8]
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	58000400 	.word	0x58000400

08008850 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800885a:	4a04      	ldr	r2, [pc, #16]	; (800886c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800885c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	58000400 	.word	0x58000400

08008870 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887a:	4a04      	ldr	r2, [pc, #16]	; (800888c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800887c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr
 800888c:	58000400 	.word	0x58000400

08008890 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008894:	4b03      	ldr	r3, [pc, #12]	; (80088a4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800889a:	619a      	str	r2, [r3, #24]
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr
 80088a4:	58000400 	.word	0x58000400

080088a8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d101      	bne.n	80088bc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	58000400 	.word	0x58000400

080088cc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d101      	bne.n	80088e0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	58000400 	.word	0x58000400

080088f0 <LL_RCC_RF_DisableReset>:
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80088f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <LL_RCC_IsRFUnderReset>:
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008924:	d101      	bne.n	800892a <LL_RCC_IsRFUnderReset+0x1a>
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <LL_RCC_IsRFUnderReset+0x1c>
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr

08008934 <LL_EXTI_EnableIT_32_63>:
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <LL_EXTI_EnableIT_32_63+0x24>)
 800893e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008942:	4905      	ldr	r1, [pc, #20]	; (8008958 <LL_EXTI_EnableIT_32_63+0x24>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	58000800 	.word	0x58000800

0800895c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
    return status;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	e052      	b.n	8008a18 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	799b      	ldrb	r3, [r3, #6]
 800897a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_SUBGHZ_Init+0x2c>
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d109      	bne.n	800899c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7f9 fd7a 	bl	8002488 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008994:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008998:	f7ff ffcc 	bl	8008934 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d126      	bne.n	80089f0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2202      	movs	r2, #2
 80089a6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80089a8:	f7ff ffa2 	bl	80088f0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80089ac:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <HAL_SUBGHZ_Init+0xc4>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	0cdb      	lsrs	r3, r3, #19
 80089ba:	2264      	movs	r2, #100	; 0x64
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	609a      	str	r2, [r3, #8]
        break;
 80089d2:	e007      	b.n	80089e4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80089da:	f7ff ff99 	bl	8008910 <LL_RCC_IsRFUnderReset>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1ee      	bne.n	80089c2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089e4:	f7ff ff34 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80089e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80089ec:	f7ff ff1c 	bl	8008828 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80089f0:	f7ff ff4e 	bl	8008890 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 faac 	bl	8008f5c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	719a      	strb	r2, [r3, #6]

  return status;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000004 	.word	0x20000004

08008a24 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	460b      	mov	r3, r1
 8008a32:	817b      	strh	r3, [r7, #10]
 8008a34:	4613      	mov	r3, r2
 8008a36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	799b      	ldrb	r3, [r3, #6]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d14a      	bne.n	8008ad8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	795b      	ldrb	r3, [r3, #5]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e045      	b.n	8008ada <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2202      	movs	r2, #2
 8008a58:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fb4c 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a60:	f7ff ff06 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008a64:	210d      	movs	r1, #13
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fa98 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008a6c:	897b      	ldrh	r3, [r7, #10]
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4619      	mov	r1, r3
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fa90 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008a7c:	897b      	ldrh	r3, [r7, #10]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	4619      	mov	r1, r3
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fa8a 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	82bb      	strh	r3, [r7, #20]
 8008a8c:	e00a      	b.n	8008aa4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008a8e:	8abb      	ldrh	r3, [r7, #20]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	4619      	mov	r1, r3
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fa7f 	bl	8008f9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a9e:	8abb      	ldrh	r3, [r7, #20]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	82bb      	strh	r3, [r7, #20]
 8008aa4:	8aba      	ldrh	r2, [r7, #20]
 8008aa6:	893b      	ldrh	r3, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3f0      	bcc.n	8008a8e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008aac:	f7ff fed0 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 fb45 	bl	8009140 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
 8008ac2:	e001      	b.n	8008ac8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	715a      	strb	r2, [r3, #5]

    return status;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	e000      	b.n	8008ada <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008ad8:	2302      	movs	r3, #2
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	461a      	mov	r2, r3
 8008aee:	460b      	mov	r3, r1
 8008af0:	817b      	strh	r3, [r7, #10]
 8008af2:	4613      	mov	r3, r2
 8008af4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d14a      	bne.n	8008b9a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	795b      	ldrb	r3, [r3, #5]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e045      	b.n	8008b9c <HAL_SUBGHZ_ReadRegisters+0xba>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 faee 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b1c:	f7ff fea8 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008b20:	211d      	movs	r1, #29
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fa3a 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008b28:	897b      	ldrh	r3, [r7, #10]
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fa32 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008b38:	897b      	ldrh	r3, [r7, #10]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fa2c 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008b44:	2100      	movs	r1, #0
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fa28 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	82fb      	strh	r3, [r7, #22]
 8008b50:	e009      	b.n	8008b66 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008b52:	69b9      	ldr	r1, [r7, #24]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fa77 	bl	8009048 <SUBGHZSPI_Receive>
      pData++;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008b60:	8afb      	ldrh	r3, [r7, #22]
 8008b62:	3301      	adds	r3, #1
 8008b64:	82fb      	strh	r3, [r7, #22]
 8008b66:	8afa      	ldrh	r2, [r7, #22]
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d3f1      	bcc.n	8008b52 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b6e:	f7ff fe6f 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fae4 	bl	8009140 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	77fb      	strb	r3, [r7, #31]
 8008b84:	e001      	b.n	8008b8a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	715a      	strb	r2, [r3, #5]

    return status;
 8008b96:	7ffb      	ldrb	r3, [r7, #31]
 8008b98:	e000      	b.n	8008b9c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	72fb      	strb	r3, [r7, #11]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	799b      	ldrb	r3, [r3, #6]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d14a      	bne.n	8008c58 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	795b      	ldrb	r3, [r3, #5]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e045      	b.n	8008c5a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fa8f 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008bda:	7afb      	ldrb	r3, [r7, #11]
 8008bdc:	2b84      	cmp	r3, #132	; 0x84
 8008bde:	d002      	beq.n	8008be6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	2b94      	cmp	r3, #148	; 0x94
 8008be4:	d103      	bne.n	8008bee <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	711a      	strb	r2, [r3, #4]
 8008bec:	e002      	b.n	8008bf4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bf4:	f7ff fe3c 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008bf8:	7afb      	ldrb	r3, [r7, #11]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f9cd 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c02:	2300      	movs	r3, #0
 8008c04:	82bb      	strh	r3, [r7, #20]
 8008c06:	e00a      	b.n	8008c1e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008c08:	8abb      	ldrh	r3, [r7, #20]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	4619      	mov	r1, r3
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f9c2 	bl	8008f9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008c18:	8abb      	ldrh	r3, [r7, #20]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	82bb      	strh	r3, [r7, #20]
 8008c1e:	8aba      	ldrh	r2, [r7, #20]
 8008c20:	893b      	ldrh	r3, [r7, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d3f0      	bcc.n	8008c08 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c26:	f7ff fe13 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	2b84      	cmp	r3, #132	; 0x84
 8008c2e:	d002      	beq.n	8008c36 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fa85 	bl	8009140 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	75fb      	strb	r3, [r7, #23]
 8008c42:	e001      	b.n	8008c48 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	715a      	strb	r2, [r3, #5]

    return status;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	e000      	b.n	8008c5a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008c58:	2302      	movs	r3, #2
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	72fb      	strb	r3, [r7, #11]
 8008c72:	4613      	mov	r3, r2
 8008c74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	799b      	ldrb	r3, [r3, #6]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d13d      	bne.n	8008d00 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	795b      	ldrb	r3, [r3, #5]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e038      	b.n	8008d02 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fa2e 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c9c:	f7ff fde8 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f979 	bl	8008f9c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008caa:	2100      	movs	r1, #0
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 f975 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	82fb      	strh	r3, [r7, #22]
 8008cb6:	e009      	b.n	8008ccc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f9c4 	bl	8009048 <SUBGHZSPI_Receive>
      pData++;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008cc6:	8afb      	ldrh	r3, [r7, #22]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	82fb      	strh	r3, [r7, #22]
 8008ccc:	8afa      	ldrh	r2, [r7, #22]
 8008cce:	893b      	ldrh	r3, [r7, #8]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d3f1      	bcc.n	8008cb8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008cd4:	f7ff fdbc 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fa31 	bl	8009140 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	77fb      	strb	r3, [r7, #31]
 8008cea:	e001      	b.n	8008cf0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	715a      	strb	r2, [r3, #5]

    return status;
 8008cfc:	7ffb      	ldrb	r3, [r7, #31]
 8008cfe:	e000      	b.n	8008d02 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008d00:	2302      	movs	r3, #2
  }
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3720      	adds	r7, #32
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	461a      	mov	r2, r3
 8008d16:	460b      	mov	r3, r1
 8008d18:	72fb      	strb	r3, [r7, #11]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	799b      	ldrb	r3, [r3, #6]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d13e      	bne.n	8008da6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	795b      	ldrb	r3, [r3, #5]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e039      	b.n	8008da8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f9dc 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008d40:	f7ff fd96 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008d44:	210e      	movs	r1, #14
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 f928 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f923 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	82bb      	strh	r3, [r7, #20]
 8008d5a:	e00a      	b.n	8008d72 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008d5c:	8abb      	ldrh	r3, [r7, #20]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f918 	bl	8008f9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008d6c:	8abb      	ldrh	r3, [r7, #20]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	82bb      	strh	r3, [r7, #20]
 8008d72:	8aba      	ldrh	r2, [r7, #20]
 8008d74:	893b      	ldrh	r3, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d3f0      	bcc.n	8008d5c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008d7a:	f7ff fd69 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 f9de 	bl	8009140 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]
 8008d90:	e001      	b.n	8008d96 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	715a      	strb	r2, [r3, #5]

    return status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	e000      	b.n	8008da8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	72fb      	strb	r3, [r7, #11]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	799b      	ldrb	r3, [r3, #6]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d141      	bne.n	8008e56 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	795b      	ldrb	r3, [r3, #5]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e03c      	b.n	8008e58 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f987 	bl	80090f8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008dea:	f7ff fd41 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008dee:	211e      	movs	r1, #30
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f8d3 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f8ce 	bl	8008f9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008e00:	2100      	movs	r1, #0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f8ca 	bl	8008f9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	82fb      	strh	r3, [r7, #22]
 8008e0c:	e009      	b.n	8008e22 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f919 	bl	8009048 <SUBGHZSPI_Receive>
      pData++;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008e1c:	8afb      	ldrh	r3, [r7, #22]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	82fb      	strh	r3, [r7, #22]
 8008e22:	8afa      	ldrh	r2, [r7, #22]
 8008e24:	893b      	ldrh	r3, [r7, #8]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d3f1      	bcc.n	8008e0e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008e2a:	f7ff fd11 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f986 	bl	8009140 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	77fb      	strb	r3, [r7, #31]
 8008e40:	e001      	b.n	8008e46 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	715a      	strb	r2, [r3, #5]

    return status;
 8008e52:	7ffb      	ldrb	r3, [r7, #31]
 8008e54:	e000      	b.n	8008e58 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008e56:	2302      	movs	r3, #2
  }
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008e68:	2300      	movs	r3, #0
 8008e6a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008e6c:	f107 020c 	add.w	r2, r7, #12
 8008e70:	2302      	movs	r3, #2
 8008e72:	2112      	movs	r1, #18
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff fef4 	bl	8008c62 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008e7a:	7b3b      	ldrb	r3, [r7, #12]
 8008e7c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	021b      	lsls	r3, r3, #8
 8008e82:	b21a      	sxth	r2, r3
 8008e84:	7b7b      	ldrb	r3, [r7, #13]
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008e8e:	f107 020c 	add.w	r2, r7, #12
 8008e92:	2302      	movs	r3, #2
 8008e94:	2102      	movs	r1, #2
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fe84 	bl	8008ba4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008e9c:	89fb      	ldrh	r3, [r7, #14]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f012 fe90 	bl	801bbcc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008eac:	89fb      	ldrh	r3, [r7, #14]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f012 fe96 	bl	801bbe8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f012 fee6 	bl	801bc98 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f012 feec 	bl	801bcb4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008edc:	89fb      	ldrh	r3, [r7, #14]
 8008ede:	f003 0310 	and.w	r3, r3, #16
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f012 fef2 	bl	801bcd0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f012 fec0 	bl	801bc7c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f012 fe7c 	bl	801bc04 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008f0c:	89fb      	ldrh	r3, [r7, #14]
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008f16:	89fb      	ldrh	r3, [r7, #14]
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008f20:	2101      	movs	r1, #1
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f012 fe7c 	bl	801bc20 <HAL_SUBGHZ_CADStatusCallback>
 8008f28:	e003      	b.n	8008f32 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f012 fe77 	bl	801bc20 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f012 fe8d 	bl	801bc5c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008f42:	89fb      	ldrh	r3, [r7, #14]
 8008f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f012 fecd 	bl	801bcec <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a0b      	ldr	r2, [pc, #44]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008f70:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008f78:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008f7a:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f7c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008f80:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a04      	ldr	r2, [pc, #16]	; (8008f98 <SUBGHZSPI_Init+0x3c>)
 8008f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8c:	6013      	str	r3, [r2, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr
 8008f98:	58010000 	.word	0x58010000

08008f9c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008fac:	4b23      	ldr	r3, [pc, #140]	; (800903c <SUBGHZSPI_Transmit+0xa0>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	0cdb      	lsrs	r3, r3, #19
 8008fba:	2264      	movs	r2, #100	; 0x64
 8008fbc:	fb02 f303 	mul.w	r3, r2, r3
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d105      	bne.n	8008fd4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	609a      	str	r2, [r3, #8]
      break;
 8008fd2:	e008      	b.n	8008fe6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008fda:	4b19      	ldr	r3, [pc, #100]	; (8009040 <SUBGHZSPI_Transmit+0xa4>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d1ed      	bne.n	8008fc2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008fe6:	4b17      	ldr	r3, [pc, #92]	; (8009044 <SUBGHZSPI_Transmit+0xa8>)
 8008fe8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	78fa      	ldrb	r2, [r7, #3]
 8008fee:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ff0:	4b12      	ldr	r3, [pc, #72]	; (800903c <SUBGHZSPI_Transmit+0xa0>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	1a9b      	subs	r3, r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	0cdb      	lsrs	r3, r3, #19
 8008ffe:	2264      	movs	r2, #100	; 0x64
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	609a      	str	r2, [r3, #8]
      break;
 8009016:	e008      	b.n	800902a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800901e:	4b08      	ldr	r3, [pc, #32]	; (8009040 <SUBGHZSPI_Transmit+0xa4>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b01      	cmp	r3, #1
 8009028:	d1ed      	bne.n	8009006 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <SUBGHZSPI_Transmit+0xa4>)
 800902c:	68db      	ldr	r3, [r3, #12]

  return status;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000004 	.word	0x20000004
 8009040:	58010000 	.word	0x58010000
 8009044:	5801000c 	.word	0x5801000c

08009048 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <SUBGHZSPI_Receive+0xa4>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4613      	mov	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	1a9b      	subs	r3, r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	0cdb      	lsrs	r3, r3, #19
 8009064:	2264      	movs	r2, #100	; 0x64
 8009066:	fb02 f303 	mul.w	r3, r2, r3
 800906a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d105      	bne.n	800907e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	609a      	str	r2, [r3, #8]
      break;
 800907c:	e008      	b.n	8009090 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3b01      	subs	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009084:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <SUBGHZSPI_Receive+0xa8>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b02      	cmp	r3, #2
 800908e:	d1ed      	bne.n	800906c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009090:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <SUBGHZSPI_Receive+0xac>)
 8009092:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <SUBGHZSPI_Receive+0xa4>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4613      	mov	r3, r2
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	0cdb      	lsrs	r3, r3, #19
 80090a8:	2264      	movs	r2, #100	; 0x64
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	609a      	str	r2, [r3, #8]
      break;
 80090c0:	e008      	b.n	80090d4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <SUBGHZSPI_Receive+0xa8>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d1ed      	bne.n	80090b0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80090d4:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <SUBGHZSPI_Receive+0xa8>)
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	701a      	strb	r2, [r3, #0]

  return status;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000004 	.word	0x20000004
 80090f0:	58010000 	.word	0x58010000
 80090f4:	5801000c 	.word	0x5801000c

080090f8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	791b      	ldrb	r3, [r3, #4]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d111      	bne.n	800912c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <SUBGHZ_CheckDeviceReady+0x44>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	4413      	add	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009118:	f7ff fbaa 	bl	8008870 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3b01      	subs	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f9      	bne.n	800911c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009128:	f7ff fb92 	bl	8008850 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f807 	bl	8009140 <SUBGHZ_WaitOnBusy>
 8009132:	4603      	mov	r3, r0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000004 	.word	0x20000004

08009140 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <SUBGHZ_WaitOnBusy+0x58>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	4613      	mov	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	4413      	add	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	0d1b      	lsrs	r3, r3, #20
 800915a:	2264      	movs	r2, #100	; 0x64
 800915c:	fb02 f303 	mul.w	r3, r2, r3
 8009160:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009162:	f7ff fbb3 	bl	80088cc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009166:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	609a      	str	r2, [r3, #8]
      break;
 8009178:	e009      	b.n	800918e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b01      	subs	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009180:	f7ff fb92 	bl	80088a8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4013      	ands	r3, r2
 800918a:	2b01      	cmp	r3, #1
 800918c:	d0e9      	beq.n	8009162 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000004 	.word	0x20000004

0800919c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e049      	b.n	8009242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7f9 fc08 	bl	80029d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4619      	mov	r1, r3
 80091da:	4610      	mov	r0, r2
 80091dc:	f000 f9c6 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d001      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e036      	b.n	80092d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a16      	ldr	r2, [pc, #88]	; (80092dc <HAL_TIM_Base_Start_IT+0x90>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d004      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x44>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800928e:	d115      	bne.n	80092bc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	4b12      	ldr	r3, [pc, #72]	; (80092e0 <HAL_TIM_Base_Start_IT+0x94>)
 8009298:	4013      	ands	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d015      	beq.n	80092ce <HAL_TIM_Base_Start_IT+0x82>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a8:	d011      	beq.n	80092ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ba:	e008      	b.n	80092ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	e000      	b.n	80092d0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	00010007 	.word	0x00010007

080092e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b02      	cmp	r3, #2
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0202 	mvn.w	r2, #2
 8009310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f904 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f8f7 	bl	8009522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f906 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b04      	cmp	r3, #4
 800934c:	d122      	bne.n	8009394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b04      	cmp	r3, #4
 800935a:	d11b      	bne.n	8009394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0204 	mvn.w	r2, #4
 8009364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2202      	movs	r2, #2
 800936a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8da 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 8009380:	e005      	b.n	800938e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8cd 	bl	8009522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f8dc 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0308 	and.w	r3, r3, #8
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d122      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d11b      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0208 	mvn.w	r2, #8
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2204      	movs	r2, #4
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8b0 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f8a3 	bl	8009522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8b2 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d122      	bne.n	800943c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b10      	cmp	r3, #16
 8009402:	d11b      	bne.n	800943c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0210 	mvn.w	r2, #16
 800940c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2208      	movs	r2, #8
 8009412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f886 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f879 	bl	8009522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f888 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d10e      	bne.n	8009468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d107      	bne.n	8009468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0201 	mvn.w	r2, #1
 8009460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fcc8 	bl	8001df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d10e      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009480:	2b80      	cmp	r3, #128	; 0x80
 8009482:	d107      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800948c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f8d7 	bl	8009642 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a2:	d10e      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b80      	cmp	r3, #128	; 0x80
 80094b0:	d107      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f8c9 	bl	8009654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	2b40      	cmp	r3, #64	; 0x40
 80094ce:	d10e      	bne.n	80094ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b40      	cmp	r3, #64	; 0x40
 80094dc:	d107      	bne.n	80094ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f835 	bl	8009558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d10e      	bne.n	800951a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b20      	cmp	r3, #32
 8009508:	d107      	bne.n	800951a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f06f 0220 	mvn.w	r2, #32
 8009512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f88b 	bl	8009630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	bc80      	pop	{r7}
 8009544:	4770      	bx	lr

08009546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr

08009558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr
	...

0800956c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a29      	ldr	r2, [pc, #164]	; (8009624 <TIM_Base_SetConfig+0xb8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_Base_SetConfig+0x20>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958a:	d108      	bne.n	800959e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a20      	ldr	r2, [pc, #128]	; (8009624 <TIM_Base_SetConfig+0xb8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00b      	beq.n	80095be <TIM_Base_SetConfig+0x52>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ac:	d007      	beq.n	80095be <TIM_Base_SetConfig+0x52>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a1d      	ldr	r2, [pc, #116]	; (8009628 <TIM_Base_SetConfig+0xbc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d003      	beq.n	80095be <TIM_Base_SetConfig+0x52>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a1c      	ldr	r2, [pc, #112]	; (800962c <TIM_Base_SetConfig+0xc0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d108      	bne.n	80095d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a0b      	ldr	r2, [pc, #44]	; (8009624 <TIM_Base_SetConfig+0xb8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d007      	beq.n	800960c <TIM_Base_SetConfig+0xa0>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a0a      	ldr	r2, [pc, #40]	; (8009628 <TIM_Base_SetConfig+0xbc>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_Base_SetConfig+0xa0>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a09      	ldr	r2, [pc, #36]	; (800962c <TIM_Base_SetConfig+0xc0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d103      	bne.n	8009614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	615a      	str	r2, [r3, #20]
}
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr
 8009624:	40012c00 	.word	0x40012c00
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr

08009642 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	bc80      	pop	{r7}
 8009652:	4770      	bx	lr

08009654 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <LL_RCC_GetUSARTClockSource>:
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800966e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009672:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	401a      	ands	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	041b      	lsls	r3, r3, #16
 800967e:	4313      	orrs	r3, r2
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr

0800968a <LL_RCC_GetLPUARTClockSource>:
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009696:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4013      	ands	r3, r2
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e042      	b.n	8009740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7f9 fd11 	bl	80030f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2224      	movs	r2, #36	; 0x24
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0201 	bic.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fc3a 	bl	8009f64 <UART_SetConfig>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e022      	b.n	8009740 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fea2 	bl	800a44c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 ff28 	bl	800a58e <UART_CheckIdleState>
 800973e:	4603      	mov	r3, r0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800975c:	2b20      	cmp	r3, #32
 800975e:	d137      	bne.n	80097d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_UART_Receive_IT+0x24>
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e030      	b.n	80097d2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a18      	ldr	r2, [pc, #96]	; (80097dc <HAL_UART_Receive_IT+0x94>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d01f      	beq.n	80097c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d018      	beq.n	80097c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	613b      	str	r3, [r7, #16]
   return(result);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	623b      	str	r3, [r7, #32]
 80097ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	69f9      	ldr	r1, [r7, #28]
 80097b2:	6a3a      	ldr	r2, [r7, #32]
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80097c0:	88fb      	ldrh	r3, [r7, #6]
 80097c2:	461a      	mov	r2, r3
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fff8 	bl	800a7bc <UART_Start_Receive_IT>
 80097cc:	4603      	mov	r3, r0
 80097ce:	e000      	b.n	80097d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097d0:	2302      	movs	r3, #2
  }
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3728      	adds	r7, #40	; 0x28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40008000 	.word	0x40008000

080097e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d167      	bne.n	80098c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_UART_Transmit_DMA+0x24>
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e060      	b.n	80098ca <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	88fa      	ldrh	r2, [r7, #6]
 8009812:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2221      	movs	r2, #33	; 0x21
 800982a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d028      	beq.n	8009888 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800983a:	4a26      	ldr	r2, [pc, #152]	; (80098d4 <HAL_UART_Transmit_DMA+0xf4>)
 800983c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009842:	4a25      	ldr	r2, [pc, #148]	; (80098d8 <HAL_UART_Transmit_DMA+0xf8>)
 8009844:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984a:	4a24      	ldr	r2, [pc, #144]	; (80098dc <HAL_UART_Transmit_DMA+0xfc>)
 800984c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009852:	2200      	movs	r2, #0
 8009854:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985e:	4619      	mov	r1, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3328      	adds	r3, #40	; 0x28
 8009866:	461a      	mov	r2, r3
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	f7fb fac3 	bl	8004df4 <HAL_DMA_Start_IT>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2210      	movs	r2, #16
 8009878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e020      	b.n	80098ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2240      	movs	r2, #64	; 0x40
 800988e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3308      	adds	r3, #8
 8009896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	613b      	str	r3, [r7, #16]
   return(result);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3308      	adds	r3, #8
 80098ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b0:	623a      	str	r2, [r7, #32]
 80098b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	6a3a      	ldr	r2, [r7, #32]
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e5      	bne.n	8009890 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e000      	b.n	80098ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80098c8:	2302      	movs	r3, #2
  }
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3728      	adds	r7, #40	; 0x28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	0800ab47 	.word	0x0800ab47
 80098d8:	0800abe1 	.word	0x0800abe1
 80098dc:	0800abfd 	.word	0x0800abfd

080098e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b0ba      	sub	sp, #232	; 0xe8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800990a:	f640 030f 	movw	r3, #2063	; 0x80f
 800990e:	4013      	ands	r3, r2
 8009910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11b      	bne.n	8009954 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d015      	beq.n	8009954 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 82e3 	beq.w	8009f10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
      }
      return;
 8009952:	e2dd      	b.n	8009f10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 8123 	beq.w	8009ba4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800995e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009962:	4b8d      	ldr	r3, [pc, #564]	; (8009b98 <HAL_UART_IRQHandler+0x2b8>)
 8009964:	4013      	ands	r3, r2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800996a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800996e:	4b8b      	ldr	r3, [pc, #556]	; (8009b9c <HAL_UART_IRQHandler+0x2bc>)
 8009970:	4013      	ands	r3, r2
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 8116 	beq.w	8009ba4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d011      	beq.n	80099a8 <HAL_UART_IRQHandler+0xc8>
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2201      	movs	r2, #1
 8009996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999e:	f043 0201 	orr.w	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d011      	beq.n	80099d8 <HAL_UART_IRQHandler+0xf8>
 80099b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2202      	movs	r2, #2
 80099c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ce:	f043 0204 	orr.w	r2, r3, #4
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d011      	beq.n	8009a08 <HAL_UART_IRQHandler+0x128>
 80099e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2204      	movs	r2, #4
 80099f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f043 0202 	orr.w	r2, r3, #2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d017      	beq.n	8009a44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d105      	bne.n	8009a2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a24:	4b5c      	ldr	r3, [pc, #368]	; (8009b98 <HAL_UART_IRQHandler+0x2b8>)
 8009a26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2208      	movs	r2, #8
 8009a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3a:	f043 0208 	orr.w	r2, r3, #8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d012      	beq.n	8009a76 <HAL_UART_IRQHandler+0x196>
 8009a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00c      	beq.n	8009a76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6c:	f043 0220 	orr.w	r2, r3, #32
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8249 	beq.w	8009f14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	d005      	beq.n	8009ada <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d054      	beq.n	8009b84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 ffce 	bl	800aa7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d146      	bne.n	8009b7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3308      	adds	r3, #8
 8009b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1d9      	bne.n	8009aee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d017      	beq.n	8009b74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b4a:	4a15      	ldr	r2, [pc, #84]	; (8009ba0 <HAL_UART_IRQHandler+0x2c0>)
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fb fa29 	bl	8004fac <HAL_DMA_Abort_IT>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d019      	beq.n	8009b94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b72:	e00f      	b.n	8009b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f9e0 	bl	8009f3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7a:	e00b      	b.n	8009b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f9dc 	bl	8009f3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b82:	e007      	b.n	8009b94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9d8 	bl	8009f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009b92:	e1bf      	b.n	8009f14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b94:	bf00      	nop
    return;
 8009b96:	e1bd      	b.n	8009f14 <HAL_UART_IRQHandler+0x634>
 8009b98:	10000001 	.word	0x10000001
 8009b9c:	04000120 	.word	0x04000120
 8009ba0:	0800ac7d 	.word	0x0800ac7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	f040 8153 	bne.w	8009e54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 814c 	beq.w	8009e54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8145 	beq.w	8009e54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2210      	movs	r2, #16
 8009bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bdc:	2b40      	cmp	r3, #64	; 0x40
 8009bde:	f040 80bb 	bne.w	8009d58 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 818f 	beq.w	8009f18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c04:	429a      	cmp	r2, r3
 8009c06:	f080 8187 	bcs.w	8009f18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f040 8087 	bne.w	8009d36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1da      	bne.n	8009c28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c84:	f023 0301 	bic.w	r3, r3, #1
 8009c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e1      	bne.n	8009c72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e3      	bne.n	8009cae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d04:	f023 0310 	bic.w	r3, r3, #16
 8009d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e4      	bne.n	8009cf4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fb f8dd 	bl	8004ef0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f8fb 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d56:	e0df      	b.n	8009f18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80d1 	beq.w	8009f1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009d7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 80cc 	beq.w	8009f1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	461a      	mov	r2, r3
 8009da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009da6:	647b      	str	r3, [r7, #68]	; 0x44
 8009da8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e4      	bne.n	8009d84 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dd0:	f023 0301 	bic.w	r3, r3, #1
 8009dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009de2:	633a      	str	r2, [r7, #48]	; 0x30
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e1      	bne.n	8009dba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	e853 3f00 	ldrex	r3, [r3]
 8009e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0310 	bic.w	r3, r3, #16
 8009e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e2c:	61fb      	str	r3, [r7, #28]
 8009e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e30:	69b9      	ldr	r1, [r7, #24]
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	e841 2300 	strex	r3, r2, [r1]
 8009e38:	617b      	str	r3, [r7, #20]
   return(result);
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1e4      	bne.n	8009e0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f87d 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e52:	e063      	b.n	8009f1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00e      	beq.n	8009e7e <HAL_UART_IRQHandler+0x59e>
 8009e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fc5e 	bl	800b738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e7c:	e051      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d014      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d008      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d03a      	beq.n	8009f20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
    }
    return;
 8009eb2:	e035      	b.n	8009f20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x5f4>
 8009ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 feeb 	bl	800aca8 <UART_EndTransmit_IT>
    return;
 8009ed2:	e026      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d009      	beq.n	8009ef4 <HAL_UART_IRQHandler+0x614>
 8009ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fc35 	bl	800b75c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ef2:	e016      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d010      	beq.n	8009f22 <HAL_UART_IRQHandler+0x642>
 8009f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	da0c      	bge.n	8009f22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fc1e 	bl	800b74a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f0e:	e008      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
      return;
 8009f10:	bf00      	nop
 8009f12:	e006      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
    return;
 8009f14:	bf00      	nop
 8009f16:	e004      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
      return;
 8009f18:	bf00      	nop
 8009f1a:	e002      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
      return;
 8009f1c:	bf00      	nop
 8009f1e:	e000      	b.n	8009f22 <HAL_UART_IRQHandler+0x642>
    return;
 8009f20:	bf00      	nop
  }
}
 8009f22:	37e8      	adds	r7, #232	; 0xe8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bc80      	pop	{r7}
 8009f38:	4770      	bx	lr

08009f3a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr

08009f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr
	...

08009f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f68:	b08c      	sub	sp, #48	; 0x30
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b94      	ldr	r3, [pc, #592]	; (800a1e4 <UART_SetConfig+0x280>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a89      	ldr	r2, [pc, #548]	; (800a1e8 <UART_SetConfig+0x284>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009fda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	f023 010f 	bic.w	r1, r3, #15
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a7a      	ldr	r2, [pc, #488]	; (800a1ec <UART_SetConfig+0x288>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d127      	bne.n	800a058 <UART_SetConfig+0xf4>
 800a008:	2003      	movs	r0, #3
 800a00a:	f7ff fb2c 	bl	8009666 <LL_RCC_GetUSARTClockSource>
 800a00e:	4603      	mov	r3, r0
 800a010:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a014:	2b03      	cmp	r3, #3
 800a016:	d81b      	bhi.n	800a050 <UART_SetConfig+0xec>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <UART_SetConfig+0xbc>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a041 	.word	0x0800a041
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a049 	.word	0x0800a049
 800a030:	2301      	movs	r3, #1
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a036:	e080      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a038:	2302      	movs	r3, #2
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a03e:	e07c      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a046:	e078      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a04e:	e074      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a056:	e070      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a64      	ldr	r2, [pc, #400]	; (800a1f0 <UART_SetConfig+0x28c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d138      	bne.n	800a0d4 <UART_SetConfig+0x170>
 800a062:	200c      	movs	r0, #12
 800a064:	f7ff faff 	bl	8009666 <LL_RCC_GetUSARTClockSource>
 800a068:	4603      	mov	r3, r0
 800a06a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a06e:	2b0c      	cmp	r3, #12
 800a070:	d82c      	bhi.n	800a0cc <UART_SetConfig+0x168>
 800a072:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <UART_SetConfig+0x114>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a0ad 	.word	0x0800a0ad
 800a07c:	0800a0cd 	.word	0x0800a0cd
 800a080:	0800a0cd 	.word	0x0800a0cd
 800a084:	0800a0cd 	.word	0x0800a0cd
 800a088:	0800a0bd 	.word	0x0800a0bd
 800a08c:	0800a0cd 	.word	0x0800a0cd
 800a090:	0800a0cd 	.word	0x0800a0cd
 800a094:	0800a0cd 	.word	0x0800a0cd
 800a098:	0800a0b5 	.word	0x0800a0b5
 800a09c:	0800a0cd 	.word	0x0800a0cd
 800a0a0:	0800a0cd 	.word	0x0800a0cd
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0c5 	.word	0x0800a0c5
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0b2:	e042      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0ba:	e03e      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0c2:	e03a      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0ca:	e036      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0d2:	e032      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a43      	ldr	r2, [pc, #268]	; (800a1e8 <UART_SetConfig+0x284>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d12a      	bne.n	800a134 <UART_SetConfig+0x1d0>
 800a0de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a0e2:	f7ff fad2 	bl	800968a <LL_RCC_GetLPUARTClockSource>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0ec:	d01a      	beq.n	800a124 <UART_SetConfig+0x1c0>
 800a0ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0f2:	d81b      	bhi.n	800a12c <UART_SetConfig+0x1c8>
 800a0f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f8:	d00c      	beq.n	800a114 <UART_SetConfig+0x1b0>
 800a0fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0fe:	d815      	bhi.n	800a12c <UART_SetConfig+0x1c8>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <UART_SetConfig+0x1a8>
 800a104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a108:	d008      	beq.n	800a11c <UART_SetConfig+0x1b8>
 800a10a:	e00f      	b.n	800a12c <UART_SetConfig+0x1c8>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a112:	e012      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a114:	2302      	movs	r3, #2
 800a116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a11a:	e00e      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a122:	e00a      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a12a:	e006      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a132:	e002      	b.n	800a13a <UART_SetConfig+0x1d6>
 800a134:	2310      	movs	r3, #16
 800a136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a2a      	ldr	r2, [pc, #168]	; (800a1e8 <UART_SetConfig+0x284>)
 800a140:	4293      	cmp	r3, r2
 800a142:	f040 80a4 	bne.w	800a28e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a14a:	2b08      	cmp	r3, #8
 800a14c:	d823      	bhi.n	800a196 <UART_SetConfig+0x232>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <UART_SetConfig+0x1f0>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a197 	.word	0x0800a197
 800a15c:	0800a181 	.word	0x0800a181
 800a160:	0800a197 	.word	0x0800a197
 800a164:	0800a187 	.word	0x0800a187
 800a168:	0800a197 	.word	0x0800a197
 800a16c:	0800a197 	.word	0x0800a197
 800a170:	0800a197 	.word	0x0800a197
 800a174:	0800a18f 	.word	0x0800a18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a178:	f7fd fc12 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 800a17c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a17e:	e010      	b.n	800a1a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a180:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <UART_SetConfig+0x290>)
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a184:	e00d      	b.n	800a1a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a186:	f7fd fb57 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a18a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a18c:	e009      	b.n	800a1a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a194:	e005      	b.n	800a1a2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8137 	beq.w	800a418 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	4a12      	ldr	r2, [pc, #72]	; (800a1f8 <UART_SetConfig+0x294>)
 800a1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d305      	bcc.n	800a1da <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d910      	bls.n	800a1fc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1e0:	e11a      	b.n	800a418 <UART_SetConfig+0x4b4>
 800a1e2:	bf00      	nop
 800a1e4:	cfff69f3 	.word	0xcfff69f3
 800a1e8:	40008000 	.word	0x40008000
 800a1ec:	40013800 	.word	0x40013800
 800a1f0:	40004400 	.word	0x40004400
 800a1f4:	00f42400 	.word	0x00f42400
 800a1f8:	0801e210 	.word	0x0801e210
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	2200      	movs	r2, #0
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	60fa      	str	r2, [r7, #12]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	4a8e      	ldr	r2, [pc, #568]	; (800a444 <UART_SetConfig+0x4e0>)
 800a20a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	2200      	movs	r2, #0
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a21e:	f7f6 fdb5 	bl	8000d8c <__aeabi_uldivmod>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4610      	mov	r0, r2
 800a228:	4619      	mov	r1, r3
 800a22a:	f04f 0200 	mov.w	r2, #0
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	020b      	lsls	r3, r1, #8
 800a234:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a238:	0202      	lsls	r2, r0, #8
 800a23a:	6979      	ldr	r1, [r7, #20]
 800a23c:	6849      	ldr	r1, [r1, #4]
 800a23e:	0849      	lsrs	r1, r1, #1
 800a240:	2000      	movs	r0, #0
 800a242:	460c      	mov	r4, r1
 800a244:	4605      	mov	r5, r0
 800a246:	eb12 0804 	adds.w	r8, r2, r4
 800a24a:	eb43 0905 	adc.w	r9, r3, r5
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	469a      	mov	sl, r3
 800a256:	4693      	mov	fp, r2
 800a258:	4652      	mov	r2, sl
 800a25a:	465b      	mov	r3, fp
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	f7f6 fd94 	bl	8000d8c <__aeabi_uldivmod>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4613      	mov	r3, r2
 800a26a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a272:	d308      	bcc.n	800a286 <UART_SetConfig+0x322>
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a27a:	d204      	bcs.n	800a286 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6a3a      	ldr	r2, [r7, #32]
 800a282:	60da      	str	r2, [r3, #12]
 800a284:	e0c8      	b.n	800a418 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a28c:	e0c4      	b.n	800a418 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a296:	d167      	bne.n	800a368 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800a298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d828      	bhi.n	800a2f2 <UART_SetConfig+0x38e>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x344>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2d5 	.word	0x0800a2d5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	0800a2f3 	.word	0x0800a2f3
 800a2b8:	0800a2e3 	.word	0x0800a2e3
 800a2bc:	0800a2f3 	.word	0x0800a2f3
 800a2c0:	0800a2f3 	.word	0x0800a2f3
 800a2c4:	0800a2f3 	.word	0x0800a2f3
 800a2c8:	0800a2eb 	.word	0x0800a2eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2cc:	f7fd fb68 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2d2:	e014      	b.n	800a2fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fd fb76 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800a2d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2da:	e010      	b.n	800a2fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2dc:	4b5a      	ldr	r3, [pc, #360]	; (800a448 <UART_SetConfig+0x4e4>)
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2e0:	e00d      	b.n	800a2fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2e2:	f7fd faa9 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a2e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2e8:	e009      	b.n	800a2fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2f0:	e005      	b.n	800a2fe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 8089 	beq.w	800a418 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	4a4e      	ldr	r2, [pc, #312]	; (800a444 <UART_SetConfig+0x4e0>)
 800a30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a310:	461a      	mov	r2, r3
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	fbb3 f3f2 	udiv	r3, r3, r2
 800a318:	005a      	lsls	r2, r3, #1
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	441a      	add	r2, r3
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	2b0f      	cmp	r3, #15
 800a330:	d916      	bls.n	800a360 <UART_SetConfig+0x3fc>
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a338:	d212      	bcs.n	800a360 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	f023 030f 	bic.w	r3, r3, #15
 800a342:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b29a      	uxth	r2, r3
 800a350:	8bfb      	ldrh	r3, [r7, #30]
 800a352:	4313      	orrs	r3, r2
 800a354:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	8bfa      	ldrh	r2, [r7, #30]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e05b      	b.n	800a418 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a366:	e057      	b.n	800a418 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d828      	bhi.n	800a3c2 <UART_SetConfig+0x45e>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0x414>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	0800a3c3 	.word	0x0800a3c3
 800a388:	0800a3b3 	.word	0x0800a3b3
 800a38c:	0800a3c3 	.word	0x0800a3c3
 800a390:	0800a3c3 	.word	0x0800a3c3
 800a394:	0800a3c3 	.word	0x0800a3c3
 800a398:	0800a3bb 	.word	0x0800a3bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a39c:	f7fd fb00 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 800a3a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a3a2:	e014      	b.n	800a3ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3a4:	f7fd fb0e 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800a3a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a3aa:	e010      	b.n	800a3ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3ac:	4b26      	ldr	r3, [pc, #152]	; (800a448 <UART_SetConfig+0x4e4>)
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a3b0:	e00d      	b.n	800a3ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3b2:	f7fd fa41 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a3b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a3b8:	e009      	b.n	800a3ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a3c0:	e005      	b.n	800a3ce <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a3cc:	bf00      	nop
    }

    if (pclk != 0U)
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d021      	beq.n	800a418 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	4a1a      	ldr	r2, [pc, #104]	; (800a444 <UART_SetConfig+0x4e0>)
 800a3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	441a      	add	r2, r3
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d909      	bls.n	800a412 <UART_SetConfig+0x4ae>
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a404:	d205      	bcs.n	800a412 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
 800a410:	e002      	b.n	800a418 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2201      	movs	r2, #1
 800a424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2200      	movs	r2, #0
 800a42c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2200      	movs	r2, #0
 800a432:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a434:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3730      	adds	r7, #48	; 0x30
 800a43c:	46bd      	mov	sp, r7
 800a43e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a442:	bf00      	nop
 800a444:	0801e210 	.word	0x0801e210
 800a448:	00f42400 	.word	0x00f42400

0800a44c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00a      	beq.n	800a4ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00a      	beq.n	800a4dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00a      	beq.n	800a4fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00a      	beq.n	800a520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d01a      	beq.n	800a562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	430a      	orrs	r2, r1
 800a540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a54a:	d10a      	bne.n	800a562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	605a      	str	r2, [r3, #4]
  }
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	bc80      	pop	{r7}
 800a58c:	4770      	bx	lr

0800a58e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af02      	add	r7, sp, #8
 800a594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a59e:	f7f8 f91f 	bl	80027e0 <HAL_GetTick>
 800a5a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	2b08      	cmp	r3, #8
 800a5b0:	d10e      	bne.n	800a5d0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f832 	bl	800a62a <UART_WaitOnFlagUntilTimeout>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e028      	b.n	800a622 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d10e      	bne.n	800a5fc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f81c 	bl	800a62a <UART_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e012      	b.n	800a622 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b09c      	sub	sp, #112	; 0x70
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	603b      	str	r3, [r7, #0]
 800a636:	4613      	mov	r3, r2
 800a638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a63a:	e0a9      	b.n	800a790 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	f000 80a5 	beq.w	800a790 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a646:	f7f8 f8cb 	bl	80027e0 <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a652:	429a      	cmp	r2, r3
 800a654:	d302      	bcc.n	800a65c <UART_WaitOnFlagUntilTimeout+0x32>
 800a656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d140      	bne.n	800a6de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a670:	667b      	str	r3, [r7, #100]	; 0x64
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a67c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e6      	bne.n	800a65c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e5      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e069      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d051      	beq.n	800a790 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6fa:	d149      	bne.n	800a790 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a71a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
 800a726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e6      	bne.n	800a706 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3308      	adds	r3, #8
 800a73e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	613b      	str	r3, [r7, #16]
   return(result);
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f023 0301 	bic.w	r3, r3, #1
 800a74e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3308      	adds	r3, #8
 800a756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a758:	623a      	str	r2, [r7, #32]
 800a75a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	69f9      	ldr	r1, [r7, #28]
 800a75e:	6a3a      	ldr	r2, [r7, #32]
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	61bb      	str	r3, [r7, #24]
   return(result);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e5      	bne.n	800a738 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2220      	movs	r2, #32
 800a770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e010      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	69da      	ldr	r2, [r3, #28]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	4013      	ands	r3, r2
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	bf0c      	ite	eq
 800a7a0:	2301      	moveq	r3, #1
 800a7a2:	2300      	movne	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	f43f af46 	beq.w	800a63c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3770      	adds	r7, #112	; 0x70
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b0a3      	sub	sp, #140	; 0x8c
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	88fa      	ldrh	r2, [r7, #6]
 800a7dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ee:	d10e      	bne.n	800a80e <UART_Start_Receive_IT+0x52>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d105      	bne.n	800a804 <UART_Start_Receive_IT+0x48>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a802:	e02d      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	22ff      	movs	r2, #255	; 0xff
 800a808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a80c:	e028      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10d      	bne.n	800a832 <UART_Start_Receive_IT+0x76>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <UART_Start_Receive_IT+0x6c>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	22ff      	movs	r2, #255	; 0xff
 800a822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a826:	e01b      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	227f      	movs	r2, #127	; 0x7f
 800a82c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a830:	e016      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a83a:	d10d      	bne.n	800a858 <UART_Start_Receive_IT+0x9c>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d104      	bne.n	800a84e <UART_Start_Receive_IT+0x92>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	227f      	movs	r2, #127	; 0x7f
 800a848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a84c:	e008      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	223f      	movs	r2, #63	; 0x3f
 800a852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a856:	e003      	b.n	800a860 <UART_Start_Receive_IT+0xa4>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2222      	movs	r2, #34	; 0x22
 800a86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a882:	f043 0301 	orr.w	r3, r3, #1
 800a886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a894:	673a      	str	r2, [r7, #112]	; 0x70
 800a896:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a89a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a8a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e3      	bne.n	800a870 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b0:	d14f      	bne.n	800a952 <UART_Start_Receive_IT+0x196>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d349      	bcc.n	800a952 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c6:	d107      	bne.n	800a8d8 <UART_Start_Receive_IT+0x11c>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d103      	bne.n	800a8d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4a46      	ldr	r2, [pc, #280]	; (800a9ec <UART_Start_Receive_IT+0x230>)
 800a8d4:	675a      	str	r2, [r3, #116]	; 0x74
 800a8d6:	e002      	b.n	800a8de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4a45      	ldr	r2, [pc, #276]	; (800a9f0 <UART_Start_Receive_IT+0x234>)
 800a8dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d01a      	beq.n	800a91c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a90a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a90e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e4      	bne.n	800a8e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3308      	adds	r3, #8
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a932:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a93c:	64ba      	str	r2, [r7, #72]	; 0x48
 800a93e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a940:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a944:	e841 2300 	strex	r3, r2, [r1]
 800a948:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e5      	bne.n	800a91c <UART_Start_Receive_IT+0x160>
 800a950:	e046      	b.n	800a9e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d107      	bne.n	800a96c <UART_Start_Receive_IT+0x1b0>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <UART_Start_Receive_IT+0x238>)
 800a968:	675a      	str	r2, [r3, #116]	; 0x74
 800a96a:	e002      	b.n	800a972 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a22      	ldr	r2, [pc, #136]	; (800a9f8 <UART_Start_Receive_IT+0x23c>)
 800a970:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d019      	beq.n	800a9ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a98e:	677b      	str	r3, [r7, #116]	; 0x74
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a998:	637b      	str	r3, [r7, #52]	; 0x34
 800a99a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e6      	bne.n	800a97a <UART_Start_Receive_IT+0x1be>
 800a9ac:	e018      	b.n	800a9e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f043 0320 	orr.w	r3, r3, #32
 800a9c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	69f9      	ldr	r1, [r7, #28]
 800a9d2:	6a3a      	ldr	r2, [r7, #32]
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e6      	bne.n	800a9ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	378c      	adds	r7, #140	; 0x8c
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bc80      	pop	{r7}
 800a9ea:	4770      	bx	lr
 800a9ec:	0800b3d1 	.word	0x0800b3d1
 800a9f0:	0800b071 	.word	0x0800b071
 800a9f4:	0800aeb9 	.word	0x0800aeb9
 800a9f8:	0800ad01 	.word	0x0800ad01

0800a9fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b08f      	sub	sp, #60	; 0x3c
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	e853 3f00 	ldrex	r3, [r3]
 800aa10:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa18:	637b      	str	r3, [r7, #52]	; 0x34
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2a:	e841 2300 	strex	r3, r2, [r1]
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e6      	bne.n	800aa04 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa4c:	633b      	str	r3, [r7, #48]	; 0x30
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa56:	61ba      	str	r2, [r7, #24]
 800aa58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	6979      	ldr	r1, [r7, #20]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	613b      	str	r3, [r7, #16]
   return(result);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e5      	bne.n	800aa36 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800aa72:	bf00      	nop
 800aa74:	373c      	adds	r7, #60	; 0x3c
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b095      	sub	sp, #84	; 0x54
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa2:	643b      	str	r3, [r7, #64]	; 0x40
 800aaa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e6      	bne.n	800aa84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aacc:	f023 0301 	bic.w	r3, r3, #1
 800aad0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aada:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e3      	bne.n	800aab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d118      	bne.n	800ab28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f023 0310 	bic.w	r3, r3, #16
 800ab0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6979      	ldr	r1, [r7, #20]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	613b      	str	r3, [r7, #16]
   return(result);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e6      	bne.n	800aaf6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab3c:	bf00      	nop
 800ab3e:	3754      	adds	r7, #84	; 0x54
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr

0800ab46 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b090      	sub	sp, #64	; 0x40
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d137      	bne.n	800abd2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	e853 3f00 	ldrex	r3, [r3]
 800ab78:	623b      	str	r3, [r7, #32]
   return(result);
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3308      	adds	r3, #8
 800ab88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab8a:	633a      	str	r2, [r7, #48]	; 0x30
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e5      	bne.n	800ab6a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb2:	637b      	str	r3, [r7, #52]	; 0x34
 800abb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	69b9      	ldr	r1, [r7, #24]
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	617b      	str	r3, [r7, #20]
   return(result);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e6      	bne.n	800ab9e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abd0:	e002      	b.n	800abd8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800abd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abd4:	f7f8 fca2 	bl	800351c <HAL_UART_TxCpltCallback>
}
 800abd8:	bf00      	nop
 800abda:	3740      	adds	r7, #64	; 0x40
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff f99a 	bl	8009f28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac24:	2b80      	cmp	r3, #128	; 0x80
 800ac26:	d109      	bne.n	800ac3c <UART_DMAError+0x40>
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b21      	cmp	r3, #33	; 0x21
 800ac2c:	d106      	bne.n	800ac3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ac36:	6978      	ldr	r0, [r7, #20]
 800ac38:	f7ff fee0 	bl	800a9fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d109      	bne.n	800ac5e <UART_DMAError+0x62>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b22      	cmp	r3, #34	; 0x22
 800ac4e:	d106      	bne.n	800ac5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ac58:	6978      	ldr	r0, [r7, #20]
 800ac5a:	f7ff ff0f 	bl	800aa7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac64:	f043 0210 	orr.w	r2, r3, #16
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff f963 	bl	8009f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff f94d 	bl	8009f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	61bb      	str	r3, [r7, #24]
 800acd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6979      	ldr	r1, [r7, #20]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	613b      	str	r3, [r7, #16]
   return(result);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e6      	bne.n	800acb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7f8 fc13 	bl	800351c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf6:	bf00      	nop
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b09c      	sub	sp, #112	; 0x70
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad18:	2b22      	cmp	r3, #34	; 0x22
 800ad1a:	f040 80be 	bne.w	800ae9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ad2c:	b2d9      	uxtb	r1, r3
 800ad2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad38:	400a      	ands	r2, r1
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f040 80a1 	bne.w	800aeaa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad86:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e6      	bne.n	800ad68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	f023 0301 	bic.w	r3, r3, #1
 800adb0:	667b      	str	r3, [r7, #100]	; 0x64
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3308      	adds	r3, #8
 800adb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800adba:	647a      	str	r2, [r7, #68]	; 0x44
 800adbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e5      	bne.n	800ad9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2220      	movs	r2, #32
 800add2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a33      	ldr	r2, [pc, #204]	; (800aeb4 <UART_RxISR_8BIT+0x1b4>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d01f      	beq.n	800ae2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d018      	beq.n	800ae2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	e853 3f00 	ldrex	r3, [r3]
 800ae06:	623b      	str	r3, [r7, #32]
   return(result);
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae0e:	663b      	str	r3, [r7, #96]	; 0x60
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae18:	633b      	str	r3, [r7, #48]	; 0x30
 800ae1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae20:	e841 2300 	strex	r3, r2, [r1]
 800ae24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e6      	bne.n	800adfa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d12e      	bne.n	800ae92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	e853 3f00 	ldrex	r3, [r3]
 800ae46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0310 	bic.w	r3, r3, #16
 800ae4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae58:	61fb      	str	r3, [r7, #28]
 800ae5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	69b9      	ldr	r1, [r7, #24]
 800ae5e:	69fa      	ldr	r2, [r7, #28]
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	617b      	str	r3, [r7, #20]
   return(result);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e6      	bne.n	800ae3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f003 0310 	and.w	r3, r3, #16
 800ae76:	2b10      	cmp	r3, #16
 800ae78:	d103      	bne.n	800ae82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2210      	movs	r2, #16
 800ae80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff f85e 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae90:	e00b      	b.n	800aeaa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7f8 fb58 	bl	8003548 <HAL_UART_RxCpltCallback>
}
 800ae98:	e007      	b.n	800aeaa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	699a      	ldr	r2, [r3, #24]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f042 0208 	orr.w	r2, r2, #8
 800aea8:	619a      	str	r2, [r3, #24]
}
 800aeaa:	bf00      	nop
 800aeac:	3770      	adds	r7, #112	; 0x70
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	40008000 	.word	0x40008000

0800aeb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b09c      	sub	sp, #112	; 0x70
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aec6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed0:	2b22      	cmp	r3, #34	; 0x22
 800aed2:	f040 80be 	bne.w	800b052 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800aee6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800aeea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800aeee:	4013      	ands	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aef4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefa:	1c9a      	adds	r2, r3, #2
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af06:	b29b      	uxth	r3, r3
 800af08:	3b01      	subs	r3, #1
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af18:	b29b      	uxth	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 80a1 	bne.w	800b062 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af34:	667b      	str	r3, [r7, #100]	; 0x64
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af3e:	657b      	str	r3, [r7, #84]	; 0x54
 800af40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1e6      	bne.n	800af20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3308      	adds	r3, #8
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	f023 0301 	bic.w	r3, r3, #1
 800af68:	663b      	str	r3, [r7, #96]	; 0x60
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3308      	adds	r3, #8
 800af70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af72:	643a      	str	r2, [r7, #64]	; 0x40
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e5      	bne.n	800af52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a33      	ldr	r2, [pc, #204]	; (800b06c <UART_RxISR_16BIT+0x1b4>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d01f      	beq.n	800afe4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d018      	beq.n	800afe4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	461a      	mov	r2, r3
 800afce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e6      	bne.n	800afb2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d12e      	bne.n	800b04a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f023 0310 	bic.w	r3, r3, #16
 800b006:	65bb      	str	r3, [r7, #88]	; 0x58
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b010:	61bb      	str	r3, [r7, #24]
 800b012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	6979      	ldr	r1, [r7, #20]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	613b      	str	r3, [r7, #16]
   return(result);
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e6      	bne.n	800aff2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	f003 0310 	and.w	r3, r3, #16
 800b02e:	2b10      	cmp	r3, #16
 800b030:	d103      	bne.n	800b03a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2210      	movs	r2, #16
 800b038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fe ff82 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b048:	e00b      	b.n	800b062 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7f8 fa7c 	bl	8003548 <HAL_UART_RxCpltCallback>
}
 800b050:	e007      	b.n	800b062 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	699a      	ldr	r2, [r3, #24]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f042 0208 	orr.w	r2, r2, #8
 800b060:	619a      	str	r2, [r3, #24]
}
 800b062:	bf00      	nop
 800b064:	3770      	adds	r7, #112	; 0x70
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40008000 	.word	0x40008000

0800b070 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b0ac      	sub	sp, #176	; 0xb0
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b07e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a6:	2b22      	cmp	r3, #34	; 0x22
 800b0a8:	f040 8182 	bne.w	800b3b0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0b2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0b6:	e125      	b.n	800b304 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b0c6:	b2d9      	uxtb	r1, r3
 800b0c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0d2:	400a      	ands	r2, r1
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0dc:	1c5a      	adds	r2, r3, #1
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	2b00      	cmp	r3, #0
 800b108:	d053      	beq.n	800b1b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b00      	cmp	r3, #0
 800b114:	d011      	beq.n	800b13a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2201      	movs	r2, #1
 800b128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b130:	f043 0201 	orr.w	r2, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d011      	beq.n	800b16a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00b      	beq.n	800b16a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2202      	movs	r2, #2
 800b158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b160:	f043 0204 	orr.w	r2, r3, #4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	d011      	beq.n	800b19a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2204      	movs	r2, #4
 800b188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b190:	f043 0202 	orr.w	r2, r3, #2
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d006      	beq.n	800b1b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7fe fec8 	bl	8009f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f040 80a2 	bne.w	800b304 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1e4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b1e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b1f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1e4      	bne.n	800b1c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b20c:	f023 0301 	bic.w	r3, r3, #1
 800b210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b21e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b220:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b22c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e1      	bne.n	800b1f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a5f      	ldr	r2, [pc, #380]	; (800b3c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d021      	beq.n	800b294 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01a      	beq.n	800b294 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b280:	657b      	str	r3, [r7, #84]	; 0x54
 800b282:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e4      	bne.n	800b25e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d130      	bne.n	800b2fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	e853 3f00 	ldrex	r3, [r3]
 800b2ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f023 0310 	bic.w	r3, r3, #16
 800b2b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e4      	bne.n	800b2a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f003 0310 	and.w	r3, r3, #16
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d103      	bne.n	800b2ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2210      	movs	r2, #16
 800b2ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fe fe28 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
 800b2fc:	e002      	b.n	800b304 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7f8 f922 	bl	8003548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b304:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b30c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b310:	f003 0320 	and.w	r3, r3, #32
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f aecf 	bne.w	800b0b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b320:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d049      	beq.n	800b3c0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b332:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b336:	429a      	cmp	r2, r3
 800b338:	d242      	bcs.n	800b3c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	61fb      	str	r3, [r7, #28]
   return(result);
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b35e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e3      	bne.n	800b33a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a15      	ldr	r2, [pc, #84]	; (800b3cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b376:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	60bb      	str	r3, [r7, #8]
   return(result);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	f043 0320 	orr.w	r3, r3, #32
 800b38c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	461a      	mov	r2, r3
 800b396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b39a:	61bb      	str	r3, [r7, #24]
 800b39c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	6979      	ldr	r1, [r7, #20]
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e4      	bne.n	800b378 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3ae:	e007      	b.n	800b3c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f042 0208 	orr.w	r2, r2, #8
 800b3be:	619a      	str	r2, [r3, #24]
}
 800b3c0:	bf00      	nop
 800b3c2:	37b0      	adds	r7, #176	; 0xb0
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	40008000 	.word	0x40008000
 800b3cc:	0800ad01 	.word	0x0800ad01

0800b3d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b0ae      	sub	sp, #184	; 0xb8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b406:	2b22      	cmp	r3, #34	; 0x22
 800b408:	f040 8186 	bne.w	800b718 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b412:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b416:	e129      	b.n	800b66c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b42a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b42e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b432:	4013      	ands	r3, r2
 800b434:	b29a      	uxth	r2, r3
 800b436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b43a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b440:	1c9a      	adds	r2, r3, #2
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	3b01      	subs	r3, #1
 800b450:	b29a      	uxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d053      	beq.n	800b516 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b46e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	2b00      	cmp	r3, #0
 800b478:	d011      	beq.n	800b49e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b47a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00b      	beq.n	800b49e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2201      	movs	r2, #1
 800b48c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b494:	f043 0201 	orr.w	r2, r3, #1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b49e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d011      	beq.n	800b4ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b4aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00b      	beq.n	800b4ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c4:	f043 0204 	orr.w	r2, r3, #4
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d011      	beq.n	800b4fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b4da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00b      	beq.n	800b4fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2204      	movs	r2, #4
 800b4ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f4:	f043 0202 	orr.w	r2, r3, #2
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b504:	2b00      	cmp	r3, #0
 800b506:	d006      	beq.n	800b516 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7fe fd16 	bl	8009f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f040 80a4 	bne.w	800b66c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b54a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b54e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e2      	bne.n	800b524 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b56e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b574:	f023 0301 	bic.w	r3, r3, #1
 800b578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b586:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b58c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e1      	bne.n	800b55e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a5f      	ldr	r2, [pc, #380]	; (800b730 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d021      	beq.n	800b5fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d01a      	beq.n	800b5fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b5da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b5e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e4      	bne.n	800b5c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d130      	bne.n	800b666 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61a:	f023 0310 	bic.w	r3, r3, #16
 800b61e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b62c:	647b      	str	r3, [r7, #68]	; 0x44
 800b62e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e4      	bne.n	800b60a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f003 0310 	and.w	r3, r3, #16
 800b64a:	2b10      	cmp	r3, #16
 800b64c:	d103      	bne.n	800b656 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2210      	movs	r2, #16
 800b654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7fe fc74 	bl	8009f4c <HAL_UARTEx_RxEventCallback>
 800b664:	e002      	b.n	800b66c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7f7 ff6e 	bl	8003548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b66c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b670:	2b00      	cmp	r3, #0
 800b672:	d006      	beq.n	800b682 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f47f aecb 	bne.w	800b418 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b688:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b68c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b690:	2b00      	cmp	r3, #0
 800b692:	d049      	beq.n	800b728 <UART_RxISR_16BIT_FIFOEN+0x358>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b69a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d242      	bcs.n	800b728 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	e853 3f00 	ldrex	r3, [r3]
 800b6b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ce:	e841 2300 	strex	r3, r2, [r1]
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1e3      	bne.n	800b6a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a15      	ldr	r2, [pc, #84]	; (800b734 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b6de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f043 0320 	orr.w	r3, r3, #32
 800b6f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b702:	61fb      	str	r3, [r7, #28]
 800b704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	69b9      	ldr	r1, [r7, #24]
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	617b      	str	r3, [r7, #20]
   return(result);
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e4      	bne.n	800b6e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b716:	e007      	b.n	800b728 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	699a      	ldr	r2, [r3, #24]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0208 	orr.w	r2, r2, #8
 800b726:	619a      	str	r2, [r3, #24]
}
 800b728:	bf00      	nop
 800b72a:	37b8      	adds	r7, #184	; 0xb8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	40008000 	.word	0x40008000
 800b734:	0800aeb9 	.word	0x0800aeb9

0800b738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	bc80      	pop	{r7}
 800b75a:	4770      	bx	lr

0800b75c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	bc80      	pop	{r7}
 800b76c:	4770      	bx	lr

0800b76e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b088      	sub	sp, #32
 800b772:	af02      	add	r7, sp, #8
 800b774:	60f8      	str	r0, [r7, #12]
 800b776:	1d3b      	adds	r3, r7, #4
 800b778:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b786:	2b01      	cmp	r3, #1
 800b788:	d101      	bne.n	800b78e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b78a:	2302      	movs	r3, #2
 800b78c:	e046      	b.n	800b81c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2224      	movs	r2, #36	; 0x24
 800b79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f022 0201 	bic.w	r2, r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b7c8:	1d3b      	adds	r3, r7, #4
 800b7ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 fa4b 	bl	800bc6a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f042 0201 	orr.w	r2, r2, #1
 800b7e2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7e4:	f7f6 fffc 	bl	80027e0 <HAL_GetTick>
 800b7e8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7fe ff16 	bl	800a62a <UART_WaitOnFlagUntilTimeout>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	75fb      	strb	r3, [r7, #23]
 800b808:	e003      	b.n	800b812 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b089      	sub	sp, #36	; 0x24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_UARTEx_EnableStopMode+0x16>
 800b836:	2302      	movs	r3, #2
 800b838:	e021      	b.n	800b87e <HAL_UARTEx_EnableStopMode+0x5a>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	e853 3f00 	ldrex	r3, [r3]
 800b84e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	f043 0302 	orr.w	r3, r3, #2
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	461a      	mov	r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	61bb      	str	r3, [r7, #24]
 800b862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6979      	ldr	r1, [r7, #20]
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	613b      	str	r3, [r7, #16]
   return(result);
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e6      	bne.n	800b842 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3724      	adds	r7, #36	; 0x24
 800b882:	46bd      	mov	sp, r7
 800b884:	bc80      	pop	{r7}
 800b886:	4770      	bx	lr

0800b888 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <HAL_UARTEx_EnableFifoMode+0x16>
 800b89a:	2302      	movs	r3, #2
 800b89c:	e02b      	b.n	800b8f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2224      	movs	r2, #36	; 0x24
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0201 	bic.w	r2, r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b8d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f9e6 	bl	800bcb0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b085      	sub	sp, #20
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d101      	bne.n	800b914 <HAL_UARTEx_DisableFifoMode+0x16>
 800b910:	2302      	movs	r3, #2
 800b912:	e027      	b.n	800b964 <HAL_UARTEx_DisableFifoMode+0x66>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2224      	movs	r2, #36	; 0x24
 800b920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f022 0201 	bic.w	r2, r2, #1
 800b93a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b942:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr

0800b96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b982:	2302      	movs	r3, #2
 800b984:	e02d      	b.n	800b9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2224      	movs	r2, #36	; 0x24
 800b992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 0201 	bic.w	r2, r2, #1
 800b9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f974 	bl	800bcb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2220      	movs	r2, #32
 800b9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e02d      	b.n	800ba5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2224      	movs	r2, #36	; 0x24
 800ba0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f022 0201 	bic.w	r2, r2, #1
 800ba28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f936 	bl	800bcb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b088      	sub	sp, #32
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	603b      	str	r3, [r7, #0]
 800ba72:	4613      	mov	r3, r2
 800ba74:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba7c:	2b20      	cmp	r3, #32
 800ba7e:	f040 80ef 	bne.w	800bc60 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <HAL_UARTEx_ReceiveToIdle+0x28>
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e0e7      	b.n	800bc62 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2222      	movs	r2, #34	; 0x22
 800ba9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800baae:	f7f6 fe97 	bl	80027e0 <HAL_GetTick>
 800bab2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	88fa      	ldrh	r2, [r7, #6]
 800bab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	88fa      	ldrh	r2, [r7, #6]
 800bac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bacc:	d10e      	bne.n	800baec <HAL_UARTEx_ReceiveToIdle+0x86>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800badc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bae0:	e02d      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	22ff      	movs	r2, #255	; 0xff
 800bae6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baea:	e028      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10d      	bne.n	800bb10 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <HAL_UARTEx_ReceiveToIdle+0xa0>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	22ff      	movs	r2, #255	; 0xff
 800bb00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb04:	e01b      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	227f      	movs	r2, #127	; 0x7f
 800bb0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb0e:	e016      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb18:	d10d      	bne.n	800bb36 <HAL_UARTEx_ReceiveToIdle+0xd0>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <HAL_UARTEx_ReceiveToIdle+0xc6>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	227f      	movs	r2, #127	; 0x7f
 800bb26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb2a:	e008      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	223f      	movs	r2, #63	; 0x3f
 800bb30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb34:	e003      	b.n	800bb3e <HAL_UARTEx_ReceiveToIdle+0xd8>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb4e:	d108      	bne.n	800bb62 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d104      	bne.n	800bb62 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	61bb      	str	r3, [r7, #24]
 800bb60:	e003      	b.n	800bb6a <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bb70:	e05f      	b.n	800bc32 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	f003 0310 	and.w	r3, r3, #16
 800bb7c:	2b10      	cmp	r3, #16
 800bb7e:	d110      	bne.n	800bba2 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2210      	movs	r2, #16
 800bb86:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2202      	movs	r2, #2
 800bb94:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2220      	movs	r2, #32
 800bb9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e05f      	b.n	800bc62 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	f003 0320 	and.w	r3, r3, #32
 800bbac:	2b20      	cmp	r3, #32
 800bbae:	d12b      	bne.n	800bc08 <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10c      	bne.n	800bbd0 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	8a7b      	ldrh	r3, [r7, #18]
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	3302      	adds	r3, #2
 800bbcc:	61bb      	str	r3, [r7, #24]
 800bbce:	e00c      	b.n	800bbea <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	8a7b      	ldrh	r3, [r7, #18]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4013      	ands	r3, r2
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	d010      	beq.n	800bc32 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc10:	f7f6 fde6 	bl	80027e0 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d302      	bcc.n	800bc26 <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d105      	bne.n	800bc32 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e017      	b.n	800bc62 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d199      	bne.n	800bb72 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e000      	b.n	800bc62 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800bc60:	2302      	movs	r3, #2
  }
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3720      	adds	r7, #32
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	1d3b      	adds	r3, r7, #4
 800bc74:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f023 0210 	bic.w	r2, r3, #16
 800bc82:	893b      	ldrh	r3, [r7, #8]
 800bc84:	4619      	mov	r1, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800bc98:	7abb      	ldrb	r3, [r7, #10]
 800bc9a:	061a      	lsls	r2, r3, #24
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	430a      	orrs	r2, r1
 800bca2:	605a      	str	r2, [r3, #4]
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc80      	pop	{r7}
 800bcac:	4770      	bx	lr
	...

0800bcb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d108      	bne.n	800bcd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcd0:	e031      	b.n	800bd36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcd2:	2308      	movs	r3, #8
 800bcd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcd6:	2308      	movs	r3, #8
 800bcd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	0e5b      	lsrs	r3, r3, #25
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f003 0307 	and.w	r3, r3, #7
 800bce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	0f5b      	lsrs	r3, r3, #29
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0307 	and.w	r3, r3, #7
 800bcf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	7b3a      	ldrb	r2, [r7, #12]
 800bcfe:	4910      	ldr	r1, [pc, #64]	; (800bd40 <UARTEx_SetNbDataToProcess+0x90>)
 800bd00:	5c8a      	ldrb	r2, [r1, r2]
 800bd02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd06:	7b3a      	ldrb	r2, [r7, #12]
 800bd08:	490e      	ldr	r1, [pc, #56]	; (800bd44 <UARTEx_SetNbDataToProcess+0x94>)
 800bd0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	7b7a      	ldrb	r2, [r7, #13]
 800bd1c:	4908      	ldr	r1, [pc, #32]	; (800bd40 <UARTEx_SetNbDataToProcess+0x90>)
 800bd1e:	5c8a      	ldrb	r2, [r1, r2]
 800bd20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd24:	7b7a      	ldrb	r2, [r7, #13]
 800bd26:	4907      	ldr	r1, [pc, #28]	; (800bd44 <UARTEx_SetNbDataToProcess+0x94>)
 800bd28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bc80      	pop	{r7}
 800bd3e:	4770      	bx	lr
 800bd40:	0801e228 	.word	0x0801e228
 800bd44:	0801e230 	.word	0x0801e230

0800bd48 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800bd4c:	f7f6 fbe4 	bl	8002518 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bd50:	f000 f820 	bl	800bd94 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bd54:	bf00      	nop
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	f010 fdb4 	bl	801c8cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800bd64:	bf00      	nop
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bd6c:	f3bf 8f4f 	dsb	sy
}
 800bd70:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bd72:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <__NVIC_SystemReset+0x24>)
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bd7a:	4904      	ldr	r1, [pc, #16]	; (800bd8c <__NVIC_SystemReset+0x24>)
 800bd7c:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <__NVIC_SystemReset+0x28>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd82:	f3bf 8f4f 	dsb	sy
}
 800bd86:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bd88:	bf00      	nop
 800bd8a:	e7fd      	b.n	800bd88 <__NVIC_SystemReset+0x20>
 800bd8c:	e000ed00 	.word	0xe000ed00
 800bd90:	05fa0004 	.word	0x05fa0004

0800bd94 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800bd9e:	2300      	movs	r3, #0
 800bda0:	9302      	str	r3, [sp, #8]
 800bda2:	2303      	movs	r3, #3
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	2301      	movs	r3, #1
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4b59      	ldr	r3, [pc, #356]	; (800bf10 <LoRaWAN_Init+0x17c>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	2002      	movs	r0, #2
 800bdb2:	f011 f9d9 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9302      	str	r3, [sp, #8]
 800bdba:	2305      	movs	r3, #5
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	4b54      	ldr	r3, [pc, #336]	; (800bf14 <LoRaWAN_Init+0x180>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	2002      	movs	r0, #2
 800bdca:	f011 f9cd 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800bdce:	2300      	movs	r3, #0
 800bdd0:	9302      	str	r3, [sp, #8]
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	4b4f      	ldr	r3, [pc, #316]	; (800bf18 <LoRaWAN_Init+0x184>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	2100      	movs	r1, #0
 800bde0:	2002      	movs	r0, #2
 800bde2:	f011 f9c1 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bde6:	1d3b      	adds	r3, r7, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	2000      	movs	r0, #0
 800bdec:	f003 f972 	bl	800f0d4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	0e1b      	lsrs	r3, r3, #24
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	0c1b      	lsrs	r3, r3, #16
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	4619      	mov	r1, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	b2db      	uxtb	r3, r3
 800be06:	9302      	str	r3, [sp, #8]
 800be08:	9101      	str	r1, [sp, #4]
 800be0a:	9200      	str	r2, [sp, #0]
 800be0c:	4b43      	ldr	r3, [pc, #268]	; (800bf1c <LoRaWAN_Init+0x188>)
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	2002      	movs	r0, #2
 800be14:	f011 f9a8 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800be18:	1d3b      	adds	r3, r7, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	2001      	movs	r0, #1
 800be1e:	f003 f959 	bl	800f0d4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	0e1b      	lsrs	r3, r3, #24
 800be26:	b2db      	uxtb	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	0c1b      	lsrs	r3, r3, #16
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	4619      	mov	r1, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	0a1b      	lsrs	r3, r3, #8
 800be36:	b2db      	uxtb	r3, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	b2c0      	uxtb	r0, r0
 800be3c:	9003      	str	r0, [sp, #12]
 800be3e:	9302      	str	r3, [sp, #8]
 800be40:	9101      	str	r1, [sp, #4]
 800be42:	9200      	str	r2, [sp, #0]
 800be44:	4b36      	ldr	r3, [pc, #216]	; (800bf20 <LoRaWAN_Init+0x18c>)
 800be46:	2200      	movs	r2, #0
 800be48:	2100      	movs	r1, #0
 800be4a:	2002      	movs	r0, #2
 800be4c:	f011 f98c 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800be50:	2300      	movs	r3, #0
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	4b33      	ldr	r3, [pc, #204]	; (800bf24 <LoRaWAN_Init+0x190>)
 800be56:	2200      	movs	r2, #0
 800be58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800be5c:	4832      	ldr	r0, [pc, #200]	; (800bf28 <LoRaWAN_Init+0x194>)
 800be5e:	f010 fed5 	bl	801cc0c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800be62:	2300      	movs	r3, #0
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	4b31      	ldr	r3, [pc, #196]	; (800bf2c <LoRaWAN_Init+0x198>)
 800be68:	2200      	movs	r2, #0
 800be6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800be6e:	4830      	ldr	r0, [pc, #192]	; (800bf30 <LoRaWAN_Init+0x19c>)
 800be70:	f010 fecc 	bl	801cc0c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800be74:	2300      	movs	r3, #0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <LoRaWAN_Init+0x1a0>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800be80:	482d      	ldr	r0, [pc, #180]	; (800bf38 <LoRaWAN_Init+0x1a4>)
 800be82:	f010 fec3 	bl	801cc0c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	4b2c      	ldr	r3, [pc, #176]	; (800bf3c <LoRaWAN_Init+0x1a8>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800be92:	482b      	ldr	r0, [pc, #172]	; (800bf40 <LoRaWAN_Init+0x1ac>)
 800be94:	f010 feba 	bl	801cc0c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800be98:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <LoRaWAN_Init+0x1b0>)
 800be9a:	2100      	movs	r1, #0
 800be9c:	2001      	movs	r0, #1
 800be9e:	f010 fe11 	bl	801cac4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800bea2:	4a29      	ldr	r2, [pc, #164]	; (800bf48 <LoRaWAN_Init+0x1b4>)
 800bea4:	2100      	movs	r1, #0
 800bea6:	2002      	movs	r0, #2
 800bea8:	f010 fe0c 	bl	801cac4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800beac:	4a27      	ldr	r2, [pc, #156]	; (800bf4c <LoRaWAN_Init+0x1b8>)
 800beae:	2100      	movs	r1, #0
 800beb0:	2004      	movs	r0, #4
 800beb2:	f010 fe07 	bl	801cac4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800beb6:	4a26      	ldr	r2, [pc, #152]	; (800bf50 <LoRaWAN_Init+0x1bc>)
 800beb8:	2100      	movs	r1, #0
 800beba:	2008      	movs	r0, #8
 800bebc:	f010 fe02 	bl	801cac4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800bec0:	f000 fcf4 	bl	800c8ac <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800bec4:	4923      	ldr	r1, [pc, #140]	; (800bf54 <LoRaWAN_Init+0x1c0>)
 800bec6:	4824      	ldr	r0, [pc, #144]	; (800bf58 <LoRaWAN_Init+0x1c4>)
 800bec8:	f002 fa1a 	bl	800e300 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800becc:	4823      	ldr	r0, [pc, #140]	; (800bf5c <LoRaWAN_Init+0x1c8>)
 800bece:	f002 fa73 	bl	800e3b8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800bed2:	4819      	ldr	r0, [pc, #100]	; (800bf38 <LoRaWAN_Init+0x1a4>)
 800bed4:	f010 fed0 	bl	801cc78 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800bed8:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <LoRaWAN_Init+0x1cc>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	4a21      	ldr	r2, [pc, #132]	; (800bf64 <LoRaWAN_Init+0x1d0>)
 800bede:	7812      	ldrb	r2, [r2, #0]
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f002 fb36 	bl	800e554 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800bee8:	4b1f      	ldr	r3, [pc, #124]	; (800bf68 <LoRaWAN_Init+0x1d4>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800bef0:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <LoRaWAN_Init+0x1d8>)
 800bef2:	6819      	ldr	r1, [r3, #0]
 800bef4:	2300      	movs	r3, #0
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <LoRaWAN_Init+0x1dc>)
 800befa:	2200      	movs	r2, #0
 800befc:	481d      	ldr	r0, [pc, #116]	; (800bf74 <LoRaWAN_Init+0x1e0>)
 800befe:	f010 fe85 	bl	801cc0c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800bf02:	481c      	ldr	r0, [pc, #112]	; (800bf74 <LoRaWAN_Init+0x1e0>)
 800bf04:	f010 feb8 	bl	801cc78 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800bf08:	bf00      	nop
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	0801d8e0 	.word	0x0801d8e0
 800bf14:	0801d904 	.word	0x0801d904
 800bf18:	0801d924 	.word	0x0801d924
 800bf1c:	0801d944 	.word	0x0801d944
 800bf20:	0801d968 	.word	0x0801d968
 800bf24:	0800c3d5 	.word	0x0800c3d5
 800bf28:	20000750 	.word	0x20000750
 800bf2c:	0800c3e7 	.word	0x0800c3e7
 800bf30:	20000768 	.word	0x20000768
 800bf34:	0800c3f9 	.word	0x0800c3f9
 800bf38:	20000780 	.word	0x20000780
 800bf3c:	0800c7ad 	.word	0x0800c7ad
 800bf40:	20000644 	.word	0x20000644
 800bf44:	0800e529 	.word	0x0800e529
 800bf48:	0800c0c1 	.word	0x0800c0c1
 800bf4c:	0800c7d1 	.word	0x0800c7d1
 800bf50:	0800c72d 	.word	0x0800c72d
 800bf54:	01030000 	.word	0x01030000
 800bf58:	2000002c 	.word	0x2000002c
 800bf5c:	20000078 	.word	0x20000078
 800bf60:	20000028 	.word	0x20000028
 800bf64:	20000029 	.word	0x20000029
 800bf68:	20000628 	.word	0x20000628
 800bf6c:	20000090 	.word	0x20000090
 800bf70:	0800c3b1 	.word	0x0800c3b1
 800bf74:	2000062c 	.word	0x2000062c

0800bf78 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800bf78:	b5b0      	push	{r4, r5, r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af06      	add	r7, sp, #24
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 8086 	beq.w	800c09a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800bf8e:	4845      	ldr	r0, [pc, #276]	; (800c0a4 <OnRxData+0x12c>)
 800bf90:	f010 fe72 	bl	801cc78 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d05a      	beq.n	800c052 <OnRxData+0xda>
    {
      if (appData != NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d057      	beq.n	800c052 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d050      	beq.n	800c052 <OnRxData+0xda>
        {
    switch (appData->Port)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d01f      	beq.n	800bff8 <OnRxData+0x80>
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d145      	bne.n	800c048 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	785b      	ldrb	r3, [r3, #1]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d143      	bne.n	800c04c <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d00e      	beq.n	800bfec <OnRxData+0x74>
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	dc10      	bgt.n	800bff4 <OnRxData+0x7c>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <OnRxData+0x64>
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d004      	beq.n	800bfe4 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800bfda:	e00b      	b.n	800bff4 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800bfdc:	2000      	movs	r0, #0
 800bfde:	f002 fc81 	bl	800e8e4 <LmHandlerRequestClass>
              break;
 800bfe2:	e008      	b.n	800bff6 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	f002 fc7d 	bl	800e8e4 <LmHandlerRequestClass>
              break;
 800bfea:	e004      	b.n	800bff6 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800bfec:	2002      	movs	r0, #2
 800bfee:	f002 fc79 	bl	800e8e4 <LmHandlerRequestClass>
              break;
 800bff2:	e000      	b.n	800bff6 <OnRxData+0x7e>
              break;
 800bff4:	bf00      	nop
          }
        }
        break;
 800bff6:	e029      	b.n	800c04c <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d127      	bne.n	800c050 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	4b26      	ldr	r3, [pc, #152]	; (800c0a8 <OnRxData+0x130>)
 800c00e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800c010:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <OnRxData+0x130>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800c018:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <OnRxData+0x134>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	2003      	movs	r0, #3
 800c020:	f011 f8a2 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800c024:	2201      	movs	r2, #1
 800c026:	2120      	movs	r1, #32
 800c028:	4821      	ldr	r0, [pc, #132]	; (800c0b0 <OnRxData+0x138>)
 800c02a:	f7f9 fe69 	bl	8005d00 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800c02e:	e00f      	b.n	800c050 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800c030:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <OnRxData+0x13c>)
 800c032:	2200      	movs	r2, #0
 800c034:	2100      	movs	r1, #0
 800c036:	2003      	movs	r0, #3
 800c038:	f011 f896 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800c03c:	2200      	movs	r2, #0
 800c03e:	2120      	movs	r1, #32
 800c040:	481b      	ldr	r0, [pc, #108]	; (800c0b0 <OnRxData+0x138>)
 800c042:	f7f9 fe5d 	bl	8005d00 <HAL_GPIO_WritePin>
        break;
 800c046:	e003      	b.n	800c050 <OnRxData+0xd8>

      default:

        break;
 800c048:	bf00      	nop
 800c04a:	e002      	b.n	800c052 <OnRxData+0xda>
        break;
 800c04c:	bf00      	nop
 800c04e:	e000      	b.n	800c052 <OnRxData+0xda>
        break;
 800c050:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	7c1b      	ldrb	r3, [r3, #16]
 800c056:	2b05      	cmp	r3, #5
 800c058:	d81f      	bhi.n	800c09a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	7bfa      	ldrb	r2, [r7, #15]
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800c066:	460c      	mov	r4, r1
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	7c09      	ldrb	r1, [r1, #16]
 800c06c:	4608      	mov	r0, r1
 800c06e:	4912      	ldr	r1, [pc, #72]	; (800c0b8 <OnRxData+0x140>)
 800c070:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c074:	6838      	ldr	r0, [r7, #0]
 800c076:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800c07a:	4605      	mov	r5, r0
 800c07c:	6838      	ldr	r0, [r7, #0]
 800c07e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800c082:	9005      	str	r0, [sp, #20]
 800c084:	9504      	str	r5, [sp, #16]
 800c086:	9103      	str	r1, [sp, #12]
 800c088:	9402      	str	r4, [sp, #8]
 800c08a:	9201      	str	r2, [sp, #4]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <OnRxData+0x144>)
 800c090:	2200      	movs	r2, #0
 800c092:	2100      	movs	r1, #0
 800c094:	2003      	movs	r0, #3
 800c096:	f011 f867 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000768 	.word	0x20000768
 800c0a8:	2000074e 	.word	0x2000074e
 800c0ac:	0801d98c 	.word	0x0801d98c
 800c0b0:	48000400 	.word	0x48000400
 800c0b4:	0801d998 	.word	0x0801d998
 800c0b8:	20000010 	.word	0x20000010
 800c0bc:	0801d9a4 	.word	0x0801d9a4

0800c0c0 <SendTxData>:

static void SendTxData(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08c      	sub	sp, #48	; 0x30
 800c0c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c0c6:	23ff      	movs	r3, #255	; 0xff
 800c0c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800c0cc:	f7f6 fa58 	bl	8002580 <GetBatteryLevel>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800c0e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	4b9f      	ldr	r3, [pc, #636]	; (800c368 <SendTxData+0x2a8>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	2002      	movs	r0, #2
 800c0f0:	f011 f83a 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f4 fe22 	bl	8000d40 <__aeabi_f2iz>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	b21b      	sxth	r3, r3
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	4b9a      	ldr	r3, [pc, #616]	; (800c36c <SendTxData+0x2ac>)
 800c104:	2201      	movs	r2, #1
 800c106:	2100      	movs	r1, #0
 800c108:	2002      	movs	r0, #2
 800c10a:	f011 f82d 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800c10e:	4b98      	ldr	r3, [pc, #608]	; (800c370 <SendTxData+0x2b0>)
 800c110:	2202      	movs	r2, #2
 800c112:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM1/100;
 800c114:	4b97      	ldr	r3, [pc, #604]	; (800c374 <SendTxData+0x2b4>)
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	4a97      	ldr	r2, [pc, #604]	; (800c378 <SendTxData+0x2b8>)
 800c11a:	fba2 2303 	umull	r2, r3, r2, r3
 800c11e:	095b      	lsrs	r3, r3, #5
 800c120:	b298      	uxth	r0, r3
 800c122:	4b93      	ldr	r3, [pc, #588]	; (800c370 <SendTxData+0x2b0>)
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	1c59      	adds	r1, r3, #1
 800c12a:	61f9      	str	r1, [r7, #28]
 800c12c:	4413      	add	r3, r2
 800c12e:	b2c2      	uxtb	r2, r0
 800c130:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM1%100;
 800c132:	4b90      	ldr	r3, [pc, #576]	; (800c374 <SendTxData+0x2b4>)
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	4a90      	ldr	r2, [pc, #576]	; (800c378 <SendTxData+0x2b8>)
 800c138:	fba2 1203 	umull	r1, r2, r2, r3
 800c13c:	0952      	lsrs	r2, r2, #5
 800c13e:	2164      	movs	r1, #100	; 0x64
 800c140:	fb01 f202 	mul.w	r2, r1, r2
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	b298      	uxth	r0, r3
 800c148:	4b89      	ldr	r3, [pc, #548]	; (800c370 <SendTxData+0x2b0>)
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	1c59      	adds	r1, r3, #1
 800c150:	61f9      	str	r1, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	b2c2      	uxtb	r2, r0
 800c156:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5/100;
 800c158:	4b88      	ldr	r3, [pc, #544]	; (800c37c <SendTxData+0x2bc>)
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	4a86      	ldr	r2, [pc, #536]	; (800c378 <SendTxData+0x2b8>)
 800c15e:	fba2 2303 	umull	r2, r3, r2, r3
 800c162:	095b      	lsrs	r3, r3, #5
 800c164:	b298      	uxth	r0, r3
 800c166:	4b82      	ldr	r3, [pc, #520]	; (800c370 <SendTxData+0x2b0>)
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	1c59      	adds	r1, r3, #1
 800c16e:	61f9      	str	r1, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	b2c2      	uxtb	r2, r0
 800c174:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800c176:	4b81      	ldr	r3, [pc, #516]	; (800c37c <SendTxData+0x2bc>)
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	4a7f      	ldr	r2, [pc, #508]	; (800c378 <SendTxData+0x2b8>)
 800c17c:	fba2 1203 	umull	r1, r2, r2, r3
 800c180:	0952      	lsrs	r2, r2, #5
 800c182:	2164      	movs	r1, #100	; 0x64
 800c184:	fb01 f202 	mul.w	r2, r1, r2
 800c188:	1a9b      	subs	r3, r3, r2
 800c18a:	b298      	uxth	r0, r3
 800c18c:	4b78      	ldr	r3, [pc, #480]	; (800c370 <SendTxData+0x2b0>)
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	1c59      	adds	r1, r3, #1
 800c194:	61f9      	str	r1, [r7, #28]
 800c196:	4413      	add	r3, r2
 800c198:	b2c2      	uxtb	r2, r0
 800c19a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM10/100;
 800c19c:	4b78      	ldr	r3, [pc, #480]	; (800c380 <SendTxData+0x2c0>)
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	4a75      	ldr	r2, [pc, #468]	; (800c378 <SendTxData+0x2b8>)
 800c1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a6:	095b      	lsrs	r3, r3, #5
 800c1a8:	b298      	uxth	r0, r3
 800c1aa:	4b71      	ldr	r3, [pc, #452]	; (800c370 <SendTxData+0x2b0>)
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	1c59      	adds	r1, r3, #1
 800c1b2:	61f9      	str	r1, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	b2c2      	uxtb	r2, r0
 800c1b8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM10%100;
 800c1ba:	4b71      	ldr	r3, [pc, #452]	; (800c380 <SendTxData+0x2c0>)
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	4a6e      	ldr	r2, [pc, #440]	; (800c378 <SendTxData+0x2b8>)
 800c1c0:	fba2 1203 	umull	r1, r2, r2, r3
 800c1c4:	0952      	lsrs	r2, r2, #5
 800c1c6:	2164      	movs	r1, #100	; 0x64
 800c1c8:	fb01 f202 	mul.w	r2, r1, r2
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	b298      	uxth	r0, r3
 800c1d0:	4b67      	ldr	r3, [pc, #412]	; (800c370 <SendTxData+0x2b0>)
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	1c59      	adds	r1, r3, #1
 800c1d8:	61f9      	str	r1, [r7, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	b2c2      	uxtb	r2, r0
 800c1de:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800c1e0:	4b68      	ldr	r3, [pc, #416]	; (800c384 <SendTxData+0x2c4>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7f4 f933 	bl	8000450 <__aeabi_f2d>
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	4b66      	ldr	r3, [pc, #408]	; (800c388 <SendTxData+0x2c8>)
 800c1f0:	f7f4 f986 	bl	8000500 <__aeabi_dmul>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f7f4 fc1a 	bl	8000a34 <__aeabi_d2iz>
 800c200:	4603      	mov	r3, r0
 800c202:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c208:	4a5b      	ldr	r2, [pc, #364]	; (800c378 <SendTxData+0x2b8>)
 800c20a:	fb82 1203 	smull	r1, r2, r2, r3
 800c20e:	1152      	asrs	r2, r2, #5
 800c210:	17db      	asrs	r3, r3, #31
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b218      	sxth	r0, r3
 800c216:	4b56      	ldr	r3, [pc, #344]	; (800c370 <SendTxData+0x2b0>)
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	1c59      	adds	r1, r3, #1
 800c21e:	61f9      	str	r1, [r7, #28]
 800c220:	4413      	add	r3, r2
 800c222:	b2c2      	uxtb	r2, r0
 800c224:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c226:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c22a:	4a53      	ldr	r2, [pc, #332]	; (800c378 <SendTxData+0x2b8>)
 800c22c:	fb82 1203 	smull	r1, r2, r2, r3
 800c230:	1151      	asrs	r1, r2, #5
 800c232:	17da      	asrs	r2, r3, #31
 800c234:	1a8a      	subs	r2, r1, r2
 800c236:	2164      	movs	r1, #100	; 0x64
 800c238:	fb01 f202 	mul.w	r2, r1, r2
 800c23c:	1a9b      	subs	r3, r3, r2
 800c23e:	b218      	sxth	r0, r3
 800c240:	4b4b      	ldr	r3, [pc, #300]	; (800c370 <SendTxData+0x2b0>)
 800c242:	685a      	ldr	r2, [r3, #4]
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	1c59      	adds	r1, r3, #1
 800c248:	61f9      	str	r1, [r7, #28]
 800c24a:	4413      	add	r3, r2
 800c24c:	b2c2      	uxtb	r2, r0
 800c24e:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800c250:	4b4e      	ldr	r3, [pc, #312]	; (800c38c <SendTxData+0x2cc>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4618      	mov	r0, r3
 800c256:	f7f4 f8fb 	bl	8000450 <__aeabi_f2d>
 800c25a:	f04f 0200 	mov.w	r2, #0
 800c25e:	4b4a      	ldr	r3, [pc, #296]	; (800c388 <SendTxData+0x2c8>)
 800c260:	f7f4 f94e 	bl	8000500 <__aeabi_dmul>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4610      	mov	r0, r2
 800c26a:	4619      	mov	r1, r3
 800c26c:	f7f4 fbe2 	bl	8000a34 <__aeabi_d2iz>
 800c270:	4603      	mov	r3, r0
 800c272:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c274:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c278:	4a3f      	ldr	r2, [pc, #252]	; (800c378 <SendTxData+0x2b8>)
 800c27a:	fb82 1203 	smull	r1, r2, r2, r3
 800c27e:	1152      	asrs	r2, r2, #5
 800c280:	17db      	asrs	r3, r3, #31
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	b218      	sxth	r0, r3
 800c286:	4b3a      	ldr	r3, [pc, #232]	; (800c370 <SendTxData+0x2b0>)
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	1c59      	adds	r1, r3, #1
 800c28e:	61f9      	str	r1, [r7, #28]
 800c290:	4413      	add	r3, r2
 800c292:	b2c2      	uxtb	r2, r0
 800c294:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c296:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c29a:	4a37      	ldr	r2, [pc, #220]	; (800c378 <SendTxData+0x2b8>)
 800c29c:	fb82 1203 	smull	r1, r2, r2, r3
 800c2a0:	1151      	asrs	r1, r2, #5
 800c2a2:	17da      	asrs	r2, r3, #31
 800c2a4:	1a8a      	subs	r2, r1, r2
 800c2a6:	2164      	movs	r1, #100	; 0x64
 800c2a8:	fb01 f202 	mul.w	r2, r1, r2
 800c2ac:	1a9b      	subs	r3, r3, r2
 800c2ae:	b218      	sxth	r0, r3
 800c2b0:	4b2f      	ldr	r3, [pc, #188]	; (800c370 <SendTxData+0x2b0>)
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	1c59      	adds	r1, r3, #1
 800c2b8:	61f9      	str	r1, [r7, #28]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	b2c2      	uxtb	r2, r0
 800c2be:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	4b2a      	ldr	r3, [pc, #168]	; (800c370 <SendTxData+0x2b0>)
 800c2c6:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c2c8:	4b31      	ldr	r3, [pc, #196]	; (800c390 <SendTxData+0x2d0>)
 800c2ca:	7a5b      	ldrb	r3, [r3, #9]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d007      	beq.n	800c2e0 <SendTxData+0x220>
 800c2d0:	f002 f9e4 	bl	800e69c <LmHandlerJoinStatus>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d102      	bne.n	800c2e0 <SendTxData+0x220>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c2da:	482d      	ldr	r0, [pc, #180]	; (800c390 <SendTxData+0x2d0>)
 800c2dc:	f010 fd3a 	bl	801cd54 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c2e0:	4b2c      	ldr	r3, [pc, #176]	; (800c394 <SendTxData+0x2d4>)
 800c2e2:	78db      	ldrb	r3, [r3, #3]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4821      	ldr	r0, [pc, #132]	; (800c370 <SendTxData+0x2b0>)
 800c2ea:	f002 f9f3 	bl	800e6d4 <LmHandlerSend>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c2f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <SendTxData+0x24a>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800c2fc:	4b26      	ldr	r3, [pc, #152]	; (800c398 <SendTxData+0x2d8>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	2100      	movs	r1, #0
 800c302:	2001      	movs	r0, #1
 800c304:	f010 ff30 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
 800c308:	e016      	b.n	800c338 <SendTxData+0x278>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c30a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c30e:	f113 0f06 	cmn.w	r3, #6
 800c312:	d111      	bne.n	800c338 <SendTxData+0x278>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c314:	f002 f914 	bl	800e540 <LmHandlerGetDutyCycleWaitTime>
 800c318:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <SendTxData+0x278>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	4a1e      	ldr	r2, [pc, #120]	; (800c39c <SendTxData+0x2dc>)
 800c324:	fba2 2303 	umull	r2, r3, r2, r3
 800c328:	099b      	lsrs	r3, r3, #6
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <SendTxData+0x2e0>)
 800c32e:	2201      	movs	r2, #1
 800c330:	2100      	movs	r1, #0
 800c332:	2001      	movs	r0, #1
 800c334:	f010 ff18 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800c338:	4b1a      	ldr	r3, [pc, #104]	; (800c3a4 <SendTxData+0x2e4>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10f      	bne.n	800c360 <SendTxData+0x2a0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c340:	4819      	ldr	r0, [pc, #100]	; (800c3a8 <SendTxData+0x2e8>)
 800c342:	f010 fd07 	bl	801cd54 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c346:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <SendTxData+0x2ec>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	4293      	cmp	r3, r2
 800c34e:	bf38      	it	cc
 800c350:	4613      	movcc	r3, r2
 800c352:	4619      	mov	r1, r3
 800c354:	4814      	ldr	r0, [pc, #80]	; (800c3a8 <SendTxData+0x2e8>)
 800c356:	f010 fd6d 	bl	801ce34 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c35a:	4813      	ldr	r0, [pc, #76]	; (800c3a8 <SendTxData+0x2e8>)
 800c35c:	f010 fc8c 	bl	801cc78 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c360:	bf00      	nop
 800c362:	3728      	adds	r7, #40	; 0x28
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	0801d9ec 	.word	0x0801d9ec
 800c36c:	0801d9f8 	.word	0x0801d9f8
 800c370:	20000094 	.word	0x20000094
 800c374:	20000260 	.word	0x20000260
 800c378:	51eb851f 	.word	0x51eb851f
 800c37c:	2000025c 	.word	0x2000025c
 800c380:	20000264 	.word	0x20000264
 800c384:	20000268 	.word	0x20000268
 800c388:	40590000 	.word	0x40590000
 800c38c:	2000026c 	.word	0x2000026c
 800c390:	20000780 	.word	0x20000780
 800c394:	20000078 	.word	0x20000078
 800c398:	0801da04 	.word	0x0801da04
 800c39c:	10624dd3 	.word	0x10624dd3
 800c3a0:	0801da14 	.word	0x0801da14
 800c3a4:	20000628 	.word	0x20000628
 800c3a8:	2000062c 	.word	0x2000062c
 800c3ac:	20000090 	.word	0x20000090

0800c3b0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	2002      	movs	r0, #2
 800c3bc:	f010 fba4 	bl	801cb08 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c3c0:	4803      	ldr	r0, [pc, #12]	; (800c3d0 <OnTxTimerEvent+0x20>)
 800c3c2:	f010 fc59 	bl	801cc78 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	2000062c 	.word	0x2000062c

0800c3d4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bc80      	pop	{r7}
 800c3e4:	4770      	bx	lr

0800c3e6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800c3ee:	bf00      	nop
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bc80      	pop	{r7}
 800c3f6:	4770      	bx	lr

0800c3f8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	bc80      	pop	{r7}
 800c408:	4770      	bx	lr
	...

0800c40c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af04      	add	r7, sp, #16
 800c412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d041      	beq.n	800c49e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d03d      	beq.n	800c49e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800c422:	4821      	ldr	r0, [pc, #132]	; (800c4a8 <OnTxData+0x9c>)
 800c424:	f010 fc28 	bl	801cc78 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800c428:	4b20      	ldr	r3, [pc, #128]	; (800c4ac <OnTxData+0xa0>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	2002      	movs	r0, #2
 800c430:	f010 fe9a 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	7c12      	ldrb	r2, [r2, #16]
 800c43c:	4611      	mov	r1, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800c444:	4610      	mov	r0, r2
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800c44c:	9203      	str	r2, [sp, #12]
 800c44e:	9002      	str	r0, [sp, #8]
 800c450:	9101      	str	r1, [sp, #4]
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	4b16      	ldr	r3, [pc, #88]	; (800c4b0 <OnTxData+0xa4>)
 800c456:	2200      	movs	r2, #0
 800c458:	2100      	movs	r1, #0
 800c45a:	2003      	movs	r0, #3
 800c45c:	f010 fe84 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800c460:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <OnTxData+0xa8>)
 800c462:	2200      	movs	r2, #0
 800c464:	2100      	movs	r1, #0
 800c466:	2003      	movs	r0, #3
 800c468:	f010 fe7e 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7a1b      	ldrb	r3, [r3, #8]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d10e      	bne.n	800c492 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	7a5b      	ldrb	r3, [r3, #9]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <OnTxData+0x74>
 800c47c:	4b0e      	ldr	r3, [pc, #56]	; (800c4b8 <OnTxData+0xac>)
 800c47e:	e000      	b.n	800c482 <OnTxData+0x76>
 800c480:	4b0e      	ldr	r3, [pc, #56]	; (800c4bc <OnTxData+0xb0>)
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <OnTxData+0xb4>)
 800c486:	2200      	movs	r2, #0
 800c488:	2100      	movs	r1, #0
 800c48a:	2003      	movs	r0, #3
 800c48c:	f010 fe6c 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c490:	e005      	b.n	800c49e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800c492:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <OnTxData+0xb8>)
 800c494:	2200      	movs	r2, #0
 800c496:	2100      	movs	r1, #0
 800c498:	2003      	movs	r0, #3
 800c49a:	f010 fe65 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000750 	.word	0x20000750
 800c4ac:	0801da34 	.word	0x0801da34
 800c4b0:	0801da68 	.word	0x0801da68
 800c4b4:	0801da9c 	.word	0x0801da9c
 800c4b8:	0801daac 	.word	0x0801daac
 800c4bc:	0801dab0 	.word	0x0801dab0
 800c4c0:	0801dab8 	.word	0x0801dab8
 800c4c4:	0801dacc 	.word	0x0801dacc

0800c4c8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d035      	beq.n	800c542 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d11a      	bne.n	800c516 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800c4e0:	481a      	ldr	r0, [pc, #104]	; (800c54c <OnJoinRequest+0x84>)
 800c4e2:	f010 fc37 	bl	801cd54 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c4e6:	4b1a      	ldr	r3, [pc, #104]	; (800c550 <OnJoinRequest+0x88>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	2002      	movs	r0, #2
 800c4ee:	f010 fe3b 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	79db      	ldrb	r3, [r3, #7]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d106      	bne.n	800c508 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c4fa:	4b16      	ldr	r3, [pc, #88]	; (800c554 <OnJoinRequest+0x8c>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	2002      	movs	r0, #2
 800c502:	f010 fe31 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c506:	e01c      	b.n	800c542 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c508:	4b13      	ldr	r3, [pc, #76]	; (800c558 <OnJoinRequest+0x90>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	2100      	movs	r1, #0
 800c50e:	2002      	movs	r0, #2
 800c510:	f010 fe2a 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800c514:	e015      	b.n	800c542 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c516:	4b11      	ldr	r3, [pc, #68]	; (800c55c <OnJoinRequest+0x94>)
 800c518:	2200      	movs	r2, #0
 800c51a:	2100      	movs	r1, #0
 800c51c:	2002      	movs	r0, #2
 800c51e:	f010 fe23 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	79db      	ldrb	r3, [r3, #7]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d10b      	bne.n	800c542 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c52a:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <OnJoinRequest+0x98>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	2100      	movs	r1, #0
 800c530:	2002      	movs	r0, #2
 800c532:	f010 fe19 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c536:	4b0b      	ldr	r3, [pc, #44]	; (800c564 <OnJoinRequest+0x9c>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2101      	movs	r1, #1
 800c53c:	4618      	mov	r0, r3
 800c53e:	f002 f809 	bl	800e554 <LmHandlerJoin>
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000780 	.word	0x20000780
 800c550:	0801dadc 	.word	0x0801dadc
 800c554:	0801daf4 	.word	0x0801daf4
 800c558:	0801db14 	.word	0x0801db14
 800c55c:	0801db34 	.word	0x0801db34
 800c560:	0801db50 	.word	0x0801db50
 800c564:	20000028 	.word	0x20000028

0800c568 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c56a:	b093      	sub	sp, #76	; 0x4c
 800c56c:	af0c      	add	r7, sp, #48	; 0x30
 800c56e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d056      	beq.n	800c624 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d008      	beq.n	800c590 <OnBeaconStatusChange+0x28>
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d049      	beq.n	800c616 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c582:	4b2a      	ldr	r3, [pc, #168]	; (800c62c <OnBeaconStatusChange+0xc4>)
 800c584:	2200      	movs	r2, #0
 800c586:	2100      	movs	r1, #0
 800c588:	2002      	movs	r0, #2
 800c58a:	f010 fded 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c58e:	e049      	b.n	800c624 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	7c1b      	ldrb	r3, [r3, #16]
 800c594:	4618      	mov	r0, r3
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c59c:	461c      	mov	r4, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c5a4:	461d      	mov	r5, r3
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	6852      	ldr	r2, [r2, #4]
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	7d49      	ldrb	r1, [r1, #21]
 800c5b2:	460e      	mov	r6, r1
 800c5b4:	6979      	ldr	r1, [r7, #20]
 800c5b6:	7d89      	ldrb	r1, [r1, #22]
 800c5b8:	6139      	str	r1, [r7, #16]
 800c5ba:	6979      	ldr	r1, [r7, #20]
 800c5bc:	7dc9      	ldrb	r1, [r1, #23]
 800c5be:	60f9      	str	r1, [r7, #12]
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	7e09      	ldrb	r1, [r1, #24]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	6979      	ldr	r1, [r7, #20]
 800c5c8:	7e49      	ldrb	r1, [r1, #25]
 800c5ca:	6079      	str	r1, [r7, #4]
 800c5cc:	6979      	ldr	r1, [r7, #20]
 800c5ce:	7e89      	ldrb	r1, [r1, #26]
 800c5d0:	6039      	str	r1, [r7, #0]
 800c5d2:	6979      	ldr	r1, [r7, #20]
 800c5d4:	7ec9      	ldrb	r1, [r1, #27]
 800c5d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800c5d8:	f8d7 c000 	ldr.w	ip, [r7]
 800c5dc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c5e0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c5e4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c5e8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c5ec:	f8cd c020 	str.w	ip, [sp, #32]
 800c5f0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c5f4:	f8cd c01c 	str.w	ip, [sp, #28]
 800c5f8:	6939      	ldr	r1, [r7, #16]
 800c5fa:	9106      	str	r1, [sp, #24]
 800c5fc:	9605      	str	r6, [sp, #20]
 800c5fe:	9204      	str	r2, [sp, #16]
 800c600:	9303      	str	r3, [sp, #12]
 800c602:	9502      	str	r5, [sp, #8]
 800c604:	9401      	str	r4, [sp, #4]
 800c606:	9000      	str	r0, [sp, #0]
 800c608:	4b09      	ldr	r3, [pc, #36]	; (800c630 <OnBeaconStatusChange+0xc8>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	2100      	movs	r1, #0
 800c60e:	2002      	movs	r0, #2
 800c610:	f010 fdaa 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c614:	e006      	b.n	800c624 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c616:	4b07      	ldr	r3, [pc, #28]	; (800c634 <OnBeaconStatusChange+0xcc>)
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	2002      	movs	r0, #2
 800c61e:	f010 fda3 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c622:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c624:	bf00      	nop
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62c:	0801db74 	.word	0x0801db74
 800c630:	0801db8c 	.word	0x0801db8c
 800c634:	0801dc00 	.word	0x0801dc00

0800c638 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c638:	b480      	push	{r7}
 800c63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c63c:	bf00      	nop
 800c63e:	46bd      	mov	sp, r7
 800c640:	bc80      	pop	{r7}
 800c642:	4770      	bx	lr

0800c644 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af02      	add	r7, sp, #8
 800c64a:	4603      	mov	r3, r0
 800c64c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	4a06      	ldr	r2, [pc, #24]	; (800c66c <OnClassChange+0x28>)
 800c652:	5cd3      	ldrb	r3, [r2, r3]
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	4b06      	ldr	r3, [pc, #24]	; (800c670 <OnClassChange+0x2c>)
 800c658:	2200      	movs	r2, #0
 800c65a:	2100      	movs	r1, #0
 800c65c:	2002      	movs	r0, #2
 800c65e:	f010 fd83 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800c662:	bf00      	nop
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	0801dc3c 	.word	0x0801dc3c
 800c670:	0801dc20 	.word	0x0801dc20

0800c674 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c678:	2100      	movs	r1, #0
 800c67a:	2001      	movs	r0, #1
 800c67c:	f010 fa44 	bl	801cb08 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c680:	bf00      	nop
 800c682:	bd80      	pop	{r7, pc}

0800c684 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c68c:	4a0d      	ldr	r2, [pc, #52]	; (800c6c4 <OnTxPeriodicityChanged+0x40>)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c692:	4b0c      	ldr	r3, [pc, #48]	; (800c6c4 <OnTxPeriodicityChanged+0x40>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d103      	bne.n	800c6a2 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c69a:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <OnTxPeriodicityChanged+0x40>)
 800c69c:	f242 7210 	movw	r2, #10000	; 0x2710
 800c6a0:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c6a2:	4809      	ldr	r0, [pc, #36]	; (800c6c8 <OnTxPeriodicityChanged+0x44>)
 800c6a4:	f010 fb56 	bl	801cd54 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c6a8:	4b06      	ldr	r3, [pc, #24]	; (800c6c4 <OnTxPeriodicityChanged+0x40>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4806      	ldr	r0, [pc, #24]	; (800c6c8 <OnTxPeriodicityChanged+0x44>)
 800c6b0:	f010 fbc0 	bl	801ce34 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c6b4:	4804      	ldr	r0, [pc, #16]	; (800c6c8 <OnTxPeriodicityChanged+0x44>)
 800c6b6:	f010 fadf 	bl	801cc78 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20000090 	.word	0x20000090
 800c6c8:	2000062c 	.word	0x2000062c

0800c6cc <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c6d6:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <OnTxFrameCtrlChanged+0x1c>)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	20000078 	.word	0x20000078

0800c6ec <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c6f6:	4a04      	ldr	r2, [pc, #16]	; (800c708 <OnPingSlotPeriodicityChanged+0x1c>)
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	bc80      	pop	{r7}
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	20000078 	.word	0x20000078

0800c70c <OnSystemReset>:

static void OnSystemReset(void)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c710:	f002 fd11 	bl	800f136 <LmHandlerHalt>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <OnSystemReset+0x1c>
 800c71a:	f001 ffbf 	bl	800e69c <LmHandlerJoinStatus>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b01      	cmp	r3, #1
 800c722:	d101      	bne.n	800c728 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c724:	f7ff fb20 	bl	800bd68 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <StopJoin>:

static void StopJoin(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c730:	4817      	ldr	r0, [pc, #92]	; (800c790 <StopJoin+0x64>)
 800c732:	f010 fb0f 	bl	801cd54 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c736:	f002 fcf1 	bl	800f11c <LmHandlerStop>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d006      	beq.n	800c74e <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800c740:	4b14      	ldr	r3, [pc, #80]	; (800c794 <StopJoin+0x68>)
 800c742:	2200      	movs	r2, #0
 800c744:	2100      	movs	r1, #0
 800c746:	2002      	movs	r0, #2
 800c748:	f010 fd0e 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
 800c74c:	e01a      	b.n	800c784 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800c74e:	4b12      	ldr	r3, [pc, #72]	; (800c798 <StopJoin+0x6c>)
 800c750:	2200      	movs	r2, #0
 800c752:	2100      	movs	r1, #0
 800c754:	2002      	movs	r0, #2
 800c756:	f010 fd07 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c75a:	4b10      	ldr	r3, [pc, #64]	; (800c79c <StopJoin+0x70>)
 800c75c:	2201      	movs	r2, #1
 800c75e:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800c760:	4b0f      	ldr	r3, [pc, #60]	; (800c7a0 <StopJoin+0x74>)
 800c762:	2200      	movs	r2, #0
 800c764:	2100      	movs	r1, #0
 800c766:	2002      	movs	r0, #2
 800c768:	f010 fcfe 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c76c:	480d      	ldr	r0, [pc, #52]	; (800c7a4 <StopJoin+0x78>)
 800c76e:	f001 fe23 	bl	800e3b8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c772:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <StopJoin+0x70>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2101      	movs	r1, #1
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 feeb 	bl	800e554 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c77e:	4804      	ldr	r0, [pc, #16]	; (800c790 <StopJoin+0x64>)
 800c780:	f010 fa7a 	bl	801cc78 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c784:	4808      	ldr	r0, [pc, #32]	; (800c7a8 <StopJoin+0x7c>)
 800c786:	f010 fa77 	bl	801cc78 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c78a:	bf00      	nop
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	2000062c 	.word	0x2000062c
 800c794:	0801dc40 	.word	0x0801dc40
 800c798:	0801dc60 	.word	0x0801dc60
 800c79c:	20000028 	.word	0x20000028
 800c7a0:	0801dc74 	.word	0x0801dc74
 800c7a4:	20000078 	.word	0x20000078
 800c7a8:	20000644 	.word	0x20000644

0800c7ac <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c7b4:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <OnStopJoinTimerEvent+0x20>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d103      	bne.n	800c7c4 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c7bc:	2100      	movs	r1, #0
 800c7be:	2008      	movs	r0, #8
 800c7c0:	f010 f9a2 	bl	801cb08 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c7c4:	bf00      	nop
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20000028 	.word	0x20000028

0800c7d0 <StoreContext>:

static void StoreContext(void)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c7d6:	23ff      	movs	r3, #255	; 0xff
 800c7d8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c7da:	f002 fce1 	bl	800f1a0 <LmHandlerNvmDataStore>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800c7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7e6:	f113 0f08 	cmn.w	r3, #8
 800c7ea:	d106      	bne.n	800c7fa <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <StoreContext+0x48>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	2002      	movs	r0, #2
 800c7f4:	f010 fcb8 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c7f8:	e00a      	b.n	800c810 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d105      	bne.n	800c810 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c804:	4b05      	ldr	r3, [pc, #20]	; (800c81c <StoreContext+0x4c>)
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	2002      	movs	r0, #2
 800c80c:	f010 fcac 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	0801dc94 	.word	0x0801dc94
 800c81c:	0801dcac 	.word	0x0801dcac

0800c820 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d106      	bne.n	800c83e <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c830:	4b08      	ldr	r3, [pc, #32]	; (800c854 <OnNvmDataChange+0x34>)
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	2002      	movs	r0, #2
 800c838:	f010 fc96 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c83c:	e005      	b.n	800c84a <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c83e:	4b06      	ldr	r3, [pc, #24]	; (800c858 <OnNvmDataChange+0x38>)
 800c840:	2200      	movs	r2, #0
 800c842:	2100      	movs	r1, #0
 800c844:	2002      	movs	r0, #2
 800c846:	f010 fc8f 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	0801dcc4 	.word	0x0801dcc4
 800c858:	0801dcd8 	.word	0x0801dcd8

0800c85c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c86a:	4807      	ldr	r0, [pc, #28]	; (800c888 <OnStoreContextRequest+0x2c>)
 800c86c:	f7f4 fdbe 	bl	80013ec <FLASH_IF_Erase>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d104      	bne.n	800c880 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	4803      	ldr	r0, [pc, #12]	; (800c888 <OnStoreContextRequest+0x2c>)
 800c87c:	f7f4 fd66 	bl	800134c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	0803f000 	.word	0x0803f000

0800c88c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	4903      	ldr	r1, [pc, #12]	; (800c8a8 <OnRestoreContextRequest+0x1c>)
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7f4 fd7e 	bl	800139c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	0803f000 	.word	0x0803f000

0800c8ac <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c8b0:	4b15      	ldr	r3, [pc, #84]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c8bc:	4b12      	ldr	r3, [pc, #72]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c8c2:	4b11      	ldr	r3, [pc, #68]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c8c8:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f043 0320 	orr.w	r3, r3, #32
 800c8d0:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8d2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10c      	bne.n	800c8f6 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c8dc:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <LoraInfo_Init+0x60>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	f010 fc40 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c8e8:	bf00      	nop
 800c8ea:	f010 fc2b 	bl	801d144 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d1fa      	bne.n	800c8ea <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c8f4:	e7fe      	b.n	800c8f4 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c8f6:	4b04      	ldr	r3, [pc, #16]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800c8fc:	4b02      	ldr	r3, [pc, #8]	; (800c908 <LoraInfo_Init+0x5c>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c902:	bf00      	nop
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20000798 	.word	0x20000798
 800c90c:	0801dcec 	.word	0x0801dcec

0800c910 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c910:	b480      	push	{r7}
 800c912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c914:	4b02      	ldr	r3, [pc, #8]	; (800c920 <LoraInfo_GetPtr+0x10>)
}
 800c916:	4618      	mov	r0, r3
 800c918:	46bd      	mov	sp, r7
 800c91a:	bc80      	pop	{r7}
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20000798 	.word	0x20000798

0800c924 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c928:	f7f6 fe6b 	bl	8003602 <BSP_RADIO_Init>
 800c92c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c92e:	4618      	mov	r0, r3
 800c930:	bd80      	pop	{r7, pc}

0800c932 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	4603      	mov	r3, r0
 800c93a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c93c:	79fb      	ldrb	r3, [r7, #7]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f6 fe90 	bl	8003664 <BSP_RADIO_ConfigRFSwitch>
 800c944:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c952:	f7f6 fed5 	bl	8003700 <BSP_RADIO_GetTxConfig>
 800c956:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c958:	4618      	mov	r0, r3
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c960:	f7f6 fed5 	bl	800370e <BSP_RADIO_IsTCXO>
 800c964:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c966:	4618      	mov	r0, r3
 800c968:	bd80      	pop	{r7, pc}

0800c96a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c96e:	f7f6 fed5 	bl	800371c <BSP_RADIO_IsDCDC>
 800c972:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c974:	4618      	mov	r0, r3
 800c976:	bd80      	pop	{r7, pc}

0800c978 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	4618      	mov	r0, r3
 800c986:	f7f6 fed0 	bl	800372a <BSP_RADIO_GetRFOMaxPowerConfig>
 800c98a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	33f1      	adds	r3, #241	; 0xf1
 800c9a0:	2210      	movs	r2, #16
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f00c f875 	bl	8018a94 <memset1>
    ctx->M_n = 0;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	22f0      	movs	r2, #240	; 0xf0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f00c f86b 	bl	8018a94 <memset1>
}
 800c9be:	bf00      	nop
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	2110      	movs	r1, #16
 800c9d6:	6838      	ldr	r0, [r7, #0]
 800c9d8:	f000 fe5c 	bl	800d694 <lorawan_aes_set_key>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08c      	sub	sp, #48	; 0x30
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 80a1 	beq.w	800cb3e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ca02:	f1c3 0310 	rsb	r3, r3, #16
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	bf28      	it	cs
 800ca0c:	4613      	movcs	r3, r2
 800ca0e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ca1c:	4413      	add	r3, r2
 800ca1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca20:	b292      	uxth	r2, r2
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f00b fffa 	bl	8018a1e <memcpy1>
        ctx->M_n += mlen;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	441a      	add	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ca40:	2b0f      	cmp	r3, #15
 800ca42:	f240 808d 	bls.w	800cb60 <AES_CMAC_Update+0x17c>
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	f000 8088 	beq.w	800cb60 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ca50:	2300      	movs	r3, #0
 800ca52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca54:	e015      	b.n	800ca82 <AES_CMAC_Update+0x9e>
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	4413      	add	r3, r2
 800ca5c:	33f1      	adds	r3, #241	; 0xf1
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	68f9      	ldr	r1, [r7, #12]
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	440b      	add	r3, r1
 800ca66:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	4053      	eors	r3, r2
 800ca6e:	b2d9      	uxtb	r1, r3
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	4413      	add	r3, r2
 800ca76:	33f1      	adds	r3, #241	; 0xf1
 800ca78:	460a      	mov	r2, r1
 800ca7a:	701a      	strb	r2, [r3, #0]
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	3301      	adds	r3, #1
 800ca80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	2b0f      	cmp	r3, #15
 800ca86:	dde6      	ble.n	800ca56 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ca8e:	f107 0314 	add.w	r3, r7, #20
 800ca92:	2210      	movs	r2, #16
 800ca94:	4618      	mov	r0, r3
 800ca96:	f00b ffc2 	bl	8018a1e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	f107 0114 	add.w	r1, r7, #20
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fed3 	bl	800d850 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	33f1      	adds	r3, #241	; 0xf1
 800caae:	f107 0114 	add.w	r1, r7, #20
 800cab2:	2210      	movs	r2, #16
 800cab4:	4618      	mov	r0, r3
 800cab6:	f00b ffb2 	bl	8018a1e <memcpy1>

        data += mlen;
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabe:	4413      	add	r3, r2
 800cac0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800caca:	e038      	b.n	800cb3e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800cacc:	2300      	movs	r3, #0
 800cace:	62bb      	str	r3, [r7, #40]	; 0x28
 800cad0:	e013      	b.n	800cafa <AES_CMAC_Update+0x116>
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	4413      	add	r3, r2
 800cad8:	33f1      	adds	r3, #241	; 0xf1
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	440b      	add	r3, r1
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	4053      	eors	r3, r2
 800cae6:	b2d9      	uxtb	r1, r3
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	4413      	add	r3, r2
 800caee:	33f1      	adds	r3, #241	; 0xf1
 800caf0:	460a      	mov	r2, r1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	3301      	adds	r3, #1
 800caf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	2b0f      	cmp	r3, #15
 800cafe:	dde8      	ble.n	800cad2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cb06:	f107 0314 	add.w	r3, r7, #20
 800cb0a:	2210      	movs	r2, #16
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f00b ff86 	bl	8018a1e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	f107 0114 	add.w	r1, r7, #20
 800cb18:	f107 0314 	add.w	r3, r7, #20
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fe97 	bl	800d850 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	33f1      	adds	r3, #241	; 0xf1
 800cb26:	f107 0114 	add.w	r1, r7, #20
 800cb2a:	2210      	movs	r2, #16
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f00b ff76 	bl	8018a1e <memcpy1>

        data += 16;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	3310      	adds	r3, #16
 800cb36:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3b10      	subs	r3, #16
 800cb3c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b10      	cmp	r3, #16
 800cb42:	d8c3      	bhi.n	800cacc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	b292      	uxth	r2, r2
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f00b ff64 	bl	8018a1e <memcpy1>
    ctx->M_n = len;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cb5e:	e000      	b.n	800cb62 <AES_CMAC_Update+0x17e>
            return;
 800cb60:	bf00      	nop
}
 800cb62:	3730      	adds	r7, #48	; 0x30
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b092      	sub	sp, #72	; 0x48
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800cb72:	f107 031c 	add.w	r3, r7, #28
 800cb76:	2210      	movs	r2, #16
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f00b ff8a 	bl	8018a94 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	f107 011c 	add.w	r1, r7, #28
 800cb86:	f107 031c 	add.w	r3, r7, #28
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fe60 	bl	800d850 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800cb90:	7f3b      	ldrb	r3, [r7, #28]
 800cb92:	b25b      	sxtb	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	da30      	bge.n	800cbfa <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800cb98:	2300      	movs	r3, #0
 800cb9a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb9c:	e01b      	b.n	800cbd6 <AES_CMAC_Final+0x6e>
 800cb9e:	f107 021c 	add.w	r2, r7, #28
 800cba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba4:	4413      	add	r3, r2
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	b25a      	sxtb	r2, r3
 800cbac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbae:	3301      	adds	r3, #1
 800cbb0:	3348      	adds	r3, #72	; 0x48
 800cbb2:	443b      	add	r3, r7
 800cbb4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cbb8:	09db      	lsrs	r3, r3, #7
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	b25b      	sxtb	r3, r3
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	b25b      	sxtb	r3, r3
 800cbc2:	b2d9      	uxtb	r1, r3
 800cbc4:	f107 021c 	add.w	r2, r7, #28
 800cbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbca:	4413      	add	r3, r2
 800cbcc:	460a      	mov	r2, r1
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	647b      	str	r3, [r7, #68]	; 0x44
 800cbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd8:	2b0e      	cmp	r3, #14
 800cbda:	dde0      	ble.n	800cb9e <AES_CMAC_Final+0x36>
 800cbdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800cbe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbec:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800cbf0:	43db      	mvns	r3, r3
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbf8:	e027      	b.n	800cc4a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfe:	e01b      	b.n	800cc38 <AES_CMAC_Final+0xd0>
 800cc00:	f107 021c 	add.w	r2, r7, #28
 800cc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc06:	4413      	add	r3, r2
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	b25a      	sxtb	r2, r3
 800cc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc10:	3301      	adds	r3, #1
 800cc12:	3348      	adds	r3, #72	; 0x48
 800cc14:	443b      	add	r3, r7
 800cc16:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cc1a:	09db      	lsrs	r3, r3, #7
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	b25b      	sxtb	r3, r3
 800cc20:	4313      	orrs	r3, r2
 800cc22:	b25b      	sxtb	r3, r3
 800cc24:	b2d9      	uxtb	r1, r3
 800cc26:	f107 021c 	add.w	r2, r7, #28
 800cc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2c:	4413      	add	r3, r2
 800cc2e:	460a      	mov	r2, r1
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc34:	3301      	adds	r3, #1
 800cc36:	643b      	str	r3, [r7, #64]	; 0x40
 800cc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc3a:	2b0e      	cmp	r3, #14
 800cc3c:	dde0      	ble.n	800cc00 <AES_CMAC_Final+0x98>
 800cc3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cc50:	2b10      	cmp	r3, #16
 800cc52:	d11d      	bne.n	800cc90 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cc54:	2300      	movs	r3, #0
 800cc56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc58:	e016      	b.n	800cc88 <AES_CMAC_Final+0x120>
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5e:	4413      	add	r3, r2
 800cc60:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cc64:	781a      	ldrb	r2, [r3, #0]
 800cc66:	f107 011c 	add.w	r1, r7, #28
 800cc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6c:	440b      	add	r3, r1
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	4053      	eors	r3, r2
 800cc72:	b2d9      	uxtb	r1, r3
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc78:	4413      	add	r3, r2
 800cc7a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cc7e:	460a      	mov	r2, r1
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc84:	3301      	adds	r3, #1
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8a:	2b0f      	cmp	r3, #15
 800cc8c:	dde5      	ble.n	800cc5a <AES_CMAC_Final+0xf2>
 800cc8e:	e096      	b.n	800cdbe <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800cc90:	7f3b      	ldrb	r3, [r7, #28]
 800cc92:	b25b      	sxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	da30      	bge.n	800ccfa <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800cc98:	2300      	movs	r3, #0
 800cc9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc9c:	e01b      	b.n	800ccd6 <AES_CMAC_Final+0x16e>
 800cc9e:	f107 021c 	add.w	r2, r7, #28
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	4413      	add	r3, r2
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	b25a      	sxtb	r2, r3
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	3301      	adds	r3, #1
 800ccb0:	3348      	adds	r3, #72	; 0x48
 800ccb2:	443b      	add	r3, r7
 800ccb4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ccb8:	09db      	lsrs	r3, r3, #7
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	b25b      	sxtb	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	b2d9      	uxtb	r1, r3
 800ccc4:	f107 021c 	add.w	r2, r7, #28
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	4413      	add	r3, r2
 800cccc:	460a      	mov	r2, r1
 800ccce:	701a      	strb	r2, [r3, #0]
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	2b0e      	cmp	r3, #14
 800ccda:	dde0      	ble.n	800cc9e <AES_CMAC_Final+0x136>
 800ccdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800cce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccec:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ccf0:	43db      	mvns	r3, r3
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccf8:	e027      	b.n	800cd4a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccfe:	e01b      	b.n	800cd38 <AES_CMAC_Final+0x1d0>
 800cd00:	f107 021c 	add.w	r2, r7, #28
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	4413      	add	r3, r2
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	b25a      	sxtb	r2, r3
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	3301      	adds	r3, #1
 800cd12:	3348      	adds	r3, #72	; 0x48
 800cd14:	443b      	add	r3, r7
 800cd16:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cd1a:	09db      	lsrs	r3, r3, #7
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	b25b      	sxtb	r3, r3
 800cd20:	4313      	orrs	r3, r2
 800cd22:	b25b      	sxtb	r3, r3
 800cd24:	b2d9      	uxtb	r1, r3
 800cd26:	f107 021c 	add.w	r2, r7, #28
 800cd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2c:	4413      	add	r3, r2
 800cd2e:	460a      	mov	r2, r1
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd34:	3301      	adds	r3, #1
 800cd36:	637b      	str	r3, [r7, #52]	; 0x34
 800cd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3a:	2b0e      	cmp	r3, #14
 800cd3c:	dde0      	ble.n	800cd00 <AES_CMAC_Final+0x198>
 800cd3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	4413      	add	r3, r2
 800cd54:	2280      	movs	r2, #128	; 0x80
 800cd56:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cd5a:	e007      	b.n	800cd6c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	4413      	add	r3, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd80:	2b0f      	cmp	r3, #15
 800cd82:	d9eb      	bls.n	800cd5c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800cd84:	2300      	movs	r3, #0
 800cd86:	633b      	str	r3, [r7, #48]	; 0x30
 800cd88:	e016      	b.n	800cdb8 <AES_CMAC_Final+0x250>
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	4413      	add	r3, r2
 800cd90:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cd94:	781a      	ldrb	r2, [r3, #0]
 800cd96:	f107 011c 	add.w	r1, r7, #28
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	440b      	add	r3, r1
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	4053      	eors	r3, r2
 800cda2:	b2d9      	uxtb	r1, r3
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	4413      	add	r3, r2
 800cdaa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cdae:	460a      	mov	r2, r1
 800cdb0:	701a      	strb	r2, [r3, #0]
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	633b      	str	r3, [r7, #48]	; 0x30
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	2b0f      	cmp	r3, #15
 800cdbc:	dde5      	ble.n	800cd8a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdc2:	e015      	b.n	800cdf0 <AES_CMAC_Final+0x288>
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	4413      	add	r3, r2
 800cdca:	33f1      	adds	r3, #241	; 0xf1
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	440b      	add	r3, r1
 800cdd4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	4053      	eors	r3, r2
 800cddc:	b2d9      	uxtb	r1, r3
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	4413      	add	r3, r2
 800cde4:	33f1      	adds	r3, #241	; 0xf1
 800cde6:	460a      	mov	r2, r1
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	3301      	adds	r3, #1
 800cdee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	2b0f      	cmp	r3, #15
 800cdf4:	dde6      	ble.n	800cdc4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cdfc:	f107 030c 	add.w	r3, r7, #12
 800ce00:	2210      	movs	r2, #16
 800ce02:	4618      	mov	r0, r3
 800ce04:	f00b fe0b 	bl	8018a1e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	f107 030c 	add.w	r3, r7, #12
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fd1d 	bl	800d850 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ce16:	f107 031c 	add.w	r3, r7, #28
 800ce1a:	2210      	movs	r2, #16
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f00b fe38 	bl	8018a94 <memset1>
}
 800ce24:	bf00      	nop
 800ce26:	3748      	adds	r7, #72	; 0x48
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	781a      	ldrb	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3301      	adds	r3, #1
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	7852      	ldrb	r2, [r2, #1]
 800ce46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3302      	adds	r3, #2
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	7892      	ldrb	r2, [r2, #2]
 800ce50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3303      	adds	r3, #3
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	78d2      	ldrb	r2, [r2, #3]
 800ce5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	7912      	ldrb	r2, [r2, #4]
 800ce64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3305      	adds	r3, #5
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	7952      	ldrb	r2, [r2, #5]
 800ce6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3306      	adds	r3, #6
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	7992      	ldrb	r2, [r2, #6]
 800ce78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	3307      	adds	r3, #7
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	79d2      	ldrb	r2, [r2, #7]
 800ce82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3308      	adds	r3, #8
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	7a12      	ldrb	r2, [r2, #8]
 800ce8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3309      	adds	r3, #9
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	7a52      	ldrb	r2, [r2, #9]
 800ce96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	330a      	adds	r3, #10
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	7a92      	ldrb	r2, [r2, #10]
 800cea0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	330b      	adds	r3, #11
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	7ad2      	ldrb	r2, [r2, #11]
 800ceaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	330c      	adds	r3, #12
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	7b12      	ldrb	r2, [r2, #12]
 800ceb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	330d      	adds	r3, #13
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	7b52      	ldrb	r2, [r2, #13]
 800cebe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	330e      	adds	r3, #14
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	7b92      	ldrb	r2, [r2, #14]
 800cec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	330f      	adds	r3, #15
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	7bd2      	ldrb	r2, [r2, #15]
 800ced2:	701a      	strb	r2, [r3, #0]
#endif
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bc80      	pop	{r7}
 800cedc:	4770      	bx	lr

0800cede <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800cede:	b480      	push	{r7}
 800cee0:	b085      	sub	sp, #20
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	4613      	mov	r3, r2
 800ceea:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ceec:	e007      	b.n	800cefe <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	1c53      	adds	r3, r2, #1
 800cef2:	60bb      	str	r3, [r7, #8]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	1c59      	adds	r1, r3, #1
 800cef8:	60f9      	str	r1, [r7, #12]
 800cefa:	7812      	ldrb	r2, [r2, #0]
 800cefc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	71fa      	strb	r2, [r7, #7]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1f2      	bne.n	800ceee <copy_block_nn+0x10>
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bc80      	pop	{r7}
 800cf12:	4770      	bx	lr

0800cf14 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	781a      	ldrb	r2, [r3, #0]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	4053      	eors	r3, r2
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3301      	adds	r3, #1
 800cf32:	7819      	ldrb	r1, [r3, #0]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	3301      	adds	r3, #1
 800cf38:	781a      	ldrb	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	404a      	eors	r2, r1
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3302      	adds	r3, #2
 800cf48:	7819      	ldrb	r1, [r3, #0]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	3302      	adds	r3, #2
 800cf4e:	781a      	ldrb	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3302      	adds	r3, #2
 800cf54:	404a      	eors	r2, r1
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3303      	adds	r3, #3
 800cf5e:	7819      	ldrb	r1, [r3, #0]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	3303      	adds	r3, #3
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	3303      	adds	r3, #3
 800cf6a:	404a      	eors	r2, r1
 800cf6c:	b2d2      	uxtb	r2, r2
 800cf6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3304      	adds	r3, #4
 800cf74:	7819      	ldrb	r1, [r3, #0]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	3304      	adds	r3, #4
 800cf80:	404a      	eors	r2, r1
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	3305      	adds	r3, #5
 800cf8a:	7819      	ldrb	r1, [r3, #0]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	3305      	adds	r3, #5
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3305      	adds	r3, #5
 800cf96:	404a      	eors	r2, r1
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3306      	adds	r3, #6
 800cfa0:	7819      	ldrb	r1, [r3, #0]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	3306      	adds	r3, #6
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3306      	adds	r3, #6
 800cfac:	404a      	eors	r2, r1
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3307      	adds	r3, #7
 800cfb6:	7819      	ldrb	r1, [r3, #0]
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	3307      	adds	r3, #7
 800cfbc:	781a      	ldrb	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3307      	adds	r3, #7
 800cfc2:	404a      	eors	r2, r1
 800cfc4:	b2d2      	uxtb	r2, r2
 800cfc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	7819      	ldrb	r1, [r3, #0]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	781a      	ldrb	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	404a      	eors	r2, r1
 800cfda:	b2d2      	uxtb	r2, r2
 800cfdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3309      	adds	r3, #9
 800cfe2:	7819      	ldrb	r1, [r3, #0]
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	3309      	adds	r3, #9
 800cfe8:	781a      	ldrb	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	3309      	adds	r3, #9
 800cfee:	404a      	eors	r2, r1
 800cff0:	b2d2      	uxtb	r2, r2
 800cff2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	330a      	adds	r3, #10
 800cff8:	7819      	ldrb	r1, [r3, #0]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	330a      	adds	r3, #10
 800cffe:	781a      	ldrb	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	330a      	adds	r3, #10
 800d004:	404a      	eors	r2, r1
 800d006:	b2d2      	uxtb	r2, r2
 800d008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	330b      	adds	r3, #11
 800d00e:	7819      	ldrb	r1, [r3, #0]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	330b      	adds	r3, #11
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	330b      	adds	r3, #11
 800d01a:	404a      	eors	r2, r1
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	330c      	adds	r3, #12
 800d024:	7819      	ldrb	r1, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	330c      	adds	r3, #12
 800d02a:	781a      	ldrb	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	330c      	adds	r3, #12
 800d030:	404a      	eors	r2, r1
 800d032:	b2d2      	uxtb	r2, r2
 800d034:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	330d      	adds	r3, #13
 800d03a:	7819      	ldrb	r1, [r3, #0]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	330d      	adds	r3, #13
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	330d      	adds	r3, #13
 800d046:	404a      	eors	r2, r1
 800d048:	b2d2      	uxtb	r2, r2
 800d04a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	330e      	adds	r3, #14
 800d050:	7819      	ldrb	r1, [r3, #0]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	330e      	adds	r3, #14
 800d056:	781a      	ldrb	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	330e      	adds	r3, #14
 800d05c:	404a      	eors	r2, r1
 800d05e:	b2d2      	uxtb	r2, r2
 800d060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	330f      	adds	r3, #15
 800d066:	7819      	ldrb	r1, [r3, #0]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	330f      	adds	r3, #15
 800d06c:	781a      	ldrb	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	330f      	adds	r3, #15
 800d072:	404a      	eors	r2, r1
 800d074:	b2d2      	uxtb	r2, r2
 800d076:	701a      	strb	r2, [r3, #0]
#endif
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bc80      	pop	{r7}
 800d080:	4770      	bx	lr

0800d082 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	781a      	ldrb	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	4053      	eors	r3, r2
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	7819      	ldrb	r1, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	404a      	eors	r2, r1
 800d0b0:	b2d2      	uxtb	r2, r2
 800d0b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	3302      	adds	r3, #2
 800d0b8:	7819      	ldrb	r1, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3302      	adds	r3, #2
 800d0be:	781a      	ldrb	r2, [r3, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	404a      	eors	r2, r1
 800d0c6:	b2d2      	uxtb	r2, r2
 800d0c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	3303      	adds	r3, #3
 800d0ce:	7819      	ldrb	r1, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3303      	adds	r3, #3
 800d0d4:	781a      	ldrb	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3303      	adds	r3, #3
 800d0da:	404a      	eors	r2, r1
 800d0dc:	b2d2      	uxtb	r2, r2
 800d0de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	7819      	ldrb	r1, [r3, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	781a      	ldrb	r2, [r3, #0]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	404a      	eors	r2, r1
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	3305      	adds	r3, #5
 800d0fa:	7819      	ldrb	r1, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3305      	adds	r3, #5
 800d100:	781a      	ldrb	r2, [r3, #0]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3305      	adds	r3, #5
 800d106:	404a      	eors	r2, r1
 800d108:	b2d2      	uxtb	r2, r2
 800d10a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	3306      	adds	r3, #6
 800d110:	7819      	ldrb	r1, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3306      	adds	r3, #6
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3306      	adds	r3, #6
 800d11c:	404a      	eors	r2, r1
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	3307      	adds	r3, #7
 800d126:	7819      	ldrb	r1, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3307      	adds	r3, #7
 800d12c:	781a      	ldrb	r2, [r3, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3307      	adds	r3, #7
 800d132:	404a      	eors	r2, r1
 800d134:	b2d2      	uxtb	r2, r2
 800d136:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	3308      	adds	r3, #8
 800d13c:	7819      	ldrb	r1, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3308      	adds	r3, #8
 800d142:	781a      	ldrb	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3308      	adds	r3, #8
 800d148:	404a      	eors	r2, r1
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	3309      	adds	r3, #9
 800d152:	7819      	ldrb	r1, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3309      	adds	r3, #9
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3309      	adds	r3, #9
 800d15e:	404a      	eors	r2, r1
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	330a      	adds	r3, #10
 800d168:	7819      	ldrb	r1, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	330a      	adds	r3, #10
 800d16e:	781a      	ldrb	r2, [r3, #0]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	330a      	adds	r3, #10
 800d174:	404a      	eors	r2, r1
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	330b      	adds	r3, #11
 800d17e:	7819      	ldrb	r1, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	330b      	adds	r3, #11
 800d184:	781a      	ldrb	r2, [r3, #0]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	330b      	adds	r3, #11
 800d18a:	404a      	eors	r2, r1
 800d18c:	b2d2      	uxtb	r2, r2
 800d18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	330c      	adds	r3, #12
 800d194:	7819      	ldrb	r1, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	330c      	adds	r3, #12
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	330c      	adds	r3, #12
 800d1a0:	404a      	eors	r2, r1
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	330d      	adds	r3, #13
 800d1aa:	7819      	ldrb	r1, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	330d      	adds	r3, #13
 800d1b0:	781a      	ldrb	r2, [r3, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	330d      	adds	r3, #13
 800d1b6:	404a      	eors	r2, r1
 800d1b8:	b2d2      	uxtb	r2, r2
 800d1ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	330e      	adds	r3, #14
 800d1c0:	7819      	ldrb	r1, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	330e      	adds	r3, #14
 800d1c6:	781a      	ldrb	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	330e      	adds	r3, #14
 800d1cc:	404a      	eors	r2, r1
 800d1ce:	b2d2      	uxtb	r2, r2
 800d1d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	330f      	adds	r3, #15
 800d1d6:	7819      	ldrb	r1, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	330f      	adds	r3, #15
 800d1dc:	781a      	ldrb	r2, [r3, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	330f      	adds	r3, #15
 800d1e2:	404a      	eors	r2, r1
 800d1e4:	b2d2      	uxtb	r2, r2
 800d1e6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d1e8:	bf00      	nop
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bc80      	pop	{r7}
 800d1f0:	4770      	bx	lr

0800d1f2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff fe88 	bl	800cf14 <xor_block>
}
 800d204:	bf00      	nop
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	461a      	mov	r2, r3
 800d21a:	4b48      	ldr	r3, [pc, #288]	; (800d33c <shift_sub_rows+0x130>)
 800d21c:	5c9a      	ldrb	r2, [r3, r2]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	701a      	strb	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3304      	adds	r3, #4
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	4619      	mov	r1, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4a43      	ldr	r2, [pc, #268]	; (800d33c <shift_sub_rows+0x130>)
 800d230:	5c52      	ldrb	r2, [r2, r1]
 800d232:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3308      	adds	r3, #8
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	4619      	mov	r1, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3308      	adds	r3, #8
 800d240:	4a3e      	ldr	r2, [pc, #248]	; (800d33c <shift_sub_rows+0x130>)
 800d242:	5c52      	ldrb	r2, [r2, r1]
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	330c      	adds	r3, #12
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	4619      	mov	r1, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	330c      	adds	r3, #12
 800d252:	4a3a      	ldr	r2, [pc, #232]	; (800d33c <shift_sub_rows+0x130>)
 800d254:	5c52      	ldrb	r2, [r2, r1]
 800d256:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	73fb      	strb	r3, [r7, #15]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3305      	adds	r3, #5
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	4619      	mov	r1, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3301      	adds	r3, #1
 800d26a:	4a34      	ldr	r2, [pc, #208]	; (800d33c <shift_sub_rows+0x130>)
 800d26c:	5c52      	ldrb	r2, [r2, r1]
 800d26e:	701a      	strb	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3309      	adds	r3, #9
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	4619      	mov	r1, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	3305      	adds	r3, #5
 800d27c:	4a2f      	ldr	r2, [pc, #188]	; (800d33c <shift_sub_rows+0x130>)
 800d27e:	5c52      	ldrb	r2, [r2, r1]
 800d280:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	330d      	adds	r3, #13
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	4619      	mov	r1, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3309      	adds	r3, #9
 800d28e:	4a2b      	ldr	r2, [pc, #172]	; (800d33c <shift_sub_rows+0x130>)
 800d290:	5c52      	ldrb	r2, [r2, r1]
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	7bfa      	ldrb	r2, [r7, #15]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	330d      	adds	r3, #13
 800d29a:	4928      	ldr	r1, [pc, #160]	; (800d33c <shift_sub_rows+0x130>)
 800d29c:	5c8a      	ldrb	r2, [r1, r2]
 800d29e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	789b      	ldrb	r3, [r3, #2]
 800d2a4:	73fb      	strb	r3, [r7, #15]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	330a      	adds	r3, #10
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	3302      	adds	r3, #2
 800d2b2:	4a22      	ldr	r2, [pc, #136]	; (800d33c <shift_sub_rows+0x130>)
 800d2b4:	5c52      	ldrb	r2, [r2, r1]
 800d2b6:	701a      	strb	r2, [r3, #0]
 800d2b8:	7bfa      	ldrb	r2, [r7, #15]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	330a      	adds	r3, #10
 800d2be:	491f      	ldr	r1, [pc, #124]	; (800d33c <shift_sub_rows+0x130>)
 800d2c0:	5c8a      	ldrb	r2, [r1, r2]
 800d2c2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	799b      	ldrb	r3, [r3, #6]
 800d2c8:	73fb      	strb	r3, [r7, #15]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	330e      	adds	r3, #14
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	3306      	adds	r3, #6
 800d2d6:	4a19      	ldr	r2, [pc, #100]	; (800d33c <shift_sub_rows+0x130>)
 800d2d8:	5c52      	ldrb	r2, [r2, r1]
 800d2da:	701a      	strb	r2, [r3, #0]
 800d2dc:	7bfa      	ldrb	r2, [r7, #15]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	330e      	adds	r3, #14
 800d2e2:	4916      	ldr	r1, [pc, #88]	; (800d33c <shift_sub_rows+0x130>)
 800d2e4:	5c8a      	ldrb	r2, [r1, r2]
 800d2e6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7bdb      	ldrb	r3, [r3, #15]
 800d2ec:	73fb      	strb	r3, [r7, #15]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	330b      	adds	r3, #11
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	330f      	adds	r3, #15
 800d2fa:	4a10      	ldr	r2, [pc, #64]	; (800d33c <shift_sub_rows+0x130>)
 800d2fc:	5c52      	ldrb	r2, [r2, r1]
 800d2fe:	701a      	strb	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3307      	adds	r3, #7
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	4619      	mov	r1, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	330b      	adds	r3, #11
 800d30c:	4a0b      	ldr	r2, [pc, #44]	; (800d33c <shift_sub_rows+0x130>)
 800d30e:	5c52      	ldrb	r2, [r2, r1]
 800d310:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3303      	adds	r3, #3
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	4619      	mov	r1, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3307      	adds	r3, #7
 800d31e:	4a07      	ldr	r2, [pc, #28]	; (800d33c <shift_sub_rows+0x130>)
 800d320:	5c52      	ldrb	r2, [r2, r1]
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	7bfa      	ldrb	r2, [r7, #15]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3303      	adds	r3, #3
 800d32a:	4904      	ldr	r1, [pc, #16]	; (800d33c <shift_sub_rows+0x130>)
 800d32c:	5c8a      	ldrb	r2, [r1, r2]
 800d32e:	701a      	strb	r2, [r3, #0]
}
 800d330:	bf00      	nop
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	bc80      	pop	{r7}
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	0801e238 	.word	0x0801e238

0800d340 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d348:	f107 0308 	add.w	r3, r7, #8
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fd6c 	bl	800ce2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d354:	7a3b      	ldrb	r3, [r7, #8]
 800d356:	461a      	mov	r2, r3
 800d358:	4b9a      	ldr	r3, [pc, #616]	; (800d5c4 <mix_sub_columns+0x284>)
 800d35a:	5c9a      	ldrb	r2, [r3, r2]
 800d35c:	7b7b      	ldrb	r3, [r7, #13]
 800d35e:	4619      	mov	r1, r3
 800d360:	4b99      	ldr	r3, [pc, #612]	; (800d5c8 <mix_sub_columns+0x288>)
 800d362:	5c5b      	ldrb	r3, [r3, r1]
 800d364:	4053      	eors	r3, r2
 800d366:	b2da      	uxtb	r2, r3
 800d368:	7cbb      	ldrb	r3, [r7, #18]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4b97      	ldr	r3, [pc, #604]	; (800d5cc <mix_sub_columns+0x28c>)
 800d36e:	5c5b      	ldrb	r3, [r3, r1]
 800d370:	4053      	eors	r3, r2
 800d372:	b2da      	uxtb	r2, r3
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	4619      	mov	r1, r3
 800d378:	4b94      	ldr	r3, [pc, #592]	; (800d5cc <mix_sub_columns+0x28c>)
 800d37a:	5c5b      	ldrb	r3, [r3, r1]
 800d37c:	4053      	eors	r3, r2
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d384:	7a3b      	ldrb	r3, [r7, #8]
 800d386:	461a      	mov	r2, r3
 800d388:	4b90      	ldr	r3, [pc, #576]	; (800d5cc <mix_sub_columns+0x28c>)
 800d38a:	5c9a      	ldrb	r2, [r3, r2]
 800d38c:	7b7b      	ldrb	r3, [r7, #13]
 800d38e:	4619      	mov	r1, r3
 800d390:	4b8c      	ldr	r3, [pc, #560]	; (800d5c4 <mix_sub_columns+0x284>)
 800d392:	5c5b      	ldrb	r3, [r3, r1]
 800d394:	4053      	eors	r3, r2
 800d396:	b2da      	uxtb	r2, r3
 800d398:	7cbb      	ldrb	r3, [r7, #18]
 800d39a:	4619      	mov	r1, r3
 800d39c:	4b8a      	ldr	r3, [pc, #552]	; (800d5c8 <mix_sub_columns+0x288>)
 800d39e:	5c5b      	ldrb	r3, [r3, r1]
 800d3a0:	4053      	eors	r3, r2
 800d3a2:	b2d9      	uxtb	r1, r3
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	4b88      	ldr	r3, [pc, #544]	; (800d5cc <mix_sub_columns+0x28c>)
 800d3aa:	5c9a      	ldrb	r2, [r3, r2]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	404a      	eors	r2, r1
 800d3b2:	b2d2      	uxtb	r2, r2
 800d3b4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d3b6:	7a3b      	ldrb	r3, [r7, #8]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	4b84      	ldr	r3, [pc, #528]	; (800d5cc <mix_sub_columns+0x28c>)
 800d3bc:	5c9a      	ldrb	r2, [r3, r2]
 800d3be:	7b7b      	ldrb	r3, [r7, #13]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4b82      	ldr	r3, [pc, #520]	; (800d5cc <mix_sub_columns+0x28c>)
 800d3c4:	5c5b      	ldrb	r3, [r3, r1]
 800d3c6:	4053      	eors	r3, r2
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	7cbb      	ldrb	r3, [r7, #18]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4b7d      	ldr	r3, [pc, #500]	; (800d5c4 <mix_sub_columns+0x284>)
 800d3d0:	5c5b      	ldrb	r3, [r3, r1]
 800d3d2:	4053      	eors	r3, r2
 800d3d4:	b2d9      	uxtb	r1, r3
 800d3d6:	7dfb      	ldrb	r3, [r7, #23]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4b7b      	ldr	r3, [pc, #492]	; (800d5c8 <mix_sub_columns+0x288>)
 800d3dc:	5c9a      	ldrb	r2, [r3, r2]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3302      	adds	r3, #2
 800d3e2:	404a      	eors	r2, r1
 800d3e4:	b2d2      	uxtb	r2, r2
 800d3e6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d3e8:	7a3b      	ldrb	r3, [r7, #8]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4b76      	ldr	r3, [pc, #472]	; (800d5c8 <mix_sub_columns+0x288>)
 800d3ee:	5c9a      	ldrb	r2, [r3, r2]
 800d3f0:	7b7b      	ldrb	r3, [r7, #13]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	4b75      	ldr	r3, [pc, #468]	; (800d5cc <mix_sub_columns+0x28c>)
 800d3f6:	5c5b      	ldrb	r3, [r3, r1]
 800d3f8:	4053      	eors	r3, r2
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	7cbb      	ldrb	r3, [r7, #18]
 800d3fe:	4619      	mov	r1, r3
 800d400:	4b72      	ldr	r3, [pc, #456]	; (800d5cc <mix_sub_columns+0x28c>)
 800d402:	5c5b      	ldrb	r3, [r3, r1]
 800d404:	4053      	eors	r3, r2
 800d406:	b2d9      	uxtb	r1, r3
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	461a      	mov	r2, r3
 800d40c:	4b6d      	ldr	r3, [pc, #436]	; (800d5c4 <mix_sub_columns+0x284>)
 800d40e:	5c9a      	ldrb	r2, [r3, r2]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	3303      	adds	r3, #3
 800d414:	404a      	eors	r2, r1
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d41a:	7b3b      	ldrb	r3, [r7, #12]
 800d41c:	461a      	mov	r2, r3
 800d41e:	4b69      	ldr	r3, [pc, #420]	; (800d5c4 <mix_sub_columns+0x284>)
 800d420:	5c9a      	ldrb	r2, [r3, r2]
 800d422:	7c7b      	ldrb	r3, [r7, #17]
 800d424:	4619      	mov	r1, r3
 800d426:	4b68      	ldr	r3, [pc, #416]	; (800d5c8 <mix_sub_columns+0x288>)
 800d428:	5c5b      	ldrb	r3, [r3, r1]
 800d42a:	4053      	eors	r3, r2
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	7dbb      	ldrb	r3, [r7, #22]
 800d430:	4619      	mov	r1, r3
 800d432:	4b66      	ldr	r3, [pc, #408]	; (800d5cc <mix_sub_columns+0x28c>)
 800d434:	5c5b      	ldrb	r3, [r3, r1]
 800d436:	4053      	eors	r3, r2
 800d438:	b2d9      	uxtb	r1, r3
 800d43a:	7afb      	ldrb	r3, [r7, #11]
 800d43c:	461a      	mov	r2, r3
 800d43e:	4b63      	ldr	r3, [pc, #396]	; (800d5cc <mix_sub_columns+0x28c>)
 800d440:	5c9a      	ldrb	r2, [r3, r2]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3304      	adds	r3, #4
 800d446:	404a      	eors	r2, r1
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d44c:	7b3b      	ldrb	r3, [r7, #12]
 800d44e:	461a      	mov	r2, r3
 800d450:	4b5e      	ldr	r3, [pc, #376]	; (800d5cc <mix_sub_columns+0x28c>)
 800d452:	5c9a      	ldrb	r2, [r3, r2]
 800d454:	7c7b      	ldrb	r3, [r7, #17]
 800d456:	4619      	mov	r1, r3
 800d458:	4b5a      	ldr	r3, [pc, #360]	; (800d5c4 <mix_sub_columns+0x284>)
 800d45a:	5c5b      	ldrb	r3, [r3, r1]
 800d45c:	4053      	eors	r3, r2
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	7dbb      	ldrb	r3, [r7, #22]
 800d462:	4619      	mov	r1, r3
 800d464:	4b58      	ldr	r3, [pc, #352]	; (800d5c8 <mix_sub_columns+0x288>)
 800d466:	5c5b      	ldrb	r3, [r3, r1]
 800d468:	4053      	eors	r3, r2
 800d46a:	b2d9      	uxtb	r1, r3
 800d46c:	7afb      	ldrb	r3, [r7, #11]
 800d46e:	461a      	mov	r2, r3
 800d470:	4b56      	ldr	r3, [pc, #344]	; (800d5cc <mix_sub_columns+0x28c>)
 800d472:	5c9a      	ldrb	r2, [r3, r2]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	3305      	adds	r3, #5
 800d478:	404a      	eors	r2, r1
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d47e:	7b3b      	ldrb	r3, [r7, #12]
 800d480:	461a      	mov	r2, r3
 800d482:	4b52      	ldr	r3, [pc, #328]	; (800d5cc <mix_sub_columns+0x28c>)
 800d484:	5c9a      	ldrb	r2, [r3, r2]
 800d486:	7c7b      	ldrb	r3, [r7, #17]
 800d488:	4619      	mov	r1, r3
 800d48a:	4b50      	ldr	r3, [pc, #320]	; (800d5cc <mix_sub_columns+0x28c>)
 800d48c:	5c5b      	ldrb	r3, [r3, r1]
 800d48e:	4053      	eors	r3, r2
 800d490:	b2da      	uxtb	r2, r3
 800d492:	7dbb      	ldrb	r3, [r7, #22]
 800d494:	4619      	mov	r1, r3
 800d496:	4b4b      	ldr	r3, [pc, #300]	; (800d5c4 <mix_sub_columns+0x284>)
 800d498:	5c5b      	ldrb	r3, [r3, r1]
 800d49a:	4053      	eors	r3, r2
 800d49c:	b2d9      	uxtb	r1, r3
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	4b49      	ldr	r3, [pc, #292]	; (800d5c8 <mix_sub_columns+0x288>)
 800d4a4:	5c9a      	ldrb	r2, [r3, r2]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3306      	adds	r3, #6
 800d4aa:	404a      	eors	r2, r1
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d4b0:	7b3b      	ldrb	r3, [r7, #12]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	4b44      	ldr	r3, [pc, #272]	; (800d5c8 <mix_sub_columns+0x288>)
 800d4b6:	5c9a      	ldrb	r2, [r3, r2]
 800d4b8:	7c7b      	ldrb	r3, [r7, #17]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4b43      	ldr	r3, [pc, #268]	; (800d5cc <mix_sub_columns+0x28c>)
 800d4be:	5c5b      	ldrb	r3, [r3, r1]
 800d4c0:	4053      	eors	r3, r2
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	7dbb      	ldrb	r3, [r7, #22]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <mix_sub_columns+0x28c>)
 800d4ca:	5c5b      	ldrb	r3, [r3, r1]
 800d4cc:	4053      	eors	r3, r2
 800d4ce:	b2d9      	uxtb	r1, r3
 800d4d0:	7afb      	ldrb	r3, [r7, #11]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	4b3b      	ldr	r3, [pc, #236]	; (800d5c4 <mix_sub_columns+0x284>)
 800d4d6:	5c9a      	ldrb	r2, [r3, r2]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	3307      	adds	r3, #7
 800d4dc:	404a      	eors	r2, r1
 800d4de:	b2d2      	uxtb	r2, r2
 800d4e0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d4e2:	7c3b      	ldrb	r3, [r7, #16]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4b37      	ldr	r3, [pc, #220]	; (800d5c4 <mix_sub_columns+0x284>)
 800d4e8:	5c9a      	ldrb	r2, [r3, r2]
 800d4ea:	7d7b      	ldrb	r3, [r7, #21]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4b36      	ldr	r3, [pc, #216]	; (800d5c8 <mix_sub_columns+0x288>)
 800d4f0:	5c5b      	ldrb	r3, [r3, r1]
 800d4f2:	4053      	eors	r3, r2
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	7abb      	ldrb	r3, [r7, #10]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4b34      	ldr	r3, [pc, #208]	; (800d5cc <mix_sub_columns+0x28c>)
 800d4fc:	5c5b      	ldrb	r3, [r3, r1]
 800d4fe:	4053      	eors	r3, r2
 800d500:	b2d9      	uxtb	r1, r3
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	461a      	mov	r2, r3
 800d506:	4b31      	ldr	r3, [pc, #196]	; (800d5cc <mix_sub_columns+0x28c>)
 800d508:	5c9a      	ldrb	r2, [r3, r2]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3308      	adds	r3, #8
 800d50e:	404a      	eors	r2, r1
 800d510:	b2d2      	uxtb	r2, r2
 800d512:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d514:	7c3b      	ldrb	r3, [r7, #16]
 800d516:	461a      	mov	r2, r3
 800d518:	4b2c      	ldr	r3, [pc, #176]	; (800d5cc <mix_sub_columns+0x28c>)
 800d51a:	5c9a      	ldrb	r2, [r3, r2]
 800d51c:	7d7b      	ldrb	r3, [r7, #21]
 800d51e:	4619      	mov	r1, r3
 800d520:	4b28      	ldr	r3, [pc, #160]	; (800d5c4 <mix_sub_columns+0x284>)
 800d522:	5c5b      	ldrb	r3, [r3, r1]
 800d524:	4053      	eors	r3, r2
 800d526:	b2da      	uxtb	r2, r3
 800d528:	7abb      	ldrb	r3, [r7, #10]
 800d52a:	4619      	mov	r1, r3
 800d52c:	4b26      	ldr	r3, [pc, #152]	; (800d5c8 <mix_sub_columns+0x288>)
 800d52e:	5c5b      	ldrb	r3, [r3, r1]
 800d530:	4053      	eors	r3, r2
 800d532:	b2d9      	uxtb	r1, r3
 800d534:	7bfb      	ldrb	r3, [r7, #15]
 800d536:	461a      	mov	r2, r3
 800d538:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <mix_sub_columns+0x28c>)
 800d53a:	5c9a      	ldrb	r2, [r3, r2]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3309      	adds	r3, #9
 800d540:	404a      	eors	r2, r1
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d546:	7c3b      	ldrb	r3, [r7, #16]
 800d548:	461a      	mov	r2, r3
 800d54a:	4b20      	ldr	r3, [pc, #128]	; (800d5cc <mix_sub_columns+0x28c>)
 800d54c:	5c9a      	ldrb	r2, [r3, r2]
 800d54e:	7d7b      	ldrb	r3, [r7, #21]
 800d550:	4619      	mov	r1, r3
 800d552:	4b1e      	ldr	r3, [pc, #120]	; (800d5cc <mix_sub_columns+0x28c>)
 800d554:	5c5b      	ldrb	r3, [r3, r1]
 800d556:	4053      	eors	r3, r2
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	7abb      	ldrb	r3, [r7, #10]
 800d55c:	4619      	mov	r1, r3
 800d55e:	4b19      	ldr	r3, [pc, #100]	; (800d5c4 <mix_sub_columns+0x284>)
 800d560:	5c5b      	ldrb	r3, [r3, r1]
 800d562:	4053      	eors	r3, r2
 800d564:	b2d9      	uxtb	r1, r3
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	461a      	mov	r2, r3
 800d56a:	4b17      	ldr	r3, [pc, #92]	; (800d5c8 <mix_sub_columns+0x288>)
 800d56c:	5c9a      	ldrb	r2, [r3, r2]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	330a      	adds	r3, #10
 800d572:	404a      	eors	r2, r1
 800d574:	b2d2      	uxtb	r2, r2
 800d576:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d578:	7c3b      	ldrb	r3, [r7, #16]
 800d57a:	461a      	mov	r2, r3
 800d57c:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <mix_sub_columns+0x288>)
 800d57e:	5c9a      	ldrb	r2, [r3, r2]
 800d580:	7d7b      	ldrb	r3, [r7, #21]
 800d582:	4619      	mov	r1, r3
 800d584:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <mix_sub_columns+0x28c>)
 800d586:	5c5b      	ldrb	r3, [r3, r1]
 800d588:	4053      	eors	r3, r2
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	7abb      	ldrb	r3, [r7, #10]
 800d58e:	4619      	mov	r1, r3
 800d590:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <mix_sub_columns+0x28c>)
 800d592:	5c5b      	ldrb	r3, [r3, r1]
 800d594:	4053      	eors	r3, r2
 800d596:	b2d9      	uxtb	r1, r3
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	461a      	mov	r2, r3
 800d59c:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <mix_sub_columns+0x284>)
 800d59e:	5c9a      	ldrb	r2, [r3, r2]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	330b      	adds	r3, #11
 800d5a4:	404a      	eors	r2, r1
 800d5a6:	b2d2      	uxtb	r2, r2
 800d5a8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d5aa:	7d3b      	ldrb	r3, [r7, #20]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b05      	ldr	r3, [pc, #20]	; (800d5c4 <mix_sub_columns+0x284>)
 800d5b0:	5c9a      	ldrb	r2, [r3, r2]
 800d5b2:	7a7b      	ldrb	r3, [r7, #9]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <mix_sub_columns+0x288>)
 800d5b8:	5c5b      	ldrb	r3, [r3, r1]
 800d5ba:	4053      	eors	r3, r2
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	7bbb      	ldrb	r3, [r7, #14]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	e005      	b.n	800d5d0 <mix_sub_columns+0x290>
 800d5c4:	0801e338 	.word	0x0801e338
 800d5c8:	0801e438 	.word	0x0801e438
 800d5cc:	0801e238 	.word	0x0801e238
 800d5d0:	4b2d      	ldr	r3, [pc, #180]	; (800d688 <mix_sub_columns+0x348>)
 800d5d2:	5c5b      	ldrb	r3, [r3, r1]
 800d5d4:	4053      	eors	r3, r2
 800d5d6:	b2d9      	uxtb	r1, r3
 800d5d8:	7cfb      	ldrb	r3, [r7, #19]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4b2a      	ldr	r3, [pc, #168]	; (800d688 <mix_sub_columns+0x348>)
 800d5de:	5c9a      	ldrb	r2, [r3, r2]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	404a      	eors	r2, r1
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d5ea:	7d3b      	ldrb	r3, [r7, #20]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4b26      	ldr	r3, [pc, #152]	; (800d688 <mix_sub_columns+0x348>)
 800d5f0:	5c9a      	ldrb	r2, [r3, r2]
 800d5f2:	7a7b      	ldrb	r3, [r7, #9]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <mix_sub_columns+0x34c>)
 800d5f8:	5c5b      	ldrb	r3, [r3, r1]
 800d5fa:	4053      	eors	r3, r2
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	4619      	mov	r1, r3
 800d602:	4b23      	ldr	r3, [pc, #140]	; (800d690 <mix_sub_columns+0x350>)
 800d604:	5c5b      	ldrb	r3, [r3, r1]
 800d606:	4053      	eors	r3, r2
 800d608:	b2d9      	uxtb	r1, r3
 800d60a:	7cfb      	ldrb	r3, [r7, #19]
 800d60c:	461a      	mov	r2, r3
 800d60e:	4b1e      	ldr	r3, [pc, #120]	; (800d688 <mix_sub_columns+0x348>)
 800d610:	5c9a      	ldrb	r2, [r3, r2]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	330d      	adds	r3, #13
 800d616:	404a      	eors	r2, r1
 800d618:	b2d2      	uxtb	r2, r2
 800d61a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d61c:	7d3b      	ldrb	r3, [r7, #20]
 800d61e:	461a      	mov	r2, r3
 800d620:	4b19      	ldr	r3, [pc, #100]	; (800d688 <mix_sub_columns+0x348>)
 800d622:	5c9a      	ldrb	r2, [r3, r2]
 800d624:	7a7b      	ldrb	r3, [r7, #9]
 800d626:	4619      	mov	r1, r3
 800d628:	4b17      	ldr	r3, [pc, #92]	; (800d688 <mix_sub_columns+0x348>)
 800d62a:	5c5b      	ldrb	r3, [r3, r1]
 800d62c:	4053      	eors	r3, r2
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	4619      	mov	r1, r3
 800d634:	4b15      	ldr	r3, [pc, #84]	; (800d68c <mix_sub_columns+0x34c>)
 800d636:	5c5b      	ldrb	r3, [r3, r1]
 800d638:	4053      	eors	r3, r2
 800d63a:	b2d9      	uxtb	r1, r3
 800d63c:	7cfb      	ldrb	r3, [r7, #19]
 800d63e:	461a      	mov	r2, r3
 800d640:	4b13      	ldr	r3, [pc, #76]	; (800d690 <mix_sub_columns+0x350>)
 800d642:	5c9a      	ldrb	r2, [r3, r2]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	330e      	adds	r3, #14
 800d648:	404a      	eors	r2, r1
 800d64a:	b2d2      	uxtb	r2, r2
 800d64c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d64e:	7d3b      	ldrb	r3, [r7, #20]
 800d650:	461a      	mov	r2, r3
 800d652:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <mix_sub_columns+0x350>)
 800d654:	5c9a      	ldrb	r2, [r3, r2]
 800d656:	7a7b      	ldrb	r3, [r7, #9]
 800d658:	4619      	mov	r1, r3
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <mix_sub_columns+0x348>)
 800d65c:	5c5b      	ldrb	r3, [r3, r1]
 800d65e:	4053      	eors	r3, r2
 800d660:	b2da      	uxtb	r2, r3
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	4619      	mov	r1, r3
 800d666:	4b08      	ldr	r3, [pc, #32]	; (800d688 <mix_sub_columns+0x348>)
 800d668:	5c5b      	ldrb	r3, [r3, r1]
 800d66a:	4053      	eors	r3, r2
 800d66c:	b2d9      	uxtb	r1, r3
 800d66e:	7cfb      	ldrb	r3, [r7, #19]
 800d670:	461a      	mov	r2, r3
 800d672:	4b06      	ldr	r3, [pc, #24]	; (800d68c <mix_sub_columns+0x34c>)
 800d674:	5c9a      	ldrb	r2, [r3, r2]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	330f      	adds	r3, #15
 800d67a:	404a      	eors	r2, r1
 800d67c:	b2d2      	uxtb	r2, r2
 800d67e:	701a      	strb	r2, [r3, #0]
  }
 800d680:	bf00      	nop
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	0801e238 	.word	0x0801e238
 800d68c:	0801e338 	.word	0x0801e338
 800d690:	0801e438 	.word	0x0801e438

0800d694 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	460b      	mov	r3, r1
 800d69e:	607a      	str	r2, [r7, #4]
 800d6a0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d6a2:	7afb      	ldrb	r3, [r7, #11]
 800d6a4:	3b10      	subs	r3, #16
 800d6a6:	2b10      	cmp	r3, #16
 800d6a8:	bf8c      	ite	hi
 800d6aa:	2201      	movhi	r2, #1
 800d6ac:	2200      	movls	r2, #0
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	2a00      	cmp	r2, #0
 800d6b2:	d10b      	bne.n	800d6cc <lorawan_aes_set_key+0x38>
 800d6b4:	4a64      	ldr	r2, [pc, #400]	; (800d848 <lorawan_aes_set_key+0x1b4>)
 800d6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bf14      	ite	ne
 800d6c2:	2301      	movne	r3, #1
 800d6c4:	2300      	moveq	r3, #0
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d105      	bne.n	800d6d8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d6d4:	23ff      	movs	r3, #255	; 0xff
 800d6d6:	e0b2      	b.n	800d83e <lorawan_aes_set_key+0x1aa>
        break;
 800d6d8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7afa      	ldrb	r2, [r7, #11]
 800d6de:	68f9      	ldr	r1, [r7, #12]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fbfc 	bl	800cede <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d6e6:	7afb      	ldrb	r3, [r7, #11]
 800d6e8:	331c      	adds	r3, #28
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d6f0:	7c7b      	ldrb	r3, [r7, #17]
 800d6f2:	091b      	lsrs	r3, r3, #4
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	75fb      	strb	r3, [r7, #23]
 800d704:	2301      	movs	r3, #1
 800d706:	75bb      	strb	r3, [r7, #22]
 800d708:	e093      	b.n	800d832 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	3b04      	subs	r3, #4
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	5cd3      	ldrb	r3, [r2, r3]
 800d712:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	3b03      	subs	r3, #3
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	5cd3      	ldrb	r3, [r2, r3]
 800d71c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d71e:	7dfb      	ldrb	r3, [r7, #23]
 800d720:	3b02      	subs	r3, #2
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	5cd3      	ldrb	r3, [r2, r3]
 800d726:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	5cd3      	ldrb	r3, [r2, r3]
 800d730:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	7afa      	ldrb	r2, [r7, #11]
 800d736:	fbb3 f1f2 	udiv	r1, r3, r2
 800d73a:	fb01 f202 	mul.w	r2, r1, r2
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d127      	bne.n	800d796 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800d746:	7d7b      	ldrb	r3, [r7, #21]
 800d748:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d74a:	7d3b      	ldrb	r3, [r7, #20]
 800d74c:	4a3f      	ldr	r2, [pc, #252]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d74e:	5cd2      	ldrb	r2, [r2, r3]
 800d750:	7dbb      	ldrb	r3, [r7, #22]
 800d752:	4053      	eors	r3, r2
 800d754:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d756:	7cfb      	ldrb	r3, [r7, #19]
 800d758:	4a3c      	ldr	r2, [pc, #240]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d75a:	5cd3      	ldrb	r3, [r2, r3]
 800d75c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d75e:	7cbb      	ldrb	r3, [r7, #18]
 800d760:	4a3a      	ldr	r2, [pc, #232]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d762:	5cd3      	ldrb	r3, [r2, r3]
 800d764:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d766:	7c3b      	ldrb	r3, [r7, #16]
 800d768:	4a38      	ldr	r2, [pc, #224]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d76a:	5cd3      	ldrb	r3, [r2, r3]
 800d76c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d76e:	7dbb      	ldrb	r3, [r7, #22]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	b25a      	sxtb	r2, r3
 800d774:	7dbb      	ldrb	r3, [r7, #22]
 800d776:	09db      	lsrs	r3, r3, #7
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	4619      	mov	r1, r3
 800d77c:	0049      	lsls	r1, r1, #1
 800d77e:	440b      	add	r3, r1
 800d780:	4619      	mov	r1, r3
 800d782:	00c8      	lsls	r0, r1, #3
 800d784:	4619      	mov	r1, r3
 800d786:	4603      	mov	r3, r0
 800d788:	440b      	add	r3, r1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	b25b      	sxtb	r3, r3
 800d78e:	4053      	eors	r3, r2
 800d790:	b25b      	sxtb	r3, r3
 800d792:	75bb      	strb	r3, [r7, #22]
 800d794:	e01c      	b.n	800d7d0 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	2b18      	cmp	r3, #24
 800d79a:	d919      	bls.n	800d7d0 <lorawan_aes_set_key+0x13c>
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	7afa      	ldrb	r2, [r7, #11]
 800d7a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7a4:	fb01 f202 	mul.w	r2, r1, r2
 800d7a8:	1a9b      	subs	r3, r3, r2
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b10      	cmp	r3, #16
 800d7ae:	d10f      	bne.n	800d7d0 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800d7b0:	7d7b      	ldrb	r3, [r7, #21]
 800d7b2:	4a26      	ldr	r2, [pc, #152]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d7b4:	5cd3      	ldrb	r3, [r2, r3]
 800d7b6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d7b8:	7d3b      	ldrb	r3, [r7, #20]
 800d7ba:	4a24      	ldr	r2, [pc, #144]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d7bc:	5cd3      	ldrb	r3, [r2, r3]
 800d7be:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d7c0:	7cfb      	ldrb	r3, [r7, #19]
 800d7c2:	4a22      	ldr	r2, [pc, #136]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d7c4:	5cd3      	ldrb	r3, [r2, r3]
 800d7c6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d7c8:	7cbb      	ldrb	r3, [r7, #18]
 800d7ca:	4a20      	ldr	r2, [pc, #128]	; (800d84c <lorawan_aes_set_key+0x1b8>)
 800d7cc:	5cd3      	ldrb	r3, [r2, r3]
 800d7ce:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d7d0:	7dfa      	ldrb	r2, [r7, #23]
 800d7d2:	7afb      	ldrb	r3, [r7, #11]
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d7d8:	7c3b      	ldrb	r3, [r7, #16]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	5cd1      	ldrb	r1, [r2, r3]
 800d7de:	7dfb      	ldrb	r3, [r7, #23]
 800d7e0:	7d7a      	ldrb	r2, [r7, #21]
 800d7e2:	404a      	eors	r2, r1
 800d7e4:	b2d1      	uxtb	r1, r2
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d7ea:	7c3b      	ldrb	r3, [r7, #16]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	5cd1      	ldrb	r1, [r2, r3]
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	7d3a      	ldrb	r2, [r7, #20]
 800d7f8:	404a      	eors	r2, r1
 800d7fa:	b2d1      	uxtb	r1, r2
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d800:	7c3b      	ldrb	r3, [r7, #16]
 800d802:	3302      	adds	r3, #2
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	5cd1      	ldrb	r1, [r2, r3]
 800d808:	7dfb      	ldrb	r3, [r7, #23]
 800d80a:	3302      	adds	r3, #2
 800d80c:	7cfa      	ldrb	r2, [r7, #19]
 800d80e:	404a      	eors	r2, r1
 800d810:	b2d1      	uxtb	r1, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d816:	7c3b      	ldrb	r3, [r7, #16]
 800d818:	3303      	adds	r3, #3
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	5cd1      	ldrb	r1, [r2, r3]
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	3303      	adds	r3, #3
 800d822:	7cba      	ldrb	r2, [r7, #18]
 800d824:	404a      	eors	r2, r1
 800d826:	b2d1      	uxtb	r1, r2
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
 800d82e:	3304      	adds	r3, #4
 800d830:	75fb      	strb	r3, [r7, #23]
 800d832:	7dfa      	ldrb	r2, [r7, #23]
 800d834:	7c7b      	ldrb	r3, [r7, #17]
 800d836:	429a      	cmp	r2, r3
 800d838:	f4ff af67 	bcc.w	800d70a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	00010101 	.word	0x00010101
 800d84c:	0801e238 	.word	0x0801e238

0800d850 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d038      	beq.n	800d8d8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	f107 0314 	add.w	r3, r7, #20
 800d86c:	68f9      	ldr	r1, [r7, #12]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff fc07 	bl	800d082 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d874:	2301      	movs	r3, #1
 800d876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d87a:	e014      	b.n	800d8a6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d87c:	f107 0314 	add.w	r3, r7, #20
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fd5d 	bl	800d340 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d88c:	0112      	lsls	r2, r2, #4
 800d88e:	441a      	add	r2, r3
 800d890:	f107 0314 	add.w	r3, r7, #20
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fcab 	bl	800d1f2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d8ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d3e3      	bcc.n	800d87c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d8b4:	f107 0314 	add.w	r3, r7, #20
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7ff fca7 	bl	800d20c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d8c4:	0112      	lsls	r2, r2, #4
 800d8c6:	441a      	add	r2, r3
 800d8c8:	f107 0314 	add.w	r3, r7, #20
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	68b8      	ldr	r0, [r7, #8]
 800d8d0:	f7ff fbd7 	bl	800d082 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e000      	b.n	800d8da <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d8d8:	23ff      	movs	r3, #255	; 0xff
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3728      	adds	r7, #40	; 0x28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e6:	b0a1      	sub	sp, #132	; 0x84
 800d8e8:	af12      	add	r7, sp, #72	; 0x48
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d8f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 fa12 	bl	800dd24 <SecureElementGetKeyByID>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d174      	bne.n	800d9f0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d906:	2300      	movs	r3, #0
 800d908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d90c:	e06c      	b.n	800d9e8 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d90e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d912:	4939      	ldr	r1, [pc, #228]	; (800d9f8 <PrintKey+0x114>)
 800d914:	4613      	mov	r3, r2
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	440b      	add	r3, r1
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d924:	429a      	cmp	r2, r3
 800d926:	d15a      	bne.n	800d9de <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d928:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d92c:	4932      	ldr	r1, [pc, #200]	; (800d9f8 <PrintKey+0x114>)
 800d92e:	4613      	mov	r3, r2
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	4413      	add	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	440b      	add	r3, r1
 800d938:	3308      	adds	r3, #8
 800d93a:	6819      	ldr	r1, [r3, #0]
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	785b      	ldrb	r3, [r3, #1]
 800d940:	461d      	mov	r5, r3
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	789b      	ldrb	r3, [r3, #2]
 800d946:	461e      	mov	r6, r3
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	78db      	ldrb	r3, [r3, #3]
 800d94c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	791b      	ldrb	r3, [r3, #4]
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	795b      	ldrb	r3, [r3, #5]
 800d958:	623b      	str	r3, [r7, #32]
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	799b      	ldrb	r3, [r3, #6]
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	79db      	ldrb	r3, [r3, #7]
 800d964:	61bb      	str	r3, [r7, #24]
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	7a1b      	ldrb	r3, [r3, #8]
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	7a5b      	ldrb	r3, [r3, #9]
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	7a9b      	ldrb	r3, [r3, #10]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	7adb      	ldrb	r3, [r3, #11]
 800d97c:	60bb      	str	r3, [r7, #8]
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	7b1b      	ldrb	r3, [r3, #12]
 800d982:	607b      	str	r3, [r7, #4]
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	7b5b      	ldrb	r3, [r3, #13]
 800d988:	461c      	mov	r4, r3
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	7b9b      	ldrb	r3, [r3, #14]
 800d98e:	4618      	mov	r0, r3
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	7bdb      	ldrb	r3, [r3, #15]
 800d994:	461a      	mov	r2, r3
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	7c1b      	ldrb	r3, [r3, #16]
 800d99a:	9310      	str	r3, [sp, #64]	; 0x40
 800d99c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d99e:	900e      	str	r0, [sp, #56]	; 0x38
 800d9a0:	940d      	str	r4, [sp, #52]	; 0x34
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	920c      	str	r2, [sp, #48]	; 0x30
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	920a      	str	r2, [sp, #40]	; 0x28
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	9208      	str	r2, [sp, #32]
 800d9b6:	69ba      	ldr	r2, [r7, #24]
 800d9b8:	9207      	str	r2, [sp, #28]
 800d9ba:	69fa      	ldr	r2, [r7, #28]
 800d9bc:	9206      	str	r2, [sp, #24]
 800d9be:	6a3a      	ldr	r2, [r7, #32]
 800d9c0:	9205      	str	r2, [sp, #20]
 800d9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c4:	9204      	str	r2, [sp, #16]
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	9303      	str	r3, [sp, #12]
 800d9ca:	9602      	str	r6, [sp, #8]
 800d9cc:	9501      	str	r5, [sp, #4]
 800d9ce:	9100      	str	r1, [sp, #0]
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <PrintKey+0x118>)
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	2002      	movs	r0, #2
 800d9d8:	f00f fbc6 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
 800d9dc:	e008      	b.n	800d9f0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d9de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d9e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9ec:	2b0a      	cmp	r3, #10
 800d9ee:	d98e      	bls.n	800d90e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d9f0:	373c      	adds	r7, #60	; 0x3c
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0801e538 	.word	0x0801e538
 800d9fc:	0801ddd0 	.word	0x0801ddd0

0800da00 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800da00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da02:	b091      	sub	sp, #68	; 0x44
 800da04:	af08      	add	r7, sp, #32
 800da06:	4603      	mov	r3, r0
 800da08:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800da0e:	f107 0310 	add.w	r3, r7, #16
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fbf0 	bl	800e1f8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800da18:	7c3b      	ldrb	r3, [r7, #16]
 800da1a:	7c7a      	ldrb	r2, [r7, #17]
 800da1c:	7cb9      	ldrb	r1, [r7, #18]
 800da1e:	7cf8      	ldrb	r0, [r7, #19]
 800da20:	7d3c      	ldrb	r4, [r7, #20]
 800da22:	7d7d      	ldrb	r5, [r7, #21]
 800da24:	7dbe      	ldrb	r6, [r7, #22]
 800da26:	f897 c017 	ldrb.w	ip, [r7, #23]
 800da2a:	f8cd c01c 	str.w	ip, [sp, #28]
 800da2e:	9606      	str	r6, [sp, #24]
 800da30:	9505      	str	r5, [sp, #20]
 800da32:	9404      	str	r4, [sp, #16]
 800da34:	9003      	str	r0, [sp, #12]
 800da36:	9102      	str	r1, [sp, #8]
 800da38:	9201      	str	r2, [sp, #4]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	4b24      	ldr	r3, [pc, #144]	; (800dad0 <PrintIds+0xd0>)
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	2002      	movs	r0, #2
 800da44:	f00f fb90 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800da48:	f107 0318 	add.w	r3, r7, #24
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fc03 	bl	800e258 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800da52:	7e3b      	ldrb	r3, [r7, #24]
 800da54:	7e7a      	ldrb	r2, [r7, #25]
 800da56:	7eb9      	ldrb	r1, [r7, #26]
 800da58:	7ef8      	ldrb	r0, [r7, #27]
 800da5a:	7f3c      	ldrb	r4, [r7, #28]
 800da5c:	7f7d      	ldrb	r5, [r7, #29]
 800da5e:	7fbe      	ldrb	r6, [r7, #30]
 800da60:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800da64:	f8cd c01c 	str.w	ip, [sp, #28]
 800da68:	9606      	str	r6, [sp, #24]
 800da6a:	9505      	str	r5, [sp, #20]
 800da6c:	9404      	str	r4, [sp, #16]
 800da6e:	9003      	str	r0, [sp, #12]
 800da70:	9102      	str	r1, [sp, #8]
 800da72:	9201      	str	r2, [sp, #4]
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	4b17      	ldr	r3, [pc, #92]	; (800dad4 <PrintIds+0xd4>)
 800da78:	2200      	movs	r2, #0
 800da7a:	2100      	movs	r1, #0
 800da7c:	2002      	movs	r0, #2
 800da7e:	f00f fb73 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800da82:	f107 020c 	add.w	r2, r7, #12
 800da86:	79fb      	ldrb	r3, [r7, #7]
 800da88:	4611      	mov	r1, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 fc16 	bl	800e2bc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800da90:	f107 030c 	add.w	r3, r7, #12
 800da94:	3303      	adds	r3, #3
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	461a      	mov	r2, r3
 800da9a:	f107 030c 	add.w	r3, r7, #12
 800da9e:	3302      	adds	r3, #2
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	4619      	mov	r1, r3
 800daa4:	f107 030c 	add.w	r3, r7, #12
 800daa8:	3301      	adds	r3, #1
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4618      	mov	r0, r3
 800daae:	f107 030c 	add.w	r3, r7, #12
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	9303      	str	r3, [sp, #12]
 800dab6:	9002      	str	r0, [sp, #8]
 800dab8:	9101      	str	r1, [sp, #4]
 800daba:	9200      	str	r2, [sp, #0]
 800dabc:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <PrintIds+0xd8>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	2100      	movs	r1, #0
 800dac2:	2002      	movs	r0, #2
 800dac4:	f00f fb50 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800dac8:	bf00      	nop
 800daca:	3724      	adds	r7, #36	; 0x24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad0:	0801de2c 	.word	0x0801de2c
 800dad4:	0801de6c 	.word	0x0801de6c
 800dad8:	0801deac 	.word	0x0801deac

0800dadc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	4603      	mov	r3, r0
 800dae4:	6039      	str	r1, [r7, #0]
 800dae6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dae8:	2300      	movs	r3, #0
 800daea:	73fb      	strb	r3, [r7, #15]
 800daec:	e01a      	b.n	800db24 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800daee:	4b12      	ldr	r3, [pc, #72]	; (800db38 <GetKeyByID+0x5c>)
 800daf0:	6819      	ldr	r1, [r3, #0]
 800daf2:	7bfa      	ldrb	r2, [r7, #15]
 800daf4:	4613      	mov	r3, r2
 800daf6:	011b      	lsls	r3, r3, #4
 800daf8:	4413      	add	r3, r2
 800dafa:	440b      	add	r3, r1
 800dafc:	3318      	adds	r3, #24
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	79fa      	ldrb	r2, [r7, #7]
 800db02:	429a      	cmp	r2, r3
 800db04:	d10b      	bne.n	800db1e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <GetKeyByID+0x5c>)
 800db08:	6819      	ldr	r1, [r3, #0]
 800db0a:	7bfa      	ldrb	r2, [r7, #15]
 800db0c:	4613      	mov	r3, r2
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	4413      	add	r3, r2
 800db12:	3318      	adds	r3, #24
 800db14:	18ca      	adds	r2, r1, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e006      	b.n	800db2c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	3301      	adds	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
 800db24:	7bfb      	ldrb	r3, [r7, #15]
 800db26:	2b0a      	cmp	r3, #10
 800db28:	d9e1      	bls.n	800daee <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db2a:	2303      	movs	r3, #3
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	bc80      	pop	{r7}
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	200007a8 	.word	0x200007a8

0800db3c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800db3c:	b590      	push	{r4, r7, lr}
 800db3e:	b0d1      	sub	sp, #324	; 0x144
 800db40:	af00      	add	r7, sp, #0
 800db42:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800db46:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800db4a:	6020      	str	r0, [r4, #0]
 800db4c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800db50:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800db54:	6001      	str	r1, [r0, #0]
 800db56:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800db5a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800db5e:	600a      	str	r2, [r1, #0]
 800db60:	461a      	mov	r2, r3
 800db62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db66:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800db6a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800db6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db70:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <ComputeCmac+0x46>
 800db7a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db82:	2302      	movs	r3, #2
 800db84:	e05d      	b.n	800dc42 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800db86:	f107 0314 	add.w	r3, r7, #20
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe ff02 	bl	800c994 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800db90:	f107 0210 	add.w	r2, r7, #16
 800db94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db98:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	4611      	mov	r1, r2
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff ff9b 	bl	800dadc <GetKeyByID>
 800dba6:	4603      	mov	r3, r0
 800dba8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dbac:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d144      	bne.n	800dc3e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800dbb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	f107 0314 	add.w	r3, r7, #20
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fefd 	bl	800c9c6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800dbcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d009      	beq.n	800dbee <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800dbda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dbe2:	f107 0014 	add.w	r0, r7, #20
 800dbe6:	2210      	movs	r2, #16
 800dbe8:	6819      	ldr	r1, [r3, #0]
 800dbea:	f7fe fefb 	bl	800c9e4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dbee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbf2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800dbf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800dbfe:	f107 0014 	add.w	r0, r7, #20
 800dc02:	6812      	ldr	r2, [r2, #0]
 800dc04:	6819      	ldr	r1, [r3, #0]
 800dc06:	f7fe feed 	bl	800c9e4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dc0a:	f107 0214 	add.w	r2, r7, #20
 800dc0e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dc12:	4611      	mov	r1, r2
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fe ffa7 	bl	800cb68 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800dc1a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800dc24:	021b      	lsls	r3, r3, #8
 800dc26:	431a      	orrs	r2, r3
 800dc28:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800dc2c:	041b      	lsls	r3, r3, #16
 800dc2e:	431a      	orrs	r2, r3
 800dc30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800dc34:	061b      	lsls	r3, r3, #24
 800dc36:	431a      	orrs	r2, r3
 800dc38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dc3c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800dc3e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd90      	pop	{r4, r7, pc}

0800dc4c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	e00a      	b.n	800dc74 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800dc5e:	4a07      	ldr	r2, [pc, #28]	; (800dc7c <SecureElementInit+0x30>)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800dc64:	4b05      	ldr	r3, [pc, #20]	; (800dc7c <SecureElementInit+0x30>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	22d8      	movs	r2, #216	; 0xd8
 800dc6a:	4905      	ldr	r1, [pc, #20]	; (800dc80 <SecureElementInit+0x34>)
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f00a fed6 	bl	8018a1e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	200007a8 	.word	0x200007a8
 800dc80:	0801e754 	.word	0x0801e754

0800dc84 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800dc92:	f107 030c 	add.w	r3, r7, #12
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 faae 	bl	800e1f8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800dc9c:	f107 0308 	add.w	r3, r7, #8
 800dca0:	4619      	mov	r1, r3
 800dca2:	2001      	movs	r0, #1
 800dca4:	f000 fb0a 	bl	800e2bc <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d024      	beq.n	800dcf8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75bb      	strb	r3, [r7, #22]
 800dcb6:	e00c      	b.n	800dcd2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800dcb8:	7dbb      	ldrb	r3, [r7, #22]
 800dcba:	3318      	adds	r3, #24
 800dcbc:	443b      	add	r3, r7
 800dcbe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	75fb      	strb	r3, [r7, #23]
                break;
 800dcca:	e005      	b.n	800dcd8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800dccc:	7dbb      	ldrb	r3, [r7, #22]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	75bb      	strb	r3, [r7, #22]
 800dcd2:	7dbb      	ldrb	r3, [r7, #22]
 800dcd4:	2b07      	cmp	r3, #7
 800dcd6:	d9ef      	bls.n	800dcb8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	f083 0301 	eor.w	r3, r3, #1
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d009      	beq.n	800dcf8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800dce4:	f107 020c 	add.w	r2, r7, #12
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4610      	mov	r0, r2
 800dcec:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800dcee:	f107 030c 	add.w	r3, r7, #12
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 fa68 	bl	800e1c8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00c      	beq.n	800dd18 <SecureElementInitMcuID+0x94>
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d109      	bne.n	800dd18 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800dd04:	f107 0208 	add.w	r2, r7, #8
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	4610      	mov	r0, r2
 800dd0c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	4619      	mov	r1, r3
 800dd12:	2001      	movs	r0, #1
 800dd14:	f000 fab8 	bl	800e288 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	6039      	str	r1, [r7, #0]
 800dd2e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]
 800dd34:	e01a      	b.n	800dd6c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dd36:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <SecureElementGetKeyByID+0x5c>)
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	7bfa      	ldrb	r2, [r7, #15]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	011b      	lsls	r3, r3, #4
 800dd40:	4413      	add	r3, r2
 800dd42:	440b      	add	r3, r1
 800dd44:	3318      	adds	r3, #24
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	79fa      	ldrb	r2, [r7, #7]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d10b      	bne.n	800dd66 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800dd4e:	4b0c      	ldr	r3, [pc, #48]	; (800dd80 <SecureElementGetKeyByID+0x5c>)
 800dd50:	6819      	ldr	r1, [r3, #0]
 800dd52:	7bfa      	ldrb	r2, [r7, #15]
 800dd54:	4613      	mov	r3, r2
 800dd56:	011b      	lsls	r3, r3, #4
 800dd58:	4413      	add	r3, r2
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	18ca      	adds	r2, r1, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e006      	b.n	800dd74 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b0a      	cmp	r3, #10
 800dd70:	d9e1      	bls.n	800dd36 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd72:	2303      	movs	r3, #3
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bc80      	pop	{r7}
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	200007a8 	.word	0x200007a8

0800dd84 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800dd88:	2000      	movs	r0, #0
 800dd8a:	f7ff fdab 	bl	800d8e4 <PrintKey>
    PrintKey( NWK_KEY );
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f7ff fda8 	bl	800d8e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800dd94:	2009      	movs	r0, #9
 800dd96:	f7ff fda5 	bl	800d8e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800dd9a:	2008      	movs	r0, #8
 800dd9c:	f7ff fda2 	bl	800d8e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800dda0:	2000      	movs	r0, #0
 800dda2:	f7ff fe2d 	bl	800da00 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800ddb6:	200b      	movs	r0, #11
 800ddb8:	f7ff fd94 	bl	800d8e4 <PrintKey>
    PrintKey( MC_KE_KEY );
 800ddbc:	200c      	movs	r0, #12
 800ddbe:	f7ff fd91 	bl	800d8e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800ddc2:	2009      	movs	r0, #9
 800ddc4:	f7ff fd8e 	bl	800d8e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ddc8:	2008      	movs	r0, #8
 800ddca:	f7ff fd8b 	bl	800d8e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ddce:	200a      	movs	r0, #10
 800ddd0:	f7ff fd88 	bl	800d8e4 <PrintKey>
    PrintIds( mode );
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff fe12 	bl	800da00 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
	...

0800dde8 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b088      	sub	sp, #32
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	6039      	str	r1, [r7, #0]
 800ddf2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	e04c      	b.n	800de98 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ddfe:	2300      	movs	r3, #0
 800de00:	77fb      	strb	r3, [r7, #31]
 800de02:	e045      	b.n	800de90 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800de04:	4b26      	ldr	r3, [pc, #152]	; (800dea0 <SecureElementSetKey+0xb8>)
 800de06:	6819      	ldr	r1, [r3, #0]
 800de08:	7ffa      	ldrb	r2, [r7, #31]
 800de0a:	4613      	mov	r3, r2
 800de0c:	011b      	lsls	r3, r3, #4
 800de0e:	4413      	add	r3, r2
 800de10:	440b      	add	r3, r1
 800de12:	3318      	adds	r3, #24
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	79fa      	ldrb	r2, [r7, #7]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d136      	bne.n	800de8a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	2b0d      	cmp	r3, #13
 800de20:	d123      	bne.n	800de6a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800de22:	2306      	movs	r3, #6
 800de24:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	f107 0310 	add.w	r3, r7, #16
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	605a      	str	r2, [r3, #4]
 800de34:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800de36:	f107 030c 	add.w	r3, r7, #12
 800de3a:	220c      	movs	r2, #12
 800de3c:	2110      	movs	r1, #16
 800de3e:	6838      	ldr	r0, [r7, #0]
 800de40:	f000 f876 	bl	800df30 <SecureElementAesEncrypt>
 800de44:	4603      	mov	r3, r0
 800de46:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800de48:	4b15      	ldr	r3, [pc, #84]	; (800dea0 <SecureElementSetKey+0xb8>)
 800de4a:	6819      	ldr	r1, [r3, #0]
 800de4c:	7ffa      	ldrb	r2, [r7, #31]
 800de4e:	4613      	mov	r3, r2
 800de50:	011b      	lsls	r3, r3, #4
 800de52:	4413      	add	r3, r2
 800de54:	3318      	adds	r3, #24
 800de56:	440b      	add	r3, r1
 800de58:	3301      	adds	r3, #1
 800de5a:	f107 010c 	add.w	r1, r7, #12
 800de5e:	2210      	movs	r2, #16
 800de60:	4618      	mov	r0, r3
 800de62:	f00a fddc 	bl	8018a1e <memcpy1>
                return retval;
 800de66:	7fbb      	ldrb	r3, [r7, #30]
 800de68:	e016      	b.n	800de98 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800de6a:	4b0d      	ldr	r3, [pc, #52]	; (800dea0 <SecureElementSetKey+0xb8>)
 800de6c:	6819      	ldr	r1, [r3, #0]
 800de6e:	7ffa      	ldrb	r2, [r7, #31]
 800de70:	4613      	mov	r3, r2
 800de72:	011b      	lsls	r3, r3, #4
 800de74:	4413      	add	r3, r2
 800de76:	3318      	adds	r3, #24
 800de78:	440b      	add	r3, r1
 800de7a:	3301      	adds	r3, #1
 800de7c:	2210      	movs	r2, #16
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f00a fdcc 	bl	8018a1e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800de86:	2300      	movs	r3, #0
 800de88:	e006      	b.n	800de98 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800de8a:	7ffb      	ldrb	r3, [r7, #31]
 800de8c:	3301      	adds	r3, #1
 800de8e:	77fb      	strb	r3, [r7, #31]
 800de90:	7ffb      	ldrb	r3, [r7, #31]
 800de92:	2b0a      	cmp	r3, #10
 800de94:	d9b6      	bls.n	800de04 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800de96:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3720      	adds	r7, #32
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	200007a8 	.word	0x200007a8

0800dea4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af02      	add	r7, sp, #8
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
 800deb0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	2b0b      	cmp	r3, #11
 800deb6:	d901      	bls.n	800debc <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800deb8:	2303      	movs	r3, #3
 800deba:	e009      	b.n	800ded0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800debc:	78fa      	ldrb	r2, [r7, #3]
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	4613      	mov	r3, r2
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fe37 	bl	800db3c <ComputeCmac>
 800dece:	4603      	mov	r3, r0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af02      	add	r7, sp, #8
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800deec:	2302      	movs	r3, #2
 800deee:	e01b      	b.n	800df28 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800def0:	2306      	movs	r3, #6
 800def2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800def4:	2300      	movs	r3, #0
 800def6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800def8:	78fa      	ldrb	r2, [r7, #3]
 800defa:	f107 0310 	add.w	r3, r7, #16
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	4613      	mov	r3, r2
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	68f9      	ldr	r1, [r7, #12]
 800df06:	2000      	movs	r0, #0
 800df08:	f7ff fe18 	bl	800db3c <ComputeCmac>
 800df0c:	4603      	mov	r3, r0
 800df0e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800df16:	7dfb      	ldrb	r3, [r7, #23]
 800df18:	e006      	b.n	800df28 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d001      	beq.n	800df26 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800df22:	2301      	movs	r3, #1
 800df24:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800df26:	7dfb      	ldrb	r3, [r7, #23]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3718      	adds	r7, #24
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b0c2      	sub	sp, #264	; 0x108
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800df3c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800df40:	6001      	str	r1, [r0, #0]
 800df42:	4611      	mov	r1, r2
 800df44:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800df48:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df52:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800df56:	460a      	mov	r2, r1
 800df58:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d006      	beq.n	800df6e <SecureElementAesEncrypt+0x3e>
 800df60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d101      	bne.n	800df72 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df6e:	2302      	movs	r3, #2
 800df70:	e059      	b.n	800e026 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800df72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f003 030f 	and.w	r3, r3, #15
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800df84:	2305      	movs	r3, #5
 800df86:	e04e      	b.n	800e026 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	22f0      	movs	r2, #240	; 0xf0
 800df8e:	2100      	movs	r1, #0
 800df90:	4618      	mov	r0, r3
 800df92:	f00a fd7f 	bl	8018a94 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800df96:	f107 0210 	add.w	r2, r7, #16
 800df9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df9e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fd98 	bl	800dadc <GetKeyByID>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dfb2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d133      	bne.n	800e022 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	f107 0214 	add.w	r2, r7, #20
 800dfc2:	2110      	movs	r1, #16
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7ff fb65 	bl	800d694 <lorawan_aes_set_key>

        uint8_t block = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800dfd0:	e020      	b.n	800e014 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800dfd2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	18d0      	adds	r0, r2, r3
 800dfda:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dfde:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800dfe2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800dfe6:	6812      	ldr	r2, [r2, #0]
 800dfe8:	4413      	add	r3, r2
 800dfea:	f107 0214 	add.w	r2, r7, #20
 800dfee:	4619      	mov	r1, r3
 800dff0:	f7ff fc2e 	bl	800d850 <lorawan_aes_encrypt>
            block = block + 16;
 800dff4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dff8:	3310      	adds	r3, #16
 800dffa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800dffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e002:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e006:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e00a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800e00e:	6812      	ldr	r2, [r2, #0]
 800e010:	3a10      	subs	r2, #16
 800e012:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800e014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e018:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1d7      	bne.n	800dfd2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800e022:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800e026:	4618      	mov	r0, r3
 800e028:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
 800e03c:	4613      	mov	r3, r2
 800e03e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e046:	2302      	movs	r3, #2
 800e048:	e02e      	b.n	800e0a8 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800e04a:	2306      	movs	r3, #6
 800e04c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e04e:	78bb      	ldrb	r3, [r7, #2]
 800e050:	2b0c      	cmp	r3, #12
 800e052:	d104      	bne.n	800e05e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e054:	78fb      	ldrb	r3, [r7, #3]
 800e056:	2b0b      	cmp	r3, #11
 800e058:	d001      	beq.n	800e05e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e05a:	2303      	movs	r3, #3
 800e05c:	e024      	b.n	800e0a8 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	f107 0310 	add.w	r3, r7, #16
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	605a      	str	r2, [r3, #4]
 800e06c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e06e:	f107 030c 	add.w	r3, r7, #12
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	2110      	movs	r1, #16
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff ff5a 	bl	800df30 <SecureElementAesEncrypt>
 800e07c:	4603      	mov	r3, r0
 800e07e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e080:	7ffb      	ldrb	r3, [r7, #31]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800e086:	7ffb      	ldrb	r3, [r7, #31]
 800e088:	e00e      	b.n	800e0a8 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800e08a:	f107 020c 	add.w	r2, r7, #12
 800e08e:	78bb      	ldrb	r3, [r7, #2]
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff fea8 	bl	800dde8 <SecureElementSetKey>
 800e098:	4603      	mov	r3, r0
 800e09a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e09c:	7ffb      	ldrb	r3, [r7, #31]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800e0a2:	7ffb      	ldrb	r3, [r7, #31]
 800e0a4:	e000      	b.n	800e0a8 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e0a6:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3720      	adds	r7, #32
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607b      	str	r3, [r7, #4]
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	73fb      	strb	r3, [r7, #15]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d005      	beq.n	800e0d4 <SecureElementProcessJoinAccept+0x24>
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <SecureElementProcessJoinAccept+0x24>
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e0d4:	2302      	movs	r3, #2
 800e0d6:	e05c      	b.n	800e192 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e0d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0dc:	2b21      	cmp	r3, #33	; 0x21
 800e0de:	d901      	bls.n	800e0e4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e0e0:	2305      	movs	r3, #5
 800e0e2:	e056      	b.n	800e192 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e0e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f4:	f00a fc93 	bl	8018a1e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	1c58      	adds	r0, r3, #1
 800e0fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e100:	3b01      	subs	r3, #1
 800e102:	4619      	mov	r1, r3
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	3301      	adds	r3, #1
 800e108:	7dfa      	ldrb	r2, [r7, #23]
 800e10a:	f7ff ff11 	bl	800df30 <SecureElementAesEncrypt>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e114:	2307      	movs	r3, #7
 800e116:	e03c      	b.n	800e192 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	330b      	adds	r3, #11
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	09db      	lsrs	r3, r3, #7
 800e120:	b2da      	uxtb	r2, r3
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e12a:	3b04      	subs	r3, #4
 800e12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e12e:	4413      	add	r3, r2
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	4619      	mov	r1, r3
 800e134:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e138:	3b03      	subs	r3, #3
 800e13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13c:	4413      	add	r3, r2
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	021b      	lsls	r3, r3, #8
 800e142:	ea41 0203 	orr.w	r2, r1, r3
 800e146:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e14a:	3b02      	subs	r3, #2
 800e14c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e14e:	440b      	add	r3, r1
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	041b      	lsls	r3, r3, #16
 800e154:	431a      	orrs	r2, r3
 800e156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e15e:	440b      	add	r3, r1
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	061b      	lsls	r3, r3, #24
 800e164:	4313      	orrs	r3, r2
 800e166:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10d      	bne.n	800e18c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e170:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e174:	3b04      	subs	r3, #4
 800e176:	4619      	mov	r1, r3
 800e178:	2301      	movs	r3, #1
 800e17a:	693a      	ldr	r2, [r7, #16]
 800e17c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e17e:	f7ff feab 	bl	800ded8 <SecureElementVerifyAesCmac>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d003      	beq.n	800e190 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e188:	2301      	movs	r3, #1
 800e18a:	e002      	b.n	800e192 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e18c:	2304      	movs	r3, #4
 800e18e:	e000      	b.n	800e192 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
	...

0800e19c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	e006      	b.n	800e1bc <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800e1ae:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <SecureElementRandomNumber+0x28>)
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	4798      	blx	r3
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	0801e604 	.word	0x0801e604

0800e1c8 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	e007      	b.n	800e1ea <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e1da:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <SecureElementSetDevEui+0x2c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2208      	movs	r2, #8
 800e1e0:	6879      	ldr	r1, [r7, #4]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f00a fc1b 	bl	8018a1e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e1e8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	200007a8 	.word	0x200007a8

0800e1f8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e206:	2302      	movs	r3, #2
 800e208:	e007      	b.n	800e21a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e20a:	4b06      	ldr	r3, [pc, #24]	; (800e224 <SecureElementGetDevEui+0x2c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2208      	movs	r2, #8
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f00a fc03 	bl	8018a1e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e218:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	200007a8 	.word	0x200007a8

0800e228 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e236:	2302      	movs	r3, #2
 800e238:	e008      	b.n	800e24c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e23a:	4b06      	ldr	r3, [pc, #24]	; (800e254 <SecureElementSetJoinEui+0x2c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3308      	adds	r3, #8
 800e240:	2208      	movs	r2, #8
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	4618      	mov	r0, r3
 800e246:	f00a fbea 	bl	8018a1e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e24a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	200007a8 	.word	0x200007a8

0800e258 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e266:	2302      	movs	r3, #2
 800e268:	e008      	b.n	800e27c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e26a:	4b06      	ldr	r3, [pc, #24]	; (800e284 <SecureElementGetJoinEui+0x2c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	3308      	adds	r3, #8
 800e270:	2208      	movs	r2, #8
 800e272:	4619      	mov	r1, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f00a fbd2 	bl	8018a1e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e27a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	200007a8 	.word	0x200007a8

0800e288 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	6039      	str	r1, [r7, #0]
 800e292:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e294:	79fb      	ldrb	r3, [r7, #7]
 800e296:	2b02      	cmp	r3, #2
 800e298:	d104      	bne.n	800e2a4 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e29a:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <SecureElementSetDevAddr+0x30>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	611a      	str	r2, [r3, #16]
 800e2a2:	e003      	b.n	800e2ac <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e2a4:	4b04      	ldr	r3, [pc, #16]	; (800e2b8 <SecureElementSetDevAddr+0x30>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e2ac:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bc80      	pop	{r7}
 800e2b6:	4770      	bx	lr
 800e2b8:	200007a8 	.word	0x200007a8

0800e2bc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d101      	bne.n	800e2d2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	e00e      	b.n	800e2f0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d105      	bne.n	800e2e4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e2d8:	4b08      	ldr	r3, [pc, #32]	; (800e2fc <SecureElementGetDevAddr+0x40>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	691a      	ldr	r2, [r3, #16]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	e004      	b.n	800e2ee <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e2e4:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <SecureElementGetDevAddr+0x40>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	695a      	ldr	r2, [r3, #20]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e2ee:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bc80      	pop	{r7}
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	200007a8 	.word	0x200007a8

0800e300 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e30a:	4a22      	ldr	r2, [pc, #136]	; (800e394 <LmHandlerInit+0x94>)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e310:	4b21      	ldr	r3, [pc, #132]	; (800e398 <LmHandlerInit+0x98>)
 800e312:	4a22      	ldr	r2, [pc, #136]	; (800e39c <LmHandlerInit+0x9c>)
 800e314:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e316:	4b20      	ldr	r3, [pc, #128]	; (800e398 <LmHandlerInit+0x98>)
 800e318:	4a21      	ldr	r2, [pc, #132]	; (800e3a0 <LmHandlerInit+0xa0>)
 800e31a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e31c:	4b1e      	ldr	r3, [pc, #120]	; (800e398 <LmHandlerInit+0x98>)
 800e31e:	4a21      	ldr	r2, [pc, #132]	; (800e3a4 <LmHandlerInit+0xa4>)
 800e320:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e322:	4b1d      	ldr	r3, [pc, #116]	; (800e398 <LmHandlerInit+0x98>)
 800e324:	4a20      	ldr	r2, [pc, #128]	; (800e3a8 <LmHandlerInit+0xa8>)
 800e326:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e328:	4b1a      	ldr	r3, [pc, #104]	; (800e394 <LmHandlerInit+0x94>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a1f      	ldr	r2, [pc, #124]	; (800e3ac <LmHandlerInit+0xac>)
 800e330:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e332:	4b18      	ldr	r3, [pc, #96]	; (800e394 <LmHandlerInit+0x94>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	4a1c      	ldr	r2, [pc, #112]	; (800e3ac <LmHandlerInit+0xac>)
 800e33a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e33c:	4b15      	ldr	r3, [pc, #84]	; (800e394 <LmHandlerInit+0x94>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	4a1a      	ldr	r2, [pc, #104]	; (800e3ac <LmHandlerInit+0xac>)
 800e344:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800e346:	4b13      	ldr	r3, [pc, #76]	; (800e394 <LmHandlerInit+0x94>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	4a17      	ldr	r2, [pc, #92]	; (800e3ac <LmHandlerInit+0xac>)
 800e34e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e350:	4b16      	ldr	r3, [pc, #88]	; (800e3ac <LmHandlerInit+0xac>)
 800e352:	4a17      	ldr	r2, [pc, #92]	; (800e3b0 <LmHandlerInit+0xb0>)
 800e354:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e356:	4b0f      	ldr	r3, [pc, #60]	; (800e394 <LmHandlerInit+0x94>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	4a13      	ldr	r2, [pc, #76]	; (800e3ac <LmHandlerInit+0xac>)
 800e35e:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800e360:	4914      	ldr	r1, [pc, #80]	; (800e3b4 <LmHandlerInit+0xb4>)
 800e362:	2000      	movs	r0, #0
 800e364:	f000 fd44 	bl	800edf0 <LmHandlerPackageRegister>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800e36e:	f04f 33ff 	mov.w	r3, #4294967295
 800e372:	e00a      	b.n	800e38a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800e374:	463b      	mov	r3, r7
 800e376:	4618      	mov	r0, r3
 800e378:	f001 fa30 	bl	800f7dc <LmhpPackagesRegistrationInit>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800e382:	f04f 33ff 	mov.w	r3, #4294967295
 800e386:	e000      	b.n	800e38a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	200007f0 	.word	0x200007f0
 800e398:	200007f4 	.word	0x200007f4
 800e39c:	0800eab5 	.word	0x0800eab5
 800e3a0:	0800eb29 	.word	0x0800eb29
 800e3a4:	0800ec09 	.word	0x0800ec09
 800e3a8:	0800ed5d 	.word	0x0800ed5d
 800e3ac:	20000804 	.word	0x20000804
 800e3b0:	0800f1b1 	.word	0x0800f1b1
 800e3b4:	2000009c 	.word	0x2000009c

0800e3b8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b090      	sub	sp, #64	; 0x40
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800e3c0:	2218      	movs	r2, #24
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	4852      	ldr	r0, [pc, #328]	; (800e510 <LmHandlerConfigure+0x158>)
 800e3c6:	f00a fb2a 	bl	8018a1e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e3ca:	f7fe faa1 	bl	800c910 <LoraInfo_GetPtr>
 800e3ce:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800e3d0:	4b4f      	ldr	r3, [pc, #316]	; (800e510 <LmHandlerConfigure+0x158>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4093      	lsls	r3, r2
 800e3da:	461a      	mov	r2, r3
 800e3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800e3e6:	4b4b      	ldr	r3, [pc, #300]	; (800e514 <LmHandlerConfigure+0x15c>)
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	f00e febb 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800e3f2:	e7fe      	b.n	800e3f2 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800e3f4:	4b46      	ldr	r3, [pc, #280]	; (800e510 <LmHandlerConfigure+0x158>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4947      	ldr	r1, [pc, #284]	; (800e518 <LmHandlerConfigure+0x160>)
 800e3fc:	4847      	ldr	r0, [pc, #284]	; (800e51c <LmHandlerConfigure+0x164>)
 800e3fe:	f004 fbc3 	bl	8012b88 <LoRaMacInitialization>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800e408:	f04f 33ff 	mov.w	r3, #4294967295
 800e40c:	e07c      	b.n	800e508 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e40e:	2305      	movs	r3, #5
 800e410:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e412:	2300      	movs	r3, #0
 800e414:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e416:	f107 0314 	add.w	r3, r7, #20
 800e41a:	4618      	mov	r0, r3
 800e41c:	f005 f902 	bl	8013624 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e420:	4b3d      	ldr	r3, [pc, #244]	; (800e518 <LmHandlerConfigure+0x160>)
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	4a3c      	ldr	r2, [pc, #240]	; (800e518 <LmHandlerConfigure+0x160>)
 800e426:	68d2      	ldr	r2, [r2, #12]
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff fc2a 	bl	800dc84 <SecureElementInitMcuID>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800e436:	f04f 33ff 	mov.w	r3, #4294967295
 800e43a:	e065      	b.n	800e508 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e43c:	2306      	movs	r3, #6
 800e43e:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e440:	f107 0314 	add.w	r3, r7, #20
 800e444:	4618      	mov	r0, r3
 800e446:	f004 ff37 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	4a34      	ldr	r2, [pc, #208]	; (800e520 <LmHandlerConfigure+0x168>)
 800e44e:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e450:	f107 0314 	add.w	r3, r7, #20
 800e454:	4618      	mov	r0, r3
 800e456:	f005 f8e5 	bl	8013624 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e45a:	2302      	movs	r3, #2
 800e45c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e45e:	4b30      	ldr	r3, [pc, #192]	; (800e520 <LmHandlerConfigure+0x168>)
 800e460:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e462:	f107 0314 	add.w	r3, r7, #20
 800e466:	4618      	mov	r0, r3
 800e468:	f004 ff26 	bl	80132b8 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e46c:	2303      	movs	r3, #3
 800e46e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e470:	4b2c      	ldr	r3, [pc, #176]	; (800e524 <LmHandlerConfigure+0x16c>)
 800e472:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e474:	f107 0314 	add.w	r3, r7, #20
 800e478:	4618      	mov	r0, r3
 800e47a:	f004 ff1d 	bl	80132b8 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e47e:	f7ff fc81 	bl	800dd84 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e482:	230f      	movs	r3, #15
 800e484:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e486:	2301      	movs	r3, #1
 800e488:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e48a:	f107 0314 	add.w	r3, r7, #20
 800e48e:	4618      	mov	r0, r3
 800e490:	f005 f8c8 	bl	8013624 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e494:	2310      	movs	r3, #16
 800e496:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e498:	2300      	movs	r3, #0
 800e49a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e49c:	f107 0314 	add.w	r3, r7, #20
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f005 f8bf 	bl	8013624 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e4a6:	2304      	movs	r3, #4
 800e4a8:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e4aa:	4b19      	ldr	r3, [pc, #100]	; (800e510 <LmHandlerConfigure+0x158>)
 800e4ac:	789b      	ldrb	r3, [r3, #2]
 800e4ae:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e4b0:	f107 0314 	add.w	r3, r7, #20
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f005 f8b5 	bl	8013624 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e4ba:	2339      	movs	r3, #57	; 0x39
 800e4bc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e4be:	4b14      	ldr	r3, [pc, #80]	; (800e510 <LmHandlerConfigure+0x158>)
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e4c4:	f107 0314 	add.w	r3, r7, #20
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f005 f8ab 	bl	8013624 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e4ce:	230f      	movs	r3, #15
 800e4d0:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e4d2:	4b0f      	ldr	r3, [pc, #60]	; (800e510 <LmHandlerConfigure+0x158>)
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	f107 020c 	add.w	r2, r7, #12
 800e4da:	4611      	mov	r1, r2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f007 ff84 	bl	80163ea <RegionGetPhyParam>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	bf14      	ite	ne
 800e4ec:	2301      	movne	r3, #1
 800e4ee:	2300      	moveq	r3, #0
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	4b07      	ldr	r3, [pc, #28]	; (800e510 <LmHandlerConfigure+0x158>)
 800e4f4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e4f6:	2014      	movs	r0, #20
 800e4f8:	f000 fac4 	bl	800ea84 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e4fc:	4b04      	ldr	r3, [pc, #16]	; (800e510 <LmHandlerConfigure+0x158>)
 800e4fe:	79db      	ldrb	r3, [r3, #7]
 800e500:	4618      	mov	r0, r3
 800e502:	f005 fe6b 	bl	80141dc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3740      	adds	r7, #64	; 0x40
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	200007d8 	.word	0x200007d8
 800e514:	0801ded8 	.word	0x0801ded8
 800e518:	20000804 	.word	0x20000804
 800e51c:	200007f4 	.word	0x200007f4
 800e520:	200007ac 	.word	0x200007ac
 800e524:	200007b4 	.word	0x200007b4

0800e528 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e52c:	f002 fb36 	bl	8010b9c <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e530:	f000 fd9c 	bl	800f06c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e534:	f000 fd6c 	bl	800f010 <LmHandlerPackageIsTxPending>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e540:	b480      	push	{r7}
 800e542:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e544:	4b02      	ldr	r3, [pc, #8]	; (800e550 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e546:	681b      	ldr	r3, [r3, #0]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bc80      	pop	{r7}
 800e54e:	4770      	bx	lr
 800e550:	2000081c 	.word	0x2000081c

0800e554 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b092      	sub	sp, #72	; 0x48
 800e558:	af00      	add	r7, sp, #0
 800e55a:	4603      	mov	r3, r0
 800e55c:	460a      	mov	r2, r1
 800e55e:	71fb      	strb	r3, [r7, #7]
 800e560:	4613      	mov	r3, r2
 800e562:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e564:	2301      	movs	r3, #1
 800e566:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e56a:	4b47      	ldr	r3, [pc, #284]	; (800e688 <LmHandlerJoin+0x134>)
 800e56c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800e576:	4b44      	ldr	r3, [pc, #272]	; (800e688 <LmHandlerJoin+0x134>)
 800e578:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e57c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	2b02      	cmp	r3, #2
 800e584:	d110      	bne.n	800e5a8 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e586:	2302      	movs	r3, #2
 800e588:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e58c:	4b3f      	ldr	r3, [pc, #252]	; (800e68c <LmHandlerJoin+0x138>)
 800e58e:	2202      	movs	r2, #2
 800e590:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800e592:	4a3e      	ldr	r2, [pc, #248]	; (800e68c <LmHandlerJoin+0x138>)
 800e594:	79bb      	ldrb	r3, [r7, #6]
 800e596:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800e598:	f004 fda8 	bl	80130ec <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800e59c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f005 fbd3 	bl	8013d4c <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800e5a6:	e06b      	b.n	800e680 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e5ae:	4b37      	ldr	r3, [pc, #220]	; (800e68c <LmHandlerJoin+0x138>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e5b4:	4b34      	ldr	r3, [pc, #208]	; (800e688 <LmHandlerJoin+0x134>)
 800e5b6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e5ba:	4b34      	ldr	r3, [pc, #208]	; (800e68c <LmHandlerJoin+0x138>)
 800e5bc:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800e5be:	4b32      	ldr	r3, [pc, #200]	; (800e688 <LmHandlerJoin+0x134>)
 800e5c0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800e5c4:	4b31      	ldr	r3, [pc, #196]	; (800e68c <LmHandlerJoin+0x138>)
 800e5c6:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5c8:	4b30      	ldr	r3, [pc, #192]	; (800e68c <LmHandlerJoin+0x138>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e5ce:	4a2f      	ldr	r2, [pc, #188]	; (800e68c <LmHandlerJoin+0x138>)
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800e5d4:	4b2e      	ldr	r3, [pc, #184]	; (800e690 <LmHandlerJoin+0x13c>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f083 0301 	eor.w	r3, r3, #1
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d034      	beq.n	800e64c <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e5e2:	231e      	movs	r3, #30
 800e5e4:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e5e6:	4b28      	ldr	r3, [pc, #160]	; (800e688 <LmHandlerJoin+0x134>)
 800e5e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e5ec:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e5ee:	f107 030c 	add.w	r3, r7, #12
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f005 f816 	bl	8013624 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e5f8:	231f      	movs	r3, #31
 800e5fa:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e5fc:	4b22      	ldr	r3, [pc, #136]	; (800e688 <LmHandlerJoin+0x134>)
 800e5fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e602:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e604:	f107 030c 	add.w	r3, r7, #12
 800e608:	4618      	mov	r0, r3
 800e60a:	f005 f80b 	bl	8013624 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800e60e:	2321      	movs	r3, #33	; 0x21
 800e610:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800e612:	4b1d      	ldr	r3, [pc, #116]	; (800e688 <LmHandlerJoin+0x134>)
 800e614:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e618:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e61a:	f107 030c 	add.w	r3, r7, #12
 800e61e:	4618      	mov	r0, r3
 800e620:	f005 f800 	bl	8013624 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e624:	2320      	movs	r3, #32
 800e626:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800e628:	4b17      	ldr	r3, [pc, #92]	; (800e688 <LmHandlerJoin+0x134>)
 800e62a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e62e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e630:	f107 030c 	add.w	r3, r7, #12
 800e634:	4618      	mov	r0, r3
 800e636:	f004 fff5 	bl	8013624 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e63a:	2328      	movs	r3, #40	; 0x28
 800e63c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e63e:	4b15      	ldr	r3, [pc, #84]	; (800e694 <LmHandlerJoin+0x140>)
 800e640:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e642:	f107 030c 	add.w	r3, r7, #12
 800e646:	4618      	mov	r0, r3
 800e648:	f004 ffec 	bl	8013624 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800e64c:	f004 fd4e 	bl	80130ec <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e650:	2301      	movs	r3, #1
 800e652:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e654:	2301      	movs	r3, #1
 800e656:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e658:	f107 030c 	add.w	r3, r7, #12
 800e65c:	4618      	mov	r0, r3
 800e65e:	f004 ffe1 	bl	8013624 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e662:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <LmHandlerJoin+0x144>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d004      	beq.n	800e676 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e66c:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <LmHandlerJoin+0x144>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e672:	4806      	ldr	r0, [pc, #24]	; (800e68c <LmHandlerJoin+0x138>)
 800e674:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e676:	4b04      	ldr	r3, [pc, #16]	; (800e688 <LmHandlerJoin+0x134>)
 800e678:	785b      	ldrb	r3, [r3, #1]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 f932 	bl	800e8e4 <LmHandlerRequestClass>
}
 800e680:	bf00      	nop
 800e682:	3748      	adds	r7, #72	; 0x48
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200007d8 	.word	0x200007d8
 800e68c:	200000a8 	.word	0x200000a8
 800e690:	20000912 	.word	0x20000912
 800e694:	01000300 	.word	0x01000300
 800e698:	200007f0 	.word	0x200007f0

0800e69c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b08c      	sub	sp, #48	; 0x30
 800e6a0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e6a6:	1d3b      	adds	r3, r7, #4
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f004 fe05 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800e6b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d106      	bne.n	800e6ca <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e6bc:	7a3b      	ldrb	r3, [r7, #8]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e002      	b.n	800e6cc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e000      	b.n	800e6cc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e6ca:	2300      	movs	r3, #0
    }
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3730      	adds	r7, #48	; 0x30
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08a      	sub	sp, #40	; 0x28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e6e4:	23ff      	movs	r3, #255	; 0xff
 800e6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e6ea:	f001 ffe3 	bl	80106b4 <LoRaMacIsBusy>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e6f4:	f06f 0301 	mvn.w	r3, #1
 800e6f8:	e0be      	b.n	800e878 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800e6fa:	f001 fff7 	bl	80106ec <LoRaMacIsStopped>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e704:	f06f 0302 	mvn.w	r3, #2
 800e708:	e0b6      	b.n	800e878 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e70a:	f7ff ffc7 	bl	800e69c <LmHandlerJoinStatus>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b01      	cmp	r3, #1
 800e712:	d00a      	beq.n	800e72a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e714:	4b5a      	ldr	r3, [pc, #360]	; (800e880 <LmHandlerSend+0x1ac>)
 800e716:	79db      	ldrb	r3, [r3, #7]
 800e718:	4a59      	ldr	r2, [pc, #356]	; (800e880 <LmHandlerSend+0x1ac>)
 800e71a:	7a12      	ldrb	r2, [r2, #8]
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff ff18 	bl	800e554 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e724:	f06f 0302 	mvn.w	r3, #2
 800e728:	e0a6      	b.n	800e878 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800e72a:	4b56      	ldr	r3, [pc, #344]	; (800e884 <LmHandlerSend+0x1b0>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	4798      	blx	r3
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00d      	beq.n	800e754 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	4b51      	ldr	r3, [pc, #324]	; (800e884 <LmHandlerSend+0x1b0>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d006      	beq.n	800e754 <LmHandlerSend+0x80>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e74e:	f06f 0303 	mvn.w	r3, #3
 800e752:	e091      	b.n	800e878 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e754:	4a4c      	ldr	r2, [pc, #304]	; (800e888 <LmHandlerSend+0x1b4>)
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bf14      	ite	ne
 800e760:	2301      	movne	r3, #1
 800e762:	2300      	moveq	r3, #0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e768:	4b48      	ldr	r3, [pc, #288]	; (800e88c <LmHandlerSend+0x1b8>)
 800e76a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e76e:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	785b      	ldrb	r3, [r3, #1]
 800e774:	f107 020c 	add.w	r2, r7, #12
 800e778:	4611      	mov	r1, r2
 800e77a:	4618      	mov	r0, r3
 800e77c:	f004 fd16 	bl	80131ac <LoRaMacQueryTxPossible>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e786:	2300      	movs	r3, #0
 800e788:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e792:	23f9      	movs	r3, #249	; 0xf9
 800e794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e798:	e009      	b.n	800e7ae <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	785b      	ldrb	r3, [r3, #1]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e7ae:	4b36      	ldr	r3, [pc, #216]	; (800e888 <LmHandlerSend+0x1b4>)
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	3310      	adds	r3, #16
 800e7b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7b8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e7bc:	4b33      	ldr	r3, [pc, #204]	; (800e88c <LmHandlerSend+0x1b8>)
 800e7be:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e7c2:	4b31      	ldr	r3, [pc, #196]	; (800e888 <LmHandlerSend+0x1b4>)
 800e7c4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e7c6:	78ba      	ldrb	r2, [r7, #2]
 800e7c8:	f107 0310 	add.w	r3, r7, #16
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f005 fc0e 	bl	8013ff0 <LoRaMacMcpsRequest>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	4a2c      	ldr	r2, [pc, #176]	; (800e890 <LmHandlerSend+0x1bc>)
 800e7de:	6013      	str	r3, [r2, #0]

    switch( status )
 800e7e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7e4:	2b11      	cmp	r3, #17
 800e7e6:	d840      	bhi.n	800e86a <LmHandlerSend+0x196>
 800e7e8:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <LmHandlerSend+0x11c>)
 800e7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ee:	bf00      	nop
 800e7f0:	0800e839 	.word	0x0800e839
 800e7f4:	0800e84b 	.word	0x0800e84b
 800e7f8:	0800e86b 	.word	0x0800e86b
 800e7fc:	0800e86b 	.word	0x0800e86b
 800e800:	0800e86b 	.word	0x0800e86b
 800e804:	0800e86b 	.word	0x0800e86b
 800e808:	0800e86b 	.word	0x0800e86b
 800e80c:	0800e853 	.word	0x0800e853
 800e810:	0800e86b 	.word	0x0800e86b
 800e814:	0800e86b 	.word	0x0800e86b
 800e818:	0800e86b 	.word	0x0800e86b
 800e81c:	0800e863 	.word	0x0800e863
 800e820:	0800e86b 	.word	0x0800e86b
 800e824:	0800e86b 	.word	0x0800e86b
 800e828:	0800e84b 	.word	0x0800e84b
 800e82c:	0800e84b 	.word	0x0800e84b
 800e830:	0800e84b 	.word	0x0800e84b
 800e834:	0800e85b 	.word	0x0800e85b
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e83c:	f113 0f07 	cmn.w	r3, #7
 800e840:	d017      	beq.n	800e872 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e842:	2300      	movs	r3, #0
 800e844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e848:	e013      	b.n	800e872 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e84a:	23fe      	movs	r3, #254	; 0xfe
 800e84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e850:	e010      	b.n	800e874 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e852:	23fd      	movs	r3, #253	; 0xfd
 800e854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e858:	e00c      	b.n	800e874 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e85a:	23fb      	movs	r3, #251	; 0xfb
 800e85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e860:	e008      	b.n	800e874 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e862:	23fa      	movs	r3, #250	; 0xfa
 800e864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e868:	e004      	b.n	800e874 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e86a:	23ff      	movs	r3, #255	; 0xff
 800e86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e870:	e000      	b.n	800e874 <LmHandlerSend+0x1a0>
            break;
 800e872:	bf00      	nop
    }

    return lmhStatus;
 800e874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3728      	adds	r7, #40	; 0x28
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	200000a8 	.word	0x200000a8
 800e884:	200007c4 	.word	0x200007c4
 800e888:	200000b4 	.word	0x200000b4
 800e88c:	200007d8 	.word	0x200007d8
 800e890:	2000081c 	.word	0x2000081c

0800e894 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e89a:	230a      	movs	r3, #10
 800e89c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e89e:	463b      	mov	r3, r7
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f005 fa53 	bl	8013d4c <LoRaMacMlmeRequest>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	4a06      	ldr	r2, [pc, #24]	; (800e8c8 <LmHandlerDeviceTimeReq+0x34>)
 800e8ae:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e001      	b.n	800e8be <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e8ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	2000081c 	.word	0x2000081c

0800e8cc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e8d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bc80      	pop	{r7}
 800e8e2:	4770      	bx	lr

0800e8e4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08e      	sub	sp, #56	; 0x38
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800e8f4:	f001 fede 	bl	80106b4 <LoRaMacIsBusy>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d002      	beq.n	800e904 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e8fe:	f06f 0301 	mvn.w	r3, #1
 800e902:	e071      	b.n	800e9e8 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e904:	f7ff feca 	bl	800e69c <LmHandlerJoinStatus>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d002      	beq.n	800e914 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e90e:	f06f 0302 	mvn.w	r3, #2
 800e912:	e069      	b.n	800e9e8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e914:	2300      	movs	r3, #0
 800e916:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e918:	f107 030c 	add.w	r3, r7, #12
 800e91c:	4618      	mov	r0, r3
 800e91e:	f004 fccb 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e928:	f04f 33ff 	mov.w	r3, #4294967295
 800e92c:	e05c      	b.n	800e9e8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e92e:	7c3b      	ldrb	r3, [r7, #16]
 800e930:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e938:	79fb      	ldrb	r3, [r7, #7]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d052      	beq.n	800e9e4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d028      	beq.n	800e996 <LmHandlerRequestClass+0xb2>
 800e944:	2b02      	cmp	r3, #2
 800e946:	dc48      	bgt.n	800e9da <LmHandlerRequestClass+0xf6>
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <LmHandlerRequestClass+0x6e>
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d01e      	beq.n	800e98e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e950:	e043      	b.n	800e9da <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e952:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e956:	2b00      	cmp	r3, #0
 800e958:	d041      	beq.n	800e9de <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e95e:	f107 030c 	add.w	r3, r7, #12
 800e962:	4618      	mov	r0, r3
 800e964:	f004 fe5e 	bl	8013624 <LoRaMacMibSetRequestConfirm>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10b      	bne.n	800e986 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e96e:	4b20      	ldr	r3, [pc, #128]	; (800e9f0 <LmHandlerRequestClass+0x10c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e974:	2b00      	cmp	r3, #0
 800e976:	d032      	beq.n	800e9de <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e978:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <LmHandlerRequestClass+0x10c>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97e:	79fa      	ldrb	r2, [r7, #7]
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
                break;
 800e984:	e02b      	b.n	800e9de <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e986:	23ff      	movs	r3, #255	; 0xff
 800e988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e98c:	e027      	b.n	800e9de <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e98e:	23ff      	movs	r3, #255	; 0xff
 800e990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e994:	e026      	b.n	800e9e4 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e996:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d003      	beq.n	800e9a6 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e99e:	23ff      	movs	r3, #255	; 0xff
 800e9a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e9a4:	e01d      	b.n	800e9e2 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e9a6:	79fb      	ldrb	r3, [r7, #7]
 800e9a8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e9aa:	f107 030c 	add.w	r3, r7, #12
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f004 fe38 	bl	8013624 <LoRaMacMibSetRequestConfirm>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10b      	bne.n	800e9d2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <LmHandlerRequestClass+0x10c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00e      	beq.n	800e9e2 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e9c4:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <LmHandlerRequestClass+0x10c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ca:	79fa      	ldrb	r2, [r7, #7]
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4798      	blx	r3
                break;
 800e9d0:	e007      	b.n	800e9e2 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e9d2:	23ff      	movs	r3, #255	; 0xff
 800e9d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e9d8:	e003      	b.n	800e9e2 <LmHandlerRequestClass+0xfe>
                break;
 800e9da:	bf00      	nop
 800e9dc:	e002      	b.n	800e9e4 <LmHandlerRequestClass+0x100>
                break;
 800e9de:	bf00      	nop
 800e9e0:	e000      	b.n	800e9e4 <LmHandlerRequestClass+0x100>
                break;
 800e9e2:	bf00      	nop
        }
    }
    return errorStatus;
 800e9e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3738      	adds	r7, #56	; 0x38
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	200007f0 	.word	0x200007f0

0800e9f4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08c      	sub	sp, #48	; 0x30
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea02:	f04f 33ff 	mov.w	r3, #4294967295
 800ea06:	e010      	b.n	800ea2a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ea0c:	f107 0308 	add.w	r3, r7, #8
 800ea10:	4618      	mov	r0, r3
 800ea12:	f004 fc51 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea20:	e003      	b.n	800ea2a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ea22:	7b3a      	ldrb	r2, [r7, #12]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3730      	adds	r7, #48	; 0x30
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08c      	sub	sp, #48	; 0x30
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295
 800ea46:	e016      	b.n	800ea76 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ea48:	231f      	movs	r3, #31
 800ea4a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ea4c:	f107 0308 	add.w	r3, r7, #8
 800ea50:	4618      	mov	r0, r3
 800ea52:	f004 fc31 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea60:	e009      	b.n	800ea76 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ea62:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f993 2000 	ldrsb.w	r2, [r3]
 800ea70:	4b03      	ldr	r3, [pc, #12]	; (800ea80 <LmHandlerGetTxDatarate+0x4c>)
 800ea72:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3730      	adds	r7, #48	; 0x30
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	200007d8 	.word	0x200007d8

0800ea84 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08c      	sub	sp, #48	; 0x30
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ea8c:	2322      	movs	r3, #34	; 0x22
 800ea8e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ea94:	f107 0308 	add.w	r3, r7, #8
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f004 fdc3 	bl	8013624 <LoRaMacMibSetRequestConfirm>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	e000      	b.n	800eaac <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3730      	adds	r7, #48	; 0x30
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800eabc:	4b18      	ldr	r3, [pc, #96]	; (800eb20 <McpsConfirm+0x6c>)
 800eabe:	2201      	movs	r2, #1
 800eac0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	785a      	ldrb	r2, [r3, #1]
 800eac6:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <McpsConfirm+0x6c>)
 800eac8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	789b      	ldrb	r3, [r3, #2]
 800eace:	b25a      	sxtb	r2, r3
 800ead0:	4b13      	ldr	r3, [pc, #76]	; (800eb20 <McpsConfirm+0x6c>)
 800ead2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	4a11      	ldr	r2, [pc, #68]	; (800eb20 <McpsConfirm+0x6c>)
 800eada:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800eae2:	4b0f      	ldr	r3, [pc, #60]	; (800eb20 <McpsConfirm+0x6c>)
 800eae4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	b2da      	uxtb	r2, r3
 800eaec:	4b0c      	ldr	r3, [pc, #48]	; (800eb20 <McpsConfirm+0x6c>)
 800eaee:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	791b      	ldrb	r3, [r3, #4]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <McpsConfirm+0x6c>)
 800eaf8:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800eafa:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <McpsConfirm+0x70>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d004      	beq.n	800eb0e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800eb04:	4b07      	ldr	r3, [pc, #28]	; (800eb24 <McpsConfirm+0x70>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0a:	4805      	ldr	r0, [pc, #20]	; (800eb20 <McpsConfirm+0x6c>)
 800eb0c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800eb0e:	6879      	ldr	r1, [r7, #4]
 800eb10:	2000      	movs	r0, #0
 800eb12:	f000 f9eb 	bl	800eeec <LmHandlerPackagesNotify>
}
 800eb16:	bf00      	nop
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	200000b4 	.word	0x200000b4
 800eb24:	200007f0 	.word	0x200007f0

0800eb28 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800eb32:	2300      	movs	r3, #0
 800eb34:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800eb36:	4b32      	ldr	r3, [pc, #200]	; (800ec00 <McpsIndication+0xd8>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	785a      	ldrb	r2, [r3, #1]
 800eb40:	4b2f      	ldr	r3, [pc, #188]	; (800ec00 <McpsIndication+0xd8>)
 800eb42:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800eb44:	4b2e      	ldr	r3, [pc, #184]	; (800ec00 <McpsIndication+0xd8>)
 800eb46:	785b      	ldrb	r3, [r3, #1]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d155      	bne.n	800ebf8 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	791b      	ldrb	r3, [r3, #4]
 800eb50:	b25a      	sxtb	r2, r3
 800eb52:	4b2b      	ldr	r3, [pc, #172]	; (800ec00 <McpsIndication+0xd8>)
 800eb54:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb5c:	b25a      	sxtb	r2, r3
 800eb5e:	4b28      	ldr	r3, [pc, #160]	; (800ec00 <McpsIndication+0xd8>)
 800eb60:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800eb68:	4b25      	ldr	r3, [pc, #148]	; (800ec00 <McpsIndication+0xd8>)
 800eb6a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	78da      	ldrb	r2, [r3, #3]
 800eb70:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <McpsIndication+0xd8>)
 800eb72:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	4a21      	ldr	r2, [pc, #132]	; (800ec00 <McpsIndication+0xd8>)
 800eb7a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	78db      	ldrb	r3, [r3, #3]
 800eb80:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	7b1b      	ldrb	r3, [r3, #12]
 800eb86:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800eb8e:	4b1d      	ldr	r3, [pc, #116]	; (800ec04 <McpsIndication+0xdc>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d007      	beq.n	800eba8 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800eb98:	4b1a      	ldr	r3, [pc, #104]	; (800ec04 <McpsIndication+0xdc>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	f107 0218 	add.w	r2, r7, #24
 800eba2:	4917      	ldr	r1, [pc, #92]	; (800ec00 <McpsIndication+0xd8>)
 800eba4:	4610      	mov	r0, r2
 800eba6:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800eba8:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <McpsIndication+0xdc>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d007      	beq.n	800ebc2 <McpsIndication+0x9a>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	7e1b      	ldrb	r3, [r3, #24]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ebba:	4b12      	ldr	r3, [pc, #72]	; (800ec04 <McpsIndication+0xdc>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ebc2:	6879      	ldr	r1, [r7, #4]
 800ebc4:	2001      	movs	r0, #1
 800ebc6:	f000 f991 	bl	800eeec <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ebca:	f107 0317 	add.w	r3, r7, #23
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff ff10 	bl	800e9f4 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	795b      	ldrb	r3, [r3, #5]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00e      	beq.n	800ebfa <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ebdc:	2300      	movs	r3, #0
 800ebde:	733b      	strb	r3, [r7, #12]
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	737b      	strb	r3, [r7, #13]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ebe8:	f107 030c 	add.w	r3, r7, #12
 800ebec:	2201      	movs	r2, #1
 800ebee:	2100      	movs	r1, #0
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fd6f 	bl	800e6d4 <LmHandlerSend>
 800ebf6:	e000      	b.n	800ebfa <McpsIndication+0xd2>
        return;
 800ebf8:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	200000d0 	.word	0x200000d0
 800ec04:	200007f0 	.word	0x200007f0

0800ec08 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b08c      	sub	sp, #48	; 0x30
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ec10:	4b4a      	ldr	r3, [pc, #296]	; (800ed3c <MlmeConfirm+0x134>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	785a      	ldrb	r2, [r3, #1]
 800ec1a:	4b48      	ldr	r3, [pc, #288]	; (800ed3c <MlmeConfirm+0x134>)
 800ec1c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ec1e:	4b48      	ldr	r3, [pc, #288]	; (800ed40 <MlmeConfirm+0x138>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d004      	beq.n	800ec32 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ec28:	4b45      	ldr	r3, [pc, #276]	; (800ed40 <MlmeConfirm+0x138>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2e:	4843      	ldr	r0, [pc, #268]	; (800ed3c <MlmeConfirm+0x134>)
 800ec30:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	2002      	movs	r0, #2
 800ec36:	f000 f959 	bl	800eeec <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	2b0c      	cmp	r3, #12
 800ec42:	d874      	bhi.n	800ed2e <MlmeConfirm+0x126>
 800ec44:	a201      	add	r2, pc, #4	; (adr r2, 800ec4c <MlmeConfirm+0x44>)
 800ec46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4a:	bf00      	nop
 800ec4c:	0800ec81 	.word	0x0800ec81
 800ec50:	0800ed2f 	.word	0x0800ed2f
 800ec54:	0800ed2f 	.word	0x0800ed2f
 800ec58:	0800ed2f 	.word	0x0800ed2f
 800ec5c:	0800ecfd 	.word	0x0800ecfd
 800ec60:	0800ed2f 	.word	0x0800ed2f
 800ec64:	0800ed2f 	.word	0x0800ed2f
 800ec68:	0800ed2f 	.word	0x0800ed2f
 800ec6c:	0800ed2f 	.word	0x0800ed2f
 800ec70:	0800ed2f 	.word	0x0800ed2f
 800ec74:	0800ed2f 	.word	0x0800ed2f
 800ec78:	0800ed15 	.word	0x0800ed15
 800ec7c:	0800ed2f 	.word	0x0800ed2f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ec80:	2306      	movs	r3, #6
 800ec82:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ec84:	f107 0308 	add.w	r3, r7, #8
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f004 fb15 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ec8e:	4b2d      	ldr	r3, [pc, #180]	; (800ed44 <MlmeConfirm+0x13c>)
 800ec90:	79db      	ldrb	r3, [r3, #7]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	4611      	mov	r1, r2
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff faf6 	bl	800e288 <SecureElementSetDevAddr>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d102      	bne.n	800eca8 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4a28      	ldr	r2, [pc, #160]	; (800ed48 <MlmeConfirm+0x140>)
 800eca6:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800eca8:	4828      	ldr	r0, [pc, #160]	; (800ed4c <MlmeConfirm+0x144>)
 800ecaa:	f7ff fec3 	bl	800ea34 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800ecae:	4828      	ldr	r0, [pc, #160]	; (800ed50 <MlmeConfirm+0x148>)
 800ecb0:	f000 fa4e 	bl	800f150 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ecb4:	4b21      	ldr	r3, [pc, #132]	; (800ed3c <MlmeConfirm+0x134>)
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d108      	bne.n	800ecce <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ecbc:	4b21      	ldr	r3, [pc, #132]	; (800ed44 <MlmeConfirm+0x13c>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800ecc2:	4b24      	ldr	r3, [pc, #144]	; (800ed54 <MlmeConfirm+0x14c>)
 800ecc4:	785b      	ldrb	r3, [r3, #1]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff fe0c 	bl	800e8e4 <LmHandlerRequestClass>
 800eccc:	e002      	b.n	800ecd4 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ecce:	4b1d      	ldr	r3, [pc, #116]	; (800ed44 <MlmeConfirm+0x13c>)
 800ecd0:	22ff      	movs	r2, #255	; 0xff
 800ecd2:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800ecd4:	4b1a      	ldr	r3, [pc, #104]	; (800ed40 <MlmeConfirm+0x138>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d004      	beq.n	800ece8 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ecde:	4b18      	ldr	r3, [pc, #96]	; (800ed40 <MlmeConfirm+0x138>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	4817      	ldr	r0, [pc, #92]	; (800ed44 <MlmeConfirm+0x13c>)
 800ece6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ece8:	4b14      	ldr	r3, [pc, #80]	; (800ed3c <MlmeConfirm+0x134>)
 800ecea:	785b      	ldrb	r3, [r3, #1]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d120      	bne.n	800ed32 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800ecf0:	4b14      	ldr	r3, [pc, #80]	; (800ed44 <MlmeConfirm+0x13c>)
 800ecf2:	79db      	ldrb	r3, [r3, #7]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f859 	bl	800ddac <SecureElementPrintSessionKeys>
                }
            }
            break;
 800ecfa:	e01a      	b.n	800ed32 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800ecfc:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <MlmeConfirm+0x150>)
 800ecfe:	2201      	movs	r2, #1
 800ed00:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7a1a      	ldrb	r2, [r3, #8]
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <MlmeConfirm+0x150>)
 800ed08:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7a5a      	ldrb	r2, [r3, #9]
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <MlmeConfirm+0x150>)
 800ed10:	74da      	strb	r2, [r3, #19]
            }
            break;
 800ed12:	e00f      	b.n	800ed34 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d105      	bne.n	800ed28 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ed1c:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <MlmeConfirm+0x14c>)
 800ed1e:	7c1b      	ldrb	r3, [r3, #16]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fdd3 	bl	800e8cc <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800ed26:	e005      	b.n	800ed34 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800ed28:	f7ff fdb4 	bl	800e894 <LmHandlerDeviceTimeReq>
            break;
 800ed2c:	e002      	b.n	800ed34 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <MlmeConfirm+0x12c>
            break;
 800ed32:	bf00      	nop
    }
}
 800ed34:	bf00      	nop
 800ed36:	3730      	adds	r7, #48	; 0x30
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	200000b4 	.word	0x200000b4
 800ed40:	200007f0 	.word	0x200007f0
 800ed44:	200000a8 	.word	0x200000a8
 800ed48:	200007ac 	.word	0x200007ac
 800ed4c:	200000ac 	.word	0x200000ac
 800ed50:	200000ad 	.word	0x200000ad
 800ed54:	200007d8 	.word	0x200007d8
 800ed58:	200000d0 	.word	0x200000d0

0800ed5c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ed66:	4b20      	ldr	r3, [pc, #128]	; (800ede8 <MlmeIndication+0x8c>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	785a      	ldrb	r2, [r3, #1]
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <MlmeIndication+0x8c>)
 800ed72:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	789b      	ldrb	r3, [r3, #2]
 800ed78:	b25a      	sxtb	r2, r3
 800ed7a:	4b1b      	ldr	r3, [pc, #108]	; (800ede8 <MlmeIndication+0x8c>)
 800ed7c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed84:	b25a      	sxtb	r2, r3
 800ed86:	4b18      	ldr	r3, [pc, #96]	; (800ede8 <MlmeIndication+0x8c>)
 800ed88:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ed90:	4b15      	ldr	r3, [pc, #84]	; (800ede8 <MlmeIndication+0x8c>)
 800ed92:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	78da      	ldrb	r2, [r3, #3]
 800ed98:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <MlmeIndication+0x8c>)
 800ed9a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	4a11      	ldr	r2, [pc, #68]	; (800ede8 <MlmeIndication+0x8c>)
 800eda2:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800eda4:	4b11      	ldr	r3, [pc, #68]	; (800edec <MlmeIndication+0x90>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00d      	beq.n	800edca <MlmeIndication+0x6e>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	2b0b      	cmp	r3, #11
 800edb4:	d009      	beq.n	800edca <MlmeIndication+0x6e>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	2b0f      	cmp	r3, #15
 800edbc:	d005      	beq.n	800edca <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800edbe:	4b0b      	ldr	r3, [pc, #44]	; (800edec <MlmeIndication+0x90>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc4:	4908      	ldr	r1, [pc, #32]	; (800ede8 <MlmeIndication+0x8c>)
 800edc6:	2000      	movs	r0, #0
 800edc8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	2003      	movs	r0, #3
 800edce:	f000 f88d 	bl	800eeec <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	2b0b      	cmp	r3, #11
 800edd8:	d001      	beq.n	800edde <MlmeIndication+0x82>
 800edda:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800eddc:	e000      	b.n	800ede0 <MlmeIndication+0x84>
            break;
 800edde:	bf00      	nop
    }
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	200000d0 	.word	0x200000d0
 800edec:	200007f0 	.word	0x200007f0

0800edf0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	6039      	str	r1, [r7, #0]
 800edfa:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d104      	bne.n	800ee10 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800ee06:	f000 f9dd 	bl	800f1c4 <LmhpCompliancePackageFactory>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	60fb      	str	r3, [r7, #12]
                break;
 800ee0e:	e00d      	b.n	800ee2c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800ee10:	f107 020c 	add.w	r2, r7, #12
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	4611      	mov	r1, r2
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f000 fce9 	bl	800f7f0 <LmhpPackagesRegister>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295
 800ee28:	e031      	b.n	800ee8e <LmHandlerPackageRegister+0x9e>
                }
                break;
 800ee2a:	bf00      	nop
            }
    }
    if( package != NULL )
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d02b      	beq.n	800ee8a <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	4918      	ldr	r1, [pc, #96]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	4a16      	ldr	r2, [pc, #88]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee44:	4a15      	ldr	r2, [pc, #84]	; (800ee9c <LmHandlerPackageRegister+0xac>)
 800ee46:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ee48:	79fb      	ldrb	r3, [r7, #7]
 800ee4a:	4a13      	ldr	r2, [pc, #76]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee50:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <LmHandlerPackageRegister+0xb0>)
 800ee52:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ee54:	79fb      	ldrb	r3, [r7, #7]
 800ee56:	4a10      	ldr	r2, [pc, #64]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee5c:	4a11      	ldr	r2, [pc, #68]	; (800eea4 <LmHandlerPackageRegister+0xb4>)
 800ee5e:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ee60:	4b11      	ldr	r3, [pc, #68]	; (800eea8 <LmHandlerPackageRegister+0xb8>)
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	79fb      	ldrb	r3, [r7, #7]
 800ee66:	490c      	ldr	r1, [pc, #48]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee6c:	6992      	ldr	r2, [r2, #24]
 800ee6e:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ee70:	79fb      	ldrb	r3, [r7, #7]
 800ee72:	4a09      	ldr	r2, [pc, #36]	; (800ee98 <LmHandlerPackageRegister+0xa8>)
 800ee74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	4a0c      	ldr	r2, [pc, #48]	; (800eeac <LmHandlerPackageRegister+0xbc>)
 800ee7c:	6851      	ldr	r1, [r2, #4]
 800ee7e:	4a0b      	ldr	r2, [pc, #44]	; (800eeac <LmHandlerPackageRegister+0xbc>)
 800ee80:	7852      	ldrb	r2, [r2, #1]
 800ee82:	6838      	ldr	r0, [r7, #0]
 800ee84:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e001      	b.n	800ee8e <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ee8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	200007c4 	.word	0x200007c4
 800ee9c:	0800e555 	.word	0x0800e555
 800eea0:	0800e6d5 	.word	0x0800e6d5
 800eea4:	0800e895 	.word	0x0800e895
 800eea8:	200007f0 	.word	0x200007f0
 800eeac:	200000e4 	.word	0x200000e4

0800eeb0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d80e      	bhi.n	800eede <LmHandlerPackageIsInitialized+0x2e>
 800eec0:	79fb      	ldrb	r3, [r7, #7]
 800eec2:	4a09      	ldr	r2, [pc, #36]	; (800eee8 <LmHandlerPackageIsInitialized+0x38>)
 800eec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d007      	beq.n	800eede <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	4a05      	ldr	r2, [pc, #20]	; (800eee8 <LmHandlerPackageIsInitialized+0x38>)
 800eed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	4798      	blx	r3
 800eeda:	4603      	mov	r3, r0
 800eedc:	e000      	b.n	800eee0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800eede:	2300      	movs	r3, #0
    }
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	200007c4 	.word	0x200007c4

0800eeec <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	6039      	str	r1, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800eef8:	2300      	movs	r3, #0
 800eefa:	73fb      	strb	r3, [r7, #15]
 800eefc:	e07c      	b.n	800eff8 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800eefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef02:	4a42      	ldr	r2, [pc, #264]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d06f      	beq.n	800efec <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800ef0c:	79fb      	ldrb	r3, [r7, #7]
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d863      	bhi.n	800efda <LmHandlerPackagesNotify+0xee>
 800ef12:	a201      	add	r2, pc, #4	; (adr r2, 800ef18 <LmHandlerPackagesNotify+0x2c>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800ef29 	.word	0x0800ef29
 800ef1c:	0800ef4b 	.word	0x0800ef4b
 800ef20:	0800ef97 	.word	0x0800ef97
 800ef24:	0800efb9 	.word	0x0800efb9
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ef28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef2c:	4a37      	ldr	r2, [pc, #220]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef32:	69db      	ldr	r3, [r3, #28]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d052      	beq.n	800efde <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800ef38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef3c:	4a33      	ldr	r2, [pc, #204]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef42:	69db      	ldr	r3, [r3, #28]
 800ef44:	6838      	ldr	r0, [r7, #0]
 800ef46:	4798      	blx	r3
                        }
                        break;
 800ef48:	e049      	b.n	800efde <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ef4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef4e:	4a2f      	ldr	r2, [pc, #188]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d043      	beq.n	800efe2 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800ef5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef5e:	4a2b      	ldr	r2, [pc, #172]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef64:	781a      	ldrb	r2, [r3, #0]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d00a      	beq.n	800ef84 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800ef6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d135      	bne.n	800efe2 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800ef76:	4b25      	ldr	r3, [pc, #148]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	4798      	blx	r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d02e      	beq.n	800efe2 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800ef84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef88:	4a20      	ldr	r2, [pc, #128]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8e:	6a1b      	ldr	r3, [r3, #32]
 800ef90:	6838      	ldr	r0, [r7, #0]
 800ef92:	4798      	blx	r3
                        }
                        break;
 800ef94:	e025      	b.n	800efe2 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ef96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef9a:	4a1c      	ldr	r2, [pc, #112]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800ef9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d01f      	beq.n	800efe6 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800efa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efaa:	4a18      	ldr	r2, [pc, #96]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800efac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	4798      	blx	r3
                        }
                        break;
 800efb6:	e016      	b.n	800efe6 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800efb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efbc:	4a13      	ldr	r2, [pc, #76]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800efbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d010      	beq.n	800efea <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800efc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efcc:	4a0f      	ldr	r2, [pc, #60]	; (800f00c <LmHandlerPackagesNotify+0x120>)
 800efce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd4:	6838      	ldr	r0, [r7, #0]
 800efd6:	4798      	blx	r3
                        }
                        break;
 800efd8:	e007      	b.n	800efea <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800efda:	bf00      	nop
 800efdc:	e006      	b.n	800efec <LmHandlerPackagesNotify+0x100>
                        break;
 800efde:	bf00      	nop
 800efe0:	e004      	b.n	800efec <LmHandlerPackagesNotify+0x100>
                        break;
 800efe2:	bf00      	nop
 800efe4:	e002      	b.n	800efec <LmHandlerPackagesNotify+0x100>
                        break;
 800efe6:	bf00      	nop
 800efe8:	e000      	b.n	800efec <LmHandlerPackagesNotify+0x100>
                        break;
 800efea:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800efec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	3301      	adds	r3, #1
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	73fb      	strb	r3, [r7, #15]
 800eff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800effc:	2b04      	cmp	r3, #4
 800effe:	f77f af7e 	ble.w	800eefe <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800f002:	bf00      	nop
 800f004:	bf00      	nop
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	200007c4 	.word	0x200007c4

0800f010 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f016:	2300      	movs	r3, #0
 800f018:	71fb      	strb	r3, [r7, #7]
 800f01a:	e01c      	b.n	800f056 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800f01c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f020:	4a11      	ldr	r2, [pc, #68]	; (800f068 <LmHandlerPackageIsTxPending+0x58>)
 800f022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00f      	beq.n	800f04a <LmHandlerPackageIsTxPending+0x3a>
 800f02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00b      	beq.n	800f04a <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800f032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f036:	4a0c      	ldr	r2, [pc, #48]	; (800f068 <LmHandlerPackageIsTxPending+0x58>)
 800f038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	4798      	blx	r3
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800f046:	2301      	movs	r3, #1
 800f048:	e00a      	b.n	800f060 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	3301      	adds	r3, #1
 800f052:	b2db      	uxtb	r3, r3
 800f054:	71fb      	strb	r3, [r7, #7]
 800f056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	ddde      	ble.n	800f01c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	200007c4 	.word	0x200007c4

0800f06c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f072:	2300      	movs	r3, #0
 800f074:	71fb      	strb	r3, [r7, #7]
 800f076:	e022      	b.n	800f0be <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f07c:	4a14      	ldr	r2, [pc, #80]	; (800f0d0 <LmHandlerPackagesProcess+0x64>)
 800f07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d015      	beq.n	800f0b2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f08a:	4a11      	ldr	r2, [pc, #68]	; (800f0d0 <LmHandlerPackagesProcess+0x64>)
 800f08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f090:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00d      	beq.n	800f0b2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800f096:	79fb      	ldrb	r3, [r7, #7]
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff ff09 	bl	800eeb0 <LmHandlerPackageIsInitialized>
 800f09e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d006      	beq.n	800f0b2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800f0a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0a8:	4a09      	ldr	r2, [pc, #36]	; (800f0d0 <LmHandlerPackagesProcess+0x64>)
 800f0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f0b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	71fb      	strb	r3, [r7, #7]
 800f0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	ddd8      	ble.n	800f078 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800f0c6:	bf00      	nop
 800f0c8:	bf00      	nop
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	200007c4 	.word	0x200007c4

0800f0d4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	6039      	str	r1, [r7, #0]
 800f0de:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d102      	bne.n	800f0ec <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800f0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ea:	e00e      	b.n	800f10a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <LmHandlerGetVersion+0x24>
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d004      	beq.n	800f100 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800f0f6:	e007      	b.n	800f108 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	4a06      	ldr	r2, [pc, #24]	; (800f114 <LmHandlerGetVersion+0x40>)
 800f0fc:	601a      	str	r2, [r3, #0]
            break;
 800f0fe:	e003      	b.n	800f108 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	4a05      	ldr	r2, [pc, #20]	; (800f118 <LmHandlerGetVersion+0x44>)
 800f104:	601a      	str	r2, [r3, #0]
            break;
 800f106:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	370c      	adds	r7, #12
 800f10e:	46bd      	mov	sp, r7
 800f110:	bc80      	pop	{r7}
 800f112:	4770      	bx	lr
 800f114:	01000300 	.word	0x01000300
 800f118:	01010003 	.word	0x01010003

0800f11c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800f120:	f005 f882 	bl	8014228 <LoRaMacDeInitialization>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f12a:	2300      	movs	r3, #0
 800f12c:	e001      	b.n	800f132 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f12e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f132:	4618      	mov	r0, r3
 800f134:	bd80      	pop	{r7, pc}

0800f136 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800f136:	b580      	push	{r7, lr}
 800f138:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800f13a:	f004 f80d 	bl	8013158 <LoRaMacHalt>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f144:	2300      	movs	r3, #0
 800f146:	e001      	b.n	800f14c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f148:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b08c      	sub	sp, #48	; 0x30
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d102      	bne.n	800f164 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	e016      	b.n	800f192 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f164:	2320      	movs	r3, #32
 800f166:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f168:	f107 0308 	add.w	r3, r7, #8
 800f16c:	4618      	mov	r0, r3
 800f16e:	f004 f8a3 	bl	80132b8 <LoRaMacMibGetRequestConfirm>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f178:	f04f 33ff 	mov.w	r3, #4294967295
 800f17c:	e009      	b.n	800f192 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800f17e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f993 2000 	ldrsb.w	r2, [r3]
 800f18c:	4b03      	ldr	r3, [pc, #12]	; (800f19c <LmHandlerGetTxPower+0x4c>)
 800f18e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3730      	adds	r7, #48	; 0x30
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	200007d8 	.word	0x200007d8

0800f1a0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800f1a4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bc80      	pop	{r7}
 800f1ae:	4770      	bx	lr

0800f1b0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f1ba:	bf00      	nop
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bc80      	pop	{r7}
 800f1c2:	4770      	bx	lr

0800f1c4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800f1c8:	4b02      	ldr	r3, [pc, #8]	; (800f1d4 <LmhpCompliancePackageFactory+0x10>)
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bc80      	pop	{r7}
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	200000ec 	.word	0x200000ec

0800f1d8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00f      	beq.n	800f20c <LmhpComplianceInit+0x34>
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00c      	beq.n	800f20c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800f1f2:	4a0c      	ldr	r2, [pc, #48]	; (800f224 <LmhpComplianceInit+0x4c>)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800f1f8:	4a0b      	ldr	r2, [pc, #44]	; (800f228 <LmhpComplianceInit+0x50>)
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f1fe:	4a0a      	ldr	r2, [pc, #40]	; (800f228 <LmhpComplianceInit+0x50>)
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800f204:	4b08      	ldr	r3, [pc, #32]	; (800f228 <LmhpComplianceInit+0x50>)
 800f206:	2201      	movs	r2, #1
 800f208:	701a      	strb	r2, [r3, #0]
 800f20a:	e006      	b.n	800f21a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800f20c:	4b05      	ldr	r3, [pc, #20]	; (800f224 <LmhpComplianceInit+0x4c>)
 800f20e:	2200      	movs	r2, #0
 800f210:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f212:	4b05      	ldr	r3, [pc, #20]	; (800f228 <LmhpComplianceInit+0x50>)
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
    }
}
 800f218:	bf00      	nop
 800f21a:	bf00      	nop
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	bc80      	pop	{r7}
 800f222:	4770      	bx	lr
 800f224:	20000940 	.word	0x20000940
 800f228:	2000092c 	.word	0x2000092c

0800f22c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f22c:	b480      	push	{r7}
 800f22e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f230:	4b02      	ldr	r3, [pc, #8]	; (800f23c <LmhpComplianceIsInitialized+0x10>)
 800f232:	781b      	ldrb	r3, [r3, #0]
}
 800f234:	4618      	mov	r0, r3
 800f236:	46bd      	mov	sp, r7
 800f238:	bc80      	pop	{r7}
 800f23a:	4770      	bx	lr
 800f23c:	2000092c 	.word	0x2000092c

0800f240 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800f240:	b480      	push	{r7}
 800f242:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f244:	4b07      	ldr	r3, [pc, #28]	; (800f264 <LmhpComplianceIsRunning+0x24>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	f083 0301 	eor.w	r3, r3, #1
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800f252:	2300      	movs	r3, #0
 800f254:	e001      	b.n	800f25a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800f256:	4b03      	ldr	r3, [pc, #12]	; (800f264 <LmhpComplianceIsRunning+0x24>)
 800f258:	785b      	ldrb	r3, [r3, #1]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bc80      	pop	{r7}
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	2000092c 	.word	0x2000092c

0800f268 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f270:	4b0f      	ldr	r3, [pc, #60]	; (800f2b0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	f083 0301 	eor.w	r3, r3, #1
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d112      	bne.n	800f2a4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800f27e:	4b0c      	ldr	r3, [pc, #48]	; (800f2b0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f280:	785b      	ldrb	r3, [r3, #1]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00f      	beq.n	800f2a6 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d10b      	bne.n	800f2a6 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800f292:	2b00      	cmp	r3, #0
 800f294:	d007      	beq.n	800f2a6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f296:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f298:	899b      	ldrh	r3, [r3, #12]
 800f29a:	3301      	adds	r3, #1
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	4b04      	ldr	r3, [pc, #16]	; (800f2b0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800f2a0:	819a      	strh	r2, [r3, #12]
 800f2a2:	e000      	b.n	800f2a6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800f2a4:	bf00      	nop
    }
}
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bc80      	pop	{r7}
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	2000092c 	.word	0x2000092c

0800f2b4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f2bc:	4b12      	ldr	r3, [pc, #72]	; (800f308 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f083 0301 	eor.w	r3, r3, #1
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d116      	bne.n	800f2f8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f2ca:	4b0f      	ldr	r3, [pc, #60]	; (800f308 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f2cc:	785b      	ldrb	r3, [r3, #1]
 800f2ce:	f083 0301 	eor.w	r3, r3, #1
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d111      	bne.n	800f2fc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b05      	cmp	r3, #5
 800f2de:	d10e      	bne.n	800f2fe <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800f2e0:	4b09      	ldr	r3, [pc, #36]	; (800f308 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	7a1a      	ldrb	r2, [r3, #8]
 800f2ea:	4b07      	ldr	r3, [pc, #28]	; (800f308 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f2ec:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	7a5a      	ldrb	r2, [r3, #9]
 800f2f2:	4b05      	ldr	r3, [pc, #20]	; (800f308 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f2f4:	741a      	strb	r2, [r3, #16]
 800f2f6:	e002      	b.n	800f2fe <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f2f8:	bf00      	nop
 800f2fa:	e000      	b.n	800f2fe <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f2fc:	bf00      	nop
    }
}
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	bc80      	pop	{r7}
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	2000092c 	.word	0x2000092c

0800f30c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f312:	4b36      	ldr	r3, [pc, #216]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	f083 0301 	eor.w	r3, r3, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	e05e      	b.n	800f3e4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800f326:	4b31      	ldr	r3, [pc, #196]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f328:	785b      	ldrb	r3, [r3, #1]
 800f32a:	f083 0301 	eor.w	r3, r3, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f334:	2300      	movs	r3, #0
 800f336:	e055      	b.n	800f3e4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800f338:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f33a:	7b9b      	ldrb	r3, [r3, #14]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d019      	beq.n	800f374 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800f340:	4b2a      	ldr	r3, [pc, #168]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f342:	2200      	movs	r2, #0
 800f344:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800f346:	4b29      	ldr	r3, [pc, #164]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f348:	2203      	movs	r2, #3
 800f34a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800f34c:	4b27      	ldr	r3, [pc, #156]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	2205      	movs	r2, #5
 800f352:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800f354:	4b25      	ldr	r3, [pc, #148]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	3301      	adds	r3, #1
 800f35a:	4a24      	ldr	r2, [pc, #144]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f35c:	7bd2      	ldrb	r2, [r2, #15]
 800f35e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800f360:	4b22      	ldr	r3, [pc, #136]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	3302      	adds	r3, #2
 800f366:	4a21      	ldr	r2, [pc, #132]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f368:	7c12      	ldrb	r2, [r2, #16]
 800f36a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800f36c:	4b1f      	ldr	r3, [pc, #124]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f36e:	2201      	movs	r2, #1
 800f370:	709a      	strb	r2, [r3, #2]
 800f372:	e01c      	b.n	800f3ae <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800f374:	4b1d      	ldr	r3, [pc, #116]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f376:	789b      	ldrb	r3, [r3, #2]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d005      	beq.n	800f388 <LmhpComplianceTxProcess+0x7c>
 800f37c:	2b04      	cmp	r3, #4
 800f37e:	d116      	bne.n	800f3ae <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800f380:	4b1a      	ldr	r3, [pc, #104]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f382:	2201      	movs	r2, #1
 800f384:	709a      	strb	r2, [r3, #2]
                break;
 800f386:	e012      	b.n	800f3ae <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800f388:	4b18      	ldr	r3, [pc, #96]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f38a:	2202      	movs	r2, #2
 800f38c:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800f38e:	4b17      	ldr	r3, [pc, #92]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f390:	899b      	ldrh	r3, [r3, #12]
 800f392:	0a1b      	lsrs	r3, r3, #8
 800f394:	b29a      	uxth	r2, r3
 800f396:	4b15      	ldr	r3, [pc, #84]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800f39e:	4b13      	ldr	r3, [pc, #76]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f3a0:	899a      	ldrh	r2, [r3, #12]
 800f3a2:	4b12      	ldr	r3, [pc, #72]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	b2d2      	uxtb	r2, r2
 800f3aa:	701a      	strb	r2, [r3, #0]
                break;
 800f3ac:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800f3ae:	23e0      	movs	r3, #224	; 0xe0
 800f3b0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800f3b2:	4b0e      	ldr	r3, [pc, #56]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f3b4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800f3b6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800f3b8:	4b0c      	ldr	r3, [pc, #48]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f3ba:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800f3bc:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800f3be:	480c      	ldr	r0, [pc, #48]	; (800f3f0 <LmhpComplianceTxProcess+0xe4>)
 800f3c0:	f00d fc5a 	bl	801cc78 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800f3c4:	4b0b      	ldr	r3, [pc, #44]	; (800f3f4 <LmhpComplianceTxProcess+0xe8>)
 800f3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	e008      	b.n	800f3e4 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800f3d2:	4b08      	ldr	r3, [pc, #32]	; (800f3f4 <LmhpComplianceTxProcess+0xe8>)
 800f3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d6:	4a05      	ldr	r2, [pc, #20]	; (800f3ec <LmhpComplianceTxProcess+0xe0>)
 800f3d8:	78d2      	ldrb	r2, [r2, #3]
 800f3da:	4611      	mov	r1, r2
 800f3dc:	4638      	mov	r0, r7
 800f3de:	2201      	movs	r2, #1
 800f3e0:	4798      	blx	r3
 800f3e2:	4603      	mov	r3, r0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	2000092c 	.word	0x2000092c
 800f3f0:	20000914 	.word	0x20000914
 800f3f4:	200000ec 	.word	0x200000ec

0800f3f8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b0a4      	sub	sp, #144	; 0x90
 800f3fc:	af02      	add	r7, sp, #8
 800f3fe:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f400:	4ba5      	ldr	r3, [pc, #660]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	f083 0301 	eor.w	r3, r3, #1
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f040 81c6 	bne.w	800f79c <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	7b5b      	ldrb	r3, [r3, #13]
 800f414:	f083 0301 	eor.w	r3, r3, #1
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f040 81c0 	bne.w	800f7a0 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800f420:	4b9d      	ldr	r3, [pc, #628]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f422:	785b      	ldrb	r3, [r3, #1]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00c      	beq.n	800f442 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7b9b      	ldrb	r3, [r3, #14]
 800f42c:	f083 0301 	eor.w	r3, r3, #1
 800f430:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f436:	4b98      	ldr	r3, [pc, #608]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	4b96      	ldr	r3, [pc, #600]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f440:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	78db      	ldrb	r3, [r3, #3]
 800f446:	2be0      	cmp	r3, #224	; 0xe0
 800f448:	f040 81ac 	bne.w	800f7a4 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f44c:	4b92      	ldr	r3, [pc, #584]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	f083 0301 	eor.w	r3, r3, #1
 800f454:	b2db      	uxtb	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d060      	beq.n	800f51c <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	7b1b      	ldrb	r3, [r3, #12]
 800f45e:	2b04      	cmp	r3, #4
 800f460:	f040 81a7 	bne.w	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	f040 81a1 	bne.w	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	3301      	adds	r3, #1
 800f476:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f478:	2b01      	cmp	r3, #1
 800f47a:	f040 819a 	bne.w	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	3302      	adds	r3, #2
 800f484:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f486:	2b01      	cmp	r3, #1
 800f488:	f040 8193 	bne.w	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	3303      	adds	r3, #3
 800f492:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f494:	2b01      	cmp	r3, #1
 800f496:	f040 818c 	bne.w	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800f49a:	4b7f      	ldr	r3, [pc, #508]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800f4a0:	4b7d      	ldr	r3, [pc, #500]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4a2:	22e0      	movs	r2, #224	; 0xe0
 800f4a4:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800f4a6:	4b7c      	ldr	r3, [pc, #496]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800f4ac:	4b7a      	ldr	r3, [pc, #488]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800f4b2:	4b79      	ldr	r3, [pc, #484]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800f4b8:	4b77      	ldr	r3, [pc, #476]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800f4be:	4b76      	ldr	r3, [pc, #472]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800f4c4:	4b74      	ldr	r3, [pc, #464]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800f4ca:	4b73      	ldr	r3, [pc, #460]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f4d8:	f107 030c 	add.w	r3, r7, #12
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f004 f8a1 	bl	8013624 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	f004 fe7a 	bl	80141dc <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800f4e8:	4b6c      	ldr	r3, [pc, #432]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d003      	beq.n	800f4fa <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800f4f2:	4b6a      	ldr	r3, [pc, #424]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4b68      	ldr	r3, [pc, #416]	; (800f6a0 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800f500:	2200      	movs	r2, #0
 800f502:	f04f 31ff 	mov.w	r1, #4294967295
 800f506:	4867      	ldr	r0, [pc, #412]	; (800f6a4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f508:	f00d fb80 	bl	801cc0c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800f50c:	f241 3188 	movw	r1, #5000	; 0x1388
 800f510:	4864      	ldr	r0, [pc, #400]	; (800f6a4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f512:	f00d fc8f 	bl	801ce34 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800f516:	f7ff fef9 	bl	800f30c <LmhpComplianceTxProcess>
 800f51a:	e14a      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	781a      	ldrb	r2, [r3, #0]
 800f522:	4b5d      	ldr	r3, [pc, #372]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f524:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800f526:	4b5c      	ldr	r3, [pc, #368]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f528:	789b      	ldrb	r3, [r3, #2]
 800f52a:	2b0a      	cmp	r3, #10
 800f52c:	f200 813c 	bhi.w	800f7a8 <LmhpComplianceOnMcpsIndication+0x3b0>
 800f530:	a201      	add	r2, pc, #4	; (adr r2, 800f538 <LmhpComplianceOnMcpsIndication+0x140>)
 800f532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f536:	bf00      	nop
 800f538:	0800f565 	.word	0x0800f565
 800f53c:	0800f5af 	.word	0x0800f5af
 800f540:	0800f5b7 	.word	0x0800f5b7
 800f544:	0800f5c5 	.word	0x0800f5c5
 800f548:	0800f5d3 	.word	0x0800f5d3
 800f54c:	0800f62b 	.word	0x0800f62b
 800f550:	0800f63d 	.word	0x0800f63d
 800f554:	0800f6ad 	.word	0x0800f6ad
 800f558:	0800f755 	.word	0x0800f755
 800f55c:	0800f767 	.word	0x0800f767
 800f560:	0800f781 	.word	0x0800f781
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800f564:	484f      	ldr	r0, [pc, #316]	; (800f6a4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f566:	f00d fbf5 	bl	801cd54 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800f56a:	4b4b      	ldr	r3, [pc, #300]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f56c:	2200      	movs	r2, #0
 800f56e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800f570:	4b49      	ldr	r3, [pc, #292]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f572:	2200      	movs	r2, #0
 800f574:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800f576:	2304      	movs	r3, #4
 800f578:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f57a:	4b48      	ldr	r3, [pc, #288]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800f582:	f107 030c 	add.w	r3, r7, #12
 800f586:	4618      	mov	r0, r3
 800f588:	f004 f84c 	bl	8013624 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f58c:	4b43      	ldr	r3, [pc, #268]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	785b      	ldrb	r3, [r3, #1]
 800f592:	4618      	mov	r0, r3
 800f594:	f004 fe22 	bl	80141dc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800f598:	4b40      	ldr	r3, [pc, #256]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f000 8104 	beq.w	800f7ac <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800f5a4:	4b3d      	ldr	r3, [pc, #244]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	4798      	blx	r3
                    }
                }
                break;
 800f5ac:	e0fe      	b.n	800f7ac <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800f5ae:	4b3a      	ldr	r3, [pc, #232]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	719a      	strb	r2, [r3, #6]
                break;
 800f5b4:	e0fd      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800f5b6:	4b38      	ldr	r3, [pc, #224]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800f5bc:	4b36      	ldr	r3, [pc, #216]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5be:	2201      	movs	r2, #1
 800f5c0:	709a      	strb	r2, [r3, #2]
                break;
 800f5c2:	e0f6      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800f5c4:	4b34      	ldr	r3, [pc, #208]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800f5ca:	4b33      	ldr	r3, [pc, #204]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	709a      	strb	r2, [r3, #2]
                break;
 800f5d0:	e0ef      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	7b1a      	ldrb	r2, [r3, #12]
 800f5d6:	4b30      	ldr	r3, [pc, #192]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5d8:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800f5da:	4b2f      	ldr	r3, [pc, #188]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	2204      	movs	r2, #4
 800f5e0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f5e8:	e012      	b.n	800f610 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	689a      	ldr	r2, [r3, #8]
 800f5ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f5f2:	4413      	add	r3, r2
 800f5f4:	781a      	ldrb	r2, [r3, #0]
 800f5f6:	4b28      	ldr	r3, [pc, #160]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f5f8:	6899      	ldr	r1, [r3, #8]
 800f5fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f5fe:	440b      	add	r3, r1
 800f600:	3201      	adds	r2, #1
 800f602:	b2d2      	uxtb	r2, r2
 800f604:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f606:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f60a:	3301      	adds	r3, #1
 800f60c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f610:	4b21      	ldr	r3, [pc, #132]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f612:	795a      	ldrb	r2, [r3, #5]
 800f614:	4b20      	ldr	r3, [pc, #128]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f616:	799b      	ldrb	r3, [r3, #6]
 800f618:	4293      	cmp	r3, r2
 800f61a:	bf28      	it	cs
 800f61c:	4613      	movcs	r3, r2
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800f624:	429a      	cmp	r2, r3
 800f626:	d3e0      	bcc.n	800f5ea <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800f628:	e0c3      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800f62a:	2305      	movs	r3, #5
 800f62c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800f630:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f634:	4618      	mov	r0, r3
 800f636:	f004 fb89 	bl	8013d4c <LoRaMacMlmeRequest>
                }
                break;
 800f63a:	e0ba      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800f63c:	4819      	ldr	r0, [pc, #100]	; (800f6a4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800f63e:	f00d fb89 	bl	801cd54 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800f642:	4b15      	ldr	r3, [pc, #84]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f644:	2200      	movs	r2, #0
 800f646:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800f648:	4b13      	ldr	r3, [pc, #76]	; (800f698 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f64a:	2200      	movs	r2, #0
 800f64c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800f64e:	2304      	movs	r3, #4
 800f650:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f652:	4b12      	ldr	r3, [pc, #72]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800f65a:	f107 030c 	add.w	r3, r7, #12
 800f65e:	4618      	mov	r0, r3
 800f660:	f003 ffe0 	bl	8013624 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f664:	4b0d      	ldr	r3, [pc, #52]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	785b      	ldrb	r3, [r3, #1]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f004 fdb6 	bl	80141dc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800f670:	4b0a      	ldr	r3, [pc, #40]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d003      	beq.n	800f682 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800f67a:	4b08      	ldr	r3, [pc, #32]	; (800f69c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800f682:	4b09      	ldr	r3, [pc, #36]	; (800f6a8 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	2b00      	cmp	r3, #0
 800f688:	f000 8092 	beq.w	800f7b0 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f68c:	4b06      	ldr	r3, [pc, #24]	; (800f6a8 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800f68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f690:	2101      	movs	r1, #1
 800f692:	2002      	movs	r0, #2
 800f694:	4798      	blx	r3
                    }
                }
                break;
 800f696:	e08b      	b.n	800f7b0 <LmhpComplianceOnMcpsIndication+0x3b8>
 800f698:	2000092c 	.word	0x2000092c
 800f69c:	20000940 	.word	0x20000940
 800f6a0:	0800f7c9 	.word	0x0800f7c9
 800f6a4:	20000914 	.word	0x20000914
 800f6a8:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	7b1b      	ldrb	r3, [r3, #12]
 800f6b0:	2b03      	cmp	r3, #3
 800f6b2:	d113      	bne.n	800f6dc <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800f6b4:	2306      	movs	r3, #6
 800f6b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	021b      	lsls	r3, r3, #8
 800f6c4:	b21a      	sxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	b21b      	sxth	r3, r3
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	b21b      	sxth	r3, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f6da:	e032      	b.n	800f742 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7b1b      	ldrb	r3, [r3, #12]
 800f6e0:	2b07      	cmp	r3, #7
 800f6e2:	d12e      	bne.n	800f742 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800f6e4:	2307      	movs	r3, #7
 800f6e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	021b      	lsls	r3, r3, #8
 800f6f4:	b21a      	sxth	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	3302      	adds	r3, #2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	b21b      	sxth	r3, r3
 800f700:	4313      	orrs	r3, r2
 800f702:	b21b      	sxth	r3, r3
 800f704:	b29b      	uxth	r3, r3
 800f706:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	3303      	adds	r3, #3
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	041a      	lsls	r2, r3, #16
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	3304      	adds	r3, #4
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	021b      	lsls	r3, r3, #8
 800f71e:	4313      	orrs	r3, r2
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	6892      	ldr	r2, [r2, #8]
 800f724:	3205      	adds	r2, #5
 800f726:	7812      	ldrb	r2, [r2, #0]
 800f728:	4313      	orrs	r3, r2
 800f72a:	461a      	mov	r2, r3
 800f72c:	2364      	movs	r3, #100	; 0x64
 800f72e:	fb02 f303 	mul.w	r3, r2, r3
 800f732:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	3306      	adds	r3, #6
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	b25b      	sxtb	r3, r3
 800f73e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800f742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f746:	4618      	mov	r0, r3
 800f748:	f004 fb00 	bl	8013d4c <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800f74c:	4b1a      	ldr	r3, [pc, #104]	; (800f7b8 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800f74e:	2201      	movs	r2, #1
 800f750:	709a      	strb	r2, [r3, #2]
                }
                break;
 800f752:	e02e      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800f754:	230a      	movs	r3, #10
 800f756:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f75a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f75e:	4618      	mov	r0, r3
 800f760:	f004 faf4 	bl	8013d4c <LoRaMacMlmeRequest>
                }
                break;
 800f764:	e025      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800f766:	2300      	movs	r3, #0
 800f768:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	3301      	adds	r3, #1
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800f774:	f107 030c 	add.w	r3, r7, #12
 800f778:	4618      	mov	r0, r3
 800f77a:	f003 ff53 	bl	8013624 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800f77e:	e018      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f780:	230d      	movs	r3, #13
 800f782:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	785b      	ldrb	r3, [r3, #1]
 800f78c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800f790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f794:	4618      	mov	r0, r3
 800f796:	f004 fad9 	bl	8013d4c <LoRaMacMlmeRequest>
                }
                break;
 800f79a:	e00a      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800f79c:	bf00      	nop
 800f79e:	e008      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800f7a0:	bf00      	nop
 800f7a2:	e006      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800f7a4:	bf00      	nop
 800f7a6:	e004      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800f7a8:	bf00      	nop
 800f7aa:	e002      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800f7ac:	bf00      	nop
 800f7ae:	e000      	b.n	800f7b2 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800f7b0:	bf00      	nop
        }
    }
}
 800f7b2:	3788      	adds	r7, #136	; 0x88
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	2000092c 	.word	0x2000092c

0800f7bc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f7bc:	b480      	push	{r7}
 800f7be:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800f7c0:	bf00      	nop
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bc80      	pop	{r7}
 800f7c6:	4770      	bx	lr

0800f7c8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800f7d0:	f7ff fd9c 	bl	800f30c <LmhpComplianceTxProcess>
}
 800f7d4:	bf00      	nop
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bc80      	pop	{r7}
 800f7ee:	4770      	bx	lr

0800f7f0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	6039      	str	r1, [r7, #0]
 800f7fa:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f7fc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	bc80      	pop	{r7}
 800f808:	4770      	bx	lr
	...

0800f80c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f812:	f00d fbb9 	bl	801cf88 <UTIL_TIMER_GetCurrentTime>
 800f816:	4603      	mov	r3, r0
 800f818:	4a0f      	ldr	r2, [pc, #60]	; (800f858 <OnRadioTxDone+0x4c>)
 800f81a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f81c:	4c0f      	ldr	r4, [pc, #60]	; (800f85c <OnRadioTxDone+0x50>)
 800f81e:	463b      	mov	r3, r7
 800f820:	4618      	mov	r0, r3
 800f822:	f00c fd2f 	bl	801c284 <SysTimeGet>
 800f826:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f82a:	463a      	mov	r2, r7
 800f82c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f830:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f834:	4a0a      	ldr	r2, [pc, #40]	; (800f860 <OnRadioTxDone+0x54>)
 800f836:	7813      	ldrb	r3, [r2, #0]
 800f838:	f043 0310 	orr.w	r3, r3, #16
 800f83c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f83e:	f003 f8e1 	bl	8012a04 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <OnRadioTxDone+0x58>)
 800f844:	2201      	movs	r2, #1
 800f846:	2100      	movs	r1, #0
 800f848:	2002      	movs	r0, #2
 800f84a:	f00d fc8d 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800f84e:	bf00      	nop
 800f850:	370c      	adds	r7, #12
 800f852:	46bd      	mov	sp, r7
 800f854:	bd90      	pop	{r4, r7, pc}
 800f856:	bf00      	nop
 800f858:	200015b8 	.word	0x200015b8
 800f85c:	20000944 	.word	0x20000944
 800f860:	200015b4 	.word	0x200015b4
 800f864:	0801df24 	.word	0x0801df24

0800f868 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	4608      	mov	r0, r1
 800f872:	4611      	mov	r1, r2
 800f874:	461a      	mov	r2, r3
 800f876:	4603      	mov	r3, r0
 800f878:	817b      	strh	r3, [r7, #10]
 800f87a:	460b      	mov	r3, r1
 800f87c:	813b      	strh	r3, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f882:	f00d fb81 	bl	801cf88 <UTIL_TIMER_GetCurrentTime>
 800f886:	4603      	mov	r3, r0
 800f888:	4a0f      	ldr	r2, [pc, #60]	; (800f8c8 <OnRadioRxDone+0x60>)
 800f88a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f88c:	4a0e      	ldr	r2, [pc, #56]	; (800f8c8 <OnRadioRxDone+0x60>)
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f892:	4a0d      	ldr	r2, [pc, #52]	; (800f8c8 <OnRadioRxDone+0x60>)
 800f894:	897b      	ldrh	r3, [r7, #10]
 800f896:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f898:	4a0b      	ldr	r2, [pc, #44]	; (800f8c8 <OnRadioRxDone+0x60>)
 800f89a:	893b      	ldrh	r3, [r7, #8]
 800f89c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f89e:	4a0a      	ldr	r2, [pc, #40]	; (800f8c8 <OnRadioRxDone+0x60>)
 800f8a0:	79fb      	ldrb	r3, [r7, #7]
 800f8a2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f8a4:	4a09      	ldr	r2, [pc, #36]	; (800f8cc <OnRadioRxDone+0x64>)
 800f8a6:	7813      	ldrb	r3, [r2, #0]
 800f8a8:	f043 0308 	orr.w	r3, r3, #8
 800f8ac:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f8ae:	f003 f8a9 	bl	8012a04 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f8b2:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <OnRadioRxDone+0x68>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	2002      	movs	r0, #2
 800f8ba:	f00d fc55 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800f8be:	bf00      	nop
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200015bc 	.word	0x200015bc
 800f8cc:	200015b4 	.word	0x200015b4
 800f8d0:	0801df34 	.word	0x0801df34

0800f8d4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f8d8:	4a07      	ldr	r2, [pc, #28]	; (800f8f8 <OnRadioTxTimeout+0x24>)
 800f8da:	7813      	ldrb	r3, [r2, #0]
 800f8dc:	f043 0304 	orr.w	r3, r3, #4
 800f8e0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f8e2:	f003 f88f 	bl	8012a04 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f8e6:	4b05      	ldr	r3, [pc, #20]	; (800f8fc <OnRadioTxTimeout+0x28>)
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	2002      	movs	r0, #2
 800f8ee:	f00d fc3b 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800f8f2:	bf00      	nop
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	200015b4 	.word	0x200015b4
 800f8fc:	0801df44 	.word	0x0801df44

0800f900 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f904:	4a04      	ldr	r2, [pc, #16]	; (800f918 <OnRadioRxError+0x18>)
 800f906:	7813      	ldrb	r3, [r2, #0]
 800f908:	f043 0302 	orr.w	r3, r3, #2
 800f90c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f90e:	f003 f879 	bl	8012a04 <OnMacProcessNotify>
}
 800f912:	bf00      	nop
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	200015b4 	.word	0x200015b4

0800f91c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f920:	4a07      	ldr	r2, [pc, #28]	; (800f940 <OnRadioRxTimeout+0x24>)
 800f922:	7813      	ldrb	r3, [r2, #0]
 800f924:	f043 0301 	orr.w	r3, r3, #1
 800f928:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f92a:	f003 f86b 	bl	8012a04 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f92e:	4b05      	ldr	r3, [pc, #20]	; (800f944 <OnRadioRxTimeout+0x28>)
 800f930:	2201      	movs	r2, #1
 800f932:	2100      	movs	r1, #0
 800f934:	2002      	movs	r0, #2
 800f936:	f00d fc17 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 800f93a:	bf00      	nop
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	200015b4 	.word	0x200015b4
 800f944:	0801df54 	.word	0x0801df54

0800f948 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f948:	b480      	push	{r7}
 800f94a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f94c:	4b08      	ldr	r3, [pc, #32]	; (800f970 <UpdateRxSlotIdleState+0x28>)
 800f94e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f952:	2b02      	cmp	r3, #2
 800f954:	d004      	beq.n	800f960 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f956:	4b07      	ldr	r3, [pc, #28]	; (800f974 <UpdateRxSlotIdleState+0x2c>)
 800f958:	2206      	movs	r2, #6
 800f95a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f95e:	e003      	b.n	800f968 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f960:	4b04      	ldr	r3, [pc, #16]	; (800f974 <UpdateRxSlotIdleState+0x2c>)
 800f962:	2202      	movs	r2, #2
 800f964:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800f968:	bf00      	nop
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bc80      	pop	{r7}
 800f96e:	4770      	bx	lr
 800f970:	20000e4c 	.word	0x20000e4c
 800f974:	20000944 	.word	0x20000944

0800f978 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b092      	sub	sp, #72	; 0x48
 800f97c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f97e:	4b50      	ldr	r3, [pc, #320]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800f980:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f984:	2b02      	cmp	r3, #2
 800f986:	d002      	beq.n	800f98e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f988:	4b4e      	ldr	r3, [pc, #312]	; (800fac4 <ProcessRadioTxDone+0x14c>)
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f98e:	f3ef 8310 	mrs	r3, PRIMASK
 800f992:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800f994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f996:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f998:	b672      	cpsid	i
}
 800f99a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f99c:	f00d faf4 	bl	801cf88 <UTIL_TIMER_GetCurrentTime>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	4b49      	ldr	r3, [pc, #292]	; (800fac8 <ProcessRadioTxDone+0x150>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f9aa:	4b48      	ldr	r3, [pc, #288]	; (800facc <ProcessRadioTxDone+0x154>)
 800f9ac:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4846      	ldr	r0, [pc, #280]	; (800fad0 <ProcessRadioTxDone+0x158>)
 800f9b8:	f00d fa3c 	bl	801ce34 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f9bc:	4844      	ldr	r0, [pc, #272]	; (800fad0 <ProcessRadioTxDone+0x158>)
 800f9be:	f00d f95b 	bl	801cc78 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f9c2:	4b42      	ldr	r3, [pc, #264]	; (800facc <ProcessRadioTxDone+0x154>)
 800f9c4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4841      	ldr	r0, [pc, #260]	; (800fad4 <ProcessRadioTxDone+0x15c>)
 800f9d0:	f00d fa30 	bl	801ce34 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f9d4:	483f      	ldr	r0, [pc, #252]	; (800fad4 <ProcessRadioTxDone+0x15c>)
 800f9d6:	f00d f94f 	bl	801cc78 <UTIL_TIMER_Start>
 800f9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9dc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e0:	f383 8810 	msr	PRIMASK, r3
}
 800f9e4:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f9e6:	4b36      	ldr	r3, [pc, #216]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800f9e8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d004      	beq.n	800f9fa <ProcessRadioTxDone+0x82>
 800f9f0:	4b36      	ldr	r3, [pc, #216]	; (800facc <ProcessRadioTxDone+0x154>)
 800f9f2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d019      	beq.n	800fa2e <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f9fa:	2316      	movs	r3, #22
 800f9fc:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fa00:	4b2f      	ldr	r3, [pc, #188]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800fa02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa06:	f107 0220 	add.w	r2, r7, #32
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f006 fcec 	bl	80163ea <RegionGetPhyParam>
 800fa12:	4603      	mov	r3, r0
 800fa14:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800fa16:	4b2d      	ldr	r3, [pc, #180]	; (800facc <ProcessRadioTxDone+0x154>)
 800fa18:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	4413      	add	r3, r2
 800fa20:	4619      	mov	r1, r3
 800fa22:	482d      	ldr	r0, [pc, #180]	; (800fad8 <ProcessRadioTxDone+0x160>)
 800fa24:	f00d fa06 	bl	801ce34 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800fa28:	482b      	ldr	r0, [pc, #172]	; (800fad8 <ProcessRadioTxDone+0x160>)
 800fa2a:	f00d f925 	bl	801cc78 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800fa2e:	4b26      	ldr	r3, [pc, #152]	; (800fac8 <ProcessRadioTxDone+0x150>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a23      	ldr	r2, [pc, #140]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800fa34:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800fa36:	4b25      	ldr	r3, [pc, #148]	; (800facc <ProcessRadioTxDone+0x154>)
 800fa38:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800fa3c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800fa3e:	4b22      	ldr	r3, [pc, #136]	; (800fac8 <ProcessRadioTxDone+0x150>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fa44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f00c fc53 	bl	801c2f4 <SysTimeGetMcuTime>
 800fa4e:	4638      	mov	r0, r7
 800fa50:	4b1b      	ldr	r3, [pc, #108]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800fa52:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800fa56:	9200      	str	r2, [sp, #0]
 800fa58:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fa5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fa60:	ca06      	ldmia	r2, {r1, r2}
 800fa62:	f00c fba8 	bl	801c1b6 <SysTimeSub>
 800fa66:	f107 0314 	add.w	r3, r7, #20
 800fa6a:	463a      	mov	r2, r7
 800fa6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa70:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800fa74:	4b15      	ldr	r3, [pc, #84]	; (800facc <ProcessRadioTxDone+0x154>)
 800fa76:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800fa7a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa80:	4b0f      	ldr	r3, [pc, #60]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800fa82:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d101      	bne.n	800fa8e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800fa8e:	4b0c      	ldr	r3, [pc, #48]	; (800fac0 <ProcessRadioTxDone+0x148>)
 800fa90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa94:	f107 0208 	add.w	r2, r7, #8
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f006 fcbd 	bl	801641a <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800faa0:	4b0a      	ldr	r3, [pc, #40]	; (800facc <ProcessRadioTxDone+0x154>)
 800faa2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800faa6:	f083 0301 	eor.w	r3, r3, #1
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b00      	cmp	r3, #0
 800faae:	d003      	beq.n	800fab8 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fab0:	4b06      	ldr	r3, [pc, #24]	; (800facc <ProcessRadioTxDone+0x154>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800fab8:	bf00      	nop
 800faba:	3740      	adds	r7, #64	; 0x40
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	20000e4c 	.word	0x20000e4c
 800fac4:	0801e604 	.word	0x0801e604
 800fac8:	200015b8 	.word	0x200015b8
 800facc:	20000944 	.word	0x20000944
 800fad0:	20000cc4 	.word	0x20000cc4
 800fad4:	20000cdc 	.word	0x20000cdc
 800fad8:	20000d38 	.word	0x20000d38

0800fadc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800fae0:	4b10      	ldr	r3, [pc, #64]	; (800fb24 <PrepareRxDoneAbort+0x48>)
 800fae2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faea:	4a0e      	ldr	r2, [pc, #56]	; (800fb24 <PrepareRxDoneAbort+0x48>)
 800faec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800faf0:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <PrepareRxDoneAbort+0x48>)
 800faf2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d002      	beq.n	800fb00 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800fafa:	2000      	movs	r0, #0
 800fafc:	f001 f950 	bl	8010da0 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb00:	4a08      	ldr	r2, [pc, #32]	; (800fb24 <PrepareRxDoneAbort+0x48>)
 800fb02:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fb06:	f043 0302 	orr.w	r3, r3, #2
 800fb0a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fb0e:	4a05      	ldr	r2, [pc, #20]	; (800fb24 <PrepareRxDoneAbort+0x48>)
 800fb10:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fb14:	f043 0310 	orr.w	r3, r3, #16
 800fb18:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800fb1c:	f7ff ff14 	bl	800f948 <UpdateRxSlotIdleState>
}
 800fb20:	bf00      	nop
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	20000944 	.word	0x20000944

0800fb28 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800fb28:	b5b0      	push	{r4, r5, r7, lr}
 800fb2a:	b0aa      	sub	sp, #168	; 0xa8
 800fb2c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fb2e:	2313      	movs	r3, #19
 800fb30:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800fb34:	4b78      	ldr	r3, [pc, #480]	; (800fd18 <ProcessRadioRxDone+0x1f0>)
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 800fb3c:	4b76      	ldr	r3, [pc, #472]	; (800fd18 <ProcessRadioRxDone+0x1f0>)
 800fb3e:	891b      	ldrh	r3, [r3, #8]
 800fb40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800fb44:	4b74      	ldr	r3, [pc, #464]	; (800fd18 <ProcessRadioRxDone+0x1f0>)
 800fb46:	895b      	ldrh	r3, [r3, #10]
 800fb48:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 800fb4c:	4b72      	ldr	r3, [pc, #456]	; (800fd18 <ProcessRadioRxDone+0x1f0>)
 800fb4e:	7b1b      	ldrb	r3, [r3, #12]
 800fb50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800fb5e:	4b6f      	ldr	r3, [pc, #444]	; (800fd1c <ProcessRadioRxDone+0x1f4>)
 800fb60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fb64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800fb74:	2301      	movs	r3, #1
 800fb76:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800fb7a:	4b69      	ldr	r3, [pc, #420]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800fb82:	4a67      	ldr	r2, [pc, #412]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fb84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800fb88:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800fb8c:	4a64      	ldr	r2, [pc, #400]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fb8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fb92:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800fb96:	4b62      	ldr	r3, [pc, #392]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fb98:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800fb9c:	4b60      	ldr	r3, [pc, #384]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fb9e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800fba2:	4b5f      	ldr	r3, [pc, #380]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800fbaa:	4b5d      	ldr	r3, [pc, #372]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800fbb2:	4b5b      	ldr	r3, [pc, #364]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800fbba:	4b59      	ldr	r3, [pc, #356]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800fbc2:	4b57      	ldr	r3, [pc, #348]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800fbca:	4b55      	ldr	r3, [pc, #340]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800fbd2:	4b53      	ldr	r3, [pc, #332]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fbda:	4b51      	ldr	r3, [pc, #324]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fbe2:	4b4f      	ldr	r3, [pc, #316]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800fbea:	4b4d      	ldr	r3, [pc, #308]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fbf2:	4b4b      	ldr	r3, [pc, #300]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fbfa:	4b4a      	ldr	r3, [pc, #296]	; (800fd24 <ProcessRadioRxDone+0x1fc>)
 800fbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfe:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fc00:	4849      	ldr	r0, [pc, #292]	; (800fd28 <ProcessRadioRxDone+0x200>)
 800fc02:	f00d f8a7 	bl	801cd54 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fc06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fc10:	f004 fc4b 	bl	80144aa <LoRaMacClassBRxBeacon>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00b      	beq.n	800fc32 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fc1a:	4a41      	ldr	r2, [pc, #260]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fc1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800fc20:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fc24:	4a3e      	ldr	r2, [pc, #248]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fc26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fc2a:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800fc2e:	f000 bc1f 	b.w	8010470 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc32:	4b3a      	ldr	r3, [pc, #232]	; (800fd1c <ProcessRadioRxDone+0x1f4>)
 800fc34:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d11e      	bne.n	800fc7a <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc3c:	f004 fc48 	bl	80144d0 <LoRaMacClassBIsPingExpected>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00a      	beq.n	800fc5c <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc46:	2000      	movs	r0, #0
 800fc48:	f004 fbf9 	bl	801443e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	f004 fc1a 	bl	8014486 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fc52:	4b33      	ldr	r3, [pc, #204]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fc54:	2204      	movs	r2, #4
 800fc56:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800fc5a:	e00e      	b.n	800fc7a <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc5c:	f004 fc3f 	bl	80144de <LoRaMacClassBIsMulticastExpected>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d009      	beq.n	800fc7a <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc66:	2000      	movs	r0, #0
 800fc68:	f004 fbf3 	bl	8014452 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f004 fc13 	bl	8014498 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fc72:	4b2b      	ldr	r3, [pc, #172]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fc74:	2205      	movs	r2, #5
 800fc76:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800fc7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc82:	4b27      	ldr	r3, [pc, #156]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fc84:	2201      	movs	r2, #1
 800fc86:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 800fc8a:	f7ff ff27 	bl	800fadc <PrepareRxDoneAbort>
        return;
 800fc8e:	e3ef      	b.n	8010470 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fc90:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800fc94:	1c5a      	adds	r2, r3, #1
 800fc96:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fca0:	4413      	add	r3, r2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800fca8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fcac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	2b06      	cmp	r3, #6
 800fcb6:	f200 83b4 	bhi.w	8010422 <ProcessRadioRxDone+0x8fa>
 800fcba:	a201      	add	r2, pc, #4	; (adr r2, 800fcc0 <ProcessRadioRxDone+0x198>)
 800fcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc0:	0800fcdd 	.word	0x0800fcdd
 800fcc4:	08010423 	.word	0x08010423
 800fcc8:	0800febd 	.word	0x0800febd
 800fccc:	08010423 	.word	0x08010423
 800fcd0:	0800feb5 	.word	0x0800feb5
 800fcd4:	08010423 	.word	0x08010423
 800fcd8:	080103c7 	.word	0x080103c7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fcdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fce0:	2b10      	cmp	r3, #16
 800fce2:	d806      	bhi.n	800fcf2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fce4:	4b0e      	ldr	r3, [pc, #56]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fce6:	2201      	movs	r2, #1
 800fce8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800fcec:	f7ff fef6 	bl	800fadc <PrepareRxDoneAbort>
                return;
 800fcf0:	e3be      	b.n	8010470 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800fcf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcf6:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800fcf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fd00:	4b06      	ldr	r3, [pc, #24]	; (800fd1c <ProcessRadioRxDone+0x1f4>)
 800fd02:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d010      	beq.n	800fd2c <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd0a:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <ProcessRadioRxDone+0x1f8>)
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800fd12:	f7ff fee3 	bl	800fadc <PrepareRxDoneAbort>
                return;
 800fd16:	e3ab      	b.n	8010470 <ProcessRadioRxDone+0x948>
 800fd18:	200015bc 	.word	0x200015bc
 800fd1c:	20000e4c 	.word	0x20000e4c
 800fd20:	20000944 	.word	0x20000944
 800fd24:	0801e604 	.word	0x0801e604
 800fd28:	20000cdc 	.word	0x20000cdc
            }

            SecureElementGetJoinEui( joinEui );
 800fd2c:	1d3b      	adds	r3, r7, #4
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fa92 	bl	800e258 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fd34:	f107 0214 	add.w	r2, r7, #20
 800fd38:	1d3b      	adds	r3, r7, #4
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	20ff      	movs	r0, #255	; 0xff
 800fd3e:	f005 fdd5 	bl	80158ec <LoRaMacCryptoHandleJoinAccept>
 800fd42:	4603      	mov	r3, r0
 800fd44:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fd4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	b25b      	sxtb	r3, r3
 800fd5a:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd5c:	4bbb      	ldr	r3, [pc, #748]	; (801004c <ProcessRadioRxDone+0x524>)
 800fd5e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fd62:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800fd64:	4bb9      	ldr	r3, [pc, #740]	; (801004c <ProcessRadioRxDone+0x524>)
 800fd66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	2207      	movs	r2, #7
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f006 fb76 	bl	8016460 <RegionVerify>
 800fd74:	4603      	mov	r3, r0
 800fd76:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800fd7a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f040 808c 	bne.w	800fe9c <ProcessRadioRxDone+0x374>
 800fd84:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 8087 	beq.w	800fe9c <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fd8e:	7f7b      	ldrb	r3, [r7, #29]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4bae      	ldr	r3, [pc, #696]	; (801004c <ProcessRadioRxDone+0x524>)
 800fd94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fd98:	4bac      	ldr	r3, [pc, #688]	; (801004c <ProcessRadioRxDone+0x524>)
 800fd9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800fd9e:	7fbb      	ldrb	r3, [r7, #30]
 800fda0:	021b      	lsls	r3, r3, #8
 800fda2:	4313      	orrs	r3, r2
 800fda4:	4aa9      	ldr	r2, [pc, #676]	; (801004c <ProcessRadioRxDone+0x524>)
 800fda6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fdaa:	4ba8      	ldr	r3, [pc, #672]	; (801004c <ProcessRadioRxDone+0x524>)
 800fdac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800fdb0:	7ffb      	ldrb	r3, [r7, #31]
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	4aa5      	ldr	r2, [pc, #660]	; (801004c <ProcessRadioRxDone+0x524>)
 800fdb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	4aa3      	ldr	r2, [pc, #652]	; (801004c <ProcessRadioRxDone+0x524>)
 800fdc0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800fdc4:	4ba1      	ldr	r3, [pc, #644]	; (801004c <ProcessRadioRxDone+0x524>)
 800fdc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fdca:	4619      	mov	r1, r3
 800fdcc:	2002      	movs	r0, #2
 800fdce:	f7fe fa5b 	bl	800e288 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fdd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fdd6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	461a      	mov	r2, r3
 800fdde:	4b9b      	ldr	r3, [pc, #620]	; (801004c <ProcessRadioRxDone+0x524>)
 800fde0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fde4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fde8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b96      	ldr	r3, [pc, #600]	; (801004c <ProcessRadioRxDone+0x524>)
 800fdf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fdf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fdfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	461a      	mov	r2, r3
 800fe02:	4b92      	ldr	r3, [pc, #584]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fe08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4b8f      	ldr	r3, [pc, #572]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe10:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fe12:	4b8e      	ldr	r3, [pc, #568]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d102      	bne.n	800fe20 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fe1a:	4b8c      	ldr	r3, [pc, #560]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fe20:	4b8a      	ldr	r3, [pc, #552]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fe28:	fb02 f303 	mul.w	r3, r2, r3
 800fe2c:	4a87      	ldr	r2, [pc, #540]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe2e:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fe30:	4b86      	ldr	r3, [pc, #536]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fe38:	4a84      	ldr	r2, [pc, #528]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe3a:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800fe3c:	4b83      	ldr	r3, [pc, #524]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fe44:	4b81      	ldr	r3, [pc, #516]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fe4c:	f107 0314 	add.w	r3, r7, #20
 800fe50:	3312      	adds	r3, #18
 800fe52:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fe54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	3b11      	subs	r3, #17
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fe62:	4b7a      	ldr	r3, [pc, #488]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fe68:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f006 fb0d 	bl	801648e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fe74:	4b75      	ldr	r3, [pc, #468]	; (801004c <ProcessRadioRxDone+0x524>)
 800fe76:	2202      	movs	r2, #2
 800fe78:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fe7c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800fe80:	4618      	mov	r0, r3
 800fe82:	f005 f80d 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	f000 82d2 	beq.w	8010432 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800fe8e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800fe92:	4619      	mov	r1, r3
 800fe94:	2000      	movs	r0, #0
 800fe96:	f004 ff77 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fe9a:	e2ca      	b.n	8010432 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f004 ffff 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 82c3 	beq.w	8010430 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800feaa:	2101      	movs	r1, #1
 800feac:	2007      	movs	r0, #7
 800feae:	f004 ff6b 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800feb2:	e2bd      	b.n	8010430 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800feb4:	4b66      	ldr	r3, [pc, #408]	; (8010050 <ProcessRadioRxDone+0x528>)
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800febc:	4b63      	ldr	r3, [pc, #396]	; (801004c <ProcessRadioRxDone+0x524>)
 800febe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fec2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fec6:	4b62      	ldr	r3, [pc, #392]	; (8010050 <ProcessRadioRxDone+0x528>)
 800fec8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800fecc:	b25b      	sxtb	r3, r3
 800fece:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fed2:	230d      	movs	r3, #13
 800fed4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fed8:	4b5c      	ldr	r3, [pc, #368]	; (801004c <ProcessRadioRxDone+0x524>)
 800feda:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d002      	beq.n	800fee8 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fee2:	230e      	movs	r3, #14
 800fee4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fee8:	4b58      	ldr	r3, [pc, #352]	; (801004c <ProcessRadioRxDone+0x524>)
 800feea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800feee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800fef2:	4611      	mov	r1, r2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f006 fa78 	bl	80163ea <RegionGetPhyParam>
 800fefa:	4603      	mov	r3, r0
 800fefc:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fefe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff02:	3b0d      	subs	r3, #13
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	b21b      	sxth	r3, r3
 800ff08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff0c:	b21a      	sxth	r2, r3
 800ff0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff10:	b21b      	sxth	r3, r3
 800ff12:	429a      	cmp	r2, r3
 800ff14:	dc03      	bgt.n	800ff1e <ProcessRadioRxDone+0x3f6>
 800ff16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff1a:	2b0b      	cmp	r3, #11
 800ff1c:	d806      	bhi.n	800ff2c <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff1e:	4b4c      	ldr	r3, [pc, #304]	; (8010050 <ProcessRadioRxDone+0x528>)
 800ff20:	2201      	movs	r2, #1
 800ff22:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800ff26:	f7ff fdd9 	bl	800fadc <PrepareRxDoneAbort>
                return;
 800ff2a:	e2a1      	b.n	8010470 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800ff2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff30:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 800ff32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ff3c:	4b45      	ldr	r3, [pc, #276]	; (8010054 <ProcessRadioRxDone+0x52c>)
 800ff3e:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ff40:	23ff      	movs	r3, #255	; 0xff
 800ff42:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ff46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f005 ffd0 	bl	8015ef0 <LoRaMacParserData>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff56:	4b3e      	ldr	r3, [pc, #248]	; (8010050 <ProcessRadioRxDone+0x528>)
 800ff58:	2201      	movs	r2, #1
 800ff5a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800ff5e:	f7ff fdbd 	bl	800fadc <PrepareRxDoneAbort>
                return;
 800ff62:	e285      	b.n	8010470 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ff64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff66:	4a3a      	ldr	r2, [pc, #232]	; (8010050 <ProcessRadioRxDone+0x528>)
 800ff68:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ff6c:	f107 020e 	add.w	r2, r7, #14
 800ff70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f002 fc6b 	bl	8012852 <DetermineFrameType>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff82:	4b33      	ldr	r3, [pc, #204]	; (8010050 <ProcessRadioRxDone+0x528>)
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800ff8a:	f7ff fda7 	bl	800fadc <PrepareRxDoneAbort>
                return;
 800ff8e:	e26f      	b.n	8010470 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 800ffa0:	e04f      	b.n	8010042 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ffa2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 800ffa6:	4929      	ldr	r1, [pc, #164]	; (801004c <ProcessRadioRxDone+0x524>)
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	4413      	add	r3, r2
 800ffae:	011b      	lsls	r3, r3, #4
 800ffb0:	440b      	add	r3, r1
 800ffb2:	33ec      	adds	r3, #236	; 0xec
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d13d      	bne.n	8010038 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ffbc:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 800ffc0:	4922      	ldr	r1, [pc, #136]	; (801004c <ProcessRadioRxDone+0x524>)
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	005b      	lsls	r3, r3, #1
 800ffc6:	4413      	add	r3, r2
 800ffc8:	011b      	lsls	r3, r3, #4
 800ffca:	440b      	add	r3, r1
 800ffcc:	33e9      	adds	r3, #233	; 0xe9
 800ffce:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d031      	beq.n	8010038 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ffda:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 800ffde:	491b      	ldr	r1, [pc, #108]	; (801004c <ProcessRadioRxDone+0x524>)
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	011b      	lsls	r3, r3, #4
 800ffe8:	440b      	add	r3, r1
 800ffea:	33ea      	adds	r3, #234	; 0xea
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fff2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 800fff6:	4915      	ldr	r1, [pc, #84]	; (801004c <ProcessRadioRxDone+0x524>)
 800fff8:	4613      	mov	r3, r2
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	4413      	add	r3, r2
 800fffe:	011b      	lsls	r3, r3, #4
 8010000:	440b      	add	r3, r1
 8010002:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801000c:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010010:	490e      	ldr	r1, [pc, #56]	; (801004c <ProcessRadioRxDone+0x524>)
 8010012:	4613      	mov	r3, r2
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	4413      	add	r3, r2
 8010018:	011b      	lsls	r3, r3, #4
 801001a:	440b      	add	r3, r1
 801001c:	33ec      	adds	r3, #236	; 0xec
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010024:	4b09      	ldr	r3, [pc, #36]	; (801004c <ProcessRadioRxDone+0x524>)
 8010026:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801002a:	2b02      	cmp	r3, #2
 801002c:	d114      	bne.n	8010058 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801002e:	4b08      	ldr	r3, [pc, #32]	; (8010050 <ProcessRadioRxDone+0x528>)
 8010030:	2203      	movs	r2, #3
 8010032:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 8010036:	e00f      	b.n	8010058 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010038:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801003c:	3301      	adds	r3, #1
 801003e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010042:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010046:	2b00      	cmp	r3, #0
 8010048:	d0ab      	beq.n	800ffa2 <ProcessRadioRxDone+0x47a>
 801004a:	e006      	b.n	801005a <ProcessRadioRxDone+0x532>
 801004c:	20000e4c 	.word	0x20000e4c
 8010050:	20000944 	.word	0x20000944
 8010054:	20000b7c 	.word	0x20000b7c
                    break;
 8010058:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801005a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801005e:	2b01      	cmp	r3, #1
 8010060:	d117      	bne.n	8010092 <ProcessRadioRxDone+0x56a>
 8010062:	7bbb      	ldrb	r3, [r7, #14]
 8010064:	2b03      	cmp	r3, #3
 8010066:	d10d      	bne.n	8010084 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010068:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801006c:	f003 0320 	and.w	r3, r3, #32
 8010070:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010072:	2b00      	cmp	r3, #0
 8010074:	d106      	bne.n	8010084 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010076:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801007a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801007e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010080:	2b00      	cmp	r3, #0
 8010082:	d006      	beq.n	8010092 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010084:	4bb3      	ldr	r3, [pc, #716]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801008c:	f7ff fd26 	bl	800fadc <PrepareRxDoneAbort>
                return;
 8010090:	e1ee      	b.n	8010470 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010092:	2315      	movs	r3, #21
 8010094:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010098:	4baf      	ldr	r3, [pc, #700]	; (8010358 <ProcessRadioRxDone+0x830>)
 801009a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801009e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80100a2:	4611      	mov	r1, r2
 80100a4:	4618      	mov	r0, r3
 80100a6:	f006 f9a0 	bl	80163ea <RegionGetPhyParam>
 80100aa:	4603      	mov	r3, r0
 80100ac:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80100ae:	7bb9      	ldrb	r1, [r7, #14]
 80100b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	4da8      	ldr	r5, [pc, #672]	; (8010358 <ProcessRadioRxDone+0x830>)
 80100b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80100ba:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80100be:	f107 0210 	add.w	r2, r7, #16
 80100c2:	9202      	str	r2, [sp, #8]
 80100c4:	f107 020f 	add.w	r2, r7, #15
 80100c8:	9201      	str	r2, [sp, #4]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80100d0:	4622      	mov	r2, r4
 80100d2:	f000 fe8d 	bl	8010df0 <GetFCntDown>
 80100d6:	4603      	mov	r3, r0
 80100d8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80100dc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d035      	beq.n	8010150 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80100e4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80100e8:	2b07      	cmp	r3, #7
 80100ea:	d119      	bne.n	8010120 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80100ec:	4b99      	ldr	r3, [pc, #612]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80100ee:	2208      	movs	r2, #8
 80100f0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80100f4:	4b98      	ldr	r3, [pc, #608]	; (8010358 <ProcessRadioRxDone+0x830>)
 80100f6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d11d      	bne.n	801013a <ProcessRadioRxDone+0x612>
 80100fe:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010102:	f023 031f 	bic.w	r3, r3, #31
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2ba0      	cmp	r3, #160	; 0xa0
 801010a:	d116      	bne.n	801013a <ProcessRadioRxDone+0x612>
 801010c:	4b92      	ldr	r3, [pc, #584]	; (8010358 <ProcessRadioRxDone+0x830>)
 801010e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010112:	429a      	cmp	r2, r3
 8010114:	d111      	bne.n	801013a <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8010116:	4b90      	ldr	r3, [pc, #576]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010118:	2201      	movs	r2, #1
 801011a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 801011e:	e00c      	b.n	801013a <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8010120:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010124:	2b08      	cmp	r3, #8
 8010126:	d104      	bne.n	8010132 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8010128:	4b8a      	ldr	r3, [pc, #552]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801012a:	220a      	movs	r2, #10
 801012c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8010130:	e003      	b.n	801013a <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010132:	4b88      	ldr	r3, [pc, #544]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	4a85      	ldr	r2, [pc, #532]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801013e:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	4a83      	ldr	r2, [pc, #524]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010146:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 801014a:	f7ff fcc7 	bl	800fadc <PrepareRxDoneAbort>
                return;
 801014e:	e18f      	b.n	8010470 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010150:	7bfa      	ldrb	r2, [r7, #15]
 8010152:	6939      	ldr	r1, [r7, #16]
 8010154:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8010158:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801015c:	9300      	str	r3, [sp, #0]
 801015e:	460b      	mov	r3, r1
 8010160:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010164:	f005 fd24 	bl	8015bb0 <LoRaMacCryptoUnsecureMessage>
 8010168:	4603      	mov	r3, r0
 801016a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801016e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00f      	beq.n	8010196 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8010176:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801017a:	2b02      	cmp	r3, #2
 801017c:	d104      	bne.n	8010188 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 801017e:	4b75      	ldr	r3, [pc, #468]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010180:	220b      	movs	r2, #11
 8010182:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8010186:	e003      	b.n	8010190 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010188:	4b72      	ldr	r3, [pc, #456]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801018a:	220c      	movs	r2, #12
 801018c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8010190:	f7ff fca4 	bl	800fadc <PrepareRxDoneAbort>
                return;
 8010194:	e16c      	b.n	8010470 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010196:	4b6f      	ldr	r3, [pc, #444]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010198:	2200      	movs	r2, #0
 801019a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 801019e:	4a6d      	ldr	r2, [pc, #436]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101a0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80101a4:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 80101a8:	4b6a      	ldr	r3, [pc, #424]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80101b0:	4b68      	ldr	r3, [pc, #416]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	4a66      	ldr	r2, [pc, #408]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101bc:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	4a64      	ldr	r2, [pc, #400]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101c4:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80101c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80101cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	bf14      	ite	ne
 80101d6:	2301      	movne	r3, #1
 80101d8:	2300      	moveq	r3, #0
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	4b5d      	ldr	r3, [pc, #372]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101de:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80101e2:	4b5c      	ldr	r3, [pc, #368]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80101ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80101ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	bf14      	ite	ne
 80101f8:	2301      	movne	r3, #1
 80101fa:	2300      	moveq	r3, #0
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	4b55      	ldr	r3, [pc, #340]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010200:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010204:	4b53      	ldr	r3, [pc, #332]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010206:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801020a:	2b00      	cmp	r3, #0
 801020c:	d004      	beq.n	8010218 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801020e:	4b51      	ldr	r3, [pc, #324]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010210:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010214:	2b01      	cmp	r3, #1
 8010216:	d102      	bne.n	801021e <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8010218:	4b4f      	ldr	r3, [pc, #316]	; (8010358 <ProcessRadioRxDone+0x830>)
 801021a:	2200      	movs	r2, #0
 801021c:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801021e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8010222:	2b01      	cmp	r3, #1
 8010224:	d104      	bne.n	8010230 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010226:	4b4b      	ldr	r3, [pc, #300]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010228:	2202      	movs	r2, #2
 801022a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801022e:	e01f      	b.n	8010270 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8010230:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010234:	f023 031f 	bic.w	r3, r3, #31
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2ba0      	cmp	r3, #160	; 0xa0
 801023c:	d110      	bne.n	8010260 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801023e:	4b46      	ldr	r3, [pc, #280]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010240:	2201      	movs	r2, #1
 8010242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010246:	4b44      	ldr	r3, [pc, #272]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010248:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 801024c:	2b00      	cmp	r3, #0
 801024e:	d102      	bne.n	8010256 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8010250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010252:	4a41      	ldr	r2, [pc, #260]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010254:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010256:	4b3f      	ldr	r3, [pc, #252]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010258:	2201      	movs	r2, #1
 801025a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801025e:	e007      	b.n	8010270 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010260:	4b3d      	ldr	r3, [pc, #244]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010262:	2200      	movs	r2, #0
 8010264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010268:	4b3a      	ldr	r3, [pc, #232]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010270:	4b39      	ldr	r3, [pc, #228]	; (8010358 <ProcessRadioRxDone+0x830>)
 8010272:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010276:	2b00      	cmp	r3, #0
 8010278:	d106      	bne.n	8010288 <ProcessRadioRxDone+0x760>
 801027a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801027e:	f003 0310 	and.w	r3, r3, #16
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b00      	cmp	r3, #0
 8010286:	d008      	beq.n	801029a <ProcessRadioRxDone+0x772>
 8010288:	4b33      	ldr	r3, [pc, #204]	; (8010358 <ProcessRadioRxDone+0x830>)
 801028a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801028e:	2b00      	cmp	r3, #0
 8010290:	d103      	bne.n	801029a <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010292:	4b30      	ldr	r3, [pc, #192]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010294:	2201      	movs	r2, #1
 8010296:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801029a:	4b2e      	ldr	r3, [pc, #184]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801029c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80102a0:	4a2c      	ldr	r2, [pc, #176]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80102a2:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 80102a6:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 fef2 	bl	8012094 <RemoveMacCommands>

            switch( fType )
 80102b0:	7bbb      	ldrb	r3, [r7, #14]
 80102b2:	2b03      	cmp	r3, #3
 80102b4:	d878      	bhi.n	80103a8 <ProcessRadioRxDone+0x880>
 80102b6:	a201      	add	r2, pc, #4	; (adr r2, 80102bc <ProcessRadioRxDone+0x794>)
 80102b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102bc:	080102cd 	.word	0x080102cd
 80102c0:	0801031d 	.word	0x0801031d
 80102c4:	0801035d 	.word	0x0801035d
 80102c8:	08010383 	.word	0x08010383
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80102cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80102d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	461c      	mov	r4, r3
 80102d8:	4b1e      	ldr	r3, [pc, #120]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80102da:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80102de:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80102e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80102e6:	f102 0010 	add.w	r0, r2, #16
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	460b      	mov	r3, r1
 80102ee:	4622      	mov	r2, r4
 80102f0:	2100      	movs	r1, #0
 80102f2:	f000 fef7 	bl	80110e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80102f6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80102fa:	4b16      	ldr	r3, [pc, #88]	; (8010354 <ProcessRadioRxDone+0x82c>)
 80102fc:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010302:	4a14      	ldr	r2, [pc, #80]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010304:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010308:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801030c:	4b11      	ldr	r3, [pc, #68]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801030e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8010312:	4b10      	ldr	r3, [pc, #64]	; (8010354 <ProcessRadioRxDone+0x82c>)
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801031a:	e04c      	b.n	80103b6 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801031c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010324:	b2db      	uxtb	r3, r3
 8010326:	461c      	mov	r4, r3
 8010328:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801032a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801032e:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8010332:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010336:	f102 0010 	add.w	r0, r2, #16
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	460b      	mov	r3, r1
 801033e:	4622      	mov	r2, r4
 8010340:	2100      	movs	r1, #0
 8010342:	f000 fecf 	bl	80110e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010346:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801034a:	4b02      	ldr	r3, [pc, #8]	; (8010354 <ProcessRadioRxDone+0x82c>)
 801034c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8010350:	e031      	b.n	80103b6 <ProcessRadioRxDone+0x88e>
 8010352:	bf00      	nop
 8010354:	20000944 	.word	0x20000944
 8010358:	20000e4c 	.word	0x20000e4c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 801035c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801035e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8010362:	4b45      	ldr	r3, [pc, #276]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010364:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010368:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	460b      	mov	r3, r1
 8010370:	2100      	movs	r1, #0
 8010372:	f000 feb7 	bl	80110e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010376:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801037a:	4b3f      	ldr	r3, [pc, #252]	; (8010478 <ProcessRadioRxDone+0x950>)
 801037c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8010380:	e019      	b.n	80103b6 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010382:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8010386:	4b3c      	ldr	r3, [pc, #240]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010388:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801038c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801038e:	4a3a      	ldr	r2, [pc, #232]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010390:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010394:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8010398:	4b37      	ldr	r3, [pc, #220]	; (8010478 <ProcessRadioRxDone+0x950>)
 801039a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801039e:	4b36      	ldr	r3, [pc, #216]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 80103a6:	e006      	b.n	80103b6 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80103a8:	4b33      	ldr	r3, [pc, #204]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 80103b0:	f7ff fb94 	bl	800fadc <PrepareRxDoneAbort>
                    break;
 80103b4:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80103b6:	4a30      	ldr	r2, [pc, #192]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103b8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80103bc:	f043 0302 	orr.w	r3, r3, #2
 80103c0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80103c4:	e035      	b.n	8010432 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80103c6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80103ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80103ce:	18d1      	adds	r1, r2, r3
 80103d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80103da:	1ad3      	subs	r3, r2, r3
 80103dc:	b29b      	uxth	r3, r3
 80103de:	461a      	mov	r2, r3
 80103e0:	4826      	ldr	r0, [pc, #152]	; (801047c <ProcessRadioRxDone+0x954>)
 80103e2:	f008 fb1c 	bl	8018a1e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80103e6:	4b24      	ldr	r3, [pc, #144]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103e8:	2203      	movs	r2, #3
 80103ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80103ee:	4b22      	ldr	r3, [pc, #136]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80103f6:	4b20      	ldr	r3, [pc, #128]	; (8010478 <ProcessRadioRxDone+0x950>)
 80103f8:	4a20      	ldr	r2, [pc, #128]	; (801047c <ProcessRadioRxDone+0x954>)
 80103fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80103fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010402:	b2da      	uxtb	r2, r3
 8010404:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	b2da      	uxtb	r2, r3
 801040c:	4b1a      	ldr	r3, [pc, #104]	; (8010478 <ProcessRadioRxDone+0x950>)
 801040e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010412:	4a19      	ldr	r2, [pc, #100]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010414:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010418:	f043 0302 	orr.w	r3, r3, #2
 801041c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8010420:	e007      	b.n	8010432 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010422:	4b15      	ldr	r3, [pc, #84]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010424:	2201      	movs	r2, #1
 8010426:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 801042a:	f7ff fb57 	bl	800fadc <PrepareRxDoneAbort>
            break;
 801042e:	e000      	b.n	8010432 <ProcessRadioRxDone+0x90a>
            break;
 8010430:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8010432:	4b11      	ldr	r3, [pc, #68]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010434:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010438:	2b00      	cmp	r3, #0
 801043a:	d008      	beq.n	801044e <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801043c:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <ProcessRadioRxDone+0x950>)
 801043e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00b      	beq.n	801045e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8010446:	2000      	movs	r0, #0
 8010448:	f000 fcaa 	bl	8010da0 <OnAckTimeoutTimerEvent>
 801044c:	e007      	b.n	801045e <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801044e:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <ProcessRadioRxDone+0x958>)
 8010450:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010454:	2b02      	cmp	r3, #2
 8010456:	d102      	bne.n	801045e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8010458:	2000      	movs	r0, #0
 801045a:	f000 fca1 	bl	8010da0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801045e:	4a06      	ldr	r2, [pc, #24]	; (8010478 <ProcessRadioRxDone+0x950>)
 8010460:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010464:	f043 0310 	orr.w	r3, r3, #16
 8010468:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801046c:	f7ff fa6c 	bl	800f948 <UpdateRxSlotIdleState>
}
 8010470:	3798      	adds	r7, #152	; 0x98
 8010472:	46bd      	mov	sp, r7
 8010474:	bdb0      	pop	{r4, r5, r7, pc}
 8010476:	bf00      	nop
 8010478:	20000944 	.word	0x20000944
 801047c:	20000b7c 	.word	0x20000b7c
 8010480:	20000e4c 	.word	0x20000e4c

08010484 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010488:	4b11      	ldr	r3, [pc, #68]	; (80104d0 <ProcessRadioTxTimeout+0x4c>)
 801048a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801048e:	2b02      	cmp	r3, #2
 8010490:	d002      	beq.n	8010498 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010492:	4b10      	ldr	r3, [pc, #64]	; (80104d4 <ProcessRadioTxTimeout+0x50>)
 8010494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010496:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010498:	f7ff fa56 	bl	800f948 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801049c:	4b0e      	ldr	r3, [pc, #56]	; (80104d8 <ProcessRadioTxTimeout+0x54>)
 801049e:	2202      	movs	r2, #2
 80104a0:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80104a4:	2002      	movs	r0, #2
 80104a6:	f004 fcc7 	bl	8014e38 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80104aa:	4b0b      	ldr	r3, [pc, #44]	; (80104d8 <ProcessRadioTxTimeout+0x54>)
 80104ac:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d003      	beq.n	80104bc <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80104b4:	4b08      	ldr	r3, [pc, #32]	; (80104d8 <ProcessRadioTxTimeout+0x54>)
 80104b6:	2201      	movs	r2, #1
 80104b8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80104bc:	4a06      	ldr	r2, [pc, #24]	; (80104d8 <ProcessRadioTxTimeout+0x54>)
 80104be:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80104c2:	f043 0310 	orr.w	r3, r3, #16
 80104c6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80104ca:	bf00      	nop
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	20000e4c 	.word	0x20000e4c
 80104d4:	0801e604 	.word	0x0801e604
 80104d8:	20000944 	.word	0x20000944

080104dc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	4603      	mov	r3, r0
 80104e4:	460a      	mov	r2, r1
 80104e6:	71fb      	strb	r3, [r7, #7]
 80104e8:	4613      	mov	r3, r2
 80104ea:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80104ec:	2300      	movs	r3, #0
 80104ee:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80104f0:	4b40      	ldr	r3, [pc, #256]	; (80105f4 <HandleRadioRxErrorTimeout+0x118>)
 80104f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d002      	beq.n	8010500 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80104fa:	4b3f      	ldr	r3, [pc, #252]	; (80105f8 <HandleRadioRxErrorTimeout+0x11c>)
 80104fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fe:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010500:	f003 ffdf 	bl	80144c2 <LoRaMacClassBIsBeaconExpected>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d007      	beq.n	801051a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801050a:	2002      	movs	r0, #2
 801050c:	f003 ff8d 	bl	801442a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010510:	2000      	movs	r0, #0
 8010512:	f003 ffaf 	bl	8014474 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010516:	2301      	movs	r3, #1
 8010518:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801051a:	4b36      	ldr	r3, [pc, #216]	; (80105f4 <HandleRadioRxErrorTimeout+0x118>)
 801051c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010520:	2b01      	cmp	r3, #1
 8010522:	d119      	bne.n	8010558 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010524:	f003 ffd4 	bl	80144d0 <LoRaMacClassBIsPingExpected>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d007      	beq.n	801053e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801052e:	2000      	movs	r0, #0
 8010530:	f003 ff85 	bl	801443e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010534:	2000      	movs	r0, #0
 8010536:	f003 ffa6 	bl	8014486 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801053a:	2301      	movs	r3, #1
 801053c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801053e:	f003 ffce 	bl	80144de <LoRaMacClassBIsMulticastExpected>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d007      	beq.n	8010558 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010548:	2000      	movs	r0, #0
 801054a:	f003 ff82 	bl	8014452 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801054e:	2000      	movs	r0, #0
 8010550:	f003 ffa2 	bl	8014498 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010554:	2301      	movs	r3, #1
 8010556:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	f083 0301 	eor.w	r3, r3, #1
 801055e:	b2db      	uxtb	r3, r3
 8010560:	2b00      	cmp	r3, #0
 8010562:	d040      	beq.n	80105e6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010564:	4b25      	ldr	r3, [pc, #148]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 8010566:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801056a:	2b00      	cmp	r3, #0
 801056c:	d122      	bne.n	80105b4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801056e:	4b23      	ldr	r3, [pc, #140]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 8010570:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010578:	4a20      	ldr	r2, [pc, #128]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010580:	79fb      	ldrb	r3, [r7, #7]
 8010582:	4618      	mov	r0, r3
 8010584:	f004 fc58 	bl	8014e38 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010588:	4b1a      	ldr	r3, [pc, #104]	; (80105f4 <HandleRadioRxErrorTimeout+0x118>)
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	4618      	mov	r0, r3
 801058e:	f00c fd0d 	bl	801cfac <UTIL_TIMER_GetElapsedTime>
 8010592:	4602      	mov	r2, r0
 8010594:	4b19      	ldr	r3, [pc, #100]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 8010596:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801059a:	429a      	cmp	r2, r3
 801059c:	d323      	bcc.n	80105e6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801059e:	4818      	ldr	r0, [pc, #96]	; (8010600 <HandleRadioRxErrorTimeout+0x124>)
 80105a0:	f00c fbd8 	bl	801cd54 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80105a4:	4a15      	ldr	r2, [pc, #84]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 80105a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80105aa:	f043 0310 	orr.w	r3, r3, #16
 80105ae:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80105b2:	e018      	b.n	80105e6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80105b4:	4b11      	ldr	r3, [pc, #68]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 80105b6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d003      	beq.n	80105c6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80105be:	4a0f      	ldr	r2, [pc, #60]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 80105c0:	79bb      	ldrb	r3, [r7, #6]
 80105c2:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80105c6:	79bb      	ldrb	r3, [r7, #6]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f004 fc35 	bl	8014e38 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80105ce:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <HandleRadioRxErrorTimeout+0x118>)
 80105d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d006      	beq.n	80105e6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80105d8:	4a08      	ldr	r2, [pc, #32]	; (80105fc <HandleRadioRxErrorTimeout+0x120>)
 80105da:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80105de:	f043 0310 	orr.w	r3, r3, #16
 80105e2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80105e6:	f7ff f9af 	bl	800f948 <UpdateRxSlotIdleState>
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	20000e4c 	.word	0x20000e4c
 80105f8:	0801e604 	.word	0x0801e604
 80105fc:	20000944 	.word	0x20000944
 8010600:	20000cdc 	.word	0x20000cdc

08010604 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010608:	2106      	movs	r1, #6
 801060a:	2005      	movs	r0, #5
 801060c:	f7ff ff66 	bl	80104dc <HandleRadioRxErrorTimeout>
}
 8010610:	bf00      	nop
 8010612:	bd80      	pop	{r7, pc}

08010614 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010618:	2104      	movs	r1, #4
 801061a:	2003      	movs	r0, #3
 801061c:	f7ff ff5e 	bl	80104dc <HandleRadioRxErrorTimeout>
}
 8010620:	bf00      	nop
 8010622:	bd80      	pop	{r7, pc}

08010624 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801062a:	f3ef 8310 	mrs	r3, PRIMASK
 801062e:	607b      	str	r3, [r7, #4]
  return(result);
 8010630:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010634:	b672      	cpsid	i
}
 8010636:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010638:	4b1d      	ldr	r3, [pc, #116]	; (80106b0 <LoRaMacHandleIrqEvents+0x8c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801063e:	4b1c      	ldr	r3, [pc, #112]	; (80106b0 <LoRaMacHandleIrqEvents+0x8c>)
 8010640:	2200      	movs	r2, #0
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	f383 8810 	msr	PRIMASK, r3
}
 801064e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d027      	beq.n	80106a6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8010656:	783b      	ldrb	r3, [r7, #0]
 8010658:	f003 0310 	and.w	r3, r3, #16
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010662:	f7ff f989 	bl	800f978 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010666:	783b      	ldrb	r3, [r7, #0]
 8010668:	f003 0308 	and.w	r3, r3, #8
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010672:	f7ff fa59 	bl	800fb28 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010676:	783b      	ldrb	r3, [r7, #0]
 8010678:	f003 0304 	and.w	r3, r3, #4
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010682:	f7ff feff 	bl	8010484 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010686:	783b      	ldrb	r3, [r7, #0]
 8010688:	f003 0302 	and.w	r3, r3, #2
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010692:	f7ff ffb7 	bl	8010604 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010696:	783b      	ldrb	r3, [r7, #0]
 8010698:	f003 0301 	and.w	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 80106a2:	f7ff ffb7 	bl	8010614 <ProcessRadioRxTimeout>
        }
    }
}
 80106a6:	bf00      	nop
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	200015b4 	.word	0x200015b4

080106b4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80106b4:	b480      	push	{r7}
 80106b6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80106b8:	4b0b      	ldr	r3, [pc, #44]	; (80106e8 <LoRaMacIsBusy+0x34>)
 80106ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d101      	bne.n	80106c6 <LoRaMacIsBusy+0x12>
    {
        return false;
 80106c2:	2300      	movs	r3, #0
 80106c4:	e00c      	b.n	80106e0 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80106c6:	4b08      	ldr	r3, [pc, #32]	; (80106e8 <LoRaMacIsBusy+0x34>)
 80106c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d106      	bne.n	80106de <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80106d0:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <LoRaMacIsBusy+0x34>)
 80106d2:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d101      	bne.n	80106de <LoRaMacIsBusy+0x2a>
    {
        return false;
 80106da:	2300      	movs	r3, #0
 80106dc:	e000      	b.n	80106e0 <LoRaMacIsBusy+0x2c>
    }
    return true;
 80106de:	2301      	movs	r3, #1
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bc80      	pop	{r7}
 80106e6:	4770      	bx	lr
 80106e8:	20000944 	.word	0x20000944

080106ec <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80106ec:	b480      	push	{r7}
 80106ee:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80106f0:	4b05      	ldr	r3, [pc, #20]	; (8010708 <LoRaMacIsStopped+0x1c>)
 80106f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d101      	bne.n	80106fe <LoRaMacIsStopped+0x12>
    {
        return true;
 80106fa:	2301      	movs	r3, #1
 80106fc:	e000      	b.n	8010700 <LoRaMacIsStopped+0x14>
    }
    return false;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	46bd      	mov	sp, r7
 8010704:	bc80      	pop	{r7}
 8010706:	4770      	bx	lr
 8010708:	20000944 	.word	0x20000944

0801070c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	4603      	mov	r3, r0
 8010714:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8010716:	4a04      	ldr	r2, [pc, #16]	; (8010728 <LoRaMacEnableRequests+0x1c>)
 8010718:	79fb      	ldrb	r3, [r7, #7]
 801071a:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 801071e:	bf00      	nop
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	bc80      	pop	{r7}
 8010726:	4770      	bx	lr
 8010728:	20000944 	.word	0x20000944

0801072c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010732:	4b2c      	ldr	r3, [pc, #176]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010734:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010738:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801073a:	4b2a      	ldr	r3, [pc, #168]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 801073c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010740:	2b00      	cmp	r3, #0
 8010742:	d14a      	bne.n	80107da <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010744:	4b27      	ldr	r3, [pc, #156]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010746:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	b2db      	uxtb	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d006      	beq.n	8010762 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010754:	4a23      	ldr	r2, [pc, #140]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010756:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801075a:	f36f 0300 	bfc	r3, #0, #1
 801075e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010762:	4b20      	ldr	r3, [pc, #128]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010764:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010768:	f003 0304 	and.w	r3, r3, #4
 801076c:	b2db      	uxtb	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d006      	beq.n	8010780 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010772:	4a1c      	ldr	r2, [pc, #112]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010774:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010778:	f36f 0382 	bfc	r3, #2, #1
 801077c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010780:	2001      	movs	r0, #1
 8010782:	f7ff ffc3 	bl	801070c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010786:	793b      	ldrb	r3, [r7, #4]
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	b2db      	uxtb	r3, r3
 801078e:	2b00      	cmp	r3, #0
 8010790:	d005      	beq.n	801079e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010792:	4b14      	ldr	r3, [pc, #80]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 8010794:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4813      	ldr	r0, [pc, #76]	; (80107e8 <LoRaMacHandleRequestEvents+0xbc>)
 801079c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801079e:	793b      	ldrb	r3, [r7, #4]
 80107a0:	f003 0304 	and.w	r3, r3, #4
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00e      	beq.n	80107c8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80107aa:	4810      	ldr	r0, [pc, #64]	; (80107ec <LoRaMacHandleRequestEvents+0xc0>)
 80107ac:	f004 fb92 	bl	8014ed4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80107b0:	f004 fbe2 	bl	8014f78 <LoRaMacConfirmQueueGetCnt>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d006      	beq.n	80107c8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80107ba:	4a0a      	ldr	r2, [pc, #40]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 80107bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80107c0:	f043 0304 	orr.w	r3, r3, #4
 80107c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80107c8:	f003 fea7 	bl	801451a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80107cc:	4a05      	ldr	r2, [pc, #20]	; (80107e4 <LoRaMacHandleRequestEvents+0xb8>)
 80107ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80107d2:	f36f 1304 	bfc	r3, #4, #1
 80107d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 80107da:	bf00      	nop
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20000944 	.word	0x20000944
 80107e8:	20000d78 	.word	0x20000d78
 80107ec:	20000d8c 	.word	0x20000d8c

080107f0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80107f4:	4b16      	ldr	r3, [pc, #88]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 80107f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80107fa:	f003 0308 	and.w	r3, r3, #8
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00d      	beq.n	8010820 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010804:	4a12      	ldr	r2, [pc, #72]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 8010806:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801080a:	f36f 03c3 	bfc	r3, #3, #1
 801080e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8010812:	4b0f      	ldr	r3, [pc, #60]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 8010814:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	490e      	ldr	r1, [pc, #56]	; (8010854 <LoRaMacHandleIndicationEvents+0x64>)
 801081c:	480e      	ldr	r0, [pc, #56]	; (8010858 <LoRaMacHandleIndicationEvents+0x68>)
 801081e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010820:	4b0b      	ldr	r3, [pc, #44]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 8010822:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010826:	f003 0302 	and.w	r3, r3, #2
 801082a:	b2db      	uxtb	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00d      	beq.n	801084c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010830:	4a07      	ldr	r2, [pc, #28]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 8010832:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010836:	f36f 0341 	bfc	r3, #1, #1
 801083a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801083e:	4b04      	ldr	r3, [pc, #16]	; (8010850 <LoRaMacHandleIndicationEvents+0x60>)
 8010840:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	4903      	ldr	r1, [pc, #12]	; (8010854 <LoRaMacHandleIndicationEvents+0x64>)
 8010848:	4804      	ldr	r0, [pc, #16]	; (801085c <LoRaMacHandleIndicationEvents+0x6c>)
 801084a:	4798      	blx	r3
    }
}
 801084c:	bf00      	nop
 801084e:	bd80      	pop	{r7, pc}
 8010850:	20000944 	.word	0x20000944
 8010854:	20000dc0 	.word	0x20000dc0
 8010858:	20000da0 	.word	0x20000da0
 801085c:	20000d5c 	.word	0x20000d5c

08010860 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010866:	4b32      	ldr	r3, [pc, #200]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 8010868:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801086c:	f003 0301 	and.w	r3, r3, #1
 8010870:	b2db      	uxtb	r3, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	d058      	beq.n	8010928 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8010876:	2300      	movs	r3, #0
 8010878:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 801087a:	2300      	movs	r3, #0
 801087c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801087e:	4b2c      	ldr	r3, [pc, #176]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 8010880:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010888:	4b29      	ldr	r3, [pc, #164]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 801088a:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801088e:	2b03      	cmp	r3, #3
 8010890:	d104      	bne.n	801089c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010892:	f002 f82d 	bl	80128f0 <CheckRetransUnconfirmedUplink>
 8010896:	4603      	mov	r3, r0
 8010898:	71fb      	strb	r3, [r7, #7]
 801089a:	e020      	b.n	80108de <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801089c:	4b24      	ldr	r3, [pc, #144]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 801089e:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d11b      	bne.n	80108de <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 80108a6:	4b22      	ldr	r3, [pc, #136]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 80108a8:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d014      	beq.n	80108da <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80108b0:	f002 f84a 	bl	8012948 <CheckRetransConfirmedUplink>
 80108b4:	4603      	mov	r3, r0
 80108b6:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80108b8:	4b1e      	ldr	r3, [pc, #120]	; (8010934 <LoRaMacHandleMcpsRequest+0xd4>)
 80108ba:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10d      	bne.n	80108de <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 80108c2:	79fb      	ldrb	r3, [r7, #7]
 80108c4:	f083 0301 	eor.w	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 80108ce:	f002 f8cd 	bl	8012a6c <AckTimeoutRetriesProcess>
 80108d2:	e004      	b.n	80108de <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80108d4:	f002 f908 	bl	8012ae8 <AckTimeoutRetriesFinalize>
 80108d8:	e001      	b.n	80108de <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80108da:	2301      	movs	r3, #1
 80108dc:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00d      	beq.n	8010900 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80108e4:	4814      	ldr	r0, [pc, #80]	; (8010938 <LoRaMacHandleMcpsRequest+0xd8>)
 80108e6:	f00c fa35 	bl	801cd54 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80108ea:	4b11      	ldr	r3, [pc, #68]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 80108ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108f0:	f023 0320 	bic.w	r3, r3, #32
 80108f4:	4a0e      	ldr	r2, [pc, #56]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 80108f6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80108fa:	f002 f847 	bl	801298c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80108fe:	e013      	b.n	8010928 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8010900:	79bb      	ldrb	r3, [r7, #6]
 8010902:	f083 0301 	eor.w	r3, r3, #1
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00d      	beq.n	8010928 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 801090c:	4a08      	ldr	r2, [pc, #32]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 801090e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010912:	f36f 1304 	bfc	r3, #4, #1
 8010916:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <LoRaMacHandleMcpsRequest+0xd0>)
 801091c:	2200      	movs	r2, #0
 801091e:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8010922:	2000      	movs	r0, #0
 8010924:	f000 f992 	bl	8010c4c <OnTxDelayedTimerEvent>
}
 8010928:	bf00      	nop
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	20000944 	.word	0x20000944
 8010934:	20000e4c 	.word	0x20000e4c
 8010938:	20000cac 	.word	0x20000cac

0801093c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010940:	4b1b      	ldr	r3, [pc, #108]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 8010942:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	b2db      	uxtb	r3, r3
 801094c:	2b00      	cmp	r3, #0
 801094e:	d02c      	beq.n	80109aa <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010950:	2001      	movs	r0, #1
 8010952:	f004 faa5 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d012      	beq.n	8010982 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801095c:	2001      	movs	r0, #1
 801095e:	f004 fa41 	bl	8014de4 <LoRaMacConfirmQueueGetStatus>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d103      	bne.n	8010970 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010968:	4b11      	ldr	r3, [pc, #68]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 801096a:	2200      	movs	r2, #0
 801096c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010970:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 8010972:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010976:	f023 0302 	bic.w	r3, r3, #2
 801097a:	4a0d      	ldr	r2, [pc, #52]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 801097c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010980:	e013      	b.n	80109aa <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010982:	2006      	movs	r0, #6
 8010984:	f004 fa8c 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d105      	bne.n	801099a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801098e:	2007      	movs	r0, #7
 8010990:	f004 fa86 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 8010994:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010996:	2b00      	cmp	r3, #0
 8010998:	d007      	beq.n	80109aa <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801099a:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 801099c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109a0:	f023 0302 	bic.w	r3, r3, #2
 80109a4:	4a02      	ldr	r2, [pc, #8]	; (80109b0 <LoRaMacHandleMlmeRequest+0x74>)
 80109a6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80109aa:	bf00      	nop
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	20000944 	.word	0x20000944

080109b4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80109b8:	200c      	movs	r0, #12
 80109ba:	f004 fa71 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d019      	beq.n	80109f8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80109c4:	4b0e      	ldr	r3, [pc, #56]	; (8010a00 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80109c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d111      	bne.n	80109f8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80109d4:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80109d6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109da:	f003 0304 	and.w	r3, r3, #4
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d009      	beq.n	80109f8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109e4:	4b06      	ldr	r3, [pc, #24]	; (8010a00 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80109e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109ea:	f023 0302 	bic.w	r3, r3, #2
 80109ee:	4a04      	ldr	r2, [pc, #16]	; (8010a00 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80109f0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80109f4:	2301      	movs	r3, #1
 80109f6:	e000      	b.n	80109fa <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20000944 	.word	0x20000944

08010a04 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010a04:	b480      	push	{r7}
 8010a06:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010a08:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <LoRaMacCheckForRxAbort+0x3c>)
 8010a0a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00f      	beq.n	8010a36 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010a16:	4b0a      	ldr	r3, [pc, #40]	; (8010a40 <LoRaMacCheckForRxAbort+0x3c>)
 8010a18:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a20:	4a07      	ldr	r2, [pc, #28]	; (8010a40 <LoRaMacCheckForRxAbort+0x3c>)
 8010a22:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a26:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <LoRaMacCheckForRxAbort+0x3c>)
 8010a28:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a2c:	f023 0302 	bic.w	r3, r3, #2
 8010a30:	4a03      	ldr	r2, [pc, #12]	; (8010a40 <LoRaMacCheckForRxAbort+0x3c>)
 8010a32:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010a36:	bf00      	nop
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bc80      	pop	{r7}
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	20000944 	.word	0x20000944

08010a44 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010a50:	2300      	movs	r3, #0
 8010a52:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010a54:	4b50      	ldr	r3, [pc, #320]	; (8010b98 <LoRaMacHandleNvm+0x154>)
 8010a56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f040 8098 	bne.w	8010b90 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2124      	movs	r1, #36	; 0x24
 8010a64:	4618      	mov	r0, r3
 8010a66:	f008 f82f 	bl	8018ac8 <Crc32>
 8010a6a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d006      	beq.n	8010a84 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010a7c:	89fb      	ldrh	r3, [r7, #14]
 8010a7e:	f043 0301 	orr.w	r3, r3, #1
 8010a82:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3328      	adds	r3, #40	; 0x28
 8010a88:	211c      	movs	r1, #28
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f008 f81c 	bl	8018ac8 <Crc32>
 8010a90:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d006      	beq.n	8010aaa <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8010aa2:	89fb      	ldrh	r3, [r7, #14]
 8010aa4:	f043 0302 	orr.w	r3, r3, #2
 8010aa8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	3348      	adds	r3, #72	; 0x48
 8010aae:	21fc      	movs	r1, #252	; 0xfc
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f008 f809 	bl	8018ac8 <Crc32>
 8010ab6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d007      	beq.n	8010ad4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010acc:	89fb      	ldrh	r3, [r7, #14]
 8010ace:	f043 0304 	orr.w	r3, r3, #4
 8010ad2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010ada:	21d4      	movs	r1, #212	; 0xd4
 8010adc:	4618      	mov	r0, r3
 8010ade:	f007 fff3 	bl	8018ac8 <Crc32>
 8010ae2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d007      	beq.n	8010b00 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010af8:	89fb      	ldrh	r3, [r7, #14]
 8010afa:	f043 0308 	orr.w	r3, r3, #8
 8010afe:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8010b06:	2190      	movs	r1, #144	; 0x90
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f007 ffdd 	bl	8018ac8 <Crc32>
 8010b0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010b16:	68ba      	ldr	r2, [r7, #8]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d007      	beq.n	8010b2c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010b24:	89fb      	ldrh	r3, [r7, #14]
 8010b26:	f043 0310 	orr.w	r3, r3, #16
 8010b2a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8010b32:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010b36:	4618      	mov	r0, r3
 8010b38:	f007 ffc6 	bl	8018ac8 <Crc32>
 8010b3c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d007      	beq.n	8010b5a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68ba      	ldr	r2, [r7, #8]
 8010b4e:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010b52:	89fb      	ldrh	r3, [r7, #14]
 8010b54:	f043 0320 	orr.w	r3, r3, #32
 8010b58:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8010b60:	2114      	movs	r1, #20
 8010b62:	4618      	mov	r0, r3
 8010b64:	f007 ffb0 	bl	8018ac8 <Crc32>
 8010b68:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8010b70:	68ba      	ldr	r2, [r7, #8]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d007      	beq.n	8010b86 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010b7e:	89fb      	ldrh	r3, [r7, #14]
 8010b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b84:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010b86:	89fb      	ldrh	r3, [r7, #14]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f001 ff51 	bl	8012a30 <CallNvmDataChangeCallback>
 8010b8e:	e000      	b.n	8010b92 <LoRaMacHandleNvm+0x14e>
        return;
 8010b90:	bf00      	nop
}
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20000944 	.word	0x20000944

08010b9c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010ba6:	f7ff fd3d 	bl	8010624 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010baa:	f003 fd1a 	bl	80145e2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010bae:	4b25      	ldr	r3, [pc, #148]	; (8010c44 <LoRaMacProcess+0xa8>)
 8010bb0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010bb4:	f003 0310 	and.w	r3, r3, #16
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d023      	beq.n	8010c06 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	f7ff fda4 	bl	801070c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010bc4:	f7ff ff1e 	bl	8010a04 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010bc8:	f001 ffc2 	bl	8012b50 <IsRequestPending>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010bd2:	f7ff feef 	bl	80109b4 <LoRaMacCheckForBeaconAcquisition>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	461a      	mov	r2, r3
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010be0:	79fb      	ldrb	r3, [r7, #7]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d103      	bne.n	8010bee <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010be6:	f7ff fea9 	bl	801093c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010bea:	f7ff fe39 	bl	8010860 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010bee:	f7ff fd9d 	bl	801072c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010bf2:	2001      	movs	r0, #1
 8010bf4:	f7ff fd8a 	bl	801070c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010bf8:	4a12      	ldr	r2, [pc, #72]	; (8010c44 <LoRaMacProcess+0xa8>)
 8010bfa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010bfe:	f043 0320 	orr.w	r3, r3, #32
 8010c02:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8010c06:	f7ff fdf3 	bl	80107f0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010c0a:	4b0e      	ldr	r3, [pc, #56]	; (8010c44 <LoRaMacProcess+0xa8>)
 8010c0c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d101      	bne.n	8010c18 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010c14:	f001 fbb8 	bl	8012388 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010c18:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <LoRaMacProcess+0xa8>)
 8010c1a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010c1e:	f003 0320 	and.w	r3, r3, #32
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d009      	beq.n	8010c3c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010c28:	4a06      	ldr	r2, [pc, #24]	; (8010c44 <LoRaMacProcess+0xa8>)
 8010c2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010c2e:	f36f 1345 	bfc	r3, #5, #1
 8010c32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8010c36:	4804      	ldr	r0, [pc, #16]	; (8010c48 <LoRaMacProcess+0xac>)
 8010c38:	f7ff ff04 	bl	8010a44 <LoRaMacHandleNvm>
    }
}
 8010c3c:	bf00      	nop
 8010c3e:	3708      	adds	r7, #8
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	20000944 	.word	0x20000944
 8010c48:	20000e4c 	.word	0x20000e4c

08010c4c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010c54:	4817      	ldr	r0, [pc, #92]	; (8010cb4 <OnTxDelayedTimerEvent+0x68>)
 8010c56:	f00c f87d 	bl	801cd54 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010c5a:	4b17      	ldr	r3, [pc, #92]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c60:	f023 0320 	bic.w	r3, r3, #32
 8010c64:	4a14      	ldr	r2, [pc, #80]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c66:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010c6a:	2001      	movs	r0, #1
 8010c6c:	f001 f8e4 	bl	8011e38 <ScheduleTx>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d018      	beq.n	8010ca8 <OnTxDelayedTimerEvent+0x5c>
 8010c76:	2b0b      	cmp	r3, #11
 8010c78:	d016      	beq.n	8010ca8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010c7a:	4b10      	ldr	r3, [pc, #64]	; (8010cbc <OnTxDelayedTimerEvent+0x70>)
 8010c7c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	4b0d      	ldr	r3, [pc, #52]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c84:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010c88:	4b0b      	ldr	r3, [pc, #44]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c8a:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8010c8e:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c90:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010c94:	4b08      	ldr	r3, [pc, #32]	; (8010cb8 <OnTxDelayedTimerEvent+0x6c>)
 8010c96:	2209      	movs	r2, #9
 8010c98:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010c9c:	2009      	movs	r0, #9
 8010c9e:	f004 f8cb 	bl	8014e38 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010ca2:	f001 fe73 	bl	801298c <StopRetransmission>
            break;
 8010ca6:	e000      	b.n	8010caa <OnTxDelayedTimerEvent+0x5e>
            break;
 8010ca8:	bf00      	nop
        }
    }
}
 8010caa:	bf00      	nop
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	20000cac 	.word	0x20000cac
 8010cb8:	20000944 	.word	0x20000944
 8010cbc:	20000e4c 	.word	0x20000e4c

08010cc0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010cc8:	4b14      	ldr	r3, [pc, #80]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cca:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8010cce:	4b13      	ldr	r3, [pc, #76]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cd0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010cd4:	4b12      	ldr	r3, [pc, #72]	; (8010d20 <OnRxWindow1TimerEvent+0x60>)
 8010cd6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010cda:	b25a      	sxtb	r2, r3
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cde:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ce2:	4b0f      	ldr	r3, [pc, #60]	; (8010d20 <OnRxWindow1TimerEvent+0x60>)
 8010ce4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010ce8:	4b0c      	ldr	r3, [pc, #48]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cea:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010cee:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <OnRxWindow1TimerEvent+0x60>)
 8010cf0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010cf4:	4b09      	ldr	r3, [pc, #36]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cf6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010cfa:	4b08      	ldr	r3, [pc, #32]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010d02:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <OnRxWindow1TimerEvent+0x5c>)
 8010d04:	2200      	movs	r2, #0
 8010d06:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010d0a:	4906      	ldr	r1, [pc, #24]	; (8010d24 <OnRxWindow1TimerEvent+0x64>)
 8010d0c:	4806      	ldr	r0, [pc, #24]	; (8010d28 <OnRxWindow1TimerEvent+0x68>)
 8010d0e:	f001 fb07 	bl	8012320 <RxWindowSetup>
}
 8010d12:	bf00      	nop
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20000944 	.word	0x20000944
 8010d20:	20000e4c 	.word	0x20000e4c
 8010d24:	20000cfc 	.word	0x20000cfc
 8010d28:	20000cc4 	.word	0x20000cc4

08010d2c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010d34:	4b16      	ldr	r3, [pc, #88]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d36:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d023      	beq.n	8010d86 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010d3e:	4b14      	ldr	r3, [pc, #80]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d40:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8010d44:	4b12      	ldr	r3, [pc, #72]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d46:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010d4a:	4b12      	ldr	r3, [pc, #72]	; (8010d94 <OnRxWindow2TimerEvent+0x68>)
 8010d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d4e:	4a10      	ldr	r2, [pc, #64]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d50:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d54:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <OnRxWindow2TimerEvent+0x68>)
 8010d56:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010d5a:	4b0d      	ldr	r3, [pc, #52]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d5c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010d60:	4b0c      	ldr	r3, [pc, #48]	; (8010d94 <OnRxWindow2TimerEvent+0x68>)
 8010d62:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010d66:	4b0a      	ldr	r3, [pc, #40]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d68:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010d6c:	4b08      	ldr	r3, [pc, #32]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010d74:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <OnRxWindow2TimerEvent+0x64>)
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010d7c:	4906      	ldr	r1, [pc, #24]	; (8010d98 <OnRxWindow2TimerEvent+0x6c>)
 8010d7e:	4807      	ldr	r0, [pc, #28]	; (8010d9c <OnRxWindow2TimerEvent+0x70>)
 8010d80:	f001 face 	bl	8012320 <RxWindowSetup>
 8010d84:	e000      	b.n	8010d88 <OnRxWindow2TimerEvent+0x5c>
        return;
 8010d86:	bf00      	nop
}
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000944 	.word	0x20000944
 8010d94:	20000e4c 	.word	0x20000e4c
 8010d98:	20000d10 	.word	0x20000d10
 8010d9c:	20000cdc 	.word	0x20000cdc

08010da0 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010da8:	480e      	ldr	r0, [pc, #56]	; (8010de4 <OnAckTimeoutTimerEvent+0x44>)
 8010daa:	f00b ffd3 	bl	801cd54 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010dae:	4b0e      	ldr	r3, [pc, #56]	; (8010de8 <OnAckTimeoutTimerEvent+0x48>)
 8010db0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d003      	beq.n	8010dc0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8010db8:	4b0b      	ldr	r3, [pc, #44]	; (8010de8 <OnAckTimeoutTimerEvent+0x48>)
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010dc0:	4b0a      	ldr	r3, [pc, #40]	; (8010dec <OnAckTimeoutTimerEvent+0x4c>)
 8010dc2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d106      	bne.n	8010dd8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010dca:	4a07      	ldr	r2, [pc, #28]	; (8010de8 <OnAckTimeoutTimerEvent+0x48>)
 8010dcc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010dd0:	f043 0310 	orr.w	r3, r3, #16
 8010dd4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 8010dd8:	f001 fe14 	bl	8012a04 <OnMacProcessNotify>
}
 8010ddc:	bf00      	nop
 8010dde:	3708      	adds	r7, #8
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	20000d38 	.word	0x20000d38
 8010de8:	20000944 	.word	0x20000944
 8010dec:	20000e4c 	.word	0x20000e4c

08010df0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60ba      	str	r2, [r7, #8]
 8010df8:	607b      	str	r3, [r7, #4]
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	73fb      	strb	r3, [r7, #15]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d005      	beq.n	8010e14 <GetFCntDown+0x24>
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d002      	beq.n	8010e14 <GetFCntDown+0x24>
 8010e0e:	6a3b      	ldr	r3, [r7, #32]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d101      	bne.n	8010e18 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010e14:	230a      	movs	r3, #10
 8010e16:	e029      	b.n	8010e6c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d016      	beq.n	8010e4c <GetFCntDown+0x5c>
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d118      	bne.n	8010e54 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010e22:	79bb      	ldrb	r3, [r7, #6]
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d10d      	bne.n	8010e44 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010e28:	7bbb      	ldrb	r3, [r7, #14]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d002      	beq.n	8010e34 <GetFCntDown+0x44>
 8010e2e:	7bbb      	ldrb	r3, [r7, #14]
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	d103      	bne.n	8010e3c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	2202      	movs	r2, #2
 8010e38:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010e3a:	e00d      	b.n	8010e58 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	701a      	strb	r2, [r3, #0]
            break;
 8010e42:	e009      	b.n	8010e58 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	2203      	movs	r2, #3
 8010e48:	701a      	strb	r2, [r3, #0]
            break;
 8010e4a:	e005      	b.n	8010e58 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	2204      	movs	r2, #4
 8010e50:	701a      	strb	r2, [r3, #0]
            break;
 8010e52:	e001      	b.n	8010e58 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010e54:	2305      	movs	r3, #5
 8010e56:	e009      	b.n	8010e6c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	7818      	ldrb	r0, [r3, #0]
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	89db      	ldrh	r3, [r3, #14]
 8010e60:	461a      	mov	r2, r3
 8010e62:	8b39      	ldrh	r1, [r7, #24]
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	f004 fc25 	bl	80156b4 <LoRaMacCryptoGetFCntDown>
 8010e6a:	4603      	mov	r3, r0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010e74:	b5b0      	push	{r4, r5, r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010e82:	4b6d      	ldr	r3, [pc, #436]	; (8011038 <SwitchClass+0x1c4>)
 8010e84:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	f000 80b9 	beq.w	8011000 <SwitchClass+0x18c>
 8010e8e:	2b02      	cmp	r3, #2
 8010e90:	f300 80cc 	bgt.w	801102c <SwitchClass+0x1b8>
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d003      	beq.n	8010ea0 <SwitchClass+0x2c>
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	f000 80a3 	beq.w	8010fe4 <SwitchClass+0x170>
 8010e9e:	e0c5      	b.n	801102c <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010ea0:	79fb      	ldrb	r3, [r7, #7]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d109      	bne.n	8010eba <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010ea6:	4b64      	ldr	r3, [pc, #400]	; (8011038 <SwitchClass+0x1c4>)
 8010ea8:	4a63      	ldr	r2, [pc, #396]	; (8011038 <SwitchClass+0x1c4>)
 8010eaa:	3374      	adds	r3, #116	; 0x74
 8010eac:	326c      	adds	r2, #108	; 0x6c
 8010eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eb2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010eba:	79fb      	ldrb	r3, [r7, #7]
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d10c      	bne.n	8010eda <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f003 fb2f 	bl	8014526 <LoRaMacClassBSwitchClass>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010ecc:	7bfb      	ldrb	r3, [r7, #15]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d103      	bne.n	8010eda <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010ed2:	4a59      	ldr	r2, [pc, #356]	; (8011038 <SwitchClass+0x1c4>)
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010eda:	79fb      	ldrb	r3, [r7, #7]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	f040 80a0 	bne.w	8011022 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010ee2:	4a55      	ldr	r2, [pc, #340]	; (8011038 <SwitchClass+0x1c4>)
 8010ee4:	79fb      	ldrb	r3, [r7, #7]
 8010ee6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010eea:	4a54      	ldr	r2, [pc, #336]	; (801103c <SwitchClass+0x1c8>)
 8010eec:	4b53      	ldr	r3, [pc, #332]	; (801103c <SwitchClass+0x1c8>)
 8010eee:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010ef2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8010ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010efa:	682b      	ldr	r3, [r5, #0]
 8010efc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010efe:	4b4f      	ldr	r3, [pc, #316]	; (801103c <SwitchClass+0x1c8>)
 8010f00:	2202      	movs	r2, #2
 8010f02:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f06:	2300      	movs	r3, #0
 8010f08:	73bb      	strb	r3, [r7, #14]
 8010f0a:	e05b      	b.n	8010fc4 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010f0c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010f10:	4949      	ldr	r1, [pc, #292]	; (8011038 <SwitchClass+0x1c4>)
 8010f12:	4613      	mov	r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	4413      	add	r3, r2
 8010f18:	011b      	lsls	r3, r3, #4
 8010f1a:	440b      	add	r3, r1
 8010f1c:	33e9      	adds	r3, #233	; 0xe9
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d049      	beq.n	8010fb8 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010f24:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010f28:	4943      	ldr	r1, [pc, #268]	; (8011038 <SwitchClass+0x1c4>)
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	005b      	lsls	r3, r3, #1
 8010f2e:	4413      	add	r3, r2
 8010f30:	011b      	lsls	r3, r3, #4
 8010f32:	440b      	add	r3, r1
 8010f34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010f38:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d13c      	bne.n	8010fb8 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8010f3e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010f42:	493d      	ldr	r1, [pc, #244]	; (8011038 <SwitchClass+0x1c4>)
 8010f44:	4613      	mov	r3, r2
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	4413      	add	r3, r2
 8010f4a:	011b      	lsls	r3, r3, #4
 8010f4c:	440b      	add	r3, r1
 8010f4e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a38      	ldr	r2, [pc, #224]	; (8011038 <SwitchClass+0x1c4>)
 8010f56:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010f58:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010f5c:	4936      	ldr	r1, [pc, #216]	; (8011038 <SwitchClass+0x1c4>)
 8010f5e:	4613      	mov	r3, r2
 8010f60:	005b      	lsls	r3, r3, #1
 8010f62:	4413      	add	r3, r2
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	440b      	add	r3, r1
 8010f68:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8010f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	4b31      	ldr	r3, [pc, #196]	; (8011038 <SwitchClass+0x1c4>)
 8010f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010f78:	4b30      	ldr	r3, [pc, #192]	; (801103c <SwitchClass+0x1c8>)
 8010f7a:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8010f7e:	4b2f      	ldr	r3, [pc, #188]	; (801103c <SwitchClass+0x1c8>)
 8010f80:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010f84:	4b2c      	ldr	r3, [pc, #176]	; (8011038 <SwitchClass+0x1c4>)
 8010f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f88:	4a2c      	ldr	r2, [pc, #176]	; (801103c <SwitchClass+0x1c8>)
 8010f8a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f8e:	4b2a      	ldr	r3, [pc, #168]	; (8011038 <SwitchClass+0x1c4>)
 8010f90:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010f94:	4b29      	ldr	r3, [pc, #164]	; (801103c <SwitchClass+0x1c8>)
 8010f96:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f9a:	4b27      	ldr	r3, [pc, #156]	; (8011038 <SwitchClass+0x1c4>)
 8010f9c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010fa0:	4b26      	ldr	r3, [pc, #152]	; (801103c <SwitchClass+0x1c8>)
 8010fa2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010fa6:	4b25      	ldr	r3, [pc, #148]	; (801103c <SwitchClass+0x1c8>)
 8010fa8:	2203      	movs	r2, #3
 8010faa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010fae:	4b23      	ldr	r3, [pc, #140]	; (801103c <SwitchClass+0x1c8>)
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8010fb6:	e009      	b.n	8010fcc <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	73bb      	strb	r3, [r7, #14]
 8010fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	dd9f      	ble.n	8010f0c <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010fcc:	4b1b      	ldr	r3, [pc, #108]	; (801103c <SwitchClass+0x1c8>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010fd4:	4b1a      	ldr	r3, [pc, #104]	; (8011040 <SwitchClass+0x1cc>)
 8010fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010fda:	f001 f9d5 	bl	8012388 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010fe2:	e01e      	b.n	8011022 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010fe4:	79fb      	ldrb	r3, [r7, #7]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f003 fa9d 	bl	8014526 <LoRaMacClassBSwitchClass>
 8010fec:	4603      	mov	r3, r0
 8010fee:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010ff0:	7bfb      	ldrb	r3, [r7, #15]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d117      	bne.n	8011026 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010ff6:	4a10      	ldr	r2, [pc, #64]	; (8011038 <SwitchClass+0x1c4>)
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
 8010ffa:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8010ffe:	e012      	b.n	8011026 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011000:	79fb      	ldrb	r3, [r7, #7]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d111      	bne.n	801102a <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8011006:	4b0d      	ldr	r3, [pc, #52]	; (801103c <SwitchClass+0x1c8>)
 8011008:	2206      	movs	r2, #6
 801100a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801100e:	4a0a      	ldr	r2, [pc, #40]	; (8011038 <SwitchClass+0x1c4>)
 8011010:	79fb      	ldrb	r3, [r7, #7]
 8011012:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011016:	4b0a      	ldr	r3, [pc, #40]	; (8011040 <SwitchClass+0x1cc>)
 8011018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8011020:	e003      	b.n	801102a <SwitchClass+0x1b6>
            break;
 8011022:	bf00      	nop
 8011024:	e002      	b.n	801102c <SwitchClass+0x1b8>
            break;
 8011026:	bf00      	nop
 8011028:	e000      	b.n	801102c <SwitchClass+0x1b8>
            break;
 801102a:	bf00      	nop
        }
    }

    return status;
 801102c:	7bfb      	ldrb	r3, [r7, #15]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bdb0      	pop	{r4, r5, r7, pc}
 8011036:	bf00      	nop
 8011038:	20000e4c 	.word	0x20000e4c
 801103c:	20000944 	.word	0x20000944
 8011040:	0801e604 	.word	0x0801e604

08011044 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	4603      	mov	r3, r0
 801104c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801104e:	4b10      	ldr	r3, [pc, #64]	; (8011090 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011050:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011054:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011056:	79fb      	ldrb	r3, [r7, #7]
 8011058:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801105a:	230d      	movs	r3, #13
 801105c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801105e:	4b0c      	ldr	r3, [pc, #48]	; (8011090 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011060:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011064:	2b00      	cmp	r3, #0
 8011066:	d001      	beq.n	801106c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011068:	230e      	movs	r3, #14
 801106a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801106c:	4b08      	ldr	r3, [pc, #32]	; (8011090 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801106e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011072:	f107 0210 	add.w	r2, r7, #16
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f005 f9b6 	bl	80163ea <RegionGetPhyParam>
 801107e:	4603      	mov	r3, r0
 8011080:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	b2db      	uxtb	r3, r3
}
 8011086:	4618      	mov	r0, r3
 8011088:	3718      	adds	r7, #24
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	20000e4c 	.word	0x20000e4c

08011094 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	4603      	mov	r3, r0
 801109c:	71fb      	strb	r3, [r7, #7]
 801109e:	460b      	mov	r3, r1
 80110a0:	71bb      	strb	r3, [r7, #6]
 80110a2:	4613      	mov	r3, r2
 80110a4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80110aa:	2300      	movs	r3, #0
 80110ac:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80110ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff ffc6 	bl	8011044 <GetMaxAppPayloadWithoutFOptsLength>
 80110b8:	4603      	mov	r3, r0
 80110ba:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80110bc:	79fb      	ldrb	r3, [r7, #7]
 80110be:	b29a      	uxth	r2, r3
 80110c0:	797b      	ldrb	r3, [r7, #5]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4413      	add	r3, r2
 80110c6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80110c8:	89ba      	ldrh	r2, [r7, #12]
 80110ca:	89fb      	ldrh	r3, [r7, #14]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d804      	bhi.n	80110da <ValidatePayloadLength+0x46>
 80110d0:	89bb      	ldrh	r3, [r7, #12]
 80110d2:	2bff      	cmp	r3, #255	; 0xff
 80110d4:	d801      	bhi.n	80110da <ValidatePayloadLength+0x46>
    {
        return true;
 80110d6:	2301      	movs	r3, #1
 80110d8:	e000      	b.n	80110dc <ValidatePayloadLength+0x48>
    }
    return false;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80110e4:	b590      	push	{r4, r7, lr}
 80110e6:	b0a5      	sub	sp, #148	; 0x94
 80110e8:	af02      	add	r7, sp, #8
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	4608      	mov	r0, r1
 80110ee:	4611      	mov	r1, r2
 80110f0:	461a      	mov	r2, r3
 80110f2:	4603      	mov	r3, r0
 80110f4:	70fb      	strb	r3, [r7, #3]
 80110f6:	460b      	mov	r3, r1
 80110f8:	70bb      	strb	r3, [r7, #2]
 80110fa:	4613      	mov	r3, r2
 80110fc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8011104:	2300      	movs	r3, #0
 8011106:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801110a:	2300      	movs	r3, #0
 801110c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011110:	f000 bc6d 	b.w	80119ee <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011114:	78fb      	ldrb	r3, [r7, #3]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f003 fce7 	bl	8014af0 <LoRaMacCommandsGetCmdSize>
 8011122:	4603      	mov	r3, r0
 8011124:	461a      	mov	r2, r3
 8011126:	78fb      	ldrb	r3, [r7, #3]
 8011128:	441a      	add	r2, r3
 801112a:	78bb      	ldrb	r3, [r7, #2]
 801112c:	429a      	cmp	r2, r3
 801112e:	f300 8464 	bgt.w	80119fa <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8011132:	78fb      	ldrb	r3, [r7, #3]
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	70fa      	strb	r2, [r7, #3]
 8011138:	461a      	mov	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4413      	add	r3, r2
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	3b02      	subs	r3, #2
 8011142:	2b11      	cmp	r3, #17
 8011144:	f200 845b 	bhi.w	80119fe <ProcessMacCommands+0x91a>
 8011148:	a201      	add	r2, pc, #4	; (adr r2, 8011150 <ProcessMacCommands+0x6c>)
 801114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114e:	bf00      	nop
 8011150:	08011199 	.word	0x08011199
 8011154:	080111db 	.word	0x080111db
 8011158:	080112f7 	.word	0x080112f7
 801115c:	08011335 	.word	0x08011335
 8011160:	08011421 	.word	0x08011421
 8011164:	0801147d 	.word	0x0801147d
 8011168:	08011539 	.word	0x08011539
 801116c:	0801158f 	.word	0x0801158f
 8011170:	08011675 	.word	0x08011675
 8011174:	080119ff 	.word	0x080119ff
 8011178:	080119ff 	.word	0x080119ff
 801117c:	08011719 	.word	0x08011719
 8011180:	080119ff 	.word	0x080119ff
 8011184:	080119ff 	.word	0x080119ff
 8011188:	0801182f 	.word	0x0801182f
 801118c:	08011863 	.word	0x08011863
 8011190:	080118f3 	.word	0x080118f3
 8011194:	08011969 	.word	0x08011969
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011198:	2005      	movs	r0, #5
 801119a:	f003 fe81 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 8424 	beq.w	80119ee <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80111a6:	2105      	movs	r1, #5
 80111a8:	2000      	movs	r0, #0
 80111aa:	f003 fded 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80111ae:	78fb      	ldrb	r3, [r7, #3]
 80111b0:	1c5a      	adds	r2, r3, #1
 80111b2:	70fa      	strb	r2, [r7, #3]
 80111b4:	461a      	mov	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4413      	add	r3, r2
 80111ba:	781a      	ldrb	r2, [r3, #0]
 80111bc:	4bac      	ldr	r3, [pc, #688]	; (8011470 <ProcessMacCommands+0x38c>)
 80111be:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80111c2:	78fb      	ldrb	r3, [r7, #3]
 80111c4:	1c5a      	adds	r2, r3, #1
 80111c6:	70fa      	strb	r2, [r7, #3]
 80111c8:	461a      	mov	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4413      	add	r3, r2
 80111ce:	781a      	ldrb	r2, [r3, #0]
 80111d0:	4ba7      	ldr	r3, [pc, #668]	; (8011470 <ProcessMacCommands+0x38c>)
 80111d2:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80111d6:	f000 bc0a 	b.w	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80111da:	2300      	movs	r3, #0
 80111dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80111e0:	2300      	movs	r3, #0
 80111e2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80111ec:	2300      	movs	r3, #0
 80111ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80111f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80111f6:	f083 0301 	eor.w	r3, r3, #1
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d078      	beq.n	80112f2 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8011200:	2301      	movs	r3, #1
 8011202:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8011206:	78fb      	ldrb	r3, [r7, #3]
 8011208:	3b01      	subs	r3, #1
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	4413      	add	r3, r2
 801120e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8011210:	78ba      	ldrb	r2, [r7, #2]
 8011212:	78fb      	ldrb	r3, [r7, #3]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	b2db      	uxtb	r3, r3
 8011218:	3301      	adds	r3, #1
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011220:	4b94      	ldr	r3, [pc, #592]	; (8011474 <ProcessMacCommands+0x390>)
 8011222:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011226:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801122a:	4b92      	ldr	r3, [pc, #584]	; (8011474 <ProcessMacCommands+0x390>)
 801122c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011230:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011234:	4b8f      	ldr	r3, [pc, #572]	; (8011474 <ProcessMacCommands+0x390>)
 8011236:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801123a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801123e:	4b8d      	ldr	r3, [pc, #564]	; (8011474 <ProcessMacCommands+0x390>)
 8011240:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011244:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011248:	4b8a      	ldr	r3, [pc, #552]	; (8011474 <ProcessMacCommands+0x390>)
 801124a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801124e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8011252:	4b88      	ldr	r3, [pc, #544]	; (8011474 <ProcessMacCommands+0x390>)
 8011254:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8011258:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801125a:	4b86      	ldr	r3, [pc, #536]	; (8011474 <ProcessMacCommands+0x390>)
 801125c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011260:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8011264:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011268:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801126c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8011276:	9300      	str	r3, [sp, #0]
 8011278:	4623      	mov	r3, r4
 801127a:	f005 f973 	bl	8016564 <RegionLinkAdrReq>
 801127e:	4603      	mov	r3, r0
 8011280:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8011284:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011288:	f003 0307 	and.w	r3, r3, #7
 801128c:	2b07      	cmp	r3, #7
 801128e:	d10e      	bne.n	80112ae <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011290:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8011294:	4b77      	ldr	r3, [pc, #476]	; (8011474 <ProcessMacCommands+0x390>)
 8011296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801129a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801129e:	4b75      	ldr	r3, [pc, #468]	; (8011474 <ProcessMacCommands+0x390>)
 80112a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80112a4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80112a8:	4b72      	ldr	r3, [pc, #456]	; (8011474 <ProcessMacCommands+0x390>)
 80112aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80112ae:	2300      	movs	r3, #0
 80112b0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80112b4:	e00b      	b.n	80112ce <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80112b6:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80112ba:	2201      	movs	r2, #1
 80112bc:	4619      	mov	r1, r3
 80112be:	2003      	movs	r0, #3
 80112c0:	f003 fab6 	bl	8014830 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80112c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80112c8:	3301      	adds	r3, #1
 80112ca:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80112ce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80112d2:	4a69      	ldr	r2, [pc, #420]	; (8011478 <ProcessMacCommands+0x394>)
 80112d4:	fba2 2303 	umull	r2, r3, r2, r3
 80112d8:	089b      	lsrs	r3, r3, #2
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d3e8      	bcc.n	80112b6 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80112e4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	4413      	add	r3, r2
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	3b01      	subs	r3, #1
 80112f0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80112f2:	bf00      	nop
 80112f4:	e37b      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80112f6:	78fb      	ldrb	r3, [r7, #3]
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	70fa      	strb	r2, [r7, #3]
 80112fc:	461a      	mov	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4413      	add	r3, r2
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 030f 	and.w	r3, r3, #15
 8011308:	b2da      	uxtb	r2, r3
 801130a:	4b5a      	ldr	r3, [pc, #360]	; (8011474 <ProcessMacCommands+0x390>)
 801130c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8011310:	4b58      	ldr	r3, [pc, #352]	; (8011474 <ProcessMacCommands+0x390>)
 8011312:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011316:	461a      	mov	r2, r3
 8011318:	2301      	movs	r3, #1
 801131a:	4093      	lsls	r3, r2
 801131c:	b29a      	uxth	r2, r3
 801131e:	4b55      	ldr	r3, [pc, #340]	; (8011474 <ProcessMacCommands+0x390>)
 8011320:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011324:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011328:	2200      	movs	r2, #0
 801132a:	4619      	mov	r1, r3
 801132c:	2004      	movs	r0, #4
 801132e:	f003 fa7f 	bl	8014830 <LoRaMacCommandsAddCmd>
                break;
 8011332:	e35c      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011334:	2307      	movs	r3, #7
 8011336:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801133a:	78fb      	ldrb	r3, [r7, #3]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	4413      	add	r3, r2
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	091b      	lsrs	r3, r3, #4
 8011344:	b2db      	uxtb	r3, r3
 8011346:	b25b      	sxtb	r3, r3
 8011348:	f003 0307 	and.w	r3, r3, #7
 801134c:	b25b      	sxtb	r3, r3
 801134e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011352:	78fb      	ldrb	r3, [r7, #3]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	4413      	add	r3, r2
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	b25b      	sxtb	r3, r3
 801135c:	f003 030f 	and.w	r3, r3, #15
 8011360:	b25b      	sxtb	r3, r3
 8011362:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8011366:	78fb      	ldrb	r3, [r7, #3]
 8011368:	3301      	adds	r3, #1
 801136a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801136c:	78fb      	ldrb	r3, [r7, #3]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	70fa      	strb	r2, [r7, #3]
 8011372:	461a      	mov	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801137c:	78fb      	ldrb	r3, [r7, #3]
 801137e:	1c5a      	adds	r2, r3, #1
 8011380:	70fa      	strb	r2, [r7, #3]
 8011382:	461a      	mov	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4413      	add	r3, r2
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	021a      	lsls	r2, r3, #8
 801138c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801138e:	4313      	orrs	r3, r2
 8011390:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011392:	78fb      	ldrb	r3, [r7, #3]
 8011394:	1c5a      	adds	r2, r3, #1
 8011396:	70fa      	strb	r2, [r7, #3]
 8011398:	461a      	mov	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4413      	add	r3, r2
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	041a      	lsls	r2, r3, #16
 80113a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a4:	4313      	orrs	r3, r2
 80113a6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80113a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113aa:	2264      	movs	r2, #100	; 0x64
 80113ac:	fb02 f303 	mul.w	r3, r2, r3
 80113b0:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80113b2:	4b30      	ldr	r3, [pc, #192]	; (8011474 <ProcessMacCommands+0x390>)
 80113b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80113b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80113bc:	4611      	mov	r1, r2
 80113be:	4618      	mov	r0, r3
 80113c0:	f005 f8ea 	bl	8016598 <RegionRxParamSetupReq>
 80113c4:	4603      	mov	r3, r0
 80113c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80113ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113ce:	f003 0307 	and.w	r3, r3, #7
 80113d2:	2b07      	cmp	r3, #7
 80113d4:	d117      	bne.n	8011406 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80113d6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	4b25      	ldr	r3, [pc, #148]	; (8011474 <ProcessMacCommands+0x390>)
 80113de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80113e2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80113e6:	b2da      	uxtb	r2, r3
 80113e8:	4b22      	ldr	r3, [pc, #136]	; (8011474 <ProcessMacCommands+0x390>)
 80113ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80113ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f0:	4a20      	ldr	r2, [pc, #128]	; (8011474 <ProcessMacCommands+0x390>)
 80113f2:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80113f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f6:	4a1f      	ldr	r2, [pc, #124]	; (8011474 <ProcessMacCommands+0x390>)
 80113f8:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80113fa:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80113fe:	b2da      	uxtb	r2, r3
 8011400:	4b1c      	ldr	r3, [pc, #112]	; (8011474 <ProcessMacCommands+0x390>)
 8011402:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8011406:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801140a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801140e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011412:	2201      	movs	r2, #1
 8011414:	4619      	mov	r1, r3
 8011416:	2005      	movs	r0, #5
 8011418:	f003 fa0a 	bl	8014830 <LoRaMacCommandsAddCmd>
                break;
 801141c:	bf00      	nop
 801141e:	e2e6      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011420:	23ff      	movs	r3, #255	; 0xff
 8011422:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011426:	4b12      	ldr	r3, [pc, #72]	; (8011470 <ProcessMacCommands+0x38c>)
 8011428:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00d      	beq.n	801144c <ProcessMacCommands+0x368>
 8011430:	4b0f      	ldr	r3, [pc, #60]	; (8011470 <ProcessMacCommands+0x38c>)
 8011432:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d007      	beq.n	801144c <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 801143c:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <ProcessMacCommands+0x38c>)
 801143e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4798      	blx	r3
 8011446:	4603      	mov	r3, r0
 8011448:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 801144c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011450:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011454:	787b      	ldrb	r3, [r7, #1]
 8011456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801145a:	b2db      	uxtb	r3, r3
 801145c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011464:	2202      	movs	r2, #2
 8011466:	4619      	mov	r1, r3
 8011468:	2006      	movs	r0, #6
 801146a:	f003 f9e1 	bl	8014830 <LoRaMacCommandsAddCmd>
                break;
 801146e:	e2be      	b.n	80119ee <ProcessMacCommands+0x90a>
 8011470:	20000944 	.word	0x20000944
 8011474:	20000e4c 	.word	0x20000e4c
 8011478:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801147c:	2303      	movs	r3, #3
 801147e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011482:	78fb      	ldrb	r3, [r7, #3]
 8011484:	1c5a      	adds	r2, r3, #1
 8011486:	70fa      	strb	r2, [r7, #3]
 8011488:	461a      	mov	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4413      	add	r3, r2
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	b25b      	sxtb	r3, r3
 8011492:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8011496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801149a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801149c:	78fb      	ldrb	r3, [r7, #3]
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	70fa      	strb	r2, [r7, #3]
 80114a2:	461a      	mov	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4413      	add	r3, r2
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80114ac:	78fb      	ldrb	r3, [r7, #3]
 80114ae:	1c5a      	adds	r2, r3, #1
 80114b0:	70fa      	strb	r2, [r7, #3]
 80114b2:	461a      	mov	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4413      	add	r3, r2
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	021a      	lsls	r2, r3, #8
 80114bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114be:	4313      	orrs	r3, r2
 80114c0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80114c2:	78fb      	ldrb	r3, [r7, #3]
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	70fa      	strb	r2, [r7, #3]
 80114c8:	461a      	mov	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4413      	add	r3, r2
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	041a      	lsls	r2, r3, #16
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	4313      	orrs	r3, r2
 80114d6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	2264      	movs	r2, #100	; 0x64
 80114dc:	fb02 f303 	mul.w	r3, r2, r3
 80114e0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80114e2:	2300      	movs	r3, #0
 80114e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80114e6:	78fb      	ldrb	r3, [r7, #3]
 80114e8:	1c5a      	adds	r2, r3, #1
 80114ea:	70fa      	strb	r2, [r7, #3]
 80114ec:	461a      	mov	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4413      	add	r3, r2
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	b25b      	sxtb	r3, r3
 80114f6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80114fa:	4b85      	ldr	r3, [pc, #532]	; (8011710 <ProcessMacCommands+0x62c>)
 80114fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011500:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011504:	4611      	mov	r1, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f005 f859 	bl	80165be <RegionNewChannelReq>
 801150c:	4603      	mov	r3, r0
 801150e:	b2db      	uxtb	r3, r3
 8011510:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011514:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011518:	b25b      	sxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	db0a      	blt.n	8011534 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801151e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011522:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011526:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801152a:	2201      	movs	r2, #1
 801152c:	4619      	mov	r1, r3
 801152e:	2007      	movs	r0, #7
 8011530:	f003 f97e 	bl	8014830 <LoRaMacCommandsAddCmd>
                }
                break;
 8011534:	bf00      	nop
 8011536:	e25a      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011538:	78fb      	ldrb	r3, [r7, #3]
 801153a:	1c5a      	adds	r2, r3, #1
 801153c:	70fa      	strb	r2, [r7, #3]
 801153e:	461a      	mov	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4413      	add	r3, r2
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	f003 030f 	and.w	r3, r3, #15
 801154a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801154e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011552:	2b00      	cmp	r3, #0
 8011554:	d104      	bne.n	8011560 <ProcessMacCommands+0x47c>
                {
                    delay++;
 8011556:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801155a:	3301      	adds	r3, #1
 801155c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011560:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011568:	fb02 f303 	mul.w	r3, r2, r3
 801156c:	461a      	mov	r2, r3
 801156e:	4b68      	ldr	r3, [pc, #416]	; (8011710 <ProcessMacCommands+0x62c>)
 8011570:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011572:	4b67      	ldr	r3, [pc, #412]	; (8011710 <ProcessMacCommands+0x62c>)
 8011574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011576:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801157a:	4a65      	ldr	r2, [pc, #404]	; (8011710 <ProcessMacCommands+0x62c>)
 801157c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801157e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011582:	2200      	movs	r2, #0
 8011584:	4619      	mov	r1, r3
 8011586:	2008      	movs	r0, #8
 8011588:	f003 f952 	bl	8014830 <LoRaMacCommandsAddCmd>
                break;
 801158c:	e22f      	b.n	80119ee <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801158e:	78fb      	ldrb	r3, [r7, #3]
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	70fa      	strb	r2, [r7, #3]
 8011594:	461a      	mov	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4413      	add	r3, r2
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80115ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80115b0:	f003 0320 	and.w	r3, r3, #32
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80115b8:	2301      	movs	r3, #1
 80115ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80115be:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80115c2:	f003 0310 	and.w	r3, r3, #16
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d002      	beq.n	80115d0 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80115ca:	2301      	movs	r3, #1
 80115cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80115d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80115d4:	f003 030f 	and.w	r3, r3, #15
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80115de:	4b4c      	ldr	r3, [pc, #304]	; (8011710 <ProcessMacCommands+0x62c>)
 80115e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80115e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80115e8:	4611      	mov	r1, r2
 80115ea:	4618      	mov	r0, r3
 80115ec:	f004 fffa 	bl	80165e4 <RegionTxParamSetupReq>
 80115f0:	4603      	mov	r3, r0
 80115f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f6:	d03b      	beq.n	8011670 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80115f8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80115fc:	4b44      	ldr	r3, [pc, #272]	; (8011710 <ProcessMacCommands+0x62c>)
 80115fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011602:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011606:	4b42      	ldr	r3, [pc, #264]	; (8011710 <ProcessMacCommands+0x62c>)
 8011608:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801160c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011610:	461a      	mov	r2, r3
 8011612:	4b40      	ldr	r3, [pc, #256]	; (8011714 <ProcessMacCommands+0x630>)
 8011614:	5c9b      	ldrb	r3, [r3, r2]
 8011616:	4618      	mov	r0, r3
 8011618:	f7ef fb3a 	bl	8000c90 <__aeabi_ui2f>
 801161c:	4603      	mov	r3, r0
 801161e:	4a3c      	ldr	r2, [pc, #240]	; (8011710 <ProcessMacCommands+0x62c>)
 8011620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011624:	2302      	movs	r3, #2
 8011626:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801162a:	4b39      	ldr	r3, [pc, #228]	; (8011710 <ProcessMacCommands+0x62c>)
 801162c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011630:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011634:	4b36      	ldr	r3, [pc, #216]	; (8011710 <ProcessMacCommands+0x62c>)
 8011636:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801163a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801163e:	4611      	mov	r1, r2
 8011640:	4618      	mov	r0, r3
 8011642:	f004 fed2 	bl	80163ea <RegionGetPhyParam>
 8011646:	4603      	mov	r3, r0
 8011648:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164c:	b25a      	sxtb	r2, r3
 801164e:	4b30      	ldr	r3, [pc, #192]	; (8011710 <ProcessMacCommands+0x62c>)
 8011650:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011654:	4293      	cmp	r3, r2
 8011656:	bfb8      	it	lt
 8011658:	4613      	movlt	r3, r2
 801165a:	b25a      	sxtb	r2, r3
 801165c:	4b2c      	ldr	r3, [pc, #176]	; (8011710 <ProcessMacCommands+0x62c>)
 801165e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011666:	2200      	movs	r2, #0
 8011668:	4619      	mov	r1, r3
 801166a:	2009      	movs	r0, #9
 801166c:	f003 f8e0 	bl	8014830 <LoRaMacCommandsAddCmd>
                }
                break;
 8011670:	bf00      	nop
 8011672:	e1bc      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011674:	2303      	movs	r3, #3
 8011676:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801167a:	78fb      	ldrb	r3, [r7, #3]
 801167c:	1c5a      	adds	r2, r3, #1
 801167e:	70fa      	strb	r2, [r7, #3]
 8011680:	461a      	mov	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4413      	add	r3, r2
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801168c:	78fb      	ldrb	r3, [r7, #3]
 801168e:	1c5a      	adds	r2, r3, #1
 8011690:	70fa      	strb	r2, [r7, #3]
 8011692:	461a      	mov	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	4413      	add	r3, r2
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801169c:	78fb      	ldrb	r3, [r7, #3]
 801169e:	1c5a      	adds	r2, r3, #1
 80116a0:	70fa      	strb	r2, [r7, #3]
 80116a2:	461a      	mov	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4413      	add	r3, r2
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	021a      	lsls	r2, r3, #8
 80116ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ae:	4313      	orrs	r3, r2
 80116b0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80116b2:	78fb      	ldrb	r3, [r7, #3]
 80116b4:	1c5a      	adds	r2, r3, #1
 80116b6:	70fa      	strb	r2, [r7, #3]
 80116b8:	461a      	mov	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4413      	add	r3, r2
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	041a      	lsls	r2, r3, #16
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	4313      	orrs	r3, r2
 80116c6:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80116c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ca:	2264      	movs	r2, #100	; 0x64
 80116cc:	fb02 f303 	mul.w	r3, r2, r3
 80116d0:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80116d2:	4b0f      	ldr	r3, [pc, #60]	; (8011710 <ProcessMacCommands+0x62c>)
 80116d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80116d8:	f107 0220 	add.w	r2, r7, #32
 80116dc:	4611      	mov	r1, r2
 80116de:	4618      	mov	r0, r3
 80116e0:	f004 ff93 	bl	801660a <RegionDlChannelReq>
 80116e4:	4603      	mov	r3, r0
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80116ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80116f0:	b25b      	sxtb	r3, r3
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	db0a      	blt.n	801170c <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 80116f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80116fa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80116fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011702:	2201      	movs	r2, #1
 8011704:	4619      	mov	r1, r3
 8011706:	200a      	movs	r0, #10
 8011708:	f003 f892 	bl	8014830 <LoRaMacCommandsAddCmd>
                }
                break;
 801170c:	bf00      	nop
 801170e:	e16e      	b.n	80119ee <ProcessMacCommands+0x90a>
 8011710:	20000e4c 	.word	0x20000e4c
 8011714:	0801e5bc 	.word	0x0801e5bc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011718:	200a      	movs	r0, #10
 801171a:	f003 fbc1 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 8164 	beq.w	80119ee <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011726:	210a      	movs	r1, #10
 8011728:	2000      	movs	r0, #0
 801172a:	f003 fb2d 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801172e:	f107 0318 	add.w	r3, r7, #24
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011738:	f107 0310 	add.w	r3, r7, #16
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011742:	f107 0308 	add.w	r3, r7, #8
 8011746:	2200      	movs	r2, #0
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801174c:	78fb      	ldrb	r3, [r7, #3]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	70fa      	strb	r2, [r7, #3]
 8011752:	461a      	mov	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4413      	add	r3, r2
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	70fa      	strb	r2, [r7, #3]
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	4413      	add	r3, r2
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	021a      	lsls	r2, r3, #8
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	4313      	orrs	r3, r2
 8011770:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011772:	78fb      	ldrb	r3, [r7, #3]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	70fa      	strb	r2, [r7, #3]
 8011778:	461a      	mov	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4413      	add	r3, r2
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	041a      	lsls	r2, r3, #16
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	4313      	orrs	r3, r2
 8011786:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011788:	78fb      	ldrb	r3, [r7, #3]
 801178a:	1c5a      	adds	r2, r3, #1
 801178c:	70fa      	strb	r2, [r7, #3]
 801178e:	461a      	mov	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4413      	add	r3, r2
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	061a      	lsls	r2, r3, #24
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	4313      	orrs	r3, r2
 801179c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801179e:	78fb      	ldrb	r3, [r7, #3]
 80117a0:	1c5a      	adds	r2, r3, #1
 80117a2:	70fa      	strb	r2, [r7, #3]
 80117a4:	461a      	mov	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	b21b      	sxth	r3, r3
 80117ae:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80117b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80117b4:	461a      	mov	r2, r3
 80117b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117ba:	fb02 f303 	mul.w	r3, r2, r3
 80117be:	121b      	asrs	r3, r3, #8
 80117c0:	b21b      	sxth	r3, r3
 80117c2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80117c4:	f107 0310 	add.w	r3, r7, #16
 80117c8:	f107 0218 	add.w	r2, r7, #24
 80117cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117d0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	4b8c      	ldr	r3, [pc, #560]	; (8011a08 <ProcessMacCommands+0x924>)
 80117d8:	4413      	add	r3, r2
 80117da:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80117dc:	f107 0308 	add.w	r3, r7, #8
 80117e0:	4618      	mov	r0, r3
 80117e2:	f00a fd4f 	bl	801c284 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80117e6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80117ea:	4b88      	ldr	r3, [pc, #544]	; (8011a0c <ProcessMacCommands+0x928>)
 80117ec:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80117f0:	9200      	str	r2, [sp, #0]
 80117f2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80117f6:	f107 0210 	add.w	r2, r7, #16
 80117fa:	ca06      	ldmia	r2, {r1, r2}
 80117fc:	f00a fcdb 	bl	801c1b6 <SysTimeSub>
 8011800:	f107 0010 	add.w	r0, r7, #16
 8011804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801180a:	f107 0208 	add.w	r2, r7, #8
 801180e:	ca06      	ldmia	r2, {r1, r2}
 8011810:	f00a fc98 	bl	801c144 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011814:	f107 0310 	add.w	r3, r7, #16
 8011818:	e893 0003 	ldmia.w	r3, {r0, r1}
 801181c:	f00a fd04 	bl	801c228 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011820:	f002 febf 	bl	80145a2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011824:	4b79      	ldr	r3, [pc, #484]	; (8011a0c <ProcessMacCommands+0x928>)
 8011826:	2201      	movs	r2, #1
 8011828:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801182c:	e0df      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801182e:	200d      	movs	r0, #13
 8011830:	f003 fb36 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 80d9 	beq.w	80119ee <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801183c:	210d      	movs	r1, #13
 801183e:	2000      	movs	r0, #0
 8011840:	f003 faa2 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011844:	4b71      	ldr	r3, [pc, #452]	; (8011a0c <ProcessMacCommands+0x928>)
 8011846:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801184a:	2b04      	cmp	r3, #4
 801184c:	f000 80cf 	beq.w	80119ee <ProcessMacCommands+0x90a>
 8011850:	4b6e      	ldr	r3, [pc, #440]	; (8011a0c <ProcessMacCommands+0x928>)
 8011852:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011856:	2b05      	cmp	r3, #5
 8011858:	f000 80c9 	beq.w	80119ee <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801185c:	f002 fe82 	bl	8014564 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011860:	e0c5      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011862:	2303      	movs	r3, #3
 8011864:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801186c:	78fb      	ldrb	r3, [r7, #3]
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	70fa      	strb	r2, [r7, #3]
 8011872:	461a      	mov	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4413      	add	r3, r2
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801187c:	78fb      	ldrb	r3, [r7, #3]
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	70fa      	strb	r2, [r7, #3]
 8011882:	461a      	mov	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4413      	add	r3, r2
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	021b      	lsls	r3, r3, #8
 801188c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801188e:	4313      	orrs	r3, r2
 8011890:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011892:	78fb      	ldrb	r3, [r7, #3]
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	70fa      	strb	r2, [r7, #3]
 8011898:	461a      	mov	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	041b      	lsls	r3, r3, #16
 80118a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80118a4:	4313      	orrs	r3, r2
 80118a6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80118a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118aa:	2264      	movs	r2, #100	; 0x64
 80118ac:	fb02 f303 	mul.w	r3, r2, r3
 80118b0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80118b2:	78fb      	ldrb	r3, [r7, #3]
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	70fa      	strb	r2, [r7, #3]
 80118b8:	461a      	mov	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4413      	add	r3, r2
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	f003 030f 	and.w	r3, r3, #15
 80118c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80118c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80118cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80118ce:	4618      	mov	r0, r3
 80118d0:	f002 fe4e 	bl	8014570 <LoRaMacClassBPingSlotChannelReq>
 80118d4:	4603      	mov	r3, r0
 80118d6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80118da:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80118de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80118e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80118e6:	2201      	movs	r2, #1
 80118e8:	4619      	mov	r1, r3
 80118ea:	2011      	movs	r0, #17
 80118ec:	f002 ffa0 	bl	8014830 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 80118f0:	e07d      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80118f2:	200e      	movs	r0, #14
 80118f4:	f003 fad4 	bl	8014ea0 <LoRaMacConfirmQueueIsCmdActive>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d077      	beq.n	80119ee <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80118fe:	210e      	movs	r1, #14
 8011900:	2000      	movs	r0, #0
 8011902:	f003 fa41 	bl	8014d88 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011906:	2300      	movs	r3, #0
 8011908:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801190c:	2300      	movs	r3, #0
 801190e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011912:	78fb      	ldrb	r3, [r7, #3]
 8011914:	1c5a      	adds	r2, r3, #1
 8011916:	70fa      	strb	r2, [r7, #3]
 8011918:	461a      	mov	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4413      	add	r3, r2
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011924:	78fb      	ldrb	r3, [r7, #3]
 8011926:	1c5a      	adds	r2, r3, #1
 8011928:	70fa      	strb	r2, [r7, #3]
 801192a:	461a      	mov	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4413      	add	r3, r2
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	021b      	lsls	r3, r3, #8
 8011934:	b21a      	sxth	r2, r3
 8011936:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801193a:	4313      	orrs	r3, r2
 801193c:	b21b      	sxth	r3, r3
 801193e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	70fa      	strb	r2, [r7, #3]
 8011948:	461a      	mov	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4413      	add	r3, r2
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011954:	4b2e      	ldr	r3, [pc, #184]	; (8011a10 <ProcessMacCommands+0x92c>)
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801195c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011960:	4618      	mov	r0, r3
 8011962:	f002 fe11 	bl	8014588 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011966:	e042      	b.n	80119ee <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801196e:	78fb      	ldrb	r3, [r7, #3]
 8011970:	1c5a      	adds	r2, r3, #1
 8011972:	70fa      	strb	r2, [r7, #3]
 8011974:	461a      	mov	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4413      	add	r3, r2
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011980:	78fb      	ldrb	r3, [r7, #3]
 8011982:	1c5a      	adds	r2, r3, #1
 8011984:	70fa      	strb	r2, [r7, #3]
 8011986:	461a      	mov	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	4413      	add	r3, r2
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011994:	4313      	orrs	r3, r2
 8011996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801199a:	78fb      	ldrb	r3, [r7, #3]
 801199c:	1c5a      	adds	r2, r3, #1
 801199e:	70fa      	strb	r2, [r7, #3]
 80119a0:	461a      	mov	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4413      	add	r3, r2
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	041b      	lsls	r3, r3, #16
 80119aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80119ae:	4313      	orrs	r3, r2
 80119b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80119b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119b8:	2264      	movs	r2, #100	; 0x64
 80119ba:	fb02 f303 	mul.w	r3, r2, r3
 80119be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80119c2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80119c6:	f002 fdf2 	bl	80145ae <LoRaMacClassBBeaconFreqReq>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d003      	beq.n	80119d8 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80119d6:	e002      	b.n	80119de <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80119d8:	2300      	movs	r3, #0
 80119da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80119de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80119e2:	2201      	movs	r2, #1
 80119e4:	4619      	mov	r1, r3
 80119e6:	2013      	movs	r0, #19
 80119e8:	f002 ff22 	bl	8014830 <LoRaMacCommandsAddCmd>
                }
                break;
 80119ec:	bf00      	nop
    while( macIndex < commandsSize )
 80119ee:	78fa      	ldrb	r2, [r7, #3]
 80119f0:	78bb      	ldrb	r3, [r7, #2]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	f4ff ab8e 	bcc.w	8011114 <ProcessMacCommands+0x30>
 80119f8:	e002      	b.n	8011a00 <ProcessMacCommands+0x91c>
            return;
 80119fa:	bf00      	nop
 80119fc:	e000      	b.n	8011a00 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80119fe:	bf00      	nop
        }
    }
}
 8011a00:	378c      	adds	r7, #140	; 0x8c
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd90      	pop	{r4, r7, pc}
 8011a06:	bf00      	nop
 8011a08:	12d53d80 	.word	0x12d53d80
 8011a0c:	20000944 	.word	0x20000944
 8011a10:	200015bc 	.word	0x200015bc

08011a14 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08e      	sub	sp, #56	; 0x38
 8011a18:	af02      	add	r7, sp, #8
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	607a      	str	r2, [r7, #4]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	460b      	mov	r3, r1
 8011a22:	72fb      	strb	r3, [r7, #11]
 8011a24:	4613      	mov	r3, r2
 8011a26:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a28:	2303      	movs	r3, #3
 8011a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a2e:	4b65      	ldr	r3, [pc, #404]	; (8011bc4 <Send+0x1b0>)
 8011a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011a34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a38:	4b62      	ldr	r3, [pc, #392]	; (8011bc4 <Send+0x1b0>)
 8011a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011a3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a42:	4b60      	ldr	r3, [pc, #384]	; (8011bc4 <Send+0x1b0>)
 8011a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a46:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011a48:	4b5e      	ldr	r3, [pc, #376]	; (8011bc4 <Send+0x1b0>)
 8011a4a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d101      	bne.n	8011a56 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011a52:	2307      	movs	r3, #7
 8011a54:	e0b1      	b.n	8011bba <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011a56:	4b5b      	ldr	r3, [pc, #364]	; (8011bc4 <Send+0x1b0>)
 8011a58:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d102      	bne.n	8011a66 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011a60:	4b58      	ldr	r3, [pc, #352]	; (8011bc4 <Send+0x1b0>)
 8011a62:	2200      	movs	r2, #0
 8011a64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011a66:	2300      	movs	r3, #0
 8011a68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011a70:	f36f 0303 	bfc	r3, #0, #4
 8011a74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011a78:	4b52      	ldr	r3, [pc, #328]	; (8011bc4 <Send+0x1b0>)
 8011a7a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8011a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011a82:	f362 13c7 	bfi	r3, r2, #7, #1
 8011a86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011a8a:	4b4e      	ldr	r3, [pc, #312]	; (8011bc4 <Send+0x1b0>)
 8011a8c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d106      	bne.n	8011aa2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011a94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011a98:	f043 0310 	orr.w	r3, r3, #16
 8011a9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8011aa0:	e005      	b.n	8011aae <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011aa6:	f36f 1304 	bfc	r3, #4, #1
 8011aaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011aae:	4b45      	ldr	r3, [pc, #276]	; (8011bc4 <Send+0x1b0>)
 8011ab0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d005      	beq.n	8011ac4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011abc:	f043 0320 	orr.w	r3, r3, #32
 8011ac0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011acc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bf14      	ite	ne
 8011ad6:	2301      	movne	r3, #1
 8011ad8:	2300      	moveq	r3, #0
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011ade:	4b39      	ldr	r3, [pc, #228]	; (8011bc4 <Send+0x1b0>)
 8011ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ae2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011ae4:	4b37      	ldr	r3, [pc, #220]	; (8011bc4 <Send+0x1b0>)
 8011ae6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8011aea:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011aec:	4b35      	ldr	r3, [pc, #212]	; (8011bc4 <Send+0x1b0>)
 8011aee:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8011af2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011af4:	4b33      	ldr	r3, [pc, #204]	; (8011bc4 <Send+0x1b0>)
 8011af6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011afa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011afe:	4b31      	ldr	r3, [pc, #196]	; (8011bc4 <Send+0x1b0>)
 8011b00:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011b04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b08:	4b2e      	ldr	r3, [pc, #184]	; (8011bc4 <Send+0x1b0>)
 8011b0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011b0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011b12:	4b2c      	ldr	r3, [pc, #176]	; (8011bc4 <Send+0x1b0>)
 8011b14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011b1c:	4b29      	ldr	r3, [pc, #164]	; (8011bc4 <Send+0x1b0>)
 8011b1e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8011b22:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b28:	f107 0014 	add.w	r0, r7, #20
 8011b2c:	4a26      	ldr	r2, [pc, #152]	; (8011bc8 <Send+0x1b4>)
 8011b2e:	4927      	ldr	r1, [pc, #156]	; (8011bcc <Send+0x1b8>)
 8011b30:	f002 fc58 	bl	80143e4 <LoRaMacAdrCalcNext>
 8011b34:	4603      	mov	r3, r0
 8011b36:	461a      	mov	r2, r3
 8011b38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011b3c:	f362 1386 	bfi	r3, r2, #6, #1
 8011b40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011b44:	7afa      	ldrb	r2, [r7, #11]
 8011b46:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011b4a:	893b      	ldrh	r3, [r7, #8]
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f000 fc5d 	bl	8012410 <PrepareFrame>
 8011b56:	4603      	mov	r3, r0
 8011b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d003      	beq.n	8011b6c <Send+0x158>
 8011b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b68:	2b0a      	cmp	r3, #10
 8011b6a:	d107      	bne.n	8011b7c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011b6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011b70:	4618      	mov	r0, r3
 8011b72:	f000 f961 	bl	8011e38 <ScheduleTx>
 8011b76:	4603      	mov	r3, r0
 8011b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00a      	beq.n	8011b9a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011b84:	4a0f      	ldr	r2, [pc, #60]	; (8011bc4 <Send+0x1b0>)
 8011b86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011b8a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011b8e:	4a0d      	ldr	r2, [pc, #52]	; (8011bc4 <Send+0x1b0>)
 8011b90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b94:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011b98:	e00d      	b.n	8011bb6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011b9a:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <Send+0x1b0>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba4:	4a07      	ldr	r2, [pc, #28]	; (8011bc4 <Send+0x1b0>)
 8011ba6:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011ba8:	f002 fee8 	bl	801497c <LoRaMacCommandsRemoveNoneStickyCmds>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d001      	beq.n	8011bb6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011bb2:	2313      	movs	r3, #19
 8011bb4:	e001      	b.n	8011bba <Send+0x1a6>
        }
    }
    return status;
 8011bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3730      	adds	r7, #48	; 0x30
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20000e4c 	.word	0x20000e4c
 8011bc8:	20000e84 	.word	0x20000e84
 8011bcc:	20000e85 	.word	0x20000e85

08011bd0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011bde:	2300      	movs	r3, #0
 8011be0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011be2:	2301      	movs	r3, #1
 8011be4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011be6:	79fb      	ldrb	r3, [r7, #7]
 8011be8:	2bff      	cmp	r3, #255	; 0xff
 8011bea:	d11f      	bne.n	8011c2c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011bec:	2000      	movs	r0, #0
 8011bee:	f7ff f941 	bl	8010e74 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011bf2:	4b15      	ldr	r3, [pc, #84]	; (8011c48 <SendReJoinReq+0x78>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011bfa:	4b13      	ldr	r3, [pc, #76]	; (8011c48 <SendReJoinReq+0x78>)
 8011bfc:	4a13      	ldr	r2, [pc, #76]	; (8011c4c <SendReJoinReq+0x7c>)
 8011bfe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c02:	4b11      	ldr	r3, [pc, #68]	; (8011c48 <SendReJoinReq+0x78>)
 8011c04:	22ff      	movs	r2, #255	; 0xff
 8011c06:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011c0a:	7b3b      	ldrb	r3, [r7, #12]
 8011c0c:	f36f 1347 	bfc	r3, #5, #3
 8011c10:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011c12:	7b3a      	ldrb	r2, [r7, #12]
 8011c14:	4b0c      	ldr	r3, [pc, #48]	; (8011c48 <SendReJoinReq+0x78>)
 8011c16:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011c1a:	480d      	ldr	r0, [pc, #52]	; (8011c50 <SendReJoinReq+0x80>)
 8011c1c:	f7fc fb1c 	bl	800e258 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011c20:	480c      	ldr	r0, [pc, #48]	; (8011c54 <SendReJoinReq+0x84>)
 8011c22:	f7fc fae9 	bl	800e1f8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011c26:	2300      	movs	r3, #0
 8011c28:	73fb      	strb	r3, [r7, #15]

            break;
 8011c2a:	e002      	b.n	8011c32 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011c2c:	2302      	movs	r3, #2
 8011c2e:	73bb      	strb	r3, [r7, #14]
            break;
 8011c30:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011c32:	7bfb      	ldrb	r3, [r7, #15]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f000 f8ff 	bl	8011e38 <ScheduleTx>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	73bb      	strb	r3, [r7, #14]
    return status;
 8011c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	20000944 	.word	0x20000944
 8011c4c:	20000946 	.word	0x20000946
 8011c50:	20000a52 	.word	0x20000a52
 8011c54:	20000a5a 	.word	0x20000a5a

08011c58 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011c5c:	f002 fc31 	bl	80144c2 <LoRaMacClassBIsBeaconExpected>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d001      	beq.n	8011c6a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011c66:	230e      	movs	r3, #14
 8011c68:	e013      	b.n	8011c92 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011c6a:	4b0b      	ldr	r3, [pc, #44]	; (8011c98 <CheckForClassBCollision+0x40>)
 8011c6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d10d      	bne.n	8011c90 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011c74:	f002 fc2c 	bl	80144d0 <LoRaMacClassBIsPingExpected>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011c7e:	230f      	movs	r3, #15
 8011c80:	e007      	b.n	8011c92 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011c82:	f002 fc2c 	bl	80144de <LoRaMacClassBIsMulticastExpected>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d001      	beq.n	8011c90 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011c8c:	230f      	movs	r3, #15
 8011c8e:	e000      	b.n	8011c92 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	20000e4c 	.word	0x20000e4c

08011c9c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011c9c:	b590      	push	{r4, r7, lr}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011ca2:	4b2d      	ldr	r3, [pc, #180]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011ca4:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011ca8:	4b2b      	ldr	r3, [pc, #172]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011caa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011cae:	4b2a      	ldr	r3, [pc, #168]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cb0:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8011cb4:	4b28      	ldr	r3, [pc, #160]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cb6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011cba:	4b27      	ldr	r3, [pc, #156]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cbc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011cc0:	b25b      	sxtb	r3, r3
 8011cc2:	f004 fcf9 	bl	80166b8 <RegionApplyDrOffset>
 8011cc6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cc8:	b259      	sxtb	r1, r3
 8011cca:	4b23      	ldr	r3, [pc, #140]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011ccc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011cd0:	4b21      	ldr	r3, [pc, #132]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd4:	4821      	ldr	r0, [pc, #132]	; (8011d5c <ComputeRxWindowParameters+0xc0>)
 8011cd6:	9000      	str	r0, [sp, #0]
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f004 fbfd 	bl	80164d8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cde:	4b1e      	ldr	r3, [pc, #120]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011ce0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011ce4:	4b1c      	ldr	r3, [pc, #112]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cea:	b259      	sxtb	r1, r3
 8011cec:	4b1a      	ldr	r3, [pc, #104]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cee:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011cf2:	4b19      	ldr	r3, [pc, #100]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cf6:	4c1a      	ldr	r4, [pc, #104]	; (8011d60 <ComputeRxWindowParameters+0xc4>)
 8011cf8:	9400      	str	r4, [sp, #0]
 8011cfa:	f004 fbed 	bl	80164d8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011cfe:	4b16      	ldr	r3, [pc, #88]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d02:	4a18      	ldr	r2, [pc, #96]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d04:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011d08:	4413      	add	r3, r2
 8011d0a:	4a16      	ldr	r2, [pc, #88]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d0c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d10:	4b11      	ldr	r3, [pc, #68]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d14:	4a13      	ldr	r2, [pc, #76]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d16:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011d1a:	4413      	add	r3, r2
 8011d1c:	4a11      	ldr	r2, [pc, #68]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d1e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011d22:	4b10      	ldr	r3, [pc, #64]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011d28:	2b04      	cmp	r3, #4
 8011d2a:	d011      	beq.n	8011d50 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011d2c:	4b0a      	ldr	r3, [pc, #40]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d30:	4a0c      	ldr	r2, [pc, #48]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d32:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011d36:	4413      	add	r3, r2
 8011d38:	4a0a      	ldr	r2, [pc, #40]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d3a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d3e:	4b06      	ldr	r3, [pc, #24]	; (8011d58 <ComputeRxWindowParameters+0xbc>)
 8011d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d42:	4a08      	ldr	r2, [pc, #32]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d44:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011d48:	4413      	add	r3, r2
 8011d4a:	4a06      	ldr	r2, [pc, #24]	; (8011d64 <ComputeRxWindowParameters+0xc8>)
 8011d4c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011d50:	bf00      	nop
 8011d52:	3704      	adds	r7, #4
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd90      	pop	{r4, r7, pc}
 8011d58:	20000e4c 	.word	0x20000e4c
 8011d5c:	20000cfc 	.word	0x20000cfc
 8011d60:	20000d10 	.word	0x20000d10
 8011d64:	20000944 	.word	0x20000944

08011d68 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011d72:	4b13      	ldr	r3, [pc, #76]	; (8011dc0 <VerifyTxFrame+0x58>)
 8011d74:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01b      	beq.n	8011db4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011d7c:	1d3b      	adds	r3, r7, #4
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f002 fe4c 	bl	8014a1c <LoRaMacCommandsGetSizeSerializedCmds>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d001      	beq.n	8011d8e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d8a:	2313      	movs	r3, #19
 8011d8c:	e013      	b.n	8011db6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011d8e:	4b0d      	ldr	r3, [pc, #52]	; (8011dc4 <VerifyTxFrame+0x5c>)
 8011d90:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011d94:	4a0a      	ldr	r2, [pc, #40]	; (8011dc0 <VerifyTxFrame+0x58>)
 8011d96:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	b2d2      	uxtb	r2, r2
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff f978 	bl	8011094 <ValidatePayloadLength>
 8011da4:	4603      	mov	r3, r0
 8011da6:	f083 0301 	eor.w	r3, r3, #1
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d001      	beq.n	8011db4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011db0:	2308      	movs	r3, #8
 8011db2:	e000      	b.n	8011db6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3708      	adds	r7, #8
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	20000e4c 	.word	0x20000e4c
 8011dc4:	20000944 	.word	0x20000944

08011dc8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011dce:	4b18      	ldr	r3, [pc, #96]	; (8011e30 <SerializeTxFrame+0x68>)
 8011dd0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d002      	beq.n	8011dde <SerializeTxFrame+0x16>
 8011dd8:	2b04      	cmp	r3, #4
 8011dda:	d011      	beq.n	8011e00 <SerializeTxFrame+0x38>
 8011ddc:	e021      	b.n	8011e22 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011dde:	4815      	ldr	r0, [pc, #84]	; (8011e34 <SerializeTxFrame+0x6c>)
 8011de0:	f004 f97a 	bl	80160d8 <LoRaMacSerializerJoinRequest>
 8011de4:	4603      	mov	r3, r0
 8011de6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011de8:	79fb      	ldrb	r3, [r7, #7]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dee:	2311      	movs	r3, #17
 8011df0:	e01a      	b.n	8011e28 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011df2:	4b0f      	ldr	r3, [pc, #60]	; (8011e30 <SerializeTxFrame+0x68>)
 8011df4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	4b0d      	ldr	r3, [pc, #52]	; (8011e30 <SerializeTxFrame+0x68>)
 8011dfc:	801a      	strh	r2, [r3, #0]
            break;
 8011dfe:	e012      	b.n	8011e26 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011e00:	480c      	ldr	r0, [pc, #48]	; (8011e34 <SerializeTxFrame+0x6c>)
 8011e02:	f004 f9eb 	bl	80161dc <LoRaMacSerializerData>
 8011e06:	4603      	mov	r3, r0
 8011e08:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011e0a:	79fb      	ldrb	r3, [r7, #7]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e10:	2311      	movs	r3, #17
 8011e12:	e009      	b.n	8011e28 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011e14:	4b06      	ldr	r3, [pc, #24]	; (8011e30 <SerializeTxFrame+0x68>)
 8011e16:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	4b04      	ldr	r3, [pc, #16]	; (8011e30 <SerializeTxFrame+0x68>)
 8011e1e:	801a      	strh	r2, [r3, #0]
            break;
 8011e20:	e001      	b.n	8011e26 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e22:	2303      	movs	r3, #3
 8011e24:	e000      	b.n	8011e28 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	20000944 	.word	0x20000944
 8011e34:	20000a4c 	.word	0x20000a4c

08011e38 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b090      	sub	sp, #64	; 0x40
 8011e3c:	af02      	add	r7, sp, #8
 8011e3e:	4603      	mov	r3, r0
 8011e40:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e42:	2303      	movs	r3, #3
 8011e44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011e48:	f7ff ff06 	bl	8011c58 <CheckForClassBCollision>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <ScheduleTx+0x28>
    {
        return status;
 8011e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e5e:	e092      	b.n	8011f86 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8011e60:	f000 f8fe 	bl	8012060 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011e64:	f7ff ffb0 	bl	8011dc8 <SerializeTxFrame>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d002      	beq.n	8011e7c <ScheduleTx+0x44>
    {
        return status;
 8011e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e7a:	e084      	b.n	8011f86 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011e7c:	4b44      	ldr	r3, [pc, #272]	; (8011f90 <ScheduleTx+0x158>)
 8011e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e80:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e82:	4b43      	ldr	r3, [pc, #268]	; (8011f90 <ScheduleTx+0x158>)
 8011e84:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011e88:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011e8a:	4b41      	ldr	r3, [pc, #260]	; (8011f90 <ScheduleTx+0x158>)
 8011e8c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011e90:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e96:	4618      	mov	r0, r3
 8011e98:	f00a fa2c 	bl	801c2f4 <SysTimeGetMcuTime>
 8011e9c:	4638      	mov	r0, r7
 8011e9e:	4b3c      	ldr	r3, [pc, #240]	; (8011f90 <ScheduleTx+0x158>)
 8011ea0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8011ea4:	9200      	str	r2, [sp, #0]
 8011ea6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8011eaa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011eae:	ca06      	ldmia	r2, {r1, r2}
 8011eb0:	f00a f981 	bl	801c1b6 <SysTimeSub>
 8011eb4:	f107 0320 	add.w	r3, r7, #32
 8011eb8:	463a      	mov	r2, r7
 8011eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ebe:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011ec2:	4b33      	ldr	r3, [pc, #204]	; (8011f90 <ScheduleTx+0x158>)
 8011ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011ed2:	4b30      	ldr	r3, [pc, #192]	; (8011f94 <ScheduleTx+0x15c>)
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011ed8:	4b2d      	ldr	r3, [pc, #180]	; (8011f90 <ScheduleTx+0x158>)
 8011eda:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d104      	bne.n	8011eec <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011eec:	4b28      	ldr	r3, [pc, #160]	; (8011f90 <ScheduleTx+0x158>)
 8011eee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011ef2:	f107 0114 	add.w	r1, r7, #20
 8011ef6:	4b28      	ldr	r3, [pc, #160]	; (8011f98 <ScheduleTx+0x160>)
 8011ef8:	9300      	str	r3, [sp, #0]
 8011efa:	4b28      	ldr	r3, [pc, #160]	; (8011f9c <ScheduleTx+0x164>)
 8011efc:	4a28      	ldr	r2, [pc, #160]	; (8011fa0 <ScheduleTx+0x168>)
 8011efe:	f004 fbb1 	bl	8016664 <RegionNextChannel>
 8011f02:	4603      	mov	r3, r0
 8011f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011f08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d025      	beq.n	8011f5c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f14:	2b0b      	cmp	r3, #11
 8011f16:	d11e      	bne.n	8011f56 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011f18:	4b1e      	ldr	r3, [pc, #120]	; (8011f94 <ScheduleTx+0x15c>)
 8011f1a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d01c      	beq.n	8011f5c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011f22:	7bfb      	ldrb	r3, [r7, #15]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d013      	beq.n	8011f50 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011f28:	4b1a      	ldr	r3, [pc, #104]	; (8011f94 <ScheduleTx+0x15c>)
 8011f2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f2e:	f043 0320 	orr.w	r3, r3, #32
 8011f32:	4a18      	ldr	r2, [pc, #96]	; (8011f94 <ScheduleTx+0x15c>)
 8011f34:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011f38:	4b16      	ldr	r3, [pc, #88]	; (8011f94 <ScheduleTx+0x15c>)
 8011f3a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8011f3e:	4619      	mov	r1, r3
 8011f40:	4818      	ldr	r0, [pc, #96]	; (8011fa4 <ScheduleTx+0x16c>)
 8011f42:	f00a ff77 	bl	801ce34 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011f46:	4817      	ldr	r0, [pc, #92]	; (8011fa4 <ScheduleTx+0x16c>)
 8011f48:	f00a fe96 	bl	801cc78 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e01a      	b.n	8011f86 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8011f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f54:	e017      	b.n	8011f86 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f5a:	e014      	b.n	8011f86 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011f5c:	f7ff fe9e 	bl	8011c9c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011f60:	f7ff ff02 	bl	8011d68 <VerifyTxFrame>
 8011f64:	4603      	mov	r3, r0
 8011f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <ScheduleTx+0x140>
    {
        return status;
 8011f72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f76:	e006      	b.n	8011f86 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011f78:	4b06      	ldr	r3, [pc, #24]	; (8011f94 <ScheduleTx+0x15c>)
 8011f7a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f000 fb62 	bl	8012648 <SendFrameOnChannel>
 8011f84:	4603      	mov	r3, r0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3738      	adds	r7, #56	; 0x38
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	20000e4c 	.word	0x20000e4c
 8011f94:	20000944 	.word	0x20000944
 8011f98:	20000e7c 	.word	0x20000e7c
 8011f9c:	20000dc8 	.word	0x20000dc8
 8011fa0:	20000d55 	.word	0x20000d55
 8011fa4:	20000cac 	.word	0x20000cac

08011fa8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	460a      	mov	r2, r1
 8011fb2:	71fb      	strb	r3, [r7, #7]
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011fb8:	2313      	movs	r3, #19
 8011fba:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011fc0:	4b25      	ldr	r3, [pc, #148]	; (8012058 <SecureFrame+0xb0>)
 8011fc2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d002      	beq.n	8011fd0 <SecureFrame+0x28>
 8011fca:	2b04      	cmp	r3, #4
 8011fcc:	d011      	beq.n	8011ff2 <SecureFrame+0x4a>
 8011fce:	e03b      	b.n	8012048 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011fd0:	4822      	ldr	r0, [pc, #136]	; (801205c <SecureFrame+0xb4>)
 8011fd2:	f003 fc47 	bl	8015864 <LoRaMacCryptoPrepareJoinRequest>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d001      	beq.n	8011fe4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011fe0:	2311      	movs	r3, #17
 8011fe2:	e034      	b.n	801204e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011fe4:	4b1c      	ldr	r3, [pc, #112]	; (8012058 <SecureFrame+0xb0>)
 8011fe6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	4b1a      	ldr	r3, [pc, #104]	; (8012058 <SecureFrame+0xb0>)
 8011fee:	801a      	strh	r2, [r3, #0]
            break;
 8011ff0:	e02c      	b.n	801204c <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ff2:	f107 0308 	add.w	r3, r7, #8
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f003 fb44 	bl	8015684 <LoRaMacCryptoGetFCntUp>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d001      	beq.n	8012006 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012002:	2312      	movs	r3, #18
 8012004:	e023      	b.n	801204e <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012006:	4b14      	ldr	r3, [pc, #80]	; (8012058 <SecureFrame+0xb0>)
 8012008:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d104      	bne.n	801201a <SecureFrame+0x72>
 8012010:	4b11      	ldr	r3, [pc, #68]	; (8012058 <SecureFrame+0xb0>)
 8012012:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012016:	2b01      	cmp	r3, #1
 8012018:	d902      	bls.n	8012020 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	3b01      	subs	r3, #1
 801201e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012020:	68b8      	ldr	r0, [r7, #8]
 8012022:	79ba      	ldrb	r2, [r7, #6]
 8012024:	79f9      	ldrb	r1, [r7, #7]
 8012026:	4b0d      	ldr	r3, [pc, #52]	; (801205c <SecureFrame+0xb4>)
 8012028:	f003 fd4a 	bl	8015ac0 <LoRaMacCryptoSecureMessage>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012030:	7bfb      	ldrb	r3, [r7, #15]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012036:	2311      	movs	r3, #17
 8012038:	e009      	b.n	801204e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801203a:	4b07      	ldr	r3, [pc, #28]	; (8012058 <SecureFrame+0xb0>)
 801203c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012040:	b29a      	uxth	r2, r3
 8012042:	4b05      	ldr	r3, [pc, #20]	; (8012058 <SecureFrame+0xb0>)
 8012044:	801a      	strh	r2, [r3, #0]
            break;
 8012046:	e001      	b.n	801204c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012048:	2303      	movs	r3, #3
 801204a:	e000      	b.n	801204e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	20000944 	.word	0x20000944
 801205c:	20000a4c 	.word	0x20000a4c

08012060 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012060:	b480      	push	{r7}
 8012062:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012064:	4b09      	ldr	r3, [pc, #36]	; (801208c <CalculateBackOff+0x2c>)
 8012066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10a      	bne.n	8012082 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801206c:	4b07      	ldr	r3, [pc, #28]	; (801208c <CalculateBackOff+0x2c>)
 801206e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012072:	3b01      	subs	r3, #1
 8012074:	4a06      	ldr	r2, [pc, #24]	; (8012090 <CalculateBackOff+0x30>)
 8012076:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 801207a:	fb02 f303 	mul.w	r3, r2, r3
 801207e:	4a03      	ldr	r2, [pc, #12]	; (801208c <CalculateBackOff+0x2c>)
 8012080:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8012082:	bf00      	nop
 8012084:	46bd      	mov	sp, r7
 8012086:	bc80      	pop	{r7}
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	20000e4c 	.word	0x20000e4c
 8012090:	20000944 	.word	0x20000944

08012094 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	4603      	mov	r3, r0
 801209c:	7139      	strb	r1, [r7, #4]
 801209e:	71fb      	strb	r3, [r7, #7]
 80120a0:	4613      	mov	r3, r2
 80120a2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80120a4:	79fb      	ldrb	r3, [r7, #7]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <RemoveMacCommands+0x1c>
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d10d      	bne.n	80120cc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80120b0:	79bb      	ldrb	r3, [r7, #6]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d108      	bne.n	80120c8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80120b6:	793b      	ldrb	r3, [r7, #4]
 80120b8:	f003 0320 	and.w	r3, r3, #32
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d004      	beq.n	80120cc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80120c2:	f002 fc7f 	bl	80149c4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80120c6:	e001      	b.n	80120cc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80120c8:	f002 fc7c 	bl	80149c4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80120cc:	bf00      	nop
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80120d4:	b5b0      	push	{r4, r5, r7, lr}
 80120d6:	b090      	sub	sp, #64	; 0x40
 80120d8:	af00      	add	r7, sp, #0
 80120da:	4603      	mov	r3, r0
 80120dc:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80120de:	79fb      	ldrb	r3, [r7, #7]
 80120e0:	f083 0301 	eor.w	r3, r3, #1
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d003      	beq.n	80120f2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80120ea:	4b80      	ldr	r3, [pc, #512]	; (80122ec <ResetMacParameters+0x218>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80120f2:	4b7e      	ldr	r3, [pc, #504]	; (80122ec <ResetMacParameters+0x218>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80120f8:	4b7d      	ldr	r3, [pc, #500]	; (80122f0 <ResetMacParameters+0x21c>)
 80120fa:	2200      	movs	r2, #0
 80120fc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8012100:	4b7b      	ldr	r3, [pc, #492]	; (80122f0 <ResetMacParameters+0x21c>)
 8012102:	2201      	movs	r2, #1
 8012104:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012108:	4b79      	ldr	r3, [pc, #484]	; (80122f0 <ResetMacParameters+0x21c>)
 801210a:	2201      	movs	r2, #1
 801210c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8012110:	4b77      	ldr	r3, [pc, #476]	; (80122f0 <ResetMacParameters+0x21c>)
 8012112:	2200      	movs	r2, #0
 8012114:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012118:	4b74      	ldr	r3, [pc, #464]	; (80122ec <ResetMacParameters+0x218>)
 801211a:	2200      	movs	r2, #0
 801211c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8012120:	4b72      	ldr	r3, [pc, #456]	; (80122ec <ResetMacParameters+0x218>)
 8012122:	2201      	movs	r2, #1
 8012124:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012128:	4b70      	ldr	r3, [pc, #448]	; (80122ec <ResetMacParameters+0x218>)
 801212a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801212e:	4b6f      	ldr	r3, [pc, #444]	; (80122ec <ResetMacParameters+0x218>)
 8012130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012134:	4b6d      	ldr	r3, [pc, #436]	; (80122ec <ResetMacParameters+0x218>)
 8012136:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801213a:	4b6c      	ldr	r3, [pc, #432]	; (80122ec <ResetMacParameters+0x218>)
 801213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012140:	4b6a      	ldr	r3, [pc, #424]	; (80122ec <ResetMacParameters+0x218>)
 8012142:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8012146:	4b69      	ldr	r3, [pc, #420]	; (80122ec <ResetMacParameters+0x218>)
 8012148:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801214c:	4b67      	ldr	r3, [pc, #412]	; (80122ec <ResetMacParameters+0x218>)
 801214e:	4a67      	ldr	r2, [pc, #412]	; (80122ec <ResetMacParameters+0x218>)
 8012150:	336c      	adds	r3, #108	; 0x6c
 8012152:	32b4      	adds	r2, #180	; 0xb4
 8012154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012158:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801215c:	4b63      	ldr	r3, [pc, #396]	; (80122ec <ResetMacParameters+0x218>)
 801215e:	4a63      	ldr	r2, [pc, #396]	; (80122ec <ResetMacParameters+0x218>)
 8012160:	3374      	adds	r3, #116	; 0x74
 8012162:	32bc      	adds	r2, #188	; 0xbc
 8012164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012168:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801216c:	4b5f      	ldr	r3, [pc, #380]	; (80122ec <ResetMacParameters+0x218>)
 801216e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8012172:	4b5e      	ldr	r3, [pc, #376]	; (80122ec <ResetMacParameters+0x218>)
 8012174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012178:	4b5c      	ldr	r3, [pc, #368]	; (80122ec <ResetMacParameters+0x218>)
 801217a:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 801217e:	4b5b      	ldr	r3, [pc, #364]	; (80122ec <ResetMacParameters+0x218>)
 8012180:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012184:	4b59      	ldr	r3, [pc, #356]	; (80122ec <ResetMacParameters+0x218>)
 8012186:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801218a:	4a58      	ldr	r2, [pc, #352]	; (80122ec <ResetMacParameters+0x218>)
 801218c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012190:	4b56      	ldr	r3, [pc, #344]	; (80122ec <ResetMacParameters+0x218>)
 8012192:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012196:	4a55      	ldr	r2, [pc, #340]	; (80122ec <ResetMacParameters+0x218>)
 8012198:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801219c:	4b53      	ldr	r3, [pc, #332]	; (80122ec <ResetMacParameters+0x218>)
 801219e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80121a2:	4b52      	ldr	r3, [pc, #328]	; (80122ec <ResetMacParameters+0x218>)
 80121a4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80121a8:	4b50      	ldr	r3, [pc, #320]	; (80122ec <ResetMacParameters+0x218>)
 80121aa:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80121ae:	4b4f      	ldr	r3, [pc, #316]	; (80122ec <ResetMacParameters+0x218>)
 80121b0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 80121b4:	4b4e      	ldr	r3, [pc, #312]	; (80122f0 <ResetMacParameters+0x21c>)
 80121b6:	2200      	movs	r2, #0
 80121b8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80121bc:	4b4b      	ldr	r3, [pc, #300]	; (80122ec <ResetMacParameters+0x218>)
 80121be:	2200      	movs	r2, #0
 80121c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80121c4:	4b49      	ldr	r3, [pc, #292]	; (80122ec <ResetMacParameters+0x218>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80121cc:	4b47      	ldr	r3, [pc, #284]	; (80122ec <ResetMacParameters+0x218>)
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80121d4:	4b45      	ldr	r3, [pc, #276]	; (80122ec <ResetMacParameters+0x218>)
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80121dc:	4b43      	ldr	r3, [pc, #268]	; (80122ec <ResetMacParameters+0x218>)
 80121de:	2200      	movs	r2, #0
 80121e0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80121e4:	4b41      	ldr	r3, [pc, #260]	; (80122ec <ResetMacParameters+0x218>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80121ec:	4b3f      	ldr	r3, [pc, #252]	; (80122ec <ResetMacParameters+0x218>)
 80121ee:	2200      	movs	r2, #0
 80121f0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80121f4:	4b3d      	ldr	r3, [pc, #244]	; (80122ec <ResetMacParameters+0x218>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80121fc:	4b3b      	ldr	r3, [pc, #236]	; (80122ec <ResetMacParameters+0x218>)
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012204:	2301      	movs	r3, #1
 8012206:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012208:	4b3a      	ldr	r3, [pc, #232]	; (80122f4 <ResetMacParameters+0x220>)
 801220a:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801220c:	4b3a      	ldr	r3, [pc, #232]	; (80122f8 <ResetMacParameters+0x224>)
 801220e:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012210:	4b36      	ldr	r3, [pc, #216]	; (80122ec <ResetMacParameters+0x218>)
 8012212:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012216:	f107 020c 	add.w	r2, r7, #12
 801221a:	4611      	mov	r1, r2
 801221c:	4618      	mov	r0, r3
 801221e:	f004 f90d 	bl	801643c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012222:	4b33      	ldr	r3, [pc, #204]	; (80122f0 <ResetMacParameters+0x21c>)
 8012224:	2200      	movs	r2, #0
 8012226:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801222a:	4b31      	ldr	r3, [pc, #196]	; (80122f0 <ResetMacParameters+0x21c>)
 801222c:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012230:	4b2f      	ldr	r3, [pc, #188]	; (80122f0 <ResetMacParameters+0x21c>)
 8012232:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012236:	4b2d      	ldr	r3, [pc, #180]	; (80122ec <ResetMacParameters+0x218>)
 8012238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801223a:	4a2d      	ldr	r2, [pc, #180]	; (80122f0 <ResetMacParameters+0x21c>)
 801223c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012240:	4b2a      	ldr	r3, [pc, #168]	; (80122ec <ResetMacParameters+0x218>)
 8012242:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012246:	4b2a      	ldr	r3, [pc, #168]	; (80122f0 <ResetMacParameters+0x21c>)
 8012248:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801224c:	4b27      	ldr	r3, [pc, #156]	; (80122ec <ResetMacParameters+0x218>)
 801224e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012252:	4b27      	ldr	r3, [pc, #156]	; (80122f0 <ResetMacParameters+0x21c>)
 8012254:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012258:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <ResetMacParameters+0x21c>)
 801225a:	2200      	movs	r2, #0
 801225c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012260:	4b23      	ldr	r3, [pc, #140]	; (80122f0 <ResetMacParameters+0x21c>)
 8012262:	2201      	movs	r2, #1
 8012264:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012268:	4a21      	ldr	r2, [pc, #132]	; (80122f0 <ResetMacParameters+0x21c>)
 801226a:	4b21      	ldr	r3, [pc, #132]	; (80122f0 <ResetMacParameters+0x21c>)
 801226c:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012270:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8012274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801227c:	4b1c      	ldr	r3, [pc, #112]	; (80122f0 <ResetMacParameters+0x21c>)
 801227e:	2201      	movs	r2, #1
 8012280:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012284:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <ResetMacParameters+0x21c>)
 8012286:	2202      	movs	r2, #2
 8012288:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801228c:	2300      	movs	r3, #0
 801228e:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8012290:	2300      	movs	r3, #0
 8012292:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8012294:	4b16      	ldr	r3, [pc, #88]	; (80122f0 <ResetMacParameters+0x21c>)
 8012296:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801229a:	2b00      	cmp	r3, #0
 801229c:	d009      	beq.n	80122b2 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801229e:	4b14      	ldr	r3, [pc, #80]	; (80122f0 <ResetMacParameters+0x21c>)
 80122a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80122a8:	4b11      	ldr	r3, [pc, #68]	; (80122f0 <ResetMacParameters+0x21c>)
 80122aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80122ae:	695b      	ldr	r3, [r3, #20]
 80122b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80122b2:	4b12      	ldr	r3, [pc, #72]	; (80122fc <ResetMacParameters+0x228>)
 80122b4:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80122b6:	4b12      	ldr	r3, [pc, #72]	; (8012300 <ResetMacParameters+0x22c>)
 80122b8:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80122ba:	4b12      	ldr	r3, [pc, #72]	; (8012304 <ResetMacParameters+0x230>)
 80122bc:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80122be:	4b12      	ldr	r3, [pc, #72]	; (8012308 <ResetMacParameters+0x234>)
 80122c0:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80122c2:	4b12      	ldr	r3, [pc, #72]	; (801230c <ResetMacParameters+0x238>)
 80122c4:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80122c6:	4b12      	ldr	r3, [pc, #72]	; (8012310 <ResetMacParameters+0x23c>)
 80122c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80122ca:	4b12      	ldr	r3, [pc, #72]	; (8012314 <ResetMacParameters+0x240>)
 80122cc:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80122ce:	4b12      	ldr	r3, [pc, #72]	; (8012318 <ResetMacParameters+0x244>)
 80122d0:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80122d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80122d6:	f107 0318 	add.w	r3, r7, #24
 80122da:	4a10      	ldr	r2, [pc, #64]	; (801231c <ResetMacParameters+0x248>)
 80122dc:	4618      	mov	r0, r3
 80122de:	f002 f899 	bl	8014414 <LoRaMacClassBInit>
}
 80122e2:	bf00      	nop
 80122e4:	3740      	adds	r7, #64	; 0x40
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bdb0      	pop	{r4, r5, r7, pc}
 80122ea:	bf00      	nop
 80122ec:	20000e4c 	.word	0x20000e4c
 80122f0:	20000944 	.word	0x20000944
 80122f4:	2000106c 	.word	0x2000106c
 80122f8:	20001100 	.word	0x20001100
 80122fc:	20000da0 	.word	0x20000da0
 8012300:	20000d5c 	.word	0x20000d5c
 8012304:	20000d8c 	.word	0x20000d8c
 8012308:	20000dc5 	.word	0x20000dc5
 801230c:	20000f30 	.word	0x20000f30
 8012310:	20000e94 	.word	0x20000e94
 8012314:	20000e98 	.word	0x20000e98
 8012318:	20000f34 	.word	0x20000f34
 801231c:	2000159c 	.word	0x2000159c

08012320 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f00a fd12 	bl	801cd54 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012330:	4b11      	ldr	r3, [pc, #68]	; (8012378 <RxWindowSetup+0x58>)
 8012332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012334:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012336:	4b11      	ldr	r3, [pc, #68]	; (801237c <RxWindowSetup+0x5c>)
 8012338:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801233c:	4a10      	ldr	r2, [pc, #64]	; (8012380 <RxWindowSetup+0x60>)
 801233e:	6839      	ldr	r1, [r7, #0]
 8012340:	4618      	mov	r0, r3
 8012342:	f004 f8e3 	bl	801650c <RegionRxConfig>
 8012346:	4603      	mov	r3, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d010      	beq.n	801236e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801234c:	4b0d      	ldr	r3, [pc, #52]	; (8012384 <RxWindowSetup+0x64>)
 801234e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8012352:	4b0c      	ldr	r3, [pc, #48]	; (8012384 <RxWindowSetup+0x64>)
 8012354:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012358:	4b07      	ldr	r3, [pc, #28]	; (8012378 <RxWindowSetup+0x58>)
 801235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801235c:	4a07      	ldr	r2, [pc, #28]	; (801237c <RxWindowSetup+0x5c>)
 801235e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012360:	4610      	mov	r0, r2
 8012362:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	7cda      	ldrb	r2, [r3, #19]
 8012368:	4b06      	ldr	r3, [pc, #24]	; (8012384 <RxWindowSetup+0x64>)
 801236a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801236e:	bf00      	nop
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	0801e604 	.word	0x0801e604
 801237c:	20000e4c 	.word	0x20000e4c
 8012380:	20000d60 	.word	0x20000d60
 8012384:	20000944 	.word	0x20000944

08012388 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012388:	b590      	push	{r4, r7, lr}
 801238a:	b083      	sub	sp, #12
 801238c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801238e:	4b1b      	ldr	r3, [pc, #108]	; (80123fc <OpenContinuousRxCWindow+0x74>)
 8012390:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012394:	4b19      	ldr	r3, [pc, #100]	; (80123fc <OpenContinuousRxCWindow+0x74>)
 8012396:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801239a:	b259      	sxtb	r1, r3
 801239c:	4b17      	ldr	r3, [pc, #92]	; (80123fc <OpenContinuousRxCWindow+0x74>)
 801239e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80123a2:	4b16      	ldr	r3, [pc, #88]	; (80123fc <OpenContinuousRxCWindow+0x74>)
 80123a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123a6:	4c16      	ldr	r4, [pc, #88]	; (8012400 <OpenContinuousRxCWindow+0x78>)
 80123a8:	9400      	str	r4, [sp, #0]
 80123aa:	f004 f895 	bl	80164d8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80123ae:	4b15      	ldr	r3, [pc, #84]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123b0:	2202      	movs	r2, #2
 80123b2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80123b6:	4b13      	ldr	r3, [pc, #76]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123b8:	2201      	movs	r2, #1
 80123ba:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80123be:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <OpenContinuousRxCWindow+0x74>)
 80123c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80123c4:	4a10      	ldr	r2, [pc, #64]	; (8012408 <OpenContinuousRxCWindow+0x80>)
 80123c6:	490e      	ldr	r1, [pc, #56]	; (8012400 <OpenContinuousRxCWindow+0x78>)
 80123c8:	4618      	mov	r0, r3
 80123ca:	f004 f89f 	bl	801650c <RegionRxConfig>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d00f      	beq.n	80123f4 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80123d4:	4b0b      	ldr	r3, [pc, #44]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123d6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80123da:	4b0a      	ldr	r3, [pc, #40]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123dc:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80123e0:	4b0a      	ldr	r3, [pc, #40]	; (801240c <OpenContinuousRxCWindow+0x84>)
 80123e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123e4:	2000      	movs	r0, #0
 80123e6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80123e8:	4b06      	ldr	r3, [pc, #24]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123ea:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80123ee:	4b05      	ldr	r3, [pc, #20]	; (8012404 <OpenContinuousRxCWindow+0x7c>)
 80123f0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80123f4:	bf00      	nop
 80123f6:	3704      	adds	r7, #4
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd90      	pop	{r4, r7, pc}
 80123fc:	20000e4c 	.word	0x20000e4c
 8012400:	20000d24 	.word	0x20000d24
 8012404:	20000944 	.word	0x20000944
 8012408:	20000d60 	.word	0x20000d60
 801240c:	0801e604 	.word	0x0801e604

08012410 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b088      	sub	sp, #32
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	603b      	str	r3, [r7, #0]
 801241c:	4613      	mov	r3, r2
 801241e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012420:	4b82      	ldr	r3, [pc, #520]	; (801262c <PrepareFrame+0x21c>)
 8012422:	2200      	movs	r2, #0
 8012424:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012426:	4b81      	ldr	r3, [pc, #516]	; (801262c <PrepareFrame+0x21c>)
 8012428:	2200      	movs	r2, #0
 801242a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012432:	2300      	movs	r3, #0
 8012434:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012440:	2300      	movs	r3, #0
 8012442:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012446:	461a      	mov	r2, r3
 8012448:	6839      	ldr	r1, [r7, #0]
 801244a:	4879      	ldr	r0, [pc, #484]	; (8012630 <PrepareFrame+0x220>)
 801244c:	f006 fae7 	bl	8018a1e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012450:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012452:	b2da      	uxtb	r2, r3
 8012454:	4b75      	ldr	r3, [pc, #468]	; (801262c <PrepareFrame+0x21c>)
 8012456:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	781a      	ldrb	r2, [r3, #0]
 801245e:	4b73      	ldr	r3, [pc, #460]	; (801262c <PrepareFrame+0x21c>)
 8012460:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801246a:	b2db      	uxtb	r3, r3
 801246c:	2b07      	cmp	r3, #7
 801246e:	f000 80b9 	beq.w	80125e4 <PrepareFrame+0x1d4>
 8012472:	2b07      	cmp	r3, #7
 8012474:	f300 80d0 	bgt.w	8012618 <PrepareFrame+0x208>
 8012478:	2b02      	cmp	r3, #2
 801247a:	d006      	beq.n	801248a <PrepareFrame+0x7a>
 801247c:	2b04      	cmp	r3, #4
 801247e:	f040 80cb 	bne.w	8012618 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012482:	4b6a      	ldr	r3, [pc, #424]	; (801262c <PrepareFrame+0x21c>)
 8012484:	2201      	movs	r2, #1
 8012486:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801248a:	4b68      	ldr	r3, [pc, #416]	; (801262c <PrepareFrame+0x21c>)
 801248c:	2204      	movs	r2, #4
 801248e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012492:	4b66      	ldr	r3, [pc, #408]	; (801262c <PrepareFrame+0x21c>)
 8012494:	4a67      	ldr	r2, [pc, #412]	; (8012634 <PrepareFrame+0x224>)
 8012496:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801249a:	4b64      	ldr	r3, [pc, #400]	; (801262c <PrepareFrame+0x21c>)
 801249c:	22ff      	movs	r2, #255	; 0xff
 801249e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	781a      	ldrb	r2, [r3, #0]
 80124a6:	4b61      	ldr	r3, [pc, #388]	; (801262c <PrepareFrame+0x21c>)
 80124a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80124ac:	4a5f      	ldr	r2, [pc, #380]	; (801262c <PrepareFrame+0x21c>)
 80124ae:	79fb      	ldrb	r3, [r7, #7]
 80124b0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80124b4:	4b60      	ldr	r3, [pc, #384]	; (8012638 <PrepareFrame+0x228>)
 80124b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80124ba:	4a5c      	ldr	r2, [pc, #368]	; (801262c <PrepareFrame+0x21c>)
 80124bc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	781a      	ldrb	r2, [r3, #0]
 80124c4:	4b59      	ldr	r3, [pc, #356]	; (801262c <PrepareFrame+0x21c>)
 80124c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80124ca:	4b58      	ldr	r3, [pc, #352]	; (801262c <PrepareFrame+0x21c>)
 80124cc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80124d0:	4b56      	ldr	r3, [pc, #344]	; (801262c <PrepareFrame+0x21c>)
 80124d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80124d6:	4b55      	ldr	r3, [pc, #340]	; (801262c <PrepareFrame+0x21c>)
 80124d8:	4a55      	ldr	r2, [pc, #340]	; (8012630 <PrepareFrame+0x220>)
 80124da:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80124de:	f107 0318 	add.w	r3, r7, #24
 80124e2:	4618      	mov	r0, r3
 80124e4:	f003 f8ce 	bl	8015684 <LoRaMacCryptoGetFCntUp>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80124ee:	2312      	movs	r3, #18
 80124f0:	e098      	b.n	8012624 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	4b4d      	ldr	r3, [pc, #308]	; (801262c <PrepareFrame+0x21c>)
 80124f8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80124fc:	4b4b      	ldr	r3, [pc, #300]	; (801262c <PrepareFrame+0x21c>)
 80124fe:	2200      	movs	r2, #0
 8012500:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012504:	4b49      	ldr	r3, [pc, #292]	; (801262c <PrepareFrame+0x21c>)
 8012506:	2200      	movs	r2, #0
 8012508:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	4a47      	ldr	r2, [pc, #284]	; (801262c <PrepareFrame+0x21c>)
 8012510:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012514:	f107 0314 	add.w	r3, r7, #20
 8012518:	4618      	mov	r0, r3
 801251a:	f002 fa7f 	bl	8014a1c <LoRaMacCommandsGetSizeSerializedCmds>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d001      	beq.n	8012528 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012524:	2313      	movs	r3, #19
 8012526:	e07d      	b.n	8012624 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d076      	beq.n	801261c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801252e:	4b42      	ldr	r3, [pc, #264]	; (8012638 <PrepareFrame+0x228>)
 8012530:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012534:	4618      	mov	r0, r3
 8012536:	f7fe fd85 	bl	8011044 <GetMaxAppPayloadWithoutFOptsLength>
 801253a:	4603      	mov	r3, r0
 801253c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801253e:	4b3b      	ldr	r3, [pc, #236]	; (801262c <PrepareFrame+0x21c>)
 8012540:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012544:	2b00      	cmp	r3, #0
 8012546:	d01d      	beq.n	8012584 <PrepareFrame+0x174>
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2b0f      	cmp	r3, #15
 801254c:	d81a      	bhi.n	8012584 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801254e:	f107 0314 	add.w	r3, r7, #20
 8012552:	4a3a      	ldr	r2, [pc, #232]	; (801263c <PrepareFrame+0x22c>)
 8012554:	4619      	mov	r1, r3
 8012556:	200f      	movs	r0, #15
 8012558:	f002 fa76 	bl	8014a48 <LoRaMacCommandsSerializeCmds>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d001      	beq.n	8012566 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012562:	2313      	movs	r3, #19
 8012564:	e05e      	b.n	8012624 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	f003 030f 	and.w	r3, r3, #15
 801256c:	b2d9      	uxtb	r1, r3
 801256e:	68ba      	ldr	r2, [r7, #8]
 8012570:	7813      	ldrb	r3, [r2, #0]
 8012572:	f361 0303 	bfi	r3, r1, #0, #4
 8012576:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	781a      	ldrb	r2, [r3, #0]
 801257c:	4b2b      	ldr	r3, [pc, #172]	; (801262c <PrepareFrame+0x21c>)
 801257e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012582:	e04b      	b.n	801261c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012584:	4b29      	ldr	r3, [pc, #164]	; (801262c <PrepareFrame+0x21c>)
 8012586:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801258a:	2b00      	cmp	r3, #0
 801258c:	d010      	beq.n	80125b0 <PrepareFrame+0x1a0>
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2b0f      	cmp	r3, #15
 8012592:	d90d      	bls.n	80125b0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012594:	7ffb      	ldrb	r3, [r7, #31]
 8012596:	f107 0114 	add.w	r1, r7, #20
 801259a:	4a29      	ldr	r2, [pc, #164]	; (8012640 <PrepareFrame+0x230>)
 801259c:	4618      	mov	r0, r3
 801259e:	f002 fa53 	bl	8014a48 <LoRaMacCommandsSerializeCmds>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d001      	beq.n	80125ac <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125a8:	2313      	movs	r3, #19
 80125aa:	e03b      	b.n	8012624 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80125ac:	230a      	movs	r3, #10
 80125ae:	e039      	b.n	8012624 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80125b0:	7ffb      	ldrb	r3, [r7, #31]
 80125b2:	f107 0114 	add.w	r1, r7, #20
 80125b6:	4a22      	ldr	r2, [pc, #136]	; (8012640 <PrepareFrame+0x230>)
 80125b8:	4618      	mov	r0, r3
 80125ba:	f002 fa45 	bl	8014a48 <LoRaMacCommandsSerializeCmds>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125c4:	2313      	movs	r3, #19
 80125c6:	e02d      	b.n	8012624 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80125c8:	4b18      	ldr	r3, [pc, #96]	; (801262c <PrepareFrame+0x21c>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80125d0:	4b16      	ldr	r3, [pc, #88]	; (801262c <PrepareFrame+0x21c>)
 80125d2:	4a1b      	ldr	r2, [pc, #108]	; (8012640 <PrepareFrame+0x230>)
 80125d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	b2da      	uxtb	r2, r3
 80125dc:	4b13      	ldr	r3, [pc, #76]	; (801262c <PrepareFrame+0x21c>)
 80125de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80125e2:	e01b      	b.n	801261c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d01a      	beq.n	8012620 <PrepareFrame+0x210>
 80125ea:	4b10      	ldr	r3, [pc, #64]	; (801262c <PrepareFrame+0x21c>)
 80125ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d015      	beq.n	8012620 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80125f4:	4813      	ldr	r0, [pc, #76]	; (8012644 <PrepareFrame+0x234>)
 80125f6:	4b0d      	ldr	r3, [pc, #52]	; (801262c <PrepareFrame+0x21c>)
 80125f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	461a      	mov	r2, r3
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	f006 fa0c 	bl	8018a1e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012606:	4b09      	ldr	r3, [pc, #36]	; (801262c <PrepareFrame+0x21c>)
 8012608:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801260c:	b29b      	uxth	r3, r3
 801260e:	3301      	adds	r3, #1
 8012610:	b29a      	uxth	r2, r3
 8012612:	4b06      	ldr	r3, [pc, #24]	; (801262c <PrepareFrame+0x21c>)
 8012614:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012616:	e003      	b.n	8012620 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012618:	2302      	movs	r3, #2
 801261a:	e003      	b.n	8012624 <PrepareFrame+0x214>
            break;
 801261c:	bf00      	nop
 801261e:	e000      	b.n	8012622 <PrepareFrame+0x212>
            break;
 8012620:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	3720      	adds	r7, #32
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	20000944 	.word	0x20000944
 8012630:	20000a7c 	.word	0x20000a7c
 8012634:	20000946 	.word	0x20000946
 8012638:	20000e4c 	.word	0x20000e4c
 801263c:	20000a5c 	.word	0x20000a5c
 8012640:	20000dcc 	.word	0x20000dcc
 8012644:	20000947 	.word	0x20000947

08012648 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b08a      	sub	sp, #40	; 0x28
 801264c:	af00      	add	r7, sp, #0
 801264e:	4603      	mov	r3, r0
 8012650:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012652:	2303      	movs	r3, #3
 8012654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012658:	2300      	movs	r3, #0
 801265a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801265c:	79fb      	ldrb	r3, [r7, #7]
 801265e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012660:	4b48      	ldr	r3, [pc, #288]	; (8012784 <SendFrameOnChannel+0x13c>)
 8012662:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012666:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012668:	4b46      	ldr	r3, [pc, #280]	; (8012784 <SendFrameOnChannel+0x13c>)
 801266a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801266e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012670:	4b44      	ldr	r3, [pc, #272]	; (8012784 <SendFrameOnChannel+0x13c>)
 8012672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012676:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012678:	4b42      	ldr	r3, [pc, #264]	; (8012784 <SendFrameOnChannel+0x13c>)
 801267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801267e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012680:	4b41      	ldr	r3, [pc, #260]	; (8012788 <SendFrameOnChannel+0x140>)
 8012682:	881b      	ldrh	r3, [r3, #0]
 8012684:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012686:	4b3f      	ldr	r3, [pc, #252]	; (8012784 <SendFrameOnChannel+0x13c>)
 8012688:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801268c:	f107 020f 	add.w	r2, r7, #15
 8012690:	f107 0110 	add.w	r1, r7, #16
 8012694:	4b3d      	ldr	r3, [pc, #244]	; (801278c <SendFrameOnChannel+0x144>)
 8012696:	f003 ff4e 	bl	8016536 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801269a:	4b3b      	ldr	r3, [pc, #236]	; (8012788 <SendFrameOnChannel+0x140>)
 801269c:	2201      	movs	r2, #1
 801269e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80126a2:	4b38      	ldr	r3, [pc, #224]	; (8012784 <SendFrameOnChannel+0x13c>)
 80126a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	4b37      	ldr	r3, [pc, #220]	; (8012788 <SendFrameOnChannel+0x140>)
 80126ac:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 80126b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80126b4:	4b34      	ldr	r3, [pc, #208]	; (8012788 <SendFrameOnChannel+0x140>)
 80126b6:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	4a32      	ldr	r2, [pc, #200]	; (8012788 <SendFrameOnChannel+0x140>)
 80126be:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80126c2:	4b31      	ldr	r3, [pc, #196]	; (8012788 <SendFrameOnChannel+0x140>)
 80126c4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80126c8:	4a2f      	ldr	r2, [pc, #188]	; (8012788 <SendFrameOnChannel+0x140>)
 80126ca:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80126ce:	4b2e      	ldr	r3, [pc, #184]	; (8012788 <SendFrameOnChannel+0x140>)
 80126d0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80126d4:	4a2c      	ldr	r2, [pc, #176]	; (8012788 <SendFrameOnChannel+0x140>)
 80126d6:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80126da:	f001 ff07 	bl	80144ec <LoRaMacClassBIsBeaconModeActive>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d00b      	beq.n	80126fc <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80126e4:	4b28      	ldr	r3, [pc, #160]	; (8012788 <SendFrameOnChannel+0x140>)
 80126e6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80126ea:	4618      	mov	r0, r3
 80126ec:	f001 ff69 	bl	80145c2 <LoRaMacClassBIsUplinkCollision>
 80126f0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d001      	beq.n	80126fc <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80126f8:	2310      	movs	r3, #16
 80126fa:	e03e      	b.n	801277a <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80126fc:	4b21      	ldr	r3, [pc, #132]	; (8012784 <SendFrameOnChannel+0x13c>)
 80126fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012702:	2b01      	cmp	r3, #1
 8012704:	d101      	bne.n	801270a <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012706:	f001 ff66 	bl	80145d6 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801270a:	f001 ff00 	bl	801450e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801270e:	4b1d      	ldr	r3, [pc, #116]	; (8012784 <SendFrameOnChannel+0x13c>)
 8012710:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012714:	b2db      	uxtb	r3, r3
 8012716:	4a1c      	ldr	r2, [pc, #112]	; (8012788 <SendFrameOnChannel+0x140>)
 8012718:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 801271c:	4611      	mov	r1, r2
 801271e:	4618      	mov	r0, r3
 8012720:	f7ff fc42 	bl	8011fa8 <SecureFrame>
 8012724:	4603      	mov	r3, r0
 8012726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801272a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801272e:	2b00      	cmp	r3, #0
 8012730:	d002      	beq.n	8012738 <SendFrameOnChannel+0xf0>
    {
        return status;
 8012732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012736:	e020      	b.n	801277a <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012738:	4b13      	ldr	r3, [pc, #76]	; (8012788 <SendFrameOnChannel+0x140>)
 801273a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801273e:	f043 0302 	orr.w	r3, r3, #2
 8012742:	4a11      	ldr	r2, [pc, #68]	; (8012788 <SendFrameOnChannel+0x140>)
 8012744:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8012748:	4b0f      	ldr	r3, [pc, #60]	; (8012788 <SendFrameOnChannel+0x140>)
 801274a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801274e:	f083 0301 	eor.w	r3, r3, #1
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2b00      	cmp	r3, #0
 8012756:	d007      	beq.n	8012768 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012758:	4b0b      	ldr	r3, [pc, #44]	; (8012788 <SendFrameOnChannel+0x140>)
 801275a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 801275e:	3301      	adds	r3, #1
 8012760:	b2da      	uxtb	r2, r3
 8012762:	4b09      	ldr	r3, [pc, #36]	; (8012788 <SendFrameOnChannel+0x140>)
 8012764:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012768:	4b09      	ldr	r3, [pc, #36]	; (8012790 <SendFrameOnChannel+0x148>)
 801276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801276c:	4a06      	ldr	r2, [pc, #24]	; (8012788 <SendFrameOnChannel+0x140>)
 801276e:	8812      	ldrh	r2, [r2, #0]
 8012770:	b2d2      	uxtb	r2, r2
 8012772:	4611      	mov	r1, r2
 8012774:	4807      	ldr	r0, [pc, #28]	; (8012794 <SendFrameOnChannel+0x14c>)
 8012776:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	3728      	adds	r7, #40	; 0x28
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20000e4c 	.word	0x20000e4c
 8012788:	20000944 	.word	0x20000944
 801278c:	20000d58 	.word	0x20000d58
 8012790:	0801e604 	.word	0x0801e604
 8012794:	20000946 	.word	0x20000946

08012798 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80127a2:	4b16      	ldr	r3, [pc, #88]	; (80127fc <SetTxContinuousWave+0x64>)
 80127a4:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80127a8:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80127aa:	4b15      	ldr	r3, [pc, #84]	; (8012800 <SetTxContinuousWave+0x68>)
 80127ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80127b0:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80127b2:	4b13      	ldr	r3, [pc, #76]	; (8012800 <SetTxContinuousWave+0x68>)
 80127b4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80127b8:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80127ba:	4b11      	ldr	r3, [pc, #68]	; (8012800 <SetTxContinuousWave+0x68>)
 80127bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127c0:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80127c2:	4b0f      	ldr	r3, [pc, #60]	; (8012800 <SetTxContinuousWave+0x68>)
 80127c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127c8:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80127ca:	88fb      	ldrh	r3, [r7, #6]
 80127cc:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80127ce:	4b0c      	ldr	r3, [pc, #48]	; (8012800 <SetTxContinuousWave+0x68>)
 80127d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127d4:	f107 0208 	add.w	r2, r7, #8
 80127d8:	4611      	mov	r1, r2
 80127da:	4618      	mov	r0, r3
 80127dc:	f003 ff5a 	bl	8016694 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80127e0:	4b06      	ldr	r3, [pc, #24]	; (80127fc <SetTxContinuousWave+0x64>)
 80127e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80127e6:	f043 0302 	orr.w	r3, r3, #2
 80127ea:	4a04      	ldr	r2, [pc, #16]	; (80127fc <SetTxContinuousWave+0x64>)
 80127ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80127f0:	2300      	movs	r3, #0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3718      	adds	r7, #24
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	20000944 	.word	0x20000944
 8012800:	20000e4c 	.word	0x20000e4c

08012804 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	6039      	str	r1, [r7, #0]
 801280e:	80fb      	strh	r3, [r7, #6]
 8012810:	4613      	mov	r3, r2
 8012812:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012814:	4b09      	ldr	r3, [pc, #36]	; (801283c <SetTxContinuousWave1+0x38>)
 8012816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012818:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801281c:	88fa      	ldrh	r2, [r7, #6]
 801281e:	6838      	ldr	r0, [r7, #0]
 8012820:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012822:	4b07      	ldr	r3, [pc, #28]	; (8012840 <SetTxContinuousWave1+0x3c>)
 8012824:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012828:	f043 0302 	orr.w	r3, r3, #2
 801282c:	4a04      	ldr	r2, [pc, #16]	; (8012840 <SetTxContinuousWave1+0x3c>)
 801282e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012832:	2300      	movs	r3, #0
}
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	0801e604 	.word	0x0801e604
 8012840:	20000944 	.word	0x20000944

08012844 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012844:	b480      	push	{r7}
 8012846:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8012848:	2300      	movs	r3, #0
}
 801284a:	4618      	mov	r0, r3
 801284c:	46bd      	mov	sp, r7
 801284e:	bc80      	pop	{r7}
 8012850:	4770      	bx	lr

08012852 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012852:	b480      	push	{r7}
 8012854:	b083      	sub	sp, #12
 8012856:	af00      	add	r7, sp, #0
 8012858:	6078      	str	r0, [r7, #4]
 801285a:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d002      	beq.n	8012868 <DetermineFrameType+0x16>
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d101      	bne.n	801286c <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012868:	2303      	movs	r3, #3
 801286a:	e03b      	b.n	80128e4 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	7b1b      	ldrb	r3, [r3, #12]
 8012870:	f003 030f 	and.w	r3, r3, #15
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	d008      	beq.n	801288c <DetermineFrameType+0x3a>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d003      	beq.n	801288c <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2200      	movs	r2, #0
 8012888:	701a      	strb	r2, [r3, #0]
 801288a:	e02a      	b.n	80128e2 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012892:	2b00      	cmp	r3, #0
 8012894:	d103      	bne.n	801289e <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	2201      	movs	r2, #1
 801289a:	701a      	strb	r2, [r3, #0]
 801289c:	e021      	b.n	80128e2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	7b1b      	ldrb	r3, [r3, #12]
 80128a2:	f003 030f 	and.w	r3, r3, #15
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d108      	bne.n	80128be <DetermineFrameType+0x6c>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d103      	bne.n	80128be <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2202      	movs	r2, #2
 80128ba:	701a      	strb	r2, [r3, #0]
 80128bc:	e011      	b.n	80128e2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	7b1b      	ldrb	r3, [r3, #12]
 80128c2:	f003 030f 	and.w	r3, r3, #15
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d108      	bne.n	80128de <DetermineFrameType+0x8c>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d003      	beq.n	80128de <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2203      	movs	r2, #3
 80128da:	701a      	strb	r2, [r3, #0]
 80128dc:	e001      	b.n	80128e2 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80128de:	2318      	movs	r3, #24
 80128e0:	e000      	b.n	80128e4 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80128e2:	2300      	movs	r3, #0
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	370c      	adds	r7, #12
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bc80      	pop	{r7}
 80128ec:	4770      	bx	lr
	...

080128f0 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80128f0:	b480      	push	{r7}
 80128f2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80128f4:	4b12      	ldr	r3, [pc, #72]	; (8012940 <CheckRetransUnconfirmedUplink+0x50>)
 80128f6:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80128fa:	4b12      	ldr	r3, [pc, #72]	; (8012944 <CheckRetransUnconfirmedUplink+0x54>)
 80128fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8012900:	429a      	cmp	r2, r3
 8012902:	d301      	bcc.n	8012908 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8012904:	2301      	movs	r3, #1
 8012906:	e016      	b.n	8012936 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012908:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <CheckRetransUnconfirmedUplink+0x50>)
 801290a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801290e:	f003 0302 	and.w	r3, r3, #2
 8012912:	b2db      	uxtb	r3, r3
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00d      	beq.n	8012934 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012918:	4b0a      	ldr	r3, [pc, #40]	; (8012944 <CheckRetransUnconfirmedUplink+0x54>)
 801291a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801291e:	2b00      	cmp	r3, #0
 8012920:	d101      	bne.n	8012926 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8012922:	2301      	movs	r3, #1
 8012924:	e007      	b.n	8012936 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012926:	4b06      	ldr	r3, [pc, #24]	; (8012940 <CheckRetransUnconfirmedUplink+0x50>)
 8012928:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801292c:	2b00      	cmp	r3, #0
 801292e:	d101      	bne.n	8012934 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8012930:	2301      	movs	r3, #1
 8012932:	e000      	b.n	8012936 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8012934:	2300      	movs	r3, #0
}
 8012936:	4618      	mov	r0, r3
 8012938:	46bd      	mov	sp, r7
 801293a:	bc80      	pop	{r7}
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	20000944 	.word	0x20000944
 8012944:	20000e4c 	.word	0x20000e4c

08012948 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012948:	b480      	push	{r7}
 801294a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801294c:	4b0e      	ldr	r3, [pc, #56]	; (8012988 <CheckRetransConfirmedUplink+0x40>)
 801294e:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8012952:	4b0d      	ldr	r3, [pc, #52]	; (8012988 <CheckRetransConfirmedUplink+0x40>)
 8012954:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012958:	429a      	cmp	r2, r3
 801295a:	d301      	bcc.n	8012960 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801295c:	2301      	movs	r3, #1
 801295e:	e00f      	b.n	8012980 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012960:	4b09      	ldr	r3, [pc, #36]	; (8012988 <CheckRetransConfirmedUplink+0x40>)
 8012962:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012966:	f003 0302 	and.w	r3, r3, #2
 801296a:	b2db      	uxtb	r3, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	d006      	beq.n	801297e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012970:	4b05      	ldr	r3, [pc, #20]	; (8012988 <CheckRetransConfirmedUplink+0x40>)
 8012972:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801297a:	2301      	movs	r3, #1
 801297c:	e000      	b.n	8012980 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801297e:	2300      	movs	r3, #0
}
 8012980:	4618      	mov	r0, r3
 8012982:	46bd      	mov	sp, r7
 8012984:	bc80      	pop	{r7}
 8012986:	4770      	bx	lr
 8012988:	20000944 	.word	0x20000944

0801298c <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801298c:	b480      	push	{r7}
 801298e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012990:	4b1a      	ldr	r3, [pc, #104]	; (80129fc <StopRetransmission+0x70>)
 8012992:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012996:	f003 0302 	and.w	r3, r3, #2
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d009      	beq.n	80129b4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80129a0:	4b16      	ldr	r3, [pc, #88]	; (80129fc <StopRetransmission+0x70>)
 80129a2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00e      	beq.n	80129c8 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80129aa:	4b14      	ldr	r3, [pc, #80]	; (80129fc <StopRetransmission+0x70>)
 80129ac:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d009      	beq.n	80129c8 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80129b4:	4b12      	ldr	r3, [pc, #72]	; (8012a00 <StopRetransmission+0x74>)
 80129b6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d004      	beq.n	80129c8 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 80129be:	4b10      	ldr	r3, [pc, #64]	; (8012a00 <StopRetransmission+0x74>)
 80129c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c2:	3301      	adds	r3, #1
 80129c4:	4a0e      	ldr	r2, [pc, #56]	; (8012a00 <StopRetransmission+0x74>)
 80129c6:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80129c8:	4b0c      	ldr	r3, [pc, #48]	; (80129fc <StopRetransmission+0x70>)
 80129ca:	2200      	movs	r2, #0
 80129cc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 80129d0:	4b0a      	ldr	r3, [pc, #40]	; (80129fc <StopRetransmission+0x70>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 80129d8:	4b08      	ldr	r3, [pc, #32]	; (80129fc <StopRetransmission+0x70>)
 80129da:	2200      	movs	r2, #0
 80129dc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80129e0:	4b06      	ldr	r3, [pc, #24]	; (80129fc <StopRetransmission+0x70>)
 80129e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80129e6:	f023 0302 	bic.w	r3, r3, #2
 80129ea:	4a04      	ldr	r2, [pc, #16]	; (80129fc <StopRetransmission+0x70>)
 80129ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80129f0:	2301      	movs	r3, #1
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bc80      	pop	{r7}
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	20000944 	.word	0x20000944
 8012a00:	20000e4c 	.word	0x20000e4c

08012a04 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012a08:	4b08      	ldr	r3, [pc, #32]	; (8012a2c <OnMacProcessNotify+0x28>)
 8012a0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d00a      	beq.n	8012a28 <OnMacProcessNotify+0x24>
 8012a12:	4b06      	ldr	r3, [pc, #24]	; (8012a2c <OnMacProcessNotify+0x28>)
 8012a14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a18:	695b      	ldr	r3, [r3, #20]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d004      	beq.n	8012a28 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012a1e:	4b03      	ldr	r3, [pc, #12]	; (8012a2c <OnMacProcessNotify+0x28>)
 8012a20:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a24:	695b      	ldr	r3, [r3, #20]
 8012a26:	4798      	blx	r3
    }
}
 8012a28:	bf00      	nop
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	20000944 	.word	0x20000944

08012a30 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012a3a:	4b0b      	ldr	r3, [pc, #44]	; (8012a68 <CallNvmDataChangeCallback+0x38>)
 8012a3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00c      	beq.n	8012a5e <CallNvmDataChangeCallback+0x2e>
 8012a44:	4b08      	ldr	r3, [pc, #32]	; (8012a68 <CallNvmDataChangeCallback+0x38>)
 8012a46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a4a:	691b      	ldr	r3, [r3, #16]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d006      	beq.n	8012a5e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012a50:	4b05      	ldr	r3, [pc, #20]	; (8012a68 <CallNvmDataChangeCallback+0x38>)
 8012a52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	88fa      	ldrh	r2, [r7, #6]
 8012a5a:	4610      	mov	r0, r2
 8012a5c:	4798      	blx	r3
    }
}
 8012a5e:	bf00      	nop
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	20000944 	.word	0x20000944

08012a6c <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012a72:	4b1b      	ldr	r3, [pc, #108]	; (8012ae0 <AckTimeoutRetriesProcess+0x74>)
 8012a74:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012a78:	4b19      	ldr	r3, [pc, #100]	; (8012ae0 <AckTimeoutRetriesProcess+0x74>)
 8012a7a:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d229      	bcs.n	8012ad6 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012a82:	4b17      	ldr	r3, [pc, #92]	; (8012ae0 <AckTimeoutRetriesProcess+0x74>)
 8012a84:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012a88:	3301      	adds	r3, #1
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	4b14      	ldr	r3, [pc, #80]	; (8012ae0 <AckTimeoutRetriesProcess+0x74>)
 8012a8e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012a92:	4b13      	ldr	r3, [pc, #76]	; (8012ae0 <AckTimeoutRetriesProcess+0x74>)
 8012a94:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012a98:	f003 0301 	and.w	r3, r3, #1
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d019      	beq.n	8012ad6 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012aa2:	2322      	movs	r3, #34	; 0x22
 8012aa4:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012aa6:	4b0f      	ldr	r3, [pc, #60]	; (8012ae4 <AckTimeoutRetriesProcess+0x78>)
 8012aa8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012aac:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012aae:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <AckTimeoutRetriesProcess+0x78>)
 8012ab0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012ab4:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ab6:	4b0b      	ldr	r3, [pc, #44]	; (8012ae4 <AckTimeoutRetriesProcess+0x78>)
 8012ab8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012abc:	f107 0208 	add.w	r2, r7, #8
 8012ac0:	4611      	mov	r1, r2
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f003 fc91 	bl	80163ea <RegionGetPhyParam>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	b25a      	sxtb	r2, r3
 8012ad0:	4b04      	ldr	r3, [pc, #16]	; (8012ae4 <AckTimeoutRetriesProcess+0x78>)
 8012ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8012ad6:	bf00      	nop
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	20000944 	.word	0x20000944
 8012ae4:	20000e4c 	.word	0x20000e4c

08012ae8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012aee:	4b14      	ldr	r3, [pc, #80]	; (8012b40 <AckTimeoutRetriesFinalize+0x58>)
 8012af0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8012af4:	f083 0301 	eor.w	r3, r3, #1
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d015      	beq.n	8012b2a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012afe:	2302      	movs	r3, #2
 8012b00:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8012b02:	4b10      	ldr	r3, [pc, #64]	; (8012b44 <AckTimeoutRetriesFinalize+0x5c>)
 8012b04:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8012b06:	4b10      	ldr	r3, [pc, #64]	; (8012b48 <AckTimeoutRetriesFinalize+0x60>)
 8012b08:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012b0a:	4b10      	ldr	r3, [pc, #64]	; (8012b4c <AckTimeoutRetriesFinalize+0x64>)
 8012b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b10:	1d3a      	adds	r2, r7, #4
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f003 fc91 	bl	801643c <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012b1a:	4b09      	ldr	r3, [pc, #36]	; (8012b40 <AckTimeoutRetriesFinalize+0x58>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8012b22:	4b07      	ldr	r3, [pc, #28]	; (8012b40 <AckTimeoutRetriesFinalize+0x58>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012b2a:	4b05      	ldr	r3, [pc, #20]	; (8012b40 <AckTimeoutRetriesFinalize+0x58>)
 8012b2c:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012b30:	4b03      	ldr	r3, [pc, #12]	; (8012b40 <AckTimeoutRetriesFinalize+0x58>)
 8012b32:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8012b36:	bf00      	nop
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	20000944 	.word	0x20000944
 8012b44:	2000106c 	.word	0x2000106c
 8012b48:	20001100 	.word	0x20001100
 8012b4c:	20000e4c 	.word	0x20000e4c

08012b50 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012b50:	b480      	push	{r7}
 8012b52:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b54:	4b0b      	ldr	r3, [pc, #44]	; (8012b84 <IsRequestPending+0x34>)
 8012b56:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012b5a:	f003 0304 	and.w	r3, r3, #4
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d107      	bne.n	8012b74 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012b64:	4b07      	ldr	r3, [pc, #28]	; (8012b84 <IsRequestPending+0x34>)
 8012b66:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012b6a:	f003 0301 	and.w	r3, r3, #1
 8012b6e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d001      	beq.n	8012b78 <IsRequestPending+0x28>
    {
        return 1;
 8012b74:	2301      	movs	r3, #1
 8012b76:	e000      	b.n	8012b7a <IsRequestPending+0x2a>
    }
    return 0;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bc80      	pop	{r7}
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	20000944 	.word	0x20000944

08012b88 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012b88:	b590      	push	{r4, r7, lr}
 8012b8a:	b08f      	sub	sp, #60	; 0x3c
 8012b8c:	af02      	add	r7, sp, #8
 8012b8e:	6178      	str	r0, [r7, #20]
 8012b90:	6139      	str	r1, [r7, #16]
 8012b92:	4613      	mov	r3, r2
 8012b94:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d002      	beq.n	8012ba2 <LoRaMacInitialization+0x1a>
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d101      	bne.n	8012ba6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ba2:	2303      	movs	r3, #3
 8012ba4:	e273      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d007      	beq.n	8012bc6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d003      	beq.n	8012bc6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d101      	bne.n	8012bca <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012bc6:	2303      	movs	r3, #3
 8012bc8:	e261      	b.n	801308e <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012bca:	7bfb      	ldrb	r3, [r7, #15]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f003 fbfc 	bl	80163ca <RegionIsActive>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	f083 0301 	eor.w	r3, r3, #1
 8012bd8:	b2db      	uxtb	r3, r3
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d001      	beq.n	8012be2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012bde:	2309      	movs	r3, #9
 8012be0:	e255      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012be2:	6978      	ldr	r0, [r7, #20]
 8012be4:	f002 f852 	bl	8014c8c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012be8:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8012bec:	2100      	movs	r1, #0
 8012bee:	48c7      	ldr	r0, [pc, #796]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012bf0:	f005 ff50 	bl	8018a94 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012bf4:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	48c5      	ldr	r0, [pc, #788]	; (8012f10 <LoRaMacInitialization+0x388>)
 8012bfc:	f005 ff4a 	bl	8018a94 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012c00:	4bc3      	ldr	r3, [pc, #780]	; (8012f10 <LoRaMacInitialization+0x388>)
 8012c02:	2201      	movs	r2, #1
 8012c04:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8012c08:	4bc1      	ldr	r3, [pc, #772]	; (8012f10 <LoRaMacInitialization+0x388>)
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012c10:	4abe      	ldr	r2, [pc, #760]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c12:	7bfb      	ldrb	r3, [r7, #15]
 8012c14:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012c18:	4bbc      	ldr	r3, [pc, #752]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012c20:	4bba      	ldr	r3, [pc, #744]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012c28:	4bb8      	ldr	r3, [pc, #736]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c2a:	4aba      	ldr	r2, [pc, #744]	; (8012f14 <LoRaMacInitialization+0x38c>)
 8012c2c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012c30:	230f      	movs	r3, #15
 8012c32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c36:	4bb5      	ldr	r3, [pc, #724]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f003 fbd1 	bl	80163ea <RegionGetPhyParam>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	bf14      	ite	ne
 8012c52:	2301      	movne	r3, #1
 8012c54:	2300      	moveq	r3, #0
 8012c56:	b2da      	uxtb	r2, r3
 8012c58:	4bac      	ldr	r3, [pc, #688]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c5a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012c5e:	230a      	movs	r3, #10
 8012c60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c64:	4ba9      	ldr	r3, [pc, #676]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c6e:	4611      	mov	r1, r2
 8012c70:	4618      	mov	r0, r3
 8012c72:	f003 fbba 	bl	80163ea <RegionGetPhyParam>
 8012c76:	4603      	mov	r3, r0
 8012c78:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7c:	b25a      	sxtb	r2, r3
 8012c7e:	4ba3      	ldr	r3, [pc, #652]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c80:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012c84:	2306      	movs	r3, #6
 8012c86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c8a:	4ba0      	ldr	r3, [pc, #640]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012c8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c94:	4611      	mov	r1, r2
 8012c96:	4618      	mov	r0, r3
 8012c98:	f003 fba7 	bl	80163ea <RegionGetPhyParam>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	b25a      	sxtb	r2, r3
 8012ca4:	4b99      	ldr	r3, [pc, #612]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ca6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012caa:	2310      	movs	r3, #16
 8012cac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cb0:	4b96      	ldr	r3, [pc, #600]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012cb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012cba:	4611      	mov	r1, r2
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f003 fb94 	bl	80163ea <RegionGetPhyParam>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc8:	4a90      	ldr	r2, [pc, #576]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012cca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012cce:	2311      	movs	r3, #17
 8012cd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cd4:	4b8d      	ldr	r3, [pc, #564]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012cd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012cde:	4611      	mov	r1, r2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f003 fb82 	bl	80163ea <RegionGetPhyParam>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cec:	4a87      	ldr	r2, [pc, #540]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012cee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012cf2:	2312      	movs	r3, #18
 8012cf4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cf8:	4b84      	ldr	r3, [pc, #528]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012cfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d02:	4611      	mov	r1, r2
 8012d04:	4618      	mov	r0, r3
 8012d06:	f003 fb70 	bl	80163ea <RegionGetPhyParam>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d10:	4a7e      	ldr	r2, [pc, #504]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d12:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012d16:	2313      	movs	r3, #19
 8012d18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d1c:	4b7b      	ldr	r3, [pc, #492]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d26:	4611      	mov	r1, r2
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f003 fb5e 	bl	80163ea <RegionGetPhyParam>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d34:	4a75      	ldr	r2, [pc, #468]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d36:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012d3a:	2314      	movs	r3, #20
 8012d3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d40:	4b72      	ldr	r3, [pc, #456]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d4a:	4611      	mov	r1, r2
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f003 fb4c 	bl	80163ea <RegionGetPhyParam>
 8012d52:	4603      	mov	r3, r0
 8012d54:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d58:	4a6c      	ldr	r2, [pc, #432]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012d5e:	2317      	movs	r3, #23
 8012d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d64:	4b69      	ldr	r3, [pc, #420]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d6e:	4611      	mov	r1, r2
 8012d70:	4618      	mov	r0, r3
 8012d72:	f003 fb3a 	bl	80163ea <RegionGetPhyParam>
 8012d76:	4603      	mov	r3, r0
 8012d78:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	b2da      	uxtb	r2, r3
 8012d7e:	4b63      	ldr	r3, [pc, #396]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d80:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012d84:	2318      	movs	r3, #24
 8012d86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d8a:	4b60      	ldr	r3, [pc, #384]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012d8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f003 fb27 	bl	80163ea <RegionGetPhyParam>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da2:	4a5a      	ldr	r2, [pc, #360]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012da4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	4a58      	ldr	r2, [pc, #352]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012dac:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012db0:	2319      	movs	r3, #25
 8012db2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012db6:	4b55      	ldr	r3, [pc, #340]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012db8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f003 fb11 	bl	80163ea <RegionGetPhyParam>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	4b4e      	ldr	r3, [pc, #312]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012dd2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd8:	b2da      	uxtb	r2, r3
 8012dda:	4b4c      	ldr	r3, [pc, #304]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ddc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012de0:	231e      	movs	r3, #30
 8012de2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012de6:	4b49      	ldr	r3, [pc, #292]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012de8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012df0:	4611      	mov	r1, r2
 8012df2:	4618      	mov	r0, r3
 8012df4:	f003 faf9 	bl	80163ea <RegionGetPhyParam>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	4b42      	ldr	r3, [pc, #264]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e02:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012e06:	231f      	movs	r3, #31
 8012e08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e0c:	4b3f      	ldr	r3, [pc, #252]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f003 fae6 	bl	80163ea <RegionGetPhyParam>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	b2da      	uxtb	r2, r3
 8012e26:	4b39      	ldr	r3, [pc, #228]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e28:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012e2c:	2320      	movs	r3, #32
 8012e2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e32:	4b36      	ldr	r3, [pc, #216]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e3c:	4611      	mov	r1, r2
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f003 fad3 	bl	80163ea <RegionGetPhyParam>
 8012e44:	4603      	mov	r3, r0
 8012e46:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4a:	4a30      	ldr	r2, [pc, #192]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e4c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012e50:	2321      	movs	r3, #33	; 0x21
 8012e52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e56:	4b2d      	ldr	r3, [pc, #180]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f003 fac1 	bl	80163ea <RegionGetPhyParam>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6e:	4a27      	ldr	r2, [pc, #156]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e70:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012e74:	230b      	movs	r3, #11
 8012e76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e7a:	4b24      	ldr	r3, [pc, #144]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f003 faaf 	bl	80163ea <RegionGetPhyParam>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	4b1d      	ldr	r3, [pc, #116]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012e96:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012e9a:	230c      	movs	r3, #12
 8012e9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ea0:	4b1a      	ldr	r3, [pc, #104]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ea2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012eaa:	4611      	mov	r1, r2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f003 fa9c 	bl	80163ea <RegionGetPhyParam>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	4b14      	ldr	r3, [pc, #80]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ebc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012ec0:	4b12      	ldr	r3, [pc, #72]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012ec8:	4b10      	ldr	r3, [pc, #64]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012eca:	220a      	movs	r2, #10
 8012ecc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012ed0:	4b0e      	ldr	r3, [pc, #56]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ed2:	2206      	movs	r2, #6
 8012ed4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012ed8:	4b0c      	ldr	r3, [pc, #48]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ede:	4a0b      	ldr	r2, [pc, #44]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012ee2:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ee4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012ee8:	4b08      	ldr	r3, [pc, #32]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012eee:	4b07      	ldr	r3, [pc, #28]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012ef4:	4a05      	ldr	r2, [pc, #20]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012ef6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012ef8:	4b04      	ldr	r3, [pc, #16]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012efe:	4a03      	ldr	r2, [pc, #12]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012f00:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012f02:	4b02      	ldr	r3, [pc, #8]	; (8012f0c <LoRaMacInitialization+0x384>)
 8012f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f08:	e006      	b.n	8012f18 <LoRaMacInitialization+0x390>
 8012f0a:	bf00      	nop
 8012f0c:	20000e4c 	.word	0x20000e4c
 8012f10:	20000944 	.word	0x20000944
 8012f14:	01000300 	.word	0x01000300
 8012f18:	4a5f      	ldr	r2, [pc, #380]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f1a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012f1c:	4b5e      	ldr	r3, [pc, #376]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012f22:	4a5d      	ldr	r2, [pc, #372]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f24:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012f26:	4b5c      	ldr	r3, [pc, #368]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f2c:	4a5a      	ldr	r2, [pc, #360]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f2e:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012f30:	4b59      	ldr	r3, [pc, #356]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f32:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8012f36:	4b58      	ldr	r3, [pc, #352]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012f42:	4b56      	ldr	r3, [pc, #344]	; (801309c <LoRaMacInitialization+0x514>)
 8012f44:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012f46:	4b56      	ldr	r3, [pc, #344]	; (80130a0 <LoRaMacInitialization+0x518>)
 8012f48:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012f4a:	4b53      	ldr	r3, [pc, #332]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f50:	f107 0218 	add.w	r2, r7, #24
 8012f54:	4611      	mov	r1, r2
 8012f56:	4618      	mov	r0, r3
 8012f58:	f003 fa70 	bl	801643c <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012f5c:	4a51      	ldr	r2, [pc, #324]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8012f64:	2000      	movs	r0, #0
 8012f66:	f7ff f8b5 	bl	80120d4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012f6a:	4b4b      	ldr	r3, [pc, #300]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8012f72:	4a4c      	ldr	r2, [pc, #304]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012f7a:	4b4a      	ldr	r3, [pc, #296]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8012f82:	4b48      	ldr	r3, [pc, #288]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8012f84:	2201      	movs	r2, #1
 8012f86:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012f8a:	4b43      	ldr	r3, [pc, #268]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012f90:	4b41      	ldr	r3, [pc, #260]	; (8013098 <LoRaMacInitialization+0x510>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012f96:	2300      	movs	r3, #0
 8012f98:	9300      	str	r3, [sp, #0]
 8012f9a:	4b43      	ldr	r3, [pc, #268]	; (80130a8 <LoRaMacInitialization+0x520>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8012fa2:	4842      	ldr	r0, [pc, #264]	; (80130ac <LoRaMacInitialization+0x524>)
 8012fa4:	f009 fe32 	bl	801cc0c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012fa8:	2300      	movs	r3, #0
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	4b40      	ldr	r3, [pc, #256]	; (80130b0 <LoRaMacInitialization+0x528>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8012fb4:	483f      	ldr	r0, [pc, #252]	; (80130b4 <LoRaMacInitialization+0x52c>)
 8012fb6:	f009 fe29 	bl	801cc0c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012fba:	2300      	movs	r3, #0
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	4b3e      	ldr	r3, [pc, #248]	; (80130b8 <LoRaMacInitialization+0x530>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8012fc6:	483d      	ldr	r0, [pc, #244]	; (80130bc <LoRaMacInitialization+0x534>)
 8012fc8:	f009 fe20 	bl	801cc0c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012fcc:	2300      	movs	r3, #0
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	4b3b      	ldr	r3, [pc, #236]	; (80130c0 <LoRaMacInitialization+0x538>)
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8012fd8:	483a      	ldr	r0, [pc, #232]	; (80130c4 <LoRaMacInitialization+0x53c>)
 8012fda:	f009 fe17 	bl	801cc0c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012fde:	4c2e      	ldr	r4, [pc, #184]	; (8013098 <LoRaMacInitialization+0x510>)
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f009 f986 	bl	801c2f4 <SysTimeGetMcuTime>
 8012fe8:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8012fec:	463a      	mov	r2, r7
 8012fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ff2:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012ff6:	4b2b      	ldr	r3, [pc, #172]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8012ff8:	4a33      	ldr	r2, [pc, #204]	; (80130c8 <LoRaMacInitialization+0x540>)
 8012ffa:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012ffe:	4b29      	ldr	r3, [pc, #164]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8013000:	4a32      	ldr	r2, [pc, #200]	; (80130cc <LoRaMacInitialization+0x544>)
 8013002:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013006:	4b27      	ldr	r3, [pc, #156]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8013008:	4a31      	ldr	r2, [pc, #196]	; (80130d0 <LoRaMacInitialization+0x548>)
 801300a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801300e:	4b25      	ldr	r3, [pc, #148]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8013010:	4a30      	ldr	r2, [pc, #192]	; (80130d4 <LoRaMacInitialization+0x54c>)
 8013012:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013016:	4b23      	ldr	r3, [pc, #140]	; (80130a4 <LoRaMacInitialization+0x51c>)
 8013018:	4a2f      	ldr	r2, [pc, #188]	; (80130d8 <LoRaMacInitialization+0x550>)
 801301a:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801301e:	4b2f      	ldr	r3, [pc, #188]	; (80130dc <LoRaMacInitialization+0x554>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	482f      	ldr	r0, [pc, #188]	; (80130e0 <LoRaMacInitialization+0x558>)
 8013024:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8013026:	482f      	ldr	r0, [pc, #188]	; (80130e4 <LoRaMacInitialization+0x55c>)
 8013028:	f7fa fe10 	bl	800dc4c <SecureElementInit>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013032:	2311      	movs	r3, #17
 8013034:	e02b      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013036:	4818      	ldr	r0, [pc, #96]	; (8013098 <LoRaMacInitialization+0x510>)
 8013038:	f002 fae8 	bl	801560c <LoRaMacCryptoInit>
 801303c:	4603      	mov	r3, r0
 801303e:	2b00      	cmp	r3, #0
 8013040:	d001      	beq.n	8013046 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013042:	2311      	movs	r3, #17
 8013044:	e023      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013046:	f001 fbe3 	bl	8014810 <LoRaMacCommandsInit>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d001      	beq.n	8013054 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013050:	2313      	movs	r3, #19
 8013052:	e01c      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013054:	4824      	ldr	r0, [pc, #144]	; (80130e8 <LoRaMacInitialization+0x560>)
 8013056:	f002 fba3 	bl	80157a0 <LoRaMacCryptoSetMulticastReference>
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d001      	beq.n	8013064 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013060:	2311      	movs	r3, #17
 8013062:	e014      	b.n	801308e <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013064:	4b1d      	ldr	r3, [pc, #116]	; (80130dc <LoRaMacInitialization+0x554>)
 8013066:	695b      	ldr	r3, [r3, #20]
 8013068:	4798      	blx	r3
 801306a:	4603      	mov	r3, r0
 801306c:	4618      	mov	r0, r3
 801306e:	f005 fcb1 	bl	80189d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013072:	4b1a      	ldr	r3, [pc, #104]	; (80130dc <LoRaMacInitialization+0x554>)
 8013074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013076:	4a08      	ldr	r2, [pc, #32]	; (8013098 <LoRaMacInitialization+0x510>)
 8013078:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801307c:	4610      	mov	r0, r2
 801307e:	4798      	blx	r3
    Radio.Sleep( );
 8013080:	4b16      	ldr	r3, [pc, #88]	; (80130dc <LoRaMacInitialization+0x554>)
 8013082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013084:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013086:	2001      	movs	r0, #1
 8013088:	f7fd fb40 	bl	801070c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801308c:	2300      	movs	r3, #0
}
 801308e:	4618      	mov	r0, r3
 8013090:	3734      	adds	r7, #52	; 0x34
 8013092:	46bd      	mov	sp, r7
 8013094:	bd90      	pop	{r4, r7, pc}
 8013096:	bf00      	nop
 8013098:	20000e4c 	.word	0x20000e4c
 801309c:	2000106c 	.word	0x2000106c
 80130a0:	20001100 	.word	0x20001100
 80130a4:	20000944 	.word	0x20000944
 80130a8:	08010c4d 	.word	0x08010c4d
 80130ac:	20000cac 	.word	0x20000cac
 80130b0:	08010cc1 	.word	0x08010cc1
 80130b4:	20000cc4 	.word	0x20000cc4
 80130b8:	08010d2d 	.word	0x08010d2d
 80130bc:	20000cdc 	.word	0x20000cdc
 80130c0:	08010da1 	.word	0x08010da1
 80130c4:	20000d38 	.word	0x20000d38
 80130c8:	0800f80d 	.word	0x0800f80d
 80130cc:	0800f869 	.word	0x0800f869
 80130d0:	0800f901 	.word	0x0800f901
 80130d4:	0800f8d5 	.word	0x0800f8d5
 80130d8:	0800f91d 	.word	0x0800f91d
 80130dc:	0801e604 	.word	0x0801e604
 80130e0:	20000c90 	.word	0x20000c90
 80130e4:	20000f94 	.word	0x20000f94
 80130e8:	20000f34 	.word	0x20000f34

080130ec <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80130f0:	4b04      	ldr	r3, [pc, #16]	; (8013104 <LoRaMacStart+0x18>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80130f8:	f7fc fc26 	bl	800f948 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80130fc:	2300      	movs	r3, #0
}
 80130fe:	4618      	mov	r0, r3
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	20000944 	.word	0x20000944

08013108 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801310c:	f7fd fad2 	bl	80106b4 <LoRaMacIsBusy>
 8013110:	4603      	mov	r3, r0
 8013112:	f083 0301 	eor.w	r3, r3, #1
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b00      	cmp	r3, #0
 801311a:	d00d      	beq.n	8013138 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801311c:	4b0b      	ldr	r3, [pc, #44]	; (801314c <LoRaMacStop+0x44>)
 801311e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013122:	2b02      	cmp	r3, #2
 8013124:	d102      	bne.n	801312c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013126:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <LoRaMacStop+0x48>)
 8013128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801312a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801312c:	4b09      	ldr	r3, [pc, #36]	; (8013154 <LoRaMacStop+0x4c>)
 801312e:	2201      	movs	r2, #1
 8013130:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013134:	2300      	movs	r3, #0
 8013136:	e007      	b.n	8013148 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013138:	4b06      	ldr	r3, [pc, #24]	; (8013154 <LoRaMacStop+0x4c>)
 801313a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801313e:	2b01      	cmp	r3, #1
 8013140:	d101      	bne.n	8013146 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8013142:	2300      	movs	r3, #0
 8013144:	e000      	b.n	8013148 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8013146:	2301      	movs	r3, #1
}
 8013148:	4618      	mov	r0, r3
 801314a:	bd80      	pop	{r7, pc}
 801314c:	20000e4c 	.word	0x20000e4c
 8013150:	0801e604 	.word	0x0801e604
 8013154:	20000944 	.word	0x20000944

08013158 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013158:	b580      	push	{r7, lr}
 801315a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801315c:	480d      	ldr	r0, [pc, #52]	; (8013194 <LoRaMacHalt+0x3c>)
 801315e:	f009 fdf9 	bl	801cd54 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8013162:	480d      	ldr	r0, [pc, #52]	; (8013198 <LoRaMacHalt+0x40>)
 8013164:	f009 fdf6 	bl	801cd54 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013168:	480c      	ldr	r0, [pc, #48]	; (801319c <LoRaMacHalt+0x44>)
 801316a:	f009 fdf3 	bl	801cd54 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801316e:	480c      	ldr	r0, [pc, #48]	; (80131a0 <LoRaMacHalt+0x48>)
 8013170:	f009 fdf0 	bl	801cd54 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8013174:	f001 f9cb 	bl	801450e <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013178:	4b0a      	ldr	r3, [pc, #40]	; (80131a4 <LoRaMacHalt+0x4c>)
 801317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801317c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801317e:	4b0a      	ldr	r3, [pc, #40]	; (80131a8 <LoRaMacHalt+0x50>)
 8013180:	2200      	movs	r2, #0
 8013182:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013186:	4b08      	ldr	r3, [pc, #32]	; (80131a8 <LoRaMacHalt+0x50>)
 8013188:	2201      	movs	r2, #1
 801318a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801318e:	2300      	movs	r3, #0
}
 8013190:	4618      	mov	r0, r3
 8013192:	bd80      	pop	{r7, pc}
 8013194:	20000cac 	.word	0x20000cac
 8013198:	20000cc4 	.word	0x20000cc4
 801319c:	20000cdc 	.word	0x20000cdc
 80131a0:	20000d38 	.word	0x20000d38
 80131a4:	0801e604 	.word	0x0801e604
 80131a8:	20000944 	.word	0x20000944

080131ac <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b08a      	sub	sp, #40	; 0x28
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	6039      	str	r1, [r7, #0]
 80131b6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80131b8:	4b3e      	ldr	r3, [pc, #248]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131bc:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80131be:	4b3d      	ldr	r3, [pc, #244]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131c0:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80131c4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80131c6:	4b3b      	ldr	r3, [pc, #236]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131c8:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80131cc:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d101      	bne.n	80131dc <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80131d8:	2303      	movs	r3, #3
 80131da:	e066      	b.n	80132aa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80131dc:	4b35      	ldr	r3, [pc, #212]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131de:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80131e2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80131e4:	2300      	movs	r3, #0
 80131e6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80131e8:	4b32      	ldr	r3, [pc, #200]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131ea:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80131ee:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80131f0:	4b30      	ldr	r3, [pc, #192]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131f4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80131f6:	4b2f      	ldr	r3, [pc, #188]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 80131f8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80131fc:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80131fe:	4b2d      	ldr	r3, [pc, #180]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 8013200:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8013204:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013206:	4b2b      	ldr	r3, [pc, #172]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 8013208:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801320c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013210:	4b28      	ldr	r3, [pc, #160]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 8013212:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801321a:	4b26      	ldr	r3, [pc, #152]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 801321c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8013224:	4b23      	ldr	r3, [pc, #140]	; (80132b4 <LoRaMacQueryTxPossible+0x108>)
 8013226:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801322a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801322e:	f107 0310 	add.w	r3, r7, #16
 8013232:	f107 020e 	add.w	r2, r7, #14
 8013236:	f107 010f 	add.w	r1, r7, #15
 801323a:	f107 0014 	add.w	r0, r7, #20
 801323e:	f001 f8d1 	bl	80143e4 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013246:	4618      	mov	r0, r3
 8013248:	f7fd fefc 	bl	8011044 <GetMaxAppPayloadWithoutFOptsLength>
 801324c:	4603      	mov	r3, r0
 801324e:	461a      	mov	r2, r3
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013254:	f107 0308 	add.w	r3, r7, #8
 8013258:	4618      	mov	r0, r3
 801325a:	f001 fbdf 	bl	8014a1c <LoRaMacCommandsGetSizeSerializedCmds>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d001      	beq.n	8013268 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013264:	2313      	movs	r3, #19
 8013266:	e020      	b.n	80132aa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	2b0f      	cmp	r3, #15
 801326c:	d819      	bhi.n	80132a2 <LoRaMacQueryTxPossible+0xf6>
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	785b      	ldrb	r3, [r3, #1]
 8013272:	461a      	mov	r2, r3
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	429a      	cmp	r2, r3
 8013278:	d313      	bcc.n	80132a2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	785a      	ldrb	r2, [r3, #1]
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	b2db      	uxtb	r3, r3
 8013282:	1ad3      	subs	r3, r2, r3
 8013284:	b2da      	uxtb	r2, r3
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	785b      	ldrb	r3, [r3, #1]
 801328e:	4619      	mov	r1, r3
 8013290:	79fa      	ldrb	r2, [r7, #7]
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	4413      	add	r3, r2
 8013296:	4299      	cmp	r1, r3
 8013298:	d301      	bcc.n	801329e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	e005      	b.n	80132aa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801329e:	2308      	movs	r3, #8
 80132a0:	e003      	b.n	80132aa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2200      	movs	r2, #0
 80132a6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80132a8:	2308      	movs	r3, #8
    }
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3728      	adds	r7, #40	; 0x28
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	20000e4c 	.word	0x20000e4c

080132b8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80132b8:	b590      	push	{r4, r7, lr}
 80132ba:	b087      	sub	sp, #28
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d101      	bne.n	80132ce <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80132ca:	2303      	movs	r3, #3
 80132cc:	e1a4      	b.n	8013618 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	2b3f      	cmp	r3, #63	; 0x3f
 80132d4:	f200 8199 	bhi.w	801360a <LoRaMacMibGetRequestConfirm+0x352>
 80132d8:	a201      	add	r2, pc, #4	; (adr r2, 80132e0 <LoRaMacMibGetRequestConfirm+0x28>)
 80132da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132de:	bf00      	nop
 80132e0:	080133e1 	.word	0x080133e1
 80132e4:	080133ed 	.word	0x080133ed
 80132e8:	080133f9 	.word	0x080133f9
 80132ec:	08013405 	.word	0x08013405
 80132f0:	08013411 	.word	0x08013411
 80132f4:	0801341d 	.word	0x0801341d
 80132f8:	08013429 	.word	0x08013429
 80132fc:	0801360b 	.word	0x0801360b
 8013300:	0801360b 	.word	0x0801360b
 8013304:	0801360b 	.word	0x0801360b
 8013308:	0801360b 	.word	0x0801360b
 801330c:	0801360b 	.word	0x0801360b
 8013310:	0801360b 	.word	0x0801360b
 8013314:	0801360b 	.word	0x0801360b
 8013318:	0801360b 	.word	0x0801360b
 801331c:	0801343d 	.word	0x0801343d
 8013320:	08013449 	.word	0x08013449
 8013324:	08013455 	.word	0x08013455
 8013328:	08013477 	.word	0x08013477
 801332c:	08013489 	.word	0x08013489
 8013330:	0801349b 	.word	0x0801349b
 8013334:	080134ad 	.word	0x080134ad
 8013338:	080134e1 	.word	0x080134e1
 801333c:	080134bf 	.word	0x080134bf
 8013340:	08013503 	.word	0x08013503
 8013344:	0801350f 	.word	0x0801350f
 8013348:	08013519 	.word	0x08013519
 801334c:	08013523 	.word	0x08013523
 8013350:	0801352d 	.word	0x0801352d
 8013354:	08013537 	.word	0x08013537
 8013358:	08013541 	.word	0x08013541
 801335c:	0801354d 	.word	0x0801354d
 8013360:	08013565 	.word	0x08013565
 8013364:	08013559 	.word	0x08013559
 8013368:	08013571 	.word	0x08013571
 801336c:	0801357b 	.word	0x0801357b
 8013370:	08013587 	.word	0x08013587
 8013374:	080135a3 	.word	0x080135a3
 8013378:	08013593 	.word	0x08013593
 801337c:	0801359b 	.word	0x0801359b
 8013380:	0801360b 	.word	0x0801360b
 8013384:	080135af 	.word	0x080135af
 8013388:	0801360b 	.word	0x0801360b
 801338c:	0801360b 	.word	0x0801360b
 8013390:	0801360b 	.word	0x0801360b
 8013394:	0801360b 	.word	0x0801360b
 8013398:	0801360b 	.word	0x0801360b
 801339c:	0801360b 	.word	0x0801360b
 80133a0:	0801360b 	.word	0x0801360b
 80133a4:	0801360b 	.word	0x0801360b
 80133a8:	0801360b 	.word	0x0801360b
 80133ac:	0801360b 	.word	0x0801360b
 80133b0:	0801360b 	.word	0x0801360b
 80133b4:	0801360b 	.word	0x0801360b
 80133b8:	0801360b 	.word	0x0801360b
 80133bc:	0801360b 	.word	0x0801360b
 80133c0:	0801360b 	.word	0x0801360b
 80133c4:	080135c3 	.word	0x080135c3
 80133c8:	080135cf 	.word	0x080135cf
 80133cc:	080135db 	.word	0x080135db
 80133d0:	080135e7 	.word	0x080135e7
 80133d4:	080135f3 	.word	0x080135f3
 80133d8:	080135ff 	.word	0x080135ff
 80133dc:	08013605 	.word	0x08013605
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80133e0:	4b8f      	ldr	r3, [pc, #572]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80133e2:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	711a      	strb	r2, [r3, #4]
            break;
 80133ea:	e114      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80133ec:	4b8c      	ldr	r3, [pc, #560]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80133ee:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	711a      	strb	r2, [r3, #4]
            break;
 80133f6:	e10e      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7fa fefb 	bl	800e1f8 <SecureElementGetDevEui>
            break;
 8013402:	e108      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	f7fa ff25 	bl	800e258 <SecureElementGetJoinEui>
            break;
 801340e:	e102      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8013410:	4b83      	ldr	r3, [pc, #524]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013412:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	711a      	strb	r2, [r3, #4]
            break;
 801341a:	e0fc      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801341c:	4b80      	ldr	r3, [pc, #512]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801341e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	605a      	str	r2, [r3, #4]
            break;
 8013426:	e0f6      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8013428:	4b7d      	ldr	r3, [pc, #500]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801342a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	3304      	adds	r3, #4
 8013432:	4619      	mov	r1, r3
 8013434:	4610      	mov	r0, r2
 8013436:	f7fa ff41 	bl	800e2bc <SecureElementGetDevAddr>
            break;
 801343a:	e0ec      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801343c:	4b78      	ldr	r3, [pc, #480]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801343e:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	711a      	strb	r2, [r3, #4]
            break;
 8013446:	e0e6      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013448:	4b75      	ldr	r3, [pc, #468]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801344a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	711a      	strb	r2, [r3, #4]
            break;
 8013452:	e0e0      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013454:	231d      	movs	r3, #29
 8013456:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013458:	4b71      	ldr	r3, [pc, #452]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801345a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801345e:	f107 0210 	add.w	r2, r7, #16
 8013462:	4611      	mov	r1, r2
 8013464:	4618      	mov	r0, r3
 8013466:	f002 ffc0 	bl	80163ea <RegionGetPhyParam>
 801346a:	4603      	mov	r3, r0
 801346c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	605a      	str	r2, [r3, #4]
            break;
 8013474:	e0cf      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4a69      	ldr	r2, [pc, #420]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801347a:	3304      	adds	r3, #4
 801347c:	326c      	adds	r2, #108	; 0x6c
 801347e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013482:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013486:	e0c6      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4a65      	ldr	r2, [pc, #404]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801348c:	3304      	adds	r3, #4
 801348e:	32b4      	adds	r2, #180	; 0xb4
 8013490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013494:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013498:	e0bd      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4a60      	ldr	r2, [pc, #384]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801349e:	3304      	adds	r3, #4
 80134a0:	3274      	adds	r2, #116	; 0x74
 80134a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80134aa:	e0b4      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	4a5c      	ldr	r2, [pc, #368]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80134b0:	3304      	adds	r3, #4
 80134b2:	32bc      	adds	r2, #188	; 0xbc
 80134b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80134bc:	e0ab      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80134be:	231b      	movs	r3, #27
 80134c0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134c2:	4b57      	ldr	r3, [pc, #348]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80134c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134c8:	f107 0210 	add.w	r2, r7, #16
 80134cc:	4611      	mov	r1, r2
 80134ce:	4618      	mov	r0, r3
 80134d0:	f002 ff8b 	bl	80163ea <RegionGetPhyParam>
 80134d4:	4603      	mov	r3, r0
 80134d6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	605a      	str	r2, [r3, #4]
            break;
 80134de:	e09a      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80134e0:	231a      	movs	r3, #26
 80134e2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134e4:	4b4e      	ldr	r3, [pc, #312]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80134e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134ea:	f107 0210 	add.w	r2, r7, #16
 80134ee:	4611      	mov	r1, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f002 ff7a 	bl	80163ea <RegionGetPhyParam>
 80134f6:	4603      	mov	r3, r0
 80134f8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	605a      	str	r2, [r3, #4]
            break;
 8013500:	e089      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013502:	4b47      	ldr	r3, [pc, #284]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013504:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	711a      	strb	r2, [r3, #4]
            break;
 801350c:	e083      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801350e:	4b44      	ldr	r3, [pc, #272]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	605a      	str	r2, [r3, #4]
            break;
 8013516:	e07e      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013518:	4b41      	ldr	r3, [pc, #260]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801351a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	605a      	str	r2, [r3, #4]
            break;
 8013520:	e079      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013522:	4b3f      	ldr	r3, [pc, #252]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	605a      	str	r2, [r3, #4]
            break;
 801352a:	e074      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801352c:	4b3c      	ldr	r3, [pc, #240]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801352e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	605a      	str	r2, [r3, #4]
            break;
 8013534:	e06f      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013536:	4b3a      	ldr	r3, [pc, #232]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013538:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	605a      	str	r2, [r3, #4]
            break;
 801353e:	e06a      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013540:	4b37      	ldr	r3, [pc, #220]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013542:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	711a      	strb	r2, [r3, #4]
            break;
 801354a:	e064      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801354c:	4b34      	ldr	r3, [pc, #208]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801354e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	711a      	strb	r2, [r3, #4]
            break;
 8013556:	e05e      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013558:	4b31      	ldr	r3, [pc, #196]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801355a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	711a      	strb	r2, [r3, #4]
            break;
 8013562:	e058      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013564:	4b2e      	ldr	r3, [pc, #184]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013566:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	711a      	strb	r2, [r3, #4]
            break;
 801356e:	e052      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013570:	4b2b      	ldr	r3, [pc, #172]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	605a      	str	r2, [r3, #4]
            break;
 8013578:	e04d      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801357a:	4b29      	ldr	r3, [pc, #164]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 801357c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	711a      	strb	r2, [r3, #4]
            break;
 8013584:	e047      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013586:	4b26      	ldr	r3, [pc, #152]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013588:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	605a      	str	r2, [r3, #4]
            break;
 8013590:	e041      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4a22      	ldr	r2, [pc, #136]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 8013596:	605a      	str	r2, [r3, #4]
            break;
 8013598:	e03d      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80135a0:	e039      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80135a2:	4b1f      	ldr	r3, [pc, #124]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135a4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	605a      	str	r2, [r3, #4]
            break;
 80135ac:	e033      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a1b      	ldr	r2, [pc, #108]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135b2:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80135b6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80135b8:	687c      	ldr	r4, [r7, #4]
 80135ba:	f003 f89f 	bl	80166fc <RegionGetVersion>
 80135be:	60a0      	str	r0, [r4, #8]
            break;
 80135c0:	e029      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80135c2:	4b17      	ldr	r3, [pc, #92]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	605a      	str	r2, [r3, #4]
            break;
 80135cc:	e023      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80135ce:	4b14      	ldr	r3, [pc, #80]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135d0:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	809a      	strh	r2, [r3, #4]
            break;
 80135d8:	e01d      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80135da:	4b11      	ldr	r3, [pc, #68]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135dc:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	809a      	strh	r2, [r3, #4]
            break;
 80135e4:	e017      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80135e6:	4b0e      	ldr	r3, [pc, #56]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135e8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	809a      	strh	r2, [r3, #4]
            break;
 80135f0:	e011      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135f2:	4b0b      	ldr	r3, [pc, #44]	; (8013620 <LoRaMacMibGetRequestConfirm+0x368>)
 80135f4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	809a      	strh	r2, [r3, #4]
            break;
 80135fc:	e00b      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135fe:	2318      	movs	r3, #24
 8013600:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013602:	e008      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013604:	2318      	movs	r3, #24
 8013606:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013608:	e005      	b.n	8013616 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f000 ff96 	bl	801453c <LoRaMacClassBMibGetRequestConfirm>
 8013610:	4603      	mov	r3, r0
 8013612:	75fb      	strb	r3, [r7, #23]
            break;
 8013614:	bf00      	nop
        }
    }
    return status;
 8013616:	7dfb      	ldrb	r3, [r7, #23]
}
 8013618:	4618      	mov	r0, r3
 801361a:	371c      	adds	r7, #28
 801361c:	46bd      	mov	sp, r7
 801361e:	bd90      	pop	{r4, r7, pc}
 8013620:	20000e4c 	.word	0x20000e4c

08013624 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b086      	sub	sp, #24
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801362c:	2300      	movs	r3, #0
 801362e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013636:	2303      	movs	r3, #3
 8013638:	e382      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801363a:	4bbb      	ldr	r3, [pc, #748]	; (8013928 <LoRaMacMibSetRequestConfirm+0x304>)
 801363c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013640:	f003 0302 	and.w	r3, r3, #2
 8013644:	2b00      	cmp	r3, #0
 8013646:	d001      	beq.n	801364c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013648:	2301      	movs	r3, #1
 801364a:	e379      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	2b3f      	cmp	r3, #63	; 0x3f
 8013652:	f200 8353 	bhi.w	8013cfc <LoRaMacMibSetRequestConfirm+0x6d8>
 8013656:	a201      	add	r2, pc, #4	; (adr r2, 801365c <LoRaMacMibSetRequestConfirm+0x38>)
 8013658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801365c:	0801375d 	.word	0x0801375d
 8013660:	0801376d 	.word	0x0801376d
 8013664:	08013787 	.word	0x08013787
 8013668:	0801379f 	.word	0x0801379f
 801366c:	080137b7 	.word	0x080137b7
 8013670:	080137c3 	.word	0x080137c3
 8013674:	080137cf 	.word	0x080137cf
 8013678:	080137f9 	.word	0x080137f9
 801367c:	0801381f 	.word	0x0801381f
 8013680:	08013845 	.word	0x08013845
 8013684:	0801386b 	.word	0x0801386b
 8013688:	08013891 	.word	0x08013891
 801368c:	080138b7 	.word	0x080138b7
 8013690:	080138dd 	.word	0x080138dd
 8013694:	08013903 	.word	0x08013903
 8013698:	08013931 	.word	0x08013931
 801369c:	08013951 	.word	0x08013951
 80136a0:	08013cfd 	.word	0x08013cfd
 80136a4:	0801395d 	.word	0x0801395d
 80136a8:	080139cd 	.word	0x080139cd
 80136ac:	08013a0d 	.word	0x08013a0d
 80136b0:	08013a6f 	.word	0x08013a6f
 80136b4:	08013adf 	.word	0x08013adf
 80136b8:	08013aaf 	.word	0x08013aaf
 80136bc:	08013b0f 	.word	0x08013b0f
 80136c0:	08013b31 	.word	0x08013b31
 80136c4:	08013b3b 	.word	0x08013b3b
 80136c8:	08013b45 	.word	0x08013b45
 80136cc:	08013b4f 	.word	0x08013b4f
 80136d0:	08013b59 	.word	0x08013b59
 80136d4:	08013b63 	.word	0x08013b63
 80136d8:	08013b95 	.word	0x08013b95
 80136dc:	08013c09 	.word	0x08013c09
 80136e0:	08013bcf 	.word	0x08013bcf
 80136e4:	08013c3b 	.word	0x08013c3b
 80136e8:	08013c51 	.word	0x08013c51
 80136ec:	08013c69 	.word	0x08013c69
 80136f0:	08013c75 	.word	0x08013c75
 80136f4:	08013c81 	.word	0x08013c81
 80136f8:	08013cfd 	.word	0x08013cfd
 80136fc:	08013c8b 	.word	0x08013c8b
 8013700:	08013cfd 	.word	0x08013cfd
 8013704:	08013cfd 	.word	0x08013cfd
 8013708:	08013cfd 	.word	0x08013cfd
 801370c:	08013cfd 	.word	0x08013cfd
 8013710:	08013cfd 	.word	0x08013cfd
 8013714:	08013cfd 	.word	0x08013cfd
 8013718:	08013cfd 	.word	0x08013cfd
 801371c:	08013cfd 	.word	0x08013cfd
 8013720:	08013cfd 	.word	0x08013cfd
 8013724:	08013cfd 	.word	0x08013cfd
 8013728:	08013cfd 	.word	0x08013cfd
 801372c:	08013cfd 	.word	0x08013cfd
 8013730:	08013cfd 	.word	0x08013cfd
 8013734:	08013cfd 	.word	0x08013cfd
 8013738:	08013cfd 	.word	0x08013cfd
 801373c:	08013cfd 	.word	0x08013cfd
 8013740:	08013cb5 	.word	0x08013cb5
 8013744:	08013cc1 	.word	0x08013cc1
 8013748:	08013ccd 	.word	0x08013ccd
 801374c:	08013cd9 	.word	0x08013cd9
 8013750:	08013ce5 	.word	0x08013ce5
 8013754:	08013cf1 	.word	0x08013cf1
 8013758:	08013cf7 	.word	0x08013cf7
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	791b      	ldrb	r3, [r3, #4]
 8013760:	4618      	mov	r0, r3
 8013762:	f7fd fb87 	bl	8010e74 <SwitchClass>
 8013766:	4603      	mov	r3, r0
 8013768:	75fb      	strb	r3, [r7, #23]
            break;
 801376a:	e2e8      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	791b      	ldrb	r3, [r3, #4]
 8013770:	2b02      	cmp	r3, #2
 8013772:	d005      	beq.n	8013780 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	791a      	ldrb	r2, [r3, #4]
 8013778:	4b6c      	ldr	r3, [pc, #432]	; (801392c <LoRaMacMibSetRequestConfirm+0x308>)
 801377a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801377e:	e2de      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013780:	2303      	movs	r3, #3
 8013782:	75fb      	strb	r3, [r7, #23]
            break;
 8013784:	e2db      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	4618      	mov	r0, r3
 801378c:	f7fa fd1c 	bl	800e1c8 <SecureElementSetDevEui>
 8013790:	4603      	mov	r3, r0
 8013792:	2b00      	cmp	r3, #0
 8013794:	f000 82b8 	beq.w	8013d08 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013798:	2303      	movs	r3, #3
 801379a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801379c:	e2b4      	b.n	8013d08 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fa fd40 	bl	800e228 <SecureElementSetJoinEui>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	f000 82ae 	beq.w	8013d0c <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137b0:	2303      	movs	r3, #3
 80137b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137b4:	e2aa      	b.n	8013d0c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	791a      	ldrb	r2, [r3, #4]
 80137ba:	4b5c      	ldr	r3, [pc, #368]	; (801392c <LoRaMacMibSetRequestConfirm+0x308>)
 80137bc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80137c0:	e2bd      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	4a59      	ldr	r2, [pc, #356]	; (801392c <LoRaMacMibSetRequestConfirm+0x308>)
 80137c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80137cc:	e2b7      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80137ce:	4b57      	ldr	r3, [pc, #348]	; (801392c <LoRaMacMibSetRequestConfirm+0x308>)
 80137d0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	4619      	mov	r1, r3
 80137da:	4610      	mov	r0, r2
 80137dc:	f7fa fd54 	bl	800e288 <SecureElementSetDevAddr>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d002      	beq.n	80137ec <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137e6:	2303      	movs	r3, #3
 80137e8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80137ea:	e2a8      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	4a4e      	ldr	r2, [pc, #312]	; (801392c <LoRaMacMibSetRequestConfirm+0x308>)
 80137f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80137f6:	e2a2      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00b      	beq.n	8013818 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	4619      	mov	r1, r3
 8013806:	2000      	movs	r0, #0
 8013808:	f001 fff4 	bl	80157f4 <LoRaMacCryptoSetKey>
 801380c:	4603      	mov	r3, r0
 801380e:	2b00      	cmp	r3, #0
 8013810:	f000 827e 	beq.w	8013d10 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013814:	2311      	movs	r3, #17
 8013816:	e293      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013818:	2303      	movs	r3, #3
 801381a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801381c:	e278      	b.n	8013d10 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00b      	beq.n	801383e <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	4619      	mov	r1, r3
 801382c:	2001      	movs	r0, #1
 801382e:	f001 ffe1 	bl	80157f4 <LoRaMacCryptoSetKey>
 8013832:	4603      	mov	r3, r0
 8013834:	2b00      	cmp	r3, #0
 8013836:	f000 826d 	beq.w	8013d14 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801383a:	2311      	movs	r3, #17
 801383c:	e280      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801383e:	2303      	movs	r3, #3
 8013840:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013842:	e267      	b.n	8013d14 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00b      	beq.n	8013864 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	4619      	mov	r1, r3
 8013852:	2008      	movs	r0, #8
 8013854:	f001 ffce 	bl	80157f4 <LoRaMacCryptoSetKey>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	f000 825c 	beq.w	8013d18 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013860:	2311      	movs	r3, #17
 8013862:	e26d      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013864:	2303      	movs	r3, #3
 8013866:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013868:	e256      	b.n	8013d18 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00b      	beq.n	801388a <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	4619      	mov	r1, r3
 8013878:	2009      	movs	r0, #9
 801387a:	f001 ffbb 	bl	80157f4 <LoRaMacCryptoSetKey>
 801387e:	4603      	mov	r3, r0
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 824b 	beq.w	8013d1c <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013886:	2311      	movs	r3, #17
 8013888:	e25a      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801388a:	2303      	movs	r3, #3
 801388c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801388e:	e245      	b.n	8013d1c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00b      	beq.n	80138b0 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	4619      	mov	r1, r3
 801389e:	200c      	movs	r0, #12
 80138a0:	f001 ffa8 	bl	80157f4 <LoRaMacCryptoSetKey>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f000 823a 	beq.w	8013d20 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138ac:	2311      	movs	r3, #17
 80138ae:	e247      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138b0:	2303      	movs	r3, #3
 80138b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138b4:	e234      	b.n	8013d20 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00b      	beq.n	80138d6 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	4619      	mov	r1, r3
 80138c4:	200d      	movs	r0, #13
 80138c6:	f001 ff95 	bl	80157f4 <LoRaMacCryptoSetKey>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f000 8229 	beq.w	8013d24 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138d2:	2311      	movs	r3, #17
 80138d4:	e234      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138d6:	2303      	movs	r3, #3
 80138d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138da:	e223      	b.n	8013d24 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00b      	beq.n	80138fc <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	4619      	mov	r1, r3
 80138ea:	200e      	movs	r0, #14
 80138ec:	f001 ff82 	bl	80157f4 <LoRaMacCryptoSetKey>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f000 8218 	beq.w	8013d28 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138f8:	2311      	movs	r3, #17
 80138fa:	e221      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138fc:	2303      	movs	r3, #3
 80138fe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013900:	e212      	b.n	8013d28 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00b      	beq.n	8013922 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	4619      	mov	r1, r3
 8013910:	200f      	movs	r0, #15
 8013912:	f001 ff6f 	bl	80157f4 <LoRaMacCryptoSetKey>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	f000 8207 	beq.w	8013d2c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801391e:	2311      	movs	r3, #17
 8013920:	e20e      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013922:	2303      	movs	r3, #3
 8013924:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013926:	e201      	b.n	8013d2c <LoRaMacMibSetRequestConfirm+0x708>
 8013928:	20000944 	.word	0x20000944
 801392c:	20000e4c 	.word	0x20000e4c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	791a      	ldrb	r2, [r3, #4]
 8013934:	4bb2      	ldr	r3, [pc, #712]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013936:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801393a:	4bb2      	ldr	r3, [pc, #712]	; (8013c04 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801393e:	4ab0      	ldr	r2, [pc, #704]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013940:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013944:	4610      	mov	r0, r2
 8013946:	4798      	blx	r3
            Radio.Sleep( );
 8013948:	4bae      	ldr	r3, [pc, #696]	; (8013c04 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394c:	4798      	blx	r3
            break;
 801394e:	e1f6      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	791a      	ldrb	r2, [r3, #4]
 8013954:	4baa      	ldr	r3, [pc, #680]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013956:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801395a:	e1f0      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	7a1b      	ldrb	r3, [r3, #8]
 8013960:	b25b      	sxtb	r3, r3
 8013962:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013964:	4ba6      	ldr	r3, [pc, #664]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013966:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801396a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801396c:	4ba4      	ldr	r3, [pc, #656]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801396e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013972:	f107 0108 	add.w	r1, r7, #8
 8013976:	2207      	movs	r2, #7
 8013978:	4618      	mov	r0, r3
 801397a:	f002 fd71 	bl	8016460 <RegionVerify>
 801397e:	4603      	mov	r3, r0
 8013980:	f083 0301 	eor.w	r3, r3, #1
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b00      	cmp	r3, #0
 8013988:	d002      	beq.n	8013990 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801398a:	2303      	movs	r3, #3
 801398c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801398e:	e1d6      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013996:	4b9a      	ldr	r3, [pc, #616]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013998:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801399c:	f107 0108 	add.w	r1, r7, #8
 80139a0:	2200      	movs	r2, #0
 80139a2:	4618      	mov	r0, r3
 80139a4:	f002 fd5c 	bl	8016460 <RegionVerify>
 80139a8:	4603      	mov	r3, r0
 80139aa:	f083 0301 	eor.w	r3, r3, #1
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d002      	beq.n	80139ba <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139b4:	2303      	movs	r3, #3
 80139b6:	75fb      	strb	r3, [r7, #23]
            break;
 80139b8:	e1c1      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80139ba:	4b91      	ldr	r3, [pc, #580]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	336c      	adds	r3, #108	; 0x6c
 80139c0:	3204      	adds	r2, #4
 80139c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80139ca:	e1b8      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	7a1b      	ldrb	r3, [r3, #8]
 80139d0:	b25b      	sxtb	r3, r3
 80139d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139d4:	4b8a      	ldr	r3, [pc, #552]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80139d6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80139da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80139dc:	4b88      	ldr	r3, [pc, #544]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80139de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139e2:	f107 0108 	add.w	r1, r7, #8
 80139e6:	2207      	movs	r2, #7
 80139e8:	4618      	mov	r0, r3
 80139ea:	f002 fd39 	bl	8016460 <RegionVerify>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d008      	beq.n	8013a06 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80139f4:	4b82      	ldr	r3, [pc, #520]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	33b4      	adds	r3, #180	; 0xb4
 80139fa:	3204      	adds	r2, #4
 80139fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a00:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a04:	e19b      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a06:	2303      	movs	r3, #3
 8013a08:	75fb      	strb	r3, [r7, #23]
            break;
 8013a0a:	e198      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	7a1b      	ldrb	r3, [r3, #8]
 8013a10:	b25b      	sxtb	r3, r3
 8013a12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a14:	4b7a      	ldr	r3, [pc, #488]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a16:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013a1a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013a1c:	4b78      	ldr	r3, [pc, #480]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a22:	f107 0108 	add.w	r1, r7, #8
 8013a26:	2207      	movs	r2, #7
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f002 fd19 	bl	8016460 <RegionVerify>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d019      	beq.n	8013a68 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013a34:	4b72      	ldr	r3, [pc, #456]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	3374      	adds	r3, #116	; 0x74
 8013a3a:	3204      	adds	r2, #4
 8013a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a40:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013a44:	4b6e      	ldr	r3, [pc, #440]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013a4a:	2b02      	cmp	r3, #2
 8013a4c:	f040 8170 	bne.w	8013d30 <LoRaMacMibSetRequestConfirm+0x70c>
 8013a50:	4b6b      	ldr	r3, [pc, #428]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a52:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f000 816a 	beq.w	8013d30 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013a5c:	4b69      	ldr	r3, [pc, #420]	; (8013c04 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a60:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013a62:	f7fe fc91 	bl	8012388 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a66:	e163      	b.n	8013d30 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a68:	2303      	movs	r3, #3
 8013a6a:	75fb      	strb	r3, [r7, #23]
            break;
 8013a6c:	e160      	b.n	8013d30 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	7a1b      	ldrb	r3, [r3, #8]
 8013a72:	b25b      	sxtb	r3, r3
 8013a74:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a76:	4b62      	ldr	r3, [pc, #392]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a78:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013a7c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013a7e:	4b60      	ldr	r3, [pc, #384]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a84:	f107 0108 	add.w	r1, r7, #8
 8013a88:	2207      	movs	r2, #7
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f002 fce8 	bl	8016460 <RegionVerify>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d008      	beq.n	8013aa8 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013a96:	4b5a      	ldr	r3, [pc, #360]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	33bc      	adds	r3, #188	; 0xbc
 8013a9c:	3204      	adds	r2, #4
 8013a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013aa2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013aa6:	e14a      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8013aac:	e147      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013ab8:	4b51      	ldr	r3, [pc, #324]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013aba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013abe:	f107 020c 	add.w	r2, r7, #12
 8013ac2:	4611      	mov	r1, r2
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f002 fcf4 	bl	80164b2 <RegionChanMaskSet>
 8013aca:	4603      	mov	r3, r0
 8013acc:	f083 0301 	eor.w	r3, r3, #1
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f000 812e 	beq.w	8013d34 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ad8:	2303      	movs	r3, #3
 8013ada:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013adc:	e12a      	b.n	8013d34 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013ae8:	4b45      	ldr	r3, [pc, #276]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013aea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013aee:	f107 020c 	add.w	r2, r7, #12
 8013af2:	4611      	mov	r1, r2
 8013af4:	4618      	mov	r0, r3
 8013af6:	f002 fcdc 	bl	80164b2 <RegionChanMaskSet>
 8013afa:	4603      	mov	r3, r0
 8013afc:	f083 0301 	eor.w	r3, r3, #1
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f000 8118 	beq.w	8013d38 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b08:	2303      	movs	r3, #3
 8013b0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b0c:	e114      	b.n	8013d38 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	791b      	ldrb	r3, [r3, #4]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d009      	beq.n	8013b2a <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013b1a:	2b0f      	cmp	r3, #15
 8013b1c:	d805      	bhi.n	8013b2a <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	791a      	ldrb	r2, [r3, #4]
 8013b22:	4b37      	ldr	r3, [pc, #220]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b28:	e109      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b2a:	2303      	movs	r3, #3
 8013b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b2e:	e106      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	4a32      	ldr	r2, [pc, #200]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b36:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8013b38:	e101      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	4a30      	ldr	r2, [pc, #192]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b40:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013b42:	e0fc      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	4a2d      	ldr	r2, [pc, #180]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b4a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013b4c:	e0f7      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	4a2b      	ldr	r2, [pc, #172]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b54:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8013b56:	e0f2      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	4a28      	ldr	r2, [pc, #160]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b5e:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8013b60:	e0ed      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b68:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013b6a:	4b25      	ldr	r3, [pc, #148]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b70:	f107 0108 	add.w	r1, r7, #8
 8013b74:	2206      	movs	r2, #6
 8013b76:	4618      	mov	r0, r3
 8013b78:	f002 fc72 	bl	8016460 <RegionVerify>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d005      	beq.n	8013b8e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013b82:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013b86:	4b1e      	ldr	r3, [pc, #120]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b88:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b8c:	e0d7      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b8e:	2303      	movs	r3, #3
 8013b90:	75fb      	strb	r3, [r7, #23]
            break;
 8013b92:	e0d4      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b9a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013b9c:	4b18      	ldr	r3, [pc, #96]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013ba2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013ba4:	4b16      	ldr	r3, [pc, #88]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013ba6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013baa:	f107 0108 	add.w	r1, r7, #8
 8013bae:	2205      	movs	r2, #5
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f002 fc55 	bl	8016460 <RegionVerify>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d005      	beq.n	8013bc8 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013bbc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013bc0:	4b0f      	ldr	r3, [pc, #60]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bc6:	e0ba      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bc8:	2303      	movs	r3, #3
 8013bca:	75fb      	strb	r3, [r7, #23]
            break;
 8013bcc:	e0b7      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bd4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013bd6:	4b0a      	ldr	r3, [pc, #40]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013bd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bdc:	f107 0108 	add.w	r1, r7, #8
 8013be0:	220a      	movs	r2, #10
 8013be2:	4618      	mov	r0, r3
 8013be4:	f002 fc3c 	bl	8016460 <RegionVerify>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d005      	beq.n	8013bfa <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013bee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013bf2:	4b03      	ldr	r3, [pc, #12]	; (8013c00 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013bf4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bf8:	e0a1      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	75fb      	strb	r3, [r7, #23]
            break;
 8013bfe:	e09e      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
 8013c00:	20000e4c 	.word	0x20000e4c
 8013c04:	0801e604 	.word	0x0801e604
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013c0e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013c10:	4b4d      	ldr	r3, [pc, #308]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c16:	f107 0108 	add.w	r1, r7, #8
 8013c1a:	2209      	movs	r2, #9
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f002 fc1f 	bl	8016460 <RegionVerify>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d005      	beq.n	8013c34 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013c28:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013c2c:	4b46      	ldr	r3, [pc, #280]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c32:	e084      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c34:	2303      	movs	r3, #3
 8013c36:	75fb      	strb	r3, [r7, #23]
            break;
 8013c38:	e081      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	4a42      	ldr	r2, [pc, #264]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013c44:	4b40      	ldr	r3, [pc, #256]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013c4a:	4a3f      	ldr	r2, [pc, #252]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8013c4e:	e076      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	791a      	ldrb	r2, [r3, #4]
 8013c54:	4b3c      	ldr	r3, [pc, #240]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8013c5a:	4b3b      	ldr	r3, [pc, #236]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c5c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013c60:	4b39      	ldr	r3, [pc, #228]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8013c66:	e06a      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	4a36      	ldr	r2, [pc, #216]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8013c72:	e064      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	4a33      	ldr	r2, [pc, #204]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c7a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8013c7e:	e05e      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013c80:	f7fe fde0 	bl	8012844 <RestoreNvmData>
 8013c84:	4603      	mov	r3, r0
 8013c86:	75fb      	strb	r3, [r7, #23]
            break;
 8013c88:	e059      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	799b      	ldrb	r3, [r3, #6]
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d80d      	bhi.n	8013cae <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013c92:	4a2d      	ldr	r2, [pc, #180]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6858      	ldr	r0, [r3, #4]
 8013ca0:	f001 fce0 	bl	8015664 <LoRaMacCryptoSetLrWanVersion>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d048      	beq.n	8013d3c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013caa:	2311      	movs	r3, #17
 8013cac:	e048      	b.n	8013d40 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cae:	2303      	movs	r3, #3
 8013cb0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013cb2:	e043      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	4a23      	ldr	r2, [pc, #140]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8013cbe:	e03e      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	889a      	ldrh	r2, [r3, #4]
 8013cc4:	4b20      	ldr	r3, [pc, #128]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013cc6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8013cca:	e038      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	889a      	ldrh	r2, [r3, #4]
 8013cd0:	4b1d      	ldr	r3, [pc, #116]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013cd2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8013cd6:	e032      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	889a      	ldrh	r2, [r3, #4]
 8013cdc:	4b1a      	ldr	r3, [pc, #104]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013cde:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8013ce2:	e02c      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	889a      	ldrh	r2, [r3, #4]
 8013ce8:	4b17      	ldr	r3, [pc, #92]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x724>)
 8013cea:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8013cee:	e026      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cf0:	2318      	movs	r3, #24
 8013cf2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013cf4:	e023      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cf6:	2318      	movs	r3, #24
 8013cf8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013cfa:	e020      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f000 fc27 	bl	8014550 <LoRaMacMibClassBSetRequestConfirm>
 8013d02:	4603      	mov	r3, r0
 8013d04:	75fb      	strb	r3, [r7, #23]
            break;
 8013d06:	e01a      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d08:	bf00      	nop
 8013d0a:	e018      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d0c:	bf00      	nop
 8013d0e:	e016      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d10:	bf00      	nop
 8013d12:	e014      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d14:	bf00      	nop
 8013d16:	e012      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d18:	bf00      	nop
 8013d1a:	e010      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d1c:	bf00      	nop
 8013d1e:	e00e      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d20:	bf00      	nop
 8013d22:	e00c      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d24:	bf00      	nop
 8013d26:	e00a      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d28:	bf00      	nop
 8013d2a:	e008      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d2c:	bf00      	nop
 8013d2e:	e006      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d30:	bf00      	nop
 8013d32:	e004      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d34:	bf00      	nop
 8013d36:	e002      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d38:	bf00      	nop
 8013d3a:	e000      	b.n	8013d3e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8013d3c:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	20000e4c 	.word	0x20000e4c

08013d4c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d54:	2302      	movs	r3, #2
 8013d56:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013d58:	2300      	movs	r3, #0
 8013d5a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d101      	bne.n	8013d66 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d62:	2303      	movs	r3, #3
 8013d64:	e13a      	b.n	8013fdc <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013d66:	f7fc fca5 	bl	80106b4 <LoRaMacIsBusy>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d001      	beq.n	8013d74 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013d70:	2301      	movs	r3, #1
 8013d72:	e133      	b.n	8013fdc <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013d74:	f001 f90c 	bl	8014f90 <LoRaMacConfirmQueueIsFull>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d001      	beq.n	8013d82 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e12c      	b.n	8013fdc <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013d82:	f001 f8f9 	bl	8014f78 <LoRaMacConfirmQueueGetCnt>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d104      	bne.n	8013d96 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013d8c:	2214      	movs	r2, #20
 8013d8e:	2100      	movs	r1, #0
 8013d90:	4894      	ldr	r0, [pc, #592]	; (8013fe4 <LoRaMacMlmeRequest+0x298>)
 8013d92:	f004 fe7f 	bl	8018a94 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d96:	4b94      	ldr	r3, [pc, #592]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013d98:	2201      	movs	r2, #1
 8013d9a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013d9e:	4a92      	ldr	r2, [pc, #584]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013da0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8013da4:	f043 0304 	orr.w	r3, r3, #4
 8013da8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013db2:	2301      	movs	r3, #1
 8013db4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8013db6:	2300      	movs	r3, #0
 8013db8:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	2b0d      	cmp	r3, #13
 8013dc2:	f200 80e1 	bhi.w	8013f88 <LoRaMacMlmeRequest+0x23c>
 8013dc6:	a201      	add	r2, pc, #4	; (adr r2, 8013dcc <LoRaMacMlmeRequest+0x80>)
 8013dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dcc:	08013e05 	.word	0x08013e05
 8013dd0:	08013f89 	.word	0x08013f89
 8013dd4:	08013f89 	.word	0x08013f89
 8013dd8:	08013f89 	.word	0x08013f89
 8013ddc:	08013e7d 	.word	0x08013e7d
 8013de0:	08013e9b 	.word	0x08013e9b
 8013de4:	08013eab 	.word	0x08013eab
 8013de8:	08013f89 	.word	0x08013f89
 8013dec:	08013f89 	.word	0x08013f89
 8013df0:	08013ec7 	.word	0x08013ec7
 8013df4:	08013f89 	.word	0x08013f89
 8013df8:	08013f5d 	.word	0x08013f5d
 8013dfc:	08013efd 	.word	0x08013efd
 8013e00:	08013f3f 	.word	0x08013f3f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013e04:	4b78      	ldr	r3, [pc, #480]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013e06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013e0a:	f003 0320 	and.w	r3, r3, #32
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8013e12:	2301      	movs	r3, #1
 8013e14:	e0e2      	b.n	8013fdc <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8013e16:	2000      	movs	r0, #0
 8013e18:	f7fe f95c 	bl	80120d4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013e1c:	4b73      	ldr	r3, [pc, #460]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013e1e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	795b      	ldrb	r3, [r3, #5]
 8013e26:	b25b      	sxtb	r3, r3
 8013e28:	2200      	movs	r2, #0
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	f002 fc00 	bl	8016630 <RegionAlternateDr>
 8013e30:	4603      	mov	r3, r0
 8013e32:	461a      	mov	r2, r3
 8013e34:	4b6d      	ldr	r3, [pc, #436]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013e40:	4b6a      	ldr	r3, [pc, #424]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013e46:	2307      	movs	r3, #7
 8013e48:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8013e4a:	20ff      	movs	r0, #255	; 0xff
 8013e4c:	f7fd fec0 	bl	8011bd0 <SendReJoinReq>
 8013e50:	4603      	mov	r3, r0
 8013e52:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8013e54:	7dfb      	ldrb	r3, [r7, #23]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f000 8098 	beq.w	8013f8c <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013e5c:	4b63      	ldr	r3, [pc, #396]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013e5e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	795b      	ldrb	r3, [r3, #5]
 8013e66:	b25b      	sxtb	r3, r3
 8013e68:	2201      	movs	r2, #1
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	f002 fbe0 	bl	8016630 <RegionAlternateDr>
 8013e70:	4603      	mov	r3, r0
 8013e72:	461a      	mov	r2, r3
 8013e74:	4b5d      	ldr	r3, [pc, #372]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013e7a:	e087      	b.n	8013f8c <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013e80:	f107 030c 	add.w	r3, r7, #12
 8013e84:	2200      	movs	r2, #0
 8013e86:	4619      	mov	r1, r3
 8013e88:	2002      	movs	r0, #2
 8013e8a:	f000 fcd1 	bl	8014830 <LoRaMacCommandsAddCmd>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d07d      	beq.n	8013f90 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013e94:	2313      	movs	r3, #19
 8013e96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013e98:	e07a      	b.n	8013f90 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	889b      	ldrh	r3, [r3, #4]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe fc7a 	bl	8012798 <SetTxContinuousWave>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	75fb      	strb	r3, [r7, #23]
            break;
 8013ea8:	e079      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	8898      	ldrh	r0, [r3, #4]
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6899      	ldr	r1, [r3, #8]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	461a      	mov	r2, r3
 8013ebc:	f7fe fca2 	bl	8012804 <SetTxContinuousWave1>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8013ec4:	e06b      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013eca:	f107 0308 	add.w	r3, r7, #8
 8013ece:	4619      	mov	r1, r3
 8013ed0:	200d      	movs	r0, #13
 8013ed2:	f000 fd2d 	bl	8014930 <LoRaMacCommandsGetCmd>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d102      	bne.n	8013ee2 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013ee0:	e058      	b.n	8013f94 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013ee2:	f107 030c 	add.w	r3, r7, #12
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	4619      	mov	r1, r3
 8013eea:	200d      	movs	r0, #13
 8013eec:	f000 fca0 	bl	8014830 <LoRaMacCommandsAddCmd>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d04e      	beq.n	8013f94 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ef6:	2313      	movs	r3, #19
 8013ef8:	75fb      	strb	r3, [r7, #23]
            break;
 8013efa:	e04b      	b.n	8013f94 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013efc:	4b3b      	ldr	r3, [pc, #236]	; (8013fec <LoRaMacMlmeRequest+0x2a0>)
 8013efe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d148      	bne.n	8013f98 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	791b      	ldrb	r3, [r3, #4]
 8013f0a:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	791b      	ldrb	r3, [r3, #4]
 8013f10:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	4618      	mov	r0, r3
 8013f18:	f000 faef 	bl	80144fa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013f1c:	7dbb      	ldrb	r3, [r7, #22]
 8013f1e:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8013f20:	2300      	movs	r3, #0
 8013f22:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f24:	f107 030c 	add.w	r3, r7, #12
 8013f28:	2201      	movs	r2, #1
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	2010      	movs	r0, #16
 8013f2e:	f000 fc7f 	bl	8014830 <LoRaMacCommandsAddCmd>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d02f      	beq.n	8013f98 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f38:	2313      	movs	r3, #19
 8013f3a:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8013f3c:	e02c      	b.n	8013f98 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f42:	f107 030c 	add.w	r3, r7, #12
 8013f46:	2200      	movs	r2, #0
 8013f48:	4619      	mov	r1, r3
 8013f4a:	2012      	movs	r0, #18
 8013f4c:	f000 fc70 	bl	8014830 <LoRaMacCommandsAddCmd>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d022      	beq.n	8013f9c <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f56:	2313      	movs	r3, #19
 8013f58:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013f5a:	e01f      	b.n	8013f9c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013f60:	f000 fa81 	bl	8014466 <LoRaMacClassBIsAcquisitionInProgress>
 8013f64:	4603      	mov	r3, r0
 8013f66:	f083 0301 	eor.w	r3, r3, #1
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d008      	beq.n	8013f82 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013f70:	2000      	movs	r0, #0
 8013f72:	f000 fa5a 	bl	801442a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013f76:	2000      	movs	r0, #0
 8013f78:	f000 fa7c 	bl	8014474 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013f80:	e00d      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8013f82:	2301      	movs	r3, #1
 8013f84:	75fb      	strb	r3, [r7, #23]
            break;
 8013f86:	e00a      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8013f88:	bf00      	nop
 8013f8a:	e008      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
            break;
 8013f8c:	bf00      	nop
 8013f8e:	e006      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
            break;
 8013f90:	bf00      	nop
 8013f92:	e004      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
            break;
 8013f94:	bf00      	nop
 8013f96:	e002      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
            break;
 8013f98:	bf00      	nop
 8013f9a:	e000      	b.n	8013f9e <LoRaMacMlmeRequest+0x252>
            break;
 8013f9c:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013f9e:	4b12      	ldr	r3, [pc, #72]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013fa0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013fa8:	7dfb      	ldrb	r3, [r7, #23]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d010      	beq.n	8013fd0 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013fae:	f000 ffe3 	bl	8014f78 <LoRaMacConfirmQueueGetCnt>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d110      	bne.n	8013fda <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8013fb8:	4b0b      	ldr	r3, [pc, #44]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013fc0:	4a09      	ldr	r2, [pc, #36]	; (8013fe8 <LoRaMacMlmeRequest+0x29c>)
 8013fc2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8013fc6:	f36f 0382 	bfc	r3, #2, #1
 8013fca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8013fce:	e004      	b.n	8013fda <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013fd0:	f107 0310 	add.w	r3, r7, #16
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f000 fe7b 	bl	8014cd0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3718      	adds	r7, #24
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	20000d8c 	.word	0x20000d8c
 8013fe8:	20000944 	.word	0x20000944
 8013fec:	20000e4c 	.word	0x20000e4c

08013ff0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b08c      	sub	sp, #48	; 0x30
 8013ff4:	af02      	add	r7, sp, #8
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013ffc:	2302      	movs	r3, #2
 8013ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014002:	2300      	movs	r3, #0
 8014004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8014008:	2300      	movs	r3, #0
 801400a:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801400c:	2300      	movs	r3, #0
 801400e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8014010:	2300      	movs	r3, #0
 8014012:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d101      	bne.n	801401e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801401a:	2303      	movs	r3, #3
 801401c:	e0d4      	b.n	80141c8 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801401e:	f7fc fb49 	bl	80106b4 <LoRaMacIsBusy>
 8014022:	4603      	mov	r3, r0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d001      	beq.n	801402c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8014028:	2301      	movs	r3, #1
 801402a:	e0cd      	b.n	80141c8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801402c:	2300      	movs	r3, #0
 801402e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014030:	2214      	movs	r2, #20
 8014032:	2100      	movs	r1, #0
 8014034:	4866      	ldr	r0, [pc, #408]	; (80141d0 <LoRaMacMcpsRequest+0x1e0>)
 8014036:	f004 fd2d 	bl	8018a94 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801403a:	4b66      	ldr	r3, [pc, #408]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 801403c:	2201      	movs	r2, #1
 801403e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014042:	4b64      	ldr	r3, [pc, #400]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 8014044:	2201      	movs	r2, #1
 8014046:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b03      	cmp	r3, #3
 8014050:	d03d      	beq.n	80140ce <LoRaMacMcpsRequest+0xde>
 8014052:	2b03      	cmp	r3, #3
 8014054:	dc4f      	bgt.n	80140f6 <LoRaMacMcpsRequest+0x106>
 8014056:	2b00      	cmp	r3, #0
 8014058:	d002      	beq.n	8014060 <LoRaMacMcpsRequest+0x70>
 801405a:	2b01      	cmp	r3, #1
 801405c:	d019      	beq.n	8014092 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801405e:	e04a      	b.n	80140f6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014060:	2301      	movs	r3, #1
 8014062:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014064:	4b5b      	ldr	r3, [pc, #364]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 8014066:	2201      	movs	r2, #1
 8014068:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801406c:	7b3b      	ldrb	r3, [r7, #12]
 801406e:	2202      	movs	r2, #2
 8014070:	f362 1347 	bfi	r3, r2, #5, #3
 8014074:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	791b      	ldrb	r3, [r3, #4]
 801407a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	899b      	ldrh	r3, [r3, #12]
 8014088:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	7b9b      	ldrb	r3, [r3, #14]
 801408e:	777b      	strb	r3, [r7, #29]
            break;
 8014090:	e032      	b.n	80140f8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014092:	2301      	movs	r3, #1
 8014094:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	7bdb      	ldrb	r3, [r3, #15]
 801409a:	2b08      	cmp	r3, #8
 801409c:	bf28      	it	cs
 801409e:	2308      	movcs	r3, #8
 80140a0:	b2da      	uxtb	r2, r3
 80140a2:	4b4c      	ldr	r3, [pc, #304]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 80140a4:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80140a8:	7b3b      	ldrb	r3, [r7, #12]
 80140aa:	2204      	movs	r2, #4
 80140ac:	f362 1347 	bfi	r3, r2, #5, #3
 80140b0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	791b      	ldrb	r3, [r3, #4]
 80140b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	689b      	ldr	r3, [r3, #8]
 80140be:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	899b      	ldrh	r3, [r3, #12]
 80140c4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	7b9b      	ldrb	r3, [r3, #14]
 80140ca:	777b      	strb	r3, [r7, #29]
            break;
 80140cc:	e014      	b.n	80140f8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80140ce:	2301      	movs	r3, #1
 80140d0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80140d2:	4b40      	ldr	r3, [pc, #256]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 80140d4:	2201      	movs	r2, #1
 80140d6:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80140da:	7b3b      	ldrb	r3, [r7, #12]
 80140dc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80140e0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	891b      	ldrh	r3, [r3, #8]
 80140ec:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	7a9b      	ldrb	r3, [r3, #10]
 80140f2:	777b      	strb	r3, [r7, #29]
            break;
 80140f4:	e000      	b.n	80140f8 <LoRaMacMcpsRequest+0x108>
            break;
 80140f6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80140f8:	2302      	movs	r3, #2
 80140fa:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80140fc:	4b36      	ldr	r3, [pc, #216]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 80140fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014102:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014104:	4b34      	ldr	r3, [pc, #208]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 8014106:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801410a:	f107 0214 	add.w	r2, r7, #20
 801410e:	4611      	mov	r1, r2
 8014110:	4618      	mov	r0, r3
 8014112:	f002 f96a 	bl	80163ea <RegionGetPhyParam>
 8014116:	4603      	mov	r3, r0
 8014118:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	b25b      	sxtb	r3, r3
 801411e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8014122:	4293      	cmp	r3, r2
 8014124:	bfb8      	it	lt
 8014126:	4613      	movlt	r3, r2
 8014128:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801412a:	7f3b      	ldrb	r3, [r7, #28]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d044      	beq.n	80141ba <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8014130:	4b29      	ldr	r3, [pc, #164]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 8014132:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014136:	f083 0301 	eor.w	r3, r3, #1
 801413a:	b2db      	uxtb	r3, r3
 801413c:	2b00      	cmp	r3, #0
 801413e:	d019      	beq.n	8014174 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8014140:	7f7b      	ldrb	r3, [r7, #29]
 8014142:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014144:	4b24      	ldr	r3, [pc, #144]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 8014146:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801414a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801414c:	4b22      	ldr	r3, [pc, #136]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 801414e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014152:	f107 0108 	add.w	r1, r7, #8
 8014156:	2205      	movs	r2, #5
 8014158:	4618      	mov	r0, r3
 801415a:	f002 f981 	bl	8016460 <RegionVerify>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d005      	beq.n	8014170 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014164:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014168:	4b1b      	ldr	r3, [pc, #108]	; (80141d8 <LoRaMacMcpsRequest+0x1e8>)
 801416a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801416e:	e001      	b.n	8014174 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014170:	2303      	movs	r3, #3
 8014172:	e029      	b.n	80141c8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014174:	8bfa      	ldrh	r2, [r7, #30]
 8014176:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801417a:	f107 000c 	add.w	r0, r7, #12
 801417e:	78fb      	ldrb	r3, [r7, #3]
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	4613      	mov	r3, r2
 8014184:	6a3a      	ldr	r2, [r7, #32]
 8014186:	f7fd fc45 	bl	8011a14 <Send>
 801418a:	4603      	mov	r3, r0
 801418c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8014190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10c      	bne.n	80141b2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	781a      	ldrb	r2, [r3, #0]
 801419c:	4b0d      	ldr	r3, [pc, #52]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 801419e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80141a2:	4a0c      	ldr	r2, [pc, #48]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 80141a4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80141a8:	f043 0301 	orr.w	r3, r3, #1
 80141ac:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80141b0:	e003      	b.n	80141ba <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80141b2:	4b08      	ldr	r3, [pc, #32]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 80141b4:	2200      	movs	r2, #0
 80141b6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80141ba:	4b06      	ldr	r3, [pc, #24]	; (80141d4 <LoRaMacMcpsRequest+0x1e4>)
 80141bc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	611a      	str	r2, [r3, #16]

    return status;
 80141c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3728      	adds	r7, #40	; 0x28
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	20000d78 	.word	0x20000d78
 80141d4:	20000944 	.word	0x20000944
 80141d8:	20000e4c 	.word	0x20000e4c

080141dc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	4603      	mov	r3, r0
 80141e4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80141e6:	79fb      	ldrb	r3, [r7, #7]
 80141e8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80141ea:	4b0d      	ldr	r3, [pc, #52]	; (8014220 <LoRaMacTestSetDutyCycleOn+0x44>)
 80141ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141f0:	f107 010c 	add.w	r1, r7, #12
 80141f4:	220f      	movs	r2, #15
 80141f6:	4618      	mov	r0, r3
 80141f8:	f002 f932 	bl	8016460 <RegionVerify>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00a      	beq.n	8014218 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014202:	4a07      	ldr	r2, [pc, #28]	; (8014220 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014204:	79fb      	ldrb	r3, [r7, #7]
 8014206:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801420a:	4a06      	ldr	r2, [pc, #24]	; (8014224 <LoRaMacTestSetDutyCycleOn+0x48>)
 801420c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014210:	f043 0320 	orr.w	r3, r3, #32
 8014214:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8014218:	bf00      	nop
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	20000e4c 	.word	0x20000e4c
 8014224:	20000944 	.word	0x20000944

08014228 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801422c:	f7fe ff6c 	bl	8013108 <LoRaMacStop>
 8014230:	4603      	mov	r3, r0
 8014232:	2b00      	cmp	r3, #0
 8014234:	d115      	bne.n	8014262 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014236:	480c      	ldr	r0, [pc, #48]	; (8014268 <LoRaMacDeInitialization+0x40>)
 8014238:	f008 fd8c 	bl	801cd54 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801423c:	480b      	ldr	r0, [pc, #44]	; (801426c <LoRaMacDeInitialization+0x44>)
 801423e:	f008 fd89 	bl	801cd54 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014242:	480b      	ldr	r0, [pc, #44]	; (8014270 <LoRaMacDeInitialization+0x48>)
 8014244:	f008 fd86 	bl	801cd54 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8014248:	480a      	ldr	r0, [pc, #40]	; (8014274 <LoRaMacDeInitialization+0x4c>)
 801424a:	f008 fd83 	bl	801cd54 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801424e:	f000 f95e 	bl	801450e <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014252:	2000      	movs	r0, #0
 8014254:	f7fd ff3e 	bl	80120d4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014258:	4b07      	ldr	r3, [pc, #28]	; (8014278 <LoRaMacDeInitialization+0x50>)
 801425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801425c:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801425e:	2300      	movs	r3, #0
 8014260:	e000      	b.n	8014264 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014262:	2301      	movs	r3, #1
    }
}
 8014264:	4618      	mov	r0, r3
 8014266:	bd80      	pop	{r7, pc}
 8014268:	20000cac 	.word	0x20000cac
 801426c:	20000cc4 	.word	0x20000cc4
 8014270:	20000cdc 	.word	0x20000cdc
 8014274:	20000d38 	.word	0x20000d38
 8014278:	0801e604 	.word	0x0801e604

0801427c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b08c      	sub	sp, #48	; 0x30
 8014280:	af00      	add	r7, sp, #0
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	607a      	str	r2, [r7, #4]
 8014288:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801428a:	2300      	movs	r3, #0
 801428c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	7c1b      	ldrb	r3, [r3, #16]
 8014294:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	7c5b      	ldrb	r3, [r3, #17]
 801429c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	689a      	ldr	r2, [r3, #8]
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	795b      	ldrb	r3, [r3, #5]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	f000 808b 	beq.w	80143c8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80142b2:	2302      	movs	r3, #2
 80142b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	7c9b      	ldrb	r3, [r3, #18]
 80142bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	7cdb      	ldrb	r3, [r3, #19]
 80142c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80142c8:	4611      	mov	r1, r2
 80142ca:	4618      	mov	r0, r3
 80142cc:	f002 f88d 	bl	80163ea <RegionGetPhyParam>
 80142d0:	4603      	mov	r3, r0
 80142d2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80142d4:	6a3b      	ldr	r3, [r7, #32]
 80142d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80142da:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80142de:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80142e2:	4293      	cmp	r3, r2
 80142e4:	bfb8      	it	lt
 80142e6:	4613      	movlt	r3, r2
 80142e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80142ec:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80142f0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d106      	bne.n	8014306 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	2200      	movs	r2, #0
 80142fc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80142fe:	2300      	movs	r3, #0
 8014300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014304:	e060      	b.n	80143c8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	689b      	ldr	r3, [r3, #8]
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	8992      	ldrh	r2, [r2, #12]
 801430e:	4293      	cmp	r3, r2
 8014310:	d303      	bcc.n	801431a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8014312:	2301      	movs	r3, #1
 8014314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014318:	e002      	b.n	8014320 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801431a:	2300      	movs	r3, #0
 801431c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	8992      	ldrh	r2, [r2, #12]
 8014328:	4611      	mov	r1, r2
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	89d2      	ldrh	r2, [r2, #14]
 801432e:	440a      	add	r2, r1
 8014330:	4293      	cmp	r3, r2
 8014332:	d349      	bcc.n	80143c8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014334:	2308      	movs	r3, #8
 8014336:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	7cdb      	ldrb	r3, [r3, #19]
 801433e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014342:	4611      	mov	r1, r2
 8014344:	4618      	mov	r0, r3
 8014346:	f002 f850 	bl	80163ea <RegionGetPhyParam>
 801434a:	4603      	mov	r3, r0
 801434c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	689b      	ldr	r3, [r3, #8]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	89d2      	ldrh	r2, [r2, #14]
 801435c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014360:	fb01 f202 	mul.w	r2, r1, r2
 8014364:	1a9b      	subs	r3, r3, r2
 8014366:	2b01      	cmp	r3, #1
 8014368:	d12e      	bne.n	80143c8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801436a:	2322      	movs	r3, #34	; 0x22
 801436c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8014370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014374:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	7c9b      	ldrb	r3, [r3, #18]
 801437c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	7cdb      	ldrb	r3, [r3, #19]
 8014384:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014388:	4611      	mov	r1, r2
 801438a:	4618      	mov	r0, r3
 801438c:	f002 f82d 	bl	80163ea <RegionGetPhyParam>
 8014390:	4603      	mov	r3, r0
 8014392:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8014394:	6a3b      	ldr	r3, [r7, #32]
 8014396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801439a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801439e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d110      	bne.n	80143c8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80143a6:	2300      	movs	r3, #0
 80143a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	791b      	ldrb	r3, [r3, #4]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d009      	beq.n	80143c8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80143b4:	2302      	movs	r3, #2
 80143b6:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	7cdb      	ldrb	r3, [r3, #19]
 80143bc:	f107 0214 	add.w	r2, r7, #20
 80143c0:	4611      	mov	r1, r2
 80143c2:	4618      	mov	r0, r3
 80143c4:	f002 f83a 	bl	801643c <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80143ce:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80143d6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80143d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3730      	adds	r7, #48	; 0x30
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	60f8      	str	r0, [r7, #12]
 80143ec:	60b9      	str	r1, [r7, #8]
 80143ee:	607a      	str	r2, [r7, #4]
 80143f0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	789b      	ldrb	r3, [r3, #2]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d107      	bne.n	801440a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	68b9      	ldr	r1, [r7, #8]
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	f7ff ff3b 	bl	801427c <CalcNextV10X>
 8014406:	4603      	mov	r3, r0
 8014408:	e000      	b.n	801440c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801440a:	2300      	movs	r3, #0
}
 801440c:	4618      	mov	r0, r3
 801440e:	3710      	adds	r7, #16
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014414:	b480      	push	{r7}
 8014416:	b085      	sub	sp, #20
 8014418:	af00      	add	r7, sp, #0
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014420:	bf00      	nop
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	bc80      	pop	{r7}
 8014428:	4770      	bx	lr

0801442a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801442a:	b480      	push	{r7}
 801442c:	b083      	sub	sp, #12
 801442e:	af00      	add	r7, sp, #0
 8014430:	4603      	mov	r3, r0
 8014432:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	bc80      	pop	{r7}
 801443c:	4770      	bx	lr

0801443e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801443e:	b480      	push	{r7}
 8014440:	b083      	sub	sp, #12
 8014442:	af00      	add	r7, sp, #0
 8014444:	4603      	mov	r3, r0
 8014446:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014448:	bf00      	nop
 801444a:	370c      	adds	r7, #12
 801444c:	46bd      	mov	sp, r7
 801444e:	bc80      	pop	{r7}
 8014450:	4770      	bx	lr

08014452 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014452:	b480      	push	{r7}
 8014454:	b083      	sub	sp, #12
 8014456:	af00      	add	r7, sp, #0
 8014458:	4603      	mov	r3, r0
 801445a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801445c:	bf00      	nop
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	bc80      	pop	{r7}
 8014464:	4770      	bx	lr

08014466 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014466:	b480      	push	{r7}
 8014468:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801446a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801446c:	4618      	mov	r0, r3
 801446e:	46bd      	mov	sp, r7
 8014470:	bc80      	pop	{r7}
 8014472:	4770      	bx	lr

08014474 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801447c:	bf00      	nop
 801447e:	370c      	adds	r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	bc80      	pop	{r7}
 8014484:	4770      	bx	lr

08014486 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014486:	b480      	push	{r7}
 8014488:	b083      	sub	sp, #12
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801448e:	bf00      	nop
 8014490:	370c      	adds	r7, #12
 8014492:	46bd      	mov	sp, r7
 8014494:	bc80      	pop	{r7}
 8014496:	4770      	bx	lr

08014498 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144a0:	bf00      	nop
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bc80      	pop	{r7}
 80144a8:	4770      	bx	lr

080144aa <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80144aa:	b480      	push	{r7}
 80144ac:	b083      	sub	sp, #12
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	6078      	str	r0, [r7, #4]
 80144b2:	460b      	mov	r3, r1
 80144b4:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80144b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	bc80      	pop	{r7}
 80144c0:	4770      	bx	lr

080144c2 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80144c2:	b480      	push	{r7}
 80144c4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80144c6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bc80      	pop	{r7}
 80144ce:	4770      	bx	lr

080144d0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80144d0:	b480      	push	{r7}
 80144d2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80144d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	46bd      	mov	sp, r7
 80144da:	bc80      	pop	{r7}
 80144dc:	4770      	bx	lr

080144de <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80144de:	b480      	push	{r7}
 80144e0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80144e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bc80      	pop	{r7}
 80144ea:	4770      	bx	lr

080144ec <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80144ec:	b480      	push	{r7}
 80144ee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80144f0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bc80      	pop	{r7}
 80144f8:	4770      	bx	lr

080144fa <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80144fa:	b480      	push	{r7}
 80144fc:	b083      	sub	sp, #12
 80144fe:	af00      	add	r7, sp, #0
 8014500:	4603      	mov	r3, r0
 8014502:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014504:	bf00      	nop
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	bc80      	pop	{r7}
 801450c:	4770      	bx	lr

0801450e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801450e:	b480      	push	{r7}
 8014510:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014512:	bf00      	nop
 8014514:	46bd      	mov	sp, r7
 8014516:	bc80      	pop	{r7}
 8014518:	4770      	bx	lr

0801451a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801451a:	b480      	push	{r7}
 801451c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801451e:	bf00      	nop
 8014520:	46bd      	mov	sp, r7
 8014522:	bc80      	pop	{r7}
 8014524:	4770      	bx	lr

08014526 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014526:	b480      	push	{r7}
 8014528:	b083      	sub	sp, #12
 801452a:	af00      	add	r7, sp, #0
 801452c:	4603      	mov	r3, r0
 801452e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014530:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014532:	4618      	mov	r0, r3
 8014534:	370c      	adds	r7, #12
 8014536:	46bd      	mov	sp, r7
 8014538:	bc80      	pop	{r7}
 801453a:	4770      	bx	lr

0801453c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014544:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014546:	4618      	mov	r0, r3
 8014548:	370c      	adds	r7, #12
 801454a:	46bd      	mov	sp, r7
 801454c:	bc80      	pop	{r7}
 801454e:	4770      	bx	lr

08014550 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014558:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801455a:	4618      	mov	r0, r3
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	bc80      	pop	{r7}
 8014562:	4770      	bx	lr

08014564 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014564:	b480      	push	{r7}
 8014566:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014568:	bf00      	nop
 801456a:	46bd      	mov	sp, r7
 801456c:	bc80      	pop	{r7}
 801456e:	4770      	bx	lr

08014570 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	4603      	mov	r3, r0
 8014578:	6039      	str	r1, [r7, #0]
 801457a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801457c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801457e:	4618      	mov	r0, r3
 8014580:	370c      	adds	r7, #12
 8014582:	46bd      	mov	sp, r7
 8014584:	bc80      	pop	{r7}
 8014586:	4770      	bx	lr

08014588 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014588:	b480      	push	{r7}
 801458a:	b083      	sub	sp, #12
 801458c:	af00      	add	r7, sp, #0
 801458e:	4603      	mov	r3, r0
 8014590:	603a      	str	r2, [r7, #0]
 8014592:	80fb      	strh	r3, [r7, #6]
 8014594:	460b      	mov	r3, r1
 8014596:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014598:	bf00      	nop
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	bc80      	pop	{r7}
 80145a0:	4770      	bx	lr

080145a2 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80145a2:	b480      	push	{r7}
 80145a4:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145a6:	bf00      	nop
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bc80      	pop	{r7}
 80145ac:	4770      	bx	lr

080145ae <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80145ae:	b480      	push	{r7}
 80145b0:	b083      	sub	sp, #12
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80145b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	bc80      	pop	{r7}
 80145c0:	4770      	bx	lr

080145c2 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80145c2:	b480      	push	{r7}
 80145c4:	b083      	sub	sp, #12
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80145ca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bc80      	pop	{r7}
 80145d4:	4770      	bx	lr

080145d6 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80145d6:	b480      	push	{r7}
 80145d8:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145da:	bf00      	nop
 80145dc:	46bd      	mov	sp, r7
 80145de:	bc80      	pop	{r7}
 80145e0:	4770      	bx	lr

080145e2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80145e2:	b480      	push	{r7}
 80145e4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145e6:	bf00      	nop
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bc80      	pop	{r7}
 80145ec:	4770      	bx	lr

080145ee <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80145ee:	b480      	push	{r7}
 80145f0:	b085      	sub	sp, #20
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80145fa:	2300      	movs	r3, #0
 80145fc:	81fb      	strh	r3, [r7, #14]
 80145fe:	e00a      	b.n	8014616 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014600:	89fb      	ldrh	r3, [r7, #14]
 8014602:	68ba      	ldr	r2, [r7, #8]
 8014604:	4413      	add	r3, r2
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d001      	beq.n	8014610 <IsSlotFree+0x22>
        {
            return false;
 801460c:	2300      	movs	r3, #0
 801460e:	e006      	b.n	801461e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014610:	89fb      	ldrh	r3, [r7, #14]
 8014612:	3301      	adds	r3, #1
 8014614:	81fb      	strh	r3, [r7, #14]
 8014616:	89fb      	ldrh	r3, [r7, #14]
 8014618:	2b0f      	cmp	r3, #15
 801461a:	d9f1      	bls.n	8014600 <IsSlotFree+0x12>
        }
    }
    return true;
 801461c:	2301      	movs	r3, #1
}
 801461e:	4618      	mov	r0, r3
 8014620:	3714      	adds	r7, #20
 8014622:	46bd      	mov	sp, r7
 8014624:	bc80      	pop	{r7}
 8014626:	4770      	bx	lr

08014628 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801462e:	2300      	movs	r3, #0
 8014630:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014632:	e007      	b.n	8014644 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014634:	79fb      	ldrb	r3, [r7, #7]
 8014636:	3301      	adds	r3, #1
 8014638:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801463a:	79fb      	ldrb	r3, [r7, #7]
 801463c:	2b0f      	cmp	r3, #15
 801463e:	d101      	bne.n	8014644 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014640:	2300      	movs	r3, #0
 8014642:	e012      	b.n	801466a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014644:	79fb      	ldrb	r3, [r7, #7]
 8014646:	011b      	lsls	r3, r3, #4
 8014648:	3308      	adds	r3, #8
 801464a:	4a0a      	ldr	r2, [pc, #40]	; (8014674 <MallocNewMacCommandSlot+0x4c>)
 801464c:	4413      	add	r3, r2
 801464e:	4618      	mov	r0, r3
 8014650:	f7ff ffcd 	bl	80145ee <IsSlotFree>
 8014654:	4603      	mov	r3, r0
 8014656:	f083 0301 	eor.w	r3, r3, #1
 801465a:	b2db      	uxtb	r3, r3
 801465c:	2b00      	cmp	r3, #0
 801465e:	d1e9      	bne.n	8014634 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014660:	79fb      	ldrb	r3, [r7, #7]
 8014662:	011b      	lsls	r3, r3, #4
 8014664:	3308      	adds	r3, #8
 8014666:	4a03      	ldr	r2, [pc, #12]	; (8014674 <MallocNewMacCommandSlot+0x4c>)
 8014668:	4413      	add	r3, r2
}
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	200015cc 	.word	0x200015cc

08014678 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <FreeMacCommandSlot+0x12>
    {
        return false;
 8014686:	2300      	movs	r3, #0
 8014688:	e005      	b.n	8014696 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801468a:	2210      	movs	r2, #16
 801468c:	2100      	movs	r1, #0
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f004 fa00 	bl	8018a94 <memset1>

    return true;
 8014694:	2301      	movs	r3, #1
}
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801469e:	b480      	push	{r7}
 80146a0:	b083      	sub	sp, #12
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d101      	bne.n	80146b0 <LinkedListInit+0x12>
    {
        return false;
 80146ac:	2300      	movs	r3, #0
 80146ae:	e006      	b.n	80146be <LinkedListInit+0x20>
    }

    list->First = NULL;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2200      	movs	r2, #0
 80146ba:	605a      	str	r2, [r3, #4]

    return true;
 80146bc:	2301      	movs	r3, #1
}
 80146be:	4618      	mov	r0, r3
 80146c0:	370c      	adds	r7, #12
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bc80      	pop	{r7}
 80146c6:	4770      	bx	lr

080146c8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d002      	beq.n	80146de <LinkedListAdd+0x16>
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d101      	bne.n	80146e2 <LinkedListAdd+0x1a>
    {
        return false;
 80146de:	2300      	movs	r3, #0
 80146e0:	e015      	b.n	801470e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d102      	bne.n	80146f0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	683a      	ldr	r2, [r7, #0]
 80146ee:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d003      	beq.n	8014700 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	2200      	movs	r2, #0
 8014704:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	683a      	ldr	r2, [r7, #0]
 801470a:	605a      	str	r2, [r3, #4]

    return true;
 801470c:	2301      	movs	r3, #1
}
 801470e:	4618      	mov	r0, r3
 8014710:	370c      	adds	r7, #12
 8014712:	46bd      	mov	sp, r7
 8014714:	bc80      	pop	{r7}
 8014716:	4770      	bx	lr

08014718 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014718:	b480      	push	{r7}
 801471a:	b085      	sub	sp, #20
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <LinkedListGetPrevious+0x16>
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d101      	bne.n	8014732 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801472e:	2300      	movs	r3, #0
 8014730:	e016      	b.n	8014760 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	429a      	cmp	r2, r3
 801473e:	d00c      	beq.n	801475a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014740:	e002      	b.n	8014748 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d007      	beq.n	801475e <LinkedListGetPrevious+0x46>
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	683a      	ldr	r2, [r7, #0]
 8014754:	429a      	cmp	r2, r3
 8014756:	d1f4      	bne.n	8014742 <LinkedListGetPrevious+0x2a>
 8014758:	e001      	b.n	801475e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801475a:	2300      	movs	r3, #0
 801475c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801475e:	68fb      	ldr	r3, [r7, #12]
}
 8014760:	4618      	mov	r0, r3
 8014762:	3714      	adds	r7, #20
 8014764:	46bd      	mov	sp, r7
 8014766:	bc80      	pop	{r7}
 8014768:	4770      	bx	lr

0801476a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b084      	sub	sp, #16
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
 8014772:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d002      	beq.n	8014780 <LinkedListRemove+0x16>
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d101      	bne.n	8014784 <LinkedListRemove+0x1a>
    {
        return false;
 8014780:	2300      	movs	r3, #0
 8014782:	e020      	b.n	80147c6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014784:	6839      	ldr	r1, [r7, #0]
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7ff ffc6 	bl	8014718 <LinkedListGetPrevious>
 801478c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	429a      	cmp	r2, r3
 8014796:	d103      	bne.n	80147a0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	685b      	ldr	r3, [r3, #4]
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d102      	bne.n	80147b0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	68fa      	ldr	r2, [r7, #12]
 80147ae:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d003      	beq.n	80147be <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]

    return true;
 80147c4:	2301      	movs	r3, #1
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80147ce:	b480      	push	{r7}
 80147d0:	b083      	sub	sp, #12
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	4603      	mov	r3, r0
 80147d6:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80147d8:	79fb      	ldrb	r3, [r7, #7]
 80147da:	2b05      	cmp	r3, #5
 80147dc:	d004      	beq.n	80147e8 <IsSticky+0x1a>
 80147de:	2b05      	cmp	r3, #5
 80147e0:	db04      	blt.n	80147ec <IsSticky+0x1e>
 80147e2:	3b08      	subs	r3, #8
 80147e4:	2b02      	cmp	r3, #2
 80147e6:	d801      	bhi.n	80147ec <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80147e8:	2301      	movs	r3, #1
 80147ea:	e000      	b.n	80147ee <IsSticky+0x20>
        default:
            return false;
 80147ec:	2300      	movs	r3, #0
    }
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bc80      	pop	{r7}
 80147f6:	4770      	bx	lr

080147f8 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014802:	2300      	movs	r3, #0
    }
}
 8014804:	4618      	mov	r0, r3
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	bc80      	pop	{r7}
 801480c:	4770      	bx	lr
	...

08014810 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014814:	22fc      	movs	r2, #252	; 0xfc
 8014816:	2100      	movs	r1, #0
 8014818:	4804      	ldr	r0, [pc, #16]	; (801482c <LoRaMacCommandsInit+0x1c>)
 801481a:	f004 f93b 	bl	8018a94 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801481e:	4803      	ldr	r0, [pc, #12]	; (801482c <LoRaMacCommandsInit+0x1c>)
 8014820:	f7ff ff3d 	bl	801469e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	200015cc 	.word	0x200015cc

08014830 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af00      	add	r7, sp, #0
 8014836:	4603      	mov	r3, r0
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
 801483c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d101      	bne.n	8014848 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014844:	2301      	movs	r3, #1
 8014846:	e03b      	b.n	80148c0 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014848:	f7ff feee 	bl	8014628 <MallocNewMacCommandSlot>
 801484c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d101      	bne.n	8014858 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014854:	2302      	movs	r3, #2
 8014856:	e033      	b.n	80148c0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014858:	6979      	ldr	r1, [r7, #20]
 801485a:	481b      	ldr	r0, [pc, #108]	; (80148c8 <LoRaMacCommandsAddCmd+0x98>)
 801485c:	f7ff ff34 	bl	80146c8 <LinkedListAdd>
 8014860:	4603      	mov	r3, r0
 8014862:	f083 0301 	eor.w	r3, r3, #1
 8014866:	b2db      	uxtb	r3, r3
 8014868:	2b00      	cmp	r3, #0
 801486a:	d001      	beq.n	8014870 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801486c:	2305      	movs	r3, #5
 801486e:	e027      	b.n	80148c0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	7bfa      	ldrb	r2, [r7, #15]
 8014874:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	3305      	adds	r3, #5
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	b292      	uxth	r2, r2
 8014884:	68b9      	ldr	r1, [r7, #8]
 8014886:	4618      	mov	r0, r3
 8014888:	f004 f8c9 	bl	8018a1e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff ff9d 	bl	80147ce <IsSticky>
 8014894:	4603      	mov	r3, r0
 8014896:	461a      	mov	r2, r3
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 801489c:	7bfb      	ldrb	r3, [r7, #15]
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff ffaa 	bl	80147f8 <IsConfirmationRequired>
 80148a4:	4603      	mov	r3, r0
 80148a6:	461a      	mov	r2, r3
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80148ac:	4b06      	ldr	r3, [pc, #24]	; (80148c8 <LoRaMacCommandsAddCmd+0x98>)
 80148ae:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4413      	add	r3, r2
 80148b6:	3301      	adds	r3, #1
 80148b8:	4a03      	ldr	r2, [pc, #12]	; (80148c8 <LoRaMacCommandsAddCmd+0x98>)
 80148ba:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80148be:	2300      	movs	r3, #0
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3718      	adds	r7, #24
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	200015cc 	.word	0x200015cc

080148cc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80148da:	2301      	movs	r3, #1
 80148dc:	e021      	b.n	8014922 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80148de:	6879      	ldr	r1, [r7, #4]
 80148e0:	4812      	ldr	r0, [pc, #72]	; (801492c <LoRaMacCommandsRemoveCmd+0x60>)
 80148e2:	f7ff ff42 	bl	801476a <LinkedListRemove>
 80148e6:	4603      	mov	r3, r0
 80148e8:	f083 0301 	eor.w	r3, r3, #1
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d001      	beq.n	80148f6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80148f2:	2303      	movs	r3, #3
 80148f4:	e015      	b.n	8014922 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80148f6:	4b0d      	ldr	r3, [pc, #52]	; (801492c <LoRaMacCommandsRemoveCmd+0x60>)
 80148f8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	689b      	ldr	r3, [r3, #8]
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	3b01      	subs	r3, #1
 8014904:	4a09      	ldr	r2, [pc, #36]	; (801492c <LoRaMacCommandsRemoveCmd+0x60>)
 8014906:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7ff feb4 	bl	8014678 <FreeMacCommandSlot>
 8014910:	4603      	mov	r3, r0
 8014912:	f083 0301 	eor.w	r3, r3, #1
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	d001      	beq.n	8014920 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801491c:	2305      	movs	r3, #5
 801491e:	e000      	b.n	8014922 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014920:	2300      	movs	r3, #0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	200015cc 	.word	0x200015cc

08014930 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014930:	b480      	push	{r7}
 8014932:	b085      	sub	sp, #20
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	6039      	str	r1, [r7, #0]
 801493a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801493c:	4b0e      	ldr	r3, [pc, #56]	; (8014978 <LoRaMacCommandsGetCmd+0x48>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014942:	e002      	b.n	801494a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d004      	beq.n	801495a <LoRaMacCommandsGetCmd+0x2a>
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	791b      	ldrb	r3, [r3, #4]
 8014954:	79fa      	ldrb	r2, [r7, #7]
 8014956:	429a      	cmp	r2, r3
 8014958:	d1f4      	bne.n	8014944 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	68fa      	ldr	r2, [r7, #12]
 801495e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d101      	bne.n	801496a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014966:	2303      	movs	r3, #3
 8014968:	e000      	b.n	801496c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801496a:	2300      	movs	r3, #0
}
 801496c:	4618      	mov	r0, r3
 801496e:	3714      	adds	r7, #20
 8014970:	46bd      	mov	sp, r7
 8014972:	bc80      	pop	{r7}
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop
 8014978:	200015cc 	.word	0x200015cc

0801497c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014982:	4b0f      	ldr	r3, [pc, #60]	; (80149c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014988:	e012      	b.n	80149b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	7b1b      	ldrb	r3, [r3, #12]
 801498e:	f083 0301 	eor.w	r3, r3, #1
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b00      	cmp	r3, #0
 8014996:	d008      	beq.n	80149aa <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f7ff ff94 	bl	80148cc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	607b      	str	r3, [r7, #4]
 80149a8:	e002      	b.n	80149b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1e9      	bne.n	801498a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	200015cc 	.word	0x200015cc

080149c4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80149ca:	4b13      	ldr	r3, [pc, #76]	; (8014a18 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80149d0:	e01a      	b.n	8014a08 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	791b      	ldrb	r3, [r3, #4]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7ff fef6 	bl	80147ce <IsSticky>
 80149e2:	4603      	mov	r3, r0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d00d      	beq.n	8014a04 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	791b      	ldrb	r3, [r3, #4]
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7ff ff03 	bl	80147f8 <IsConfirmationRequired>
 80149f2:	4603      	mov	r3, r0
 80149f4:	f083 0301 	eor.w	r3, r3, #1
 80149f8:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f7ff ff64 	bl	80148cc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d1e1      	bne.n	80149d2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014a0e:	2300      	movs	r3, #0
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	200015cc 	.word	0x200015cc

08014a1c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b083      	sub	sp, #12
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d101      	bne.n	8014a2e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e005      	b.n	8014a3a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014a2e:	4b05      	ldr	r3, [pc, #20]	; (8014a44 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014a30:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	370c      	adds	r7, #12
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bc80      	pop	{r7}
 8014a42:	4770      	bx	lr
 8014a44:	200015cc 	.word	0x200015cc

08014a48 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b088      	sub	sp, #32
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014a54:	4b25      	ldr	r3, [pc, #148]	; (8014aec <LoRaMacCommandsSerializeCmds+0xa4>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d002      	beq.n	8014a6a <LoRaMacCommandsSerializeCmds+0x22>
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d126      	bne.n	8014ab8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e039      	b.n	8014ae2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014a6e:	7efb      	ldrb	r3, [r7, #27]
 8014a70:	68fa      	ldr	r2, [r7, #12]
 8014a72:	1ad2      	subs	r2, r2, r3
 8014a74:	69fb      	ldr	r3, [r7, #28]
 8014a76:	689b      	ldr	r3, [r3, #8]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d320      	bcc.n	8014ac0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014a7e:	7efb      	ldrb	r3, [r7, #27]
 8014a80:	1c5a      	adds	r2, r3, #1
 8014a82:	76fa      	strb	r2, [r7, #27]
 8014a84:	461a      	mov	r2, r3
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4413      	add	r3, r2
 8014a8a:	69fa      	ldr	r2, [r7, #28]
 8014a8c:	7912      	ldrb	r2, [r2, #4]
 8014a8e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014a90:	7efb      	ldrb	r3, [r7, #27]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	18d0      	adds	r0, r2, r3
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	1d59      	adds	r1, r3, #5
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	f003 ffbc 	bl	8018a1e <memcpy1>
            itr += curElement->PayloadSize;
 8014aa6:	69fb      	ldr	r3, [r7, #28]
 8014aa8:	689b      	ldr	r3, [r3, #8]
 8014aaa:	b2da      	uxtb	r2, r3
 8014aac:	7efb      	ldrb	r3, [r7, #27]
 8014aae:	4413      	add	r3, r2
 8014ab0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1d7      	bne.n	8014a6e <LoRaMacCommandsSerializeCmds+0x26>
 8014abe:	e009      	b.n	8014ad4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014ac0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014ac2:	e007      	b.n	8014ad4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014aca:	69f8      	ldr	r0, [r7, #28]
 8014acc:	f7ff fefe 	bl	80148cc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d1f4      	bne.n	8014ac4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014ada:	68b8      	ldr	r0, [r7, #8]
 8014adc:	f7ff ff9e 	bl	8014a1c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014ae0:	2300      	movs	r3, #0
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3720      	adds	r7, #32
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	200015cc 	.word	0x200015cc

08014af0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014af0:	b480      	push	{r7}
 8014af2:	b085      	sub	sp, #20
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	4603      	mov	r3, r0
 8014af8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014afe:	79fb      	ldrb	r3, [r7, #7]
 8014b00:	3b02      	subs	r3, #2
 8014b02:	2b11      	cmp	r3, #17
 8014b04:	d850      	bhi.n	8014ba8 <LoRaMacCommandsGetCmdSize+0xb8>
 8014b06:	a201      	add	r2, pc, #4	; (adr r2, 8014b0c <LoRaMacCommandsGetCmdSize+0x1c>)
 8014b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b0c:	08014b55 	.word	0x08014b55
 8014b10:	08014b5b 	.word	0x08014b5b
 8014b14:	08014b61 	.word	0x08014b61
 8014b18:	08014b67 	.word	0x08014b67
 8014b1c:	08014b6d 	.word	0x08014b6d
 8014b20:	08014b73 	.word	0x08014b73
 8014b24:	08014b79 	.word	0x08014b79
 8014b28:	08014b7f 	.word	0x08014b7f
 8014b2c:	08014b85 	.word	0x08014b85
 8014b30:	08014ba9 	.word	0x08014ba9
 8014b34:	08014ba9 	.word	0x08014ba9
 8014b38:	08014b8b 	.word	0x08014b8b
 8014b3c:	08014ba9 	.word	0x08014ba9
 8014b40:	08014ba9 	.word	0x08014ba9
 8014b44:	08014b91 	.word	0x08014b91
 8014b48:	08014b97 	.word	0x08014b97
 8014b4c:	08014b9d 	.word	0x08014b9d
 8014b50:	08014ba3 	.word	0x08014ba3
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014b54:	2303      	movs	r3, #3
 8014b56:	73fb      	strb	r3, [r7, #15]
            break;
 8014b58:	e027      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014b5a:	2305      	movs	r3, #5
 8014b5c:	73fb      	strb	r3, [r7, #15]
            break;
 8014b5e:	e024      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014b60:	2302      	movs	r3, #2
 8014b62:	73fb      	strb	r3, [r7, #15]
            break;
 8014b64:	e021      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014b66:	2305      	movs	r3, #5
 8014b68:	73fb      	strb	r3, [r7, #15]
            break;
 8014b6a:	e01e      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	73fb      	strb	r3, [r7, #15]
            break;
 8014b70:	e01b      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014b72:	2306      	movs	r3, #6
 8014b74:	73fb      	strb	r3, [r7, #15]
            break;
 8014b76:	e018      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014b78:	2302      	movs	r3, #2
 8014b7a:	73fb      	strb	r3, [r7, #15]
            break;
 8014b7c:	e015      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014b7e:	2302      	movs	r3, #2
 8014b80:	73fb      	strb	r3, [r7, #15]
            break;
 8014b82:	e012      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014b84:	2305      	movs	r3, #5
 8014b86:	73fb      	strb	r3, [r7, #15]
            break;
 8014b88:	e00f      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014b8a:	2306      	movs	r3, #6
 8014b8c:	73fb      	strb	r3, [r7, #15]
            break;
 8014b8e:	e00c      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014b90:	2301      	movs	r3, #1
 8014b92:	73fb      	strb	r3, [r7, #15]
            break;
 8014b94:	e009      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014b96:	2305      	movs	r3, #5
 8014b98:	73fb      	strb	r3, [r7, #15]
            break;
 8014b9a:	e006      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014b9c:	2304      	movs	r3, #4
 8014b9e:	73fb      	strb	r3, [r7, #15]
            break;
 8014ba0:	e003      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014ba2:	2304      	movs	r3, #4
 8014ba4:	73fb      	strb	r3, [r7, #15]
            break;
 8014ba6:	e000      	b.n	8014baa <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014ba8:	bf00      	nop
        }
    }
    return cidSize;
 8014baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3714      	adds	r7, #20
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bc80      	pop	{r7}
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop

08014bb8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b083      	sub	sp, #12
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4a07      	ldr	r2, [pc, #28]	; (8014be0 <IncreaseBufferPointer+0x28>)
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d102      	bne.n	8014bce <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014bc8:	4b06      	ldr	r3, [pc, #24]	; (8014be4 <IncreaseBufferPointer+0x2c>)
 8014bca:	607b      	str	r3, [r7, #4]
 8014bcc:	e002      	b.n	8014bd4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014bd4:	687b      	ldr	r3, [r7, #4]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	370c      	adds	r7, #12
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bc80      	pop	{r7}
 8014bde:	4770      	bx	lr
 8014be0:	200016e4 	.word	0x200016e4
 8014be4:	200016d4 	.word	0x200016d4

08014be8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	4603      	mov	r3, r0
 8014bf0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014bf2:	79fb      	ldrb	r3, [r7, #7]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d101      	bne.n	8014bfc <IsListEmpty+0x14>
    {
        return true;
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	e000      	b.n	8014bfe <IsListEmpty+0x16>
    }
    return false;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	370c      	adds	r7, #12
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bc80      	pop	{r7}
 8014c06:	4770      	bx	lr

08014c08 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	4603      	mov	r3, r0
 8014c10:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	2b04      	cmp	r3, #4
 8014c16:	d901      	bls.n	8014c1c <IsListFull+0x14>
    {
        return true;
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e000      	b.n	8014c1e <IsListFull+0x16>
    }
    return false;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	370c      	adds	r7, #12
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bc80      	pop	{r7}
 8014c26:	4770      	bx	lr

08014c28 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	4603      	mov	r3, r0
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	607a      	str	r2, [r7, #4]
 8014c34:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014c3a:	4b13      	ldr	r3, [pc, #76]	; (8014c88 <GetElement+0x60>)
 8014c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7ff ffd1 	bl	8014be8 <IsListEmpty>
 8014c46:	4603      	mov	r3, r0
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d001      	beq.n	8014c50 <GetElement+0x28>
    {
        return NULL;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	e017      	b.n	8014c80 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014c50:	2300      	movs	r3, #0
 8014c52:	74fb      	strb	r3, [r7, #19]
 8014c54:	e00d      	b.n	8014c72 <GetElement+0x4a>
    {
        if( element->Request == request )
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	7bfa      	ldrb	r2, [r7, #15]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d101      	bne.n	8014c64 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	e00d      	b.n	8014c80 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014c64:	6978      	ldr	r0, [r7, #20]
 8014c66:	f7ff ffa7 	bl	8014bb8 <IncreaseBufferPointer>
 8014c6a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014c6c:	7cfb      	ldrb	r3, [r7, #19]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	74fb      	strb	r3, [r7, #19]
 8014c72:	4b05      	ldr	r3, [pc, #20]	; (8014c88 <GetElement+0x60>)
 8014c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c78:	7cfa      	ldrb	r2, [r7, #19]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d3eb      	bcc.n	8014c56 <GetElement+0x2e>
    }

    return NULL;
 8014c7e:	2300      	movs	r3, #0
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3718      	adds	r7, #24
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	200016c8 	.word	0x200016c8

08014c8c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014c94:	4a0c      	ldr	r2, [pc, #48]	; (8014cc8 <LoRaMacConfirmQueueInit+0x3c>)
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014c9a:	4b0b      	ldr	r3, [pc, #44]	; (8014cc8 <LoRaMacConfirmQueueInit+0x3c>)
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014ca2:	4b09      	ldr	r3, [pc, #36]	; (8014cc8 <LoRaMacConfirmQueueInit+0x3c>)
 8014ca4:	4a09      	ldr	r2, [pc, #36]	; (8014ccc <LoRaMacConfirmQueueInit+0x40>)
 8014ca6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014ca8:	4b07      	ldr	r3, [pc, #28]	; (8014cc8 <LoRaMacConfirmQueueInit+0x3c>)
 8014caa:	4a08      	ldr	r2, [pc, #32]	; (8014ccc <LoRaMacConfirmQueueInit+0x40>)
 8014cac:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014cae:	2214      	movs	r2, #20
 8014cb0:	21ff      	movs	r1, #255	; 0xff
 8014cb2:	4806      	ldr	r0, [pc, #24]	; (8014ccc <LoRaMacConfirmQueueInit+0x40>)
 8014cb4:	f003 feee 	bl	8018a94 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014cb8:	4b03      	ldr	r3, [pc, #12]	; (8014cc8 <LoRaMacConfirmQueueInit+0x3c>)
 8014cba:	2201      	movs	r2, #1
 8014cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014cc0:	bf00      	nop
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	200016c8 	.word	0x200016c8
 8014ccc:	200016d4 	.word	0x200016d4

08014cd0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014cd8:	4b19      	ldr	r3, [pc, #100]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ff ff92 	bl	8014c08 <IsListFull>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d001      	beq.n	8014cee <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014cea:	2300      	movs	r3, #0
 8014cec:	e023      	b.n	8014d36 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014cee:	4b14      	ldr	r3, [pc, #80]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	7812      	ldrb	r2, [r2, #0]
 8014cf6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014cf8:	4b11      	ldr	r3, [pc, #68]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	7852      	ldrb	r2, [r2, #1]
 8014d00:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014d02:	4b0f      	ldr	r3, [pc, #60]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d04:	689b      	ldr	r3, [r3, #8]
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	78d2      	ldrb	r2, [r2, #3]
 8014d0a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8014d0c:	4b0c      	ldr	r3, [pc, #48]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d0e:	689b      	ldr	r3, [r3, #8]
 8014d10:	2200      	movs	r2, #0
 8014d12:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014d14:	4b0a      	ldr	r3, [pc, #40]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	b2da      	uxtb	r2, r3
 8014d1e:	4b08      	ldr	r3, [pc, #32]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d20:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014d24:	4b06      	ldr	r3, [pc, #24]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d26:	689b      	ldr	r3, [r3, #8]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff ff45 	bl	8014bb8 <IncreaseBufferPointer>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	4a03      	ldr	r2, [pc, #12]	; (8014d40 <LoRaMacConfirmQueueAdd+0x70>)
 8014d32:	6093      	str	r3, [r2, #8]

    return true;
 8014d34:	2301      	movs	r3, #1
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3708      	adds	r7, #8
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	200016c8 	.word	0x200016c8

08014d44 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014d48:	4b0e      	ldr	r3, [pc, #56]	; (8014d84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7ff ff4a 	bl	8014be8 <IsListEmpty>
 8014d54:	4603      	mov	r3, r0
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d001      	beq.n	8014d5e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e010      	b.n	8014d80 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014d5e:	4b09      	ldr	r3, [pc, #36]	; (8014d84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d64:	3b01      	subs	r3, #1
 8014d66:	b2da      	uxtb	r2, r3
 8014d68:	4b06      	ldr	r3, [pc, #24]	; (8014d84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014d6a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014d6e:	4b05      	ldr	r3, [pc, #20]	; (8014d84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7ff ff20 	bl	8014bb8 <IncreaseBufferPointer>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	4a02      	ldr	r2, [pc, #8]	; (8014d84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014d7c:	6053      	str	r3, [r2, #4]

    return true;
 8014d7e:	2301      	movs	r3, #1
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	200016c8 	.word	0x200016c8

08014d88 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	4603      	mov	r3, r0
 8014d90:	460a      	mov	r2, r1
 8014d92:	71fb      	strb	r3, [r7, #7]
 8014d94:	4613      	mov	r3, r2
 8014d96:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014d9c:	4b10      	ldr	r3, [pc, #64]	; (8014de0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7ff ff20 	bl	8014be8 <IsListEmpty>
 8014da8:	4603      	mov	r3, r0
 8014daa:	f083 0301 	eor.w	r3, r3, #1
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d011      	beq.n	8014dd8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014db4:	4b0a      	ldr	r3, [pc, #40]	; (8014de0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014db6:	6859      	ldr	r1, [r3, #4]
 8014db8:	4b09      	ldr	r3, [pc, #36]	; (8014de0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014dba:	689a      	ldr	r2, [r3, #8]
 8014dbc:	79bb      	ldrb	r3, [r7, #6]
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7ff ff32 	bl	8014c28 <GetElement>
 8014dc4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d005      	beq.n	8014dd8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	79fa      	ldrb	r2, [r7, #7]
 8014dd0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014dd8:	bf00      	nop
 8014dda:	3710      	adds	r7, #16
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	200016c8 	.word	0x200016c8

08014de4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	4603      	mov	r3, r0
 8014dec:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014dee:	2300      	movs	r3, #0
 8014df0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014df2:	4b10      	ldr	r3, [pc, #64]	; (8014e34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7ff fef5 	bl	8014be8 <IsListEmpty>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	f083 0301 	eor.w	r3, r3, #1
 8014e04:	b2db      	uxtb	r3, r3
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00e      	beq.n	8014e28 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014e0a:	4b0a      	ldr	r3, [pc, #40]	; (8014e34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014e0c:	6859      	ldr	r1, [r3, #4]
 8014e0e:	4b09      	ldr	r3, [pc, #36]	; (8014e34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014e10:	689a      	ldr	r2, [r3, #8]
 8014e12:	79fb      	ldrb	r3, [r7, #7]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff ff07 	bl	8014c28 <GetElement>
 8014e1a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d002      	beq.n	8014e28 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	785b      	ldrb	r3, [r3, #1]
 8014e26:	e000      	b.n	8014e2a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014e28:	2301      	movs	r3, #1
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	200016c8 	.word	0x200016c8

08014e38 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	4603      	mov	r3, r0
 8014e40:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014e42:	4b16      	ldr	r3, [pc, #88]	; (8014e9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014e48:	4a14      	ldr	r2, [pc, #80]	; (8014e9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014e4a:	79fb      	ldrb	r3, [r7, #7]
 8014e4c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014e50:	4b12      	ldr	r3, [pc, #72]	; (8014e9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7ff fec6 	bl	8014be8 <IsListEmpty>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	f083 0301 	eor.w	r3, r3, #1
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d015      	beq.n	8014e94 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	79fa      	ldrb	r2, [r7, #7]
 8014e6c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	78db      	ldrb	r3, [r3, #3]
 8014e72:	f083 0301 	eor.w	r3, r3, #1
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d002      	beq.n	8014e82 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2201      	movs	r2, #1
 8014e80:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014e82:	68f8      	ldr	r0, [r7, #12]
 8014e84:	f7ff fe98 	bl	8014bb8 <IncreaseBufferPointer>
 8014e88:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014e8a:	4b04      	ldr	r3, [pc, #16]	; (8014e9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	68fa      	ldr	r2, [r7, #12]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d1e9      	bne.n	8014e68 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014e94:	bf00      	nop
 8014e96:	3710      	adds	r7, #16
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	200016c8 	.word	0x200016c8

08014ea0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014eaa:	4b09      	ldr	r3, [pc, #36]	; (8014ed0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014eac:	6859      	ldr	r1, [r3, #4]
 8014eae:	4b08      	ldr	r3, [pc, #32]	; (8014ed0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014eb0:	689a      	ldr	r2, [r3, #8]
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7ff feb7 	bl	8014c28 <GetElement>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d001      	beq.n	8014ec4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e000      	b.n	8014ec6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014ec4:	2300      	movs	r3, #0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	200016c8 	.word	0x200016c8

08014ed4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b084      	sub	sp, #16
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014edc:	4b25      	ldr	r3, [pc, #148]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ee2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8014ee8:	f107 0308 	add.w	r3, r7, #8
 8014eec:	2204      	movs	r2, #4
 8014eee:	2100      	movs	r1, #0
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f003 fdcf 	bl	8018a94 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	73fb      	strb	r3, [r7, #15]
 8014efa:	e032      	b.n	8014f62 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014efc:	4b1d      	ldr	r3, [pc, #116]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	781a      	ldrb	r2, [r3, #0]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014f06:	4b1b      	ldr	r3, [pc, #108]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	785a      	ldrb	r2, [r3, #1]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014f10:	4b18      	ldr	r3, [pc, #96]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	789b      	ldrb	r3, [r3, #2]
 8014f16:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014f18:	7b7b      	ldrb	r3, [r7, #13]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d005      	beq.n	8014f2a <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014f1e:	4b15      	ldr	r3, [pc, #84]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	4798      	blx	r3
 8014f28:	e00b      	b.n	8014f42 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014f2a:	4b12      	ldr	r3, [pc, #72]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014f32:	4b10      	ldr	r3, [pc, #64]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	785b      	ldrb	r3, [r3, #1]
 8014f38:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	; (8014f74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	78db      	ldrb	r3, [r3, #3]
 8014f40:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014f42:	f7ff feff 	bl	8014d44 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014f46:	7b7b      	ldrb	r3, [r7, #13]
 8014f48:	f083 0301 	eor.w	r3, r3, #1
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d004      	beq.n	8014f5c <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014f52:	f107 0308 	add.w	r3, r7, #8
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7ff feba 	bl	8014cd0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014f5c:	7bfb      	ldrb	r3, [r7, #15]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	73fb      	strb	r3, [r7, #15]
 8014f62:	7bfa      	ldrb	r2, [r7, #15]
 8014f64:	7bbb      	ldrb	r3, [r7, #14]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d3c8      	bcc.n	8014efc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8014f6a:	bf00      	nop
 8014f6c:	bf00      	nop
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	200016c8 	.word	0x200016c8

08014f78 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014f78:	b480      	push	{r7}
 8014f7a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014f7c:	4b03      	ldr	r3, [pc, #12]	; (8014f8c <LoRaMacConfirmQueueGetCnt+0x14>)
 8014f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bc80      	pop	{r7}
 8014f88:	4770      	bx	lr
 8014f8a:	bf00      	nop
 8014f8c:	200016c8 	.word	0x200016c8

08014f90 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014f94:	4b06      	ldr	r3, [pc, #24]	; (8014fb0 <LoRaMacConfirmQueueIsFull+0x20>)
 8014f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7ff fe34 	bl	8014c08 <IsListFull>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d001      	beq.n	8014faa <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e000      	b.n	8014fac <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014faa:	2300      	movs	r3, #0
    }
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	200016c8 	.word	0x200016c8

08014fb4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b08e      	sub	sp, #56	; 0x38
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	607b      	str	r3, [r7, #4]
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	817b      	strh	r3, [r7, #10]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014fcc:	230a      	movs	r3, #10
 8014fce:	e086      	b.n	80150de <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8014fda:	2300      	movs	r3, #0
 8014fdc:	623b      	str	r3, [r7, #32]
 8014fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	605a      	str	r2, [r3, #4]
 8014fe8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8014fea:	2300      	movs	r3, #0
 8014fec:	613b      	str	r3, [r7, #16]
 8014fee:	f107 0314 	add.w	r3, r7, #20
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	601a      	str	r2, [r3, #0]
 8014ff6:	605a      	str	r2, [r3, #4]
 8014ff8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014ffe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015002:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	b2db      	uxtb	r3, r3
 8015008:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	0a1b      	lsrs	r3, r3, #8
 801500e:	b2db      	uxtb	r3, r3
 8015010:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	0c1b      	lsrs	r3, r3, #16
 8015016:	b2db      	uxtb	r3, r3
 8015018:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	0e1b      	lsrs	r3, r3, #24
 801501e:	b2db      	uxtb	r3, r3
 8015020:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015024:	b2db      	uxtb	r3, r3
 8015026:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801502a:	0a1b      	lsrs	r3, r3, #8
 801502c:	b2db      	uxtb	r3, r3
 801502e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015032:	0c1b      	lsrs	r3, r3, #16
 8015034:	b2db      	uxtb	r3, r3
 8015036:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801503a:	0e1b      	lsrs	r3, r3, #24
 801503c:	b2db      	uxtb	r3, r3
 801503e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015040:	e048      	b.n	80150d4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015042:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015044:	b2db      	uxtb	r3, r3
 8015046:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015048:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801504a:	3301      	adds	r3, #1
 801504c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801504e:	f107 0320 	add.w	r3, r7, #32
 8015052:	7a7a      	ldrb	r2, [r7, #9]
 8015054:	f107 0010 	add.w	r0, r7, #16
 8015058:	2110      	movs	r1, #16
 801505a:	f7f8 ff69 	bl	800df30 <SecureElementAesEncrypt>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d001      	beq.n	8015068 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015064:	230f      	movs	r3, #15
 8015066:	e03a      	b.n	80150de <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015068:	2300      	movs	r3, #0
 801506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801506e:	e01e      	b.n	80150ae <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015070:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015074:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015078:	4413      	add	r3, r2
 801507a:	461a      	mov	r2, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	4413      	add	r3, r2
 8015080:	7819      	ldrb	r1, [r3, #0]
 8015082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015086:	3338      	adds	r3, #56	; 0x38
 8015088:	443b      	add	r3, r7
 801508a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801508e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015096:	4403      	add	r3, r0
 8015098:	4618      	mov	r0, r3
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	4403      	add	r3, r0
 801509e:	404a      	eors	r2, r1
 80150a0:	b2d2      	uxtb	r2, r2
 80150a2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80150a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80150a8:	3301      	adds	r3, #1
 80150aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80150ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80150b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80150b6:	2a10      	cmp	r2, #16
 80150b8:	bfa8      	it	ge
 80150ba:	2210      	movge	r2, #16
 80150bc:	b212      	sxth	r2, r2
 80150be:	4293      	cmp	r3, r2
 80150c0:	dbd6      	blt.n	8015070 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80150c2:	897b      	ldrh	r3, [r7, #10]
 80150c4:	3b10      	subs	r3, #16
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80150ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80150ce:	3310      	adds	r3, #16
 80150d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80150d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	dcb2      	bgt.n	8015042 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80150dc:	2300      	movs	r3, #0
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3738      	adds	r7, #56	; 0x38
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80150e6:	b490      	push	{r4, r7}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	4604      	mov	r4, r0
 80150ee:	4608      	mov	r0, r1
 80150f0:	4611      	mov	r1, r2
 80150f2:	461a      	mov	r2, r3
 80150f4:	4623      	mov	r3, r4
 80150f6:	80fb      	strh	r3, [r7, #6]
 80150f8:	4603      	mov	r3, r0
 80150fa:	717b      	strb	r3, [r7, #5]
 80150fc:	460b      	mov	r3, r1
 80150fe:	713b      	strb	r3, [r7, #4]
 8015100:	4613      	mov	r3, r2
 8015102:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015104:	69bb      	ldr	r3, [r7, #24]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d101      	bne.n	801510e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801510a:	230a      	movs	r3, #10
 801510c:	e04e      	b.n	80151ac <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	2249      	movs	r2, #73	; 0x49
 8015112:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015114:	69bb      	ldr	r3, [r7, #24]
 8015116:	3301      	adds	r3, #1
 8015118:	2200      	movs	r2, #0
 801511a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	3302      	adds	r3, #2
 8015120:	2200      	movs	r2, #0
 8015122:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	3303      	adds	r3, #3
 8015128:	2200      	movs	r2, #0
 801512a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	3304      	adds	r3, #4
 8015130:	2200      	movs	r2, #0
 8015132:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015134:	69bb      	ldr	r3, [r7, #24]
 8015136:	3305      	adds	r3, #5
 8015138:	78fa      	ldrb	r2, [r7, #3]
 801513a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801513c:	69bb      	ldr	r3, [r7, #24]
 801513e:	3306      	adds	r3, #6
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	b2d2      	uxtb	r2, r2
 8015144:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	0a1a      	lsrs	r2, r3, #8
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	3307      	adds	r3, #7
 801514e:	b2d2      	uxtb	r2, r2
 8015150:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	0c1a      	lsrs	r2, r3, #16
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	3308      	adds	r3, #8
 801515a:	b2d2      	uxtb	r2, r2
 801515c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	0e1a      	lsrs	r2, r3, #24
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	3309      	adds	r3, #9
 8015166:	b2d2      	uxtb	r2, r2
 8015168:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	330a      	adds	r3, #10
 801516e:	697a      	ldr	r2, [r7, #20]
 8015170:	b2d2      	uxtb	r2, r2
 8015172:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	0a1a      	lsrs	r2, r3, #8
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	330b      	adds	r3, #11
 801517c:	b2d2      	uxtb	r2, r2
 801517e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	0c1a      	lsrs	r2, r3, #16
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	330c      	adds	r3, #12
 8015188:	b2d2      	uxtb	r2, r2
 801518a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	0e1a      	lsrs	r2, r3, #24
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	330d      	adds	r3, #13
 8015194:	b2d2      	uxtb	r2, r2
 8015196:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	330e      	adds	r3, #14
 801519c:	2200      	movs	r2, #0
 801519e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80151a0:	69bb      	ldr	r3, [r7, #24]
 80151a2:	330f      	adds	r3, #15
 80151a4:	88fa      	ldrh	r2, [r7, #6]
 80151a6:	b2d2      	uxtb	r2, r2
 80151a8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80151aa:	2300      	movs	r3, #0
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3708      	adds	r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bc90      	pop	{r4, r7}
 80151b4:	4770      	bx	lr

080151b6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80151b6:	b590      	push	{r4, r7, lr}
 80151b8:	b08b      	sub	sp, #44	; 0x2c
 80151ba:	af04      	add	r7, sp, #16
 80151bc:	6078      	str	r0, [r7, #4]
 80151be:	4608      	mov	r0, r1
 80151c0:	4611      	mov	r1, r2
 80151c2:	461a      	mov	r2, r3
 80151c4:	4603      	mov	r3, r0
 80151c6:	807b      	strh	r3, [r7, #2]
 80151c8:	460b      	mov	r3, r1
 80151ca:	707b      	strb	r3, [r7, #1]
 80151cc:	4613      	mov	r3, r2
 80151ce:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d002      	beq.n	80151dc <ComputeCmacB0+0x26>
 80151d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80151dc:	230a      	movs	r3, #10
 80151de:	e024      	b.n	801522a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80151e0:	887b      	ldrh	r3, [r7, #2]
 80151e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151e6:	d901      	bls.n	80151ec <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80151e8:	230e      	movs	r3, #14
 80151ea:	e01e      	b.n	801522a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80151ec:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80151f0:	783a      	ldrb	r2, [r7, #0]
 80151f2:	7879      	ldrb	r1, [r7, #1]
 80151f4:	8878      	ldrh	r0, [r7, #2]
 80151f6:	f107 0308 	add.w	r3, r7, #8
 80151fa:	9302      	str	r3, [sp, #8]
 80151fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fe:	9301      	str	r3, [sp, #4]
 8015200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	4623      	mov	r3, r4
 8015206:	f7ff ff6e 	bl	80150e6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801520a:	887a      	ldrh	r2, [r7, #2]
 801520c:	7879      	ldrb	r1, [r7, #1]
 801520e:	f107 0008 	add.w	r0, r7, #8
 8015212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015214:	9300      	str	r3, [sp, #0]
 8015216:	460b      	mov	r3, r1
 8015218:	6879      	ldr	r1, [r7, #4]
 801521a:	f7f8 fe43 	bl	800dea4 <SecureElementComputeAesCmac>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d001      	beq.n	8015228 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015224:	230f      	movs	r3, #15
 8015226:	e000      	b.n	801522a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015228:	2300      	movs	r3, #0
}
 801522a:	4618      	mov	r0, r3
 801522c:	371c      	adds	r7, #28
 801522e:	46bd      	mov	sp, r7
 8015230:	bd90      	pop	{r4, r7, pc}

08015232 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015232:	b590      	push	{r4, r7, lr}
 8015234:	b0cd      	sub	sp, #308	; 0x134
 8015236:	af04      	add	r7, sp, #16
 8015238:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801523c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8015240:	6020      	str	r0, [r4, #0]
 8015242:	460c      	mov	r4, r1
 8015244:	4610      	mov	r0, r2
 8015246:	4619      	mov	r1, r3
 8015248:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801524c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015250:	4622      	mov	r2, r4
 8015252:	801a      	strh	r2, [r3, #0]
 8015254:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015258:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801525c:	4602      	mov	r2, r0
 801525e:	701a      	strb	r2, [r3, #0]
 8015260:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015264:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015268:	460a      	mov	r2, r1
 801526a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801526c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015270:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d101      	bne.n	801527e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801527a:	230a      	movs	r3, #10
 801527c:	e063      	b.n	8015346 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801527e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015282:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801528c:	d901      	bls.n	8015292 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801528e:	230e      	movs	r3, #14
 8015290:	e059      	b.n	8015346 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015292:	f107 030c 	add.w	r3, r7, #12
 8015296:	f44f 7288 	mov.w	r2, #272	; 0x110
 801529a:	2100      	movs	r1, #0
 801529c:	4618      	mov	r0, r3
 801529e:	f003 fbf9 	bl	8018a94 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80152a2:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80152a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80152aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80152ae:	781a      	ldrb	r2, [r3, #0]
 80152b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80152b4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80152b8:	7819      	ldrb	r1, [r3, #0]
 80152ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80152be:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80152c2:	8818      	ldrh	r0, [r3, #0]
 80152c4:	f107 030c 	add.w	r3, r7, #12
 80152c8:	9302      	str	r3, [sp, #8]
 80152ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80152ce:	9301      	str	r3, [sp, #4]
 80152d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	4623      	mov	r3, r4
 80152d8:	f7ff ff05 	bl	80150e6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80152dc:	f107 030c 	add.w	r3, r7, #12
 80152e0:	3310      	adds	r3, #16
 80152e2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80152e6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80152ea:	8812      	ldrh	r2, [r2, #0]
 80152ec:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80152f0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80152f4:	6809      	ldr	r1, [r1, #0]
 80152f6:	4618      	mov	r0, r3
 80152f8:	f003 fb91 	bl	8018a1e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80152fc:	2306      	movs	r3, #6
 80152fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015302:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015306:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	3310      	adds	r3, #16
 801530e:	4619      	mov	r1, r3
 8015310:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015314:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015318:	781b      	ldrb	r3, [r3, #0]
 801531a:	f107 000c 	add.w	r0, r7, #12
 801531e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015322:	f7f8 fdd9 	bl	800ded8 <SecureElementVerifyAesCmac>
 8015326:	4603      	mov	r3, r0
 8015328:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801532c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015330:	2b00      	cmp	r3, #0
 8015332:	d101      	bne.n	8015338 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015334:	2300      	movs	r3, #0
 8015336:	e006      	b.n	8015346 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015338:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801533c:	2b01      	cmp	r3, #1
 801533e:	d101      	bne.n	8015344 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015340:	2301      	movs	r3, #1
 8015342:	e000      	b.n	8015346 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015344:	230f      	movs	r3, #15
}
 8015346:	4618      	mov	r0, r3
 8015348:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801534c:	46bd      	mov	sp, r7
 801534e:	bd90      	pop	{r4, r7, pc}

08015350 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015350:	b480      	push	{r7}
 8015352:	b085      	sub	sp, #20
 8015354:	af00      	add	r7, sp, #0
 8015356:	4603      	mov	r3, r0
 8015358:	6039      	str	r1, [r7, #0]
 801535a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801535c:	2300      	movs	r3, #0
 801535e:	73fb      	strb	r3, [r7, #15]
 8015360:	e011      	b.n	8015386 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015362:	7bfb      	ldrb	r3, [r7, #15]
 8015364:	4a0c      	ldr	r2, [pc, #48]	; (8015398 <GetKeyAddrItem+0x48>)
 8015366:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801536a:	79fa      	ldrb	r2, [r7, #7]
 801536c:	429a      	cmp	r2, r3
 801536e:	d107      	bne.n	8015380 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015370:	7bfb      	ldrb	r3, [r7, #15]
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	4a08      	ldr	r2, [pc, #32]	; (8015398 <GetKeyAddrItem+0x48>)
 8015376:	441a      	add	r2, r3
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801537c:	2300      	movs	r3, #0
 801537e:	e006      	b.n	801538e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015380:	7bfb      	ldrb	r3, [r7, #15]
 8015382:	3301      	adds	r3, #1
 8015384:	73fb      	strb	r3, [r7, #15]
 8015386:	7bfb      	ldrb	r3, [r7, #15]
 8015388:	2b01      	cmp	r3, #1
 801538a:	d9ea      	bls.n	8015362 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801538c:	230c      	movs	r3, #12
}
 801538e:	4618      	mov	r0, r3
 8015390:	3714      	adds	r7, #20
 8015392:	46bd      	mov	sp, r7
 8015394:	bc80      	pop	{r7}
 8015396:	4770      	bx	lr
 8015398:	20000128 	.word	0x20000128

0801539c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b088      	sub	sp, #32
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60b9      	str	r1, [r7, #8]
 80153a4:	607a      	str	r2, [r7, #4]
 80153a6:	461a      	mov	r2, r3
 80153a8:	4603      	mov	r3, r0
 80153aa:	73fb      	strb	r3, [r7, #15]
 80153ac:	4613      	mov	r3, r2
 80153ae:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80153b0:	2300      	movs	r3, #0
 80153b2:	613b      	str	r3, [r7, #16]
 80153b4:	f107 0314 	add.w	r3, r7, #20
 80153b8:	2200      	movs	r2, #0
 80153ba:	601a      	str	r2, [r3, #0]
 80153bc:	605a      	str	r2, [r3, #4]
 80153be:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80153c0:	7bfb      	ldrb	r3, [r7, #15]
 80153c2:	2b08      	cmp	r3, #8
 80153c4:	d002      	beq.n	80153cc <DeriveSessionKey10x+0x30>
 80153c6:	2b09      	cmp	r3, #9
 80153c8:	d003      	beq.n	80153d2 <DeriveSessionKey10x+0x36>
 80153ca:	e005      	b.n	80153d8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80153cc:	2301      	movs	r3, #1
 80153ce:	743b      	strb	r3, [r7, #16]
            break;
 80153d0:	e004      	b.n	80153dc <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80153d2:	2302      	movs	r3, #2
 80153d4:	743b      	strb	r3, [r7, #16]
            break;
 80153d6:	e001      	b.n	80153dc <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80153d8:	230b      	movs	r3, #11
 80153da:	e02a      	b.n	8015432 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	0a1b      	lsrs	r3, r3, #8
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	0c1b      	lsrs	r3, r3, #16
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	0a1b      	lsrs	r3, r3, #8
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	0c1b      	lsrs	r3, r3, #16
 8015404:	b2db      	uxtb	r3, r3
 8015406:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015408:	89bb      	ldrh	r3, [r7, #12]
 801540a:	b2db      	uxtb	r3, r3
 801540c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801540e:	89bb      	ldrh	r3, [r7, #12]
 8015410:	0a1b      	lsrs	r3, r3, #8
 8015412:	b29b      	uxth	r3, r3
 8015414:	b2db      	uxtb	r3, r3
 8015416:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015418:	7bfa      	ldrb	r2, [r7, #15]
 801541a:	f107 0310 	add.w	r3, r7, #16
 801541e:	2101      	movs	r1, #1
 8015420:	4618      	mov	r0, r3
 8015422:	f7f8 fe05 	bl	800e030 <SecureElementDeriveAndStoreKey>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801542c:	230f      	movs	r3, #15
 801542e:	e000      	b.n	8015432 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	3720      	adds	r7, #32
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
	...

0801543c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	4603      	mov	r3, r0
 8015444:	6039      	str	r1, [r7, #0]
 8015446:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d101      	bne.n	8015452 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801544e:	230a      	movs	r3, #10
 8015450:	e029      	b.n	80154a6 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	3b01      	subs	r3, #1
 8015456:	2b03      	cmp	r3, #3
 8015458:	d822      	bhi.n	80154a0 <GetLastFcntDown+0x64>
 801545a:	a201      	add	r2, pc, #4	; (adr r2, 8015460 <GetLastFcntDown+0x24>)
 801545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015460:	08015471 	.word	0x08015471
 8015464:	0801547d 	.word	0x0801547d
 8015468:	08015489 	.word	0x08015489
 801546c:	08015495 	.word	0x08015495
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015470:	4b0f      	ldr	r3, [pc, #60]	; (80154b0 <GetLastFcntDown+0x74>)
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	691a      	ldr	r2, [r3, #16]
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	601a      	str	r2, [r3, #0]
            break;
 801547a:	e013      	b.n	80154a4 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801547c:	4b0c      	ldr	r3, [pc, #48]	; (80154b0 <GetLastFcntDown+0x74>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	695a      	ldr	r2, [r3, #20]
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	601a      	str	r2, [r3, #0]
            break;
 8015486:	e00d      	b.n	80154a4 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015488:	4b09      	ldr	r3, [pc, #36]	; (80154b0 <GetLastFcntDown+0x74>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	699a      	ldr	r2, [r3, #24]
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	601a      	str	r2, [r3, #0]
            break;
 8015492:	e007      	b.n	80154a4 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015494:	4b06      	ldr	r3, [pc, #24]	; (80154b0 <GetLastFcntDown+0x74>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	69da      	ldr	r2, [r3, #28]
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	601a      	str	r2, [r3, #0]
            break;
 801549e:	e001      	b.n	80154a4 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80154a0:	2305      	movs	r3, #5
 80154a2:	e000      	b.n	80154a6 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80154a4:	2300      	movs	r3, #0
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	370c      	adds	r7, #12
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bc80      	pop	{r7}
 80154ae:	4770      	bx	lr
 80154b0:	200016ec 	.word	0x200016ec

080154b4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b084      	sub	sp, #16
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	4603      	mov	r3, r0
 80154bc:	6039      	str	r1, [r7, #0]
 80154be:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80154c4:	f107 020c 	add.w	r2, r7, #12
 80154c8:	79fb      	ldrb	r3, [r7, #7]
 80154ca:	4611      	mov	r1, r2
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7ff ffb5 	bl	801543c <GetLastFcntDown>
 80154d2:	4603      	mov	r3, r0
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d001      	beq.n	80154dc <CheckFCntDown+0x28>
    {
        return false;
 80154d8:	2300      	movs	r3, #0
 80154da:	e00a      	b.n	80154f2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	683a      	ldr	r2, [r7, #0]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d803      	bhi.n	80154ec <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80154e4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80154e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ea:	d101      	bne.n	80154f0 <CheckFCntDown+0x3c>
    {
        return true;
 80154ec:	2301      	movs	r3, #1
 80154ee:	e000      	b.n	80154f2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80154f0:	2300      	movs	r3, #0
    }
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
	...

080154fc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	4603      	mov	r3, r0
 8015504:	6039      	str	r1, [r7, #0]
 8015506:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015508:	79fb      	ldrb	r3, [r7, #7]
 801550a:	3b01      	subs	r3, #1
 801550c:	2b03      	cmp	r3, #3
 801550e:	d82b      	bhi.n	8015568 <UpdateFCntDown+0x6c>
 8015510:	a201      	add	r2, pc, #4	; (adr r2, 8015518 <UpdateFCntDown+0x1c>)
 8015512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015516:	bf00      	nop
 8015518:	08015529 	.word	0x08015529
 801551c:	0801553b 	.word	0x0801553b
 8015520:	0801554d 	.word	0x0801554d
 8015524:	0801555f 	.word	0x0801555f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015528:	4b12      	ldr	r3, [pc, #72]	; (8015574 <UpdateFCntDown+0x78>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	683a      	ldr	r2, [r7, #0]
 801552e:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015530:	4b10      	ldr	r3, [pc, #64]	; (8015574 <UpdateFCntDown+0x78>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	683a      	ldr	r2, [r7, #0]
 8015536:	621a      	str	r2, [r3, #32]
            break;
 8015538:	e017      	b.n	801556a <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801553a:	4b0e      	ldr	r3, [pc, #56]	; (8015574 <UpdateFCntDown+0x78>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	683a      	ldr	r2, [r7, #0]
 8015540:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8015542:	4b0c      	ldr	r3, [pc, #48]	; (8015574 <UpdateFCntDown+0x78>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	683a      	ldr	r2, [r7, #0]
 8015548:	621a      	str	r2, [r3, #32]
            break;
 801554a:	e00e      	b.n	801556a <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801554c:	4b09      	ldr	r3, [pc, #36]	; (8015574 <UpdateFCntDown+0x78>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	683a      	ldr	r2, [r7, #0]
 8015552:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015554:	4b07      	ldr	r3, [pc, #28]	; (8015574 <UpdateFCntDown+0x78>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	683a      	ldr	r2, [r7, #0]
 801555a:	621a      	str	r2, [r3, #32]
            break;
 801555c:	e005      	b.n	801556a <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801555e:	4b05      	ldr	r3, [pc, #20]	; (8015574 <UpdateFCntDown+0x78>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	61da      	str	r2, [r3, #28]
            break;
 8015566:	e000      	b.n	801556a <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015568:	bf00      	nop
    }
}
 801556a:	bf00      	nop
 801556c:	370c      	adds	r7, #12
 801556e:	46bd      	mov	sp, r7
 8015570:	bc80      	pop	{r7}
 8015572:	4770      	bx	lr
 8015574:	200016ec 	.word	0x200016ec

08015578 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801557e:	4b18      	ldr	r3, [pc, #96]	; (80155e0 <ResetFCnts+0x68>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	2200      	movs	r2, #0
 8015584:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015586:	4b16      	ldr	r3, [pc, #88]	; (80155e0 <ResetFCnts+0x68>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	f04f 32ff 	mov.w	r2, #4294967295
 801558e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015590:	4b13      	ldr	r3, [pc, #76]	; (80155e0 <ResetFCnts+0x68>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	f04f 32ff 	mov.w	r2, #4294967295
 8015598:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801559a:	4b11      	ldr	r3, [pc, #68]	; (80155e0 <ResetFCnts+0x68>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f04f 32ff 	mov.w	r2, #4294967295
 80155a2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80155a4:	4b0e      	ldr	r3, [pc, #56]	; (80155e0 <ResetFCnts+0x68>)
 80155a6:	681a      	ldr	r2, [r3, #0]
 80155a8:	4b0d      	ldr	r3, [pc, #52]	; (80155e0 <ResetFCnts+0x68>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	6992      	ldr	r2, [r2, #24]
 80155ae:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80155b0:	2300      	movs	r3, #0
 80155b2:	607b      	str	r3, [r7, #4]
 80155b4:	e00b      	b.n	80155ce <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80155b6:	4b0a      	ldr	r3, [pc, #40]	; (80155e0 <ResetFCnts+0x68>)
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	3306      	adds	r3, #6
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	f04f 32ff 	mov.w	r2, #4294967295
 80155c6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	3301      	adds	r3, #1
 80155cc:	607b      	str	r3, [r7, #4]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	ddf0      	ble.n	80155b6 <ResetFCnts+0x3e>
    }
}
 80155d4:	bf00      	nop
 80155d6:	bf00      	nop
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	bc80      	pop	{r7}
 80155de:	4770      	bx	lr
 80155e0:	200016ec 	.word	0x200016ec

080155e4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80155ec:	4b06      	ldr	r3, [pc, #24]	; (8015608 <IsJoinNonce10xOk+0x24>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	bf8c      	ite	hi
 80155f8:	2301      	movhi	r3, #1
 80155fa:	2300      	movls	r3, #0
 80155fc:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80155fe:	4618      	mov	r0, r3
 8015600:	370c      	adds	r7, #12
 8015602:	46bd      	mov	sp, r7
 8015604:	bc80      	pop	{r7}
 8015606:	4770      	bx	lr
 8015608:	200016ec 	.word	0x200016ec

0801560c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d101      	bne.n	801561e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801561a:	2309      	movs	r3, #9
 801561c:	e01c      	b.n	8015658 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801561e:	4a10      	ldr	r2, [pc, #64]	; (8015660 <LoRaMacCryptoInit+0x54>)
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015624:	4b0e      	ldr	r3, [pc, #56]	; (8015660 <LoRaMacCryptoInit+0x54>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2228      	movs	r2, #40	; 0x28
 801562a:	2100      	movs	r1, #0
 801562c:	4618      	mov	r0, r3
 801562e:	f003 fa31 	bl	8018a94 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8015632:	4b0b      	ldr	r3, [pc, #44]	; (8015660 <LoRaMacCryptoInit+0x54>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2201      	movs	r2, #1
 8015638:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801563a:	4b09      	ldr	r3, [pc, #36]	; (8015660 <LoRaMacCryptoInit+0x54>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2201      	movs	r2, #1
 8015640:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8015642:	4b07      	ldr	r3, [pc, #28]	; (8015660 <LoRaMacCryptoInit+0x54>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2201      	movs	r2, #1
 8015648:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801564a:	4b05      	ldr	r3, [pc, #20]	; (8015660 <LoRaMacCryptoInit+0x54>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2200      	movs	r2, #0
 8015650:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015652:	f7ff ff91 	bl	8015578 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015656:	2300      	movs	r3, #0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3708      	adds	r7, #8
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	200016ec 	.word	0x200016ec

08015664 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801566c:	4b04      	ldr	r3, [pc, #16]	; (8015680 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	bc80      	pop	{r7}
 801567e:	4770      	bx	lr
 8015680:	200016ec 	.word	0x200016ec

08015684 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d101      	bne.n	8015696 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015692:	230a      	movs	r3, #10
 8015694:	e006      	b.n	80156a4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8015696:	4b06      	ldr	r3, [pc, #24]	; (80156b0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	1c5a      	adds	r2, r3, #1
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	370c      	adds	r7, #12
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bc80      	pop	{r7}
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	200016ec 	.word	0x200016ec

080156b4 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80156b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80156b8:	b08a      	sub	sp, #40	; 0x28
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	613a      	str	r2, [r7, #16]
 80156be:	60fb      	str	r3, [r7, #12]
 80156c0:	4603      	mov	r3, r0
 80156c2:	75fb      	strb	r3, [r7, #23]
 80156c4:	460b      	mov	r3, r1
 80156c6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80156c8:	2300      	movs	r3, #0
 80156ca:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80156cc:	2300      	movs	r3, #0
 80156ce:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80156d0:	2313      	movs	r3, #19
 80156d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d101      	bne.n	80156e0 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80156dc:	230a      	movs	r3, #10
 80156de:	e057      	b.n	8015790 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80156e0:	f107 021c 	add.w	r2, r7, #28
 80156e4:	7dfb      	ldrb	r3, [r7, #23]
 80156e6:	4611      	mov	r1, r2
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7ff fea7 	bl	801543c <GetLastFcntDown>
 80156ee:	4603      	mov	r3, r0
 80156f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80156f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d002      	beq.n	8015702 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80156fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015700:	e046      	b.n	8015790 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015708:	d103      	bne.n	8015712 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	693a      	ldr	r2, [r7, #16]
 801570e:	601a      	str	r2, [r3, #0]
 8015710:	e01e      	b.n	8015750 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	b29b      	uxth	r3, r3
 8015716:	693a      	ldr	r2, [r7, #16]
 8015718:	1ad3      	subs	r3, r2, r3
 801571a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571e:	2b00      	cmp	r3, #0
 8015720:	dd05      	ble.n	801572e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015722:	69fa      	ldr	r2, [r7, #28]
 8015724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015726:	441a      	add	r2, r3
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	601a      	str	r2, [r3, #0]
 801572c:	e010      	b.n	8015750 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015730:	2b00      	cmp	r3, #0
 8015732:	d104      	bne.n	801573e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015734:	69fa      	ldr	r2, [r7, #28]
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801573a:	2307      	movs	r3, #7
 801573c:	e028      	b.n	8015790 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	0c1b      	lsrs	r3, r3, #16
 8015742:	041b      	lsls	r3, r3, #16
 8015744:	693a      	ldr	r2, [r7, #16]
 8015746:	4413      	add	r3, r2
 8015748:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015750:	4b12      	ldr	r3, [pc, #72]	; (801579c <LoRaMacCryptoGetFCntDown+0xe8>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	789b      	ldrb	r3, [r3, #2]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d119      	bne.n	801578e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2200      	movs	r2, #0
 8015760:	603b      	str	r3, [r7, #0]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	2200      	movs	r2, #0
 8015768:	469a      	mov	sl, r3
 801576a:	4693      	mov	fp, r2
 801576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015770:	4611      	mov	r1, r2
 8015772:	ebb1 040a 	subs.w	r4, r1, sl
 8015776:	eb63 050b 	sbc.w	r5, r3, fp
 801577a:	8abb      	ldrh	r3, [r7, #20]
 801577c:	2200      	movs	r2, #0
 801577e:	4698      	mov	r8, r3
 8015780:	4691      	mov	r9, r2
 8015782:	4544      	cmp	r4, r8
 8015784:	eb75 0309 	sbcs.w	r3, r5, r9
 8015788:	db01      	blt.n	801578e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801578a:	2308      	movs	r3, #8
 801578c:	e000      	b.n	8015790 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801578e:	2300      	movs	r3, #0
}
 8015790:	4618      	mov	r0, r3
 8015792:	3728      	adds	r7, #40	; 0x28
 8015794:	46bd      	mov	sp, r7
 8015796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801579a:	bf00      	nop
 801579c:	200016ec 	.word	0x200016ec

080157a0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80157a0:	b480      	push	{r7}
 80157a2:	b085      	sub	sp, #20
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d101      	bne.n	80157b2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157ae:	230a      	movs	r3, #10
 80157b0:	e019      	b.n	80157e6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80157b2:	2300      	movs	r3, #0
 80157b4:	60fb      	str	r3, [r7, #12]
 80157b6:	e012      	b.n	80157de <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80157b8:	4b0d      	ldr	r3, [pc, #52]	; (80157f0 <LoRaMacCryptoSetMulticastReference+0x50>)
 80157ba:	6819      	ldr	r1, [r3, #0]
 80157bc:	68fa      	ldr	r2, [r7, #12]
 80157be:	4613      	mov	r3, r2
 80157c0:	005b      	lsls	r3, r3, #1
 80157c2:	4413      	add	r3, r2
 80157c4:	011b      	lsls	r3, r3, #4
 80157c6:	461a      	mov	r2, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4413      	add	r3, r2
 80157cc:	68fa      	ldr	r2, [r7, #12]
 80157ce:	3206      	adds	r2, #6
 80157d0:	0092      	lsls	r2, r2, #2
 80157d2:	440a      	add	r2, r1
 80157d4:	3204      	adds	r2, #4
 80157d6:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	3301      	adds	r3, #1
 80157dc:	60fb      	str	r3, [r7, #12]
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	dde9      	ble.n	80157b8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80157e4:	2300      	movs	r3, #0
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3714      	adds	r7, #20
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bc80      	pop	{r7}
 80157ee:	4770      	bx	lr
 80157f0:	200016ec 	.word	0x200016ec

080157f4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	4603      	mov	r3, r0
 80157fc:	6039      	str	r1, [r7, #0]
 80157fe:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015800:	79fb      	ldrb	r3, [r7, #7]
 8015802:	6839      	ldr	r1, [r7, #0]
 8015804:	4618      	mov	r0, r3
 8015806:	f7f8 faef 	bl	800dde8 <SecureElementSetKey>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d001      	beq.n	8015814 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015810:	230f      	movs	r3, #15
 8015812:	e021      	b.n	8015858 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015814:	79fb      	ldrb	r3, [r7, #7]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d11d      	bne.n	8015856 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801581a:	4b11      	ldr	r3, [pc, #68]	; (8015860 <LoRaMacCryptoSetKey+0x6c>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	789b      	ldrb	r3, [r3, #2]
 8015820:	210b      	movs	r1, #11
 8015822:	4618      	mov	r0, r3
 8015824:	f000 fa5e 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 8015828:	4603      	mov	r3, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801582e:	230f      	movs	r3, #15
 8015830:	e012      	b.n	8015858 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015832:	210c      	movs	r1, #12
 8015834:	2000      	movs	r0, #0
 8015836:	f000 fa55 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 801583a:	4603      	mov	r3, r0
 801583c:	2b00      	cmp	r3, #0
 801583e:	d001      	beq.n	8015844 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015840:	230f      	movs	r3, #15
 8015842:	e009      	b.n	8015858 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015844:	210a      	movs	r1, #10
 8015846:	2000      	movs	r0, #0
 8015848:	f000 fa4c 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d001      	beq.n	8015856 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015852:	230f      	movs	r3, #15
 8015854:	e000      	b.n	8015858 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	200016ec 	.word	0x200016ec

08015864 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af02      	add	r7, sp, #8
 801586a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d101      	bne.n	8015876 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015872:	230a      	movs	r3, #10
 8015874:	e033      	b.n	80158de <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015876:	2301      	movs	r3, #1
 8015878:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801587a:	2300      	movs	r3, #0
 801587c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801587e:	f107 0308 	add.w	r3, r7, #8
 8015882:	4618      	mov	r0, r3
 8015884:	f7f8 fc8a 	bl	800e19c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	4b17      	ldr	r3, [pc, #92]	; (80158e8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	b292      	uxth	r2, r2
 8015890:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015892:	4b15      	ldr	r3, [pc, #84]	; (80158e8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	889a      	ldrh	r2, [r3, #4]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f000 fc1b 	bl	80160d8 <LoRaMacSerializerJoinRequest>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d001      	beq.n	80158ac <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80158a8:	2311      	movs	r3, #17
 80158aa:	e018      	b.n	80158de <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6819      	ldr	r1, [r3, #0]
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	3318      	adds	r3, #24
 80158b4:	7bfa      	ldrb	r2, [r7, #15]
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	4613      	mov	r3, r2
 80158ba:	2213      	movs	r2, #19
 80158bc:	2000      	movs	r0, #0
 80158be:	f7f8 faf1 	bl	800dea4 <SecureElementComputeAesCmac>
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d001      	beq.n	80158cc <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158c8:	230f      	movs	r3, #15
 80158ca:	e008      	b.n	80158de <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fc03 	bl	80160d8 <LoRaMacSerializerJoinRequest>
 80158d2:	4603      	mov	r3, r0
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d001      	beq.n	80158dc <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80158d8:	2311      	movs	r3, #17
 80158da:	e000      	b.n	80158de <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	200016ec 	.word	0x200016ec

080158ec <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80158ec:	b590      	push	{r4, r7, lr}
 80158ee:	b097      	sub	sp, #92	; 0x5c
 80158f0:	af04      	add	r7, sp, #16
 80158f2:	4603      	mov	r3, r0
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
 80158f8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d002      	beq.n	8015906 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015906:	230a      	movs	r3, #10
 8015908:	e0d3      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801590a:	2313      	movs	r3, #19
 801590c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015910:	2300      	movs	r3, #0
 8015912:	617b      	str	r3, [r7, #20]
 8015914:	f107 0318 	add.w	r3, r7, #24
 8015918:	221d      	movs	r2, #29
 801591a:	2100      	movs	r1, #0
 801591c:	4618      	mov	r0, r3
 801591e:	f007 fe9b 	bl	801d658 <memset>
    uint8_t versionMinor         = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015926:	4b65      	ldr	r3, [pc, #404]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	889b      	ldrh	r3, [r3, #4]
 801592c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681c      	ldr	r4, [r3, #0]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	791b      	ldrb	r3, [r3, #4]
 8015938:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801593c:	7bf8      	ldrb	r0, [r7, #15]
 801593e:	f107 0213 	add.w	r2, r7, #19
 8015942:	9202      	str	r2, [sp, #8]
 8015944:	f107 0214 	add.w	r2, r7, #20
 8015948:	9201      	str	r2, [sp, #4]
 801594a:	9300      	str	r3, [sp, #0]
 801594c:	4623      	mov	r3, r4
 801594e:	460a      	mov	r2, r1
 8015950:	68b9      	ldr	r1, [r7, #8]
 8015952:	f7f8 fbad 	bl	800e0b0 <SecureElementProcessJoinAccept>
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d001      	beq.n	8015960 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801595c:	230f      	movs	r3, #15
 801595e:	e0a8      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6818      	ldr	r0, [r3, #0]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	791b      	ldrb	r3, [r3, #4]
 8015968:	b29a      	uxth	r2, r3
 801596a:	f107 0314 	add.w	r3, r7, #20
 801596e:	4619      	mov	r1, r3
 8015970:	f003 f855 	bl	8018a1e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 f9f0 	bl	8015d5a <LoRaMacParserJoinAccept>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	d001      	beq.n	8015984 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015980:	2310      	movs	r3, #16
 8015982:	e096      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015984:	2300      	movs	r3, #0
 8015986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	799b      	ldrb	r3, [r3, #6]
 801598e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	79db      	ldrb	r3, [r3, #7]
 8015994:	021b      	lsls	r3, r3, #8
 8015996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015998:	4313      	orrs	r3, r2
 801599a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	7a1b      	ldrb	r3, [r3, #8]
 80159a0:	041b      	lsls	r3, r3, #16
 80159a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159a4:	4313      	orrs	r3, r2
 80159a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80159a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80159aa:	f7ff fe1b 	bl	80155e4 <IsJoinNonce10xOk>
 80159ae:	4603      	mov	r3, r0
 80159b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 80159b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d010      	beq.n	80159de <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80159bc:	4b3f      	ldr	r3, [pc, #252]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159c2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80159c4:	7cfb      	ldrb	r3, [r7, #19]
 80159c6:	210b      	movs	r1, #11
 80159c8:	4618      	mov	r0, r3
 80159ca:	f000 f98b 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 80159ce:	4603      	mov	r3, r0
 80159d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d005      	beq.n	80159e8 <LoRaMacCryptoHandleJoinAccept+0xfc>
 80159dc:	e001      	b.n	80159e2 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80159de:	2303      	movs	r3, #3
 80159e0:	e067      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80159e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80159e6:	e064      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80159e8:	210c      	movs	r1, #12
 80159ea:	2000      	movs	r0, #0
 80159ec:	f000 f97a 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 80159f0:	4603      	mov	r3, r0
 80159f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d002      	beq.n	8015a04 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80159fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a02:	e056      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015a04:	210a      	movs	r1, #10
 8015a06:	2000      	movs	r0, #0
 8015a08:	f000 f96c 	bl	8015ce4 <LoRaMacCryptoDeriveLifeTimeKey>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d002      	beq.n	8015a20 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8015a1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a1e:	e048      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	7a5b      	ldrb	r3, [r3, #9]
 8015a24:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	7a9b      	ldrb	r3, [r3, #10]
 8015a2a:	021b      	lsls	r3, r3, #8
 8015a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	7adb      	ldrb	r3, [r3, #11]
 8015a36:	041b      	lsls	r3, r3, #16
 8015a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a3a:	4313      	orrs	r3, r2
 8015a3c:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015a3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015a46:	2009      	movs	r0, #9
 8015a48:	f7ff fca8 	bl	801539c <DeriveSessionKey10x>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d002      	beq.n	8015a60 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8015a5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a5e:	e028      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015a60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015a68:	2008      	movs	r0, #8
 8015a6a:	f7ff fc97 	bl	801539c <DeriveSessionKey10x>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d002      	beq.n	8015a82 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a80:	e017      	b.n	8015ab2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015a82:	4b0e      	ldr	r3, [pc, #56]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	7cfa      	ldrb	r2, [r7, #19]
 8015a88:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015a8a:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015a92:	4b0a      	ldr	r3, [pc, #40]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015a9c:	4b07      	ldr	r3, [pc, #28]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8015aa4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015aa6:	4b05      	ldr	r3, [pc, #20]	; (8015abc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8015aae:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015ab0:	2300      	movs	r3, #0
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	374c      	adds	r7, #76	; 0x4c
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd90      	pop	{r4, r7, pc}
 8015aba:	bf00      	nop
 8015abc:	200016ec 	.word	0x200016ec

08015ac0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015ac0:	b590      	push	{r4, r7, lr}
 8015ac2:	b08b      	sub	sp, #44	; 0x2c
 8015ac4:	af04      	add	r7, sp, #16
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	607b      	str	r3, [r7, #4]
 8015aca:	460b      	mov	r3, r1
 8015acc:	72fb      	strb	r3, [r7, #11]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015ad2:	2313      	movs	r3, #19
 8015ad4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ad6:	2309      	movs	r3, #9
 8015ad8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d101      	bne.n	8015ae4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ae0:	230a      	movs	r3, #10
 8015ae2:	e05f      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015ae4:	4b31      	ldr	r3, [pc, #196]	; (8015bac <LoRaMacCryptoSecureMessage+0xec>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	68db      	ldr	r3, [r3, #12]
 8015aea:	68fa      	ldr	r2, [r7, #12]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d201      	bcs.n	8015af4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015af0:	2306      	movs	r3, #6
 8015af2:	e057      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d101      	bne.n	8015b02 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015afe:	2308      	movs	r3, #8
 8015b00:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015b02:	4b2a      	ldr	r3, [pc, #168]	; (8015bac <LoRaMacCryptoSecureMessage+0xec>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d916      	bls.n	8015b3c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b18:	b219      	sxth	r1, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	689c      	ldr	r4, [r3, #8]
 8015b1e:	7dfa      	ldrb	r2, [r7, #23]
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	9301      	str	r3, [sp, #4]
 8015b24:	2300      	movs	r3, #0
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	4623      	mov	r3, r4
 8015b2a:	f7ff fa43 	bl	8014fb4 <PayloadEncrypt>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b32:	7dbb      	ldrb	r3, [r7, #22]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d001      	beq.n	8015b3c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015b38:	7dbb      	ldrb	r3, [r7, #22]
 8015b3a:	e033      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f000 fb4d 	bl	80161dc <LoRaMacSerializerData>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d001      	beq.n	8015b4c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b48:	2311      	movs	r3, #17
 8015b4a:	e02b      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015b4c:	2308      	movs	r3, #8
 8015b4e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6818      	ldr	r0, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	791b      	ldrb	r3, [r3, #4]
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	3b04      	subs	r3, #4
 8015b5c:	b299      	uxth	r1, r3
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	689b      	ldr	r3, [r3, #8]
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	322c      	adds	r2, #44	; 0x2c
 8015b66:	7dfc      	ldrb	r4, [r7, #23]
 8015b68:	9203      	str	r2, [sp, #12]
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	9202      	str	r2, [sp, #8]
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	2300      	movs	r3, #0
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	2300      	movs	r3, #0
 8015b76:	4622      	mov	r2, r4
 8015b78:	f7ff fb1d 	bl	80151b6 <ComputeCmacB0>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b80:	7dbb      	ldrb	r3, [r7, #22]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d001      	beq.n	8015b8a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8015b86:	7dbb      	ldrb	r3, [r7, #22]
 8015b88:	e00c      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f000 fb26 	bl	80161dc <LoRaMacSerializerData>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d001      	beq.n	8015b9a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b96:	2311      	movs	r3, #17
 8015b98:	e004      	b.n	8015ba4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015b9a:	4b04      	ldr	r3, [pc, #16]	; (8015bac <LoRaMacCryptoSecureMessage+0xec>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015ba2:	2300      	movs	r3, #0
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	371c      	adds	r7, #28
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd90      	pop	{r4, r7, pc}
 8015bac:	200016ec 	.word	0x200016ec

08015bb0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015bb0:	b590      	push	{r4, r7, lr}
 8015bb2:	b08b      	sub	sp, #44	; 0x2c
 8015bb4:	af04      	add	r7, sp, #16
 8015bb6:	60b9      	str	r1, [r7, #8]
 8015bb8:	607b      	str	r3, [r7, #4]
 8015bba:	4603      	mov	r3, r0
 8015bbc:	73fb      	strb	r3, [r7, #15]
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d101      	bne.n	8015bcc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bc8:	230a      	movs	r3, #10
 8015bca:	e084      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015bcc:	7bbb      	ldrb	r3, [r7, #14]
 8015bce:	6879      	ldr	r1, [r7, #4]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ff fc6f 	bl	80154b4 <CheckFCntDown>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	f083 0301 	eor.w	r3, r3, #1
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015be2:	2306      	movs	r3, #6
 8015be4:	e077      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015be6:	2313      	movs	r3, #19
 8015be8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015bea:	2309      	movs	r3, #9
 8015bec:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015bee:	2308      	movs	r3, #8
 8015bf0:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bf4:	f000 f97c 	bl	8015ef0 <LoRaMacParserData>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d001      	beq.n	8015c02 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015bfe:	2310      	movs	r3, #16
 8015c00:	e069      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015c02:	f107 0210 	add.w	r2, r7, #16
 8015c06:	7bfb      	ldrb	r3, [r7, #15]
 8015c08:	4611      	mov	r1, r2
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff fba0 	bl	8015350 <GetKeyAddrItem>
 8015c10:	4603      	mov	r3, r0
 8015c12:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c14:	7d7b      	ldrb	r3, [r7, #21]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d001      	beq.n	8015c1e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015c1a:	7d7b      	ldrb	r3, [r7, #21]
 8015c1c:	e05b      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	785b      	ldrb	r3, [r3, #1]
 8015c22:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	789b      	ldrb	r3, [r3, #2]
 8015c28:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	68ba      	ldr	r2, [r7, #8]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d001      	beq.n	8015c38 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015c34:	2302      	movs	r3, #2
 8015c36:	e04e      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3a:	7b1b      	ldrb	r3, [r3, #12]
 8015c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	bf14      	ite	ne
 8015c46:	2301      	movne	r3, #1
 8015c48:	2300      	moveq	r3, #0
 8015c4a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015c4c:	4b24      	ldr	r3, [pc, #144]	; (8015ce0 <LoRaMacCryptoUnsecureMessage+0x130>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	789b      	ldrb	r3, [r3, #2]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d101      	bne.n	8015c5a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015c56:	2300      	movs	r3, #0
 8015c58:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	6818      	ldr	r0, [r3, #0]
 8015c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c60:	791b      	ldrb	r3, [r3, #4]
 8015c62:	b29b      	uxth	r3, r3
 8015c64:	3b04      	subs	r3, #4
 8015c66:	b299      	uxth	r1, r3
 8015c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c6c:	7dbc      	ldrb	r4, [r7, #22]
 8015c6e:	7d3a      	ldrb	r2, [r7, #20]
 8015c70:	9303      	str	r3, [sp, #12]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	9302      	str	r3, [sp, #8]
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	9301      	str	r3, [sp, #4]
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	4623      	mov	r3, r4
 8015c80:	f7ff fad7 	bl	8015232 <VerifyCmacB0>
 8015c84:	4603      	mov	r3, r0
 8015c86:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c88:	7d7b      	ldrb	r3, [r7, #21]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d001      	beq.n	8015c92 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8015c8e:	7d7b      	ldrb	r3, [r7, #21]
 8015c90:	e021      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d101      	bne.n	8015ca0 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015c9c:	2308      	movs	r3, #8
 8015c9e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015caa:	b219      	sxth	r1, r3
 8015cac:	7dfa      	ldrb	r2, [r7, #23]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	9301      	str	r3, [sp, #4]
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	9300      	str	r3, [sp, #0]
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	f7ff f97c 	bl	8014fb4 <PayloadEncrypt>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cc0:	7d7b      	ldrb	r3, [r7, #21]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d001      	beq.n	8015cca <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015cc6:	7d7b      	ldrb	r3, [r7, #21]
 8015cc8:	e005      	b.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015cca:	7bbb      	ldrb	r3, [r7, #14]
 8015ccc:	6879      	ldr	r1, [r7, #4]
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7ff fc14 	bl	80154fc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015cd4:	2300      	movs	r3, #0
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	371c      	adds	r7, #28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd90      	pop	{r4, r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	200016ec 	.word	0x200016ec

08015ce4 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b088      	sub	sp, #32
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	4603      	mov	r3, r0
 8015cec:	460a      	mov	r2, r1
 8015cee:	71fb      	strb	r3, [r7, #7]
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	60fb      	str	r3, [r7, #12]
 8015cf8:	f107 0310 	add.w	r3, r7, #16
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	601a      	str	r2, [r3, #0]
 8015d00:	605a      	str	r2, [r3, #4]
 8015d02:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015d04:	2300      	movs	r3, #0
 8015d06:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015d08:	79bb      	ldrb	r3, [r7, #6]
 8015d0a:	2b0c      	cmp	r3, #12
 8015d0c:	d00b      	beq.n	8015d26 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8015d0e:	2b0c      	cmp	r3, #12
 8015d10:	dc0f      	bgt.n	8015d32 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8015d12:	2b0a      	cmp	r3, #10
 8015d14:	d00a      	beq.n	8015d2c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8015d16:	2b0b      	cmp	r3, #11
 8015d18:	d10b      	bne.n	8015d32 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015d1a:	79fb      	ldrb	r3, [r7, #7]
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d10a      	bne.n	8015d36 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8015d20:	2320      	movs	r3, #32
 8015d22:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015d24:	e007      	b.n	8015d36 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015d26:	230b      	movs	r3, #11
 8015d28:	77fb      	strb	r3, [r7, #31]
            break;
 8015d2a:	e005      	b.n	8015d38 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015d2c:	2330      	movs	r3, #48	; 0x30
 8015d2e:	733b      	strb	r3, [r7, #12]
            break;
 8015d30:	e002      	b.n	8015d38 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015d32:	230b      	movs	r3, #11
 8015d34:	e00d      	b.n	8015d52 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8015d36:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015d38:	79ba      	ldrb	r2, [r7, #6]
 8015d3a:	7ff9      	ldrb	r1, [r7, #31]
 8015d3c:	f107 030c 	add.w	r3, r7, #12
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7f8 f975 	bl	800e030 <SecureElementDeriveAndStoreKey>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d001      	beq.n	8015d50 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015d4c:	230f      	movs	r3, #15
 8015d4e:	e000      	b.n	8015d52 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015d50:	2300      	movs	r3, #0
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3720      	adds	r7, #32
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}

08015d5a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015d5a:	b580      	push	{r7, lr}
 8015d5c:	b084      	sub	sp, #16
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d003      	beq.n	8015d70 <LoRaMacParserJoinAccept+0x16>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d101      	bne.n	8015d74 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015d70:	2302      	movs	r3, #2
 8015d72:	e0b9      	b.n	8015ee8 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	89fb      	ldrh	r3, [r7, #14]
 8015d7e:	1c59      	adds	r1, r3, #1
 8015d80:	81f9      	strh	r1, [r7, #14]
 8015d82:	4413      	add	r3, r2
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	1d98      	adds	r0, r3, #6
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	89fb      	ldrh	r3, [r7, #14]
 8015d94:	4413      	add	r3, r2
 8015d96:	2203      	movs	r2, #3
 8015d98:	4619      	mov	r1, r3
 8015d9a:	f002 fe40 	bl	8018a1e <memcpy1>
    bufItr = bufItr + 3;
 8015d9e:	89fb      	ldrh	r3, [r7, #14]
 8015da0:	3303      	adds	r3, #3
 8015da2:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f103 0009 	add.w	r0, r3, #9
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	89fb      	ldrh	r3, [r7, #14]
 8015db0:	4413      	add	r3, r2
 8015db2:	2203      	movs	r2, #3
 8015db4:	4619      	mov	r1, r3
 8015db6:	f002 fe32 	bl	8018a1e <memcpy1>
    bufItr = bufItr + 3;
 8015dba:	89fb      	ldrh	r3, [r7, #14]
 8015dbc:	3303      	adds	r3, #3
 8015dbe:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	89fb      	ldrh	r3, [r7, #14]
 8015dc6:	1c59      	adds	r1, r3, #1
 8015dc8:	81f9      	strh	r1, [r7, #14]
 8015dca:	4413      	add	r3, r2
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	461a      	mov	r2, r3
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	89fb      	ldrh	r3, [r7, #14]
 8015dda:	1c59      	adds	r1, r3, #1
 8015ddc:	81f9      	strh	r1, [r7, #14]
 8015dde:	4413      	add	r3, r2
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	021a      	lsls	r2, r3, #8
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	431a      	orrs	r2, r3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	89fb      	ldrh	r3, [r7, #14]
 8015df4:	1c59      	adds	r1, r3, #1
 8015df6:	81f9      	strh	r1, [r7, #14]
 8015df8:	4413      	add	r3, r2
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	041a      	lsls	r2, r3, #16
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	431a      	orrs	r2, r3
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	89fb      	ldrh	r3, [r7, #14]
 8015e0e:	1c59      	adds	r1, r3, #1
 8015e10:	81f9      	strh	r1, [r7, #14]
 8015e12:	4413      	add	r3, r2
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	061a      	lsls	r2, r3, #24
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	431a      	orrs	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681a      	ldr	r2, [r3, #0]
 8015e26:	89fb      	ldrh	r3, [r7, #14]
 8015e28:	1c59      	adds	r1, r3, #1
 8015e2a:	81f9      	strh	r1, [r7, #14]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	781a      	ldrb	r2, [r3, #0]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	89fb      	ldrh	r3, [r7, #14]
 8015e3a:	1c59      	adds	r1, r3, #1
 8015e3c:	81f9      	strh	r1, [r7, #14]
 8015e3e:	4413      	add	r3, r2
 8015e40:	781a      	ldrb	r2, [r3, #0]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	791b      	ldrb	r3, [r3, #4]
 8015e4a:	1f1a      	subs	r2, r3, #4
 8015e4c:	89fb      	ldrh	r3, [r7, #14]
 8015e4e:	1ad3      	subs	r3, r2, r3
 8015e50:	2b10      	cmp	r3, #16
 8015e52:	d10e      	bne.n	8015e72 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f103 0012 	add.w	r0, r3, #18
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	89fb      	ldrh	r3, [r7, #14]
 8015e60:	4413      	add	r3, r2
 8015e62:	2210      	movs	r2, #16
 8015e64:	4619      	mov	r1, r3
 8015e66:	f002 fdda 	bl	8018a1e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015e6a:	89fb      	ldrh	r3, [r7, #14]
 8015e6c:	3310      	adds	r3, #16
 8015e6e:	81fb      	strh	r3, [r7, #14]
 8015e70:	e008      	b.n	8015e84 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	791b      	ldrb	r3, [r3, #4]
 8015e76:	1f1a      	subs	r2, r3, #4
 8015e78:	89fb      	ldrh	r3, [r7, #14]
 8015e7a:	1ad3      	subs	r3, r2, r3
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	dd01      	ble.n	8015e84 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015e80:	2301      	movs	r3, #1
 8015e82:	e031      	b.n	8015ee8 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681a      	ldr	r2, [r3, #0]
 8015e88:	89fb      	ldrh	r3, [r7, #14]
 8015e8a:	1c59      	adds	r1, r3, #1
 8015e8c:	81f9      	strh	r1, [r7, #14]
 8015e8e:	4413      	add	r3, r2
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	461a      	mov	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	89fb      	ldrh	r3, [r7, #14]
 8015e9e:	1c59      	adds	r1, r3, #1
 8015ea0:	81f9      	strh	r1, [r7, #14]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	021a      	lsls	r2, r3, #8
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eac:	431a      	orrs	r2, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	89fb      	ldrh	r3, [r7, #14]
 8015eb8:	1c59      	adds	r1, r3, #1
 8015eba:	81f9      	strh	r1, [r7, #14]
 8015ebc:	4413      	add	r3, r2
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	041a      	lsls	r2, r3, #16
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec6:	431a      	orrs	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	89fb      	ldrh	r3, [r7, #14]
 8015ed2:	1c59      	adds	r1, r3, #1
 8015ed4:	81f9      	strh	r1, [r7, #14]
 8015ed6:	4413      	add	r3, r2
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	061a      	lsls	r2, r3, #24
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee0:	431a      	orrs	r2, r3
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015ee6:	2300      	movs	r3, #0
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3710      	adds	r7, #16
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <LoRaMacParserData+0x16>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d101      	bne.n	8015f0a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015f06:	2302      	movs	r3, #2
 8015f08:	e0e2      	b.n	80160d0 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	89fb      	ldrh	r3, [r7, #14]
 8015f14:	1c59      	adds	r1, r3, #1
 8015f16:	81f9      	strh	r1, [r7, #14]
 8015f18:	4413      	add	r3, r2
 8015f1a:	781a      	ldrb	r2, [r3, #0]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681a      	ldr	r2, [r3, #0]
 8015f24:	89fb      	ldrh	r3, [r7, #14]
 8015f26:	1c59      	adds	r1, r3, #1
 8015f28:	81f9      	strh	r1, [r7, #14]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	89fb      	ldrh	r3, [r7, #14]
 8015f3a:	1c59      	adds	r1, r3, #1
 8015f3c:	81f9      	strh	r1, [r7, #14]
 8015f3e:	4413      	add	r3, r2
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	021a      	lsls	r2, r3, #8
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	689b      	ldr	r3, [r3, #8]
 8015f48:	431a      	orrs	r2, r3
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	89fb      	ldrh	r3, [r7, #14]
 8015f54:	1c59      	adds	r1, r3, #1
 8015f56:	81f9      	strh	r1, [r7, #14]
 8015f58:	4413      	add	r3, r2
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	041a      	lsls	r2, r3, #16
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	689b      	ldr	r3, [r3, #8]
 8015f62:	431a      	orrs	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681a      	ldr	r2, [r3, #0]
 8015f6c:	89fb      	ldrh	r3, [r7, #14]
 8015f6e:	1c59      	adds	r1, r3, #1
 8015f70:	81f9      	strh	r1, [r7, #14]
 8015f72:	4413      	add	r3, r2
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	061a      	lsls	r2, r3, #24
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	689b      	ldr	r3, [r3, #8]
 8015f7c:	431a      	orrs	r2, r3
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	89fb      	ldrh	r3, [r7, #14]
 8015f88:	1c59      	adds	r1, r3, #1
 8015f8a:	81f9      	strh	r1, [r7, #14]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	781a      	ldrb	r2, [r3, #0]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	89fb      	ldrh	r3, [r7, #14]
 8015f9a:	1c59      	adds	r1, r3, #1
 8015f9c:	81f9      	strh	r1, [r7, #14]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	b29a      	uxth	r2, r3
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681a      	ldr	r2, [r3, #0]
 8015fac:	89fb      	ldrh	r3, [r7, #14]
 8015fae:	1c59      	adds	r1, r3, #1
 8015fb0:	81f9      	strh	r1, [r7, #14]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	0219      	lsls	r1, r3, #8
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	89db      	ldrh	r3, [r3, #14]
 8015fbc:	b21a      	sxth	r2, r3
 8015fbe:	b20b      	sxth	r3, r1
 8015fc0:	4313      	orrs	r3, r2
 8015fc2:	b21b      	sxth	r3, r3
 8015fc4:	b29a      	uxth	r2, r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f103 0010 	add.w	r0, r3, #16
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	89fb      	ldrh	r3, [r7, #14]
 8015fd6:	18d1      	adds	r1, r2, r3
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	7b1b      	ldrb	r3, [r3, #12]
 8015fdc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	f002 fd1a 	bl	8018a1e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	7b1b      	ldrb	r3, [r3, #12]
 8015fee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	89fb      	ldrh	r3, [r7, #14]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2200      	movs	r2, #0
 8016000:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2200      	movs	r2, #0
 8016008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	791b      	ldrb	r3, [r3, #4]
 8016010:	461a      	mov	r2, r3
 8016012:	89fb      	ldrh	r3, [r7, #14]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	2b04      	cmp	r3, #4
 8016018:	dd28      	ble.n	801606c <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	89fb      	ldrh	r3, [r7, #14]
 8016020:	1c59      	adds	r1, r3, #1
 8016022:	81f9      	strh	r1, [r7, #14]
 8016024:	4413      	add	r3, r2
 8016026:	781a      	ldrb	r2, [r3, #0]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	791a      	ldrb	r2, [r3, #4]
 8016032:	89fb      	ldrh	r3, [r7, #14]
 8016034:	b2db      	uxtb	r3, r3
 8016036:	1ad3      	subs	r3, r2, r3
 8016038:	b2db      	uxtb	r3, r3
 801603a:	3b04      	subs	r3, #4
 801603c:	b2da      	uxtb	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	89fb      	ldrh	r3, [r7, #14]
 801604e:	18d1      	adds	r1, r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016056:	b29b      	uxth	r3, r3
 8016058:	461a      	mov	r2, r3
 801605a:	f002 fce0 	bl	8018a1e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016064:	b29a      	uxth	r2, r3
 8016066:	89fb      	ldrh	r3, [r7, #14]
 8016068:	4413      	add	r3, r2
 801606a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	791b      	ldrb	r3, [r3, #4]
 8016074:	3b04      	subs	r3, #4
 8016076:	4413      	add	r3, r2
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	461a      	mov	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	6819      	ldr	r1, [r3, #0]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	791b      	ldrb	r3, [r3, #4]
 801608c:	3b03      	subs	r3, #3
 801608e:	440b      	add	r3, r1
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	021b      	lsls	r3, r3, #8
 8016094:	431a      	orrs	r2, r3
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6819      	ldr	r1, [r3, #0]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	791b      	ldrb	r3, [r3, #4]
 80160a6:	3b02      	subs	r3, #2
 80160a8:	440b      	add	r3, r1
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	041b      	lsls	r3, r3, #16
 80160ae:	431a      	orrs	r2, r3
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6819      	ldr	r1, [r3, #0]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	791b      	ldrb	r3, [r3, #4]
 80160c0:	3b01      	subs	r3, #1
 80160c2:	440b      	add	r3, r1
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	061b      	lsls	r3, r3, #24
 80160c8:	431a      	orrs	r2, r3
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80160ce:	2300      	movs	r3, #0
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3710      	adds	r7, #16
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b084      	sub	sp, #16
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d003      	beq.n	80160ee <LoRaMacSerializerJoinRequest+0x16>
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d101      	bne.n	80160f2 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80160ee:	2301      	movs	r3, #1
 80160f0:	e070      	b.n	80161d4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80160f2:	2300      	movs	r3, #0
 80160f4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	791b      	ldrb	r3, [r3, #4]
 80160fa:	2b16      	cmp	r3, #22
 80160fc:	d801      	bhi.n	8016102 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80160fe:	2302      	movs	r3, #2
 8016100:	e068      	b.n	80161d4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	89fb      	ldrh	r3, [r7, #14]
 8016108:	1c59      	adds	r1, r3, #1
 801610a:	81f9      	strh	r1, [r7, #14]
 801610c:	4413      	add	r3, r2
 801610e:	687a      	ldr	r2, [r7, #4]
 8016110:	7952      	ldrb	r2, [r2, #5]
 8016112:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681a      	ldr	r2, [r3, #0]
 8016118:	89fb      	ldrh	r3, [r7, #14]
 801611a:	18d0      	adds	r0, r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	3306      	adds	r3, #6
 8016120:	2208      	movs	r2, #8
 8016122:	4619      	mov	r1, r3
 8016124:	f002 fc96 	bl	8018a54 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016128:	89fb      	ldrh	r3, [r7, #14]
 801612a:	3308      	adds	r3, #8
 801612c:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	89fb      	ldrh	r3, [r7, #14]
 8016134:	18d0      	adds	r0, r2, r3
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	330e      	adds	r3, #14
 801613a:	2208      	movs	r2, #8
 801613c:	4619      	mov	r1, r3
 801613e:	f002 fc89 	bl	8018a54 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016142:	89fb      	ldrh	r3, [r7, #14]
 8016144:	3308      	adds	r3, #8
 8016146:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	8ad9      	ldrh	r1, [r3, #22]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	89fb      	ldrh	r3, [r7, #14]
 8016152:	1c58      	adds	r0, r3, #1
 8016154:	81f8      	strh	r0, [r7, #14]
 8016156:	4413      	add	r3, r2
 8016158:	b2ca      	uxtb	r2, r1
 801615a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	8adb      	ldrh	r3, [r3, #22]
 8016160:	0a1b      	lsrs	r3, r3, #8
 8016162:	b299      	uxth	r1, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	89fb      	ldrh	r3, [r7, #14]
 801616a:	1c58      	adds	r0, r3, #1
 801616c:	81f8      	strh	r0, [r7, #14]
 801616e:	4413      	add	r3, r2
 8016170:	b2ca      	uxtb	r2, r1
 8016172:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6999      	ldr	r1, [r3, #24]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	89fb      	ldrh	r3, [r7, #14]
 801617e:	1c58      	adds	r0, r3, #1
 8016180:	81f8      	strh	r0, [r7, #14]
 8016182:	4413      	add	r3, r2
 8016184:	b2ca      	uxtb	r2, r1
 8016186:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	699b      	ldr	r3, [r3, #24]
 801618c:	0a19      	lsrs	r1, r3, #8
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	89fb      	ldrh	r3, [r7, #14]
 8016194:	1c58      	adds	r0, r3, #1
 8016196:	81f8      	strh	r0, [r7, #14]
 8016198:	4413      	add	r3, r2
 801619a:	b2ca      	uxtb	r2, r1
 801619c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	699b      	ldr	r3, [r3, #24]
 80161a2:	0c19      	lsrs	r1, r3, #16
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	89fb      	ldrh	r3, [r7, #14]
 80161aa:	1c58      	adds	r0, r3, #1
 80161ac:	81f8      	strh	r0, [r7, #14]
 80161ae:	4413      	add	r3, r2
 80161b0:	b2ca      	uxtb	r2, r1
 80161b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	699b      	ldr	r3, [r3, #24]
 80161b8:	0e19      	lsrs	r1, r3, #24
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	89fb      	ldrh	r3, [r7, #14]
 80161c0:	1c58      	adds	r0, r3, #1
 80161c2:	81f8      	strh	r0, [r7, #14]
 80161c4:	4413      	add	r3, r2
 80161c6:	b2ca      	uxtb	r2, r1
 80161c8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80161ca:	89fb      	ldrh	r3, [r7, #14]
 80161cc:	b2da      	uxtb	r2, r3
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3710      	adds	r7, #16
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d003      	beq.n	80161f2 <LoRaMacSerializerData+0x16>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d101      	bne.n	80161f6 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80161f2:	2301      	movs	r3, #1
 80161f4:	e0e5      	b.n	80163c2 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80161f6:	2300      	movs	r3, #0
 80161f8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80161fa:	2308      	movs	r3, #8
 80161fc:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	7b1b      	ldrb	r3, [r3, #12]
 8016202:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016206:	b2db      	uxtb	r3, r3
 8016208:	b29a      	uxth	r2, r3
 801620a:	89bb      	ldrh	r3, [r7, #12]
 801620c:	4413      	add	r3, r2
 801620e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016216:	2b00      	cmp	r3, #0
 8016218:	d002      	beq.n	8016220 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801621a:	89bb      	ldrh	r3, [r7, #12]
 801621c:	3301      	adds	r3, #1
 801621e:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016226:	b29a      	uxth	r2, r3
 8016228:	89bb      	ldrh	r3, [r7, #12]
 801622a:	4413      	add	r3, r2
 801622c:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801622e:	89bb      	ldrh	r3, [r7, #12]
 8016230:	3304      	adds	r3, #4
 8016232:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	791b      	ldrb	r3, [r3, #4]
 8016238:	b29b      	uxth	r3, r3
 801623a:	89ba      	ldrh	r2, [r7, #12]
 801623c:	429a      	cmp	r2, r3
 801623e:	d901      	bls.n	8016244 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016240:	2302      	movs	r3, #2
 8016242:	e0be      	b.n	80163c2 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	89fb      	ldrh	r3, [r7, #14]
 801624a:	1c59      	adds	r1, r3, #1
 801624c:	81f9      	strh	r1, [r7, #14]
 801624e:	4413      	add	r3, r2
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	7952      	ldrb	r2, [r2, #5]
 8016254:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	6899      	ldr	r1, [r3, #8]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	89fb      	ldrh	r3, [r7, #14]
 8016260:	1c58      	adds	r0, r3, #1
 8016262:	81f8      	strh	r0, [r7, #14]
 8016264:	4413      	add	r3, r2
 8016266:	b2ca      	uxtb	r2, r1
 8016268:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	0a19      	lsrs	r1, r3, #8
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	89fb      	ldrh	r3, [r7, #14]
 8016276:	1c58      	adds	r0, r3, #1
 8016278:	81f8      	strh	r0, [r7, #14]
 801627a:	4413      	add	r3, r2
 801627c:	b2ca      	uxtb	r2, r1
 801627e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	689b      	ldr	r3, [r3, #8]
 8016284:	0c19      	lsrs	r1, r3, #16
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	89fb      	ldrh	r3, [r7, #14]
 801628c:	1c58      	adds	r0, r3, #1
 801628e:	81f8      	strh	r0, [r7, #14]
 8016290:	4413      	add	r3, r2
 8016292:	b2ca      	uxtb	r2, r1
 8016294:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	689b      	ldr	r3, [r3, #8]
 801629a:	0e19      	lsrs	r1, r3, #24
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681a      	ldr	r2, [r3, #0]
 80162a0:	89fb      	ldrh	r3, [r7, #14]
 80162a2:	1c58      	adds	r0, r3, #1
 80162a4:	81f8      	strh	r0, [r7, #14]
 80162a6:	4413      	add	r3, r2
 80162a8:	b2ca      	uxtb	r2, r1
 80162aa:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	89fb      	ldrh	r3, [r7, #14]
 80162b2:	1c59      	adds	r1, r3, #1
 80162b4:	81f9      	strh	r1, [r7, #14]
 80162b6:	4413      	add	r3, r2
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	7b12      	ldrb	r2, [r2, #12]
 80162bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	89d9      	ldrh	r1, [r3, #14]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	89fb      	ldrh	r3, [r7, #14]
 80162c8:	1c58      	adds	r0, r3, #1
 80162ca:	81f8      	strh	r0, [r7, #14]
 80162cc:	4413      	add	r3, r2
 80162ce:	b2ca      	uxtb	r2, r1
 80162d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	89db      	ldrh	r3, [r3, #14]
 80162d6:	0a1b      	lsrs	r3, r3, #8
 80162d8:	b299      	uxth	r1, r3
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	89fb      	ldrh	r3, [r7, #14]
 80162e0:	1c58      	adds	r0, r3, #1
 80162e2:	81f8      	strh	r0, [r7, #14]
 80162e4:	4413      	add	r3, r2
 80162e6:	b2ca      	uxtb	r2, r1
 80162e8:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	89fb      	ldrh	r3, [r7, #14]
 80162f0:	18d0      	adds	r0, r2, r3
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f103 0110 	add.w	r1, r3, #16
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	7b1b      	ldrb	r3, [r3, #12]
 80162fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016300:	b2db      	uxtb	r3, r3
 8016302:	b29b      	uxth	r3, r3
 8016304:	461a      	mov	r2, r3
 8016306:	f002 fb8a 	bl	8018a1e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	7b1b      	ldrb	r3, [r3, #12]
 801630e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016312:	b2db      	uxtb	r3, r3
 8016314:	b29a      	uxth	r2, r3
 8016316:	89fb      	ldrh	r3, [r7, #14]
 8016318:	4413      	add	r3, r2
 801631a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016322:	2b00      	cmp	r3, #0
 8016324:	d009      	beq.n	801633a <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	89fb      	ldrh	r3, [r7, #14]
 801632c:	1c59      	adds	r1, r3, #1
 801632e:	81f9      	strh	r1, [r7, #14]
 8016330:	4413      	add	r3, r2
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016338:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681a      	ldr	r2, [r3, #0]
 801633e:	89fb      	ldrh	r3, [r7, #14]
 8016340:	18d0      	adds	r0, r2, r3
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801634c:	b29b      	uxth	r3, r3
 801634e:	461a      	mov	r2, r3
 8016350:	f002 fb65 	bl	8018a1e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801635a:	b29a      	uxth	r2, r3
 801635c:	89fb      	ldrh	r3, [r7, #14]
 801635e:	4413      	add	r3, r2
 8016360:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	89fb      	ldrh	r3, [r7, #14]
 801636c:	1c58      	adds	r0, r3, #1
 801636e:	81f8      	strh	r0, [r7, #14]
 8016370:	4413      	add	r3, r2
 8016372:	b2ca      	uxtb	r2, r1
 8016374:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801637a:	0a19      	lsrs	r1, r3, #8
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	89fb      	ldrh	r3, [r7, #14]
 8016382:	1c58      	adds	r0, r3, #1
 8016384:	81f8      	strh	r0, [r7, #14]
 8016386:	4413      	add	r3, r2
 8016388:	b2ca      	uxtb	r2, r1
 801638a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016390:	0c19      	lsrs	r1, r3, #16
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	89fb      	ldrh	r3, [r7, #14]
 8016398:	1c58      	adds	r0, r3, #1
 801639a:	81f8      	strh	r0, [r7, #14]
 801639c:	4413      	add	r3, r2
 801639e:	b2ca      	uxtb	r2, r1
 80163a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163a6:	0e19      	lsrs	r1, r3, #24
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	89fb      	ldrh	r3, [r7, #14]
 80163ae:	1c58      	adds	r0, r3, #1
 80163b0:	81f8      	strh	r0, [r7, #14]
 80163b2:	4413      	add	r3, r2
 80163b4:	b2ca      	uxtb	r2, r1
 80163b6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80163b8:	89fb      	ldrh	r3, [r7, #14]
 80163ba:	b2da      	uxtb	r2, r3
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80163c0:	2300      	movs	r3, #0
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3710      	adds	r7, #16
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}

080163ca <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80163ca:	b480      	push	{r7}
 80163cc:	b083      	sub	sp, #12
 80163ce:	af00      	add	r7, sp, #0
 80163d0:	4603      	mov	r3, r0
 80163d2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80163d4:	79fb      	ldrb	r3, [r7, #7]
 80163d6:	2b05      	cmp	r3, #5
 80163d8:	d101      	bne.n	80163de <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80163da:	2301      	movs	r3, #1
 80163dc:	e000      	b.n	80163e0 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80163de:	2300      	movs	r3, #0
        }
    }
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	370c      	adds	r7, #12
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bc80      	pop	{r7}
 80163e8:	4770      	bx	lr

080163ea <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80163ea:	b580      	push	{r7, lr}
 80163ec:	b084      	sub	sp, #16
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	4603      	mov	r3, r0
 80163f2:	6039      	str	r1, [r7, #0]
 80163f4:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80163f6:	2300      	movs	r3, #0
 80163f8:	60bb      	str	r3, [r7, #8]
    switch( region )
 80163fa:	79fb      	ldrb	r3, [r7, #7]
 80163fc:	2b05      	cmp	r3, #5
 80163fe:	d105      	bne.n	801640c <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016400:	6838      	ldr	r0, [r7, #0]
 8016402:	f001 f995 	bl	8017730 <RegionEU868GetPhyParam>
 8016406:	4603      	mov	r3, r0
 8016408:	60fb      	str	r3, [r7, #12]
 801640a:	e001      	b.n	8016410 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	4618      	mov	r0, r3
 8016414:	3710      	adds	r7, #16
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}

0801641a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b082      	sub	sp, #8
 801641e:	af00      	add	r7, sp, #0
 8016420:	4603      	mov	r3, r0
 8016422:	6039      	str	r1, [r7, #0]
 8016424:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016426:	79fb      	ldrb	r3, [r7, #7]
 8016428:	2b05      	cmp	r3, #5
 801642a:	d103      	bne.n	8016434 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801642c:	6838      	ldr	r0, [r7, #0]
 801642e:	f001 facb 	bl	80179c8 <RegionEU868SetBandTxDone>
 8016432:	e000      	b.n	8016436 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016434:	bf00      	nop
        }
    }
}
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	4603      	mov	r3, r0
 8016444:	6039      	str	r1, [r7, #0]
 8016446:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016448:	79fb      	ldrb	r3, [r7, #7]
 801644a:	2b05      	cmp	r3, #5
 801644c:	d103      	bne.n	8016456 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801644e:	6838      	ldr	r0, [r7, #0]
 8016450:	f001 fae6 	bl	8017a20 <RegionEU868InitDefaults>
 8016454:	e000      	b.n	8016458 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016456:	bf00      	nop
        }
    }
}
 8016458:	bf00      	nop
 801645a:	3708      	adds	r7, #8
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}

08016460 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	4603      	mov	r3, r0
 8016468:	6039      	str	r1, [r7, #0]
 801646a:	71fb      	strb	r3, [r7, #7]
 801646c:	4613      	mov	r3, r2
 801646e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016470:	79fb      	ldrb	r3, [r7, #7]
 8016472:	2b05      	cmp	r3, #5
 8016474:	d106      	bne.n	8016484 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016476:	79bb      	ldrb	r3, [r7, #6]
 8016478:	4619      	mov	r1, r3
 801647a:	6838      	ldr	r0, [r7, #0]
 801647c:	f001 fb6e 	bl	8017b5c <RegionEU868Verify>
 8016480:	4603      	mov	r3, r0
 8016482:	e000      	b.n	8016486 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016484:	2300      	movs	r3, #0
        }
    }
}
 8016486:	4618      	mov	r0, r3
 8016488:	3708      	adds	r7, #8
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}

0801648e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801648e:	b580      	push	{r7, lr}
 8016490:	b082      	sub	sp, #8
 8016492:	af00      	add	r7, sp, #0
 8016494:	4603      	mov	r3, r0
 8016496:	6039      	str	r1, [r7, #0]
 8016498:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801649a:	79fb      	ldrb	r3, [r7, #7]
 801649c:	2b05      	cmp	r3, #5
 801649e:	d103      	bne.n	80164a8 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80164a0:	6838      	ldr	r0, [r7, #0]
 80164a2:	f001 fbd7 	bl	8017c54 <RegionEU868ApplyCFList>
 80164a6:	e000      	b.n	80164aa <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80164a8:	bf00      	nop
        }
    }
}
 80164aa:	bf00      	nop
 80164ac:	3708      	adds	r7, #8
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}

080164b2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	b082      	sub	sp, #8
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	4603      	mov	r3, r0
 80164ba:	6039      	str	r1, [r7, #0]
 80164bc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80164be:	79fb      	ldrb	r3, [r7, #7]
 80164c0:	2b05      	cmp	r3, #5
 80164c2:	d104      	bne.n	80164ce <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80164c4:	6838      	ldr	r0, [r7, #0]
 80164c6:	f001 fc39 	bl	8017d3c <RegionEU868ChanMaskSet>
 80164ca:	4603      	mov	r3, r0
 80164cc:	e000      	b.n	80164d0 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80164ce:	2300      	movs	r3, #0
        }
    }
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b082      	sub	sp, #8
 80164dc:	af00      	add	r7, sp, #0
 80164de:	603b      	str	r3, [r7, #0]
 80164e0:	4603      	mov	r3, r0
 80164e2:	71fb      	strb	r3, [r7, #7]
 80164e4:	460b      	mov	r3, r1
 80164e6:	71bb      	strb	r3, [r7, #6]
 80164e8:	4613      	mov	r3, r2
 80164ea:	717b      	strb	r3, [r7, #5]
    switch( region )
 80164ec:	79fb      	ldrb	r3, [r7, #7]
 80164ee:	2b05      	cmp	r3, #5
 80164f0:	d107      	bne.n	8016502 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80164f2:	7979      	ldrb	r1, [r7, #5]
 80164f4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	683a      	ldr	r2, [r7, #0]
 80164fc:	f001 fc48 	bl	8017d90 <RegionEU868ComputeRxWindowParameters>
 8016500:	e000      	b.n	8016504 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016502:	bf00      	nop
        }
    }
}
 8016504:	bf00      	nop
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}

0801650c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	4603      	mov	r3, r0
 8016514:	60b9      	str	r1, [r7, #8]
 8016516:	607a      	str	r2, [r7, #4]
 8016518:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801651a:	7bfb      	ldrb	r3, [r7, #15]
 801651c:	2b05      	cmp	r3, #5
 801651e:	d105      	bne.n	801652c <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016520:	6879      	ldr	r1, [r7, #4]
 8016522:	68b8      	ldr	r0, [r7, #8]
 8016524:	f001 fc8e 	bl	8017e44 <RegionEU868RxConfig>
 8016528:	4603      	mov	r3, r0
 801652a:	e000      	b.n	801652e <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801652c:	2300      	movs	r3, #0
        }
    }
}
 801652e:	4618      	mov	r0, r3
 8016530:	3710      	adds	r7, #16
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}

08016536 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016536:	b580      	push	{r7, lr}
 8016538:	b084      	sub	sp, #16
 801653a:	af00      	add	r7, sp, #0
 801653c:	60b9      	str	r1, [r7, #8]
 801653e:	607a      	str	r2, [r7, #4]
 8016540:	603b      	str	r3, [r7, #0]
 8016542:	4603      	mov	r3, r0
 8016544:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016546:	7bfb      	ldrb	r3, [r7, #15]
 8016548:	2b05      	cmp	r3, #5
 801654a:	d106      	bne.n	801655a <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801654c:	683a      	ldr	r2, [r7, #0]
 801654e:	6879      	ldr	r1, [r7, #4]
 8016550:	68b8      	ldr	r0, [r7, #8]
 8016552:	f001 fd47 	bl	8017fe4 <RegionEU868TxConfig>
 8016556:	4603      	mov	r3, r0
 8016558:	e000      	b.n	801655c <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801655a:	2300      	movs	r3, #0
        }
    }
}
 801655c:	4618      	mov	r0, r3
 801655e:	3710      	adds	r7, #16
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}

08016564 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b086      	sub	sp, #24
 8016568:	af02      	add	r7, sp, #8
 801656a:	60b9      	str	r1, [r7, #8]
 801656c:	607a      	str	r2, [r7, #4]
 801656e:	603b      	str	r3, [r7, #0]
 8016570:	4603      	mov	r3, r0
 8016572:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016574:	7bfb      	ldrb	r3, [r7, #15]
 8016576:	2b05      	cmp	r3, #5
 8016578:	d109      	bne.n	801658e <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801657a:	69fb      	ldr	r3, [r7, #28]
 801657c:	9300      	str	r3, [sp, #0]
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	683a      	ldr	r2, [r7, #0]
 8016582:	6879      	ldr	r1, [r7, #4]
 8016584:	68b8      	ldr	r0, [r7, #8]
 8016586:	f001 fdfd 	bl	8018184 <RegionEU868LinkAdrReq>
 801658a:	4603      	mov	r3, r0
 801658c:	e000      	b.n	8016590 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801658e:	2300      	movs	r3, #0
        }
    }
}
 8016590:	4618      	mov	r0, r3
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}

08016598 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b082      	sub	sp, #8
 801659c:	af00      	add	r7, sp, #0
 801659e:	4603      	mov	r3, r0
 80165a0:	6039      	str	r1, [r7, #0]
 80165a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80165a4:	79fb      	ldrb	r3, [r7, #7]
 80165a6:	2b05      	cmp	r3, #5
 80165a8:	d104      	bne.n	80165b4 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80165aa:	6838      	ldr	r0, [r7, #0]
 80165ac:	f001 ff0c 	bl	80183c8 <RegionEU868RxParamSetupReq>
 80165b0:	4603      	mov	r3, r0
 80165b2:	e000      	b.n	80165b6 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80165b4:	2300      	movs	r3, #0
        }
    }
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3708      	adds	r7, #8
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}

080165be <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80165be:	b580      	push	{r7, lr}
 80165c0:	b082      	sub	sp, #8
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	4603      	mov	r3, r0
 80165c6:	6039      	str	r1, [r7, #0]
 80165c8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80165ca:	79fb      	ldrb	r3, [r7, #7]
 80165cc:	2b05      	cmp	r3, #5
 80165ce:	d104      	bne.n	80165da <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80165d0:	6838      	ldr	r0, [r7, #0]
 80165d2:	f001 ff37 	bl	8018444 <RegionEU868NewChannelReq>
 80165d6:	4603      	mov	r3, r0
 80165d8:	e000      	b.n	80165dc <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80165da:	2300      	movs	r3, #0
        }
    }
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3708      	adds	r7, #8
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	4603      	mov	r3, r0
 80165ec:	6039      	str	r1, [r7, #0]
 80165ee:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80165f0:	79fb      	ldrb	r3, [r7, #7]
 80165f2:	2b05      	cmp	r3, #5
 80165f4:	d104      	bne.n	8016600 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80165f6:	6838      	ldr	r0, [r7, #0]
 80165f8:	f001 ff82 	bl	8018500 <RegionEU868TxParamSetupReq>
 80165fc:	4603      	mov	r3, r0
 80165fe:	e000      	b.n	8016602 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016600:	2300      	movs	r3, #0
        }
    }
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	4603      	mov	r3, r0
 8016612:	6039      	str	r1, [r7, #0]
 8016614:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016616:	79fb      	ldrb	r3, [r7, #7]
 8016618:	2b05      	cmp	r3, #5
 801661a:	d104      	bne.n	8016626 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801661c:	6838      	ldr	r0, [r7, #0]
 801661e:	f001 ff7b 	bl	8018518 <RegionEU868DlChannelReq>
 8016622:	4603      	mov	r3, r0
 8016624:	e000      	b.n	8016628 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016626:	2300      	movs	r3, #0
        }
    }
}
 8016628:	4618      	mov	r0, r3
 801662a:	3708      	adds	r7, #8
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b082      	sub	sp, #8
 8016634:	af00      	add	r7, sp, #0
 8016636:	4603      	mov	r3, r0
 8016638:	71fb      	strb	r3, [r7, #7]
 801663a:	460b      	mov	r3, r1
 801663c:	71bb      	strb	r3, [r7, #6]
 801663e:	4613      	mov	r3, r2
 8016640:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016642:	79fb      	ldrb	r3, [r7, #7]
 8016644:	2b05      	cmp	r3, #5
 8016646:	d108      	bne.n	801665a <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016648:	797a      	ldrb	r2, [r7, #5]
 801664a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801664e:	4611      	mov	r1, r2
 8016650:	4618      	mov	r0, r3
 8016652:	f001 ffab 	bl	80185ac <RegionEU868AlternateDr>
 8016656:	4603      	mov	r3, r0
 8016658:	e000      	b.n	801665c <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801665a:	2300      	movs	r3, #0
        }
    }
}
 801665c:	4618      	mov	r0, r3
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	60b9      	str	r1, [r7, #8]
 801666c:	607a      	str	r2, [r7, #4]
 801666e:	603b      	str	r3, [r7, #0]
 8016670:	4603      	mov	r3, r0
 8016672:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016674:	7bfb      	ldrb	r3, [r7, #15]
 8016676:	2b05      	cmp	r3, #5
 8016678:	d107      	bne.n	801668a <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801667a:	69bb      	ldr	r3, [r7, #24]
 801667c:	683a      	ldr	r2, [r7, #0]
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	68b8      	ldr	r0, [r7, #8]
 8016682:	f001 ffa3 	bl	80185cc <RegionEU868NextChannel>
 8016686:	4603      	mov	r3, r0
 8016688:	e000      	b.n	801668c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801668a:	2309      	movs	r3, #9
        }
    }
}
 801668c:	4618      	mov	r0, r3
 801668e:	3710      	adds	r7, #16
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	4603      	mov	r3, r0
 801669c:	6039      	str	r1, [r7, #0]
 801669e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	2b05      	cmp	r3, #5
 80166a4:	d103      	bne.n	80166ae <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80166a6:	6838      	ldr	r0, [r7, #0]
 80166a8:	f002 f90a 	bl	80188c0 <RegionEU868SetContinuousWave>
 80166ac:	e000      	b.n	80166b0 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80166ae:	bf00      	nop
        }
    }
}
 80166b0:	bf00      	nop
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80166b8:	b590      	push	{r4, r7, lr}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4604      	mov	r4, r0
 80166c0:	4608      	mov	r0, r1
 80166c2:	4611      	mov	r1, r2
 80166c4:	461a      	mov	r2, r3
 80166c6:	4623      	mov	r3, r4
 80166c8:	71fb      	strb	r3, [r7, #7]
 80166ca:	4603      	mov	r3, r0
 80166cc:	71bb      	strb	r3, [r7, #6]
 80166ce:	460b      	mov	r3, r1
 80166d0:	717b      	strb	r3, [r7, #5]
 80166d2:	4613      	mov	r3, r2
 80166d4:	713b      	strb	r3, [r7, #4]
    switch( region )
 80166d6:	79fb      	ldrb	r3, [r7, #7]
 80166d8:	2b05      	cmp	r3, #5
 80166da:	d109      	bne.n	80166f0 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80166dc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80166e0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80166e4:	79bb      	ldrb	r3, [r7, #6]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f002 f938 	bl	801895c <RegionEU868ApplyDrOffset>
 80166ec:	4603      	mov	r3, r0
 80166ee:	e000      	b.n	80166f2 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80166f0:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd90      	pop	{r4, r7, pc}
	...

080166fc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80166fc:	b480      	push	{r7}
 80166fe:	b083      	sub	sp, #12
 8016700:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016702:	4b04      	ldr	r3, [pc, #16]	; (8016714 <RegionGetVersion+0x18>)
 8016704:	607b      	str	r3, [r7, #4]

    return version;
 8016706:	687b      	ldr	r3, [r7, #4]
}
 8016708:	4618      	mov	r0, r3
 801670a:	370c      	adds	r7, #12
 801670c:	46bd      	mov	sp, r7
 801670e:	bc80      	pop	{r7}
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	01010003 	.word	0x01010003

08016718 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016718:	b480      	push	{r7}
 801671a:	b087      	sub	sp, #28
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	4608      	mov	r0, r1
 8016722:	4639      	mov	r1, r7
 8016724:	e881 000c 	stmia.w	r1, {r2, r3}
 8016728:	4603      	mov	r3, r0
 801672a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	881b      	ldrh	r3, [r3, #0]
 8016730:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016732:	7afb      	ldrb	r3, [r7, #11]
 8016734:	f083 0301 	eor.w	r3, r3, #1
 8016738:	b2db      	uxtb	r3, r3
 801673a:	2b00      	cmp	r3, #0
 801673c:	d01b      	beq.n	8016776 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801673e:	f242 7310 	movw	r3, #10000	; 0x2710
 8016742:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801674a:	d202      	bcs.n	8016752 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801674c:	2364      	movs	r3, #100	; 0x64
 801674e:	82bb      	strh	r3, [r7, #20]
 8016750:	e00b      	b.n	801676a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8016758:	4293      	cmp	r3, r2
 801675a:	d803      	bhi.n	8016764 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801675c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016760:	82bb      	strh	r3, [r7, #20]
 8016762:	e002      	b.n	801676a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016764:	f242 7310 	movw	r3, #10000	; 0x2710
 8016768:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801676a:	8aba      	ldrh	r2, [r7, #20]
 801676c:	8afb      	ldrh	r3, [r7, #22]
 801676e:	4293      	cmp	r3, r2
 8016770:	bf38      	it	cc
 8016772:	4613      	movcc	r3, r2
 8016774:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016776:	8afb      	ldrh	r3, [r7, #22]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d101      	bne.n	8016780 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801677c:	2301      	movs	r3, #1
 801677e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016780:	8afb      	ldrh	r3, [r7, #22]
}
 8016782:	4618      	mov	r0, r3
 8016784:	371c      	adds	r7, #28
 8016786:	46bd      	mov	sp, r7
 8016788:	bc80      	pop	{r7}
 801678a:	4770      	bx	lr

0801678c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b08e      	sub	sp, #56	; 0x38
 8016790:	af02      	add	r7, sp, #8
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	4608      	mov	r0, r1
 8016796:	4639      	mov	r1, r7
 8016798:	e881 000c 	stmia.w	r1, {r2, r3}
 801679c:	4603      	mov	r3, r0
 801679e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	881b      	ldrh	r3, [r3, #0]
 80167a4:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80167a6:	4b4b      	ldr	r3, [pc, #300]	; (80168d4 <SetMaxTimeCredits+0x148>)
 80167a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80167aa:	463b      	mov	r3, r7
 80167ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80167b0:	f005 fdc0 	bl	801c334 <SysTimeToMs>
 80167b4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80167b6:	f107 0314 	add.w	r3, r7, #20
 80167ba:	2200      	movs	r2, #0
 80167bc:	601a      	str	r2, [r3, #0]
 80167be:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80167c0:	7af9      	ldrb	r1, [r7, #11]
 80167c2:	463b      	mov	r3, r7
 80167c4:	cb0c      	ldmia	r3, {r2, r3}
 80167c6:	68f8      	ldr	r0, [r7, #12]
 80167c8:	f7ff ffa6 	bl	8016718 <GetDutyCycle>
 80167cc:	4603      	mov	r3, r0
 80167ce:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80167d0:	7afb      	ldrb	r3, [r7, #11]
 80167d2:	f083 0301 	eor.w	r3, r3, #1
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d062      	beq.n	80168a2 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80167dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167de:	2b64      	cmp	r3, #100	; 0x64
 80167e0:	d105      	bne.n	80167ee <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80167e2:	4b3c      	ldr	r3, [pc, #240]	; (80168d4 <SetMaxTimeCredits+0x148>)
 80167e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167ea:	609a      	str	r2, [r3, #8]
 80167ec:	e00b      	b.n	8016806 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80167ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80167f4:	d105      	bne.n	8016802 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80167f6:	4b38      	ldr	r3, [pc, #224]	; (80168d8 <SetMaxTimeCredits+0x14c>)
 80167f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167fe:	609a      	str	r2, [r3, #8]
 8016800:	e001      	b.n	8016806 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016802:	4b36      	ldr	r3, [pc, #216]	; (80168dc <SetMaxTimeCredits+0x150>)
 8016804:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	689a      	ldr	r2, [r3, #8]
 801680a:	f107 031c 	add.w	r3, r7, #28
 801680e:	4611      	mov	r1, r2
 8016810:	4618      	mov	r0, r3
 8016812:	f005 fdb7 	bl	801c384 <SysTimeFromMs>
 8016816:	f107 0014 	add.w	r0, r7, #20
 801681a:	6a3b      	ldr	r3, [r7, #32]
 801681c:	9300      	str	r3, [sp, #0]
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	463a      	mov	r2, r7
 8016822:	ca06      	ldmia	r2, {r1, r2}
 8016824:	f005 fcc7 	bl	801c1b6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016828:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801682c:	f083 0301 	eor.w	r3, r3, #1
 8016830:	b2db      	uxtb	r3, r3
 8016832:	2b00      	cmp	r3, #0
 8016834:	d006      	beq.n	8016844 <SetMaxTimeCredits+0xb8>
 8016836:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801683a:	f083 0301 	eor.w	r3, r3, #1
 801683e:	b2db      	uxtb	r3, r3
 8016840:	2b00      	cmp	r3, #0
 8016842:	d108      	bne.n	8016856 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801684a:	429a      	cmp	r2, r3
 801684c:	d103      	bne.n	8016856 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801684e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016850:	4a23      	ldr	r2, [pc, #140]	; (80168e0 <SetMaxTimeCredits+0x154>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d92f      	bls.n	80168b6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801685a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	4a21      	ldr	r2, [pc, #132]	; (80168e4 <SetMaxTimeCredits+0x158>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d928      	bls.n	80168b6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801686a:	3b30      	subs	r3, #48	; 0x30
 801686c:	4a1e      	ldr	r2, [pc, #120]	; (80168e8 <SetMaxTimeCredits+0x15c>)
 801686e:	fba2 2303 	umull	r2, r3, r2, r3
 8016872:	0c1b      	lsrs	r3, r3, #16
 8016874:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	4a1c      	ldr	r2, [pc, #112]	; (80168ec <SetMaxTimeCredits+0x160>)
 801687a:	fb02 f303 	mul.w	r3, r2, r3
 801687e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8016886:	3330      	adds	r3, #48	; 0x30
 8016888:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801688a:	2300      	movs	r3, #0
 801688c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801688e:	f107 0314 	add.w	r3, r7, #20
 8016892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016896:	f005 fd4d 	bl	801c334 <SysTimeToMs>
 801689a:	4602      	mov	r2, r0
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	609a      	str	r2, [r3, #8]
 80168a0:	e009      	b.n	80168b6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80168a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80168a6:	f083 0301 	eor.w	r3, r3, #1
 80168aa:	b2db      	uxtb	r3, r3
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d002      	beq.n	80168b6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168b4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d102      	bne.n	80168c4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168c2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168c8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80168ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3730      	adds	r7, #48	; 0x30
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	001b7740 	.word	0x001b7740
 80168d8:	0112a880 	.word	0x0112a880
 80168dc:	02932e00 	.word	0x02932e00
 80168e0:	0001517f 	.word	0x0001517f
 80168e4:	0001ec2f 	.word	0x0001ec2f
 80168e8:	c22e4507 	.word	0xc22e4507
 80168ec:	00015180 	.word	0x00015180

080168f0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af02      	add	r7, sp, #8
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	4608      	mov	r0, r1
 80168fa:	4611      	mov	r1, r2
 80168fc:	461a      	mov	r2, r3
 80168fe:	4603      	mov	r3, r0
 8016900:	70fb      	strb	r3, [r7, #3]
 8016902:	460b      	mov	r3, r1
 8016904:	70bb      	strb	r3, [r7, #2]
 8016906:	4613      	mov	r3, r2
 8016908:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801690a:	78f9      	ldrb	r1, [r7, #3]
 801690c:	787b      	ldrb	r3, [r7, #1]
 801690e:	9301      	str	r3, [sp, #4]
 8016910:	78bb      	ldrb	r3, [r7, #2]
 8016912:	9300      	str	r3, [sp, #0]
 8016914:	f107 0318 	add.w	r3, r7, #24
 8016918:	cb0c      	ldmia	r3, {r2, r3}
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7ff ff36 	bl	801678c <SetMaxTimeCredits>
 8016920:	4603      	mov	r3, r0
 8016922:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016924:	78fb      	ldrb	r3, [r7, #3]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00a      	beq.n	8016940 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	4618      	mov	r0, r3
 8016930:	f006 fb3c 	bl	801cfac <UTIL_TIMER_GetElapsedTime>
 8016934:	4602      	mov	r2, r0
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	68db      	ldr	r3, [r3, #12]
 801693a:	441a      	add	r2, r3
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	68da      	ldr	r2, [r3, #12]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	691b      	ldr	r3, [r3, #16]
 8016948:	429a      	cmp	r2, r3
 801694a:	d903      	bls.n	8016954 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	691a      	ldr	r2, [r3, #16]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6a3a      	ldr	r2, [r7, #32]
 8016958:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801695a:	89fb      	ldrh	r3, [r7, #14]
}
 801695c:	4618      	mov	r0, r3
 801695e:	3710      	adds	r7, #16
 8016960:	46bd      	mov	sp, r7
 8016962:	bd80      	pop	{r7, pc}

08016964 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016964:	b480      	push	{r7}
 8016966:	b085      	sub	sp, #20
 8016968:	af00      	add	r7, sp, #0
 801696a:	4603      	mov	r3, r0
 801696c:	460a      	mov	r2, r1
 801696e:	80fb      	strh	r3, [r7, #6]
 8016970:	4613      	mov	r3, r2
 8016972:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016974:	2300      	movs	r3, #0
 8016976:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016978:	2300      	movs	r3, #0
 801697a:	73bb      	strb	r3, [r7, #14]
 801697c:	e011      	b.n	80169a2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801697e:	88fa      	ldrh	r2, [r7, #6]
 8016980:	7bbb      	ldrb	r3, [r7, #14]
 8016982:	2101      	movs	r1, #1
 8016984:	fa01 f303 	lsl.w	r3, r1, r3
 8016988:	401a      	ands	r2, r3
 801698a:	7bbb      	ldrb	r3, [r7, #14]
 801698c:	2101      	movs	r1, #1
 801698e:	fa01 f303 	lsl.w	r3, r1, r3
 8016992:	429a      	cmp	r2, r3
 8016994:	d102      	bne.n	801699c <CountChannels+0x38>
        {
            nbActiveBits++;
 8016996:	7bfb      	ldrb	r3, [r7, #15]
 8016998:	3301      	adds	r3, #1
 801699a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801699c:	7bbb      	ldrb	r3, [r7, #14]
 801699e:	3301      	adds	r3, #1
 80169a0:	73bb      	strb	r3, [r7, #14]
 80169a2:	7bba      	ldrb	r2, [r7, #14]
 80169a4:	797b      	ldrb	r3, [r7, #5]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d3e9      	bcc.n	801697e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80169aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3714      	adds	r7, #20
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bc80      	pop	{r7}
 80169b4:	4770      	bx	lr

080169b6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b084      	sub	sp, #16
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6039      	str	r1, [r7, #0]
 80169be:	4611      	mov	r1, r2
 80169c0:	461a      	mov	r2, r3
 80169c2:	4603      	mov	r3, r0
 80169c4:	71fb      	strb	r3, [r7, #7]
 80169c6:	460b      	mov	r3, r1
 80169c8:	71bb      	strb	r3, [r7, #6]
 80169ca:	4613      	mov	r3, r2
 80169cc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80169ce:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80169d2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80169d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80169da:	4618      	mov	r0, r3
 80169dc:	f000 f85d 	bl	8016a9a <RegionCommonValueInRange>
 80169e0:	4603      	mov	r3, r0
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d101      	bne.n	80169ea <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80169e6:	2300      	movs	r3, #0
 80169e8:	e053      	b.n	8016a92 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80169ea:	2300      	movs	r3, #0
 80169ec:	73fb      	strb	r3, [r7, #15]
 80169ee:	2300      	movs	r3, #0
 80169f0:	73bb      	strb	r3, [r7, #14]
 80169f2:	e049      	b.n	8016a88 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80169f4:	2300      	movs	r3, #0
 80169f6:	737b      	strb	r3, [r7, #13]
 80169f8:	e03d      	b.n	8016a76 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80169fa:	7bbb      	ldrb	r3, [r7, #14]
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	683a      	ldr	r2, [r7, #0]
 8016a00:	4413      	add	r3, r2
 8016a02:	881b      	ldrh	r3, [r3, #0]
 8016a04:	461a      	mov	r2, r3
 8016a06:	7b7b      	ldrb	r3, [r7, #13]
 8016a08:	fa42 f303 	asr.w	r3, r2, r3
 8016a0c:	f003 0301 	and.w	r3, r3, #1
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d02d      	beq.n	8016a70 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016a14:	7bfa      	ldrb	r2, [r7, #15]
 8016a16:	7b7b      	ldrb	r3, [r7, #13]
 8016a18:	4413      	add	r3, r2
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	4413      	add	r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	461a      	mov	r2, r3
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	4413      	add	r3, r2
 8016a2a:	7a1b      	ldrb	r3, [r3, #8]
 8016a2c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016a30:	b25b      	sxtb	r3, r3
 8016a32:	f003 030f 	and.w	r3, r3, #15
 8016a36:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016a38:	7bfa      	ldrb	r2, [r7, #15]
 8016a3a:	7b7b      	ldrb	r3, [r7, #13]
 8016a3c:	4413      	add	r3, r2
 8016a3e:	461a      	mov	r2, r3
 8016a40:	4613      	mov	r3, r2
 8016a42:	005b      	lsls	r3, r3, #1
 8016a44:	4413      	add	r3, r2
 8016a46:	009b      	lsls	r3, r3, #2
 8016a48:	461a      	mov	r2, r3
 8016a4a:	69fb      	ldr	r3, [r7, #28]
 8016a4c:	4413      	add	r3, r2
 8016a4e:	7a1b      	ldrb	r3, [r3, #8]
 8016a50:	f343 1303 	sbfx	r3, r3, #4, #4
 8016a54:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016a56:	f003 030f 	and.w	r3, r3, #15
 8016a5a:	b25a      	sxtb	r2, r3
 8016a5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f000 f81a 	bl	8016a9a <RegionCommonValueInRange>
 8016a66:	4603      	mov	r3, r0
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d101      	bne.n	8016a70 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	e010      	b.n	8016a92 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016a70:	7b7b      	ldrb	r3, [r7, #13]
 8016a72:	3301      	adds	r3, #1
 8016a74:	737b      	strb	r3, [r7, #13]
 8016a76:	7b7b      	ldrb	r3, [r7, #13]
 8016a78:	2b0f      	cmp	r3, #15
 8016a7a:	d9be      	bls.n	80169fa <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016a7c:	7bfb      	ldrb	r3, [r7, #15]
 8016a7e:	3310      	adds	r3, #16
 8016a80:	73fb      	strb	r3, [r7, #15]
 8016a82:	7bbb      	ldrb	r3, [r7, #14]
 8016a84:	3301      	adds	r3, #1
 8016a86:	73bb      	strb	r3, [r7, #14]
 8016a88:	7bfa      	ldrb	r2, [r7, #15]
 8016a8a:	79fb      	ldrb	r3, [r7, #7]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d3b1      	bcc.n	80169f4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016a90:	2300      	movs	r3, #0
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3710      	adds	r7, #16
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}

08016a9a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016a9a:	b480      	push	{r7}
 8016a9c:	b083      	sub	sp, #12
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	71fb      	strb	r3, [r7, #7]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	71bb      	strb	r3, [r7, #6]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016aac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016ab0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	db07      	blt.n	8016ac8 <RegionCommonValueInRange+0x2e>
 8016ab8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016abc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	dc01      	bgt.n	8016ac8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	e000      	b.n	8016aca <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bc80      	pop	{r7}
 8016ad2:	4770      	bx	lr

08016ad4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b085      	sub	sp, #20
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	460b      	mov	r3, r1
 8016ade:	70fb      	strb	r3, [r7, #3]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016ae4:	78fb      	ldrb	r3, [r7, #3]
 8016ae6:	091b      	lsrs	r3, r3, #4
 8016ae8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016aea:	78bb      	ldrb	r3, [r7, #2]
 8016aec:	091b      	lsrs	r3, r3, #4
 8016aee:	b2db      	uxtb	r3, r3
 8016af0:	7bfa      	ldrb	r2, [r7, #15]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d803      	bhi.n	8016afe <RegionCommonChanDisable+0x2a>
 8016af6:	78fa      	ldrb	r2, [r7, #3]
 8016af8:	78bb      	ldrb	r3, [r7, #2]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d301      	bcc.n	8016b02 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016afe:	2300      	movs	r3, #0
 8016b00:	e017      	b.n	8016b32 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016b02:	7bfb      	ldrb	r3, [r7, #15]
 8016b04:	005b      	lsls	r3, r3, #1
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	4413      	add	r3, r2
 8016b0a:	881b      	ldrh	r3, [r3, #0]
 8016b0c:	b21a      	sxth	r2, r3
 8016b0e:	78fb      	ldrb	r3, [r7, #3]
 8016b10:	f003 030f 	and.w	r3, r3, #15
 8016b14:	2101      	movs	r1, #1
 8016b16:	fa01 f303 	lsl.w	r3, r1, r3
 8016b1a:	b21b      	sxth	r3, r3
 8016b1c:	43db      	mvns	r3, r3
 8016b1e:	b21b      	sxth	r3, r3
 8016b20:	4013      	ands	r3, r2
 8016b22:	b219      	sxth	r1, r3
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
 8016b26:	005b      	lsls	r3, r3, #1
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	b28a      	uxth	r2, r1
 8016b2e:	801a      	strh	r2, [r3, #0]

    return true;
 8016b30:	2301      	movs	r3, #1
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3714      	adds	r7, #20
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bc80      	pop	{r7}
 8016b3a:	4770      	bx	lr

08016b3c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	460b      	mov	r3, r1
 8016b46:	70fb      	strb	r3, [r7, #3]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d101      	bne.n	8016b5a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016b56:	2300      	movs	r3, #0
 8016b58:	e018      	b.n	8016b8c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016b5a:	78fb      	ldrb	r3, [r7, #3]
 8016b5c:	73bb      	strb	r3, [r7, #14]
 8016b5e:	e010      	b.n	8016b82 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016b60:	7bbb      	ldrb	r3, [r7, #14]
 8016b62:	005b      	lsls	r3, r3, #1
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	4413      	add	r3, r2
 8016b68:	881b      	ldrh	r3, [r3, #0]
 8016b6a:	2110      	movs	r1, #16
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7ff fef9 	bl	8016964 <CountChannels>
 8016b72:	4603      	mov	r3, r0
 8016b74:	461a      	mov	r2, r3
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	4413      	add	r3, r2
 8016b7a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016b7c:	7bbb      	ldrb	r3, [r7, #14]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	73bb      	strb	r3, [r7, #14]
 8016b82:	7bba      	ldrb	r2, [r7, #14]
 8016b84:	78bb      	ldrb	r3, [r7, #2]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d3ea      	bcc.n	8016b60 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3710      	adds	r7, #16
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016b94:	b480      	push	{r7}
 8016b96:	b087      	sub	sp, #28
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	60f8      	str	r0, [r7, #12]
 8016b9c:	60b9      	str	r1, [r7, #8]
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d016      	beq.n	8016bd6 <RegionCommonChanMaskCopy+0x42>
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d013      	beq.n	8016bd6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016bae:	2300      	movs	r3, #0
 8016bb0:	75fb      	strb	r3, [r7, #23]
 8016bb2:	e00c      	b.n	8016bce <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016bb4:	7dfb      	ldrb	r3, [r7, #23]
 8016bb6:	005b      	lsls	r3, r3, #1
 8016bb8:	68ba      	ldr	r2, [r7, #8]
 8016bba:	441a      	add	r2, r3
 8016bbc:	7dfb      	ldrb	r3, [r7, #23]
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	68f9      	ldr	r1, [r7, #12]
 8016bc2:	440b      	add	r3, r1
 8016bc4:	8812      	ldrh	r2, [r2, #0]
 8016bc6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016bc8:	7dfb      	ldrb	r3, [r7, #23]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	75fb      	strb	r3, [r7, #23]
 8016bce:	7dfa      	ldrb	r2, [r7, #23]
 8016bd0:	79fb      	ldrb	r3, [r7, #7]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d3ee      	bcc.n	8016bb4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016bd6:	bf00      	nop
 8016bd8:	371c      	adds	r7, #28
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bc80      	pop	{r7}
 8016bde:	4770      	bx	lr

08016be0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016be0:	b082      	sub	sp, #8
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b086      	sub	sp, #24
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	60f8      	str	r0, [r7, #12]
 8016bea:	60b9      	str	r1, [r7, #8]
 8016bec:	627b      	str	r3, [r7, #36]	; 0x24
 8016bee:	4613      	mov	r3, r2
 8016bf0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016bf2:	79f9      	ldrb	r1, [r7, #7]
 8016bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016bf8:	cb0c      	ldmia	r3, {r2, r3}
 8016bfa:	68f8      	ldr	r0, [r7, #12]
 8016bfc:	f7ff fd8c 	bl	8016718 <GetDutyCycle>
 8016c00:	4603      	mov	r3, r0
 8016c02:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	68da      	ldr	r2, [r3, #12]
 8016c08:	8afb      	ldrh	r3, [r7, #22]
 8016c0a:	68b9      	ldr	r1, [r7, #8]
 8016c0c:	fb01 f303 	mul.w	r3, r1, r3
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d909      	bls.n	8016c28 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	68da      	ldr	r2, [r3, #12]
 8016c18:	8afb      	ldrh	r3, [r7, #22]
 8016c1a:	68b9      	ldr	r1, [r7, #8]
 8016c1c:	fb01 f303 	mul.w	r3, r1, r3
 8016c20:	1ad2      	subs	r2, r2, r3
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016c26:	e002      	b.n	8016c2e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	60da      	str	r2, [r3, #12]
}
 8016c2e:	bf00      	nop
 8016c30:	3718      	adds	r7, #24
 8016c32:	46bd      	mov	sp, r7
 8016c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016c38:	b002      	add	sp, #8
 8016c3a:	4770      	bx	lr

08016c3c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c3e:	b08f      	sub	sp, #60	; 0x3c
 8016c40:	af04      	add	r7, sp, #16
 8016c42:	6039      	str	r1, [r7, #0]
 8016c44:	4611      	mov	r1, r2
 8016c46:	461a      	mov	r2, r3
 8016c48:	4603      	mov	r3, r0
 8016c4a:	71fb      	strb	r3, [r7, #7]
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	71bb      	strb	r3, [r7, #6]
 8016c50:	4613      	mov	r3, r2
 8016c52:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016c54:	f04f 33ff 	mov.w	r3, #4294967295
 8016c58:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016c5a:	f006 f995 	bl	801cf88 <UTIL_TIMER_GetCurrentTime>
 8016c5e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016c60:	2300      	movs	r3, #0
 8016c62:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016c64:	2301      	movs	r3, #1
 8016c66:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016c6e:	2300      	movs	r3, #0
 8016c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016c74:	e0ba      	b.n	8016dec <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016c76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	005b      	lsls	r3, r3, #1
 8016c7e:	4413      	add	r3, r2
 8016c80:	00db      	lsls	r3, r3, #3
 8016c82:	461a      	mov	r2, r3
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	189c      	adds	r4, r3, r2
 8016c88:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016c8c:	797a      	ldrb	r2, [r7, #5]
 8016c8e:	79fd      	ldrb	r5, [r7, #7]
 8016c90:	69fb      	ldr	r3, [r7, #28]
 8016c92:	9302      	str	r3, [sp, #8]
 8016c94:	46ec      	mov	ip, sp
 8016c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016c9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c9e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ca2:	4633      	mov	r3, r6
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	f7ff fe22 	bl	80168f0 <UpdateTimeCredits>
 8016cac:	4603      	mov	r3, r0
 8016cae:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016cb0:	8afa      	ldrh	r2, [r7, #22]
 8016cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cb4:	fb02 f303 	mul.w	r3, r2, r3
 8016cb8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8016cba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4413      	add	r3, r2
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	461a      	mov	r2, r3
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	4413      	add	r3, r2
 8016ccc:	68db      	ldr	r3, [r3, #12]
 8016cce:	69ba      	ldr	r2, [r7, #24]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d908      	bls.n	8016ce6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016cd4:	797b      	ldrb	r3, [r7, #5]
 8016cd6:	f083 0301 	eor.w	r3, r3, #1
 8016cda:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d013      	beq.n	8016d08 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ce0:	79fb      	ldrb	r3, [r7, #7]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d010      	beq.n	8016d08 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016ce6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d00:	3301      	adds	r3, #1
 8016d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016d06:	e06c      	b.n	8016de2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016d08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	461a      	mov	r2, r3
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	4413      	add	r3, r2
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8016d1e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	4413      	add	r3, r2
 8016d30:	691b      	ldr	r3, [r3, #16]
 8016d32:	69ba      	ldr	r2, [r7, #24]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d815      	bhi.n	8016d64 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016d38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	005b      	lsls	r3, r3, #1
 8016d40:	4413      	add	r3, r2
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	461a      	mov	r2, r3
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	4413      	add	r3, r2
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	69ba      	ldr	r2, [r7, #24]
 8016d4e:	1ad3      	subs	r3, r2, r3
 8016d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d52:	4293      	cmp	r3, r2
 8016d54:	bf28      	it	cs
 8016d56:	4613      	movcs	r3, r2
 8016d58:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d5e:	3301      	adds	r3, #1
 8016d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016d64:	79fb      	ldrb	r3, [r7, #7]
 8016d66:	f083 0301 	eor.w	r3, r3, #1
 8016d6a:	b2db      	uxtb	r3, r3
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d038      	beq.n	8016de2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016d70:	2300      	movs	r3, #0
 8016d72:	60fb      	str	r3, [r7, #12]
 8016d74:	2300      	movs	r3, #0
 8016d76:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016d78:	8afb      	ldrh	r3, [r7, #22]
 8016d7a:	2b64      	cmp	r3, #100	; 0x64
 8016d7c:	d103      	bne.n	8016d86 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016d7e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8016d82:	60fb      	str	r3, [r7, #12]
 8016d84:	e009      	b.n	8016d9a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016d86:	8afb      	ldrh	r3, [r7, #22]
 8016d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016d8c:	d103      	bne.n	8016d96 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016d8e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8016d92:	60fb      	str	r3, [r7, #12]
 8016d94:	e001      	b.n	8016d9a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016d96:	4b1e      	ldr	r3, [pc, #120]	; (8016e10 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016d98:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d9c:	4a1c      	ldr	r2, [pc, #112]	; (8016e10 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d90e      	bls.n	8016dc0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016da2:	68fa      	ldr	r2, [r7, #12]
 8016da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016da6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8016daa:	3b30      	subs	r3, #48	; 0x30
 8016dac:	4919      	ldr	r1, [pc, #100]	; (8016e14 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016dae:	fba1 1303 	umull	r1, r3, r1, r3
 8016db2:	0c1b      	lsrs	r3, r3, #16
 8016db4:	3301      	adds	r3, #1
 8016db6:	4918      	ldr	r1, [pc, #96]	; (8016e18 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016db8:	fb01 f303 	mul.w	r3, r1, r3
 8016dbc:	4413      	add	r3, r2
 8016dbe:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016dc0:	f107 000c 	add.w	r0, r7, #12
 8016dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dca:	f107 020c 	add.w	r2, r7, #12
 8016dce:	ca06      	ldmia	r2, {r1, r2}
 8016dd0:	f005 f9f1 	bl	801c1b6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016dd4:	f107 030c 	add.w	r3, r7, #12
 8016dd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ddc:	f005 faaa 	bl	801c334 <SysTimeToMs>
 8016de0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016de2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016de6:	3301      	adds	r3, #1
 8016de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016dec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016df0:	79bb      	ldrb	r3, [r7, #6]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	f4ff af3f 	bcc.w	8016c76 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d102      	bne.n	8016e06 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016e00:	f04f 33ff 	mov.w	r3, #4294967295
 8016e04:	e000      	b.n	8016e08 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	372c      	adds	r7, #44	; 0x2c
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e10:	0001ec30 	.word	0x0001ec30
 8016e14:	c22e4507 	.word	0xc22e4507
 8016e18:	00015180 	.word	0x00015180

08016e1c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b085      	sub	sp, #20
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	2b03      	cmp	r3, #3
 8016e30:	d13f      	bne.n	8016eb2 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	3301      	adds	r3, #1
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	b25a      	sxtb	r2, r3
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e44:	f003 030f 	and.w	r3, r3, #15
 8016e48:	b25a      	sxtb	r2, r3
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	091b      	lsrs	r3, r3, #4
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	b25a      	sxtb	r2, r3
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	3302      	adds	r3, #2
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	b29a      	uxth	r2, r3
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	889b      	ldrh	r3, [r3, #4]
 8016e70:	b21a      	sxth	r2, r3
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	3303      	adds	r3, #3
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	021b      	lsls	r3, r3, #8
 8016e7a:	b21b      	sxth	r3, r3
 8016e7c:	4313      	orrs	r3, r2
 8016e7e:	b21b      	sxth	r3, r3
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	791a      	ldrb	r2, [r3, #4]
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	091b      	lsrs	r3, r3, #4
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	f003 0307 	and.w	r3, r3, #7
 8016e9a:	b2da      	uxtb	r2, r3
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	f003 030f 	and.w	r3, r3, #15
 8016ea8:	b2da      	uxtb	r2, r3
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016eae:	2305      	movs	r3, #5
 8016eb0:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3714      	adds	r7, #20
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bc80      	pop	{r7}
 8016ebc:	4770      	bx	lr

08016ebe <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016ebe:	b5b0      	push	{r4, r5, r7, lr}
 8016ec0:	b088      	sub	sp, #32
 8016ec2:	af02      	add	r7, sp, #8
 8016ec4:	60f8      	str	r0, [r7, #12]
 8016ec6:	60b9      	str	r1, [r7, #8]
 8016ec8:	607a      	str	r2, [r7, #4]
 8016eca:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	791b      	ldrb	r3, [r3, #4]
 8016ed0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	799b      	ldrb	r3, [r3, #6]
 8016ed6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	79db      	ldrb	r3, [r3, #7]
 8016edc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	7a1b      	ldrb	r3, [r3, #8]
 8016ee2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	795b      	ldrb	r3, [r3, #5]
 8016ee8:	f083 0301 	eor.w	r3, r3, #1
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d008      	beq.n	8016f04 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	7adb      	ldrb	r3, [r3, #11]
 8016ef6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	7a5b      	ldrb	r3, [r3, #9]
 8016efc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	7a9b      	ldrb	r3, [r3, #10]
 8016f02:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d04a      	beq.n	8016fa0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016f0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016f0e:	2b0f      	cmp	r3, #15
 8016f10:	d103      	bne.n	8016f1a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	7a5b      	ldrb	r3, [r3, #9]
 8016f16:	75bb      	strb	r3, [r7, #22]
 8016f18:	e01d      	b.n	8016f56 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	7b18      	ldrb	r0, [r3, #12]
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6919      	ldr	r1, [r3, #16]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016f2e:	68fa      	ldr	r2, [r7, #12]
 8016f30:	6992      	ldr	r2, [r2, #24]
 8016f32:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016f36:	9201      	str	r2, [sp, #4]
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	462b      	mov	r3, r5
 8016f3c:	4622      	mov	r2, r4
 8016f3e:	f7ff fd3a 	bl	80169b6 <RegionCommonChanVerifyDr>
 8016f42:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016f44:	f083 0301 	eor.w	r3, r3, #1
 8016f48:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d003      	beq.n	8016f56 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016f4e:	7dfb      	ldrb	r3, [r7, #23]
 8016f50:	f023 0302 	bic.w	r3, r3, #2
 8016f54:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016f56:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016f5a:	2b0f      	cmp	r3, #15
 8016f5c:	d103      	bne.n	8016f66 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	7a9b      	ldrb	r3, [r3, #10]
 8016f62:	757b      	strb	r3, [r7, #21]
 8016f64:	e01c      	b.n	8016fa0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016f72:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7ff fd8f 	bl	8016a9a <RegionCommonValueInRange>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d10e      	bne.n	8016fa0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016f88:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	da03      	bge.n	8016f98 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	7f5b      	ldrb	r3, [r3, #29]
 8016f94:	757b      	strb	r3, [r7, #21]
 8016f96:	e003      	b.n	8016fa0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	f023 0304 	bic.w	r3, r3, #4
 8016f9e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016fa0:	7dfb      	ldrb	r3, [r7, #23]
 8016fa2:	2b07      	cmp	r3, #7
 8016fa4:	d105      	bne.n	8016fb2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016fa6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d101      	bne.n	8016fb2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	7dba      	ldrb	r2, [r7, #22]
 8016fb6:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	7d7a      	ldrb	r2, [r7, #21]
 8016fbc:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016fbe:	7d3a      	ldrb	r2, [r7, #20]
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	701a      	strb	r2, [r3, #0]

    return status;
 8016fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	3718      	adds	r7, #24
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016fd0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b083      	sub	sp, #12
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	6039      	str	r1, [r7, #0]
 8016fda:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016fdc:	79fb      	ldrb	r3, [r7, #7]
 8016fde:	4a06      	ldr	r2, [pc, #24]	; (8016ff8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	370c      	adds	r7, #12
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bc80      	pop	{r7}
 8016ff4:	4770      	bx	lr
 8016ff6:	bf00      	nop
 8016ff8:	000f4240 	.word	0x000f4240

08016ffc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	4603      	mov	r3, r0
 8017004:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017006:	79fb      	ldrb	r3, [r7, #7]
 8017008:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801700c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017010:	4618      	mov	r0, r3
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	bc80      	pop	{r7}
 8017018:	4770      	bx	lr
	...

0801701c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801701c:	b480      	push	{r7}
 801701e:	b085      	sub	sp, #20
 8017020:	af00      	add	r7, sp, #0
 8017022:	60f8      	str	r0, [r7, #12]
 8017024:	607a      	str	r2, [r7, #4]
 8017026:	603b      	str	r3, [r7, #0]
 8017028:	460b      	mov	r3, r1
 801702a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801702c:	7afa      	ldrb	r2, [r7, #11]
 801702e:	7afb      	ldrb	r3, [r7, #11]
 8017030:	3b04      	subs	r3, #4
 8017032:	4619      	mov	r1, r3
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	fb03 f101 	mul.w	r1, r3, r1
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017040:	fb00 f303 	mul.w	r3, r0, r3
 8017044:	440b      	add	r3, r1
 8017046:	005b      	lsls	r3, r3, #1
 8017048:	2b00      	cmp	r3, #0
 801704a:	d013      	beq.n	8017074 <RegionCommonComputeRxWindowParameters+0x58>
 801704c:	7afb      	ldrb	r3, [r7, #11]
 801704e:	3b04      	subs	r3, #4
 8017050:	4619      	mov	r1, r3
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	fb03 f101 	mul.w	r1, r3, r1
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801705e:	fb00 f303 	mul.w	r3, r0, r3
 8017062:	440b      	add	r3, r1
 8017064:	0059      	lsls	r1, r3, #1
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	440b      	add	r3, r1
 801706a:	1e59      	subs	r1, r3, #1
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	fbb1 f3f3 	udiv	r3, r1, r3
 8017072:	e00f      	b.n	8017094 <RegionCommonComputeRxWindowParameters+0x78>
 8017074:	7afb      	ldrb	r3, [r7, #11]
 8017076:	3b04      	subs	r3, #4
 8017078:	4619      	mov	r1, r3
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	fb03 f101 	mul.w	r1, r3, r1
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017086:	fb00 f303 	mul.w	r3, r0, r3
 801708a:	440b      	add	r3, r1
 801708c:	0059      	lsls	r1, r3, #1
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	fbb1 f3f3 	udiv	r3, r1, r3
 8017094:	429a      	cmp	r2, r3
 8017096:	bf38      	it	cc
 8017098:	461a      	movcc	r2, r3
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	009b      	lsls	r3, r3, #2
 80170a2:	4619      	mov	r1, r3
 80170a4:	69bb      	ldr	r3, [r7, #24]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	68fa      	ldr	r2, [r7, #12]
 80170aa:	fb02 f303 	mul.w	r3, r2, r3
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d007      	beq.n	80170c2 <RegionCommonComputeRxWindowParameters+0xa6>
 80170b2:	69bb      	ldr	r3, [r7, #24]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	68fa      	ldr	r2, [r7, #12]
 80170b8:	fb02 f303 	mul.w	r3, r2, r3
 80170bc:	3301      	adds	r3, #1
 80170be:	085b      	lsrs	r3, r3, #1
 80170c0:	e005      	b.n	80170ce <RegionCommonComputeRxWindowParameters+0xb2>
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	68fa      	ldr	r2, [r7, #12]
 80170c8:	fb02 f303 	mul.w	r3, r2, r3
 80170cc:	085b      	lsrs	r3, r3, #1
 80170ce:	1acb      	subs	r3, r1, r3
 80170d0:	683a      	ldr	r2, [r7, #0]
 80170d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80170d6:	fb01 f202 	mul.w	r2, r1, r2
 80170da:	1a9b      	subs	r3, r3, r2
 80170dc:	2b00      	cmp	r3, #0
 80170de:	dd27      	ble.n	8017130 <RegionCommonComputeRxWindowParameters+0x114>
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	009b      	lsls	r3, r3, #2
 80170e4:	4619      	mov	r1, r3
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	68fa      	ldr	r2, [r7, #12]
 80170ec:	fb02 f303 	mul.w	r3, r2, r3
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d007      	beq.n	8017104 <RegionCommonComputeRxWindowParameters+0xe8>
 80170f4:	69bb      	ldr	r3, [r7, #24]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	68fa      	ldr	r2, [r7, #12]
 80170fa:	fb02 f303 	mul.w	r3, r2, r3
 80170fe:	3301      	adds	r3, #1
 8017100:	085b      	lsrs	r3, r3, #1
 8017102:	e005      	b.n	8017110 <RegionCommonComputeRxWindowParameters+0xf4>
 8017104:	69bb      	ldr	r3, [r7, #24]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	68fa      	ldr	r2, [r7, #12]
 801710a:	fb02 f303 	mul.w	r3, r2, r3
 801710e:	085b      	lsrs	r3, r3, #1
 8017110:	1acb      	subs	r3, r1, r3
 8017112:	683a      	ldr	r2, [r7, #0]
 8017114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017118:	fb01 f202 	mul.w	r2, r1, r2
 801711c:	1a9b      	subs	r3, r3, r2
 801711e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017122:	4a19      	ldr	r2, [pc, #100]	; (8017188 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017124:	fb82 1203 	smull	r1, r2, r2, r3
 8017128:	1192      	asrs	r2, r2, #6
 801712a:	17db      	asrs	r3, r3, #31
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	e024      	b.n	801717a <RegionCommonComputeRxWindowParameters+0x15e>
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	4619      	mov	r1, r3
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	68fa      	ldr	r2, [r7, #12]
 801713c:	fb02 f303 	mul.w	r3, r2, r3
 8017140:	2b00      	cmp	r3, #0
 8017142:	d007      	beq.n	8017154 <RegionCommonComputeRxWindowParameters+0x138>
 8017144:	69bb      	ldr	r3, [r7, #24]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	fb02 f303 	mul.w	r3, r2, r3
 801714e:	3301      	adds	r3, #1
 8017150:	085b      	lsrs	r3, r3, #1
 8017152:	e005      	b.n	8017160 <RegionCommonComputeRxWindowParameters+0x144>
 8017154:	69bb      	ldr	r3, [r7, #24]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	68fa      	ldr	r2, [r7, #12]
 801715a:	fb02 f303 	mul.w	r3, r2, r3
 801715e:	085b      	lsrs	r3, r3, #1
 8017160:	1acb      	subs	r3, r1, r3
 8017162:	683a      	ldr	r2, [r7, #0]
 8017164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017168:	fb01 f202 	mul.w	r2, r1, r2
 801716c:	1a9b      	subs	r3, r3, r2
 801716e:	4a06      	ldr	r2, [pc, #24]	; (8017188 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017170:	fb82 1203 	smull	r1, r2, r2, r3
 8017174:	1192      	asrs	r2, r2, #6
 8017176:	17db      	asrs	r3, r3, #31
 8017178:	1ad3      	subs	r3, r2, r3
 801717a:	69fa      	ldr	r2, [r7, #28]
 801717c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801717e:	bf00      	nop
 8017180:	3714      	adds	r7, #20
 8017182:	46bd      	mov	sp, r7
 8017184:	bc80      	pop	{r7}
 8017186:	4770      	bx	lr
 8017188:	10624dd3 	.word	0x10624dd3

0801718c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b086      	sub	sp, #24
 8017190:	af00      	add	r7, sp, #0
 8017192:	4603      	mov	r3, r0
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
 8017198:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801719a:	2300      	movs	r3, #0
 801719c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801719e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7e9 fd73 	bl	8000c90 <__aeabi_ui2f>
 80171aa:	4603      	mov	r3, r0
 80171ac:	4619      	mov	r1, r3
 80171ae:	68b8      	ldr	r0, [r7, #8]
 80171b0:	f7e9 fcbc 	bl	8000b2c <__aeabi_fsub>
 80171b4:	4603      	mov	r3, r0
 80171b6:	6879      	ldr	r1, [r7, #4]
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7e9 fcb7 	bl	8000b2c <__aeabi_fsub>
 80171be:	4603      	mov	r3, r0
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7e9 f945 	bl	8000450 <__aeabi_f2d>
 80171c6:	4602      	mov	r2, r0
 80171c8:	460b      	mov	r3, r1
 80171ca:	4610      	mov	r0, r2
 80171cc:	4619      	mov	r1, r3
 80171ce:	f006 fad7 	bl	801d780 <floor>
 80171d2:	4602      	mov	r2, r0
 80171d4:	460b      	mov	r3, r1
 80171d6:	4610      	mov	r0, r2
 80171d8:	4619      	mov	r1, r3
 80171da:	f7e9 fc2b 	bl	8000a34 <__aeabi_d2iz>
 80171de:	4603      	mov	r3, r0
 80171e0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80171e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3718      	adds	r7, #24
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80171ee:	b590      	push	{r4, r7, lr}
 80171f0:	b087      	sub	sp, #28
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	60f8      	str	r0, [r7, #12]
 80171f6:	60b9      	str	r1, [r7, #8]
 80171f8:	607a      	str	r2, [r7, #4]
 80171fa:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017200:	2300      	movs	r3, #0
 8017202:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017204:	2300      	movs	r3, #0
 8017206:	757b      	strb	r3, [r7, #21]
 8017208:	2300      	movs	r3, #0
 801720a:	753b      	strb	r3, [r7, #20]
 801720c:	e09c      	b.n	8017348 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801720e:	2300      	movs	r3, #0
 8017210:	74fb      	strb	r3, [r7, #19]
 8017212:	e08f      	b.n	8017334 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	685a      	ldr	r2, [r3, #4]
 8017218:	7d3b      	ldrb	r3, [r7, #20]
 801721a:	005b      	lsls	r3, r3, #1
 801721c:	4413      	add	r3, r2
 801721e:	881b      	ldrh	r3, [r3, #0]
 8017220:	461a      	mov	r2, r3
 8017222:	7cfb      	ldrb	r3, [r7, #19]
 8017224:	fa42 f303 	asr.w	r3, r2, r3
 8017228:	f003 0301 	and.w	r3, r3, #1
 801722c:	2b00      	cmp	r3, #0
 801722e:	d07e      	beq.n	801732e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	689a      	ldr	r2, [r3, #8]
 8017234:	7d79      	ldrb	r1, [r7, #21]
 8017236:	7cfb      	ldrb	r3, [r7, #19]
 8017238:	440b      	add	r3, r1
 801723a:	4619      	mov	r1, r3
 801723c:	460b      	mov	r3, r1
 801723e:	005b      	lsls	r3, r3, #1
 8017240:	440b      	add	r3, r1
 8017242:	009b      	lsls	r3, r3, #2
 8017244:	4413      	add	r3, r2
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d06b      	beq.n	8017324 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	f083 0301 	eor.w	r3, r3, #1
 8017254:	b2db      	uxtb	r3, r3
 8017256:	2b00      	cmp	r3, #0
 8017258:	d011      	beq.n	801727e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801725e:	2b00      	cmp	r3, #0
 8017260:	d00d      	beq.n	801727e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	695a      	ldr	r2, [r3, #20]
 8017266:	7d3b      	ldrb	r3, [r7, #20]
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4413      	add	r3, r2
 801726c:	881b      	ldrh	r3, [r3, #0]
 801726e:	461a      	mov	r2, r3
 8017270:	7cfb      	ldrb	r3, [r7, #19]
 8017272:	fa42 f303 	asr.w	r3, r2, r3
 8017276:	f003 0301 	and.w	r3, r3, #1
 801727a:	2b00      	cmp	r3, #0
 801727c:	d054      	beq.n	8017328 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	785b      	ldrb	r3, [r3, #1]
 8017282:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	689a      	ldr	r2, [r3, #8]
 8017288:	7d79      	ldrb	r1, [r7, #21]
 801728a:	7cfb      	ldrb	r3, [r7, #19]
 801728c:	440b      	add	r3, r1
 801728e:	4619      	mov	r1, r3
 8017290:	460b      	mov	r3, r1
 8017292:	005b      	lsls	r3, r3, #1
 8017294:	440b      	add	r3, r1
 8017296:	009b      	lsls	r3, r3, #2
 8017298:	4413      	add	r3, r2
 801729a:	7a1b      	ldrb	r3, [r3, #8]
 801729c:	f343 0303 	sbfx	r3, r3, #0, #4
 80172a0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80172a2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	689a      	ldr	r2, [r3, #8]
 80172a8:	7d79      	ldrb	r1, [r7, #21]
 80172aa:	7cfb      	ldrb	r3, [r7, #19]
 80172ac:	440b      	add	r3, r1
 80172ae:	4619      	mov	r1, r3
 80172b0:	460b      	mov	r3, r1
 80172b2:	005b      	lsls	r3, r3, #1
 80172b4:	440b      	add	r3, r1
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	4413      	add	r3, r2
 80172ba:	7a1b      	ldrb	r3, [r3, #8]
 80172bc:	f343 1303 	sbfx	r3, r3, #4, #4
 80172c0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80172c2:	461a      	mov	r2, r3
 80172c4:	4621      	mov	r1, r4
 80172c6:	f7ff fbe8 	bl	8016a9a <RegionCommonValueInRange>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d02d      	beq.n	801732c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	68da      	ldr	r2, [r3, #12]
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	6899      	ldr	r1, [r3, #8]
 80172d8:	7d78      	ldrb	r0, [r7, #21]
 80172da:	7cfb      	ldrb	r3, [r7, #19]
 80172dc:	4403      	add	r3, r0
 80172de:	4618      	mov	r0, r3
 80172e0:	4603      	mov	r3, r0
 80172e2:	005b      	lsls	r3, r3, #1
 80172e4:	4403      	add	r3, r0
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	440b      	add	r3, r1
 80172ea:	7a5b      	ldrb	r3, [r3, #9]
 80172ec:	4619      	mov	r1, r3
 80172ee:	460b      	mov	r3, r1
 80172f0:	005b      	lsls	r3, r3, #1
 80172f2:	440b      	add	r3, r1
 80172f4:	00db      	lsls	r3, r3, #3
 80172f6:	4413      	add	r3, r2
 80172f8:	7d1b      	ldrb	r3, [r3, #20]
 80172fa:	f083 0301 	eor.w	r3, r3, #1
 80172fe:	b2db      	uxtb	r3, r3
 8017300:	2b00      	cmp	r3, #0
 8017302:	d003      	beq.n	801730c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017304:	7dbb      	ldrb	r3, [r7, #22]
 8017306:	3301      	adds	r3, #1
 8017308:	75bb      	strb	r3, [r7, #22]
                    continue;
 801730a:	e010      	b.n	801732e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801730c:	7dfb      	ldrb	r3, [r7, #23]
 801730e:	1c5a      	adds	r2, r3, #1
 8017310:	75fa      	strb	r2, [r7, #23]
 8017312:	461a      	mov	r2, r3
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	4413      	add	r3, r2
 8017318:	7d79      	ldrb	r1, [r7, #21]
 801731a:	7cfa      	ldrb	r2, [r7, #19]
 801731c:	440a      	add	r2, r1
 801731e:	b2d2      	uxtb	r2, r2
 8017320:	701a      	strb	r2, [r3, #0]
 8017322:	e004      	b.n	801732e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017324:	bf00      	nop
 8017326:	e002      	b.n	801732e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017328:	bf00      	nop
 801732a:	e000      	b.n	801732e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801732c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801732e:	7cfb      	ldrb	r3, [r7, #19]
 8017330:	3301      	adds	r3, #1
 8017332:	74fb      	strb	r3, [r7, #19]
 8017334:	7cfb      	ldrb	r3, [r7, #19]
 8017336:	2b0f      	cmp	r3, #15
 8017338:	f67f af6c 	bls.w	8017214 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801733c:	7d7b      	ldrb	r3, [r7, #21]
 801733e:	3310      	adds	r3, #16
 8017340:	757b      	strb	r3, [r7, #21]
 8017342:	7d3b      	ldrb	r3, [r7, #20]
 8017344:	3301      	adds	r3, #1
 8017346:	753b      	strb	r3, [r7, #20]
 8017348:	7d7b      	ldrb	r3, [r7, #21]
 801734a:	b29a      	uxth	r2, r3
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	8a1b      	ldrh	r3, [r3, #16]
 8017350:	429a      	cmp	r2, r3
 8017352:	f4ff af5c 	bcc.w	801720e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	7dfa      	ldrb	r2, [r7, #23]
 801735a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	7dba      	ldrb	r2, [r7, #22]
 8017360:	701a      	strb	r2, [r3, #0]
}
 8017362:	bf00      	nop
 8017364:	371c      	adds	r7, #28
 8017366:	46bd      	mov	sp, r7
 8017368:	bd90      	pop	{r4, r7, pc}

0801736a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801736a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801736c:	b08b      	sub	sp, #44	; 0x2c
 801736e:	af04      	add	r7, sp, #16
 8017370:	60f8      	str	r0, [r7, #12]
 8017372:	60b9      	str	r1, [r7, #8]
 8017374:	607a      	str	r2, [r7, #4]
 8017376:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	685b      	ldr	r3, [r3, #4]
 801737c:	4618      	mov	r0, r3
 801737e:	f005 fe15 	bl	801cfac <UTIL_TIMER_GetElapsedTime>
 8017382:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	1ad2      	subs	r2, r2, r3
 801738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801738e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017392:	2201      	movs	r2, #1
 8017394:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	2200      	movs	r2, #0
 801739a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d004      	beq.n	80173ae <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80173a8:	697a      	ldr	r2, [r7, #20]
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d32b      	bcc.n	8017406 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	2200      	movs	r2, #0
 80173b2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	69db      	ldr	r3, [r3, #28]
 80173b8:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80173be:	68dd      	ldr	r5, [r3, #12]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	7a5e      	ldrb	r6, [r3, #9]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	f893 c008 	ldrb.w	ip, [r3, #8]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	7d1b      	ldrb	r3, [r3, #20]
 80173ce:	68fa      	ldr	r2, [r7, #12]
 80173d0:	6992      	ldr	r2, [r2, #24]
 80173d2:	9203      	str	r2, [sp, #12]
 80173d4:	68fa      	ldr	r2, [r7, #12]
 80173d6:	f10d 0e04 	add.w	lr, sp, #4
 80173da:	320c      	adds	r2, #12
 80173dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80173e0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	4663      	mov	r3, ip
 80173e8:	4632      	mov	r2, r6
 80173ea:	4629      	mov	r1, r5
 80173ec:	4620      	mov	r0, r4
 80173ee:	f7ff fc25 	bl	8016c3c <RegionCommonUpdateBandTimeOff>
 80173f2:	4602      	mov	r2, r0
 80173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	69d8      	ldr	r0, [r3, #28]
 80173fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fe:	683a      	ldr	r2, [r7, #0]
 8017400:	6879      	ldr	r1, [r7, #4]
 8017402:	f7ff fef4 	bl	80171ee <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d004      	beq.n	8017418 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017410:	2200      	movs	r2, #0
 8017412:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017414:	2300      	movs	r3, #0
 8017416:	e006      	b.n	8017426 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d001      	beq.n	8017424 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017420:	230b      	movs	r3, #11
 8017422:	e000      	b.n	8017426 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017424:	230c      	movs	r3, #12
    }
}
 8017426:	4618      	mov	r0, r3
 8017428:	371c      	adds	r7, #28
 801742a:	46bd      	mov	sp, r7
 801742c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801742e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801742e:	b5b0      	push	{r4, r5, r7, lr}
 8017430:	b086      	sub	sp, #24
 8017432:	af02      	add	r7, sp, #8
 8017434:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f993 2000 	ldrsb.w	r2, [r3]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017448:	429a      	cmp	r2, r3
 801744a:	d103      	bne.n	8017454 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017452:	e026      	b.n	80174a2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017454:	7bfb      	ldrb	r3, [r7, #15]
 8017456:	3b01      	subs	r3, #1
 8017458:	b2db      	uxtb	r3, r3
 801745a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017462:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017466:	429a      	cmp	r2, r3
 8017468:	d019      	beq.n	801749e <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	78d8      	ldrb	r0, [r3, #3]
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6859      	ldr	r1, [r3, #4]
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801747e:	687a      	ldr	r2, [r7, #4]
 8017480:	6892      	ldr	r2, [r2, #8]
 8017482:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017486:	9201      	str	r2, [sp, #4]
 8017488:	9300      	str	r3, [sp, #0]
 801748a:	462b      	mov	r3, r5
 801748c:	4622      	mov	r2, r4
 801748e:	f7ff fa92 	bl	80169b6 <RegionCommonChanVerifyDr>
 8017492:	4603      	mov	r3, r0
 8017494:	f083 0301 	eor.w	r3, r3, #1
 8017498:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801749a:	2b00      	cmp	r3, #0
 801749c:	d1da      	bne.n	8017454 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801749e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3710      	adds	r7, #16
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bdb0      	pop	{r4, r5, r7, pc}

080174aa <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80174aa:	b480      	push	{r7}
 80174ac:	b083      	sub	sp, #12
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	4603      	mov	r3, r0
 80174b2:	460a      	mov	r2, r1
 80174b4:	71fb      	strb	r3, [r7, #7]
 80174b6:	4613      	mov	r3, r2
 80174b8:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80174ba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80174be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174c2:	4293      	cmp	r3, r2
 80174c4:	bfb8      	it	lt
 80174c6:	4613      	movlt	r3, r2
 80174c8:	b25b      	sxtb	r3, r3
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	370c      	adds	r7, #12
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bc80      	pop	{r7}
 80174d2:	4770      	bx	lr

080174d4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80174d4:	b480      	push	{r7}
 80174d6:	b083      	sub	sp, #12
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	009b      	lsls	r3, r3, #2
 80174e2:	683a      	ldr	r2, [r7, #0]
 80174e4:	4413      	add	r3, r2
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	4a07      	ldr	r2, [pc, #28]	; (8017508 <RegionCommonGetBandwidth+0x34>)
 80174ea:	4293      	cmp	r3, r2
 80174ec:	d004      	beq.n	80174f8 <RegionCommonGetBandwidth+0x24>
 80174ee:	4a07      	ldr	r2, [pc, #28]	; (801750c <RegionCommonGetBandwidth+0x38>)
 80174f0:	4293      	cmp	r3, r2
 80174f2:	d003      	beq.n	80174fc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80174f4:	2300      	movs	r3, #0
 80174f6:	e002      	b.n	80174fe <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80174f8:	2301      	movs	r3, #1
 80174fa:	e000      	b.n	80174fe <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80174fc:	2302      	movs	r3, #2
    }
}
 80174fe:	4618      	mov	r0, r3
 8017500:	370c      	adds	r7, #12
 8017502:	46bd      	mov	sp, r7
 8017504:	bc80      	pop	{r7}
 8017506:	4770      	bx	lr
 8017508:	0003d090 	.word	0x0003d090
 801750c:	0007a120 	.word	0x0007a120

08017510 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b086      	sub	sp, #24
 8017514:	af04      	add	r7, sp, #16
 8017516:	4603      	mov	r3, r0
 8017518:	6039      	str	r1, [r7, #0]
 801751a:	71fb      	strb	r3, [r7, #7]
 801751c:	4613      	mov	r3, r2
 801751e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017520:	79fb      	ldrb	r3, [r7, #7]
 8017522:	2b05      	cmp	r3, #5
 8017524:	d810      	bhi.n	8017548 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017526:	79fb      	ldrb	r3, [r7, #7]
 8017528:	4a0f      	ldr	r2, [pc, #60]	; (8017568 <RegionCommonRxConfigPrint+0x58>)
 801752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801752e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017532:	9202      	str	r2, [sp, #8]
 8017534:	683a      	ldr	r2, [r7, #0]
 8017536:	9201      	str	r2, [sp, #4]
 8017538:	9300      	str	r3, [sp, #0]
 801753a:	4b0c      	ldr	r3, [pc, #48]	; (801756c <RegionCommonRxConfigPrint+0x5c>)
 801753c:	2201      	movs	r2, #1
 801753e:	2100      	movs	r1, #0
 8017540:	2002      	movs	r0, #2
 8017542:	f005 fe11 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017546:	e00a      	b.n	801755e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017548:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801754c:	9301      	str	r3, [sp, #4]
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	9300      	str	r3, [sp, #0]
 8017552:	4b07      	ldr	r3, [pc, #28]	; (8017570 <RegionCommonRxConfigPrint+0x60>)
 8017554:	2201      	movs	r2, #1
 8017556:	2100      	movs	r1, #0
 8017558:	2002      	movs	r0, #2
 801755a:	f005 fe05 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 801755e:	bf00      	nop
 8017560:	3708      	adds	r7, #8
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	20000130 	.word	0x20000130
 801756c:	0801dfa4 	.word	0x0801dfa4
 8017570:	0801dfc4 	.word	0x0801dfc4

08017574 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af02      	add	r7, sp, #8
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	460b      	mov	r3, r1
 801757e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017584:	9301      	str	r3, [sp, #4]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	9300      	str	r3, [sp, #0]
 801758a:	4b05      	ldr	r3, [pc, #20]	; (80175a0 <RegionCommonTxConfigPrint+0x2c>)
 801758c:	2201      	movs	r2, #1
 801758e:	2100      	movs	r1, #0
 8017590:	2002      	movs	r0, #2
 8017592:	f005 fde9 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
}
 8017596:	bf00      	nop
 8017598:	3708      	adds	r7, #8
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}
 801759e:	bf00      	nop
 80175a0:	0801dfe0 	.word	0x0801dfe0

080175a4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80175ae:	4b2d      	ldr	r3, [pc, #180]	; (8017664 <VerifyRfFreq+0xc0>)
 80175b0:	6a1b      	ldr	r3, [r3, #32]
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	4798      	blx	r3
 80175b6:	4603      	mov	r3, r0
 80175b8:	f083 0301 	eor.w	r3, r3, #1
 80175bc:	b2db      	uxtb	r3, r3
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d001      	beq.n	80175c6 <VerifyRfFreq+0x22>
    {
        return false;
 80175c2:	2300      	movs	r3, #0
 80175c4:	e04a      	b.n	801765c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	4a27      	ldr	r2, [pc, #156]	; (8017668 <VerifyRfFreq+0xc4>)
 80175ca:	4293      	cmp	r3, r2
 80175cc:	d307      	bcc.n	80175de <VerifyRfFreq+0x3a>
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	4a26      	ldr	r2, [pc, #152]	; (801766c <VerifyRfFreq+0xc8>)
 80175d2:	4293      	cmp	r3, r2
 80175d4:	d803      	bhi.n	80175de <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	2202      	movs	r2, #2
 80175da:	701a      	strb	r2, [r3, #0]
 80175dc:	e03d      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	4a22      	ldr	r2, [pc, #136]	; (801766c <VerifyRfFreq+0xc8>)
 80175e2:	4293      	cmp	r3, r2
 80175e4:	d907      	bls.n	80175f6 <VerifyRfFreq+0x52>
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	4a21      	ldr	r2, [pc, #132]	; (8017670 <VerifyRfFreq+0xcc>)
 80175ea:	4293      	cmp	r3, r2
 80175ec:	d803      	bhi.n	80175f6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	2200      	movs	r2, #0
 80175f2:	701a      	strb	r2, [r3, #0]
 80175f4:	e031      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	4a1d      	ldr	r2, [pc, #116]	; (8017670 <VerifyRfFreq+0xcc>)
 80175fa:	4293      	cmp	r3, r2
 80175fc:	d907      	bls.n	801760e <VerifyRfFreq+0x6a>
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	4a1c      	ldr	r2, [pc, #112]	; (8017674 <VerifyRfFreq+0xd0>)
 8017602:	4293      	cmp	r3, r2
 8017604:	d803      	bhi.n	801760e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	2201      	movs	r2, #1
 801760a:	701a      	strb	r2, [r3, #0]
 801760c:	e025      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	4a19      	ldr	r2, [pc, #100]	; (8017678 <VerifyRfFreq+0xd4>)
 8017612:	4293      	cmp	r3, r2
 8017614:	d907      	bls.n	8017626 <VerifyRfFreq+0x82>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	4a18      	ldr	r2, [pc, #96]	; (801767c <VerifyRfFreq+0xd8>)
 801761a:	4293      	cmp	r3, r2
 801761c:	d803      	bhi.n	8017626 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	2205      	movs	r2, #5
 8017622:	701a      	strb	r2, [r3, #0]
 8017624:	e019      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	4a15      	ldr	r2, [pc, #84]	; (8017680 <VerifyRfFreq+0xdc>)
 801762a:	4293      	cmp	r3, r2
 801762c:	d907      	bls.n	801763e <VerifyRfFreq+0x9a>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	4a14      	ldr	r2, [pc, #80]	; (8017684 <VerifyRfFreq+0xe0>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d803      	bhi.n	801763e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	2203      	movs	r2, #3
 801763a:	701a      	strb	r2, [r3, #0]
 801763c:	e00d      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	4a11      	ldr	r2, [pc, #68]	; (8017688 <VerifyRfFreq+0xe4>)
 8017642:	4293      	cmp	r3, r2
 8017644:	d307      	bcc.n	8017656 <VerifyRfFreq+0xb2>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4a10      	ldr	r2, [pc, #64]	; (801768c <VerifyRfFreq+0xe8>)
 801764a:	4293      	cmp	r3, r2
 801764c:	d803      	bhi.n	8017656 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	2204      	movs	r2, #4
 8017652:	701a      	strb	r2, [r3, #0]
 8017654:	e001      	b.n	801765a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8017656:	2300      	movs	r3, #0
 8017658:	e000      	b.n	801765c <VerifyRfFreq+0xb8>
    }
    return true;
 801765a:	2301      	movs	r3, #1
}
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}
 8017664:	0801e604 	.word	0x0801e604
 8017668:	337055c0 	.word	0x337055c0
 801766c:	338eda3f 	.word	0x338eda3f
 8017670:	33bca100 	.word	0x33bca100
 8017674:	33c5c8c0 	.word	0x33c5c8c0
 8017678:	33c74f5f 	.word	0x33c74f5f
 801767c:	33cef080 	.word	0x33cef080
 8017680:	33d1fdbf 	.word	0x33d1fdbf
 8017684:	33d5ce50 	.word	0x33d5ce50
 8017688:	33d691a0 	.word	0x33d691a0
 801768c:	33db2580 	.word	0x33db2580

08017690 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017690:	b590      	push	{r4, r7, lr}
 8017692:	b08b      	sub	sp, #44	; 0x2c
 8017694:	af04      	add	r7, sp, #16
 8017696:	4603      	mov	r3, r0
 8017698:	460a      	mov	r2, r1
 801769a:	71fb      	strb	r3, [r7, #7]
 801769c:	4613      	mov	r3, r2
 801769e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80176a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176a4:	4a1f      	ldr	r2, [pc, #124]	; (8017724 <GetTimeOnAir+0x94>)
 80176a6:	5cd3      	ldrb	r3, [r2, r3]
 80176a8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80176aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176ae:	491e      	ldr	r1, [pc, #120]	; (8017728 <GetTimeOnAir+0x98>)
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7ff ff0f 	bl	80174d4 <RegionCommonGetBandwidth>
 80176b6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80176b8:	2300      	movs	r3, #0
 80176ba:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80176bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176c0:	2b07      	cmp	r3, #7
 80176c2:	d118      	bne.n	80176f6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80176c4:	4b19      	ldr	r3, [pc, #100]	; (801772c <GetTimeOnAir+0x9c>)
 80176c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80176c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80176d0:	fb02 f303 	mul.w	r3, r2, r3
 80176d4:	4619      	mov	r1, r3
 80176d6:	88bb      	ldrh	r3, [r7, #4]
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	2201      	movs	r2, #1
 80176dc:	9203      	str	r2, [sp, #12]
 80176de:	9302      	str	r3, [sp, #8]
 80176e0:	2300      	movs	r3, #0
 80176e2:	9301      	str	r3, [sp, #4]
 80176e4:	2305      	movs	r3, #5
 80176e6:	9300      	str	r3, [sp, #0]
 80176e8:	2300      	movs	r3, #0
 80176ea:	460a      	mov	r2, r1
 80176ec:	68f9      	ldr	r1, [r7, #12]
 80176ee:	2000      	movs	r0, #0
 80176f0:	47a0      	blx	r4
 80176f2:	6178      	str	r0, [r7, #20]
 80176f4:	e011      	b.n	801771a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80176f6:	4b0d      	ldr	r3, [pc, #52]	; (801772c <GetTimeOnAir+0x9c>)
 80176f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80176fa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80176fe:	88bb      	ldrh	r3, [r7, #4]
 8017700:	b2db      	uxtb	r3, r3
 8017702:	2101      	movs	r1, #1
 8017704:	9103      	str	r1, [sp, #12]
 8017706:	9302      	str	r3, [sp, #8]
 8017708:	2300      	movs	r3, #0
 801770a:	9301      	str	r3, [sp, #4]
 801770c:	2308      	movs	r3, #8
 801770e:	9300      	str	r3, [sp, #0]
 8017710:	2301      	movs	r3, #1
 8017712:	68f9      	ldr	r1, [r7, #12]
 8017714:	2001      	movs	r0, #1
 8017716:	47a0      	blx	r4
 8017718:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801771a:	697b      	ldr	r3, [r7, #20]
}
 801771c:	4618      	mov	r0, r3
 801771e:	371c      	adds	r7, #28
 8017720:	46bd      	mov	sp, r7
 8017722:	bd90      	pop	{r4, r7, pc}
 8017724:	0801e5cc 	.word	0x0801e5cc
 8017728:	0801e5d4 	.word	0x0801e5d4
 801772c:	0801e604 	.word	0x0801e604

08017730 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b088      	sub	sp, #32
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017738:	2300      	movs	r3, #0
 801773a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	3b01      	subs	r3, #1
 8017742:	2b38      	cmp	r3, #56	; 0x38
 8017744:	f200 8128 	bhi.w	8017998 <RegionEU868GetPhyParam+0x268>
 8017748:	a201      	add	r2, pc, #4	; (adr r2, 8017750 <RegionEU868GetPhyParam+0x20>)
 801774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801774e:	bf00      	nop
 8017750:	08017835 	.word	0x08017835
 8017754:	0801783b 	.word	0x0801783b
 8017758:	08017999 	.word	0x08017999
 801775c:	08017999 	.word	0x08017999
 8017760:	08017999 	.word	0x08017999
 8017764:	08017841 	.word	0x08017841
 8017768:	08017999 	.word	0x08017999
 801776c:	0801787b 	.word	0x0801787b
 8017770:	08017999 	.word	0x08017999
 8017774:	08017881 	.word	0x08017881
 8017778:	08017887 	.word	0x08017887
 801777c:	0801788d 	.word	0x0801788d
 8017780:	08017893 	.word	0x08017893
 8017784:	080178a3 	.word	0x080178a3
 8017788:	080178b3 	.word	0x080178b3
 801778c:	080178b9 	.word	0x080178b9
 8017790:	080178c1 	.word	0x080178c1
 8017794:	080178c9 	.word	0x080178c9
 8017798:	080178d1 	.word	0x080178d1
 801779c:	080178d9 	.word	0x080178d9
 80177a0:	080178e1 	.word	0x080178e1
 80177a4:	080178e9 	.word	0x080178e9
 80177a8:	080178fd 	.word	0x080178fd
 80177ac:	08017903 	.word	0x08017903
 80177b0:	08017909 	.word	0x08017909
 80177b4:	0801790f 	.word	0x0801790f
 80177b8:	0801791b 	.word	0x0801791b
 80177bc:	08017927 	.word	0x08017927
 80177c0:	0801792d 	.word	0x0801792d
 80177c4:	08017935 	.word	0x08017935
 80177c8:	0801793b 	.word	0x0801793b
 80177cc:	08017941 	.word	0x08017941
 80177d0:	08017949 	.word	0x08017949
 80177d4:	08017847 	.word	0x08017847
 80177d8:	08017999 	.word	0x08017999
 80177dc:	08017999 	.word	0x08017999
 80177e0:	08017999 	.word	0x08017999
 80177e4:	08017999 	.word	0x08017999
 80177e8:	08017999 	.word	0x08017999
 80177ec:	08017999 	.word	0x08017999
 80177f0:	08017999 	.word	0x08017999
 80177f4:	08017999 	.word	0x08017999
 80177f8:	08017999 	.word	0x08017999
 80177fc:	08017999 	.word	0x08017999
 8017800:	08017999 	.word	0x08017999
 8017804:	08017999 	.word	0x08017999
 8017808:	08017999 	.word	0x08017999
 801780c:	0801794f 	.word	0x0801794f
 8017810:	08017955 	.word	0x08017955
 8017814:	08017963 	.word	0x08017963
 8017818:	08017999 	.word	0x08017999
 801781c:	08017999 	.word	0x08017999
 8017820:	08017969 	.word	0x08017969
 8017824:	0801796f 	.word	0x0801796f
 8017828:	08017999 	.word	0x08017999
 801782c:	08017975 	.word	0x08017975
 8017830:	08017985 	.word	0x08017985
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017834:	2300      	movs	r3, #0
 8017836:	61bb      	str	r3, [r7, #24]
            break;
 8017838:	e0af      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801783a:	2300      	movs	r3, #0
 801783c:	61bb      	str	r3, [r7, #24]
            break;
 801783e:	e0ac      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017840:	2300      	movs	r3, #0
 8017842:	61bb      	str	r3, [r7, #24]
            break;
 8017844:	e0a9      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801784c:	733b      	strb	r3, [r7, #12]
 801784e:	2307      	movs	r3, #7
 8017850:	737b      	strb	r3, [r7, #13]
 8017852:	2300      	movs	r3, #0
 8017854:	73bb      	strb	r3, [r7, #14]
 8017856:	2310      	movs	r3, #16
 8017858:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801785a:	4b53      	ldr	r3, [pc, #332]	; (80179a8 <RegionEU868GetPhyParam+0x278>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017862:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017864:	4b50      	ldr	r3, [pc, #320]	; (80179a8 <RegionEU868GetPhyParam+0x278>)
 8017866:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017868:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801786a:	f107 030c 	add.w	r3, r7, #12
 801786e:	4618      	mov	r0, r3
 8017870:	f7ff fddd 	bl	801742e <RegionCommonGetNextLowerTxDr>
 8017874:	4603      	mov	r3, r0
 8017876:	61bb      	str	r3, [r7, #24]
            break;
 8017878:	e08f      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801787a:	2300      	movs	r3, #0
 801787c:	61bb      	str	r3, [r7, #24]
            break;
 801787e:	e08c      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017880:	2300      	movs	r3, #0
 8017882:	61bb      	str	r3, [r7, #24]
            break;
 8017884:	e089      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017886:	2340      	movs	r3, #64	; 0x40
 8017888:	61bb      	str	r3, [r7, #24]
            break;
 801788a:	e086      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801788c:	2320      	movs	r3, #32
 801788e:	61bb      	str	r3, [r7, #24]
            break;
 8017890:	e083      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017898:	461a      	mov	r2, r3
 801789a:	4b44      	ldr	r3, [pc, #272]	; (80179ac <RegionEU868GetPhyParam+0x27c>)
 801789c:	5c9b      	ldrb	r3, [r3, r2]
 801789e:	61bb      	str	r3, [r7, #24]
            break;
 80178a0:	e07b      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80178a8:	461a      	mov	r2, r3
 80178aa:	4b41      	ldr	r3, [pc, #260]	; (80179b0 <RegionEU868GetPhyParam+0x280>)
 80178ac:	5c9b      	ldrb	r3, [r3, r2]
 80178ae:	61bb      	str	r3, [r7, #24]
            break;
 80178b0:	e073      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80178b2:	2301      	movs	r3, #1
 80178b4:	61bb      	str	r3, [r7, #24]
            break;
 80178b6:	e070      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80178b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80178bc:	61bb      	str	r3, [r7, #24]
            break;
 80178be:	e06c      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80178c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80178c4:	61bb      	str	r3, [r7, #24]
            break;
 80178c6:	e068      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80178c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80178cc:	61bb      	str	r3, [r7, #24]
            break;
 80178ce:	e064      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80178d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80178d4:	61bb      	str	r3, [r7, #24]
            break;
 80178d6:	e060      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80178d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80178dc:	61bb      	str	r3, [r7, #24]
            break;
 80178de:	e05c      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80178e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80178e4:	61bb      	str	r3, [r7, #24]
            break;
 80178e6:	e058      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80178e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80178ec:	4831      	ldr	r0, [pc, #196]	; (80179b4 <RegionEU868GetPhyParam+0x284>)
 80178ee:	f001 f87f 	bl	80189f0 <randr>
 80178f2:	4603      	mov	r3, r0
 80178f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80178f8:	61bb      	str	r3, [r7, #24]
            break;
 80178fa:	e04e      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80178fc:	2300      	movs	r3, #0
 80178fe:	61bb      	str	r3, [r7, #24]
            break;
 8017900:	e04b      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017902:	4b2d      	ldr	r3, [pc, #180]	; (80179b8 <RegionEU868GetPhyParam+0x288>)
 8017904:	61bb      	str	r3, [r7, #24]
            break;
 8017906:	e048      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017908:	2300      	movs	r3, #0
 801790a:	61bb      	str	r3, [r7, #24]
            break;
 801790c:	e045      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801790e:	4b26      	ldr	r3, [pc, #152]	; (80179a8 <RegionEU868GetPhyParam+0x278>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017916:	61bb      	str	r3, [r7, #24]
            break;
 8017918:	e03f      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801791a:	4b23      	ldr	r3, [pc, #140]	; (80179a8 <RegionEU868GetPhyParam+0x278>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017922:	61bb      	str	r3, [r7, #24]
            break;
 8017924:	e039      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017926:	2310      	movs	r3, #16
 8017928:	61bb      	str	r3, [r7, #24]
            break;
 801792a:	e036      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801792c:	4b1e      	ldr	r3, [pc, #120]	; (80179a8 <RegionEU868GetPhyParam+0x278>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	61bb      	str	r3, [r7, #24]
            break;
 8017932:	e032      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017934:	2300      	movs	r3, #0
 8017936:	61bb      	str	r3, [r7, #24]
            break;
 8017938:	e02f      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801793a:	2300      	movs	r3, #0
 801793c:	61bb      	str	r3, [r7, #24]
            break;
 801793e:	e02c      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017940:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8017944:	61bb      	str	r3, [r7, #24]
            break;
 8017946:	e028      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017948:	4b1c      	ldr	r3, [pc, #112]	; (80179bc <RegionEU868GetPhyParam+0x28c>)
 801794a:	61bb      	str	r3, [r7, #24]
            break;
 801794c:	e025      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801794e:	4b1a      	ldr	r3, [pc, #104]	; (80179b8 <RegionEU868GetPhyParam+0x288>)
 8017950:	61bb      	str	r3, [r7, #24]
            break;
 8017952:	e022      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017954:	2311      	movs	r3, #17
 8017956:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017958:	2302      	movs	r3, #2
 801795a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801795c:	2300      	movs	r3, #0
 801795e:	76bb      	strb	r3, [r7, #26]
            break;
 8017960:	e01b      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017962:	2303      	movs	r3, #3
 8017964:	61bb      	str	r3, [r7, #24]
            break;
 8017966:	e018      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017968:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <RegionEU868GetPhyParam+0x288>)
 801796a:	61bb      	str	r3, [r7, #24]
            break;
 801796c:	e015      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801796e:	2303      	movs	r3, #3
 8017970:	61bb      	str	r3, [r7, #24]
            break;
 8017972:	e012      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801797a:	461a      	mov	r2, r3
 801797c:	4b10      	ldr	r3, [pc, #64]	; (80179c0 <RegionEU868GetPhyParam+0x290>)
 801797e:	5c9b      	ldrb	r3, [r3, r2]
 8017980:	61bb      	str	r3, [r7, #24]
            break;
 8017982:	e00a      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801798a:	490e      	ldr	r1, [pc, #56]	; (80179c4 <RegionEU868GetPhyParam+0x294>)
 801798c:	4618      	mov	r0, r3
 801798e:	f7ff fda1 	bl	80174d4 <RegionCommonGetBandwidth>
 8017992:	4603      	mov	r3, r0
 8017994:	61bb      	str	r3, [r7, #24]
            break;
 8017996:	e000      	b.n	801799a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8017998:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	61fb      	str	r3, [r7, #28]
 801799e:	69fb      	ldr	r3, [r7, #28]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3720      	adds	r7, #32
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	200016f4 	.word	0x200016f4
 80179ac:	0801e5f4 	.word	0x0801e5f4
 80179b0:	0801e5fc 	.word	0x0801e5fc
 80179b4:	fffffc18 	.word	0xfffffc18
 80179b8:	33d3e608 	.word	0x33d3e608
 80179bc:	4009999a 	.word	0x4009999a
 80179c0:	0801e5cc 	.word	0x0801e5cc
 80179c4:	0801e5d4 	.word	0x0801e5d4

080179c8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80179c8:	b590      	push	{r4, r7, lr}
 80179ca:	b085      	sub	sp, #20
 80179cc:	af02      	add	r7, sp, #8
 80179ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80179d0:	4b11      	ldr	r3, [pc, #68]	; (8017a18 <RegionEU868SetBandTxDone+0x50>)
 80179d2:	681a      	ldr	r2, [r3, #0]
 80179d4:	4b11      	ldr	r3, [pc, #68]	; (8017a1c <RegionEU868SetBandTxDone+0x54>)
 80179d6:	6819      	ldr	r1, [r3, #0]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	4618      	mov	r0, r3
 80179de:	4603      	mov	r3, r0
 80179e0:	005b      	lsls	r3, r3, #1
 80179e2:	4403      	add	r3, r0
 80179e4:	009b      	lsls	r3, r3, #2
 80179e6:	440b      	add	r3, r1
 80179e8:	3309      	adds	r3, #9
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	4619      	mov	r1, r3
 80179ee:	460b      	mov	r3, r1
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	440b      	add	r3, r1
 80179f4:	00db      	lsls	r3, r3, #3
 80179f6:	18d0      	adds	r0, r2, r3
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6899      	ldr	r1, [r3, #8]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	785c      	ldrb	r4, [r3, #1]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	691a      	ldr	r2, [r3, #16]
 8017a04:	9200      	str	r2, [sp, #0]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	4622      	mov	r2, r4
 8017a0a:	f7ff f8e9 	bl	8016be0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017a0e:	bf00      	nop
 8017a10:	370c      	adds	r7, #12
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd90      	pop	{r4, r7, pc}
 8017a16:	bf00      	nop
 8017a18:	200016f0 	.word	0x200016f0
 8017a1c:	200016f4 	.word	0x200016f4

08017a20 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b0b0      	sub	sp, #192	; 0xc0
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017a2c:	2290      	movs	r2, #144	; 0x90
 8017a2e:	2100      	movs	r1, #0
 8017a30:	4618      	mov	r0, r3
 8017a32:	f005 fe11 	bl	801d658 <memset>
 8017a36:	2364      	movs	r3, #100	; 0x64
 8017a38:	863b      	strh	r3, [r7, #48]	; 0x30
 8017a3a:	2364      	movs	r3, #100	; 0x64
 8017a3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017a44:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8017a48:	230a      	movs	r3, #10
 8017a4a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8017a4e:	2364      	movs	r3, #100	; 0x64
 8017a50:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8017a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017a58:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	7a1b      	ldrb	r3, [r3, #8]
 8017a60:	2b02      	cmp	r3, #2
 8017a62:	d05e      	beq.n	8017b22 <RegionEU868InitDefaults+0x102>
 8017a64:	2b02      	cmp	r3, #2
 8017a66:	dc6b      	bgt.n	8017b40 <RegionEU868InitDefaults+0x120>
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d002      	beq.n	8017a72 <RegionEU868InitDefaults+0x52>
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	d03f      	beq.n	8017af0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017a70:	e066      	b.n	8017b40 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d063      	beq.n	8017b42 <RegionEU868InitDefaults+0x122>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d05f      	beq.n	8017b42 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	4a30      	ldr	r2, [pc, #192]	; (8017b48 <RegionEU868InitDefaults+0x128>)
 8017a88:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	4a2f      	ldr	r2, [pc, #188]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017a90:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017a92:	4b2d      	ldr	r3, [pc, #180]	; (8017b48 <RegionEU868InitDefaults+0x128>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017a9c:	2290      	movs	r2, #144	; 0x90
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	f000 ffbd 	bl	8018a1e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017aa4:	4b29      	ldr	r3, [pc, #164]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	4a29      	ldr	r2, [pc, #164]	; (8017b50 <RegionEU868InitDefaults+0x130>)
 8017aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8017aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017ab0:	4b26      	ldr	r3, [pc, #152]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	4a27      	ldr	r2, [pc, #156]	; (8017b54 <RegionEU868InitDefaults+0x134>)
 8017ab6:	330c      	adds	r3, #12
 8017ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8017aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017abe:	4b23      	ldr	r3, [pc, #140]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	4a25      	ldr	r2, [pc, #148]	; (8017b58 <RegionEU868InitDefaults+0x138>)
 8017ac4:	3318      	adds	r3, #24
 8017ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8017ac8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017acc:	4b1f      	ldr	r3, [pc, #124]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2207      	movs	r2, #7
 8017ad2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017ad6:	4b1d      	ldr	r3, [pc, #116]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8017ade:	4b1b      	ldr	r3, [pc, #108]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	4619      	mov	r1, r3
 8017aea:	f7ff f853 	bl	8016b94 <RegionCommonChanMaskCopy>
 8017aee:	e028      	b.n	8017b42 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017af0:	4b16      	ldr	r3, [pc, #88]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2200      	movs	r2, #0
 8017af6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017af8:	4b14      	ldr	r3, [pc, #80]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	2200      	movs	r2, #0
 8017afe:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017b00:	4b12      	ldr	r3, [pc, #72]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	2200      	movs	r2, #0
 8017b06:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017b08:	4b10      	ldr	r3, [pc, #64]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8017b10:	4b0e      	ldr	r3, [pc, #56]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8017b18:	2201      	movs	r2, #1
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	f7ff f83a 	bl	8016b94 <RegionCommonChanMaskCopy>
            break;
 8017b20:	e00f      	b.n	8017b42 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017b22:	4b0a      	ldr	r3, [pc, #40]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8017b2a:	4b08      	ldr	r3, [pc, #32]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8017b32:	4b06      	ldr	r3, [pc, #24]	; (8017b4c <RegionEU868InitDefaults+0x12c>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	430a      	orrs	r2, r1
 8017b38:	b292      	uxth	r2, r2
 8017b3a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8017b3e:	e000      	b.n	8017b42 <RegionEU868InitDefaults+0x122>
            break;
 8017b40:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017b42:	37c0      	adds	r7, #192	; 0xc0
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	200016f0 	.word	0x200016f0
 8017b4c:	200016f4 	.word	0x200016f4
 8017b50:	0801dffc 	.word	0x0801dffc
 8017b54:	0801e008 	.word	0x0801e008
 8017b58:	0801e014 	.word	0x0801e014

08017b5c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b084      	sub	sp, #16
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	460b      	mov	r3, r1
 8017b66:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017b68:	78fb      	ldrb	r3, [r7, #3]
 8017b6a:	2b0f      	cmp	r3, #15
 8017b6c:	d86c      	bhi.n	8017c48 <RegionEU868Verify+0xec>
 8017b6e:	a201      	add	r2, pc, #4	; (adr r2, 8017b74 <RegionEU868Verify+0x18>)
 8017b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b74:	08017bb5 	.word	0x08017bb5
 8017b78:	08017c49 	.word	0x08017c49
 8017b7c:	08017c49 	.word	0x08017c49
 8017b80:	08017c49 	.word	0x08017c49
 8017b84:	08017c49 	.word	0x08017c49
 8017b88:	08017bcd 	.word	0x08017bcd
 8017b8c:	08017beb 	.word	0x08017beb
 8017b90:	08017c09 	.word	0x08017c09
 8017b94:	08017c49 	.word	0x08017c49
 8017b98:	08017c27 	.word	0x08017c27
 8017b9c:	08017c27 	.word	0x08017c27
 8017ba0:	08017c49 	.word	0x08017c49
 8017ba4:	08017c49 	.word	0x08017c49
 8017ba8:	08017c49 	.word	0x08017c49
 8017bac:	08017c49 	.word	0x08017c49
 8017bb0:	08017c45 	.word	0x08017c45
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	f107 020f 	add.w	r2, r7, #15
 8017bc0:	4611      	mov	r1, r2
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7ff fcee 	bl	80175a4 <VerifyRfFreq>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	e03e      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f993 3000 	ldrsb.w	r3, [r3]
 8017bd2:	2207      	movs	r2, #7
 8017bd4:	2100      	movs	r1, #0
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7fe ff5f 	bl	8016a9a <RegionCommonValueInRange>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	bf14      	ite	ne
 8017be2:	2301      	movne	r3, #1
 8017be4:	2300      	moveq	r3, #0
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	e02f      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f993 3000 	ldrsb.w	r3, [r3]
 8017bf0:	2205      	movs	r2, #5
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fe ff50 	bl	8016a9a <RegionCommonValueInRange>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	bf14      	ite	ne
 8017c00:	2301      	movne	r3, #1
 8017c02:	2300      	moveq	r3, #0
 8017c04:	b2db      	uxtb	r3, r3
 8017c06:	e020      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8017c0e:	2207      	movs	r2, #7
 8017c10:	2100      	movs	r1, #0
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7fe ff41 	bl	8016a9a <RegionCommonValueInRange>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	bf14      	ite	ne
 8017c1e:	2301      	movne	r3, #1
 8017c20:	2300      	moveq	r3, #0
 8017c22:	b2db      	uxtb	r3, r3
 8017c24:	e011      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f993 3000 	ldrsb.w	r3, [r3]
 8017c2c:	2207      	movs	r2, #7
 8017c2e:	2100      	movs	r1, #0
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7fe ff32 	bl	8016a9a <RegionCommonValueInRange>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	bf14      	ite	ne
 8017c3c:	2301      	movne	r3, #1
 8017c3e:	2300      	moveq	r3, #0
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	e002      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017c44:	2301      	movs	r3, #1
 8017c46:	e000      	b.n	8017c4a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017c48:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3710      	adds	r7, #16
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop

08017c54 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b08a      	sub	sp, #40	; 0x28
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017c5c:	2350      	movs	r3, #80	; 0x50
 8017c5e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	791b      	ldrb	r3, [r3, #4]
 8017c66:	2b10      	cmp	r3, #16
 8017c68:	d162      	bne.n	8017d30 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	330f      	adds	r3, #15
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d15e      	bne.n	8017d34 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017c76:	2300      	movs	r3, #0
 8017c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c7c:	2303      	movs	r3, #3
 8017c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017c82:	e050      	b.n	8017d26 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c88:	2b07      	cmp	r3, #7
 8017c8a:	d824      	bhi.n	8017cd6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681a      	ldr	r2, [r3, #0]
 8017c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c94:	4413      	add	r3, r2
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017c9a:	69ba      	ldr	r2, [r7, #24]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	6819      	ldr	r1, [r3, #0]
 8017ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	440b      	add	r3, r1
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	021b      	lsls	r3, r3, #8
 8017cac:	4313      	orrs	r3, r2
 8017cae:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017cb0:	69ba      	ldr	r2, [r7, #24]
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	6819      	ldr	r1, [r3, #0]
 8017cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cba:	3302      	adds	r3, #2
 8017cbc:	440b      	add	r3, r1
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	041b      	lsls	r3, r3, #16
 8017cc2:	4313      	orrs	r3, r2
 8017cc4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017cc6:	69bb      	ldr	r3, [r7, #24]
 8017cc8:	2264      	movs	r2, #100	; 0x64
 8017cca:	fb02 f303 	mul.w	r3, r2, r3
 8017cce:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	61fb      	str	r3, [r7, #28]
 8017cd4:	e006      	b.n	8017ce4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017ce4:	69bb      	ldr	r3, [r7, #24]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d00b      	beq.n	8017d02 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017cea:	f107 0318 	add.w	r3, r7, #24
 8017cee:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cf4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017cf6:	f107 0310 	add.w	r3, r7, #16
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f000 fd14 	bl	8018728 <RegionEU868ChannelAdd>
 8017d00:	e007      	b.n	8017d12 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d06:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017d08:	f107 030c 	add.w	r3, r7, #12
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f000 fdad 	bl	801886c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d16:	3303      	adds	r3, #3
 8017d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d20:	3301      	adds	r3, #1
 8017d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017d26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d2a:	2b0f      	cmp	r3, #15
 8017d2c:	d9aa      	bls.n	8017c84 <RegionEU868ApplyCFList+0x30>
 8017d2e:	e002      	b.n	8017d36 <RegionEU868ApplyCFList+0xe2>
        return;
 8017d30:	bf00      	nop
 8017d32:	e000      	b.n	8017d36 <RegionEU868ApplyCFList+0xe2>
        return;
 8017d34:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017d36:	3728      	adds	r7, #40	; 0x28
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b082      	sub	sp, #8
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	791b      	ldrb	r3, [r3, #4]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d002      	beq.n	8017d52 <RegionEU868ChanMaskSet+0x16>
 8017d4c:	2b01      	cmp	r3, #1
 8017d4e:	d00b      	beq.n	8017d68 <RegionEU868ChanMaskSet+0x2c>
 8017d50:	e015      	b.n	8017d7e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017d52:	4b0e      	ldr	r3, [pc, #56]	; (8017d8c <RegionEU868ChanMaskSet+0x50>)
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2201      	movs	r2, #1
 8017d60:	4619      	mov	r1, r3
 8017d62:	f7fe ff17 	bl	8016b94 <RegionCommonChanMaskCopy>
            break;
 8017d66:	e00c      	b.n	8017d82 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017d68:	4b08      	ldr	r3, [pc, #32]	; (8017d8c <RegionEU868ChanMaskSet+0x50>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	2201      	movs	r2, #1
 8017d76:	4619      	mov	r1, r3
 8017d78:	f7fe ff0c 	bl	8016b94 <RegionCommonChanMaskCopy>
            break;
 8017d7c:	e001      	b.n	8017d82 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	e000      	b.n	8017d84 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017d82:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3708      	adds	r7, #8
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	200016f4 	.word	0x200016f4

08017d90 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b088      	sub	sp, #32
 8017d94:	af02      	add	r7, sp, #8
 8017d96:	60ba      	str	r2, [r7, #8]
 8017d98:	607b      	str	r3, [r7, #4]
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	73fb      	strb	r3, [r7, #15]
 8017d9e:	460b      	mov	r3, r1
 8017da0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017daa:	2b07      	cmp	r3, #7
 8017dac:	bfa8      	it	ge
 8017dae:	2307      	movge	r3, #7
 8017db0:	b25a      	sxtb	r2, r3
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dbc:	491e      	ldr	r1, [pc, #120]	; (8017e38 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7ff fb88 	bl	80174d4 <RegionCommonGetBandwidth>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	b2da      	uxtb	r2, r3
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dd2:	2b07      	cmp	r3, #7
 8017dd4:	d10a      	bne.n	8017dec <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ddc:	461a      	mov	r2, r3
 8017dde:	4b17      	ldr	r3, [pc, #92]	; (8017e3c <RegionEU868ComputeRxWindowParameters+0xac>)
 8017de0:	5c9b      	ldrb	r3, [r3, r2]
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7ff f90a 	bl	8016ffc <RegionCommonComputeSymbolTimeFsk>
 8017de8:	6178      	str	r0, [r7, #20]
 8017dea:	e011      	b.n	8017e10 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017df2:	461a      	mov	r2, r3
 8017df4:	4b11      	ldr	r3, [pc, #68]	; (8017e3c <RegionEU868ComputeRxWindowParameters+0xac>)
 8017df6:	5c9a      	ldrb	r2, [r3, r2]
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dfe:	4619      	mov	r1, r3
 8017e00:	4b0d      	ldr	r3, [pc, #52]	; (8017e38 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017e02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e06:	4619      	mov	r1, r3
 8017e08:	4610      	mov	r0, r2
 8017e0a:	f7ff f8e1 	bl	8016fd0 <RegionCommonComputeSymbolTimeLoRa>
 8017e0e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017e10:	4b0b      	ldr	r3, [pc, #44]	; (8017e40 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e14:	4798      	blx	r3
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	3308      	adds	r3, #8
 8017e1a:	687a      	ldr	r2, [r7, #4]
 8017e1c:	320c      	adds	r2, #12
 8017e1e:	7bb9      	ldrb	r1, [r7, #14]
 8017e20:	9201      	str	r2, [sp, #4]
 8017e22:	9300      	str	r3, [sp, #0]
 8017e24:	4603      	mov	r3, r0
 8017e26:	68ba      	ldr	r2, [r7, #8]
 8017e28:	6978      	ldr	r0, [r7, #20]
 8017e2a:	f7ff f8f7 	bl	801701c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017e2e:	bf00      	nop
 8017e30:	3718      	adds	r7, #24
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	bf00      	nop
 8017e38:	0801e5d4 	.word	0x0801e5d4
 8017e3c:	0801e5cc 	.word	0x0801e5cc
 8017e40:	0801e604 	.word	0x0801e604

08017e44 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017e44:	b5b0      	push	{r4, r5, r7, lr}
 8017e46:	b090      	sub	sp, #64	; 0x40
 8017e48:	af0a      	add	r7, sp, #40	; 0x28
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	785b      	ldrb	r3, [r3, #1]
 8017e52:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017e54:	2300      	movs	r3, #0
 8017e56:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017e62:	4b5a      	ldr	r3, [pc, #360]	; (8017fcc <RegionEU868RxConfig+0x188>)
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	4798      	blx	r3
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d001      	beq.n	8017e72 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e0a8      	b.n	8017fc4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	7cdb      	ldrb	r3, [r3, #19]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d126      	bne.n	8017ec8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8017e7a:	4b55      	ldr	r3, [pc, #340]	; (8017fd0 <RegionEU868RxConfig+0x18c>)
 8017e7c:	681a      	ldr	r2, [r3, #0]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	781b      	ldrb	r3, [r3, #0]
 8017e82:	4619      	mov	r1, r3
 8017e84:	460b      	mov	r3, r1
 8017e86:	005b      	lsls	r3, r3, #1
 8017e88:	440b      	add	r3, r1
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	4413      	add	r3, r2
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017e92:	4b4f      	ldr	r3, [pc, #316]	; (8017fd0 <RegionEU868RxConfig+0x18c>)
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	781b      	ldrb	r3, [r3, #0]
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	460b      	mov	r3, r1
 8017e9e:	005b      	lsls	r3, r3, #1
 8017ea0:	440b      	add	r3, r1
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4413      	add	r3, r2
 8017ea6:	3304      	adds	r3, #4
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d00c      	beq.n	8017ec8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017eae:	4b48      	ldr	r3, [pc, #288]	; (8017fd0 <RegionEU868RxConfig+0x18c>)
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	460b      	mov	r3, r1
 8017eba:	005b      	lsls	r3, r3, #1
 8017ebc:	440b      	add	r3, r1
 8017ebe:	009b      	lsls	r3, r3, #2
 8017ec0:	4413      	add	r3, r2
 8017ec2:	3304      	adds	r3, #4
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ecc:	4a41      	ldr	r2, [pc, #260]	; (8017fd4 <RegionEU868RxConfig+0x190>)
 8017ece:	5cd3      	ldrb	r3, [r2, r3]
 8017ed0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017ed2:	4b3e      	ldr	r3, [pc, #248]	; (8017fcc <RegionEU868RxConfig+0x188>)
 8017ed4:	68db      	ldr	r3, [r3, #12]
 8017ed6:	6938      	ldr	r0, [r7, #16]
 8017ed8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ede:	2b07      	cmp	r3, #7
 8017ee0:	d128      	bne.n	8017f34 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017ee6:	4b39      	ldr	r3, [pc, #228]	; (8017fcc <RegionEU868RxConfig+0x188>)
 8017ee8:	699c      	ldr	r4, [r3, #24]
 8017eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017ef2:	fb02 f303 	mul.w	r3, r2, r3
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	689b      	ldr	r3, [r3, #8]
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	7c92      	ldrb	r2, [r2, #18]
 8017f02:	7df8      	ldrb	r0, [r7, #23]
 8017f04:	9209      	str	r2, [sp, #36]	; 0x24
 8017f06:	2200      	movs	r2, #0
 8017f08:	9208      	str	r2, [sp, #32]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	9207      	str	r2, [sp, #28]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	9206      	str	r2, [sp, #24]
 8017f12:	2201      	movs	r2, #1
 8017f14:	9205      	str	r2, [sp, #20]
 8017f16:	2200      	movs	r2, #0
 8017f18:	9204      	str	r2, [sp, #16]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	9203      	str	r2, [sp, #12]
 8017f1e:	9302      	str	r3, [sp, #8]
 8017f20:	2305      	movs	r3, #5
 8017f22:	9301      	str	r3, [sp, #4]
 8017f24:	4b2c      	ldr	r3, [pc, #176]	; (8017fd8 <RegionEU868RxConfig+0x194>)
 8017f26:	9300      	str	r3, [sp, #0]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	460a      	mov	r2, r1
 8017f2c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017f30:	47a0      	blx	r4
 8017f32:	e024      	b.n	8017f7e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017f34:	2301      	movs	r3, #1
 8017f36:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017f38:	4b24      	ldr	r3, [pc, #144]	; (8017fcc <RegionEU868RxConfig+0x188>)
 8017f3a:	699c      	ldr	r4, [r3, #24]
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	789b      	ldrb	r3, [r3, #2]
 8017f40:	461d      	mov	r5, r3
 8017f42:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	689b      	ldr	r3, [r3, #8]
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	687a      	ldr	r2, [r7, #4]
 8017f4e:	7c92      	ldrb	r2, [r2, #18]
 8017f50:	7df8      	ldrb	r0, [r7, #23]
 8017f52:	9209      	str	r2, [sp, #36]	; 0x24
 8017f54:	2201      	movs	r2, #1
 8017f56:	9208      	str	r2, [sp, #32]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	9207      	str	r2, [sp, #28]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	9206      	str	r2, [sp, #24]
 8017f60:	2200      	movs	r2, #0
 8017f62:	9205      	str	r2, [sp, #20]
 8017f64:	2200      	movs	r2, #0
 8017f66:	9204      	str	r2, [sp, #16]
 8017f68:	2200      	movs	r2, #0
 8017f6a:	9203      	str	r2, [sp, #12]
 8017f6c:	9302      	str	r3, [sp, #8]
 8017f6e:	2308      	movs	r3, #8
 8017f70:	9301      	str	r3, [sp, #4]
 8017f72:	2300      	movs	r3, #0
 8017f74:	9300      	str	r3, [sp, #0]
 8017f76:	2301      	movs	r3, #1
 8017f78:	460a      	mov	r2, r1
 8017f7a:	4629      	mov	r1, r5
 8017f7c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	7c5b      	ldrb	r3, [r3, #17]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d005      	beq.n	8017f92 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f8a:	4a14      	ldr	r2, [pc, #80]	; (8017fdc <RegionEU868RxConfig+0x198>)
 8017f8c:	5cd3      	ldrb	r3, [r2, r3]
 8017f8e:	75bb      	strb	r3, [r7, #22]
 8017f90:	e004      	b.n	8017f9c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f96:	4a12      	ldr	r2, [pc, #72]	; (8017fe0 <RegionEU868RxConfig+0x19c>)
 8017f98:	5cd3      	ldrb	r3, [r2, r3]
 8017f9a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017f9c:	4b0b      	ldr	r3, [pc, #44]	; (8017fcc <RegionEU868RxConfig+0x188>)
 8017f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fa0:	7dba      	ldrb	r2, [r7, #22]
 8017fa2:	320d      	adds	r2, #13
 8017fa4:	b2d1      	uxtb	r1, r2
 8017fa6:	7dfa      	ldrb	r2, [r7, #23]
 8017fa8:	4610      	mov	r0, r2
 8017faa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	7cdb      	ldrb	r3, [r3, #19]
 8017fb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017fb4:	6939      	ldr	r1, [r7, #16]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7ff faaa 	bl	8017510 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	7bfa      	ldrb	r2, [r7, #15]
 8017fc0:	701a      	strb	r2, [r3, #0]
    return true;
 8017fc2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	3718      	adds	r7, #24
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bdb0      	pop	{r4, r5, r7, pc}
 8017fcc:	0801e604 	.word	0x0801e604
 8017fd0:	200016f4 	.word	0x200016f4
 8017fd4:	0801e5cc 	.word	0x0801e5cc
 8017fd8:	00014585 	.word	0x00014585
 8017fdc:	0801e5fc 	.word	0x0801e5fc
 8017fe0:	0801e5f4 	.word	0x0801e5f4

08017fe4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017fe4:	b590      	push	{r4, r7, lr}
 8017fe6:	b093      	sub	sp, #76	; 0x4c
 8017fe8:	af0a      	add	r7, sp, #40	; 0x28
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	4b5d      	ldr	r3, [pc, #372]	; (8018170 <RegionEU868TxConfig+0x18c>)
 8017ffa:	5c9b      	ldrb	r3, [r3, r2]
 8017ffc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018004:	4b5b      	ldr	r3, [pc, #364]	; (8018174 <RegionEU868TxConfig+0x190>)
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	4b5b      	ldr	r3, [pc, #364]	; (8018178 <RegionEU868TxConfig+0x194>)
 801800a:	6819      	ldr	r1, [r3, #0]
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	781b      	ldrb	r3, [r3, #0]
 8018010:	461c      	mov	r4, r3
 8018012:	4623      	mov	r3, r4
 8018014:	005b      	lsls	r3, r3, #1
 8018016:	4423      	add	r3, r4
 8018018:	009b      	lsls	r3, r3, #2
 801801a:	440b      	add	r3, r1
 801801c:	3309      	adds	r3, #9
 801801e:	781b      	ldrb	r3, [r3, #0]
 8018020:	4619      	mov	r1, r3
 8018022:	460b      	mov	r3, r1
 8018024:	005b      	lsls	r3, r3, #1
 8018026:	440b      	add	r3, r1
 8018028:	00db      	lsls	r3, r3, #3
 801802a:	4413      	add	r3, r2
 801802c:	3302      	adds	r3, #2
 801802e:	f993 3000 	ldrsb.w	r3, [r3]
 8018032:	4619      	mov	r1, r3
 8018034:	f7ff fa39 	bl	80174aa <RegionCommonLimitTxPower>
 8018038:	4603      	mov	r3, r0
 801803a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018042:	494e      	ldr	r1, [pc, #312]	; (801817c <RegionEU868TxConfig+0x198>)
 8018044:	4618      	mov	r0, r3
 8018046:	f7ff fa45 	bl	80174d4 <RegionCommonGetBandwidth>
 801804a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801804c:	2300      	movs	r3, #0
 801804e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	6859      	ldr	r1, [r3, #4]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	689a      	ldr	r2, [r3, #8]
 8018058:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff f895 	bl	801718c <RegionCommonComputeTxPower>
 8018062:	4603      	mov	r3, r0
 8018064:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018066:	4b46      	ldr	r3, [pc, #280]	; (8018180 <RegionEU868TxConfig+0x19c>)
 8018068:	68da      	ldr	r2, [r3, #12]
 801806a:	4b43      	ldr	r3, [pc, #268]	; (8018178 <RegionEU868TxConfig+0x194>)
 801806c:	6819      	ldr	r1, [r3, #0]
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	4618      	mov	r0, r3
 8018074:	4603      	mov	r3, r0
 8018076:	005b      	lsls	r3, r3, #1
 8018078:	4403      	add	r3, r0
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	440b      	add	r3, r1
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	4618      	mov	r0, r3
 8018082:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801808a:	2b07      	cmp	r3, #7
 801808c:	d124      	bne.n	80180d8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801808e:	2300      	movs	r3, #0
 8018090:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018092:	4b3b      	ldr	r3, [pc, #236]	; (8018180 <RegionEU868TxConfig+0x19c>)
 8018094:	69dc      	ldr	r4, [r3, #28]
 8018096:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801809a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801809e:	fb02 f303 	mul.w	r3, r2, r3
 80180a2:	461a      	mov	r2, r3
 80180a4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80180a8:	7ff8      	ldrb	r0, [r7, #31]
 80180aa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80180ae:	9308      	str	r3, [sp, #32]
 80180b0:	2300      	movs	r3, #0
 80180b2:	9307      	str	r3, [sp, #28]
 80180b4:	2300      	movs	r3, #0
 80180b6:	9306      	str	r3, [sp, #24]
 80180b8:	2300      	movs	r3, #0
 80180ba:	9305      	str	r3, [sp, #20]
 80180bc:	2301      	movs	r3, #1
 80180be:	9304      	str	r3, [sp, #16]
 80180c0:	2300      	movs	r3, #0
 80180c2:	9303      	str	r3, [sp, #12]
 80180c4:	2305      	movs	r3, #5
 80180c6:	9302      	str	r3, [sp, #8]
 80180c8:	2300      	movs	r3, #0
 80180ca:	9301      	str	r3, [sp, #4]
 80180cc:	9200      	str	r2, [sp, #0]
 80180ce:	69bb      	ldr	r3, [r7, #24]
 80180d0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80180d4:	47a0      	blx	r4
 80180d6:	e01d      	b.n	8018114 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80180d8:	2301      	movs	r3, #1
 80180da:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80180dc:	4b28      	ldr	r3, [pc, #160]	; (8018180 <RegionEU868TxConfig+0x19c>)
 80180de:	69dc      	ldr	r4, [r3, #28]
 80180e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80180e4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80180e8:	7ff8      	ldrb	r0, [r7, #31]
 80180ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80180ee:	9208      	str	r2, [sp, #32]
 80180f0:	2200      	movs	r2, #0
 80180f2:	9207      	str	r2, [sp, #28]
 80180f4:	2200      	movs	r2, #0
 80180f6:	9206      	str	r2, [sp, #24]
 80180f8:	2200      	movs	r2, #0
 80180fa:	9205      	str	r2, [sp, #20]
 80180fc:	2201      	movs	r2, #1
 80180fe:	9204      	str	r2, [sp, #16]
 8018100:	2200      	movs	r2, #0
 8018102:	9203      	str	r2, [sp, #12]
 8018104:	2208      	movs	r2, #8
 8018106:	9202      	str	r2, [sp, #8]
 8018108:	2201      	movs	r2, #1
 801810a:	9201      	str	r2, [sp, #4]
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	2200      	movs	r2, #0
 8018112:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018114:	4b18      	ldr	r3, [pc, #96]	; (8018178 <RegionEU868TxConfig+0x194>)
 8018116:	681a      	ldr	r2, [r3, #0]
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	4619      	mov	r1, r3
 801811e:	460b      	mov	r3, r1
 8018120:	005b      	lsls	r3, r3, #1
 8018122:	440b      	add	r3, r1
 8018124:	009b      	lsls	r3, r3, #2
 8018126:	4413      	add	r3, r2
 8018128:	681a      	ldr	r2, [r3, #0]
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018130:	4619      	mov	r1, r3
 8018132:	4610      	mov	r0, r2
 8018134:	f7ff fa1e 	bl	8017574 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	899b      	ldrh	r3, [r3, #12]
 8018142:	4619      	mov	r1, r3
 8018144:	4610      	mov	r0, r2
 8018146:	f7ff faa3 	bl	8017690 <GetTimeOnAir>
 801814a:	4602      	mov	r2, r0
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018150:	4b0b      	ldr	r3, [pc, #44]	; (8018180 <RegionEU868TxConfig+0x19c>)
 8018152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018154:	68fa      	ldr	r2, [r7, #12]
 8018156:	8992      	ldrh	r2, [r2, #12]
 8018158:	b2d1      	uxtb	r1, r2
 801815a:	7ffa      	ldrb	r2, [r7, #31]
 801815c:	4610      	mov	r0, r2
 801815e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	7f7a      	ldrb	r2, [r7, #29]
 8018164:	701a      	strb	r2, [r3, #0]
    return true;
 8018166:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018168:	4618      	mov	r0, r3
 801816a:	3724      	adds	r7, #36	; 0x24
 801816c:	46bd      	mov	sp, r7
 801816e:	bd90      	pop	{r4, r7, pc}
 8018170:	0801e5cc 	.word	0x0801e5cc
 8018174:	200016f0 	.word	0x200016f0
 8018178:	200016f4 	.word	0x200016f4
 801817c:	0801e5d4 	.word	0x0801e5d4
 8018180:	0801e604 	.word	0x0801e604

08018184 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018184:	b590      	push	{r4, r7, lr}
 8018186:	b093      	sub	sp, #76	; 0x4c
 8018188:	af00      	add	r7, sp, #0
 801818a:	60f8      	str	r0, [r7, #12]
 801818c:	60b9      	str	r1, [r7, #8]
 801818e:	607a      	str	r2, [r7, #4]
 8018190:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018192:	2307      	movs	r3, #7
 8018194:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801819c:	2200      	movs	r2, #0
 801819e:	601a      	str	r2, [r3, #0]
 80181a0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80181a2:	2300      	movs	r3, #0
 80181a4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80181a8:	2300      	movs	r3, #0
 80181aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80181ae:	2300      	movs	r3, #0
 80181b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80181b2:	e085      	b.n	80182c0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	685a      	ldr	r2, [r3, #4]
 80181b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80181bc:	4413      	add	r3, r2
 80181be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80181c2:	4611      	mov	r1, r2
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7fe fe29 	bl	8016e1c <RegionCommonParseLinkAdrReq>
 80181ca:	4603      	mov	r3, r0
 80181cc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80181d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d07b      	beq.n	80182d0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80181d8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80181dc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80181e0:	4413      	add	r3, r2
 80181e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80181e6:	2307      	movs	r3, #7
 80181e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80181ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80181f0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80181f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d109      	bne.n	801820e <RegionEU868LinkAdrReq+0x8a>
 80181fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d106      	bne.n	801820e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8018200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018204:	f023 0301 	bic.w	r3, r3, #1
 8018208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801820c:	e058      	b.n	80182c0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801820e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018212:	2b00      	cmp	r3, #0
 8018214:	d003      	beq.n	801821e <RegionEU868LinkAdrReq+0x9a>
 8018216:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801821a:	2b05      	cmp	r3, #5
 801821c:	d903      	bls.n	8018226 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801821e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018222:	2b06      	cmp	r3, #6
 8018224:	d906      	bls.n	8018234 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018226:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801822a:	f023 0301 	bic.w	r3, r3, #1
 801822e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8018232:	e045      	b.n	80182c0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018234:	2300      	movs	r3, #0
 8018236:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801823a:	e03d      	b.n	80182b8 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801823c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018240:	2b06      	cmp	r3, #6
 8018242:	d118      	bne.n	8018276 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8018244:	4b5f      	ldr	r3, [pc, #380]	; (80183c4 <RegionEU868LinkAdrReq+0x240>)
 8018246:	6819      	ldr	r1, [r3, #0]
 8018248:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801824c:	4613      	mov	r3, r2
 801824e:	005b      	lsls	r3, r3, #1
 8018250:	4413      	add	r3, r2
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	440b      	add	r3, r1
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d028      	beq.n	80182ae <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801825c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018260:	2201      	movs	r2, #1
 8018262:	fa02 f303 	lsl.w	r3, r2, r3
 8018266:	b21a      	sxth	r2, r3
 8018268:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801826a:	b21b      	sxth	r3, r3
 801826c:	4313      	orrs	r3, r2
 801826e:	b21b      	sxth	r3, r3
 8018270:	b29b      	uxth	r3, r3
 8018272:	877b      	strh	r3, [r7, #58]	; 0x3a
 8018274:	e01b      	b.n	80182ae <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018276:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018278:	461a      	mov	r2, r3
 801827a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801827e:	fa42 f303 	asr.w	r3, r2, r3
 8018282:	f003 0301 	and.w	r3, r3, #1
 8018286:	2b00      	cmp	r3, #0
 8018288:	d011      	beq.n	80182ae <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801828a:	4b4e      	ldr	r3, [pc, #312]	; (80183c4 <RegionEU868LinkAdrReq+0x240>)
 801828c:	6819      	ldr	r1, [r3, #0]
 801828e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8018292:	4613      	mov	r3, r2
 8018294:	005b      	lsls	r3, r3, #1
 8018296:	4413      	add	r3, r2
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	440b      	add	r3, r1
 801829c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d105      	bne.n	80182ae <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80182a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80182a6:	f023 0301 	bic.w	r3, r3, #1
 80182aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80182ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80182b2:	3301      	adds	r3, #1
 80182b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80182b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80182bc:	2b0f      	cmp	r3, #15
 80182be:	d9bd      	bls.n	801823c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	7a1b      	ldrb	r3, [r3, #8]
 80182c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80182c8:	429a      	cmp	r2, r3
 80182ca:	f4ff af73 	bcc.w	80181b4 <RegionEU868LinkAdrReq+0x30>
 80182ce:	e000      	b.n	80182d2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80182d0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80182d2:	2302      	movs	r3, #2
 80182d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	7a5b      	ldrb	r3, [r3, #9]
 80182dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80182e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7ff fa23 	bl	8017730 <RegionEU868GetPhyParam>
 80182ea:	4603      	mov	r3, r0
 80182ec:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80182ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80182f2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	7a9b      	ldrb	r3, [r3, #10]
 80182f8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80182fa:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80182fe:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018300:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8018304:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018306:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801830a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018312:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801831a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	7b5b      	ldrb	r3, [r3, #13]
 8018320:	b25b      	sxtb	r3, r3
 8018322:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018324:	2310      	movs	r3, #16
 8018326:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018328:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801832c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018330:	b25b      	sxtb	r3, r3
 8018332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018336:	2307      	movs	r3, #7
 8018338:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801833c:	4b21      	ldr	r3, [pc, #132]	; (80183c4 <RegionEU868LinkAdrReq+0x240>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018342:	2307      	movs	r3, #7
 8018344:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018348:	2300      	movs	r3, #0
 801834a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018354:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801835c:	1c9a      	adds	r2, r3, #2
 801835e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018362:	1c59      	adds	r1, r3, #1
 8018364:	f107 0010 	add.w	r0, r7, #16
 8018368:	4623      	mov	r3, r4
 801836a:	f7fe fda8 	bl	8016ebe <RegionCommonLinkAdrReqVerifyParams>
 801836e:	4603      	mov	r3, r0
 8018370:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018378:	2b07      	cmp	r3, #7
 801837a:	d10d      	bne.n	8018398 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801837c:	4b11      	ldr	r3, [pc, #68]	; (80183c4 <RegionEU868LinkAdrReq+0x240>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018384:	220c      	movs	r2, #12
 8018386:	2100      	movs	r1, #0
 8018388:	4618      	mov	r0, r3
 801838a:	f000 fb83 	bl	8018a94 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801838e:	4b0d      	ldr	r3, [pc, #52]	; (80183c4 <RegionEU868LinkAdrReq+0x240>)
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018394:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018398:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80183a0:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80183a8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80183b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80183b2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80183b6:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80183b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80183bc:	4618      	mov	r0, r3
 80183be:	374c      	adds	r7, #76	; 0x4c
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd90      	pop	{r4, r7, pc}
 80183c4:	200016f4 	.word	0x200016f4

080183c8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b084      	sub	sp, #16
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80183d0:	2307      	movs	r3, #7
 80183d2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80183d4:	2300      	movs	r3, #0
 80183d6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	685b      	ldr	r3, [r3, #4]
 80183dc:	f107 020e 	add.w	r2, r7, #14
 80183e0:	4611      	mov	r1, r2
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7ff f8de 	bl	80175a4 <VerifyRfFreq>
 80183e8:	4603      	mov	r3, r0
 80183ea:	f083 0301 	eor.w	r3, r3, #1
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d003      	beq.n	80183fc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80183f4:	7bfb      	ldrb	r3, [r7, #15]
 80183f6:	f023 0301 	bic.w	r3, r3, #1
 80183fa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f993 3000 	ldrsb.w	r3, [r3]
 8018402:	2207      	movs	r2, #7
 8018404:	2100      	movs	r1, #0
 8018406:	4618      	mov	r0, r3
 8018408:	f7fe fb47 	bl	8016a9a <RegionCommonValueInRange>
 801840c:	4603      	mov	r3, r0
 801840e:	2b00      	cmp	r3, #0
 8018410:	d103      	bne.n	801841a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8018412:	7bfb      	ldrb	r3, [r7, #15]
 8018414:	f023 0302 	bic.w	r3, r3, #2
 8018418:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018420:	2205      	movs	r2, #5
 8018422:	2100      	movs	r1, #0
 8018424:	4618      	mov	r0, r3
 8018426:	f7fe fb38 	bl	8016a9a <RegionCommonValueInRange>
 801842a:	4603      	mov	r3, r0
 801842c:	2b00      	cmp	r3, #0
 801842e:	d103      	bne.n	8018438 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018430:	7bfb      	ldrb	r3, [r7, #15]
 8018432:	f023 0304 	bic.w	r3, r3, #4
 8018436:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018438:	7bfb      	ldrb	r3, [r7, #15]
}
 801843a:	4618      	mov	r0, r3
 801843c:	3710      	adds	r7, #16
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
	...

08018444 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b086      	sub	sp, #24
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801844c:	2303      	movs	r3, #3
 801844e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d114      	bne.n	8018484 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018460:	b2db      	uxtb	r3, r3
 8018462:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018464:	f107 0308 	add.w	r3, r7, #8
 8018468:	4618      	mov	r0, r3
 801846a:	f000 f9ff 	bl	801886c <RegionEU868ChannelsRemove>
 801846e:	4603      	mov	r3, r0
 8018470:	f083 0301 	eor.w	r3, r3, #1
 8018474:	b2db      	uxtb	r3, r3
 8018476:	2b00      	cmp	r3, #0
 8018478:	d03b      	beq.n	80184f2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801847a:	7dfb      	ldrb	r3, [r7, #23]
 801847c:	f023 0303 	bic.w	r3, r3, #3
 8018480:	75fb      	strb	r3, [r7, #23]
 8018482:	e036      	b.n	80184f2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018490:	b2db      	uxtb	r3, r3
 8018492:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018494:	f107 030c 	add.w	r3, r7, #12
 8018498:	4618      	mov	r0, r3
 801849a:	f000 f945 	bl	8018728 <RegionEU868ChannelAdd>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b06      	cmp	r3, #6
 80184a2:	d820      	bhi.n	80184e6 <RegionEU868NewChannelReq+0xa2>
 80184a4:	a201      	add	r2, pc, #4	; (adr r2, 80184ac <RegionEU868NewChannelReq+0x68>)
 80184a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184aa:	bf00      	nop
 80184ac:	080184f1 	.word	0x080184f1
 80184b0:	080184e7 	.word	0x080184e7
 80184b4:	080184e7 	.word	0x080184e7
 80184b8:	080184e7 	.word	0x080184e7
 80184bc:	080184c9 	.word	0x080184c9
 80184c0:	080184d3 	.word	0x080184d3
 80184c4:	080184dd 	.word	0x080184dd
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80184c8:	7dfb      	ldrb	r3, [r7, #23]
 80184ca:	f023 0301 	bic.w	r3, r3, #1
 80184ce:	75fb      	strb	r3, [r7, #23]
                break;
 80184d0:	e00f      	b.n	80184f2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80184d2:	7dfb      	ldrb	r3, [r7, #23]
 80184d4:	f023 0302 	bic.w	r3, r3, #2
 80184d8:	75fb      	strb	r3, [r7, #23]
                break;
 80184da:	e00a      	b.n	80184f2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80184dc:	7dfb      	ldrb	r3, [r7, #23]
 80184de:	f023 0303 	bic.w	r3, r3, #3
 80184e2:	75fb      	strb	r3, [r7, #23]
                break;
 80184e4:	e005      	b.n	80184f2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80184e6:	7dfb      	ldrb	r3, [r7, #23]
 80184e8:	f023 0303 	bic.w	r3, r3, #3
 80184ec:	75fb      	strb	r3, [r7, #23]
                break;
 80184ee:	e000      	b.n	80184f2 <RegionEU868NewChannelReq+0xae>
                break;
 80184f0:	bf00      	nop
            }
        }
    }

    return status;
 80184f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3718      	adds	r7, #24
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	bf00      	nop

08018500 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018500:	b480      	push	{r7}
 8018502:	b083      	sub	sp, #12
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018508:	f04f 33ff 	mov.w	r3, #4294967295
}
 801850c:	4618      	mov	r0, r3
 801850e:	370c      	adds	r7, #12
 8018510:	46bd      	mov	sp, r7
 8018512:	bc80      	pop	{r7}
 8018514:	4770      	bx	lr
	...

08018518 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b084      	sub	sp, #16
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018520:	2303      	movs	r3, #3
 8018522:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018524:	2300      	movs	r3, #0
 8018526:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	781b      	ldrb	r3, [r3, #0]
 801852c:	2b0f      	cmp	r3, #15
 801852e:	d901      	bls.n	8018534 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8018530:	2300      	movs	r3, #0
 8018532:	e035      	b.n	80185a0 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	f107 020e 	add.w	r2, r7, #14
 801853c:	4611      	mov	r1, r2
 801853e:	4618      	mov	r0, r3
 8018540:	f7ff f830 	bl	80175a4 <VerifyRfFreq>
 8018544:	4603      	mov	r3, r0
 8018546:	f083 0301 	eor.w	r3, r3, #1
 801854a:	b2db      	uxtb	r3, r3
 801854c:	2b00      	cmp	r3, #0
 801854e:	d003      	beq.n	8018558 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018550:	7bfb      	ldrb	r3, [r7, #15]
 8018552:	f023 0301 	bic.w	r3, r3, #1
 8018556:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018558:	4b13      	ldr	r3, [pc, #76]	; (80185a8 <RegionEU868DlChannelReq+0x90>)
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	4619      	mov	r1, r3
 8018562:	460b      	mov	r3, r1
 8018564:	005b      	lsls	r3, r3, #1
 8018566:	440b      	add	r3, r1
 8018568:	009b      	lsls	r3, r3, #2
 801856a:	4413      	add	r3, r2
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d103      	bne.n	801857a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8018572:	7bfb      	ldrb	r3, [r7, #15]
 8018574:	f023 0302 	bic.w	r3, r3, #2
 8018578:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801857a:	7bfb      	ldrb	r3, [r7, #15]
 801857c:	2b03      	cmp	r3, #3
 801857e:	d10d      	bne.n	801859c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018580:	4b09      	ldr	r3, [pc, #36]	; (80185a8 <RegionEU868DlChannelReq+0x90>)
 8018582:	6819      	ldr	r1, [r3, #0]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	781b      	ldrb	r3, [r3, #0]
 8018588:	4618      	mov	r0, r3
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	685a      	ldr	r2, [r3, #4]
 801858e:	4603      	mov	r3, r0
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4403      	add	r3, r0
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	440b      	add	r3, r1
 8018598:	3304      	adds	r3, #4
 801859a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801859c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	3710      	adds	r7, #16
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}
 80185a8:	200016f4 	.word	0x200016f4

080185ac <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	4603      	mov	r3, r0
 80185b4:	460a      	mov	r2, r1
 80185b6:	71fb      	strb	r3, [r7, #7]
 80185b8:	4613      	mov	r3, r2
 80185ba:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80185bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	370c      	adds	r7, #12
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bc80      	pop	{r7}
 80185c8:	4770      	bx	lr
	...

080185cc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b09a      	sub	sp, #104	; 0x68
 80185d0:	af02      	add	r7, sp, #8
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
 80185d8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80185e0:	2300      	movs	r3, #0
 80185e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80185e6:	2300      	movs	r3, #0
 80185e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80185ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80185ee:	2200      	movs	r2, #0
 80185f0:	601a      	str	r2, [r3, #0]
 80185f2:	605a      	str	r2, [r3, #4]
 80185f4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80185f6:	230c      	movs	r3, #12
 80185f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80185fc:	2307      	movs	r3, #7
 80185fe:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018600:	4b47      	ldr	r3, [pc, #284]	; (8018720 <RegionEU868NextChannel+0x154>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018608:	2201      	movs	r2, #1
 801860a:	2100      	movs	r1, #0
 801860c:	4618      	mov	r0, r3
 801860e:	f7fe fa95 	bl	8016b3c <RegionCommonCountChannels>
 8018612:	4603      	mov	r3, r0
 8018614:	2b00      	cmp	r3, #0
 8018616:	d10a      	bne.n	801862e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018618:	4b41      	ldr	r3, [pc, #260]	; (8018720 <RegionEU868NextChannel+0x154>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8018620:	4b3f      	ldr	r3, [pc, #252]	; (8018720 <RegionEU868NextChannel+0x154>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	f042 0207 	orr.w	r2, r2, #7
 8018628:	b292      	uxth	r2, r2
 801862a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	7a5b      	ldrb	r3, [r3, #9]
 8018632:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801863a:	b2db      	uxtb	r3, r3
 801863c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801863e:	4b38      	ldr	r3, [pc, #224]	; (8018720 <RegionEU868NextChannel+0x154>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018646:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018648:	4b35      	ldr	r3, [pc, #212]	; (8018720 <RegionEU868NextChannel+0x154>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801864e:	4b35      	ldr	r3, [pc, #212]	; (8018724 <RegionEU868NextChannel+0x158>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018654:	2310      	movs	r3, #16
 8018656:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018658:	f107 0312 	add.w	r3, r7, #18
 801865c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	7a9b      	ldrb	r3, [r3, #10]
 801866e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018672:	2306      	movs	r3, #6
 8018674:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018678:	68fa      	ldr	r2, [r7, #12]
 801867a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801867e:	320c      	adds	r2, #12
 8018680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018684:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	7d1b      	ldrb	r3, [r3, #20]
 801868c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	8adb      	ldrh	r3, [r3, #22]
 801869a:	4619      	mov	r1, r3
 801869c:	4610      	mov	r0, r2
 801869e:	f7fe fff7 	bl	8017690 <GetTimeOnAir>
 80186a2:	4603      	mov	r3, r0
 80186a4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80186a6:	f107 0314 	add.w	r3, r7, #20
 80186aa:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80186ac:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80186b0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80186b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	9301      	str	r3, [sp, #4]
 80186bc:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80186c0:	9300      	str	r3, [sp, #0]
 80186c2:	460b      	mov	r3, r1
 80186c4:	6839      	ldr	r1, [r7, #0]
 80186c6:	f7fe fe50 	bl	801736a <RegionCommonIdentifyChannels>
 80186ca:	4603      	mov	r3, r0
 80186cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80186d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d10e      	bne.n	80186f6 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80186d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80186dc:	3b01      	subs	r3, #1
 80186de:	4619      	mov	r1, r3
 80186e0:	2000      	movs	r0, #0
 80186e2:	f000 f985 	bl	80189f0 <randr>
 80186e6:	4603      	mov	r3, r0
 80186e8:	3360      	adds	r3, #96	; 0x60
 80186ea:	443b      	add	r3, r7
 80186ec:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80186f0:	68bb      	ldr	r3, [r7, #8]
 80186f2:	701a      	strb	r2, [r3, #0]
 80186f4:	e00e      	b.n	8018714 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80186f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80186fa:	2b0c      	cmp	r3, #12
 80186fc:	d10a      	bne.n	8018714 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80186fe:	4b08      	ldr	r3, [pc, #32]	; (8018720 <RegionEU868NextChannel+0x154>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8018706:	4b06      	ldr	r3, [pc, #24]	; (8018720 <RegionEU868NextChannel+0x154>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	f042 0207 	orr.w	r2, r2, #7
 801870e:	b292      	uxth	r2, r2
 8018710:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8018714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018718:	4618      	mov	r0, r3
 801871a:	3760      	adds	r7, #96	; 0x60
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}
 8018720:	200016f4 	.word	0x200016f4
 8018724:	200016f0 	.word	0x200016f0

08018728 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b084      	sub	sp, #16
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018730:	2300      	movs	r3, #0
 8018732:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018734:	2300      	movs	r3, #0
 8018736:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018738:	2300      	movs	r3, #0
 801873a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	791b      	ldrb	r3, [r3, #4]
 8018740:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018742:	7b7b      	ldrb	r3, [r7, #13]
 8018744:	2b02      	cmp	r3, #2
 8018746:	d801      	bhi.n	801874c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018748:	2306      	movs	r3, #6
 801874a:	e089      	b.n	8018860 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801874c:	7b7b      	ldrb	r3, [r7, #13]
 801874e:	2b0f      	cmp	r3, #15
 8018750:	d901      	bls.n	8018756 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018752:	2303      	movs	r3, #3
 8018754:	e084      	b.n	8018860 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	7a1b      	ldrb	r3, [r3, #8]
 801875c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018760:	b25b      	sxtb	r3, r3
 8018762:	2207      	movs	r2, #7
 8018764:	2100      	movs	r1, #0
 8018766:	4618      	mov	r0, r3
 8018768:	f7fe f997 	bl	8016a9a <RegionCommonValueInRange>
 801876c:	4603      	mov	r3, r0
 801876e:	2b00      	cmp	r3, #0
 8018770:	d101      	bne.n	8018776 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018772:	2301      	movs	r3, #1
 8018774:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	7a1b      	ldrb	r3, [r3, #8]
 801877c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018780:	b25b      	sxtb	r3, r3
 8018782:	2207      	movs	r2, #7
 8018784:	2100      	movs	r1, #0
 8018786:	4618      	mov	r0, r3
 8018788:	f7fe f987 	bl	8016a9a <RegionCommonValueInRange>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	d101      	bne.n	8018796 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018792:	2301      	movs	r3, #1
 8018794:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	7a1b      	ldrb	r3, [r3, #8]
 801879c:	f343 0303 	sbfx	r3, r3, #0, #4
 80187a0:	b25a      	sxtb	r2, r3
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	7a1b      	ldrb	r3, [r3, #8]
 80187a8:	f343 1303 	sbfx	r3, r3, #4, #4
 80187ac:	b25b      	sxtb	r3, r3
 80187ae:	429a      	cmp	r2, r3
 80187b0:	dd01      	ble.n	80187b6 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80187b2:	2301      	movs	r3, #1
 80187b4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80187b6:	7bbb      	ldrb	r3, [r7, #14]
 80187b8:	f083 0301 	eor.w	r3, r3, #1
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d010      	beq.n	80187e4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	f107 020c 	add.w	r2, r7, #12
 80187cc:	4611      	mov	r1, r2
 80187ce:	4618      	mov	r0, r3
 80187d0:	f7fe fee8 	bl	80175a4 <VerifyRfFreq>
 80187d4:	4603      	mov	r3, r0
 80187d6:	f083 0301 	eor.w	r3, r3, #1
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d001      	beq.n	80187e4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80187e0:	2301      	movs	r3, #1
 80187e2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80187e4:	7bfb      	ldrb	r3, [r7, #15]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d004      	beq.n	80187f4 <RegionEU868ChannelAdd+0xcc>
 80187ea:	7bbb      	ldrb	r3, [r7, #14]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d001      	beq.n	80187f4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80187f0:	2306      	movs	r3, #6
 80187f2:	e035      	b.n	8018860 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80187f4:	7bfb      	ldrb	r3, [r7, #15]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d001      	beq.n	80187fe <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80187fa:	2305      	movs	r3, #5
 80187fc:	e030      	b.n	8018860 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80187fe:	7bbb      	ldrb	r3, [r7, #14]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018804:	2304      	movs	r3, #4
 8018806:	e02b      	b.n	8018860 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018808:	4b17      	ldr	r3, [pc, #92]	; (8018868 <RegionEU868ChannelAdd+0x140>)
 801880a:	6819      	ldr	r1, [r3, #0]
 801880c:	7b7a      	ldrb	r2, [r7, #13]
 801880e:	4613      	mov	r3, r2
 8018810:	005b      	lsls	r3, r3, #1
 8018812:	4413      	add	r3, r2
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	18c8      	adds	r0, r1, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	220c      	movs	r2, #12
 801881e:	4619      	mov	r1, r3
 8018820:	f000 f8fd 	bl	8018a1e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8018824:	4b10      	ldr	r3, [pc, #64]	; (8018868 <RegionEU868ChannelAdd+0x140>)
 8018826:	6819      	ldr	r1, [r3, #0]
 8018828:	7b7a      	ldrb	r2, [r7, #13]
 801882a:	7b38      	ldrb	r0, [r7, #12]
 801882c:	4613      	mov	r3, r2
 801882e:	005b      	lsls	r3, r3, #1
 8018830:	4413      	add	r3, r2
 8018832:	009b      	lsls	r3, r3, #2
 8018834:	440b      	add	r3, r1
 8018836:	3309      	adds	r3, #9
 8018838:	4602      	mov	r2, r0
 801883a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801883c:	4b0a      	ldr	r3, [pc, #40]	; (8018868 <RegionEU868ChannelAdd+0x140>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8018844:	b21a      	sxth	r2, r3
 8018846:	7b7b      	ldrb	r3, [r7, #13]
 8018848:	2101      	movs	r1, #1
 801884a:	fa01 f303 	lsl.w	r3, r1, r3
 801884e:	b21b      	sxth	r3, r3
 8018850:	4313      	orrs	r3, r2
 8018852:	b21a      	sxth	r2, r3
 8018854:	4b04      	ldr	r3, [pc, #16]	; (8018868 <RegionEU868ChannelAdd+0x140>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	b292      	uxth	r2, r2
 801885a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801885e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018860:	4618      	mov	r0, r3
 8018862:	3710      	adds	r7, #16
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	200016f4 	.word	0x200016f4

0801886c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b086      	sub	sp, #24
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801887a:	7dfb      	ldrb	r3, [r7, #23]
 801887c:	2b02      	cmp	r3, #2
 801887e:	d801      	bhi.n	8018884 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018880:	2300      	movs	r3, #0
 8018882:	e016      	b.n	80188b2 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018884:	4b0d      	ldr	r3, [pc, #52]	; (80188bc <RegionEU868ChannelsRemove+0x50>)
 8018886:	6819      	ldr	r1, [r3, #0]
 8018888:	7dfa      	ldrb	r2, [r7, #23]
 801888a:	4613      	mov	r3, r2
 801888c:	005b      	lsls	r3, r3, #1
 801888e:	4413      	add	r3, r2
 8018890:	009b      	lsls	r3, r3, #2
 8018892:	440b      	add	r3, r1
 8018894:	461a      	mov	r2, r3
 8018896:	2300      	movs	r3, #0
 8018898:	6013      	str	r3, [r2, #0]
 801889a:	6053      	str	r3, [r2, #4]
 801889c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801889e:	4b07      	ldr	r3, [pc, #28]	; (80188bc <RegionEU868ChannelsRemove+0x50>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80188a6:	7df9      	ldrb	r1, [r7, #23]
 80188a8:	2210      	movs	r2, #16
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7fe f912 	bl	8016ad4 <RegionCommonChanDisable>
 80188b0:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3718      	adds	r7, #24
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
 80188ba:	bf00      	nop
 80188bc:	200016f4 	.word	0x200016f4

080188c0 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80188c0:	b590      	push	{r4, r7, lr}
 80188c2:	b085      	sub	sp, #20
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80188ce:	4b20      	ldr	r3, [pc, #128]	; (8018950 <RegionEU868SetContinuousWave+0x90>)
 80188d0:	681a      	ldr	r2, [r3, #0]
 80188d2:	4b20      	ldr	r3, [pc, #128]	; (8018954 <RegionEU868SetContinuousWave+0x94>)
 80188d4:	6819      	ldr	r1, [r3, #0]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	461c      	mov	r4, r3
 80188dc:	4623      	mov	r3, r4
 80188de:	005b      	lsls	r3, r3, #1
 80188e0:	4423      	add	r3, r4
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	440b      	add	r3, r1
 80188e6:	3309      	adds	r3, #9
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	4619      	mov	r1, r3
 80188ec:	460b      	mov	r3, r1
 80188ee:	005b      	lsls	r3, r3, #1
 80188f0:	440b      	add	r3, r1
 80188f2:	00db      	lsls	r3, r3, #3
 80188f4:	4413      	add	r3, r2
 80188f6:	3302      	adds	r3, #2
 80188f8:	f993 3000 	ldrsb.w	r3, [r3]
 80188fc:	4619      	mov	r1, r3
 80188fe:	f7fe fdd4 	bl	80174aa <RegionCommonLimitTxPower>
 8018902:	4603      	mov	r3, r0
 8018904:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018906:	2300      	movs	r3, #0
 8018908:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801890a:	4b12      	ldr	r3, [pc, #72]	; (8018954 <RegionEU868SetContinuousWave+0x94>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	781b      	ldrb	r3, [r3, #0]
 8018912:	4619      	mov	r1, r3
 8018914:	460b      	mov	r3, r1
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	440b      	add	r3, r1
 801891a:	009b      	lsls	r3, r3, #2
 801891c:	4413      	add	r3, r2
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6859      	ldr	r1, [r3, #4]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	689a      	ldr	r2, [r3, #8]
 801892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801892e:	4618      	mov	r0, r3
 8018930:	f7fe fc2c 	bl	801718c <RegionCommonComputeTxPower>
 8018934:	4603      	mov	r3, r0
 8018936:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018938:	4b07      	ldr	r3, [pc, #28]	; (8018958 <RegionEU868SetContinuousWave+0x98>)
 801893a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	8992      	ldrh	r2, [r2, #12]
 8018940:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018944:	68b8      	ldr	r0, [r7, #8]
 8018946:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8018948:	bf00      	nop
 801894a:	3714      	adds	r7, #20
 801894c:	46bd      	mov	sp, r7
 801894e:	bd90      	pop	{r4, r7, pc}
 8018950:	200016f0 	.word	0x200016f0
 8018954:	200016f4 	.word	0x200016f4
 8018958:	0801e604 	.word	0x0801e604

0801895c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801895c:	b480      	push	{r7}
 801895e:	b085      	sub	sp, #20
 8018960:	af00      	add	r7, sp, #0
 8018962:	4603      	mov	r3, r0
 8018964:	71fb      	strb	r3, [r7, #7]
 8018966:	460b      	mov	r3, r1
 8018968:	71bb      	strb	r3, [r7, #6]
 801896a:	4613      	mov	r3, r2
 801896c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801896e:	79ba      	ldrb	r2, [r7, #6]
 8018970:	797b      	ldrb	r3, [r7, #5]
 8018972:	1ad3      	subs	r3, r2, r3
 8018974:	b2db      	uxtb	r3, r3
 8018976:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801897c:	2b00      	cmp	r3, #0
 801897e:	da01      	bge.n	8018984 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018980:	2300      	movs	r3, #0
 8018982:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018984:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018986:	4618      	mov	r0, r3
 8018988:	3714      	adds	r7, #20
 801898a:	46bd      	mov	sp, r7
 801898c:	bc80      	pop	{r7}
 801898e:	4770      	bx	lr

08018990 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018990:	b480      	push	{r7}
 8018992:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018994:	4b0d      	ldr	r3, [pc, #52]	; (80189cc <rand1+0x3c>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	4a0d      	ldr	r2, [pc, #52]	; (80189d0 <rand1+0x40>)
 801899a:	fb02 f303 	mul.w	r3, r2, r3
 801899e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80189a2:	3339      	adds	r3, #57	; 0x39
 80189a4:	4a09      	ldr	r2, [pc, #36]	; (80189cc <rand1+0x3c>)
 80189a6:	6013      	str	r3, [r2, #0]
 80189a8:	4b08      	ldr	r3, [pc, #32]	; (80189cc <rand1+0x3c>)
 80189aa:	681a      	ldr	r2, [r3, #0]
 80189ac:	2303      	movs	r3, #3
 80189ae:	fba3 1302 	umull	r1, r3, r3, r2
 80189b2:	1ad1      	subs	r1, r2, r3
 80189b4:	0849      	lsrs	r1, r1, #1
 80189b6:	440b      	add	r3, r1
 80189b8:	0f99      	lsrs	r1, r3, #30
 80189ba:	460b      	mov	r3, r1
 80189bc:	07db      	lsls	r3, r3, #31
 80189be:	1a5b      	subs	r3, r3, r1
 80189c0:	1ad1      	subs	r1, r2, r3
 80189c2:	460b      	mov	r3, r1
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bc80      	pop	{r7}
 80189ca:	4770      	bx	lr
 80189cc:	20000148 	.word	0x20000148
 80189d0:	41c64e6d 	.word	0x41c64e6d

080189d4 <srand1>:

void srand1( uint32_t seed )
{
 80189d4:	b480      	push	{r7}
 80189d6:	b083      	sub	sp, #12
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
    next = seed;
 80189dc:	4a03      	ldr	r2, [pc, #12]	; (80189ec <srand1+0x18>)
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6013      	str	r3, [r2, #0]
}
 80189e2:	bf00      	nop
 80189e4:	370c      	adds	r7, #12
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bc80      	pop	{r7}
 80189ea:	4770      	bx	lr
 80189ec:	20000148 	.word	0x20000148

080189f0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b082      	sub	sp, #8
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
 80189f8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80189fa:	f7ff ffc9 	bl	8018990 <rand1>
 80189fe:	4602      	mov	r2, r0
 8018a00:	6839      	ldr	r1, [r7, #0]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	1acb      	subs	r3, r1, r3
 8018a06:	3301      	adds	r3, #1
 8018a08:	fb92 f1f3 	sdiv	r1, r2, r3
 8018a0c:	fb01 f303 	mul.w	r3, r1, r3
 8018a10:	1ad2      	subs	r2, r2, r3
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	4413      	add	r3, r2
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3708      	adds	r7, #8
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}

08018a1e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018a1e:	b480      	push	{r7}
 8018a20:	b085      	sub	sp, #20
 8018a22:	af00      	add	r7, sp, #0
 8018a24:	60f8      	str	r0, [r7, #12]
 8018a26:	60b9      	str	r1, [r7, #8]
 8018a28:	4613      	mov	r3, r2
 8018a2a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018a2c:	e007      	b.n	8018a3e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018a2e:	68ba      	ldr	r2, [r7, #8]
 8018a30:	1c53      	adds	r3, r2, #1
 8018a32:	60bb      	str	r3, [r7, #8]
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	1c59      	adds	r1, r3, #1
 8018a38:	60f9      	str	r1, [r7, #12]
 8018a3a:	7812      	ldrb	r2, [r2, #0]
 8018a3c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a3e:	88fb      	ldrh	r3, [r7, #6]
 8018a40:	1e5a      	subs	r2, r3, #1
 8018a42:	80fa      	strh	r2, [r7, #6]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d1f2      	bne.n	8018a2e <memcpy1+0x10>
    }
}
 8018a48:	bf00      	nop
 8018a4a:	bf00      	nop
 8018a4c:	3714      	adds	r7, #20
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bc80      	pop	{r7}
 8018a52:	4770      	bx	lr

08018a54 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018a54:	b480      	push	{r7}
 8018a56:	b085      	sub	sp, #20
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	60f8      	str	r0, [r7, #12]
 8018a5c:	60b9      	str	r1, [r7, #8]
 8018a5e:	4613      	mov	r3, r2
 8018a60:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018a62:	88fb      	ldrh	r3, [r7, #6]
 8018a64:	3b01      	subs	r3, #1
 8018a66:	68fa      	ldr	r2, [r7, #12]
 8018a68:	4413      	add	r3, r2
 8018a6a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018a6c:	e007      	b.n	8018a7e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018a6e:	68ba      	ldr	r2, [r7, #8]
 8018a70:	1c53      	adds	r3, r2, #1
 8018a72:	60bb      	str	r3, [r7, #8]
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	1e59      	subs	r1, r3, #1
 8018a78:	60f9      	str	r1, [r7, #12]
 8018a7a:	7812      	ldrb	r2, [r2, #0]
 8018a7c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a7e:	88fb      	ldrh	r3, [r7, #6]
 8018a80:	1e5a      	subs	r2, r3, #1
 8018a82:	80fa      	strh	r2, [r7, #6]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d1f2      	bne.n	8018a6e <memcpyr+0x1a>
    }
}
 8018a88:	bf00      	nop
 8018a8a:	bf00      	nop
 8018a8c:	3714      	adds	r7, #20
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bc80      	pop	{r7}
 8018a92:	4770      	bx	lr

08018a94 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018a94:	b480      	push	{r7}
 8018a96:	b083      	sub	sp, #12
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	70fb      	strb	r3, [r7, #3]
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018aa4:	e004      	b.n	8018ab0 <memset1+0x1c>
    {
        *dst++ = value;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	1c5a      	adds	r2, r3, #1
 8018aaa:	607a      	str	r2, [r7, #4]
 8018aac:	78fa      	ldrb	r2, [r7, #3]
 8018aae:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ab0:	883b      	ldrh	r3, [r7, #0]
 8018ab2:	1e5a      	subs	r2, r3, #1
 8018ab4:	803a      	strh	r2, [r7, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d1f5      	bne.n	8018aa6 <memset1+0x12>
    }
}
 8018aba:	bf00      	nop
 8018abc:	bf00      	nop
 8018abe:	370c      	adds	r7, #12
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bc80      	pop	{r7}
 8018ac4:	4770      	bx	lr
	...

08018ac8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018ac8:	b480      	push	{r7}
 8018aca:	b085      	sub	sp, #20
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
 8018ad0:	460b      	mov	r3, r1
 8018ad2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ad8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d101      	bne.n	8018ae4 <Crc32+0x1c>
    {
        return 0;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	e026      	b.n	8018b32 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	817b      	strh	r3, [r7, #10]
 8018ae8:	e01d      	b.n	8018b26 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018aea:	897b      	ldrh	r3, [r7, #10]
 8018aec:	687a      	ldr	r2, [r7, #4]
 8018aee:	4413      	add	r3, r2
 8018af0:	781b      	ldrb	r3, [r3, #0]
 8018af2:	461a      	mov	r2, r3
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	4053      	eors	r3, r2
 8018af8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018afa:	2300      	movs	r3, #0
 8018afc:	813b      	strh	r3, [r7, #8]
 8018afe:	e00c      	b.n	8018b1a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	085a      	lsrs	r2, r3, #1
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	f003 0301 	and.w	r3, r3, #1
 8018b0a:	425b      	negs	r3, r3
 8018b0c:	490b      	ldr	r1, [pc, #44]	; (8018b3c <Crc32+0x74>)
 8018b0e:	400b      	ands	r3, r1
 8018b10:	4053      	eors	r3, r2
 8018b12:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018b14:	893b      	ldrh	r3, [r7, #8]
 8018b16:	3301      	adds	r3, #1
 8018b18:	813b      	strh	r3, [r7, #8]
 8018b1a:	893b      	ldrh	r3, [r7, #8]
 8018b1c:	2b07      	cmp	r3, #7
 8018b1e:	d9ef      	bls.n	8018b00 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018b20:	897b      	ldrh	r3, [r7, #10]
 8018b22:	3301      	adds	r3, #1
 8018b24:	817b      	strh	r3, [r7, #10]
 8018b26:	897a      	ldrh	r2, [r7, #10]
 8018b28:	887b      	ldrh	r3, [r7, #2]
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d3dd      	bcc.n	8018aea <Crc32+0x22>
        }
    }

    return ~crc;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	43db      	mvns	r3, r3
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	3714      	adds	r7, #20
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bc80      	pop	{r7}
 8018b3a:	4770      	bx	lr
 8018b3c:	edb88320 	.word	0xedb88320

08018b40 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af02      	add	r7, sp, #8
 8018b46:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018b48:	4a24      	ldr	r2, [pc, #144]	; (8018bdc <RadioInit+0x9c>)
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018b4e:	4b24      	ldr	r3, [pc, #144]	; (8018be0 <RadioInit+0xa0>)
 8018b50:	2200      	movs	r2, #0
 8018b52:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018b54:	4b22      	ldr	r3, [pc, #136]	; (8018be0 <RadioInit+0xa0>)
 8018b56:	2200      	movs	r2, #0
 8018b58:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018b5a:	4b21      	ldr	r3, [pc, #132]	; (8018be0 <RadioInit+0xa0>)
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018b60:	4b1f      	ldr	r3, [pc, #124]	; (8018be0 <RadioInit+0xa0>)
 8018b62:	2200      	movs	r2, #0
 8018b64:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018b66:	481f      	ldr	r0, [pc, #124]	; (8018be4 <RadioInit+0xa4>)
 8018b68:	f001 ffc2 	bl	801aaf0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018b6c:	4b1c      	ldr	r3, [pc, #112]	; (8018be0 <RadioInit+0xa0>)
 8018b6e:	2200      	movs	r2, #0
 8018b70:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018b72:	4b1b      	ldr	r3, [pc, #108]	; (8018be0 <RadioInit+0xa0>)
 8018b74:	2200      	movs	r2, #0
 8018b76:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018b78:	f002 fa56 	bl	801b028 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018b7c:	2100      	movs	r1, #0
 8018b7e:	2000      	movs	r0, #0
 8018b80:	f002 fe22 	bl	801b7c8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018b84:	2204      	movs	r2, #4
 8018b86:	2100      	movs	r1, #0
 8018b88:	2001      	movs	r0, #1
 8018b8a:	f002 fbdf 	bl	801b34c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018b8e:	2300      	movs	r3, #0
 8018b90:	2200      	movs	r2, #0
 8018b92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018b9a:	f002 fb0f 	bl	801b1bc <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8018b9e:	f000 fe99 	bl	80198d4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	9300      	str	r3, [sp, #0]
 8018ba6:	4b10      	ldr	r3, [pc, #64]	; (8018be8 <RadioInit+0xa8>)
 8018ba8:	2200      	movs	r2, #0
 8018baa:	f04f 31ff 	mov.w	r1, #4294967295
 8018bae:	480f      	ldr	r0, [pc, #60]	; (8018bec <RadioInit+0xac>)
 8018bb0:	f004 f82c 	bl	801cc0c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	9300      	str	r3, [sp, #0]
 8018bb8:	4b0d      	ldr	r3, [pc, #52]	; (8018bf0 <RadioInit+0xb0>)
 8018bba:	2200      	movs	r2, #0
 8018bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8018bc0:	480c      	ldr	r0, [pc, #48]	; (8018bf4 <RadioInit+0xb4>)
 8018bc2:	f004 f823 	bl	801cc0c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018bc6:	4809      	ldr	r0, [pc, #36]	; (8018bec <RadioInit+0xac>)
 8018bc8:	f004 f8c4 	bl	801cd54 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018bcc:	4809      	ldr	r0, [pc, #36]	; (8018bf4 <RadioInit+0xb4>)
 8018bce:	f004 f8c1 	bl	801cd54 <UTIL_TIMER_Stop>
}
 8018bd2:	bf00      	nop
 8018bd4:	3708      	adds	r7, #8
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	200017f8 	.word	0x200017f8
 8018be0:	200017fc 	.word	0x200017fc
 8018be4:	08019ccd 	.word	0x08019ccd
 8018be8:	08019c55 	.word	0x08019c55
 8018bec:	20001858 	.word	0x20001858
 8018bf0:	08019c69 	.word	0x08019c69
 8018bf4:	20001870 	.word	0x20001870

08018bf8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018bfc:	f001 ffc0 	bl	801ab80 <SUBGRF_GetOperatingMode>
 8018c00:	4603      	mov	r3, r0
 8018c02:	2b07      	cmp	r3, #7
 8018c04:	d00a      	beq.n	8018c1c <RadioGetStatus+0x24>
 8018c06:	2b07      	cmp	r3, #7
 8018c08:	dc0a      	bgt.n	8018c20 <RadioGetStatus+0x28>
 8018c0a:	2b04      	cmp	r3, #4
 8018c0c:	d002      	beq.n	8018c14 <RadioGetStatus+0x1c>
 8018c0e:	2b05      	cmp	r3, #5
 8018c10:	d002      	beq.n	8018c18 <RadioGetStatus+0x20>
 8018c12:	e005      	b.n	8018c20 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018c14:	2302      	movs	r3, #2
 8018c16:	e004      	b.n	8018c22 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018c18:	2301      	movs	r3, #1
 8018c1a:	e002      	b.n	8018c22 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018c1c:	2303      	movs	r3, #3
 8018c1e:	e000      	b.n	8018c22 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018c20:	2300      	movs	r3, #0
    }
}
 8018c22:	4618      	mov	r0, r3
 8018c24:	bd80      	pop	{r7, pc}
	...

08018c28 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	4603      	mov	r3, r0
 8018c30:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018c32:	4a2a      	ldr	r2, [pc, #168]	; (8018cdc <RadioSetModem+0xb4>)
 8018c34:	79fb      	ldrb	r3, [r7, #7]
 8018c36:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	f003 f997 	bl	801bf6e <RFW_SetRadioModem>
    switch( modem )
 8018c40:	79fb      	ldrb	r3, [r7, #7]
 8018c42:	2b05      	cmp	r3, #5
 8018c44:	d80e      	bhi.n	8018c64 <RadioSetModem+0x3c>
 8018c46:	a201      	add	r2, pc, #4	; (adr r2, 8018c4c <RadioSetModem+0x24>)
 8018c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c4c:	08018c73 	.word	0x08018c73
 8018c50:	08018c81 	.word	0x08018c81
 8018c54:	08018c65 	.word	0x08018c65
 8018c58:	08018ca7 	.word	0x08018ca7
 8018c5c:	08018cb5 	.word	0x08018cb5
 8018c60:	08018cc3 	.word	0x08018cc3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018c64:	2003      	movs	r0, #3
 8018c66:	f002 fb4b 	bl	801b300 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018c6a:	4b1c      	ldr	r3, [pc, #112]	; (8018cdc <RadioSetModem+0xb4>)
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	735a      	strb	r2, [r3, #13]
        break;
 8018c70:	e02f      	b.n	8018cd2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018c72:	2000      	movs	r0, #0
 8018c74:	f002 fb44 	bl	801b300 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018c78:	4b18      	ldr	r3, [pc, #96]	; (8018cdc <RadioSetModem+0xb4>)
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	735a      	strb	r2, [r3, #13]
        break;
 8018c7e:	e028      	b.n	8018cd2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018c80:	2001      	movs	r0, #1
 8018c82:	f002 fb3d 	bl	801b300 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018c86:	4b15      	ldr	r3, [pc, #84]	; (8018cdc <RadioSetModem+0xb4>)
 8018c88:	7b5a      	ldrb	r2, [r3, #13]
 8018c8a:	4b14      	ldr	r3, [pc, #80]	; (8018cdc <RadioSetModem+0xb4>)
 8018c8c:	7b1b      	ldrb	r3, [r3, #12]
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d01e      	beq.n	8018cd0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018c92:	4b12      	ldr	r3, [pc, #72]	; (8018cdc <RadioSetModem+0xb4>)
 8018c94:	7b1a      	ldrb	r2, [r3, #12]
 8018c96:	4b11      	ldr	r3, [pc, #68]	; (8018cdc <RadioSetModem+0xb4>)
 8018c98:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018c9a:	4b10      	ldr	r3, [pc, #64]	; (8018cdc <RadioSetModem+0xb4>)
 8018c9c:	7b5b      	ldrb	r3, [r3, #13]
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f000 ffa2 	bl	8019be8 <RadioSetPublicNetwork>
        }
        break;
 8018ca4:	e014      	b.n	8018cd0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018ca6:	2002      	movs	r0, #2
 8018ca8:	f002 fb2a 	bl	801b300 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018cac:	4b0b      	ldr	r3, [pc, #44]	; (8018cdc <RadioSetModem+0xb4>)
 8018cae:	2200      	movs	r2, #0
 8018cb0:	735a      	strb	r2, [r3, #13]
        break;
 8018cb2:	e00e      	b.n	8018cd2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018cb4:	2002      	movs	r0, #2
 8018cb6:	f002 fb23 	bl	801b300 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018cba:	4b08      	ldr	r3, [pc, #32]	; (8018cdc <RadioSetModem+0xb4>)
 8018cbc:	2200      	movs	r2, #0
 8018cbe:	735a      	strb	r2, [r3, #13]
        break;
 8018cc0:	e007      	b.n	8018cd2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	f002 fb1c 	bl	801b300 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018cc8:	4b04      	ldr	r3, [pc, #16]	; (8018cdc <RadioSetModem+0xb4>)
 8018cca:	2200      	movs	r2, #0
 8018ccc:	735a      	strb	r2, [r3, #13]
        break;
 8018cce:	e000      	b.n	8018cd2 <RadioSetModem+0xaa>
        break;
 8018cd0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018cd2:	bf00      	nop
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	200017fc 	.word	0x200017fc

08018ce0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f002 fac3 	bl	801b274 <SUBGRF_SetRfFrequency>
}
 8018cee:	bf00      	nop
 8018cf0:	3708      	adds	r7, #8
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bd80      	pop	{r7, pc}

08018cf6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018cf6:	b580      	push	{r7, lr}
 8018cf8:	b090      	sub	sp, #64	; 0x40
 8018cfa:	af0a      	add	r7, sp, #40	; 0x28
 8018cfc:	60f8      	str	r0, [r7, #12]
 8018cfe:	60b9      	str	r1, [r7, #8]
 8018d00:	603b      	str	r3, [r7, #0]
 8018d02:	4613      	mov	r3, r2
 8018d04:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018d06:	2301      	movs	r3, #1
 8018d08:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018d12:	f000 fdf2 	bl	80198fa <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018d16:	2000      	movs	r0, #0
 8018d18:	f7ff ff86 	bl	8018c28 <RadioSetModem>

    RadioSetChannel( freq );
 8018d1c:	68f8      	ldr	r0, [r7, #12]
 8018d1e:	f7ff ffdf 	bl	8018ce0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018d22:	2301      	movs	r3, #1
 8018d24:	9309      	str	r3, [sp, #36]	; 0x24
 8018d26:	2300      	movs	r3, #0
 8018d28:	9308      	str	r3, [sp, #32]
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	9307      	str	r3, [sp, #28]
 8018d2e:	2300      	movs	r3, #0
 8018d30:	9306      	str	r3, [sp, #24]
 8018d32:	2300      	movs	r3, #0
 8018d34:	9305      	str	r3, [sp, #20]
 8018d36:	2300      	movs	r3, #0
 8018d38:	9304      	str	r3, [sp, #16]
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	9303      	str	r3, [sp, #12]
 8018d3e:	2300      	movs	r3, #0
 8018d40:	9302      	str	r3, [sp, #8]
 8018d42:	2303      	movs	r3, #3
 8018d44:	9301      	str	r3, [sp, #4]
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	9300      	str	r3, [sp, #0]
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018d50:	68b9      	ldr	r1, [r7, #8]
 8018d52:	2000      	movs	r0, #0
 8018d54:	f000 f83c 	bl	8018dd0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018d58:	2000      	movs	r0, #0
 8018d5a:	f000 fdd5 	bl	8019908 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018d5e:	f000 ff71 	bl	8019c44 <RadioGetWakeupTime>
 8018d62:	4603      	mov	r3, r0
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7e9 fd4f 	bl	8002808 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018d6a:	f004 f90d 	bl	801cf88 <UTIL_TIMER_GetCurrentTime>
 8018d6e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018d70:	e00d      	b.n	8018d8e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018d72:	2000      	movs	r0, #0
 8018d74:	f000 feb6 	bl	8019ae4 <RadioRssi>
 8018d78:	4603      	mov	r3, r0
 8018d7a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018d7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d84:	429a      	cmp	r2, r3
 8018d86:	dd02      	ble.n	8018d8e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8018d8c:	e006      	b.n	8018d9c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018d8e:	6938      	ldr	r0, [r7, #16]
 8018d90:	f004 f90c 	bl	801cfac <UTIL_TIMER_GetElapsedTime>
 8018d94:	4602      	mov	r2, r0
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d8ea      	bhi.n	8018d72 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8018d9c:	f000 fdad 	bl	80198fa <RadioStandby>

    return status;
 8018da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3718      	adds	r7, #24
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}

08018daa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018daa:	b580      	push	{r7, lr}
 8018dac:	b082      	sub	sp, #8
 8018dae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018db0:	2300      	movs	r3, #0
 8018db2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018db4:	2300      	movs	r3, #0
 8018db6:	2200      	movs	r2, #0
 8018db8:	2100      	movs	r1, #0
 8018dba:	2000      	movs	r0, #0
 8018dbc:	f002 f9fe 	bl	801b1bc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018dc0:	f001 ffaf 	bl	801ad22 <SUBGRF_GetRandom>
 8018dc4:	6078      	str	r0, [r7, #4]

    return rnd;
 8018dc6:	687b      	ldr	r3, [r7, #4]
}
 8018dc8:	4618      	mov	r0, r3
 8018dca:	3708      	adds	r7, #8
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b08a      	sub	sp, #40	; 0x28
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	60b9      	str	r1, [r7, #8]
 8018dd8:	607a      	str	r2, [r7, #4]
 8018dda:	461a      	mov	r2, r3
 8018ddc:	4603      	mov	r3, r0
 8018dde:	73fb      	strb	r3, [r7, #15]
 8018de0:	4613      	mov	r3, r2
 8018de2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018de4:	4ab9      	ldr	r2, [pc, #740]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018de6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018dea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8018dec:	f003 f87d 	bl	801beea <RFW_DeInit>
    if( rxContinuous == true )
 8018df0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d001      	beq.n	8018dfc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8018dfc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d004      	beq.n	8018e0e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018e04:	4ab2      	ldr	r2, [pc, #712]	; (80190d0 <RadioSetRxConfig+0x300>)
 8018e06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8018e0a:	7013      	strb	r3, [r2, #0]
 8018e0c:	e002      	b.n	8018e14 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018e0e:	4bb0      	ldr	r3, [pc, #704]	; (80190d0 <RadioSetRxConfig+0x300>)
 8018e10:	22ff      	movs	r2, #255	; 0xff
 8018e12:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018e14:	7bfb      	ldrb	r3, [r7, #15]
 8018e16:	2b05      	cmp	r3, #5
 8018e18:	d009      	beq.n	8018e2e <RadioSetRxConfig+0x5e>
 8018e1a:	2b05      	cmp	r3, #5
 8018e1c:	f300 81d7 	bgt.w	80191ce <RadioSetRxConfig+0x3fe>
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	f000 80bf 	beq.w	8018fa4 <RadioSetRxConfig+0x1d4>
 8018e26:	2b01      	cmp	r3, #1
 8018e28:	f000 8124 	beq.w	8019074 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018e2c:	e1cf      	b.n	80191ce <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018e2e:	2001      	movs	r0, #1
 8018e30:	f002 f8bc 	bl	801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018e34:	4ba5      	ldr	r3, [pc, #660]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e36:	2200      	movs	r2, #0
 8018e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018e3c:	4aa3      	ldr	r2, [pc, #652]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018e42:	4ba2      	ldr	r3, [pc, #648]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e44:	2209      	movs	r2, #9
 8018e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018e4a:	4ba0      	ldr	r3, [pc, #640]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018e50:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018e52:	68b8      	ldr	r0, [r7, #8]
 8018e54:	f002 ff7c 	bl	801bd50 <SUBGRF_GetFskBandwidthRegValue>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	4b9b      	ldr	r3, [pc, #620]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018e62:	4b9a      	ldr	r3, [pc, #616]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e64:	2200      	movs	r2, #0
 8018e66:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018e68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e6a:	00db      	lsls	r3, r3, #3
 8018e6c:	b29a      	uxth	r2, r3
 8018e6e:	4b97      	ldr	r3, [pc, #604]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e70:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018e72:	4b96      	ldr	r3, [pc, #600]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e74:	2200      	movs	r2, #0
 8018e76:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018e78:	4b94      	ldr	r3, [pc, #592]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e7a:	2210      	movs	r2, #16
 8018e7c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018e7e:	4b93      	ldr	r3, [pc, #588]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e80:	2200      	movs	r2, #0
 8018e82:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018e84:	4b91      	ldr	r3, [pc, #580]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e86:	2200      	movs	r2, #0
 8018e88:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018e8a:	4b91      	ldr	r3, [pc, #580]	; (80190d0 <RadioSetRxConfig+0x300>)
 8018e8c:	781a      	ldrb	r2, [r3, #0]
 8018e8e:	4b8f      	ldr	r3, [pc, #572]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e90:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018e92:	4b8e      	ldr	r3, [pc, #568]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e94:	2201      	movs	r2, #1
 8018e96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018e98:	4b8c      	ldr	r3, [pc, #560]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018e9e:	2005      	movs	r0, #5
 8018ea0:	f7ff fec2 	bl	8018c28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ea4:	488b      	ldr	r0, [pc, #556]	; (80190d4 <RadioSetRxConfig+0x304>)
 8018ea6:	f002 fb1f 	bl	801b4e8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018eaa:	488b      	ldr	r0, [pc, #556]	; (80190d8 <RadioSetRxConfig+0x308>)
 8018eac:	f002 fbee 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018eb0:	4a8a      	ldr	r2, [pc, #552]	; (80190dc <RadioSetRxConfig+0x30c>)
 8018eb2:	f107 031c 	add.w	r3, r7, #28
 8018eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018eba:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ebe:	f107 031c 	add.w	r3, r7, #28
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f001 feab 	bl	801ac1e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018ec8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018ecc:	f001 fef6 	bl	801acbc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018ed0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018ed4:	f000 fe25 	bl	8019b22 <RadioRead>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ee2:	f023 0310 	bic.w	r3, r3, #16
 8018ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018eee:	4619      	mov	r1, r3
 8018ef0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018ef4:	f000 fe03 	bl	8019afe <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018ef8:	2104      	movs	r1, #4
 8018efa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8018efe:	f000 fdfe 	bl	8019afe <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018f02:	f640 009b 	movw	r0, #2203	; 0x89b
 8018f06:	f000 fe0c 	bl	8019b22 <RadioRead>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f14:	f023 031c 	bic.w	r3, r3, #28
 8018f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f20:	f043 0308 	orr.w	r3, r3, #8
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	4619      	mov	r1, r3
 8018f28:	f640 009b 	movw	r0, #2203	; 0x89b
 8018f2c:	f000 fde7 	bl	8019afe <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018f30:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018f34:	f000 fdf5 	bl	8019b22 <RadioRead>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f42:	f023 0318 	bic.w	r3, r3, #24
 8018f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f4e:	f043 0318 	orr.w	r3, r3, #24
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	4619      	mov	r1, r3
 8018f56:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018f5a:	f000 fdd0 	bl	8019afe <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018f5e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018f62:	f000 fdde 	bl	8019b22 <RadioRead>
 8018f66:	4603      	mov	r3, r0
 8018f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f7c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018f80:	b2db      	uxtb	r3, r3
 8018f82:	4619      	mov	r1, r3
 8018f84:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018f88:	f000 fdb9 	bl	8019afe <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018f8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018f92:	fb02 f303 	mul.w	r3, r2, r3
 8018f96:	461a      	mov	r2, r3
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f9e:	4a4b      	ldr	r2, [pc, #300]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fa0:	6093      	str	r3, [r2, #8]
            break;
 8018fa2:	e115      	b.n	80191d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	f002 f801 	bl	801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018faa:	4b48      	ldr	r3, [pc, #288]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fac:	2200      	movs	r2, #0
 8018fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018fb2:	4a46      	ldr	r2, [pc, #280]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018fb8:	4b44      	ldr	r3, [pc, #272]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fba:	220b      	movs	r2, #11
 8018fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018fc0:	68b8      	ldr	r0, [r7, #8]
 8018fc2:	f002 fec5 	bl	801bd50 <SUBGRF_GetFskBandwidthRegValue>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	461a      	mov	r2, r3
 8018fca:	4b40      	ldr	r3, [pc, #256]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018fd0:	4b3e      	ldr	r3, [pc, #248]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018fd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018fd8:	00db      	lsls	r3, r3, #3
 8018fda:	b29a      	uxth	r2, r3
 8018fdc:	4b3b      	ldr	r3, [pc, #236]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fde:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018fe0:	4b3a      	ldr	r3, [pc, #232]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fe2:	2204      	movs	r2, #4
 8018fe4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018fe6:	4b39      	ldr	r3, [pc, #228]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fe8:	2218      	movs	r2, #24
 8018fea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018fec:	4b37      	ldr	r3, [pc, #220]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8018fee:	2200      	movs	r2, #0
 8018ff0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018ff2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018ff6:	f083 0301 	eor.w	r3, r3, #1
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	461a      	mov	r2, r3
 8018ffe:	4b33      	ldr	r3, [pc, #204]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019000:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019002:	4b33      	ldr	r3, [pc, #204]	; (80190d0 <RadioSetRxConfig+0x300>)
 8019004:	781a      	ldrb	r2, [r3, #0]
 8019006:	4b31      	ldr	r3, [pc, #196]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019008:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801900a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801900e:	2b00      	cmp	r3, #0
 8019010:	d003      	beq.n	801901a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019012:	4b2e      	ldr	r3, [pc, #184]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019014:	22f2      	movs	r2, #242	; 0xf2
 8019016:	75da      	strb	r2, [r3, #23]
 8019018:	e002      	b.n	8019020 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801901a:	4b2c      	ldr	r3, [pc, #176]	; (80190cc <RadioSetRxConfig+0x2fc>)
 801901c:	2201      	movs	r2, #1
 801901e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019020:	4b2a      	ldr	r3, [pc, #168]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019022:	2201      	movs	r2, #1
 8019024:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019026:	f000 fc68 	bl	80198fa <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801902a:	2000      	movs	r0, #0
 801902c:	f7ff fdfc 	bl	8018c28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019030:	4828      	ldr	r0, [pc, #160]	; (80190d4 <RadioSetRxConfig+0x304>)
 8019032:	f002 fa59 	bl	801b4e8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019036:	4828      	ldr	r0, [pc, #160]	; (80190d8 <RadioSetRxConfig+0x308>)
 8019038:	f002 fb28 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801903c:	4a28      	ldr	r2, [pc, #160]	; (80190e0 <RadioSetRxConfig+0x310>)
 801903e:	f107 0314 	add.w	r3, r7, #20
 8019042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019046:	e883 0003 	stmia.w	r3, {r0, r1}
 801904a:	f107 0314 	add.w	r3, r7, #20
 801904e:	4618      	mov	r0, r3
 8019050:	f001 fde5 	bl	801ac1e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019054:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019058:	f001 fe30 	bl	801acbc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801905c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801905e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019062:	fb02 f303 	mul.w	r3, r2, r3
 8019066:	461a      	mov	r2, r3
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	fbb2 f3f3 	udiv	r3, r2, r3
 801906e:	4a17      	ldr	r2, [pc, #92]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019070:	6093      	str	r3, [r2, #8]
            break;
 8019072:	e0ad      	b.n	80191d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019074:	2000      	movs	r0, #0
 8019076:	f001 ff99 	bl	801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801907a:	4b14      	ldr	r3, [pc, #80]	; (80190cc <RadioSetRxConfig+0x2fc>)
 801907c:	2201      	movs	r2, #1
 801907e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	b2da      	uxtb	r2, r3
 8019086:	4b11      	ldr	r3, [pc, #68]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801908c:	4a15      	ldr	r2, [pc, #84]	; (80190e4 <RadioSetRxConfig+0x314>)
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	4413      	add	r3, r2
 8019092:	781a      	ldrb	r2, [r3, #0]
 8019094:	4b0d      	ldr	r3, [pc, #52]	; (80190cc <RadioSetRxConfig+0x2fc>)
 8019096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801909a:	4a0c      	ldr	r2, [pc, #48]	; (80190cc <RadioSetRxConfig+0x2fc>)
 801909c:	7bbb      	ldrb	r3, [r7, #14]
 801909e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d105      	bne.n	80190b4 <RadioSetRxConfig+0x2e4>
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2b0b      	cmp	r3, #11
 80190ac:	d008      	beq.n	80190c0 <RadioSetRxConfig+0x2f0>
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	2b0c      	cmp	r3, #12
 80190b2:	d005      	beq.n	80190c0 <RadioSetRxConfig+0x2f0>
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	2b01      	cmp	r3, #1
 80190b8:	d116      	bne.n	80190e8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	2b0c      	cmp	r3, #12
 80190be:	d113      	bne.n	80190e8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80190c0:	4b02      	ldr	r3, [pc, #8]	; (80190cc <RadioSetRxConfig+0x2fc>)
 80190c2:	2201      	movs	r2, #1
 80190c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80190c8:	e012      	b.n	80190f0 <RadioSetRxConfig+0x320>
 80190ca:	bf00      	nop
 80190cc:	200017fc 	.word	0x200017fc
 80190d0:	2000014c 	.word	0x2000014c
 80190d4:	20001834 	.word	0x20001834
 80190d8:	2000180a 	.word	0x2000180a
 80190dc:	0801e020 	.word	0x0801e020
 80190e0:	0801e028 	.word	0x0801e028
 80190e4:	0801e690 	.word	0x0801e690
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80190e8:	4b3b      	ldr	r3, [pc, #236]	; (80191d8 <RadioSetRxConfig+0x408>)
 80190ea:	2200      	movs	r2, #0
 80190ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80190f0:	4b39      	ldr	r3, [pc, #228]	; (80191d8 <RadioSetRxConfig+0x408>)
 80190f2:	2201      	movs	r2, #1
 80190f4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80190f6:	4b38      	ldr	r3, [pc, #224]	; (80191d8 <RadioSetRxConfig+0x408>)
 80190f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80190fc:	2b05      	cmp	r3, #5
 80190fe:	d004      	beq.n	801910a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019100:	4b35      	ldr	r3, [pc, #212]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019106:	2b06      	cmp	r3, #6
 8019108:	d10a      	bne.n	8019120 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801910a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801910c:	2b0b      	cmp	r3, #11
 801910e:	d803      	bhi.n	8019118 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019110:	4b31      	ldr	r3, [pc, #196]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019112:	220c      	movs	r2, #12
 8019114:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019116:	e006      	b.n	8019126 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019118:	4a2f      	ldr	r2, [pc, #188]	; (80191d8 <RadioSetRxConfig+0x408>)
 801911a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801911c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801911e:	e002      	b.n	8019126 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019120:	4a2d      	ldr	r2, [pc, #180]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019122:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019124:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019126:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801912a:	4b2b      	ldr	r3, [pc, #172]	; (80191d8 <RadioSetRxConfig+0x408>)
 801912c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801912e:	4b2b      	ldr	r3, [pc, #172]	; (80191dc <RadioSetRxConfig+0x40c>)
 8019130:	781a      	ldrb	r2, [r3, #0]
 8019132:	4b29      	ldr	r3, [pc, #164]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019134:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019136:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801913a:	4b27      	ldr	r3, [pc, #156]	; (80191d8 <RadioSetRxConfig+0x408>)
 801913c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019140:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019144:	4b24      	ldr	r3, [pc, #144]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801914a:	f000 fbd6 	bl	80198fa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801914e:	2001      	movs	r0, #1
 8019150:	f7ff fd6a 	bl	8018c28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019154:	4822      	ldr	r0, [pc, #136]	; (80191e0 <RadioSetRxConfig+0x410>)
 8019156:	f002 f9c7 	bl	801b4e8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801915a:	4822      	ldr	r0, [pc, #136]	; (80191e4 <RadioSetRxConfig+0x414>)
 801915c:	f002 fa96 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019162:	b2db      	uxtb	r3, r3
 8019164:	4618      	mov	r0, r3
 8019166:	f001 ff30 	bl	801afca <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801916a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801916e:	f002 fbe9 	bl	801b944 <SUBGRF_ReadRegister>
 8019172:	4603      	mov	r3, r0
 8019174:	f003 0301 	and.w	r3, r3, #1
 8019178:	b2db      	uxtb	r3, r3
 801917a:	4619      	mov	r1, r3
 801917c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019180:	f002 fbcc 	bl	801b91c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019184:	4b14      	ldr	r3, [pc, #80]	; (80191d8 <RadioSetRxConfig+0x408>)
 8019186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801918a:	2b01      	cmp	r3, #1
 801918c:	d10d      	bne.n	80191aa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801918e:	f240 7036 	movw	r0, #1846	; 0x736
 8019192:	f002 fbd7 	bl	801b944 <SUBGRF_ReadRegister>
 8019196:	4603      	mov	r3, r0
 8019198:	f023 0304 	bic.w	r3, r3, #4
 801919c:	b2db      	uxtb	r3, r3
 801919e:	4619      	mov	r1, r3
 80191a0:	f240 7036 	movw	r0, #1846	; 0x736
 80191a4:	f002 fbba 	bl	801b91c <SUBGRF_WriteRegister>
 80191a8:	e00c      	b.n	80191c4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80191aa:	f240 7036 	movw	r0, #1846	; 0x736
 80191ae:	f002 fbc9 	bl	801b944 <SUBGRF_ReadRegister>
 80191b2:	4603      	mov	r3, r0
 80191b4:	f043 0304 	orr.w	r3, r3, #4
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	4619      	mov	r1, r3
 80191bc:	f240 7036 	movw	r0, #1846	; 0x736
 80191c0:	f002 fbac 	bl	801b91c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80191c4:	4b04      	ldr	r3, [pc, #16]	; (80191d8 <RadioSetRxConfig+0x408>)
 80191c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191ca:	609a      	str	r2, [r3, #8]
            break;
 80191cc:	e000      	b.n	80191d0 <RadioSetRxConfig+0x400>
            break;
 80191ce:	bf00      	nop
    }
}
 80191d0:	bf00      	nop
 80191d2:	3728      	adds	r7, #40	; 0x28
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}
 80191d8:	200017fc 	.word	0x200017fc
 80191dc:	2000014c 	.word	0x2000014c
 80191e0:	20001834 	.word	0x20001834
 80191e4:	2000180a 	.word	0x2000180a

080191e8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b086      	sub	sp, #24
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	60ba      	str	r2, [r7, #8]
 80191f0:	607b      	str	r3, [r7, #4]
 80191f2:	4603      	mov	r3, r0
 80191f4:	73fb      	strb	r3, [r7, #15]
 80191f6:	460b      	mov	r3, r1
 80191f8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80191fa:	f002 fe76 	bl	801beea <RFW_DeInit>
    switch( modem )
 80191fe:	7bfb      	ldrb	r3, [r7, #15]
 8019200:	2b04      	cmp	r3, #4
 8019202:	f000 80c7 	beq.w	8019394 <RadioSetTxConfig+0x1ac>
 8019206:	2b04      	cmp	r3, #4
 8019208:	f300 80d6 	bgt.w	80193b8 <RadioSetTxConfig+0x1d0>
 801920c:	2b00      	cmp	r3, #0
 801920e:	d002      	beq.n	8019216 <RadioSetTxConfig+0x2e>
 8019210:	2b01      	cmp	r3, #1
 8019212:	d059      	beq.n	80192c8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019214:	e0d0      	b.n	80193b8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019216:	4b77      	ldr	r3, [pc, #476]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019218:	2200      	movs	r2, #0
 801921a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801921e:	4a75      	ldr	r2, [pc, #468]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019220:	6a3b      	ldr	r3, [r7, #32]
 8019222:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019224:	4b73      	ldr	r3, [pc, #460]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019226:	220b      	movs	r2, #11
 8019228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801922c:	6878      	ldr	r0, [r7, #4]
 801922e:	f002 fd8f 	bl	801bd50 <SUBGRF_GetFskBandwidthRegValue>
 8019232:	4603      	mov	r3, r0
 8019234:	461a      	mov	r2, r3
 8019236:	4b6f      	ldr	r3, [pc, #444]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801923c:	4a6d      	ldr	r2, [pc, #436]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019242:	4b6c      	ldr	r3, [pc, #432]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019244:	2200      	movs	r2, #0
 8019246:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801924a:	00db      	lsls	r3, r3, #3
 801924c:	b29a      	uxth	r2, r3
 801924e:	4b69      	ldr	r3, [pc, #420]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019250:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019252:	4b68      	ldr	r3, [pc, #416]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019254:	2204      	movs	r2, #4
 8019256:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019258:	4b66      	ldr	r3, [pc, #408]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801925a:	2218      	movs	r2, #24
 801925c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801925e:	4b65      	ldr	r3, [pc, #404]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019260:	2200      	movs	r2, #0
 8019262:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019264:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019268:	f083 0301 	eor.w	r3, r3, #1
 801926c:	b2db      	uxtb	r3, r3
 801926e:	461a      	mov	r2, r3
 8019270:	4b60      	ldr	r3, [pc, #384]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019272:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019274:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019278:	2b00      	cmp	r3, #0
 801927a:	d003      	beq.n	8019284 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801927c:	4b5d      	ldr	r3, [pc, #372]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801927e:	22f2      	movs	r2, #242	; 0xf2
 8019280:	75da      	strb	r2, [r3, #23]
 8019282:	e002      	b.n	801928a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019284:	4b5b      	ldr	r3, [pc, #364]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019286:	2201      	movs	r2, #1
 8019288:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801928a:	4b5a      	ldr	r3, [pc, #360]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801928c:	2201      	movs	r2, #1
 801928e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019290:	f000 fb33 	bl	80198fa <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019294:	2000      	movs	r0, #0
 8019296:	f7ff fcc7 	bl	8018c28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801929a:	4857      	ldr	r0, [pc, #348]	; (80193f8 <RadioSetTxConfig+0x210>)
 801929c:	f002 f924 	bl	801b4e8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192a0:	4856      	ldr	r0, [pc, #344]	; (80193fc <RadioSetTxConfig+0x214>)
 80192a2:	f002 f9f3 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80192a6:	4a56      	ldr	r2, [pc, #344]	; (8019400 <RadioSetTxConfig+0x218>)
 80192a8:	f107 0310 	add.w	r3, r7, #16
 80192ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80192b4:	f107 0310 	add.w	r3, r7, #16
 80192b8:	4618      	mov	r0, r3
 80192ba:	f001 fcb0 	bl	801ac1e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80192be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80192c2:	f001 fcfb 	bl	801acbc <SUBGRF_SetWhiteningSeed>
            break;
 80192c6:	e078      	b.n	80193ba <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80192c8:	4b4a      	ldr	r3, [pc, #296]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80192ca:	2201      	movs	r2, #1
 80192cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80192d0:	6a3b      	ldr	r3, [r7, #32]
 80192d2:	b2da      	uxtb	r2, r3
 80192d4:	4b47      	ldr	r3, [pc, #284]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80192d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80192da:	4a4a      	ldr	r2, [pc, #296]	; (8019404 <RadioSetTxConfig+0x21c>)
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	4413      	add	r3, r2
 80192e0:	781a      	ldrb	r2, [r3, #0]
 80192e2:	4b44      	ldr	r3, [pc, #272]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80192e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80192e8:	4a42      	ldr	r2, [pc, #264]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80192ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80192ee:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d105      	bne.n	8019304 <RadioSetTxConfig+0x11c>
 80192f8:	6a3b      	ldr	r3, [r7, #32]
 80192fa:	2b0b      	cmp	r3, #11
 80192fc:	d008      	beq.n	8019310 <RadioSetTxConfig+0x128>
 80192fe:	6a3b      	ldr	r3, [r7, #32]
 8019300:	2b0c      	cmp	r3, #12
 8019302:	d005      	beq.n	8019310 <RadioSetTxConfig+0x128>
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d107      	bne.n	801931a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801930a:	6a3b      	ldr	r3, [r7, #32]
 801930c:	2b0c      	cmp	r3, #12
 801930e:	d104      	bne.n	801931a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019310:	4b38      	ldr	r3, [pc, #224]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019312:	2201      	movs	r2, #1
 8019314:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019318:	e003      	b.n	8019322 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801931a:	4b36      	ldr	r3, [pc, #216]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801931c:	2200      	movs	r2, #0
 801931e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019322:	4b34      	ldr	r3, [pc, #208]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019324:	2201      	movs	r2, #1
 8019326:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019328:	4b32      	ldr	r3, [pc, #200]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801932a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801932e:	2b05      	cmp	r3, #5
 8019330:	d004      	beq.n	801933c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019332:	4b30      	ldr	r3, [pc, #192]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019338:	2b06      	cmp	r3, #6
 801933a:	d10a      	bne.n	8019352 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801933c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801933e:	2b0b      	cmp	r3, #11
 8019340:	d803      	bhi.n	801934a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019342:	4b2c      	ldr	r3, [pc, #176]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019344:	220c      	movs	r2, #12
 8019346:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019348:	e006      	b.n	8019358 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801934a:	4a2a      	ldr	r2, [pc, #168]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801934c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801934e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019350:	e002      	b.n	8019358 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019352:	4a28      	ldr	r2, [pc, #160]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019354:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019356:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019358:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801935c:	4b25      	ldr	r3, [pc, #148]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801935e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019360:	4b29      	ldr	r3, [pc, #164]	; (8019408 <RadioSetTxConfig+0x220>)
 8019362:	781a      	ldrb	r2, [r3, #0]
 8019364:	4b23      	ldr	r3, [pc, #140]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019366:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019368:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801936c:	4b21      	ldr	r3, [pc, #132]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801936e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019372:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019376:	4b1f      	ldr	r3, [pc, #124]	; (80193f4 <RadioSetTxConfig+0x20c>)
 8019378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801937c:	f000 fabd 	bl	80198fa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019380:	2001      	movs	r0, #1
 8019382:	f7ff fc51 	bl	8018c28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019386:	481c      	ldr	r0, [pc, #112]	; (80193f8 <RadioSetTxConfig+0x210>)
 8019388:	f002 f8ae 	bl	801b4e8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801938c:	481b      	ldr	r0, [pc, #108]	; (80193fc <RadioSetTxConfig+0x214>)
 801938e:	f002 f97d 	bl	801b68c <SUBGRF_SetPacketParams>
            break;
 8019392:	e012      	b.n	80193ba <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019394:	2004      	movs	r0, #4
 8019396:	f7ff fc47 	bl	8018c28 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801939a:	4b16      	ldr	r3, [pc, #88]	; (80193f4 <RadioSetTxConfig+0x20c>)
 801939c:	2202      	movs	r2, #2
 801939e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80193a2:	4a14      	ldr	r2, [pc, #80]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80193a4:	6a3b      	ldr	r3, [r7, #32]
 80193a6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80193a8:	4b12      	ldr	r3, [pc, #72]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80193aa:	2216      	movs	r2, #22
 80193ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193b0:	4811      	ldr	r0, [pc, #68]	; (80193f8 <RadioSetTxConfig+0x210>)
 80193b2:	f002 f899 	bl	801b4e8 <SUBGRF_SetModulationParams>
            break;
 80193b6:	e000      	b.n	80193ba <RadioSetTxConfig+0x1d2>
            break;
 80193b8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80193ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80193be:	4618      	mov	r0, r3
 80193c0:	f002 fbc8 	bl	801bb54 <SUBGRF_SetRfTxPower>
 80193c4:	4603      	mov	r3, r0
 80193c6:	461a      	mov	r2, r3
 80193c8:	4b0a      	ldr	r3, [pc, #40]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80193ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80193ce:	210e      	movs	r1, #14
 80193d0:	f640 101f 	movw	r0, #2335	; 0x91f
 80193d4:	f002 faa2 	bl	801b91c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80193d8:	4b06      	ldr	r3, [pc, #24]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80193da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80193de:	4618      	mov	r0, r3
 80193e0:	f002 fd97 	bl	801bf12 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80193e4:	4a03      	ldr	r2, [pc, #12]	; (80193f4 <RadioSetTxConfig+0x20c>)
 80193e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193e8:	6053      	str	r3, [r2, #4]
}
 80193ea:	bf00      	nop
 80193ec:	3718      	adds	r7, #24
 80193ee:	46bd      	mov	sp, r7
 80193f0:	bd80      	pop	{r7, pc}
 80193f2:	bf00      	nop
 80193f4:	200017fc 	.word	0x200017fc
 80193f8:	20001834 	.word	0x20001834
 80193fc:	2000180a 	.word	0x2000180a
 8019400:	0801e028 	.word	0x0801e028
 8019404:	0801e690 	.word	0x0801e690
 8019408:	2000014c 	.word	0x2000014c

0801940c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801940c:	b480      	push	{r7}
 801940e:	b083      	sub	sp, #12
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
    return true;
 8019414:	2301      	movs	r3, #1
}
 8019416:	4618      	mov	r0, r3
 8019418:	370c      	adds	r7, #12
 801941a:	46bd      	mov	sp, r7
 801941c:	bc80      	pop	{r7}
 801941e:	4770      	bx	lr

08019420 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019420:	b480      	push	{r7}
 8019422:	b085      	sub	sp, #20
 8019424:	af00      	add	r7, sp, #0
 8019426:	4603      	mov	r3, r0
 8019428:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801942a:	2300      	movs	r3, #0
 801942c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801942e:	79fb      	ldrb	r3, [r7, #7]
 8019430:	2b0a      	cmp	r3, #10
 8019432:	d83e      	bhi.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
 8019434:	a201      	add	r2, pc, #4	; (adr r2, 801943c <RadioGetLoRaBandwidthInHz+0x1c>)
 8019436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801943a:	bf00      	nop
 801943c:	08019469 	.word	0x08019469
 8019440:	08019479 	.word	0x08019479
 8019444:	08019489 	.word	0x08019489
 8019448:	08019499 	.word	0x08019499
 801944c:	080194a1 	.word	0x080194a1
 8019450:	080194a7 	.word	0x080194a7
 8019454:	080194ad 	.word	0x080194ad
 8019458:	080194b3 	.word	0x080194b3
 801945c:	08019471 	.word	0x08019471
 8019460:	08019481 	.word	0x08019481
 8019464:	08019491 	.word	0x08019491
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019468:	f641 6384 	movw	r3, #7812	; 0x1e84
 801946c:	60fb      	str	r3, [r7, #12]
        break;
 801946e:	e020      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019470:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019474:	60fb      	str	r3, [r7, #12]
        break;
 8019476:	e01c      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019478:	f643 5309 	movw	r3, #15625	; 0x3d09
 801947c:	60fb      	str	r3, [r7, #12]
        break;
 801947e:	e018      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019480:	f245 1361 	movw	r3, #20833	; 0x5161
 8019484:	60fb      	str	r3, [r7, #12]
        break;
 8019486:	e014      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019488:	f647 2312 	movw	r3, #31250	; 0x7a12
 801948c:	60fb      	str	r3, [r7, #12]
        break;
 801948e:	e010      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019490:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019494:	60fb      	str	r3, [r7, #12]
        break;
 8019496:	e00c      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019498:	f24f 4324 	movw	r3, #62500	; 0xf424
 801949c:	60fb      	str	r3, [r7, #12]
        break;
 801949e:	e008      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80194a0:	4b07      	ldr	r3, [pc, #28]	; (80194c0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80194a2:	60fb      	str	r3, [r7, #12]
        break;
 80194a4:	e005      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80194a6:	4b07      	ldr	r3, [pc, #28]	; (80194c4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80194a8:	60fb      	str	r3, [r7, #12]
        break;
 80194aa:	e002      	b.n	80194b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80194ac:	4b06      	ldr	r3, [pc, #24]	; (80194c8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80194ae:	60fb      	str	r3, [r7, #12]
        break;
 80194b0:	bf00      	nop
    }

    return bandwidthInHz;
 80194b2:	68fb      	ldr	r3, [r7, #12]
}
 80194b4:	4618      	mov	r0, r3
 80194b6:	3714      	adds	r7, #20
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bc80      	pop	{r7}
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	0001e848 	.word	0x0001e848
 80194c4:	0003d090 	.word	0x0003d090
 80194c8:	0007a120 	.word	0x0007a120

080194cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	4608      	mov	r0, r1
 80194d6:	4611      	mov	r1, r2
 80194d8:	461a      	mov	r2, r3
 80194da:	4603      	mov	r3, r0
 80194dc:	70fb      	strb	r3, [r7, #3]
 80194de:	460b      	mov	r3, r1
 80194e0:	803b      	strh	r3, [r7, #0]
 80194e2:	4613      	mov	r3, r2
 80194e4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80194e6:	883b      	ldrh	r3, [r7, #0]
 80194e8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80194ea:	78ba      	ldrb	r2, [r7, #2]
 80194ec:	f082 0201 	eor.w	r2, r2, #1
 80194f0:	b2d2      	uxtb	r2, r2
 80194f2:	2a00      	cmp	r2, #0
 80194f4:	d001      	beq.n	80194fa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80194f6:	2208      	movs	r2, #8
 80194f8:	e000      	b.n	80194fc <RadioGetGfskTimeOnAirNumerator+0x30>
 80194fa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80194fc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80194fe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019502:	7c3b      	ldrb	r3, [r7, #16]
 8019504:	7d39      	ldrb	r1, [r7, #20]
 8019506:	2900      	cmp	r1, #0
 8019508:	d001      	beq.n	801950e <RadioGetGfskTimeOnAirNumerator+0x42>
 801950a:	2102      	movs	r1, #2
 801950c:	e000      	b.n	8019510 <RadioGetGfskTimeOnAirNumerator+0x44>
 801950e:	2100      	movs	r1, #0
 8019510:	440b      	add	r3, r1
 8019512:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019514:	4413      	add	r3, r2
}
 8019516:	4618      	mov	r0, r3
 8019518:	370c      	adds	r7, #12
 801951a:	46bd      	mov	sp, r7
 801951c:	bc80      	pop	{r7}
 801951e:	4770      	bx	lr

08019520 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019520:	b480      	push	{r7}
 8019522:	b08b      	sub	sp, #44	; 0x2c
 8019524:	af00      	add	r7, sp, #0
 8019526:	60f8      	str	r0, [r7, #12]
 8019528:	60b9      	str	r1, [r7, #8]
 801952a:	4611      	mov	r1, r2
 801952c:	461a      	mov	r2, r3
 801952e:	460b      	mov	r3, r1
 8019530:	71fb      	strb	r3, [r7, #7]
 8019532:	4613      	mov	r3, r2
 8019534:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019536:	79fb      	ldrb	r3, [r7, #7]
 8019538:	3304      	adds	r3, #4
 801953a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801953c:	2300      	movs	r3, #0
 801953e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	2b05      	cmp	r3, #5
 8019546:	d002      	beq.n	801954e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	2b06      	cmp	r3, #6
 801954c:	d104      	bne.n	8019558 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801954e:	88bb      	ldrh	r3, [r7, #4]
 8019550:	2b0b      	cmp	r3, #11
 8019552:	d801      	bhi.n	8019558 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019554:	230c      	movs	r3, #12
 8019556:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d105      	bne.n	801956a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	2b0b      	cmp	r3, #11
 8019562:	d008      	beq.n	8019576 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	2b0c      	cmp	r3, #12
 8019568:	d005      	beq.n	8019576 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	2b01      	cmp	r3, #1
 801956e:	d105      	bne.n	801957c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	2b0c      	cmp	r3, #12
 8019574:	d102      	bne.n	801957c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019576:	2301      	movs	r3, #1
 8019578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801957c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019580:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019582:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019586:	2a00      	cmp	r2, #0
 8019588:	d001      	beq.n	801958e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801958a:	2210      	movs	r2, #16
 801958c:	e000      	b.n	8019590 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801958e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019590:	4413      	add	r3, r2
 8019592:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019598:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801959a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801959e:	2a00      	cmp	r2, #0
 80195a0:	d001      	beq.n	80195a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80195a2:	2200      	movs	r2, #0
 80195a4:	e000      	b.n	80195a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80195a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80195a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80195aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	2b06      	cmp	r3, #6
 80195b0:	d803      	bhi.n	80195ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	009b      	lsls	r3, r3, #2
 80195b6:	623b      	str	r3, [r7, #32]
 80195b8:	e00e      	b.n	80195d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80195ba:	69fb      	ldr	r3, [r7, #28]
 80195bc:	3308      	adds	r3, #8
 80195be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80195c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d004      	beq.n	80195d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	3b02      	subs	r3, #2
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	623b      	str	r3, [r7, #32]
 80195d0:	e002      	b.n	80195d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80195d8:	69fb      	ldr	r3, [r7, #28]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	da01      	bge.n	80195e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80195de:	2300      	movs	r3, #0
 80195e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80195e2:	69fa      	ldr	r2, [r7, #28]
 80195e4:	6a3b      	ldr	r3, [r7, #32]
 80195e6:	4413      	add	r3, r2
 80195e8:	1e5a      	subs	r2, r3, #1
 80195ea:	6a3b      	ldr	r3, [r7, #32]
 80195ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80195f0:	697a      	ldr	r2, [r7, #20]
 80195f2:	fb03 f202 	mul.w	r2, r3, r2
 80195f6:	88bb      	ldrh	r3, [r7, #4]
 80195f8:	4413      	add	r3, r2
    int32_t intermediate =
 80195fa:	330c      	adds	r3, #12
 80195fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	2b06      	cmp	r3, #6
 8019602:	d802      	bhi.n	801960a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019604:	69bb      	ldr	r3, [r7, #24]
 8019606:	3302      	adds	r3, #2
 8019608:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801960a:	69bb      	ldr	r3, [r7, #24]
 801960c:	009b      	lsls	r3, r3, #2
 801960e:	1c5a      	adds	r2, r3, #1
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	3b02      	subs	r3, #2
 8019614:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019618:	4618      	mov	r0, r3
 801961a:	372c      	adds	r7, #44	; 0x2c
 801961c:	46bd      	mov	sp, r7
 801961e:	bc80      	pop	{r7}
 8019620:	4770      	bx	lr
	...

08019624 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b08a      	sub	sp, #40	; 0x28
 8019628:	af04      	add	r7, sp, #16
 801962a:	60b9      	str	r1, [r7, #8]
 801962c:	607a      	str	r2, [r7, #4]
 801962e:	461a      	mov	r2, r3
 8019630:	4603      	mov	r3, r0
 8019632:	73fb      	strb	r3, [r7, #15]
 8019634:	4613      	mov	r3, r2
 8019636:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019638:	2300      	movs	r3, #0
 801963a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801963c:	2301      	movs	r3, #1
 801963e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019640:	7bfb      	ldrb	r3, [r7, #15]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d002      	beq.n	801964c <RadioTimeOnAir+0x28>
 8019646:	2b01      	cmp	r3, #1
 8019648:	d017      	beq.n	801967a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801964a:	e035      	b.n	80196b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801964c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019650:	8c3a      	ldrh	r2, [r7, #32]
 8019652:	7bb9      	ldrb	r1, [r7, #14]
 8019654:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801965e:	9300      	str	r3, [sp, #0]
 8019660:	4603      	mov	r3, r0
 8019662:	6878      	ldr	r0, [r7, #4]
 8019664:	f7ff ff32 	bl	80194cc <RadioGetGfskTimeOnAirNumerator>
 8019668:	4603      	mov	r3, r0
 801966a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801966e:	fb02 f303 	mul.w	r3, r2, r3
 8019672:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	613b      	str	r3, [r7, #16]
        break;
 8019678:	e01e      	b.n	80196b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801967a:	8c39      	ldrh	r1, [r7, #32]
 801967c:	7bba      	ldrb	r2, [r7, #14]
 801967e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019682:	9302      	str	r3, [sp, #8]
 8019684:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019688:	9301      	str	r3, [sp, #4]
 801968a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801968e:	9300      	str	r3, [sp, #0]
 8019690:	460b      	mov	r3, r1
 8019692:	6879      	ldr	r1, [r7, #4]
 8019694:	68b8      	ldr	r0, [r7, #8]
 8019696:	f7ff ff43 	bl	8019520 <RadioGetLoRaTimeOnAirNumerator>
 801969a:	4603      	mov	r3, r0
 801969c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80196a0:	fb02 f303 	mul.w	r3, r2, r3
 80196a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80196a6:	4a0a      	ldr	r2, [pc, #40]	; (80196d0 <RadioTimeOnAir+0xac>)
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	4413      	add	r3, r2
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7ff feb6 	bl	8019420 <RadioGetLoRaBandwidthInHz>
 80196b4:	6138      	str	r0, [r7, #16]
        break;
 80196b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80196b8:	697a      	ldr	r2, [r7, #20]
 80196ba:	693b      	ldr	r3, [r7, #16]
 80196bc:	4413      	add	r3, r2
 80196be:	1e5a      	subs	r2, r3, #1
 80196c0:	693b      	ldr	r3, [r7, #16]
 80196c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80196c6:	4618      	mov	r0, r3
 80196c8:	3718      	adds	r7, #24
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}
 80196ce:	bf00      	nop
 80196d0:	0801e690 	.word	0x0801e690

080196d4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b084      	sub	sp, #16
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	460b      	mov	r3, r1
 80196de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80196e0:	2300      	movs	r3, #0
 80196e2:	2200      	movs	r2, #0
 80196e4:	f240 2101 	movw	r1, #513	; 0x201
 80196e8:	f240 2001 	movw	r0, #513	; 0x201
 80196ec:	f001 fd66 	bl	801b1bc <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80196f0:	4b73      	ldr	r3, [pc, #460]	; (80198c0 <RadioSend+0x1ec>)
 80196f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80196f6:	2101      	movs	r1, #1
 80196f8:	4618      	mov	r0, r3
 80196fa:	f002 fa03 	bl	801bb04 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80196fe:	4b70      	ldr	r3, [pc, #448]	; (80198c0 <RadioSend+0x1ec>)
 8019700:	781b      	ldrb	r3, [r3, #0]
 8019702:	2b01      	cmp	r3, #1
 8019704:	d112      	bne.n	801972c <RadioSend+0x58>
 8019706:	4b6e      	ldr	r3, [pc, #440]	; (80198c0 <RadioSend+0x1ec>)
 8019708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801970c:	2b06      	cmp	r3, #6
 801970e:	d10d      	bne.n	801972c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019710:	f640 0089 	movw	r0, #2185	; 0x889
 8019714:	f002 f916 	bl	801b944 <SUBGRF_ReadRegister>
 8019718:	4603      	mov	r3, r0
 801971a:	f023 0304 	bic.w	r3, r3, #4
 801971e:	b2db      	uxtb	r3, r3
 8019720:	4619      	mov	r1, r3
 8019722:	f640 0089 	movw	r0, #2185	; 0x889
 8019726:	f002 f8f9 	bl	801b91c <SUBGRF_WriteRegister>
 801972a:	e00c      	b.n	8019746 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801972c:	f640 0089 	movw	r0, #2185	; 0x889
 8019730:	f002 f908 	bl	801b944 <SUBGRF_ReadRegister>
 8019734:	4603      	mov	r3, r0
 8019736:	f043 0304 	orr.w	r3, r3, #4
 801973a:	b2db      	uxtb	r3, r3
 801973c:	4619      	mov	r1, r3
 801973e:	f640 0089 	movw	r0, #2185	; 0x889
 8019742:	f002 f8eb 	bl	801b91c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019746:	4b5e      	ldr	r3, [pc, #376]	; (80198c0 <RadioSend+0x1ec>)
 8019748:	781b      	ldrb	r3, [r3, #0]
 801974a:	2b04      	cmp	r3, #4
 801974c:	f200 80a8 	bhi.w	80198a0 <RadioSend+0x1cc>
 8019750:	a201      	add	r2, pc, #4	; (adr r2, 8019758 <RadioSend+0x84>)
 8019752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019756:	bf00      	nop
 8019758:	08019787 	.word	0x08019787
 801975c:	0801976d 	.word	0x0801976d
 8019760:	08019787 	.word	0x08019787
 8019764:	080197e9 	.word	0x080197e9
 8019768:	08019809 	.word	0x08019809
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801976c:	4a54      	ldr	r2, [pc, #336]	; (80198c0 <RadioSend+0x1ec>)
 801976e:	78fb      	ldrb	r3, [r7, #3]
 8019770:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019772:	4854      	ldr	r0, [pc, #336]	; (80198c4 <RadioSend+0x1f0>)
 8019774:	f001 ff8a 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019778:	78fb      	ldrb	r3, [r7, #3]
 801977a:	2200      	movs	r2, #0
 801977c:	4619      	mov	r1, r3
 801977e:	6878      	ldr	r0, [r7, #4]
 8019780:	f001 fa3a 	bl	801abf8 <SUBGRF_SendPayload>
            break;
 8019784:	e08d      	b.n	80198a2 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019786:	f002 fbb6 	bl	801bef6 <RFW_Is_Init>
 801978a:	4603      	mov	r3, r0
 801978c:	2b01      	cmp	r3, #1
 801978e:	d11e      	bne.n	80197ce <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019790:	f107 020d 	add.w	r2, r7, #13
 8019794:	78fb      	ldrb	r3, [r7, #3]
 8019796:	4619      	mov	r1, r3
 8019798:	6878      	ldr	r0, [r7, #4]
 801979a:	f002 fbc4 	bl	801bf26 <RFW_TransmitInit>
 801979e:	4603      	mov	r3, r0
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d10c      	bne.n	80197be <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80197a4:	7b7a      	ldrb	r2, [r7, #13]
 80197a6:	4b46      	ldr	r3, [pc, #280]	; (80198c0 <RadioSend+0x1ec>)
 80197a8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197aa:	4846      	ldr	r0, [pc, #280]	; (80198c4 <RadioSend+0x1f0>)
 80197ac:	f001 ff6e 	bl	801b68c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80197b0:	7b7b      	ldrb	r3, [r7, #13]
 80197b2:	2200      	movs	r2, #0
 80197b4:	4619      	mov	r1, r3
 80197b6:	6878      	ldr	r0, [r7, #4]
 80197b8:	f001 fa1e 	bl	801abf8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80197bc:	e071      	b.n	80198a2 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80197be:	4b42      	ldr	r3, [pc, #264]	; (80198c8 <RadioSend+0x1f4>)
 80197c0:	2201      	movs	r2, #1
 80197c2:	2100      	movs	r1, #0
 80197c4:	2002      	movs	r0, #2
 80197c6:	f003 fccf 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80197ca:	2303      	movs	r3, #3
 80197cc:	e073      	b.n	80198b6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80197ce:	4a3c      	ldr	r2, [pc, #240]	; (80198c0 <RadioSend+0x1ec>)
 80197d0:	78fb      	ldrb	r3, [r7, #3]
 80197d2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197d4:	483b      	ldr	r0, [pc, #236]	; (80198c4 <RadioSend+0x1f0>)
 80197d6:	f001 ff59 	bl	801b68c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80197da:	78fb      	ldrb	r3, [r7, #3]
 80197dc:	2200      	movs	r2, #0
 80197de:	4619      	mov	r1, r3
 80197e0:	6878      	ldr	r0, [r7, #4]
 80197e2:	f001 fa09 	bl	801abf8 <SUBGRF_SendPayload>
            break;
 80197e6:	e05c      	b.n	80198a2 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80197e8:	4b35      	ldr	r3, [pc, #212]	; (80198c0 <RadioSend+0x1ec>)
 80197ea:	2202      	movs	r2, #2
 80197ec:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80197ee:	4a34      	ldr	r2, [pc, #208]	; (80198c0 <RadioSend+0x1ec>)
 80197f0:	78fb      	ldrb	r3, [r7, #3]
 80197f2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197f4:	4833      	ldr	r0, [pc, #204]	; (80198c4 <RadioSend+0x1f0>)
 80197f6:	f001 ff49 	bl	801b68c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80197fa:	78fb      	ldrb	r3, [r7, #3]
 80197fc:	2200      	movs	r2, #0
 80197fe:	4619      	mov	r1, r3
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f001 f9f9 	bl	801abf8 <SUBGRF_SendPayload>
            break;
 8019806:	e04c      	b.n	80198a2 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019808:	78fb      	ldrb	r3, [r7, #3]
 801980a:	461a      	mov	r2, r3
 801980c:	6879      	ldr	r1, [r7, #4]
 801980e:	482f      	ldr	r0, [pc, #188]	; (80198cc <RadioSend+0x1f8>)
 8019810:	f000 fccc 	bl	801a1ac <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019814:	4b2a      	ldr	r3, [pc, #168]	; (80198c0 <RadioSend+0x1ec>)
 8019816:	2202      	movs	r2, #2
 8019818:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801981a:	78fb      	ldrb	r3, [r7, #3]
 801981c:	3301      	adds	r3, #1
 801981e:	b2da      	uxtb	r2, r3
 8019820:	4b27      	ldr	r3, [pc, #156]	; (80198c0 <RadioSend+0x1ec>)
 8019822:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019824:	4827      	ldr	r0, [pc, #156]	; (80198c4 <RadioSend+0x1f0>)
 8019826:	f001 ff31 	bl	801b68c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801982a:	2100      	movs	r1, #0
 801982c:	20f1      	movs	r0, #241	; 0xf1
 801982e:	f000 f966 	bl	8019afe <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019832:	2100      	movs	r1, #0
 8019834:	20f0      	movs	r0, #240	; 0xf0
 8019836:	f000 f962 	bl	8019afe <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801983a:	4b21      	ldr	r3, [pc, #132]	; (80198c0 <RadioSend+0x1ec>)
 801983c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801983e:	2b64      	cmp	r3, #100	; 0x64
 8019840:	d108      	bne.n	8019854 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019842:	2170      	movs	r1, #112	; 0x70
 8019844:	20f3      	movs	r0, #243	; 0xf3
 8019846:	f000 f95a 	bl	8019afe <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801984a:	211d      	movs	r1, #29
 801984c:	20f2      	movs	r0, #242	; 0xf2
 801984e:	f000 f956 	bl	8019afe <RadioWrite>
 8019852:	e007      	b.n	8019864 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019854:	21e1      	movs	r1, #225	; 0xe1
 8019856:	20f3      	movs	r0, #243	; 0xf3
 8019858:	f000 f951 	bl	8019afe <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801985c:	2104      	movs	r1, #4
 801985e:	20f2      	movs	r0, #242	; 0xf2
 8019860:	f000 f94d 	bl	8019afe <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019864:	78fb      	ldrb	r3, [r7, #3]
 8019866:	b29b      	uxth	r3, r3
 8019868:	00db      	lsls	r3, r3, #3
 801986a:	b29b      	uxth	r3, r3
 801986c:	3302      	adds	r3, #2
 801986e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019870:	89fb      	ldrh	r3, [r7, #14]
 8019872:	0a1b      	lsrs	r3, r3, #8
 8019874:	b29b      	uxth	r3, r3
 8019876:	b2db      	uxtb	r3, r3
 8019878:	4619      	mov	r1, r3
 801987a:	20f4      	movs	r0, #244	; 0xf4
 801987c:	f000 f93f 	bl	8019afe <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019880:	89fb      	ldrh	r3, [r7, #14]
 8019882:	b2db      	uxtb	r3, r3
 8019884:	4619      	mov	r1, r3
 8019886:	20f5      	movs	r0, #245	; 0xf5
 8019888:	f000 f939 	bl	8019afe <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801988c:	78fb      	ldrb	r3, [r7, #3]
 801988e:	3301      	adds	r3, #1
 8019890:	b2db      	uxtb	r3, r3
 8019892:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019896:	4619      	mov	r1, r3
 8019898:	480c      	ldr	r0, [pc, #48]	; (80198cc <RadioSend+0x1f8>)
 801989a:	f001 f9ad 	bl	801abf8 <SUBGRF_SendPayload>
            break;
 801989e:	e000      	b.n	80198a2 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80198a0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80198a2:	4b07      	ldr	r3, [pc, #28]	; (80198c0 <RadioSend+0x1ec>)
 80198a4:	685b      	ldr	r3, [r3, #4]
 80198a6:	4619      	mov	r1, r3
 80198a8:	4809      	ldr	r0, [pc, #36]	; (80198d0 <RadioSend+0x1fc>)
 80198aa:	f003 fac3 	bl	801ce34 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80198ae:	4808      	ldr	r0, [pc, #32]	; (80198d0 <RadioSend+0x1fc>)
 80198b0:	f003 f9e2 	bl	801cc78 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80198b4:	2300      	movs	r3, #0
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	3710      	adds	r7, #16
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bd80      	pop	{r7, pc}
 80198be:	bf00      	nop
 80198c0:	200017fc 	.word	0x200017fc
 80198c4:	2000180a 	.word	0x2000180a
 80198c8:	0801e030 	.word	0x0801e030
 80198cc:	200016f8 	.word	0x200016f8
 80198d0:	20001858 	.word	0x20001858

080198d4 <RadioSleep>:

static void RadioSleep( void )
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b082      	sub	sp, #8
 80198d8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80198da:	2300      	movs	r3, #0
 80198dc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80198de:	793b      	ldrb	r3, [r7, #4]
 80198e0:	f043 0304 	orr.w	r3, r3, #4
 80198e4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80198e6:	7938      	ldrb	r0, [r7, #4]
 80198e8:	f001 fa62 	bl	801adb0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80198ec:	2002      	movs	r0, #2
 80198ee:	f7e8 ff8b 	bl	8002808 <HAL_Delay>
}
 80198f2:	bf00      	nop
 80198f4:	3708      	adds	r7, #8
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}

080198fa <RadioStandby>:

static void RadioStandby( void )
{
 80198fa:	b580      	push	{r7, lr}
 80198fc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80198fe:	2000      	movs	r0, #0
 8019900:	f001 fa88 	bl	801ae14 <SUBGRF_SetStandby>
}
 8019904:	bf00      	nop
 8019906:	bd80      	pop	{r7, pc}

08019908 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b082      	sub	sp, #8
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019910:	f002 faf1 	bl	801bef6 <RFW_Is_Init>
 8019914:	4603      	mov	r3, r0
 8019916:	2b01      	cmp	r3, #1
 8019918:	d102      	bne.n	8019920 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801991a:	f002 fb14 	bl	801bf46 <RFW_ReceiveInit>
 801991e:	e007      	b.n	8019930 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019920:	2300      	movs	r3, #0
 8019922:	2200      	movs	r2, #0
 8019924:	f240 2162 	movw	r1, #610	; 0x262
 8019928:	f240 2062 	movw	r0, #610	; 0x262
 801992c:	f001 fc46 	bl	801b1bc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d006      	beq.n	8019944 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019936:	6879      	ldr	r1, [r7, #4]
 8019938:	4811      	ldr	r0, [pc, #68]	; (8019980 <RadioRx+0x78>)
 801993a:	f003 fa7b 	bl	801ce34 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801993e:	4810      	ldr	r0, [pc, #64]	; (8019980 <RadioRx+0x78>)
 8019940:	f003 f99a 	bl	801cc78 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019944:	4b0f      	ldr	r3, [pc, #60]	; (8019984 <RadioRx+0x7c>)
 8019946:	2200      	movs	r2, #0
 8019948:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801994a:	4b0e      	ldr	r3, [pc, #56]	; (8019984 <RadioRx+0x7c>)
 801994c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019950:	2100      	movs	r1, #0
 8019952:	4618      	mov	r0, r3
 8019954:	f002 f8d6 	bl	801bb04 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019958:	4b0a      	ldr	r3, [pc, #40]	; (8019984 <RadioRx+0x7c>)
 801995a:	785b      	ldrb	r3, [r3, #1]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d004      	beq.n	801996a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019960:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019964:	f001 fa92 	bl	801ae8c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019968:	e005      	b.n	8019976 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801996a:	4b06      	ldr	r3, [pc, #24]	; (8019984 <RadioRx+0x7c>)
 801996c:	689b      	ldr	r3, [r3, #8]
 801996e:	019b      	lsls	r3, r3, #6
 8019970:	4618      	mov	r0, r3
 8019972:	f001 fa8b 	bl	801ae8c <SUBGRF_SetRx>
}
 8019976:	bf00      	nop
 8019978:	3708      	adds	r7, #8
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}
 801997e:	bf00      	nop
 8019980:	20001870 	.word	0x20001870
 8019984:	200017fc 	.word	0x200017fc

08019988 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b082      	sub	sp, #8
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019990:	f002 fab1 	bl	801bef6 <RFW_Is_Init>
 8019994:	4603      	mov	r3, r0
 8019996:	2b01      	cmp	r3, #1
 8019998:	d102      	bne.n	80199a0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801999a:	f002 fad4 	bl	801bf46 <RFW_ReceiveInit>
 801999e:	e007      	b.n	80199b0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80199a0:	2300      	movs	r3, #0
 80199a2:	2200      	movs	r2, #0
 80199a4:	f240 2162 	movw	r1, #610	; 0x262
 80199a8:	f240 2062 	movw	r0, #610	; 0x262
 80199ac:	f001 fc06 	bl	801b1bc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d006      	beq.n	80199c4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80199b6:	6879      	ldr	r1, [r7, #4]
 80199b8:	4811      	ldr	r0, [pc, #68]	; (8019a00 <RadioRxBoosted+0x78>)
 80199ba:	f003 fa3b 	bl	801ce34 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80199be:	4810      	ldr	r0, [pc, #64]	; (8019a00 <RadioRxBoosted+0x78>)
 80199c0:	f003 f95a 	bl	801cc78 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80199c4:	4b0f      	ldr	r3, [pc, #60]	; (8019a04 <RadioRxBoosted+0x7c>)
 80199c6:	2200      	movs	r2, #0
 80199c8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80199ca:	4b0e      	ldr	r3, [pc, #56]	; (8019a04 <RadioRxBoosted+0x7c>)
 80199cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80199d0:	2100      	movs	r1, #0
 80199d2:	4618      	mov	r0, r3
 80199d4:	f002 f896 	bl	801bb04 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80199d8:	4b0a      	ldr	r3, [pc, #40]	; (8019a04 <RadioRxBoosted+0x7c>)
 80199da:	785b      	ldrb	r3, [r3, #1]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d004      	beq.n	80199ea <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80199e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80199e4:	f001 fa72 	bl	801aecc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80199e8:	e005      	b.n	80199f6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80199ea:	4b06      	ldr	r3, [pc, #24]	; (8019a04 <RadioRxBoosted+0x7c>)
 80199ec:	689b      	ldr	r3, [r3, #8]
 80199ee:	019b      	lsls	r3, r3, #6
 80199f0:	4618      	mov	r0, r3
 80199f2:	f001 fa6b 	bl	801aecc <SUBGRF_SetRxBoosted>
}
 80199f6:	bf00      	nop
 80199f8:	3708      	adds	r7, #8
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	20001870 	.word	0x20001870
 8019a04:	200017fc 	.word	0x200017fc

08019a08 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
 8019a10:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	005a      	lsls	r2, r3, #1
 8019a16:	683b      	ldr	r3, [r7, #0]
 8019a18:	4413      	add	r3, r2
 8019a1a:	4a0c      	ldr	r2, [pc, #48]	; (8019a4c <RadioSetRxDutyCycle+0x44>)
 8019a1c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019a1e:	2300      	movs	r3, #0
 8019a20:	2200      	movs	r2, #0
 8019a22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019a26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019a2a:	f001 fbc7 	bl	801b1bc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019a2e:	4b07      	ldr	r3, [pc, #28]	; (8019a4c <RadioSetRxDutyCycle+0x44>)
 8019a30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019a34:	2100      	movs	r1, #0
 8019a36:	4618      	mov	r0, r3
 8019a38:	f002 f864 	bl	801bb04 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019a3c:	6839      	ldr	r1, [r7, #0]
 8019a3e:	6878      	ldr	r0, [r7, #4]
 8019a40:	f001 fa68 	bl	801af14 <SUBGRF_SetRxDutyCycle>
}
 8019a44:	bf00      	nop
 8019a46:	3708      	adds	r7, #8
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	bd80      	pop	{r7, pc}
 8019a4c:	200017fc 	.word	0x200017fc

08019a50 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019a54:	4b09      	ldr	r3, [pc, #36]	; (8019a7c <RadioStartCad+0x2c>)
 8019a56:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019a5a:	2100      	movs	r1, #0
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f002 f851 	bl	801bb04 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019a62:	2300      	movs	r3, #0
 8019a64:	2200      	movs	r2, #0
 8019a66:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019a6a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019a6e:	f001 fba5 	bl	801b1bc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019a72:	f001 fa7b 	bl	801af6c <SUBGRF_SetCad>
}
 8019a76:	bf00      	nop
 8019a78:	bd80      	pop	{r7, pc}
 8019a7a:	bf00      	nop
 8019a7c:	200017fc 	.word	0x200017fc

08019a80 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b084      	sub	sp, #16
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	460b      	mov	r3, r1
 8019a8a:	70fb      	strb	r3, [r7, #3]
 8019a8c:	4613      	mov	r3, r2
 8019a8e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019a90:	883b      	ldrh	r3, [r7, #0]
 8019a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a96:	fb02 f303 	mul.w	r3, r2, r3
 8019a9a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019a9c:	6878      	ldr	r0, [r7, #4]
 8019a9e:	f001 fbe9 	bl	801b274 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f002 f854 	bl	801bb54 <SUBGRF_SetRfTxPower>
 8019aac:	4603      	mov	r3, r0
 8019aae:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019ab0:	210e      	movs	r1, #14
 8019ab2:	f640 101f 	movw	r0, #2335	; 0x91f
 8019ab6:	f001 ff31 	bl	801b91c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019aba:	7afb      	ldrb	r3, [r7, #11]
 8019abc:	2101      	movs	r1, #1
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f002 f820 	bl	801bb04 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019ac4:	f001 fa60 	bl	801af88 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019ac8:	68f9      	ldr	r1, [r7, #12]
 8019aca:	4805      	ldr	r0, [pc, #20]	; (8019ae0 <RadioSetTxContinuousWave+0x60>)
 8019acc:	f003 f9b2 	bl	801ce34 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019ad0:	4803      	ldr	r0, [pc, #12]	; (8019ae0 <RadioSetTxContinuousWave+0x60>)
 8019ad2:	f003 f8d1 	bl	801cc78 <UTIL_TIMER_Start>
}
 8019ad6:	bf00      	nop
 8019ad8:	3710      	adds	r7, #16
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd80      	pop	{r7, pc}
 8019ade:	bf00      	nop
 8019ae0:	20001858 	.word	0x20001858

08019ae4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	4603      	mov	r3, r0
 8019aec:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019aee:	f001 fe82 	bl	801b7f6 <SUBGRF_GetRssiInst>
 8019af2:	4603      	mov	r3, r0
 8019af4:	b21b      	sxth	r3, r3
}
 8019af6:	4618      	mov	r0, r3
 8019af8:	3708      	adds	r7, #8
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}

08019afe <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019afe:	b580      	push	{r7, lr}
 8019b00:	b082      	sub	sp, #8
 8019b02:	af00      	add	r7, sp, #0
 8019b04:	4603      	mov	r3, r0
 8019b06:	460a      	mov	r2, r1
 8019b08:	80fb      	strh	r3, [r7, #6]
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019b0e:	797a      	ldrb	r2, [r7, #5]
 8019b10:	88fb      	ldrh	r3, [r7, #6]
 8019b12:	4611      	mov	r1, r2
 8019b14:	4618      	mov	r0, r3
 8019b16:	f001 ff01 	bl	801b91c <SUBGRF_WriteRegister>
}
 8019b1a:	bf00      	nop
 8019b1c:	3708      	adds	r7, #8
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}

08019b22 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019b22:	b580      	push	{r7, lr}
 8019b24:	b082      	sub	sp, #8
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	4603      	mov	r3, r0
 8019b2a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019b2c:	88fb      	ldrh	r3, [r7, #6]
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f001 ff08 	bl	801b944 <SUBGRF_ReadRegister>
 8019b34:	4603      	mov	r3, r0
}
 8019b36:	4618      	mov	r0, r3
 8019b38:	3708      	adds	r7, #8
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b082      	sub	sp, #8
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	4603      	mov	r3, r0
 8019b46:	6039      	str	r1, [r7, #0]
 8019b48:	80fb      	strh	r3, [r7, #6]
 8019b4a:	4613      	mov	r3, r2
 8019b4c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019b4e:	797b      	ldrb	r3, [r7, #5]
 8019b50:	b29a      	uxth	r2, r3
 8019b52:	88fb      	ldrh	r3, [r7, #6]
 8019b54:	6839      	ldr	r1, [r7, #0]
 8019b56:	4618      	mov	r0, r3
 8019b58:	f001 ff08 	bl	801b96c <SUBGRF_WriteRegisters>
}
 8019b5c:	bf00      	nop
 8019b5e:	3708      	adds	r7, #8
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd80      	pop	{r7, pc}

08019b64 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	6039      	str	r1, [r7, #0]
 8019b6e:	80fb      	strh	r3, [r7, #6]
 8019b70:	4613      	mov	r3, r2
 8019b72:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019b74:	797b      	ldrb	r3, [r7, #5]
 8019b76:	b29a      	uxth	r2, r3
 8019b78:	88fb      	ldrh	r3, [r7, #6]
 8019b7a:	6839      	ldr	r1, [r7, #0]
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f001 ff17 	bl	801b9b0 <SUBGRF_ReadRegisters>
}
 8019b82:	bf00      	nop
 8019b84:	3708      	adds	r7, #8
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
	...

08019b8c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b082      	sub	sp, #8
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	460a      	mov	r2, r1
 8019b96:	71fb      	strb	r3, [r7, #7]
 8019b98:	4613      	mov	r3, r2
 8019b9a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019b9c:	79fb      	ldrb	r3, [r7, #7]
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d10a      	bne.n	8019bb8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019ba2:	4a0e      	ldr	r2, [pc, #56]	; (8019bdc <RadioSetMaxPayloadLength+0x50>)
 8019ba4:	79bb      	ldrb	r3, [r7, #6]
 8019ba6:	7013      	strb	r3, [r2, #0]
 8019ba8:	4b0c      	ldr	r3, [pc, #48]	; (8019bdc <RadioSetMaxPayloadLength+0x50>)
 8019baa:	781a      	ldrb	r2, [r3, #0]
 8019bac:	4b0c      	ldr	r3, [pc, #48]	; (8019be0 <RadioSetMaxPayloadLength+0x54>)
 8019bae:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bb0:	480c      	ldr	r0, [pc, #48]	; (8019be4 <RadioSetMaxPayloadLength+0x58>)
 8019bb2:	f001 fd6b 	bl	801b68c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019bb6:	e00d      	b.n	8019bd4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019bb8:	4b09      	ldr	r3, [pc, #36]	; (8019be0 <RadioSetMaxPayloadLength+0x54>)
 8019bba:	7d5b      	ldrb	r3, [r3, #21]
 8019bbc:	2b01      	cmp	r3, #1
 8019bbe:	d109      	bne.n	8019bd4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019bc0:	4a06      	ldr	r2, [pc, #24]	; (8019bdc <RadioSetMaxPayloadLength+0x50>)
 8019bc2:	79bb      	ldrb	r3, [r7, #6]
 8019bc4:	7013      	strb	r3, [r2, #0]
 8019bc6:	4b05      	ldr	r3, [pc, #20]	; (8019bdc <RadioSetMaxPayloadLength+0x50>)
 8019bc8:	781a      	ldrb	r2, [r3, #0]
 8019bca:	4b05      	ldr	r3, [pc, #20]	; (8019be0 <RadioSetMaxPayloadLength+0x54>)
 8019bcc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bce:	4805      	ldr	r0, [pc, #20]	; (8019be4 <RadioSetMaxPayloadLength+0x58>)
 8019bd0:	f001 fd5c 	bl	801b68c <SUBGRF_SetPacketParams>
}
 8019bd4:	bf00      	nop
 8019bd6:	3708      	adds	r7, #8
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd80      	pop	{r7, pc}
 8019bdc:	2000014c 	.word	0x2000014c
 8019be0:	200017fc 	.word	0x200017fc
 8019be4:	2000180a 	.word	0x2000180a

08019be8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	4603      	mov	r3, r0
 8019bf0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019bf2:	4a13      	ldr	r2, [pc, #76]	; (8019c40 <RadioSetPublicNetwork+0x58>)
 8019bf4:	79fb      	ldrb	r3, [r7, #7]
 8019bf6:	7313      	strb	r3, [r2, #12]
 8019bf8:	4b11      	ldr	r3, [pc, #68]	; (8019c40 <RadioSetPublicNetwork+0x58>)
 8019bfa:	7b1a      	ldrb	r2, [r3, #12]
 8019bfc:	4b10      	ldr	r3, [pc, #64]	; (8019c40 <RadioSetPublicNetwork+0x58>)
 8019bfe:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019c00:	2001      	movs	r0, #1
 8019c02:	f7ff f811 	bl	8018c28 <RadioSetModem>
    if( enable == true )
 8019c06:	79fb      	ldrb	r3, [r7, #7]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d00a      	beq.n	8019c22 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019c0c:	2134      	movs	r1, #52	; 0x34
 8019c0e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019c12:	f001 fe83 	bl	801b91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019c16:	2144      	movs	r1, #68	; 0x44
 8019c18:	f240 7041 	movw	r0, #1857	; 0x741
 8019c1c:	f001 fe7e 	bl	801b91c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019c20:	e009      	b.n	8019c36 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019c22:	2114      	movs	r1, #20
 8019c24:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019c28:	f001 fe78 	bl	801b91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019c2c:	2124      	movs	r1, #36	; 0x24
 8019c2e:	f240 7041 	movw	r0, #1857	; 0x741
 8019c32:	f001 fe73 	bl	801b91c <SUBGRF_WriteRegister>
}
 8019c36:	bf00      	nop
 8019c38:	3708      	adds	r7, #8
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	200017fc 	.word	0x200017fc

08019c44 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019c48:	f001 ffb8 	bl	801bbbc <SUBGRF_GetRadioWakeUpTime>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	3303      	adds	r3, #3
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b082      	sub	sp, #8
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019c5c:	f000 f80e 	bl	8019c7c <RadioOnTxTimeoutProcess>
}
 8019c60:	bf00      	nop
 8019c62:	3708      	adds	r7, #8
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}

08019c68 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b082      	sub	sp, #8
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019c70:	f000 f818 	bl	8019ca4 <RadioOnRxTimeoutProcess>
}
 8019c74:	bf00      	nop
 8019c76:	3708      	adds	r7, #8
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019c80:	4b07      	ldr	r3, [pc, #28]	; (8019ca0 <RadioOnTxTimeoutProcess+0x24>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d008      	beq.n	8019c9a <RadioOnTxTimeoutProcess+0x1e>
 8019c88:	4b05      	ldr	r3, [pc, #20]	; (8019ca0 <RadioOnTxTimeoutProcess+0x24>)
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d003      	beq.n	8019c9a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019c92:	4b03      	ldr	r3, [pc, #12]	; (8019ca0 <RadioOnTxTimeoutProcess+0x24>)
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	4798      	blx	r3
    }
}
 8019c9a:	bf00      	nop
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	200017f8 	.word	0x200017f8

08019ca4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019ca8:	4b07      	ldr	r3, [pc, #28]	; (8019cc8 <RadioOnRxTimeoutProcess+0x24>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d008      	beq.n	8019cc2 <RadioOnRxTimeoutProcess+0x1e>
 8019cb0:	4b05      	ldr	r3, [pc, #20]	; (8019cc8 <RadioOnRxTimeoutProcess+0x24>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	68db      	ldr	r3, [r3, #12]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d003      	beq.n	8019cc2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019cba:	4b03      	ldr	r3, [pc, #12]	; (8019cc8 <RadioOnRxTimeoutProcess+0x24>)
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	4798      	blx	r3
    }
}
 8019cc2:	bf00      	nop
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	200017f8 	.word	0x200017f8

08019ccc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b082      	sub	sp, #8
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019cd6:	4a05      	ldr	r2, [pc, #20]	; (8019cec <RadioOnDioIrq+0x20>)
 8019cd8:	88fb      	ldrh	r3, [r7, #6]
 8019cda:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8019cde:	f000 f807 	bl	8019cf0 <RadioIrqProcess>
}
 8019ce2:	bf00      	nop
 8019ce4:	3708      	adds	r7, #8
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}
 8019cea:	bf00      	nop
 8019cec:	200017fc 	.word	0x200017fc

08019cf0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019cf0:	b5b0      	push	{r4, r5, r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019cfe:	4ba8      	ldr	r3, [pc, #672]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019d00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d08:	f000 810d 	beq.w	8019f26 <RadioIrqProcess+0x236>
 8019d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d10:	f300 81e8 	bgt.w	801a0e4 <RadioIrqProcess+0x3f4>
 8019d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d18:	f000 80f1 	beq.w	8019efe <RadioIrqProcess+0x20e>
 8019d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d20:	f300 81e0 	bgt.w	801a0e4 <RadioIrqProcess+0x3f4>
 8019d24:	2b80      	cmp	r3, #128	; 0x80
 8019d26:	f000 80d6 	beq.w	8019ed6 <RadioIrqProcess+0x1e6>
 8019d2a:	2b80      	cmp	r3, #128	; 0x80
 8019d2c:	f300 81da 	bgt.w	801a0e4 <RadioIrqProcess+0x3f4>
 8019d30:	2b20      	cmp	r3, #32
 8019d32:	dc49      	bgt.n	8019dc8 <RadioIrqProcess+0xd8>
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	f340 81d5 	ble.w	801a0e4 <RadioIrqProcess+0x3f4>
 8019d3a:	3b01      	subs	r3, #1
 8019d3c:	2b1f      	cmp	r3, #31
 8019d3e:	f200 81d1 	bhi.w	801a0e4 <RadioIrqProcess+0x3f4>
 8019d42:	a201      	add	r2, pc, #4	; (adr r2, 8019d48 <RadioIrqProcess+0x58>)
 8019d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d48:	08019dd1 	.word	0x08019dd1
 8019d4c:	08019e0b 	.word	0x08019e0b
 8019d50:	0801a0e5 	.word	0x0801a0e5
 8019d54:	08019fc1 	.word	0x08019fc1
 8019d58:	0801a0e5 	.word	0x0801a0e5
 8019d5c:	0801a0e5 	.word	0x0801a0e5
 8019d60:	0801a0e5 	.word	0x0801a0e5
 8019d64:	0801a03d 	.word	0x0801a03d
 8019d68:	0801a0e5 	.word	0x0801a0e5
 8019d6c:	0801a0e5 	.word	0x0801a0e5
 8019d70:	0801a0e5 	.word	0x0801a0e5
 8019d74:	0801a0e5 	.word	0x0801a0e5
 8019d78:	0801a0e5 	.word	0x0801a0e5
 8019d7c:	0801a0e5 	.word	0x0801a0e5
 8019d80:	0801a0e5 	.word	0x0801a0e5
 8019d84:	0801a059 	.word	0x0801a059
 8019d88:	0801a0e5 	.word	0x0801a0e5
 8019d8c:	0801a0e5 	.word	0x0801a0e5
 8019d90:	0801a0e5 	.word	0x0801a0e5
 8019d94:	0801a0e5 	.word	0x0801a0e5
 8019d98:	0801a0e5 	.word	0x0801a0e5
 8019d9c:	0801a0e5 	.word	0x0801a0e5
 8019da0:	0801a0e5 	.word	0x0801a0e5
 8019da4:	0801a0e5 	.word	0x0801a0e5
 8019da8:	0801a0e5 	.word	0x0801a0e5
 8019dac:	0801a0e5 	.word	0x0801a0e5
 8019db0:	0801a0e5 	.word	0x0801a0e5
 8019db4:	0801a0e5 	.word	0x0801a0e5
 8019db8:	0801a0e5 	.word	0x0801a0e5
 8019dbc:	0801a0e5 	.word	0x0801a0e5
 8019dc0:	0801a0e5 	.word	0x0801a0e5
 8019dc4:	0801a067 	.word	0x0801a067
 8019dc8:	2b40      	cmp	r3, #64	; 0x40
 8019dca:	f000 816d 	beq.w	801a0a8 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8019dce:	e189      	b.n	801a0e4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019dd0:	4874      	ldr	r0, [pc, #464]	; (8019fa4 <RadioIrqProcess+0x2b4>)
 8019dd2:	f002 ffbf 	bl	801cd54 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019dd6:	2000      	movs	r0, #0
 8019dd8:	f001 f81c 	bl	801ae14 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019ddc:	f002 f892 	bl	801bf04 <RFW_Is_LongPacketModeEnabled>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b01      	cmp	r3, #1
 8019de4:	d101      	bne.n	8019dea <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019de6:	f002 f8b6 	bl	801bf56 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019dea:	4b6f      	ldr	r3, [pc, #444]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	f000 817a 	beq.w	801a0e8 <RadioIrqProcess+0x3f8>
 8019df4:	4b6c      	ldr	r3, [pc, #432]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	f000 8174 	beq.w	801a0e8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019e00:	4b69      	ldr	r3, [pc, #420]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	4798      	blx	r3
        break;
 8019e08:	e16e      	b.n	801a0e8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019e0a:	4868      	ldr	r0, [pc, #416]	; (8019fac <RadioIrqProcess+0x2bc>)
 8019e0c:	f002 ffa2 	bl	801cd54 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019e10:	4b63      	ldr	r3, [pc, #396]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019e12:	785b      	ldrb	r3, [r3, #1]
 8019e14:	f083 0301 	eor.w	r3, r3, #1
 8019e18:	b2db      	uxtb	r3, r3
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d014      	beq.n	8019e48 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8019e1e:	2000      	movs	r0, #0
 8019e20:	f000 fff8 	bl	801ae14 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019e24:	2100      	movs	r1, #0
 8019e26:	f640 1002 	movw	r0, #2306	; 0x902
 8019e2a:	f001 fd77 	bl	801b91c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8019e2e:	f640 1044 	movw	r0, #2372	; 0x944
 8019e32:	f001 fd87 	bl	801b944 <SUBGRF_ReadRegister>
 8019e36:	4603      	mov	r3, r0
 8019e38:	f043 0302 	orr.w	r3, r3, #2
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	4619      	mov	r1, r3
 8019e40:	f640 1044 	movw	r0, #2372	; 0x944
 8019e44:	f001 fd6a 	bl	801b91c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019e48:	1dfb      	adds	r3, r7, #7
 8019e4a:	22ff      	movs	r2, #255	; 0xff
 8019e4c:	4619      	mov	r1, r3
 8019e4e:	4858      	ldr	r0, [pc, #352]	; (8019fb0 <RadioIrqProcess+0x2c0>)
 8019e50:	f000 feb0 	bl	801abb4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019e54:	4857      	ldr	r0, [pc, #348]	; (8019fb4 <RadioIrqProcess+0x2c4>)
 8019e56:	f001 fd0f 	bl	801b878 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019e5a:	4b53      	ldr	r3, [pc, #332]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	f000 8144 	beq.w	801a0ec <RadioIrqProcess+0x3fc>
 8019e64:	4b50      	ldr	r3, [pc, #320]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	689b      	ldr	r3, [r3, #8]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f000 813e 	beq.w	801a0ec <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019e70:	4b4b      	ldr	r3, [pc, #300]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d10e      	bne.n	8019e98 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019e7a:	4b4b      	ldr	r3, [pc, #300]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	689c      	ldr	r4, [r3, #8]
 8019e80:	79fb      	ldrb	r3, [r7, #7]
 8019e82:	b299      	uxth	r1, r3
 8019e84:	4b46      	ldr	r3, [pc, #280]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019e86:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8019e8a:	b21a      	sxth	r2, r3
 8019e8c:	4b44      	ldr	r3, [pc, #272]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019e8e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019e92:	4847      	ldr	r0, [pc, #284]	; (8019fb0 <RadioIrqProcess+0x2c0>)
 8019e94:	47a0      	blx	r4
                break;
 8019e96:	e01d      	b.n	8019ed4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019e98:	4b41      	ldr	r3, [pc, #260]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e9c:	463a      	mov	r2, r7
 8019e9e:	4611      	mov	r1, r2
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f001 ff7d 	bl	801bda0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8019ea6:	4b40      	ldr	r3, [pc, #256]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	689c      	ldr	r4, [r3, #8]
 8019eac:	79fb      	ldrb	r3, [r7, #7]
 8019eae:	b299      	uxth	r1, r3
 8019eb0:	4b3b      	ldr	r3, [pc, #236]	; (8019fa0 <RadioIrqProcess+0x2b0>)
 8019eb2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019eb6:	b218      	sxth	r0, r3
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019ebe:	4a3e      	ldr	r2, [pc, #248]	; (8019fb8 <RadioIrqProcess+0x2c8>)
 8019ec0:	fb82 5203 	smull	r5, r2, r2, r3
 8019ec4:	1192      	asrs	r2, r2, #6
 8019ec6:	17db      	asrs	r3, r3, #31
 8019ec8:	1ad3      	subs	r3, r2, r3
 8019eca:	b25b      	sxtb	r3, r3
 8019ecc:	4602      	mov	r2, r0
 8019ece:	4838      	ldr	r0, [pc, #224]	; (8019fb0 <RadioIrqProcess+0x2c0>)
 8019ed0:	47a0      	blx	r4
                break;
 8019ed2:	bf00      	nop
        break;
 8019ed4:	e10a      	b.n	801a0ec <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019ed6:	2000      	movs	r0, #0
 8019ed8:	f000 ff9c 	bl	801ae14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019edc:	4b32      	ldr	r3, [pc, #200]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f000 8105 	beq.w	801a0f0 <RadioIrqProcess+0x400>
 8019ee6:	4b30      	ldr	r3, [pc, #192]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	699b      	ldr	r3, [r3, #24]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	f000 80ff 	beq.w	801a0f0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8019ef2:	4b2d      	ldr	r3, [pc, #180]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	699b      	ldr	r3, [r3, #24]
 8019ef8:	2000      	movs	r0, #0
 8019efa:	4798      	blx	r3
        break;
 8019efc:	e0f8      	b.n	801a0f0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8019efe:	2000      	movs	r0, #0
 8019f00:	f000 ff88 	bl	801ae14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019f04:	4b28      	ldr	r3, [pc, #160]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	f000 80f3 	beq.w	801a0f4 <RadioIrqProcess+0x404>
 8019f0e:	4b26      	ldr	r3, [pc, #152]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	699b      	ldr	r3, [r3, #24]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	f000 80ed 	beq.w	801a0f4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8019f1a:	4b23      	ldr	r3, [pc, #140]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	699b      	ldr	r3, [r3, #24]
 8019f20:	2001      	movs	r0, #1
 8019f22:	4798      	blx	r3
        break;
 8019f24:	e0e6      	b.n	801a0f4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019f26:	4b25      	ldr	r3, [pc, #148]	; (8019fbc <RadioIrqProcess+0x2cc>)
 8019f28:	2201      	movs	r2, #1
 8019f2a:	2100      	movs	r1, #0
 8019f2c:	2002      	movs	r0, #2
 8019f2e:	f003 f91b 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019f32:	f000 fe25 	bl	801ab80 <SUBGRF_GetOperatingMode>
 8019f36:	4603      	mov	r3, r0
 8019f38:	2b04      	cmp	r3, #4
 8019f3a:	d115      	bne.n	8019f68 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019f3c:	4819      	ldr	r0, [pc, #100]	; (8019fa4 <RadioIrqProcess+0x2b4>)
 8019f3e:	f002 ff09 	bl	801cd54 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019f42:	2000      	movs	r0, #0
 8019f44:	f000 ff66 	bl	801ae14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019f48:	4b17      	ldr	r3, [pc, #92]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	f000 80d3 	beq.w	801a0f8 <RadioIrqProcess+0x408>
 8019f52:	4b15      	ldr	r3, [pc, #84]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	f000 80cd 	beq.w	801a0f8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8019f5e:	4b12      	ldr	r3, [pc, #72]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	4798      	blx	r3
        break;
 8019f66:	e0c7      	b.n	801a0f8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019f68:	f000 fe0a 	bl	801ab80 <SUBGRF_GetOperatingMode>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	2b05      	cmp	r3, #5
 8019f70:	f040 80c2 	bne.w	801a0f8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8019f74:	480d      	ldr	r0, [pc, #52]	; (8019fac <RadioIrqProcess+0x2bc>)
 8019f76:	f002 feed 	bl	801cd54 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019f7a:	2000      	movs	r0, #0
 8019f7c:	f000 ff4a 	bl	801ae14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019f80:	4b09      	ldr	r3, [pc, #36]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	f000 80b7 	beq.w	801a0f8 <RadioIrqProcess+0x408>
 8019f8a:	4b07      	ldr	r3, [pc, #28]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	68db      	ldr	r3, [r3, #12]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	f000 80b1 	beq.w	801a0f8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8019f96:	4b04      	ldr	r3, [pc, #16]	; (8019fa8 <RadioIrqProcess+0x2b8>)
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	4798      	blx	r3
        break;
 8019f9e:	e0ab      	b.n	801a0f8 <RadioIrqProcess+0x408>
 8019fa0:	200017fc 	.word	0x200017fc
 8019fa4:	20001858 	.word	0x20001858
 8019fa8:	200017f8 	.word	0x200017f8
 8019fac:	20001870 	.word	0x20001870
 8019fb0:	200016f8 	.word	0x200016f8
 8019fb4:	20001820 	.word	0x20001820
 8019fb8:	10624dd3 	.word	0x10624dd3
 8019fbc:	0801e048 	.word	0x0801e048
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019fc0:	4b54      	ldr	r3, [pc, #336]	; (801a114 <RadioIrqProcess+0x424>)
 8019fc2:	2201      	movs	r2, #1
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	2002      	movs	r0, #2
 8019fc8:	f003 f8ce 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019fcc:	4b52      	ldr	r3, [pc, #328]	; (801a118 <RadioIrqProcess+0x428>)
 8019fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	f000 8093 	beq.w	801a0fc <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8019fd6:	4a51      	ldr	r2, [pc, #324]	; (801a11c <RadioIrqProcess+0x42c>)
 8019fd8:	4b4f      	ldr	r3, [pc, #316]	; (801a118 <RadioIrqProcess+0x428>)
 8019fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019fdc:	0c1b      	lsrs	r3, r3, #16
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	f640 1003 	movw	r0, #2307	; 0x903
 8019fe6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8019fe8:	4a4c      	ldr	r2, [pc, #304]	; (801a11c <RadioIrqProcess+0x42c>)
 8019fea:	4b4b      	ldr	r3, [pc, #300]	; (801a118 <RadioIrqProcess+0x428>)
 8019fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019fee:	0a1b      	lsrs	r3, r3, #8
 8019ff0:	b2db      	uxtb	r3, r3
 8019ff2:	4619      	mov	r1, r3
 8019ff4:	f640 1004 	movw	r0, #2308	; 0x904
 8019ff8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8019ffa:	4a48      	ldr	r2, [pc, #288]	; (801a11c <RadioIrqProcess+0x42c>)
 8019ffc:	4b46      	ldr	r3, [pc, #280]	; (801a118 <RadioIrqProcess+0x428>)
 8019ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a000:	b2db      	uxtb	r3, r3
 801a002:	4619      	mov	r1, r3
 801a004:	f640 1005 	movw	r0, #2309	; 0x905
 801a008:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a00a:	4c44      	ldr	r4, [pc, #272]	; (801a11c <RadioIrqProcess+0x42c>)
 801a00c:	4b44      	ldr	r3, [pc, #272]	; (801a120 <RadioIrqProcess+0x430>)
 801a00e:	f640 1002 	movw	r0, #2306	; 0x902
 801a012:	4798      	blx	r3
 801a014:	4603      	mov	r3, r0
 801a016:	f043 0301 	orr.w	r3, r3, #1
 801a01a:	b2db      	uxtb	r3, r3
 801a01c:	4619      	mov	r1, r3
 801a01e:	f640 1002 	movw	r0, #2306	; 0x902
 801a022:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a024:	4b3c      	ldr	r3, [pc, #240]	; (801a118 <RadioIrqProcess+0x428>)
 801a026:	2200      	movs	r2, #0
 801a028:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a02a:	2300      	movs	r3, #0
 801a02c:	2200      	movs	r2, #0
 801a02e:	f240 2162 	movw	r1, #610	; 0x262
 801a032:	f240 2062 	movw	r0, #610	; 0x262
 801a036:	f001 f8c1 	bl	801b1bc <SUBGRF_SetDioIrqParams>
        break;
 801a03a:	e05f      	b.n	801a0fc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a03c:	4b39      	ldr	r3, [pc, #228]	; (801a124 <RadioIrqProcess+0x434>)
 801a03e:	2201      	movs	r2, #1
 801a040:	2100      	movs	r1, #0
 801a042:	2002      	movs	r0, #2
 801a044:	f003 f890 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a048:	f001 ff55 	bl	801bef6 <RFW_Is_Init>
 801a04c:	4603      	mov	r3, r0
 801a04e:	2b01      	cmp	r3, #1
 801a050:	d156      	bne.n	801a100 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a052:	f001 ff86 	bl	801bf62 <RFW_ReceivePayload>
        break;
 801a056:	e053      	b.n	801a100 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a058:	4b33      	ldr	r3, [pc, #204]	; (801a128 <RadioIrqProcess+0x438>)
 801a05a:	2201      	movs	r2, #1
 801a05c:	2100      	movs	r1, #0
 801a05e:	2002      	movs	r0, #2
 801a060:	f003 f882 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a064:	e051      	b.n	801a10a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a066:	4831      	ldr	r0, [pc, #196]	; (801a12c <RadioIrqProcess+0x43c>)
 801a068:	f002 fe74 	bl	801cd54 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a06c:	4b2a      	ldr	r3, [pc, #168]	; (801a118 <RadioIrqProcess+0x428>)
 801a06e:	785b      	ldrb	r3, [r3, #1]
 801a070:	f083 0301 	eor.w	r3, r3, #1
 801a074:	b2db      	uxtb	r3, r3
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a07a:	2000      	movs	r0, #0
 801a07c:	f000 feca 	bl	801ae14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a080:	4b2b      	ldr	r3, [pc, #172]	; (801a130 <RadioIrqProcess+0x440>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d03d      	beq.n	801a104 <RadioIrqProcess+0x414>
 801a088:	4b29      	ldr	r3, [pc, #164]	; (801a130 <RadioIrqProcess+0x440>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	68db      	ldr	r3, [r3, #12]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d038      	beq.n	801a104 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a092:	4b27      	ldr	r3, [pc, #156]	; (801a130 <RadioIrqProcess+0x440>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	68db      	ldr	r3, [r3, #12]
 801a098:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a09a:	4b26      	ldr	r3, [pc, #152]	; (801a134 <RadioIrqProcess+0x444>)
 801a09c:	2201      	movs	r2, #1
 801a09e:	2100      	movs	r1, #0
 801a0a0:	2002      	movs	r0, #2
 801a0a2:	f003 f861 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a0a6:	e02d      	b.n	801a104 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a0a8:	4b23      	ldr	r3, [pc, #140]	; (801a138 <RadioIrqProcess+0x448>)
 801a0aa:	2201      	movs	r2, #1
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	2002      	movs	r0, #2
 801a0b0:	f003 f85a 	bl	801d168 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a0b4:	4b18      	ldr	r3, [pc, #96]	; (801a118 <RadioIrqProcess+0x428>)
 801a0b6:	785b      	ldrb	r3, [r3, #1]
 801a0b8:	f083 0301 	eor.w	r3, r3, #1
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d002      	beq.n	801a0c8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a0c2:	2000      	movs	r0, #0
 801a0c4:	f000 fea6 	bl	801ae14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a0c8:	4b19      	ldr	r3, [pc, #100]	; (801a130 <RadioIrqProcess+0x440>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d01b      	beq.n	801a108 <RadioIrqProcess+0x418>
 801a0d0:	4b17      	ldr	r3, [pc, #92]	; (801a130 <RadioIrqProcess+0x440>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	691b      	ldr	r3, [r3, #16]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d016      	beq.n	801a108 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a0da:	4b15      	ldr	r3, [pc, #84]	; (801a130 <RadioIrqProcess+0x440>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	691b      	ldr	r3, [r3, #16]
 801a0e0:	4798      	blx	r3
        break;
 801a0e2:	e011      	b.n	801a108 <RadioIrqProcess+0x418>
        break;
 801a0e4:	bf00      	nop
 801a0e6:	e010      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0e8:	bf00      	nop
 801a0ea:	e00e      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0ec:	bf00      	nop
 801a0ee:	e00c      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0f0:	bf00      	nop
 801a0f2:	e00a      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0f4:	bf00      	nop
 801a0f6:	e008      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0f8:	bf00      	nop
 801a0fa:	e006      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a0fc:	bf00      	nop
 801a0fe:	e004      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a100:	bf00      	nop
 801a102:	e002      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a104:	bf00      	nop
 801a106:	e000      	b.n	801a10a <RadioIrqProcess+0x41a>
        break;
 801a108:	bf00      	nop
    }
}
 801a10a:	bf00      	nop
 801a10c:	3708      	adds	r7, #8
 801a10e:	46bd      	mov	sp, r7
 801a110:	bdb0      	pop	{r4, r5, r7, pc}
 801a112:	bf00      	nop
 801a114:	0801e05c 	.word	0x0801e05c
 801a118:	200017fc 	.word	0x200017fc
 801a11c:	08019aff 	.word	0x08019aff
 801a120:	08019b23 	.word	0x08019b23
 801a124:	0801e068 	.word	0x0801e068
 801a128:	0801e074 	.word	0x0801e074
 801a12c:	20001870 	.word	0x20001870
 801a130:	200017f8 	.word	0x200017f8
 801a134:	0801e080 	.word	0x0801e080
 801a138:	0801e08c 	.word	0x0801e08c

0801a13c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a140:	4b09      	ldr	r3, [pc, #36]	; (801a168 <RadioTxPrbs+0x2c>)
 801a142:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a146:	2101      	movs	r1, #1
 801a148:	4618      	mov	r0, r3
 801a14a:	f001 fcdb 	bl	801bb04 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a14e:	4b07      	ldr	r3, [pc, #28]	; (801a16c <RadioTxPrbs+0x30>)
 801a150:	212d      	movs	r1, #45	; 0x2d
 801a152:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a156:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a158:	f000 ff1f 	bl	801af9a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a15c:	4804      	ldr	r0, [pc, #16]	; (801a170 <RadioTxPrbs+0x34>)
 801a15e:	f000 fe75 	bl	801ae4c <SUBGRF_SetTx>
}
 801a162:	bf00      	nop
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	200017fc 	.word	0x200017fc
 801a16c:	08019aff 	.word	0x08019aff
 801a170:	000fffff 	.word	0x000fffff

0801a174 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b084      	sub	sp, #16
 801a178:	af00      	add	r7, sp, #0
 801a17a:	4603      	mov	r3, r0
 801a17c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a182:	4618      	mov	r0, r3
 801a184:	f001 fce6 	bl	801bb54 <SUBGRF_SetRfTxPower>
 801a188:	4603      	mov	r3, r0
 801a18a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a18c:	210e      	movs	r1, #14
 801a18e:	f640 101f 	movw	r0, #2335	; 0x91f
 801a192:	f001 fbc3 	bl	801b91c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a196:	7bfb      	ldrb	r3, [r7, #15]
 801a198:	2101      	movs	r1, #1
 801a19a:	4618      	mov	r0, r3
 801a19c:	f001 fcb2 	bl	801bb04 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a1a0:	f000 fef2 	bl	801af88 <SUBGRF_SetTxContinuousWave>
}
 801a1a4:	bf00      	nop
 801a1a6:	3710      	adds	r7, #16
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b089      	sub	sp, #36	; 0x24
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	60f8      	str	r0, [r7, #12]
 801a1b4:	60b9      	str	r1, [r7, #8]
 801a1b6:	4613      	mov	r3, r2
 801a1b8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	61bb      	str	r3, [r7, #24]
 801a1c6:	e011      	b.n	801a1ec <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a1c8:	69bb      	ldr	r3, [r7, #24]
 801a1ca:	68ba      	ldr	r2, [r7, #8]
 801a1cc:	4413      	add	r3, r2
 801a1ce:	781a      	ldrb	r2, [r3, #0]
 801a1d0:	69bb      	ldr	r3, [r7, #24]
 801a1d2:	68b9      	ldr	r1, [r7, #8]
 801a1d4:	440b      	add	r3, r1
 801a1d6:	43d2      	mvns	r2, r2
 801a1d8:	b2d2      	uxtb	r2, r2
 801a1da:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a1dc:	69bb      	ldr	r3, [r7, #24]
 801a1de:	68fa      	ldr	r2, [r7, #12]
 801a1e0:	4413      	add	r3, r2
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a1e6:	69bb      	ldr	r3, [r7, #24]
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	61bb      	str	r3, [r7, #24]
 801a1ec:	79fb      	ldrb	r3, [r7, #7]
 801a1ee:	69ba      	ldr	r2, [r7, #24]
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	dbe9      	blt.n	801a1c8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	61bb      	str	r3, [r7, #24]
 801a1f8:	e049      	b.n	801a28e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a1fa:	69bb      	ldr	r3, [r7, #24]
 801a1fc:	425a      	negs	r2, r3
 801a1fe:	f003 0307 	and.w	r3, r3, #7
 801a202:	f002 0207 	and.w	r2, r2, #7
 801a206:	bf58      	it	pl
 801a208:	4253      	negpl	r3, r2
 801a20a:	b2db      	uxtb	r3, r3
 801a20c:	f1c3 0307 	rsb	r3, r3, #7
 801a210:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a212:	69bb      	ldr	r3, [r7, #24]
 801a214:	2b00      	cmp	r3, #0
 801a216:	da00      	bge.n	801a21a <payload_integration+0x6e>
 801a218:	3307      	adds	r3, #7
 801a21a:	10db      	asrs	r3, r3, #3
 801a21c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a21e:	69bb      	ldr	r3, [r7, #24]
 801a220:	3301      	adds	r3, #1
 801a222:	425a      	negs	r2, r3
 801a224:	f003 0307 	and.w	r3, r3, #7
 801a228:	f002 0207 	and.w	r2, r2, #7
 801a22c:	bf58      	it	pl
 801a22e:	4253      	negpl	r3, r2
 801a230:	b2db      	uxtb	r3, r3
 801a232:	f1c3 0307 	rsb	r3, r3, #7
 801a236:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a238:	69bb      	ldr	r3, [r7, #24]
 801a23a:	3301      	adds	r3, #1
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	da00      	bge.n	801a242 <payload_integration+0x96>
 801a240:	3307      	adds	r3, #7
 801a242:	10db      	asrs	r3, r3, #3
 801a244:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a246:	7dbb      	ldrb	r3, [r7, #22]
 801a248:	68ba      	ldr	r2, [r7, #8]
 801a24a:	4413      	add	r3, r2
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	461a      	mov	r2, r3
 801a250:	7dfb      	ldrb	r3, [r7, #23]
 801a252:	fa42 f303 	asr.w	r3, r2, r3
 801a256:	b2db      	uxtb	r3, r3
 801a258:	f003 0301 	and.w	r3, r3, #1
 801a25c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a25e:	7ffa      	ldrb	r2, [r7, #31]
 801a260:	7cfb      	ldrb	r3, [r7, #19]
 801a262:	4053      	eors	r3, r2
 801a264:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a266:	7d3b      	ldrb	r3, [r7, #20]
 801a268:	68fa      	ldr	r2, [r7, #12]
 801a26a:	4413      	add	r3, r2
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	b25a      	sxtb	r2, r3
 801a270:	7ff9      	ldrb	r1, [r7, #31]
 801a272:	7d7b      	ldrb	r3, [r7, #21]
 801a274:	fa01 f303 	lsl.w	r3, r1, r3
 801a278:	b25b      	sxtb	r3, r3
 801a27a:	4313      	orrs	r3, r2
 801a27c:	b259      	sxtb	r1, r3
 801a27e:	7d3b      	ldrb	r3, [r7, #20]
 801a280:	68fa      	ldr	r2, [r7, #12]
 801a282:	4413      	add	r3, r2
 801a284:	b2ca      	uxtb	r2, r1
 801a286:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a288:	69bb      	ldr	r3, [r7, #24]
 801a28a:	3301      	adds	r3, #1
 801a28c:	61bb      	str	r3, [r7, #24]
 801a28e:	79fb      	ldrb	r3, [r7, #7]
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	69ba      	ldr	r2, [r7, #24]
 801a294:	429a      	cmp	r2, r3
 801a296:	dbb0      	blt.n	801a1fa <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a298:	7ffb      	ldrb	r3, [r7, #31]
 801a29a:	01db      	lsls	r3, r3, #7
 801a29c:	b25a      	sxtb	r2, r3
 801a29e:	7ffb      	ldrb	r3, [r7, #31]
 801a2a0:	019b      	lsls	r3, r3, #6
 801a2a2:	b25b      	sxtb	r3, r3
 801a2a4:	4313      	orrs	r3, r2
 801a2a6:	b25b      	sxtb	r3, r3
 801a2a8:	7ffa      	ldrb	r2, [r7, #31]
 801a2aa:	2a00      	cmp	r2, #0
 801a2ac:	d101      	bne.n	801a2b2 <payload_integration+0x106>
 801a2ae:	2220      	movs	r2, #32
 801a2b0:	e000      	b.n	801a2b4 <payload_integration+0x108>
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	4313      	orrs	r3, r2
 801a2b6:	b259      	sxtb	r1, r3
 801a2b8:	79fb      	ldrb	r3, [r7, #7]
 801a2ba:	68fa      	ldr	r2, [r7, #12]
 801a2bc:	4413      	add	r3, r2
 801a2be:	b2ca      	uxtb	r2, r1
 801a2c0:	701a      	strb	r2, [r3, #0]
}
 801a2c2:	bf00      	nop
 801a2c4:	3724      	adds	r7, #36	; 0x24
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bc80      	pop	{r7}
 801a2ca:	4770      	bx	lr

0801a2cc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b08c      	sub	sp, #48	; 0x30
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	60b9      	str	r1, [r7, #8]
 801a2d4:	607a      	str	r2, [r7, #4]
 801a2d6:	603b      	str	r3, [r7, #0]
 801a2d8:	4603      	mov	r3, r0
 801a2da:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a2dc:	2300      	movs	r3, #0
 801a2de:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	623b      	str	r3, [r7, #32]
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a2e8:	f001 fdff 	bl	801beea <RFW_DeInit>

    if( rxContinuous != 0 )
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d001      	beq.n	801a2f6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	bf14      	ite	ne
 801a2fc:	2301      	movne	r3, #1
 801a2fe:	2300      	moveq	r3, #0
 801a300:	b2da      	uxtb	r2, r3
 801a302:	4ba3      	ldr	r3, [pc, #652]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a304:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a306:	7bfb      	ldrb	r3, [r7, #15]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d003      	beq.n	801a314 <RadioSetRxGenericConfig+0x48>
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	f000 80dc 	beq.w	801a4ca <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a312:	e194      	b.n	801a63e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	689b      	ldr	r3, [r3, #8]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d003      	beq.n	801a324 <RadioSetRxGenericConfig+0x58>
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	68db      	ldr	r3, [r3, #12]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d102      	bne.n	801a32a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a324:	f04f 33ff 	mov.w	r3, #4294967295
 801a328:	e18a      	b.n	801a640 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	7f9b      	ldrb	r3, [r3, #30]
 801a32e:	2b08      	cmp	r3, #8
 801a330:	d902      	bls.n	801a338 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a332:	f04f 33ff 	mov.w	r3, #4294967295
 801a336:	e183      	b.n	801a640 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a338:	68bb      	ldr	r3, [r7, #8]
 801a33a:	6919      	ldr	r1, [r3, #16]
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	7f9b      	ldrb	r3, [r3, #30]
 801a340:	b29a      	uxth	r2, r3
 801a342:	f107 0320 	add.w	r3, r7, #32
 801a346:	4618      	mov	r0, r3
 801a348:	f001 fec2 	bl	801c0d0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b00      	cmp	r3, #0
 801a352:	bf14      	ite	ne
 801a354:	2301      	movne	r3, #1
 801a356:	2300      	moveq	r3, #0
 801a358:	b2db      	uxtb	r3, r3
 801a35a:	4618      	mov	r0, r3
 801a35c:	f000 fe26 	bl	801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a360:	4b8b      	ldr	r3, [pc, #556]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a362:	2200      	movs	r2, #0
 801a364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a368:	68bb      	ldr	r3, [r7, #8]
 801a36a:	689b      	ldr	r3, [r3, #8]
 801a36c:	4a88      	ldr	r2, [pc, #544]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a36e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a370:	68bb      	ldr	r3, [r7, #8]
 801a372:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a376:	4b86      	ldr	r3, [pc, #536]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a37c:	68bb      	ldr	r3, [r7, #8]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	4618      	mov	r0, r3
 801a382:	f001 fce5 	bl	801bd50 <SUBGRF_GetFskBandwidthRegValue>
 801a386:	4603      	mov	r3, r0
 801a388:	461a      	mov	r2, r3
 801a38a:	4b81      	ldr	r3, [pc, #516]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a38c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a390:	4b7f      	ldr	r3, [pc, #508]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a392:	2200      	movs	r2, #0
 801a394:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	68db      	ldr	r3, [r3, #12]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	00db      	lsls	r3, r3, #3
 801a39e:	b29a      	uxth	r2, r3
 801a3a0:	4b7b      	ldr	r3, [pc, #492]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3a2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	7fda      	ldrb	r2, [r3, #31]
 801a3a8:	4b79      	ldr	r3, [pc, #484]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3aa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	7f9b      	ldrb	r3, [r3, #30]
 801a3b0:	00db      	lsls	r3, r3, #3
 801a3b2:	b2da      	uxtb	r2, r3
 801a3b4:	4b76      	ldr	r3, [pc, #472]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3b6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a3b8:	68bb      	ldr	r3, [r7, #8]
 801a3ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a3be:	4b74      	ldr	r3, [pc, #464]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3c0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a3c2:	68bb      	ldr	r3, [r7, #8]
 801a3c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d105      	bne.n	801a3d8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a3cc:	68bb      	ldr	r3, [r7, #8]
 801a3ce:	695b      	ldr	r3, [r3, #20]
 801a3d0:	b2da      	uxtb	r2, r3
 801a3d2:	4b6f      	ldr	r3, [pc, #444]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3d4:	759a      	strb	r2, [r3, #22]
 801a3d6:	e00b      	b.n	801a3f0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a3d8:	68bb      	ldr	r3, [r7, #8]
 801a3da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a3de:	2b02      	cmp	r3, #2
 801a3e0:	d103      	bne.n	801a3ea <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a3e2:	4b6b      	ldr	r3, [pc, #428]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3e4:	22ff      	movs	r2, #255	; 0xff
 801a3e6:	759a      	strb	r2, [r3, #22]
 801a3e8:	e002      	b.n	801a3f0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a3ea:	4b69      	ldr	r3, [pc, #420]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a3ec:	22ff      	movs	r2, #255	; 0xff
 801a3ee:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a3f6:	2b02      	cmp	r3, #2
 801a3f8:	d004      	beq.n	801a404 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a3fa:	68bb      	ldr	r3, [r7, #8]
 801a3fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a400:	2b02      	cmp	r3, #2
 801a402:	d12d      	bne.n	801a460 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a404:	68bb      	ldr	r3, [r7, #8]
 801a406:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a40a:	2bf1      	cmp	r3, #241	; 0xf1
 801a40c:	d00c      	beq.n	801a428 <RadioSetRxGenericConfig+0x15c>
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a414:	2bf2      	cmp	r3, #242	; 0xf2
 801a416:	d007      	beq.n	801a428 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a41e:	2b01      	cmp	r3, #1
 801a420:	d002      	beq.n	801a428 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a422:	f04f 33ff 	mov.w	r3, #4294967295
 801a426:	e10b      	b.n	801a640 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a428:	2300      	movs	r3, #0
 801a42a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a430:	4b58      	ldr	r3, [pc, #352]	; (801a594 <RadioSetRxGenericConfig+0x2c8>)
 801a432:	6819      	ldr	r1, [r3, #0]
 801a434:	f107 0314 	add.w	r3, r7, #20
 801a438:	4a57      	ldr	r2, [pc, #348]	; (801a598 <RadioSetRxGenericConfig+0x2cc>)
 801a43a:	4618      	mov	r0, r3
 801a43c:	f001 fd48 	bl	801bed0 <RFW_Init>
 801a440:	4603      	mov	r3, r0
 801a442:	2b00      	cmp	r3, #0
 801a444:	d002      	beq.n	801a44c <RadioSetRxGenericConfig+0x180>
                return -1;
 801a446:	f04f 33ff 	mov.w	r3, #4294967295
 801a44a:	e0f9      	b.n	801a640 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a44c:	4b50      	ldr	r3, [pc, #320]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a44e:	2200      	movs	r2, #0
 801a450:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a452:	4b4f      	ldr	r3, [pc, #316]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a454:	2201      	movs	r2, #1
 801a456:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a458:	4b4d      	ldr	r3, [pc, #308]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a45a:	2200      	movs	r2, #0
 801a45c:	755a      	strb	r2, [r3, #21]
        {
 801a45e:	e00e      	b.n	801a47e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a460:	68bb      	ldr	r3, [r7, #8]
 801a462:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a466:	4b4a      	ldr	r3, [pc, #296]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a468:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a470:	4b47      	ldr	r3, [pc, #284]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a472:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a47a:	4b45      	ldr	r3, [pc, #276]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a47c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a47e:	f7ff fa3c 	bl	80198fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a482:	2000      	movs	r0, #0
 801a484:	f7fe fbd0 	bl	8018c28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a488:	4844      	ldr	r0, [pc, #272]	; (801a59c <RadioSetRxGenericConfig+0x2d0>)
 801a48a:	f001 f82d 	bl	801b4e8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a48e:	4844      	ldr	r0, [pc, #272]	; (801a5a0 <RadioSetRxGenericConfig+0x2d4>)
 801a490:	f001 f8fc 	bl	801b68c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a494:	f107 0320 	add.w	r3, r7, #32
 801a498:	4618      	mov	r0, r3
 801a49a:	f000 fbc0 	bl	801ac1e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	8b9b      	ldrh	r3, [r3, #28]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f000 fc0a 	bl	801acbc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a4a8:	68bb      	ldr	r3, [r7, #8]
 801a4aa:	8b1b      	ldrh	r3, [r3, #24]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f000 fbe5 	bl	801ac7c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a4b8:	fb03 f202 	mul.w	r2, r3, r2
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	689b      	ldr	r3, [r3, #8]
 801a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4c4:	4a32      	ldr	r2, [pc, #200]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a4c6:	6093      	str	r3, [r2, #8]
        break;
 801a4c8:	e0b9      	b.n	801a63e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d102      	bne.n	801a4d8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d6:	e0b3      	b.n	801a640 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a4d8:	68bb      	ldr	r3, [r7, #8]
 801a4da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a4de:	2b01      	cmp	r3, #1
 801a4e0:	d104      	bne.n	801a4ec <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a4e2:	68bb      	ldr	r3, [r7, #8]
 801a4e4:	695b      	ldr	r3, [r3, #20]
 801a4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a4ea:	e002      	b.n	801a4f2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a4ec:	23ff      	movs	r3, #255	; 0xff
 801a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a4f2:	68bb      	ldr	r3, [r7, #8]
 801a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	bf14      	ite	ne
 801a4fa:	2301      	movne	r3, #1
 801a4fc:	2300      	moveq	r3, #0
 801a4fe:	b2db      	uxtb	r3, r3
 801a500:	4618      	mov	r0, r3
 801a502:	f000 fd53 	bl	801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	b2db      	uxtb	r3, r3
 801a50a:	4618      	mov	r0, r3
 801a50c:	f000 fd5d 	bl	801afca <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a510:	4b1f      	ldr	r3, [pc, #124]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a512:	2201      	movs	r2, #1
 801a514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a51e:	4b1c      	ldr	r3, [pc, #112]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a524:	68bb      	ldr	r3, [r7, #8]
 801a526:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a52a:	4b19      	ldr	r3, [pc, #100]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a52c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a536:	4b16      	ldr	r3, [pc, #88]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a538:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a542:	2b02      	cmp	r3, #2
 801a544:	d010      	beq.n	801a568 <RadioSetRxGenericConfig+0x29c>
 801a546:	2b02      	cmp	r3, #2
 801a548:	dc2c      	bgt.n	801a5a4 <RadioSetRxGenericConfig+0x2d8>
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d002      	beq.n	801a554 <RadioSetRxGenericConfig+0x288>
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d005      	beq.n	801a55e <RadioSetRxGenericConfig+0x292>
            break;
 801a552:	e027      	b.n	801a5a4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a554:	4b0e      	ldr	r3, [pc, #56]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a556:	2200      	movs	r2, #0
 801a558:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a55c:	e023      	b.n	801a5a6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a55e:	4b0c      	ldr	r3, [pc, #48]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a560:	2201      	movs	r2, #1
 801a562:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a566:	e01e      	b.n	801a5a6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a568:	68bb      	ldr	r3, [r7, #8]
 801a56a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a56e:	2b0b      	cmp	r3, #11
 801a570:	d004      	beq.n	801a57c <RadioSetRxGenericConfig+0x2b0>
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a578:	2b0c      	cmp	r3, #12
 801a57a:	d104      	bne.n	801a586 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a57c:	4b04      	ldr	r3, [pc, #16]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a57e:	2201      	movs	r2, #1
 801a580:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a584:	e00f      	b.n	801a5a6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a586:	4b02      	ldr	r3, [pc, #8]	; (801a590 <RadioSetRxGenericConfig+0x2c4>)
 801a588:	2200      	movs	r2, #0
 801a58a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a58e:	e00a      	b.n	801a5a6 <RadioSetRxGenericConfig+0x2da>
 801a590:	200017fc 	.word	0x200017fc
 801a594:	200017f8 	.word	0x200017f8
 801a598:	20001870 	.word	0x20001870
 801a59c:	20001834 	.word	0x20001834
 801a5a0:	2000180a 	.word	0x2000180a
            break;
 801a5a4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a5a6:	4b28      	ldr	r3, [pc, #160]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5a8:	2201      	movs	r2, #1
 801a5aa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a5b0:	4b25      	ldr	r3, [pc, #148]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5b2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a5ba:	4b23      	ldr	r3, [pc, #140]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5bc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a5be:	4a22      	ldr	r2, [pc, #136]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a5c4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a5cc:	4b1e      	ldr	r3, [pc, #120]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5ce:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a5d8:	4b1b      	ldr	r3, [pc, #108]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a5de:	f7ff f98c 	bl	80198fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a5e2:	2001      	movs	r0, #1
 801a5e4:	f7fe fb20 	bl	8018c28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a5e8:	4818      	ldr	r0, [pc, #96]	; (801a64c <RadioSetRxGenericConfig+0x380>)
 801a5ea:	f000 ff7d 	bl	801b4e8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5ee:	4818      	ldr	r0, [pc, #96]	; (801a650 <RadioSetRxGenericConfig+0x384>)
 801a5f0:	f001 f84c 	bl	801b68c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a5f4:	4b14      	ldr	r3, [pc, #80]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a5f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a5fa:	2b01      	cmp	r3, #1
 801a5fc:	d10d      	bne.n	801a61a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a5fe:	f240 7036 	movw	r0, #1846	; 0x736
 801a602:	f001 f99f 	bl	801b944 <SUBGRF_ReadRegister>
 801a606:	4603      	mov	r3, r0
 801a608:	f023 0304 	bic.w	r3, r3, #4
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	4619      	mov	r1, r3
 801a610:	f240 7036 	movw	r0, #1846	; 0x736
 801a614:	f001 f982 	bl	801b91c <SUBGRF_WriteRegister>
 801a618:	e00c      	b.n	801a634 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a61a:	f240 7036 	movw	r0, #1846	; 0x736
 801a61e:	f001 f991 	bl	801b944 <SUBGRF_ReadRegister>
 801a622:	4603      	mov	r3, r0
 801a624:	f043 0304 	orr.w	r3, r3, #4
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	4619      	mov	r1, r3
 801a62c:	f240 7036 	movw	r0, #1846	; 0x736
 801a630:	f001 f974 	bl	801b91c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a634:	4b04      	ldr	r3, [pc, #16]	; (801a648 <RadioSetRxGenericConfig+0x37c>)
 801a636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a63a:	609a      	str	r2, [r3, #8]
        break;
 801a63c:	bf00      	nop
    }
    return status;
 801a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a640:	4618      	mov	r0, r3
 801a642:	3730      	adds	r7, #48	; 0x30
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}
 801a648:	200017fc 	.word	0x200017fc
 801a64c:	20001834 	.word	0x20001834
 801a650:	2000180a 	.word	0x2000180a

0801a654 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b08e      	sub	sp, #56	; 0x38
 801a658:	af00      	add	r7, sp, #0
 801a65a:	60b9      	str	r1, [r7, #8]
 801a65c:	607b      	str	r3, [r7, #4]
 801a65e:	4603      	mov	r3, r0
 801a660:	73fb      	strb	r3, [r7, #15]
 801a662:	4613      	mov	r3, r2
 801a664:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a666:	2300      	movs	r3, #0
 801a668:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a66a:	2300      	movs	r3, #0
 801a66c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a66e:	f001 fc3c 	bl	801beea <RFW_DeInit>
    switch( modem )
 801a672:	7bfb      	ldrb	r3, [r7, #15]
 801a674:	2b03      	cmp	r3, #3
 801a676:	f200 8204 	bhi.w	801aa82 <RadioSetTxGenericConfig+0x42e>
 801a67a:	a201      	add	r2, pc, #4	; (adr r2, 801a680 <RadioSetTxGenericConfig+0x2c>)
 801a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a680:	0801a805 	.word	0x0801a805
 801a684:	0801a94d 	.word	0x0801a94d
 801a688:	0801aa45 	.word	0x0801aa45
 801a68c:	0801a691 	.word	0x0801a691
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a690:	68bb      	ldr	r3, [r7, #8]
 801a692:	7c9b      	ldrb	r3, [r3, #18]
 801a694:	2b08      	cmp	r3, #8
 801a696:	d902      	bls.n	801a69e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a698:	f04f 33ff 	mov.w	r3, #4294967295
 801a69c:	e206      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a69e:	68bb      	ldr	r3, [r7, #8]
 801a6a0:	6899      	ldr	r1, [r3, #8]
 801a6a2:	68bb      	ldr	r3, [r7, #8]
 801a6a4:	7c9b      	ldrb	r3, [r3, #18]
 801a6a6:	b29a      	uxth	r2, r3
 801a6a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f001 fd0f 	bl	801c0d0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d102      	bne.n	801a6c0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a6ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a6be:	e1f5      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	f242 7210 	movw	r2, #10000	; 0x2710
 801a6c8:	4293      	cmp	r3, r2
 801a6ca:	d813      	bhi.n	801a6f4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a6cc:	2302      	movs	r3, #2
 801a6ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a6d2:	4b99      	ldr	r3, [pc, #612]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a6d4:	2203      	movs	r2, #3
 801a6d6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a6d8:	4b97      	ldr	r3, [pc, #604]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a6da:	2203      	movs	r2, #3
 801a6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	4a94      	ldr	r2, [pc, #592]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a6e6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	7cda      	ldrb	r2, [r3, #19]
 801a6ec:	4b92      	ldr	r3, [pc, #584]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a6f2:	e017      	b.n	801a724 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a6fa:	4b8f      	ldr	r3, [pc, #572]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a700:	4b8d      	ldr	r3, [pc, #564]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a702:	2200      	movs	r2, #0
 801a704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	4a8a      	ldr	r2, [pc, #552]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a70e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	7cda      	ldrb	r2, [r3, #19]
 801a714:	4b88      	ldr	r3, [pc, #544]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	089b      	lsrs	r3, r3, #2
 801a720:	4a85      	ldr	r2, [pc, #532]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a722:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	685b      	ldr	r3, [r3, #4]
 801a728:	b29b      	uxth	r3, r3
 801a72a:	00db      	lsls	r3, r3, #3
 801a72c:	b29a      	uxth	r2, r3
 801a72e:	4b82      	ldr	r3, [pc, #520]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a730:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a732:	4b81      	ldr	r3, [pc, #516]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a734:	2204      	movs	r2, #4
 801a736:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	7c9b      	ldrb	r3, [r3, #18]
 801a73c:	00db      	lsls	r3, r3, #3
 801a73e:	b2da      	uxtb	r2, r3
 801a740:	4b7d      	ldr	r3, [pc, #500]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a742:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a744:	4b7c      	ldr	r3, [pc, #496]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a746:	2200      	movs	r2, #0
 801a748:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	7d9b      	ldrb	r3, [r3, #22]
 801a74e:	2b02      	cmp	r3, #2
 801a750:	d003      	beq.n	801a75a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a752:	68bb      	ldr	r3, [r7, #8]
 801a754:	7d1b      	ldrb	r3, [r3, #20]
 801a756:	2b02      	cmp	r3, #2
 801a758:	d12b      	bne.n	801a7b2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	7d5b      	ldrb	r3, [r3, #21]
 801a75e:	2bf1      	cmp	r3, #241	; 0xf1
 801a760:	d00a      	beq.n	801a778 <RadioSetTxGenericConfig+0x124>
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	7d5b      	ldrb	r3, [r3, #21]
 801a766:	2bf2      	cmp	r3, #242	; 0xf2
 801a768:	d006      	beq.n	801a778 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a76a:	68bb      	ldr	r3, [r7, #8]
 801a76c:	7d5b      	ldrb	r3, [r3, #21]
 801a76e:	2b01      	cmp	r3, #1
 801a770:	d002      	beq.n	801a778 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a772:	f04f 33ff 	mov.w	r3, #4294967295
 801a776:	e199      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a77c:	2301      	movs	r3, #1
 801a77e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a782:	4b6e      	ldr	r3, [pc, #440]	; (801a93c <RadioSetTxGenericConfig+0x2e8>)
 801a784:	6819      	ldr	r1, [r3, #0]
 801a786:	f107 0320 	add.w	r3, r7, #32
 801a78a:	4a6d      	ldr	r2, [pc, #436]	; (801a940 <RadioSetTxGenericConfig+0x2ec>)
 801a78c:	4618      	mov	r0, r3
 801a78e:	f001 fb9f 	bl	801bed0 <RFW_Init>
 801a792:	4603      	mov	r3, r0
 801a794:	2b00      	cmp	r3, #0
 801a796:	d002      	beq.n	801a79e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801a798:	f04f 33ff 	mov.w	r3, #4294967295
 801a79c:	e186      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a79e:	4b66      	ldr	r3, [pc, #408]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a7a4:	4b64      	ldr	r3, [pc, #400]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a7aa:	4b63      	ldr	r3, [pc, #396]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	755a      	strb	r2, [r3, #21]
        {
 801a7b0:	e00b      	b.n	801a7ca <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	7d5a      	ldrb	r2, [r3, #21]
 801a7b6:	4b60      	ldr	r3, [pc, #384]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7b8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a7ba:	68bb      	ldr	r3, [r7, #8]
 801a7bc:	7d9a      	ldrb	r2, [r3, #22]
 801a7be:	4b5e      	ldr	r3, [pc, #376]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7c0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	7d1a      	ldrb	r2, [r3, #20]
 801a7c6:	4b5c      	ldr	r3, [pc, #368]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a7c8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a7ca:	f7ff f896 	bl	80198fa <RadioStandby>
        RadioSetModem( radio_modem );
 801a7ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f7fe fa28 	bl	8018c28 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7d8:	485a      	ldr	r0, [pc, #360]	; (801a944 <RadioSetTxGenericConfig+0x2f0>)
 801a7da:	f000 fe85 	bl	801b4e8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7de:	485a      	ldr	r0, [pc, #360]	; (801a948 <RadioSetTxGenericConfig+0x2f4>)
 801a7e0:	f000 ff54 	bl	801b68c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a7e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f000 fa18 	bl	801ac1e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a7ee:	68bb      	ldr	r3, [r7, #8]
 801a7f0:	8a1b      	ldrh	r3, [r3, #16]
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f000 fa62 	bl	801acbc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	899b      	ldrh	r3, [r3, #12]
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f000 fa3d 	bl	801ac7c <SUBGRF_SetCrcPolynomial>
        break;
 801a802:	e13f      	b.n	801aa84 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d102      	bne.n	801a812 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a80c:	f04f 33ff 	mov.w	r3, #4294967295
 801a810:	e14c      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a812:	68bb      	ldr	r3, [r7, #8]
 801a814:	7c9b      	ldrb	r3, [r3, #18]
 801a816:	2b08      	cmp	r3, #8
 801a818:	d902      	bls.n	801a820 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a81a:	f04f 33ff 	mov.w	r3, #4294967295
 801a81e:	e145      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	6899      	ldr	r1, [r3, #8]
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	7c9b      	ldrb	r3, [r3, #18]
 801a828:	b29a      	uxth	r2, r3
 801a82a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a82e:	4618      	mov	r0, r3
 801a830:	f001 fc4e 	bl	801c0d0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a834:	4b40      	ldr	r3, [pc, #256]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a836:	2200      	movs	r2, #0
 801a838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	4a3d      	ldr	r2, [pc, #244]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a842:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	7cda      	ldrb	r2, [r3, #19]
 801a848:	4b3b      	ldr	r3, [pc, #236]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	699b      	ldr	r3, [r3, #24]
 801a852:	4a39      	ldr	r2, [pc, #228]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a854:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a856:	4b38      	ldr	r3, [pc, #224]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a858:	2200      	movs	r2, #0
 801a85a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	b29b      	uxth	r3, r3
 801a862:	00db      	lsls	r3, r3, #3
 801a864:	b29a      	uxth	r2, r3
 801a866:	4b34      	ldr	r3, [pc, #208]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a868:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a86a:	4b33      	ldr	r3, [pc, #204]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a86c:	2204      	movs	r2, #4
 801a86e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	7c9b      	ldrb	r3, [r3, #18]
 801a874:	00db      	lsls	r3, r3, #3
 801a876:	b2da      	uxtb	r2, r3
 801a878:	4b2f      	ldr	r3, [pc, #188]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a87a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a87c:	4b2e      	ldr	r3, [pc, #184]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a87e:	2200      	movs	r2, #0
 801a880:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	7d9b      	ldrb	r3, [r3, #22]
 801a886:	2b02      	cmp	r3, #2
 801a888:	d003      	beq.n	801a892 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	7d1b      	ldrb	r3, [r3, #20]
 801a88e:	2b02      	cmp	r3, #2
 801a890:	d12a      	bne.n	801a8e8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	7d5b      	ldrb	r3, [r3, #21]
 801a896:	2bf1      	cmp	r3, #241	; 0xf1
 801a898:	d00a      	beq.n	801a8b0 <RadioSetTxGenericConfig+0x25c>
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	7d5b      	ldrb	r3, [r3, #21]
 801a89e:	2bf2      	cmp	r3, #242	; 0xf2
 801a8a0:	d006      	beq.n	801a8b0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	7d5b      	ldrb	r3, [r3, #21]
 801a8a6:	2b01      	cmp	r3, #1
 801a8a8:	d002      	beq.n	801a8b0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ae:	e0fd      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a8b4:	68bb      	ldr	r3, [r7, #8]
 801a8b6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a8b8:	4b20      	ldr	r3, [pc, #128]	; (801a93c <RadioSetTxGenericConfig+0x2e8>)
 801a8ba:	6819      	ldr	r1, [r3, #0]
 801a8bc:	f107 0314 	add.w	r3, r7, #20
 801a8c0:	4a1f      	ldr	r2, [pc, #124]	; (801a940 <RadioSetTxGenericConfig+0x2ec>)
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f001 fb04 	bl	801bed0 <RFW_Init>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d002      	beq.n	801a8d4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a8d2:	e0eb      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a8d4:	4b18      	ldr	r3, [pc, #96]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a8da:	4b17      	ldr	r3, [pc, #92]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8dc:	2201      	movs	r2, #1
 801a8de:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a8e0:	4b15      	ldr	r3, [pc, #84]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	755a      	strb	r2, [r3, #21]
        {
 801a8e6:	e00b      	b.n	801a900 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	7d5a      	ldrb	r2, [r3, #21]
 801a8ec:	4b12      	ldr	r3, [pc, #72]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8ee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	7d9a      	ldrb	r2, [r3, #22]
 801a8f4:	4b10      	ldr	r3, [pc, #64]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8f6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	7d1a      	ldrb	r2, [r3, #20]
 801a8fc:	4b0e      	ldr	r3, [pc, #56]	; (801a938 <RadioSetTxGenericConfig+0x2e4>)
 801a8fe:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a900:	f7fe fffb 	bl	80198fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a904:	2000      	movs	r0, #0
 801a906:	f7fe f98f 	bl	8018c28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a90a:	480e      	ldr	r0, [pc, #56]	; (801a944 <RadioSetTxGenericConfig+0x2f0>)
 801a90c:	f000 fdec 	bl	801b4e8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a910:	480d      	ldr	r0, [pc, #52]	; (801a948 <RadioSetTxGenericConfig+0x2f4>)
 801a912:	f000 febb 	bl	801b68c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a91a:	4618      	mov	r0, r3
 801a91c:	f000 f97f 	bl	801ac1e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	8a1b      	ldrh	r3, [r3, #16]
 801a924:	4618      	mov	r0, r3
 801a926:	f000 f9c9 	bl	801acbc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	899b      	ldrh	r3, [r3, #12]
 801a92e:	4618      	mov	r0, r3
 801a930:	f000 f9a4 	bl	801ac7c <SUBGRF_SetCrcPolynomial>
        break;
 801a934:	e0a6      	b.n	801aa84 <RadioSetTxGenericConfig+0x430>
 801a936:	bf00      	nop
 801a938:	200017fc 	.word	0x200017fc
 801a93c:	200017f8 	.word	0x200017f8
 801a940:	20001858 	.word	0x20001858
 801a944:	20001834 	.word	0x20001834
 801a948:	2000180a 	.word	0x2000180a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a94c:	4b59      	ldr	r3, [pc, #356]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a94e:	2201      	movs	r2, #1
 801a950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	781a      	ldrb	r2, [r3, #0]
 801a958:	4b56      	ldr	r3, [pc, #344]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a95a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	785a      	ldrb	r2, [r3, #1]
 801a962:	4b54      	ldr	r3, [pc, #336]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	789a      	ldrb	r2, [r3, #2]
 801a96c:	4b51      	ldr	r3, [pc, #324]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a96e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	78db      	ldrb	r3, [r3, #3]
 801a976:	2b02      	cmp	r3, #2
 801a978:	d010      	beq.n	801a99c <RadioSetTxGenericConfig+0x348>
 801a97a:	2b02      	cmp	r3, #2
 801a97c:	dc20      	bgt.n	801a9c0 <RadioSetTxGenericConfig+0x36c>
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d002      	beq.n	801a988 <RadioSetTxGenericConfig+0x334>
 801a982:	2b01      	cmp	r3, #1
 801a984:	d005      	beq.n	801a992 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801a986:	e01b      	b.n	801a9c0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a988:	4b4a      	ldr	r3, [pc, #296]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a98a:	2200      	movs	r2, #0
 801a98c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a990:	e017      	b.n	801a9c2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a992:	4b48      	ldr	r3, [pc, #288]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a994:	2201      	movs	r2, #1
 801a996:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a99a:	e012      	b.n	801a9c2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	2b0b      	cmp	r3, #11
 801a9a2:	d003      	beq.n	801a9ac <RadioSetTxGenericConfig+0x358>
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	781b      	ldrb	r3, [r3, #0]
 801a9a8:	2b0c      	cmp	r3, #12
 801a9aa:	d104      	bne.n	801a9b6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9ac:	4b41      	ldr	r3, [pc, #260]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9b4:	e005      	b.n	801a9c2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9b6:	4b3f      	ldr	r3, [pc, #252]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9be:	e000      	b.n	801a9c2 <RadioSetTxGenericConfig+0x36e>
            break;
 801a9c0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a9c2:	4b3c      	ldr	r3, [pc, #240]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9c4:	2201      	movs	r2, #1
 801a9c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a9c8:	68bb      	ldr	r3, [r7, #8]
 801a9ca:	889a      	ldrh	r2, [r3, #4]
 801a9cc:	4b39      	ldr	r3, [pc, #228]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9ce:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	799a      	ldrb	r2, [r3, #6]
 801a9d4:	4b37      	ldr	r3, [pc, #220]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9d6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	79da      	ldrb	r2, [r3, #7]
 801a9dc:	4b35      	ldr	r3, [pc, #212]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9de:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	7a1a      	ldrb	r2, [r3, #8]
 801a9e6:	4b33      	ldr	r3, [pc, #204]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801a9e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a9ec:	f7fe ff85 	bl	80198fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a9f0:	2001      	movs	r0, #1
 801a9f2:	f7fe f919 	bl	8018c28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a9f6:	4830      	ldr	r0, [pc, #192]	; (801aab8 <RadioSetTxGenericConfig+0x464>)
 801a9f8:	f000 fd76 	bl	801b4e8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9fc:	482f      	ldr	r0, [pc, #188]	; (801aabc <RadioSetTxGenericConfig+0x468>)
 801a9fe:	f000 fe45 	bl	801b68c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801aa02:	4b2c      	ldr	r3, [pc, #176]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aa08:	2b06      	cmp	r3, #6
 801aa0a:	d10d      	bne.n	801aa28 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aa0c:	f640 0089 	movw	r0, #2185	; 0x889
 801aa10:	f000 ff98 	bl	801b944 <SUBGRF_ReadRegister>
 801aa14:	4603      	mov	r3, r0
 801aa16:	f023 0304 	bic.w	r3, r3, #4
 801aa1a:	b2db      	uxtb	r3, r3
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	f640 0089 	movw	r0, #2185	; 0x889
 801aa22:	f000 ff7b 	bl	801b91c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801aa26:	e02d      	b.n	801aa84 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801aa28:	f640 0089 	movw	r0, #2185	; 0x889
 801aa2c:	f000 ff8a 	bl	801b944 <SUBGRF_ReadRegister>
 801aa30:	4603      	mov	r3, r0
 801aa32:	f043 0304 	orr.w	r3, r3, #4
 801aa36:	b2db      	uxtb	r3, r3
 801aa38:	4619      	mov	r1, r3
 801aa3a:	f640 0089 	movw	r0, #2185	; 0x889
 801aa3e:	f000 ff6d 	bl	801b91c <SUBGRF_WriteRegister>
        break;
 801aa42:	e01f      	b.n	801aa84 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d004      	beq.n	801aa56 <RadioSetTxGenericConfig+0x402>
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aa54:	d902      	bls.n	801aa5c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801aa56:	f04f 33ff 	mov.w	r3, #4294967295
 801aa5a:	e027      	b.n	801aaac <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801aa5c:	2003      	movs	r0, #3
 801aa5e:	f7fe f8e3 	bl	8018c28 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aa62:	4b14      	ldr	r3, [pc, #80]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa64:	2202      	movs	r2, #2
 801aa66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	4a11      	ldr	r2, [pc, #68]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa70:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aa72:	4b10      	ldr	r3, [pc, #64]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa74:	2216      	movs	r2, #22
 801aa76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa7a:	480f      	ldr	r0, [pc, #60]	; (801aab8 <RadioSetTxGenericConfig+0x464>)
 801aa7c:	f000 fd34 	bl	801b4e8 <SUBGRF_SetModulationParams>
        break;
 801aa80:	e000      	b.n	801aa84 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801aa82:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aa84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f001 f863 	bl	801bb54 <SUBGRF_SetRfTxPower>
 801aa8e:	4603      	mov	r3, r0
 801aa90:	461a      	mov	r2, r3
 801aa92:	4b08      	ldr	r3, [pc, #32]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa94:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801aa98:	4b06      	ldr	r3, [pc, #24]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aa9a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f001 fa37 	bl	801bf12 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801aaa4:	4a03      	ldr	r2, [pc, #12]	; (801aab4 <RadioSetTxGenericConfig+0x460>)
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	6053      	str	r3, [r2, #4]
    return 0;
 801aaaa:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	3738      	adds	r7, #56	; 0x38
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bd80      	pop	{r7, pc}
 801aab4:	200017fc 	.word	0x200017fc
 801aab8:	20001834 	.word	0x20001834
 801aabc:	2000180a 	.word	0x2000180a

0801aac0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801aac0:	b480      	push	{r7}
 801aac2:	b085      	sub	sp, #20
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801aac8:	2301      	movs	r3, #1
 801aaca:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 801aace:	4618      	mov	r0, r3
 801aad0:	3714      	adds	r7, #20
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bc80      	pop	{r7}
 801aad6:	4770      	bx	lr

0801aad8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801aad8:	b480      	push	{r7}
 801aada:	b083      	sub	sp, #12
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801aae2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801aae4:	4618      	mov	r0, r3
 801aae6:	370c      	adds	r7, #12
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bc80      	pop	{r7}
 801aaec:	4770      	bx	lr
	...

0801aaf0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d002      	beq.n	801ab04 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801aafe:	4a1d      	ldr	r2, [pc, #116]	; (801ab74 <SUBGRF_Init+0x84>)
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801ab04:	f7e7 fcae 	bl	8002464 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801ab08:	2002      	movs	r0, #2
 801ab0a:	f001 f8ff 	bl	801bd0c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801ab0e:	4b1a      	ldr	r3, [pc, #104]	; (801ab78 <SUBGRF_Init+0x88>)
 801ab10:	2200      	movs	r2, #0
 801ab12:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801ab14:	2000      	movs	r0, #0
 801ab16:	f000 f97d 	bl	801ae14 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ab1a:	f7f1 ff1f 	bl	800c95c <RBI_IsTCXO>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	2b01      	cmp	r3, #1
 801ab22:	d10e      	bne.n	801ab42 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801ab24:	2140      	movs	r1, #64	; 0x40
 801ab26:	2001      	movs	r0, #1
 801ab28:	f000 fb82 	bl	801b230 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801ab2c:	2100      	movs	r1, #0
 801ab2e:	f640 1011 	movw	r0, #2321	; 0x911
 801ab32:	f000 fef3 	bl	801b91c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801ab36:	237f      	movs	r3, #127	; 0x7f
 801ab38:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ab3a:	7b38      	ldrb	r0, [r7, #12]
 801ab3c:	f000 fa8b 	bl	801b056 <SUBGRF_Calibrate>
 801ab40:	e009      	b.n	801ab56 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ab42:	2120      	movs	r1, #32
 801ab44:	f640 1011 	movw	r0, #2321	; 0x911
 801ab48:	f000 fee8 	bl	801b91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ab4c:	2120      	movs	r1, #32
 801ab4e:	f640 1012 	movw	r0, #2322	; 0x912
 801ab52:	f000 fee3 	bl	801b91c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ab56:	210e      	movs	r1, #14
 801ab58:	f640 101f 	movw	r0, #2335	; 0x91f
 801ab5c:	f000 fede 	bl	801b91c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801ab60:	f7f1 fee0 	bl	800c924 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ab64:	4b05      	ldr	r3, [pc, #20]	; (801ab7c <SUBGRF_Init+0x8c>)
 801ab66:	2201      	movs	r2, #1
 801ab68:	701a      	strb	r2, [r3, #0]
}
 801ab6a:	bf00      	nop
 801ab6c:	3710      	adds	r7, #16
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	20001894 	.word	0x20001894
 801ab78:	20001890 	.word	0x20001890
 801ab7c:	20001888 	.word	0x20001888

0801ab80 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ab80:	b480      	push	{r7}
 801ab82:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ab84:	4b02      	ldr	r3, [pc, #8]	; (801ab90 <SUBGRF_GetOperatingMode+0x10>)
 801ab86:	781b      	ldrb	r3, [r3, #0]
}
 801ab88:	4618      	mov	r0, r3
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bc80      	pop	{r7}
 801ab8e:	4770      	bx	lr
 801ab90:	20001888 	.word	0x20001888

0801ab94 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b082      	sub	sp, #8
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	460b      	mov	r3, r1
 801ab9e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801aba0:	78fb      	ldrb	r3, [r7, #3]
 801aba2:	461a      	mov	r2, r3
 801aba4:	6879      	ldr	r1, [r7, #4]
 801aba6:	2000      	movs	r0, #0
 801aba8:	f000 ff24 	bl	801b9f4 <SUBGRF_WriteBuffer>
}
 801abac:	bf00      	nop
 801abae:	3708      	adds	r7, #8
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}

0801abb4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b086      	sub	sp, #24
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	60b9      	str	r1, [r7, #8]
 801abbe:	4613      	mov	r3, r2
 801abc0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801abc2:	2300      	movs	r3, #0
 801abc4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801abc6:	f107 0317 	add.w	r3, r7, #23
 801abca:	4619      	mov	r1, r3
 801abcc:	68b8      	ldr	r0, [r7, #8]
 801abce:	f000 fe27 	bl	801b820 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	79fa      	ldrb	r2, [r7, #7]
 801abd8:	429a      	cmp	r2, r3
 801abda:	d201      	bcs.n	801abe0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801abdc:	2301      	movs	r3, #1
 801abde:	e007      	b.n	801abf0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801abe0:	7df8      	ldrb	r0, [r7, #23]
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	461a      	mov	r2, r3
 801abe8:	68f9      	ldr	r1, [r7, #12]
 801abea:	f000 ff25 	bl	801ba38 <SUBGRF_ReadBuffer>

    return 0;
 801abee:	2300      	movs	r3, #0
}
 801abf0:	4618      	mov	r0, r3
 801abf2:	3718      	adds	r7, #24
 801abf4:	46bd      	mov	sp, r7
 801abf6:	bd80      	pop	{r7, pc}

0801abf8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b084      	sub	sp, #16
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	60f8      	str	r0, [r7, #12]
 801ac00:	460b      	mov	r3, r1
 801ac02:	607a      	str	r2, [r7, #4]
 801ac04:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801ac06:	7afb      	ldrb	r3, [r7, #11]
 801ac08:	4619      	mov	r1, r3
 801ac0a:	68f8      	ldr	r0, [r7, #12]
 801ac0c:	f7ff ffc2 	bl	801ab94 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f000 f91b 	bl	801ae4c <SUBGRF_SetTx>
}
 801ac16:	bf00      	nop
 801ac18:	3710      	adds	r7, #16
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd80      	pop	{r7, pc}

0801ac1e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ac1e:	b580      	push	{r7, lr}
 801ac20:	b082      	sub	sp, #8
 801ac22:	af00      	add	r7, sp, #0
 801ac24:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ac26:	2208      	movs	r2, #8
 801ac28:	6879      	ldr	r1, [r7, #4]
 801ac2a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801ac2e:	f000 fe9d 	bl	801b96c <SUBGRF_WriteRegisters>
    return 0;
 801ac32:	2300      	movs	r3, #0
}
 801ac34:	4618      	mov	r0, r3
 801ac36:	3708      	adds	r7, #8
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	4603      	mov	r3, r0
 801ac44:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801ac46:	88fb      	ldrh	r3, [r7, #6]
 801ac48:	0a1b      	lsrs	r3, r3, #8
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	b2db      	uxtb	r3, r3
 801ac4e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801ac50:	88fb      	ldrh	r3, [r7, #6]
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ac56:	f000 fb6f 	bl	801b338 <SUBGRF_GetPacketType>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d108      	bne.n	801ac72 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801ac60:	f107 030c 	add.w	r3, r7, #12
 801ac64:	2202      	movs	r2, #2
 801ac66:	4619      	mov	r1, r3
 801ac68:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801ac6c:	f000 fe7e 	bl	801b96c <SUBGRF_WriteRegisters>
            break;
 801ac70:	e000      	b.n	801ac74 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801ac72:	bf00      	nop
    }
}
 801ac74:	bf00      	nop
 801ac76:	3710      	adds	r7, #16
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}

0801ac7c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	4603      	mov	r3, r0
 801ac84:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ac86:	88fb      	ldrh	r3, [r7, #6]
 801ac88:	0a1b      	lsrs	r3, r3, #8
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	b2db      	uxtb	r3, r3
 801ac8e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ac90:	88fb      	ldrh	r3, [r7, #6]
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ac96:	f000 fb4f 	bl	801b338 <SUBGRF_GetPacketType>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d108      	bne.n	801acb2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801aca0:	f107 030c 	add.w	r3, r7, #12
 801aca4:	2202      	movs	r2, #2
 801aca6:	4619      	mov	r1, r3
 801aca8:	f240 60be 	movw	r0, #1726	; 0x6be
 801acac:	f000 fe5e 	bl	801b96c <SUBGRF_WriteRegisters>
            break;
 801acb0:	e000      	b.n	801acb4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801acb2:	bf00      	nop
    }
}
 801acb4:	bf00      	nop
 801acb6:	3710      	adds	r7, #16
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b084      	sub	sp, #16
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	4603      	mov	r3, r0
 801acc4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801acc6:	2300      	movs	r3, #0
 801acc8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801acca:	f000 fb35 	bl	801b338 <SUBGRF_GetPacketType>
 801acce:	4603      	mov	r3, r0
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d121      	bne.n	801ad18 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801acd4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801acd8:	f000 fe34 	bl	801b944 <SUBGRF_ReadRegister>
 801acdc:	4603      	mov	r3, r0
 801acde:	f023 0301 	bic.w	r3, r3, #1
 801ace2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801ace4:	88fb      	ldrh	r3, [r7, #6]
 801ace6:	0a1b      	lsrs	r3, r3, #8
 801ace8:	b29b      	uxth	r3, r3
 801acea:	b25b      	sxtb	r3, r3
 801acec:	f003 0301 	and.w	r3, r3, #1
 801acf0:	b25a      	sxtb	r2, r3
 801acf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acf6:	4313      	orrs	r3, r2
 801acf8:	b25b      	sxtb	r3, r3
 801acfa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801acfc:	7bfb      	ldrb	r3, [r7, #15]
 801acfe:	4619      	mov	r1, r3
 801ad00:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ad04:	f000 fe0a 	bl	801b91c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801ad08:	88fb      	ldrh	r3, [r7, #6]
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801ad12:	f000 fe03 	bl	801b91c <SUBGRF_WriteRegister>
            break;
 801ad16:	e000      	b.n	801ad1a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801ad18:	bf00      	nop
    }
}
 801ad1a:	bf00      	nop
 801ad1c:	3710      	adds	r7, #16
 801ad1e:	46bd      	mov	sp, r7
 801ad20:	bd80      	pop	{r7, pc}

0801ad22 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801ad22:	b580      	push	{r7, lr}
 801ad24:	b082      	sub	sp, #8
 801ad26:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801ad30:	2300      	movs	r3, #0
 801ad32:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801ad34:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801ad38:	f000 fe04 	bl	801b944 <SUBGRF_ReadRegister>
 801ad3c:	4603      	mov	r3, r0
 801ad3e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801ad40:	79fb      	ldrb	r3, [r7, #7]
 801ad42:	f023 0301 	bic.w	r3, r3, #1
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	4619      	mov	r1, r3
 801ad4a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801ad4e:	f000 fde5 	bl	801b91c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801ad52:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ad56:	f000 fdf5 	bl	801b944 <SUBGRF_ReadRegister>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801ad5e:	79bb      	ldrb	r3, [r7, #6]
 801ad60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ad64:	b2db      	uxtb	r3, r3
 801ad66:	4619      	mov	r1, r3
 801ad68:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ad6c:	f000 fdd6 	bl	801b91c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad74:	f000 f88a 	bl	801ae8c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801ad78:	463b      	mov	r3, r7
 801ad7a:	2204      	movs	r2, #4
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	f640 0019 	movw	r0, #2073	; 0x819
 801ad82:	f000 fe15 	bl	801b9b0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801ad86:	2000      	movs	r0, #0
 801ad88:	f000 f844 	bl	801ae14 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801ad8c:	79fb      	ldrb	r3, [r7, #7]
 801ad8e:	4619      	mov	r1, r3
 801ad90:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801ad94:	f000 fdc2 	bl	801b91c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801ad98:	79bb      	ldrb	r3, [r7, #6]
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ada0:	f000 fdbc 	bl	801b91c <SUBGRF_WriteRegister>

    return number;
 801ada4:	683b      	ldr	r3, [r7, #0]
}
 801ada6:	4618      	mov	r0, r3
 801ada8:	3708      	adds	r7, #8
 801adaa:	46bd      	mov	sp, r7
 801adac:	bd80      	pop	{r7, pc}
	...

0801adb0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801adb8:	2000      	movs	r0, #0
 801adba:	f7f1 fdba 	bl	800c932 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801adbe:	2002      	movs	r0, #2
 801adc0:	f000 ffa4 	bl	801bd0c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801adc4:	793b      	ldrb	r3, [r7, #4]
 801adc6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801adca:	b2db      	uxtb	r3, r3
 801adcc:	009b      	lsls	r3, r3, #2
 801adce:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801add0:	793b      	ldrb	r3, [r7, #4]
 801add2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801add6:	b2db      	uxtb	r3, r3
 801add8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801adda:	b25b      	sxtb	r3, r3
 801addc:	4313      	orrs	r3, r2
 801adde:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801ade0:	793b      	ldrb	r3, [r7, #4]
 801ade2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801adea:	4313      	orrs	r3, r2
 801adec:	b25b      	sxtb	r3, r3
 801adee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801adf0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801adf2:	f107 030f 	add.w	r3, r7, #15
 801adf6:	2201      	movs	r2, #1
 801adf8:	4619      	mov	r1, r3
 801adfa:	2084      	movs	r0, #132	; 0x84
 801adfc:	f000 fe3e 	bl	801ba7c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801ae00:	4b03      	ldr	r3, [pc, #12]	; (801ae10 <SUBGRF_SetSleep+0x60>)
 801ae02:	2200      	movs	r2, #0
 801ae04:	701a      	strb	r2, [r3, #0]
}
 801ae06:	bf00      	nop
 801ae08:	3710      	adds	r7, #16
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	bd80      	pop	{r7, pc}
 801ae0e:	bf00      	nop
 801ae10:	20001888 	.word	0x20001888

0801ae14 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b082      	sub	sp, #8
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801ae1e:	1dfb      	adds	r3, r7, #7
 801ae20:	2201      	movs	r2, #1
 801ae22:	4619      	mov	r1, r3
 801ae24:	2080      	movs	r0, #128	; 0x80
 801ae26:	f000 fe29 	bl	801ba7c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801ae2a:	79fb      	ldrb	r3, [r7, #7]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d103      	bne.n	801ae38 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801ae30:	4b05      	ldr	r3, [pc, #20]	; (801ae48 <SUBGRF_SetStandby+0x34>)
 801ae32:	2201      	movs	r2, #1
 801ae34:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801ae36:	e002      	b.n	801ae3e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801ae38:	4b03      	ldr	r3, [pc, #12]	; (801ae48 <SUBGRF_SetStandby+0x34>)
 801ae3a:	2202      	movs	r2, #2
 801ae3c:	701a      	strb	r2, [r3, #0]
}
 801ae3e:	bf00      	nop
 801ae40:	3708      	adds	r7, #8
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
 801ae46:	bf00      	nop
 801ae48:	20001888 	.word	0x20001888

0801ae4c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b084      	sub	sp, #16
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801ae54:	4b0c      	ldr	r3, [pc, #48]	; (801ae88 <SUBGRF_SetTx+0x3c>)
 801ae56:	2204      	movs	r2, #4
 801ae58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	0c1b      	lsrs	r3, r3, #16
 801ae5e:	b2db      	uxtb	r3, r3
 801ae60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	0a1b      	lsrs	r3, r3, #8
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801ae70:	f107 030c 	add.w	r3, r7, #12
 801ae74:	2203      	movs	r2, #3
 801ae76:	4619      	mov	r1, r3
 801ae78:	2083      	movs	r0, #131	; 0x83
 801ae7a:	f000 fdff 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801ae7e:	bf00      	nop
 801ae80:	3710      	adds	r7, #16
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	20001888 	.word	0x20001888

0801ae8c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801ae94:	4b0c      	ldr	r3, [pc, #48]	; (801aec8 <SUBGRF_SetRx+0x3c>)
 801ae96:	2205      	movs	r2, #5
 801ae98:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	0c1b      	lsrs	r3, r3, #16
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	0a1b      	lsrs	r3, r3, #8
 801aea6:	b2db      	uxtb	r3, r3
 801aea8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801aeb0:	f107 030c 	add.w	r3, r7, #12
 801aeb4:	2203      	movs	r2, #3
 801aeb6:	4619      	mov	r1, r3
 801aeb8:	2082      	movs	r0, #130	; 0x82
 801aeba:	f000 fddf 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801aebe:	bf00      	nop
 801aec0:	3710      	adds	r7, #16
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	20001888 	.word	0x20001888

0801aecc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b084      	sub	sp, #16
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801aed4:	4b0e      	ldr	r3, [pc, #56]	; (801af10 <SUBGRF_SetRxBoosted+0x44>)
 801aed6:	2205      	movs	r2, #5
 801aed8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801aeda:	2197      	movs	r1, #151	; 0x97
 801aedc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801aee0:	f000 fd1c 	bl	801b91c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	0c1b      	lsrs	r3, r3, #16
 801aee8:	b2db      	uxtb	r3, r3
 801aeea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	0a1b      	lsrs	r3, r3, #8
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	b2db      	uxtb	r3, r3
 801aef8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801aefa:	f107 030c 	add.w	r3, r7, #12
 801aefe:	2203      	movs	r2, #3
 801af00:	4619      	mov	r1, r3
 801af02:	2082      	movs	r0, #130	; 0x82
 801af04:	f000 fdba 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801af08:	bf00      	nop
 801af0a:	3710      	adds	r7, #16
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	20001888 	.word	0x20001888

0801af14 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b084      	sub	sp, #16
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
 801af1c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	0c1b      	lsrs	r3, r3, #16
 801af22:	b2db      	uxtb	r3, r3
 801af24:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	0a1b      	lsrs	r3, r3, #8
 801af2a:	b2db      	uxtb	r3, r3
 801af2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	b2db      	uxtb	r3, r3
 801af32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801af34:	683b      	ldr	r3, [r7, #0]
 801af36:	0c1b      	lsrs	r3, r3, #16
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	0a1b      	lsrs	r3, r3, #8
 801af40:	b2db      	uxtb	r3, r3
 801af42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	b2db      	uxtb	r3, r3
 801af48:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801af4a:	f107 0308 	add.w	r3, r7, #8
 801af4e:	2206      	movs	r2, #6
 801af50:	4619      	mov	r1, r3
 801af52:	2094      	movs	r0, #148	; 0x94
 801af54:	f000 fd92 	bl	801ba7c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801af58:	4b03      	ldr	r3, [pc, #12]	; (801af68 <SUBGRF_SetRxDutyCycle+0x54>)
 801af5a:	2206      	movs	r2, #6
 801af5c:	701a      	strb	r2, [r3, #0]
}
 801af5e:	bf00      	nop
 801af60:	3710      	adds	r7, #16
 801af62:	46bd      	mov	sp, r7
 801af64:	bd80      	pop	{r7, pc}
 801af66:	bf00      	nop
 801af68:	20001888 	.word	0x20001888

0801af6c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801af70:	2200      	movs	r2, #0
 801af72:	2100      	movs	r1, #0
 801af74:	20c5      	movs	r0, #197	; 0xc5
 801af76:	f000 fd81 	bl	801ba7c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801af7a:	4b02      	ldr	r3, [pc, #8]	; (801af84 <SUBGRF_SetCad+0x18>)
 801af7c:	2207      	movs	r2, #7
 801af7e:	701a      	strb	r2, [r3, #0]
}
 801af80:	bf00      	nop
 801af82:	bd80      	pop	{r7, pc}
 801af84:	20001888 	.word	0x20001888

0801af88 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801af8c:	2200      	movs	r2, #0
 801af8e:	2100      	movs	r1, #0
 801af90:	20d1      	movs	r0, #209	; 0xd1
 801af92:	f000 fd73 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801af96:	bf00      	nop
 801af98:	bd80      	pop	{r7, pc}

0801af9a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801af9a:	b580      	push	{r7, lr}
 801af9c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801af9e:	2200      	movs	r2, #0
 801afa0:	2100      	movs	r1, #0
 801afa2:	20d2      	movs	r0, #210	; 0xd2
 801afa4:	f000 fd6a 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801afa8:	bf00      	nop
 801afaa:	bd80      	pop	{r7, pc}

0801afac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b082      	sub	sp, #8
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	4603      	mov	r3, r0
 801afb4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801afb6:	1dfb      	adds	r3, r7, #7
 801afb8:	2201      	movs	r2, #1
 801afba:	4619      	mov	r1, r3
 801afbc:	209f      	movs	r0, #159	; 0x9f
 801afbe:	f000 fd5d 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801afc2:	bf00      	nop
 801afc4:	3708      	adds	r7, #8
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bd80      	pop	{r7, pc}

0801afca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801afca:	b580      	push	{r7, lr}
 801afcc:	b084      	sub	sp, #16
 801afce:	af00      	add	r7, sp, #0
 801afd0:	4603      	mov	r3, r0
 801afd2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801afd4:	1dfb      	adds	r3, r7, #7
 801afd6:	2201      	movs	r2, #1
 801afd8:	4619      	mov	r1, r3
 801afda:	20a0      	movs	r0, #160	; 0xa0
 801afdc:	f000 fd4e 	bl	801ba7c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801afe0:	79fb      	ldrb	r3, [r7, #7]
 801afe2:	2b3f      	cmp	r3, #63	; 0x3f
 801afe4:	d91c      	bls.n	801b020 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801afe6:	79fb      	ldrb	r3, [r7, #7]
 801afe8:	085b      	lsrs	r3, r3, #1
 801afea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801afec:	2300      	movs	r3, #0
 801afee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801aff0:	2300      	movs	r3, #0
 801aff2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801aff4:	e005      	b.n	801b002 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801aff6:	7bfb      	ldrb	r3, [r7, #15]
 801aff8:	089b      	lsrs	r3, r3, #2
 801affa:	73fb      	strb	r3, [r7, #15]
            exp++;
 801affc:	7bbb      	ldrb	r3, [r7, #14]
 801affe:	3301      	adds	r3, #1
 801b000:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b002:	7bfb      	ldrb	r3, [r7, #15]
 801b004:	2b1f      	cmp	r3, #31
 801b006:	d8f6      	bhi.n	801aff6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b008:	7bfb      	ldrb	r3, [r7, #15]
 801b00a:	00db      	lsls	r3, r3, #3
 801b00c:	b2da      	uxtb	r2, r3
 801b00e:	7bbb      	ldrb	r3, [r7, #14]
 801b010:	4413      	add	r3, r2
 801b012:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b014:	7b7b      	ldrb	r3, [r7, #13]
 801b016:	4619      	mov	r1, r3
 801b018:	f240 7006 	movw	r0, #1798	; 0x706
 801b01c:	f000 fc7e 	bl	801b91c <SUBGRF_WriteRegister>
    }
}
 801b020:	bf00      	nop
 801b022:	3710      	adds	r7, #16
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}

0801b028 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b082      	sub	sp, #8
 801b02c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b02e:	f7f1 fc9c 	bl	800c96a <RBI_IsDCDC>
 801b032:	4603      	mov	r3, r0
 801b034:	2b01      	cmp	r3, #1
 801b036:	d102      	bne.n	801b03e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b038:	2301      	movs	r3, #1
 801b03a:	71fb      	strb	r3, [r7, #7]
 801b03c:	e001      	b.n	801b042 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b03e:	2300      	movs	r3, #0
 801b040:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b042:	1dfb      	adds	r3, r7, #7
 801b044:	2201      	movs	r2, #1
 801b046:	4619      	mov	r1, r3
 801b048:	2096      	movs	r0, #150	; 0x96
 801b04a:	f000 fd17 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b04e:	bf00      	nop
 801b050:	3708      	adds	r7, #8
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}

0801b056 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b056:	b580      	push	{r7, lr}
 801b058:	b084      	sub	sp, #16
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b05e:	793b      	ldrb	r3, [r7, #4]
 801b060:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b064:	b2db      	uxtb	r3, r3
 801b066:	019b      	lsls	r3, r3, #6
 801b068:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b06a:	793b      	ldrb	r3, [r7, #4]
 801b06c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b070:	b2db      	uxtb	r3, r3
 801b072:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b074:	b25b      	sxtb	r3, r3
 801b076:	4313      	orrs	r3, r2
 801b078:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b07a:	793b      	ldrb	r3, [r7, #4]
 801b07c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b080:	b2db      	uxtb	r3, r3
 801b082:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b084:	b25b      	sxtb	r3, r3
 801b086:	4313      	orrs	r3, r2
 801b088:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b08a:	793b      	ldrb	r3, [r7, #4]
 801b08c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b090:	b2db      	uxtb	r3, r3
 801b092:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b094:	b25b      	sxtb	r3, r3
 801b096:	4313      	orrs	r3, r2
 801b098:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b09a:	793b      	ldrb	r3, [r7, #4]
 801b09c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b0a4:	b25b      	sxtb	r3, r3
 801b0a6:	4313      	orrs	r3, r2
 801b0a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b0aa:	793b      	ldrb	r3, [r7, #4]
 801b0ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b0b4:	b25b      	sxtb	r3, r3
 801b0b6:	4313      	orrs	r3, r2
 801b0b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b0ba:	793b      	ldrb	r3, [r7, #4]
 801b0bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b0c0:	b2db      	uxtb	r3, r3
 801b0c2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b0c4:	4313      	orrs	r3, r2
 801b0c6:	b25b      	sxtb	r3, r3
 801b0c8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b0ca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b0cc:	f107 030f 	add.w	r3, r7, #15
 801b0d0:	2201      	movs	r2, #1
 801b0d2:	4619      	mov	r1, r3
 801b0d4:	2089      	movs	r0, #137	; 0x89
 801b0d6:	f000 fcd1 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b0da:	bf00      	nop
 801b0dc:	3710      	adds	r7, #16
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
	...

0801b0e4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b084      	sub	sp, #16
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	4a1d      	ldr	r2, [pc, #116]	; (801b164 <SUBGRF_CalibrateImage+0x80>)
 801b0f0:	4293      	cmp	r3, r2
 801b0f2:	d904      	bls.n	801b0fe <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b0f4:	23e1      	movs	r3, #225	; 0xe1
 801b0f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b0f8:	23e9      	movs	r3, #233	; 0xe9
 801b0fa:	737b      	strb	r3, [r7, #13]
 801b0fc:	e027      	b.n	801b14e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	4a19      	ldr	r2, [pc, #100]	; (801b168 <SUBGRF_CalibrateImage+0x84>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d904      	bls.n	801b110 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b106:	23d7      	movs	r3, #215	; 0xd7
 801b108:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b10a:	23db      	movs	r3, #219	; 0xdb
 801b10c:	737b      	strb	r3, [r7, #13]
 801b10e:	e01e      	b.n	801b14e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	4a16      	ldr	r2, [pc, #88]	; (801b16c <SUBGRF_CalibrateImage+0x88>)
 801b114:	4293      	cmp	r3, r2
 801b116:	d904      	bls.n	801b122 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b118:	23c1      	movs	r3, #193	; 0xc1
 801b11a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b11c:	23c5      	movs	r3, #197	; 0xc5
 801b11e:	737b      	strb	r3, [r7, #13]
 801b120:	e015      	b.n	801b14e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	4a12      	ldr	r2, [pc, #72]	; (801b170 <SUBGRF_CalibrateImage+0x8c>)
 801b126:	4293      	cmp	r3, r2
 801b128:	d904      	bls.n	801b134 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b12a:	2375      	movs	r3, #117	; 0x75
 801b12c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b12e:	2381      	movs	r3, #129	; 0x81
 801b130:	737b      	strb	r3, [r7, #13]
 801b132:	e00c      	b.n	801b14e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	4a0f      	ldr	r2, [pc, #60]	; (801b174 <SUBGRF_CalibrateImage+0x90>)
 801b138:	4293      	cmp	r3, r2
 801b13a:	d904      	bls.n	801b146 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b13c:	236b      	movs	r3, #107	; 0x6b
 801b13e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b140:	236f      	movs	r3, #111	; 0x6f
 801b142:	737b      	strb	r3, [r7, #13]
 801b144:	e003      	b.n	801b14e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b146:	2329      	movs	r3, #41	; 0x29
 801b148:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b14a:	232b      	movs	r3, #43	; 0x2b
 801b14c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b14e:	f107 030c 	add.w	r3, r7, #12
 801b152:	2202      	movs	r2, #2
 801b154:	4619      	mov	r1, r3
 801b156:	2098      	movs	r0, #152	; 0x98
 801b158:	f000 fc90 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b15c:	bf00      	nop
 801b15e:	3710      	adds	r7, #16
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	35a4e900 	.word	0x35a4e900
 801b168:	32a9f880 	.word	0x32a9f880
 801b16c:	2de54480 	.word	0x2de54480
 801b170:	1b6b0b00 	.word	0x1b6b0b00
 801b174:	1954fc40 	.word	0x1954fc40

0801b178 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b178:	b590      	push	{r4, r7, lr}
 801b17a:	b085      	sub	sp, #20
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	4604      	mov	r4, r0
 801b180:	4608      	mov	r0, r1
 801b182:	4611      	mov	r1, r2
 801b184:	461a      	mov	r2, r3
 801b186:	4623      	mov	r3, r4
 801b188:	71fb      	strb	r3, [r7, #7]
 801b18a:	4603      	mov	r3, r0
 801b18c:	71bb      	strb	r3, [r7, #6]
 801b18e:	460b      	mov	r3, r1
 801b190:	717b      	strb	r3, [r7, #5]
 801b192:	4613      	mov	r3, r2
 801b194:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b196:	79fb      	ldrb	r3, [r7, #7]
 801b198:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b19a:	79bb      	ldrb	r3, [r7, #6]
 801b19c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b19e:	797b      	ldrb	r3, [r7, #5]
 801b1a0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b1a2:	793b      	ldrb	r3, [r7, #4]
 801b1a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b1a6:	f107 030c 	add.w	r3, r7, #12
 801b1aa:	2204      	movs	r2, #4
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	2095      	movs	r0, #149	; 0x95
 801b1b0:	f000 fc64 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b1b4:	bf00      	nop
 801b1b6:	3714      	adds	r7, #20
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bd90      	pop	{r4, r7, pc}

0801b1bc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b1bc:	b590      	push	{r4, r7, lr}
 801b1be:	b085      	sub	sp, #20
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	4608      	mov	r0, r1
 801b1c6:	4611      	mov	r1, r2
 801b1c8:	461a      	mov	r2, r3
 801b1ca:	4623      	mov	r3, r4
 801b1cc:	80fb      	strh	r3, [r7, #6]
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	80bb      	strh	r3, [r7, #4]
 801b1d2:	460b      	mov	r3, r1
 801b1d4:	807b      	strh	r3, [r7, #2]
 801b1d6:	4613      	mov	r3, r2
 801b1d8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b1da:	88fb      	ldrh	r3, [r7, #6]
 801b1dc:	0a1b      	lsrs	r3, r3, #8
 801b1de:	b29b      	uxth	r3, r3
 801b1e0:	b2db      	uxtb	r3, r3
 801b1e2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b1e4:	88fb      	ldrh	r3, [r7, #6]
 801b1e6:	b2db      	uxtb	r3, r3
 801b1e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b1ea:	88bb      	ldrh	r3, [r7, #4]
 801b1ec:	0a1b      	lsrs	r3, r3, #8
 801b1ee:	b29b      	uxth	r3, r3
 801b1f0:	b2db      	uxtb	r3, r3
 801b1f2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b1f4:	88bb      	ldrh	r3, [r7, #4]
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b1fa:	887b      	ldrh	r3, [r7, #2]
 801b1fc:	0a1b      	lsrs	r3, r3, #8
 801b1fe:	b29b      	uxth	r3, r3
 801b200:	b2db      	uxtb	r3, r3
 801b202:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b204:	887b      	ldrh	r3, [r7, #2]
 801b206:	b2db      	uxtb	r3, r3
 801b208:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b20a:	883b      	ldrh	r3, [r7, #0]
 801b20c:	0a1b      	lsrs	r3, r3, #8
 801b20e:	b29b      	uxth	r3, r3
 801b210:	b2db      	uxtb	r3, r3
 801b212:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b214:	883b      	ldrh	r3, [r7, #0]
 801b216:	b2db      	uxtb	r3, r3
 801b218:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b21a:	f107 0308 	add.w	r3, r7, #8
 801b21e:	2208      	movs	r2, #8
 801b220:	4619      	mov	r1, r3
 801b222:	2008      	movs	r0, #8
 801b224:	f000 fc2a 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b228:	bf00      	nop
 801b22a:	3714      	adds	r7, #20
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bd90      	pop	{r4, r7, pc}

0801b230 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b084      	sub	sp, #16
 801b234:	af00      	add	r7, sp, #0
 801b236:	4603      	mov	r3, r0
 801b238:	6039      	str	r1, [r7, #0]
 801b23a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b23c:	79fb      	ldrb	r3, [r7, #7]
 801b23e:	f003 0307 	and.w	r3, r3, #7
 801b242:	b2db      	uxtb	r3, r3
 801b244:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b246:	683b      	ldr	r3, [r7, #0]
 801b248:	0c1b      	lsrs	r3, r3, #16
 801b24a:	b2db      	uxtb	r3, r3
 801b24c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b24e:	683b      	ldr	r3, [r7, #0]
 801b250:	0a1b      	lsrs	r3, r3, #8
 801b252:	b2db      	uxtb	r3, r3
 801b254:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b256:	683b      	ldr	r3, [r7, #0]
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b25c:	f107 030c 	add.w	r3, r7, #12
 801b260:	2204      	movs	r2, #4
 801b262:	4619      	mov	r1, r3
 801b264:	2097      	movs	r0, #151	; 0x97
 801b266:	f000 fc09 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b26a:	bf00      	nop
 801b26c:	3710      	adds	r7, #16
 801b26e:	46bd      	mov	sp, r7
 801b270:	bd80      	pop	{r7, pc}
	...

0801b274 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b274:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b278:	b084      	sub	sp, #16
 801b27a:	af00      	add	r7, sp, #0
 801b27c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b27e:	2300      	movs	r3, #0
 801b280:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b282:	4b1d      	ldr	r3, [pc, #116]	; (801b2f8 <SUBGRF_SetRfFrequency+0x84>)
 801b284:	781b      	ldrb	r3, [r3, #0]
 801b286:	f083 0301 	eor.w	r3, r3, #1
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d005      	beq.n	801b29c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	f7ff ff27 	bl	801b0e4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b296:	4b18      	ldr	r3, [pc, #96]	; (801b2f8 <SUBGRF_SetRfFrequency+0x84>)
 801b298:	2201      	movs	r2, #1
 801b29a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	2200      	movs	r2, #0
 801b2a0:	461c      	mov	r4, r3
 801b2a2:	4615      	mov	r5, r2
 801b2a4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b2a8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b2ac:	4a13      	ldr	r2, [pc, #76]	; (801b2fc <SUBGRF_SetRfFrequency+0x88>)
 801b2ae:	f04f 0300 	mov.w	r3, #0
 801b2b2:	4640      	mov	r0, r8
 801b2b4:	4649      	mov	r1, r9
 801b2b6:	f7e5 fd69 	bl	8000d8c <__aeabi_uldivmod>
 801b2ba:	4602      	mov	r2, r0
 801b2bc:	460b      	mov	r3, r1
 801b2be:	4613      	mov	r3, r2
 801b2c0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	0e1b      	lsrs	r3, r3, #24
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	0c1b      	lsrs	r3, r3, #16
 801b2ce:	b2db      	uxtb	r3, r3
 801b2d0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	0a1b      	lsrs	r3, r3, #8
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b2e0:	f107 0308 	add.w	r3, r7, #8
 801b2e4:	2204      	movs	r2, #4
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	2086      	movs	r0, #134	; 0x86
 801b2ea:	f000 fbc7 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b2ee:	bf00      	nop
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b2f8:	20001890 	.word	0x20001890
 801b2fc:	01e84800 	.word	0x01e84800

0801b300 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b082      	sub	sp, #8
 801b304:	af00      	add	r7, sp, #0
 801b306:	4603      	mov	r3, r0
 801b308:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b30a:	79fa      	ldrb	r2, [r7, #7]
 801b30c:	4b09      	ldr	r3, [pc, #36]	; (801b334 <SUBGRF_SetPacketType+0x34>)
 801b30e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b310:	79fb      	ldrb	r3, [r7, #7]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d104      	bne.n	801b320 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b316:	2100      	movs	r1, #0
 801b318:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b31c:	f000 fafe 	bl	801b91c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b320:	1dfb      	adds	r3, r7, #7
 801b322:	2201      	movs	r2, #1
 801b324:	4619      	mov	r1, r3
 801b326:	208a      	movs	r0, #138	; 0x8a
 801b328:	f000 fba8 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b32c:	bf00      	nop
 801b32e:	3708      	adds	r7, #8
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}
 801b334:	20001889 	.word	0x20001889

0801b338 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b338:	b480      	push	{r7}
 801b33a:	af00      	add	r7, sp, #0
    return PacketType;
 801b33c:	4b02      	ldr	r3, [pc, #8]	; (801b348 <SUBGRF_GetPacketType+0x10>)
 801b33e:	781b      	ldrb	r3, [r3, #0]
}
 801b340:	4618      	mov	r0, r3
 801b342:	46bd      	mov	sp, r7
 801b344:	bc80      	pop	{r7}
 801b346:	4770      	bx	lr
 801b348:	20001889 	.word	0x20001889

0801b34c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b084      	sub	sp, #16
 801b350:	af00      	add	r7, sp, #0
 801b352:	4603      	mov	r3, r0
 801b354:	71fb      	strb	r3, [r7, #7]
 801b356:	460b      	mov	r3, r1
 801b358:	71bb      	strb	r3, [r7, #6]
 801b35a:	4613      	mov	r3, r2
 801b35c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b35e:	79fb      	ldrb	r3, [r7, #7]
 801b360:	2b01      	cmp	r3, #1
 801b362:	d149      	bne.n	801b3f8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b364:	2000      	movs	r0, #0
 801b366:	f7f1 fb07 	bl	800c978 <RBI_GetRFOMaxPowerConfig>
 801b36a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b36c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b370:	68fa      	ldr	r2, [r7, #12]
 801b372:	429a      	cmp	r2, r3
 801b374:	da01      	bge.n	801b37a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	2b0e      	cmp	r3, #14
 801b37e:	d10e      	bne.n	801b39e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b380:	2301      	movs	r3, #1
 801b382:	2201      	movs	r2, #1
 801b384:	2100      	movs	r1, #0
 801b386:	2004      	movs	r0, #4
 801b388:	f7ff fef6 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b38c:	79ba      	ldrb	r2, [r7, #6]
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	b2db      	uxtb	r3, r3
 801b392:	1ad3      	subs	r3, r2, r3
 801b394:	b2db      	uxtb	r3, r3
 801b396:	330e      	adds	r3, #14
 801b398:	b2db      	uxtb	r3, r3
 801b39a:	71bb      	strb	r3, [r7, #6]
 801b39c:	e01f      	b.n	801b3de <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	2b0a      	cmp	r3, #10
 801b3a2:	d10e      	bne.n	801b3c2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b3a4:	2301      	movs	r3, #1
 801b3a6:	2201      	movs	r2, #1
 801b3a8:	2100      	movs	r1, #0
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	f7ff fee4 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b3b0:	79ba      	ldrb	r2, [r7, #6]
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	b2db      	uxtb	r3, r3
 801b3b6:	1ad3      	subs	r3, r2, r3
 801b3b8:	b2db      	uxtb	r3, r3
 801b3ba:	330d      	adds	r3, #13
 801b3bc:	b2db      	uxtb	r3, r3
 801b3be:	71bb      	strb	r3, [r7, #6]
 801b3c0:	e00d      	b.n	801b3de <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b3c2:	2301      	movs	r3, #1
 801b3c4:	2201      	movs	r2, #1
 801b3c6:	2100      	movs	r1, #0
 801b3c8:	2007      	movs	r0, #7
 801b3ca:	f7ff fed5 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b3ce:	79ba      	ldrb	r2, [r7, #6]
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	1ad3      	subs	r3, r2, r3
 801b3d6:	b2db      	uxtb	r3, r3
 801b3d8:	330e      	adds	r3, #14
 801b3da:	b2db      	uxtb	r3, r3
 801b3dc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b3de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b3e2:	f113 0f11 	cmn.w	r3, #17
 801b3e6:	da01      	bge.n	801b3ec <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b3e8:	23ef      	movs	r3, #239	; 0xef
 801b3ea:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b3ec:	2118      	movs	r1, #24
 801b3ee:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b3f2:	f000 fa93 	bl	801b91c <SUBGRF_WriteRegister>
 801b3f6:	e067      	b.n	801b4c8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b3f8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b3fc:	f000 faa2 	bl	801b944 <SUBGRF_ReadRegister>
 801b400:	4603      	mov	r3, r0
 801b402:	f043 031e 	orr.w	r3, r3, #30
 801b406:	b2db      	uxtb	r3, r3
 801b408:	4619      	mov	r1, r3
 801b40a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b40e:	f000 fa85 	bl	801b91c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b412:	2001      	movs	r0, #1
 801b414:	f7f1 fab0 	bl	800c978 <RBI_GetRFOMaxPowerConfig>
 801b418:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b41a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b41e:	68fa      	ldr	r2, [r7, #12]
 801b420:	429a      	cmp	r2, r3
 801b422:	da01      	bge.n	801b428 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	2b14      	cmp	r3, #20
 801b42c:	d10e      	bne.n	801b44c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b42e:	2301      	movs	r3, #1
 801b430:	2200      	movs	r2, #0
 801b432:	2105      	movs	r1, #5
 801b434:	2003      	movs	r0, #3
 801b436:	f7ff fe9f 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b43a:	79ba      	ldrb	r2, [r7, #6]
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	b2db      	uxtb	r3, r3
 801b440:	1ad3      	subs	r3, r2, r3
 801b442:	b2db      	uxtb	r3, r3
 801b444:	3316      	adds	r3, #22
 801b446:	b2db      	uxtb	r3, r3
 801b448:	71bb      	strb	r3, [r7, #6]
 801b44a:	e031      	b.n	801b4b0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	2b11      	cmp	r3, #17
 801b450:	d10e      	bne.n	801b470 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b452:	2301      	movs	r3, #1
 801b454:	2200      	movs	r2, #0
 801b456:	2103      	movs	r1, #3
 801b458:	2002      	movs	r0, #2
 801b45a:	f7ff fe8d 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b45e:	79ba      	ldrb	r2, [r7, #6]
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	b2db      	uxtb	r3, r3
 801b464:	1ad3      	subs	r3, r2, r3
 801b466:	b2db      	uxtb	r3, r3
 801b468:	3316      	adds	r3, #22
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	71bb      	strb	r3, [r7, #6]
 801b46e:	e01f      	b.n	801b4b0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	2b0e      	cmp	r3, #14
 801b474:	d10e      	bne.n	801b494 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b476:	2301      	movs	r3, #1
 801b478:	2200      	movs	r2, #0
 801b47a:	2102      	movs	r1, #2
 801b47c:	2002      	movs	r0, #2
 801b47e:	f7ff fe7b 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b482:	79ba      	ldrb	r2, [r7, #6]
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	b2db      	uxtb	r3, r3
 801b488:	1ad3      	subs	r3, r2, r3
 801b48a:	b2db      	uxtb	r3, r3
 801b48c:	330e      	adds	r3, #14
 801b48e:	b2db      	uxtb	r3, r3
 801b490:	71bb      	strb	r3, [r7, #6]
 801b492:	e00d      	b.n	801b4b0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b494:	2301      	movs	r3, #1
 801b496:	2200      	movs	r2, #0
 801b498:	2107      	movs	r1, #7
 801b49a:	2004      	movs	r0, #4
 801b49c:	f7ff fe6c 	bl	801b178 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b4a0:	79ba      	ldrb	r2, [r7, #6]
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	1ad3      	subs	r3, r2, r3
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	3316      	adds	r3, #22
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b4b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b4b4:	f113 0f09 	cmn.w	r3, #9
 801b4b8:	da01      	bge.n	801b4be <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b4ba:	23f7      	movs	r3, #247	; 0xf7
 801b4bc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b4be:	2138      	movs	r1, #56	; 0x38
 801b4c0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b4c4:	f000 fa2a 	bl	801b91c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b4c8:	79bb      	ldrb	r3, [r7, #6]
 801b4ca:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b4cc:	797b      	ldrb	r3, [r7, #5]
 801b4ce:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b4d0:	f107 0308 	add.w	r3, r7, #8
 801b4d4:	2202      	movs	r2, #2
 801b4d6:	4619      	mov	r1, r3
 801b4d8:	208e      	movs	r0, #142	; 0x8e
 801b4da:	f000 facf 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b4de:	bf00      	nop
 801b4e0:	3710      	adds	r7, #16
 801b4e2:	46bd      	mov	sp, r7
 801b4e4:	bd80      	pop	{r7, pc}
	...

0801b4e8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b4e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b4ec:	b086      	sub	sp, #24
 801b4ee:	af00      	add	r7, sp, #0
 801b4f0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b4f6:	4a61      	ldr	r2, [pc, #388]	; (801b67c <SUBGRF_SetModulationParams+0x194>)
 801b4f8:	f107 0308 	add.w	r3, r7, #8
 801b4fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b500:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	781a      	ldrb	r2, [r3, #0]
 801b508:	4b5d      	ldr	r3, [pc, #372]	; (801b680 <SUBGRF_SetModulationParams+0x198>)
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	429a      	cmp	r2, r3
 801b50e:	d004      	beq.n	801b51a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	781b      	ldrb	r3, [r3, #0]
 801b514:	4618      	mov	r0, r3
 801b516:	f7ff fef3 	bl	801b300 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	2b03      	cmp	r3, #3
 801b520:	f200 80a5 	bhi.w	801b66e <SUBGRF_SetModulationParams+0x186>
 801b524:	a201      	add	r2, pc, #4	; (adr r2, 801b52c <SUBGRF_SetModulationParams+0x44>)
 801b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b52a:	bf00      	nop
 801b52c:	0801b53d 	.word	0x0801b53d
 801b530:	0801b5fd 	.word	0x0801b5fd
 801b534:	0801b5bf 	.word	0x0801b5bf
 801b538:	0801b62b 	.word	0x0801b62b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b53c:	2308      	movs	r3, #8
 801b53e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	685b      	ldr	r3, [r3, #4]
 801b544:	4a4f      	ldr	r2, [pc, #316]	; (801b684 <SUBGRF_SetModulationParams+0x19c>)
 801b546:	fbb2 f3f3 	udiv	r3, r2, r3
 801b54a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b54c:	697b      	ldr	r3, [r7, #20]
 801b54e:	0c1b      	lsrs	r3, r3, #16
 801b550:	b2db      	uxtb	r3, r3
 801b552:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	0a1b      	lsrs	r3, r3, #8
 801b558:	b2db      	uxtb	r3, r3
 801b55a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	b2db      	uxtb	r3, r3
 801b560:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	7b1b      	ldrb	r3, [r3, #12]
 801b566:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	7b5b      	ldrb	r3, [r3, #13]
 801b56c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	689b      	ldr	r3, [r3, #8]
 801b572:	2200      	movs	r2, #0
 801b574:	461c      	mov	r4, r3
 801b576:	4615      	mov	r5, r2
 801b578:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b57c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b580:	4a41      	ldr	r2, [pc, #260]	; (801b688 <SUBGRF_SetModulationParams+0x1a0>)
 801b582:	f04f 0300 	mov.w	r3, #0
 801b586:	4640      	mov	r0, r8
 801b588:	4649      	mov	r1, r9
 801b58a:	f7e5 fbff 	bl	8000d8c <__aeabi_uldivmod>
 801b58e:	4602      	mov	r2, r0
 801b590:	460b      	mov	r3, r1
 801b592:	4613      	mov	r3, r2
 801b594:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b596:	697b      	ldr	r3, [r7, #20]
 801b598:	0c1b      	lsrs	r3, r3, #16
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	0a1b      	lsrs	r3, r3, #8
 801b5a2:	b2db      	uxtb	r3, r3
 801b5a4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	b2db      	uxtb	r3, r3
 801b5aa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b5ac:	7cfb      	ldrb	r3, [r7, #19]
 801b5ae:	b29a      	uxth	r2, r3
 801b5b0:	f107 0308 	add.w	r3, r7, #8
 801b5b4:	4619      	mov	r1, r3
 801b5b6:	208b      	movs	r0, #139	; 0x8b
 801b5b8:	f000 fa60 	bl	801ba7c <SUBGRF_WriteCommand>
        break;
 801b5bc:	e058      	b.n	801b670 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b5be:	2304      	movs	r3, #4
 801b5c0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	691b      	ldr	r3, [r3, #16]
 801b5c6:	4a2f      	ldr	r2, [pc, #188]	; (801b684 <SUBGRF_SetModulationParams+0x19c>)
 801b5c8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b5cc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	0c1b      	lsrs	r3, r3, #16
 801b5d2:	b2db      	uxtb	r3, r3
 801b5d4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b5d6:	697b      	ldr	r3, [r7, #20]
 801b5d8:	0a1b      	lsrs	r3, r3, #8
 801b5da:	b2db      	uxtb	r3, r3
 801b5dc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b5de:	697b      	ldr	r3, [r7, #20]
 801b5e0:	b2db      	uxtb	r3, r3
 801b5e2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	7d1b      	ldrb	r3, [r3, #20]
 801b5e8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b5ea:	7cfb      	ldrb	r3, [r7, #19]
 801b5ec:	b29a      	uxth	r2, r3
 801b5ee:	f107 0308 	add.w	r3, r7, #8
 801b5f2:	4619      	mov	r1, r3
 801b5f4:	208b      	movs	r0, #139	; 0x8b
 801b5f6:	f000 fa41 	bl	801ba7c <SUBGRF_WriteCommand>
        break;
 801b5fa:	e039      	b.n	801b670 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b5fc:	2304      	movs	r3, #4
 801b5fe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	7e1b      	ldrb	r3, [r3, #24]
 801b604:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	7e5b      	ldrb	r3, [r3, #25]
 801b60a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	7e9b      	ldrb	r3, [r3, #26]
 801b610:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	7edb      	ldrb	r3, [r3, #27]
 801b616:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b618:	7cfb      	ldrb	r3, [r7, #19]
 801b61a:	b29a      	uxth	r2, r3
 801b61c:	f107 0308 	add.w	r3, r7, #8
 801b620:	4619      	mov	r1, r3
 801b622:	208b      	movs	r0, #139	; 0x8b
 801b624:	f000 fa2a 	bl	801ba7c <SUBGRF_WriteCommand>

        break;
 801b628:	e022      	b.n	801b670 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b62a:	2305      	movs	r3, #5
 801b62c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	685b      	ldr	r3, [r3, #4]
 801b632:	4a14      	ldr	r2, [pc, #80]	; (801b684 <SUBGRF_SetModulationParams+0x19c>)
 801b634:	fbb2 f3f3 	udiv	r3, r2, r3
 801b638:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	0c1b      	lsrs	r3, r3, #16
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b642:	697b      	ldr	r3, [r7, #20]
 801b644:	0a1b      	lsrs	r3, r3, #8
 801b646:	b2db      	uxtb	r3, r3
 801b648:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b64a:	697b      	ldr	r3, [r7, #20]
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	7b1b      	ldrb	r3, [r3, #12]
 801b654:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	7b5b      	ldrb	r3, [r3, #13]
 801b65a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b65c:	7cfb      	ldrb	r3, [r7, #19]
 801b65e:	b29a      	uxth	r2, r3
 801b660:	f107 0308 	add.w	r3, r7, #8
 801b664:	4619      	mov	r1, r3
 801b666:	208b      	movs	r0, #139	; 0x8b
 801b668:	f000 fa08 	bl	801ba7c <SUBGRF_WriteCommand>
        break;
 801b66c:	e000      	b.n	801b670 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b66e:	bf00      	nop
    }
}
 801b670:	bf00      	nop
 801b672:	3718      	adds	r7, #24
 801b674:	46bd      	mov	sp, r7
 801b676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b67a:	bf00      	nop
 801b67c:	0801e09c 	.word	0x0801e09c
 801b680:	20001889 	.word	0x20001889
 801b684:	3d090000 	.word	0x3d090000
 801b688:	01e84800 	.word	0x01e84800

0801b68c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b086      	sub	sp, #24
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b694:	2300      	movs	r3, #0
 801b696:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b698:	4a48      	ldr	r2, [pc, #288]	; (801b7bc <SUBGRF_SetPacketParams+0x130>)
 801b69a:	f107 030c 	add.w	r3, r7, #12
 801b69e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b6a0:	c303      	stmia	r3!, {r0, r1}
 801b6a2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	781a      	ldrb	r2, [r3, #0]
 801b6a8:	4b45      	ldr	r3, [pc, #276]	; (801b7c0 <SUBGRF_SetPacketParams+0x134>)
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d004      	beq.n	801b6ba <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	781b      	ldrb	r3, [r3, #0]
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7ff fe23 	bl	801b300 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	781b      	ldrb	r3, [r3, #0]
 801b6be:	2b03      	cmp	r3, #3
 801b6c0:	d878      	bhi.n	801b7b4 <SUBGRF_SetPacketParams+0x128>
 801b6c2:	a201      	add	r2, pc, #4	; (adr r2, 801b6c8 <SUBGRF_SetPacketParams+0x3c>)
 801b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6c8:	0801b6d9 	.word	0x0801b6d9
 801b6cc:	0801b769 	.word	0x0801b769
 801b6d0:	0801b75d 	.word	0x0801b75d
 801b6d4:	0801b6d9 	.word	0x0801b6d9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	7a5b      	ldrb	r3, [r3, #9]
 801b6dc:	2bf1      	cmp	r3, #241	; 0xf1
 801b6de:	d10a      	bne.n	801b6f6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b6e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b6e4:	f7ff faaa 	bl	801ac3c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b6e8:	f248 0005 	movw	r0, #32773	; 0x8005
 801b6ec:	f7ff fac6 	bl	801ac7c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b6f0:	2302      	movs	r3, #2
 801b6f2:	75bb      	strb	r3, [r7, #22]
 801b6f4:	e011      	b.n	801b71a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	7a5b      	ldrb	r3, [r3, #9]
 801b6fa:	2bf2      	cmp	r3, #242	; 0xf2
 801b6fc:	d10a      	bne.n	801b714 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b6fe:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b702:	f7ff fa9b 	bl	801ac3c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b706:	f241 0021 	movw	r0, #4129	; 0x1021
 801b70a:	f7ff fab7 	bl	801ac7c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b70e:	2306      	movs	r3, #6
 801b710:	75bb      	strb	r3, [r7, #22]
 801b712:	e002      	b.n	801b71a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	7a5b      	ldrb	r3, [r3, #9]
 801b718:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b71a:	2309      	movs	r3, #9
 801b71c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	885b      	ldrh	r3, [r3, #2]
 801b722:	0a1b      	lsrs	r3, r3, #8
 801b724:	b29b      	uxth	r3, r3
 801b726:	b2db      	uxtb	r3, r3
 801b728:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	885b      	ldrh	r3, [r3, #2]
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	791b      	ldrb	r3, [r3, #4]
 801b736:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	795b      	ldrb	r3, [r3, #5]
 801b73c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	799b      	ldrb	r3, [r3, #6]
 801b742:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	79db      	ldrb	r3, [r3, #7]
 801b748:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	7a1b      	ldrb	r3, [r3, #8]
 801b74e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b750:	7dbb      	ldrb	r3, [r7, #22]
 801b752:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	7a9b      	ldrb	r3, [r3, #10]
 801b758:	753b      	strb	r3, [r7, #20]
        break;
 801b75a:	e022      	b.n	801b7a2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b75c:	2301      	movs	r3, #1
 801b75e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	7b1b      	ldrb	r3, [r3, #12]
 801b764:	733b      	strb	r3, [r7, #12]
        break;
 801b766:	e01c      	b.n	801b7a2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b768:	2306      	movs	r3, #6
 801b76a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	89db      	ldrh	r3, [r3, #14]
 801b770:	0a1b      	lsrs	r3, r3, #8
 801b772:	b29b      	uxth	r3, r3
 801b774:	b2db      	uxtb	r3, r3
 801b776:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	89db      	ldrh	r3, [r3, #14]
 801b77c:	b2db      	uxtb	r3, r3
 801b77e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	7c1a      	ldrb	r2, [r3, #16]
 801b784:	4b0f      	ldr	r3, [pc, #60]	; (801b7c4 <SUBGRF_SetPacketParams+0x138>)
 801b786:	4611      	mov	r1, r2
 801b788:	7019      	strb	r1, [r3, #0]
 801b78a:	4613      	mov	r3, r2
 801b78c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	7c5b      	ldrb	r3, [r3, #17]
 801b792:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	7c9b      	ldrb	r3, [r3, #18]
 801b798:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	7cdb      	ldrb	r3, [r3, #19]
 801b79e:	747b      	strb	r3, [r7, #17]
        break;
 801b7a0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b7a2:	7dfb      	ldrb	r3, [r7, #23]
 801b7a4:	b29a      	uxth	r2, r3
 801b7a6:	f107 030c 	add.w	r3, r7, #12
 801b7aa:	4619      	mov	r1, r3
 801b7ac:	208c      	movs	r0, #140	; 0x8c
 801b7ae:	f000 f965 	bl	801ba7c <SUBGRF_WriteCommand>
 801b7b2:	e000      	b.n	801b7b6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b7b4:	bf00      	nop
}
 801b7b6:	3718      	adds	r7, #24
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	0801e0a4 	.word	0x0801e0a4
 801b7c0:	20001889 	.word	0x20001889
 801b7c4:	2000188a 	.word	0x2000188a

0801b7c8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b084      	sub	sp, #16
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	460a      	mov	r2, r1
 801b7d2:	71fb      	strb	r3, [r7, #7]
 801b7d4:	4613      	mov	r3, r2
 801b7d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b7d8:	79fb      	ldrb	r3, [r7, #7]
 801b7da:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b7dc:	79bb      	ldrb	r3, [r7, #6]
 801b7de:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b7e0:	f107 030c 	add.w	r3, r7, #12
 801b7e4:	2202      	movs	r2, #2
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	208f      	movs	r0, #143	; 0x8f
 801b7ea:	f000 f947 	bl	801ba7c <SUBGRF_WriteCommand>
}
 801b7ee:	bf00      	nop
 801b7f0:	3710      	adds	r7, #16
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bd80      	pop	{r7, pc}

0801b7f6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b7f6:	b580      	push	{r7, lr}
 801b7f8:	b082      	sub	sp, #8
 801b7fa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b800:	1d3b      	adds	r3, r7, #4
 801b802:	2201      	movs	r2, #1
 801b804:	4619      	mov	r1, r3
 801b806:	2015      	movs	r0, #21
 801b808:	f000 f95a 	bl	801bac0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b80c:	793b      	ldrb	r3, [r7, #4]
 801b80e:	425b      	negs	r3, r3
 801b810:	105b      	asrs	r3, r3, #1
 801b812:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b814:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b818:	4618      	mov	r0, r3
 801b81a:	3708      	adds	r7, #8
 801b81c:	46bd      	mov	sp, r7
 801b81e:	bd80      	pop	{r7, pc}

0801b820 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b820:	b580      	push	{r7, lr}
 801b822:	b084      	sub	sp, #16
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]
 801b828:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b82a:	f107 030c 	add.w	r3, r7, #12
 801b82e:	2202      	movs	r2, #2
 801b830:	4619      	mov	r1, r3
 801b832:	2013      	movs	r0, #19
 801b834:	f000 f944 	bl	801bac0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b838:	f7ff fd7e 	bl	801b338 <SUBGRF_GetPacketType>
 801b83c:	4603      	mov	r3, r0
 801b83e:	2b01      	cmp	r3, #1
 801b840:	d10d      	bne.n	801b85e <SUBGRF_GetRxBufferStatus+0x3e>
 801b842:	4b0c      	ldr	r3, [pc, #48]	; (801b874 <SUBGRF_GetRxBufferStatus+0x54>)
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	b2db      	uxtb	r3, r3
 801b848:	2b01      	cmp	r3, #1
 801b84a:	d108      	bne.n	801b85e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b84c:	f240 7002 	movw	r0, #1794	; 0x702
 801b850:	f000 f878 	bl	801b944 <SUBGRF_ReadRegister>
 801b854:	4603      	mov	r3, r0
 801b856:	461a      	mov	r2, r3
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	701a      	strb	r2, [r3, #0]
 801b85c:	e002      	b.n	801b864 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b85e:	7b3a      	ldrb	r2, [r7, #12]
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b864:	7b7a      	ldrb	r2, [r7, #13]
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	701a      	strb	r2, [r3, #0]
}
 801b86a:	bf00      	nop
 801b86c:	3710      	adds	r7, #16
 801b86e:	46bd      	mov	sp, r7
 801b870:	bd80      	pop	{r7, pc}
 801b872:	bf00      	nop
 801b874:	2000188a 	.word	0x2000188a

0801b878 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b084      	sub	sp, #16
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b880:	f107 030c 	add.w	r3, r7, #12
 801b884:	2203      	movs	r2, #3
 801b886:	4619      	mov	r1, r3
 801b888:	2014      	movs	r0, #20
 801b88a:	f000 f919 	bl	801bac0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b88e:	f7ff fd53 	bl	801b338 <SUBGRF_GetPacketType>
 801b892:	4603      	mov	r3, r0
 801b894:	461a      	mov	r2, r3
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	781b      	ldrb	r3, [r3, #0]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d002      	beq.n	801b8a8 <SUBGRF_GetPacketStatus+0x30>
 801b8a2:	2b01      	cmp	r3, #1
 801b8a4:	d013      	beq.n	801b8ce <SUBGRF_GetPacketStatus+0x56>
 801b8a6:	e02a      	b.n	801b8fe <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b8a8:	7b3a      	ldrb	r2, [r7, #12]
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b8ae:	7b7b      	ldrb	r3, [r7, #13]
 801b8b0:	425b      	negs	r3, r3
 801b8b2:	105b      	asrs	r3, r3, #1
 801b8b4:	b25a      	sxtb	r2, r3
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b8ba:	7bbb      	ldrb	r3, [r7, #14]
 801b8bc:	425b      	negs	r3, r3
 801b8be:	105b      	asrs	r3, r3, #1
 801b8c0:	b25a      	sxtb	r2, r3
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	609a      	str	r2, [r3, #8]
            break;
 801b8cc:	e020      	b.n	801b910 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b8ce:	7b3b      	ldrb	r3, [r7, #12]
 801b8d0:	425b      	negs	r3, r3
 801b8d2:	105b      	asrs	r3, r3, #1
 801b8d4:	b25a      	sxtb	r2, r3
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b8da:	7b7b      	ldrb	r3, [r7, #13]
 801b8dc:	b25b      	sxtb	r3, r3
 801b8de:	3302      	adds	r3, #2
 801b8e0:	109b      	asrs	r3, r3, #2
 801b8e2:	b25a      	sxtb	r2, r3
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b8e8:	7bbb      	ldrb	r3, [r7, #14]
 801b8ea:	425b      	negs	r3, r3
 801b8ec:	105b      	asrs	r3, r3, #1
 801b8ee:	b25a      	sxtb	r2, r3
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b8f4:	4b08      	ldr	r3, [pc, #32]	; (801b918 <SUBGRF_GetPacketStatus+0xa0>)
 801b8f6:	681a      	ldr	r2, [r3, #0]
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	611a      	str	r2, [r3, #16]
            break;
 801b8fc:	e008      	b.n	801b910 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b8fe:	2214      	movs	r2, #20
 801b900:	2100      	movs	r1, #0
 801b902:	6878      	ldr	r0, [r7, #4]
 801b904:	f000 fc03 	bl	801c10e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	220f      	movs	r2, #15
 801b90c:	701a      	strb	r2, [r3, #0]
            break;
 801b90e:	bf00      	nop
    }
}
 801b910:	bf00      	nop
 801b912:	3710      	adds	r7, #16
 801b914:	46bd      	mov	sp, r7
 801b916:	bd80      	pop	{r7, pc}
 801b918:	2000188c 	.word	0x2000188c

0801b91c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b082      	sub	sp, #8
 801b920:	af00      	add	r7, sp, #0
 801b922:	4603      	mov	r3, r0
 801b924:	460a      	mov	r2, r1
 801b926:	80fb      	strh	r3, [r7, #6]
 801b928:	4613      	mov	r3, r2
 801b92a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b92c:	1d7a      	adds	r2, r7, #5
 801b92e:	88f9      	ldrh	r1, [r7, #6]
 801b930:	2301      	movs	r3, #1
 801b932:	4803      	ldr	r0, [pc, #12]	; (801b940 <SUBGRF_WriteRegister+0x24>)
 801b934:	f7ed f876 	bl	8008a24 <HAL_SUBGHZ_WriteRegisters>
}
 801b938:	bf00      	nop
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}
 801b940:	2000036c 	.word	0x2000036c

0801b944 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b084      	sub	sp, #16
 801b948:	af00      	add	r7, sp, #0
 801b94a:	4603      	mov	r3, r0
 801b94c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b94e:	f107 020f 	add.w	r2, r7, #15
 801b952:	88f9      	ldrh	r1, [r7, #6]
 801b954:	2301      	movs	r3, #1
 801b956:	4804      	ldr	r0, [pc, #16]	; (801b968 <SUBGRF_ReadRegister+0x24>)
 801b958:	f7ed f8c3 	bl	8008ae2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b95e:	4618      	mov	r0, r3
 801b960:	3710      	adds	r7, #16
 801b962:	46bd      	mov	sp, r7
 801b964:	bd80      	pop	{r7, pc}
 801b966:	bf00      	nop
 801b968:	2000036c 	.word	0x2000036c

0801b96c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b086      	sub	sp, #24
 801b970:	af00      	add	r7, sp, #0
 801b972:	4603      	mov	r3, r0
 801b974:	6039      	str	r1, [r7, #0]
 801b976:	80fb      	strh	r3, [r7, #6]
 801b978:	4613      	mov	r3, r2
 801b97a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b97c:	f3ef 8310 	mrs	r3, PRIMASK
 801b980:	60fb      	str	r3, [r7, #12]
  return(result);
 801b982:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b986:	b672      	cpsid	i
}
 801b988:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b98a:	88bb      	ldrh	r3, [r7, #4]
 801b98c:	88f9      	ldrh	r1, [r7, #6]
 801b98e:	683a      	ldr	r2, [r7, #0]
 801b990:	4806      	ldr	r0, [pc, #24]	; (801b9ac <SUBGRF_WriteRegisters+0x40>)
 801b992:	f7ed f847 	bl	8008a24 <HAL_SUBGHZ_WriteRegisters>
 801b996:	697b      	ldr	r3, [r7, #20]
 801b998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b99a:	693b      	ldr	r3, [r7, #16]
 801b99c:	f383 8810 	msr	PRIMASK, r3
}
 801b9a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b9a2:	bf00      	nop
 801b9a4:	3718      	adds	r7, #24
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
 801b9aa:	bf00      	nop
 801b9ac:	2000036c 	.word	0x2000036c

0801b9b0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b086      	sub	sp, #24
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	6039      	str	r1, [r7, #0]
 801b9ba:	80fb      	strh	r3, [r7, #6]
 801b9bc:	4613      	mov	r3, r2
 801b9be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9c0:	f3ef 8310 	mrs	r3, PRIMASK
 801b9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b9c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9ca:	b672      	cpsid	i
}
 801b9cc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b9ce:	88bb      	ldrh	r3, [r7, #4]
 801b9d0:	88f9      	ldrh	r1, [r7, #6]
 801b9d2:	683a      	ldr	r2, [r7, #0]
 801b9d4:	4806      	ldr	r0, [pc, #24]	; (801b9f0 <SUBGRF_ReadRegisters+0x40>)
 801b9d6:	f7ed f884 	bl	8008ae2 <HAL_SUBGHZ_ReadRegisters>
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9de:	693b      	ldr	r3, [r7, #16]
 801b9e0:	f383 8810 	msr	PRIMASK, r3
}
 801b9e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b9e6:	bf00      	nop
 801b9e8:	3718      	adds	r7, #24
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	bd80      	pop	{r7, pc}
 801b9ee:	bf00      	nop
 801b9f0:	2000036c 	.word	0x2000036c

0801b9f4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b086      	sub	sp, #24
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	6039      	str	r1, [r7, #0]
 801b9fe:	71fb      	strb	r3, [r7, #7]
 801ba00:	4613      	mov	r3, r2
 801ba02:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba04:	f3ef 8310 	mrs	r3, PRIMASK
 801ba08:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ba0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba0e:	b672      	cpsid	i
}
 801ba10:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ba12:	79bb      	ldrb	r3, [r7, #6]
 801ba14:	b29b      	uxth	r3, r3
 801ba16:	79f9      	ldrb	r1, [r7, #7]
 801ba18:	683a      	ldr	r2, [r7, #0]
 801ba1a:	4806      	ldr	r0, [pc, #24]	; (801ba34 <SUBGRF_WriteBuffer+0x40>)
 801ba1c:	f7ed f975 	bl	8008d0a <HAL_SUBGHZ_WriteBuffer>
 801ba20:	697b      	ldr	r3, [r7, #20]
 801ba22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba24:	693b      	ldr	r3, [r7, #16]
 801ba26:	f383 8810 	msr	PRIMASK, r3
}
 801ba2a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ba2c:	bf00      	nop
 801ba2e:	3718      	adds	r7, #24
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	2000036c 	.word	0x2000036c

0801ba38 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b086      	sub	sp, #24
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	4603      	mov	r3, r0
 801ba40:	6039      	str	r1, [r7, #0]
 801ba42:	71fb      	strb	r3, [r7, #7]
 801ba44:	4613      	mov	r3, r2
 801ba46:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba48:	f3ef 8310 	mrs	r3, PRIMASK
 801ba4c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ba50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba52:	b672      	cpsid	i
}
 801ba54:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ba56:	79bb      	ldrb	r3, [r7, #6]
 801ba58:	b29b      	uxth	r3, r3
 801ba5a:	79f9      	ldrb	r1, [r7, #7]
 801ba5c:	683a      	ldr	r2, [r7, #0]
 801ba5e:	4806      	ldr	r0, [pc, #24]	; (801ba78 <SUBGRF_ReadBuffer+0x40>)
 801ba60:	f7ed f9a6 	bl	8008db0 <HAL_SUBGHZ_ReadBuffer>
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	f383 8810 	msr	PRIMASK, r3
}
 801ba6e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ba70:	bf00      	nop
 801ba72:	3718      	adds	r7, #24
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bd80      	pop	{r7, pc}
 801ba78:	2000036c 	.word	0x2000036c

0801ba7c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b086      	sub	sp, #24
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	4603      	mov	r3, r0
 801ba84:	6039      	str	r1, [r7, #0]
 801ba86:	71fb      	strb	r3, [r7, #7]
 801ba88:	4613      	mov	r3, r2
 801ba8a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba90:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ba94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba96:	b672      	cpsid	i
}
 801ba98:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ba9a:	88bb      	ldrh	r3, [r7, #4]
 801ba9c:	79f9      	ldrb	r1, [r7, #7]
 801ba9e:	683a      	ldr	r2, [r7, #0]
 801baa0:	4806      	ldr	r0, [pc, #24]	; (801babc <SUBGRF_WriteCommand+0x40>)
 801baa2:	f7ed f87f 	bl	8008ba4 <HAL_SUBGHZ_ExecSetCmd>
 801baa6:	697b      	ldr	r3, [r7, #20]
 801baa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baaa:	693b      	ldr	r3, [r7, #16]
 801baac:	f383 8810 	msr	PRIMASK, r3
}
 801bab0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bab2:	bf00      	nop
 801bab4:	3718      	adds	r7, #24
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd80      	pop	{r7, pc}
 801baba:	bf00      	nop
 801babc:	2000036c 	.word	0x2000036c

0801bac0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b086      	sub	sp, #24
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	4603      	mov	r3, r0
 801bac8:	6039      	str	r1, [r7, #0]
 801baca:	71fb      	strb	r3, [r7, #7]
 801bacc:	4613      	mov	r3, r2
 801bace:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bad0:	f3ef 8310 	mrs	r3, PRIMASK
 801bad4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bad6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bada:	b672      	cpsid	i
}
 801badc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bade:	88bb      	ldrh	r3, [r7, #4]
 801bae0:	79f9      	ldrb	r1, [r7, #7]
 801bae2:	683a      	ldr	r2, [r7, #0]
 801bae4:	4806      	ldr	r0, [pc, #24]	; (801bb00 <SUBGRF_ReadCommand+0x40>)
 801bae6:	f7ed f8bc 	bl	8008c62 <HAL_SUBGHZ_ExecGetCmd>
 801baea:	697b      	ldr	r3, [r7, #20]
 801baec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	f383 8810 	msr	PRIMASK, r3
}
 801baf4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801baf6:	bf00      	nop
 801baf8:	3718      	adds	r7, #24
 801bafa:	46bd      	mov	sp, r7
 801bafc:	bd80      	pop	{r7, pc}
 801bafe:	bf00      	nop
 801bb00:	2000036c 	.word	0x2000036c

0801bb04 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b084      	sub	sp, #16
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	460a      	mov	r2, r1
 801bb0e:	71fb      	strb	r3, [r7, #7]
 801bb10:	4613      	mov	r3, r2
 801bb12:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bb14:	2301      	movs	r3, #1
 801bb16:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bb18:	79bb      	ldrb	r3, [r7, #6]
 801bb1a:	2b01      	cmp	r3, #1
 801bb1c:	d10d      	bne.n	801bb3a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bb1e:	79fb      	ldrb	r3, [r7, #7]
 801bb20:	2b01      	cmp	r3, #1
 801bb22:	d104      	bne.n	801bb2e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bb24:	2302      	movs	r3, #2
 801bb26:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bb28:	2004      	movs	r0, #4
 801bb2a:	f000 f8ef 	bl	801bd0c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bb2e:	79fb      	ldrb	r3, [r7, #7]
 801bb30:	2b02      	cmp	r3, #2
 801bb32:	d107      	bne.n	801bb44 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bb34:	2303      	movs	r3, #3
 801bb36:	73fb      	strb	r3, [r7, #15]
 801bb38:	e004      	b.n	801bb44 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bb3a:	79bb      	ldrb	r3, [r7, #6]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d101      	bne.n	801bb44 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bb40:	2301      	movs	r3, #1
 801bb42:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bb44:	7bfb      	ldrb	r3, [r7, #15]
 801bb46:	4618      	mov	r0, r3
 801bb48:	f7f0 fef3 	bl	800c932 <RBI_ConfigRFSwitch>
}
 801bb4c:	bf00      	nop
 801bb4e:	3710      	adds	r7, #16
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}

0801bb54 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b084      	sub	sp, #16
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bb5e:	2301      	movs	r3, #1
 801bb60:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bb62:	f7f0 fef4 	bl	800c94e <RBI_GetTxConfig>
 801bb66:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	2b02      	cmp	r3, #2
 801bb6c:	d016      	beq.n	801bb9c <SUBGRF_SetRfTxPower+0x48>
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	2b02      	cmp	r3, #2
 801bb72:	dc16      	bgt.n	801bba2 <SUBGRF_SetRfTxPower+0x4e>
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d003      	beq.n	801bb82 <SUBGRF_SetRfTxPower+0x2e>
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	2b01      	cmp	r3, #1
 801bb7e:	d00a      	beq.n	801bb96 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bb80:	e00f      	b.n	801bba2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bb82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb86:	2b0f      	cmp	r3, #15
 801bb88:	dd02      	ble.n	801bb90 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bb8a:	2302      	movs	r3, #2
 801bb8c:	73fb      	strb	r3, [r7, #15]
            break;
 801bb8e:	e009      	b.n	801bba4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bb90:	2301      	movs	r3, #1
 801bb92:	73fb      	strb	r3, [r7, #15]
            break;
 801bb94:	e006      	b.n	801bba4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bb96:	2301      	movs	r3, #1
 801bb98:	73fb      	strb	r3, [r7, #15]
            break;
 801bb9a:	e003      	b.n	801bba4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bb9c:	2302      	movs	r3, #2
 801bb9e:	73fb      	strb	r3, [r7, #15]
            break;
 801bba0:	e000      	b.n	801bba4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801bba2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801bba4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bba8:	7bfb      	ldrb	r3, [r7, #15]
 801bbaa:	2202      	movs	r2, #2
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7ff fbcd 	bl	801b34c <SUBGRF_SetTxParams>

    return paSelect;
 801bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	3710      	adds	r7, #16
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bbc0:	2301      	movs	r3, #1
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bc80      	pop	{r7}
 801bbc8:	4770      	bx	lr
	...

0801bbcc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b082      	sub	sp, #8
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bbd4:	4b03      	ldr	r3, [pc, #12]	; (801bbe4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	2001      	movs	r0, #1
 801bbda:	4798      	blx	r3
}
 801bbdc:	bf00      	nop
 801bbde:	3708      	adds	r7, #8
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bd80      	pop	{r7, pc}
 801bbe4:	20001894 	.word	0x20001894

0801bbe8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b082      	sub	sp, #8
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bbf0:	4b03      	ldr	r3, [pc, #12]	; (801bc00 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	2002      	movs	r0, #2
 801bbf6:	4798      	blx	r3
}
 801bbf8:	bf00      	nop
 801bbfa:	3708      	adds	r7, #8
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bd80      	pop	{r7, pc}
 801bc00:	20001894 	.word	0x20001894

0801bc04 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b082      	sub	sp, #8
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bc0c:	4b03      	ldr	r3, [pc, #12]	; (801bc1c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	2040      	movs	r0, #64	; 0x40
 801bc12:	4798      	blx	r3
}
 801bc14:	bf00      	nop
 801bc16:	3708      	adds	r7, #8
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}
 801bc1c:	20001894 	.word	0x20001894

0801bc20 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b082      	sub	sp, #8
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
 801bc28:	460b      	mov	r3, r1
 801bc2a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bc2c:	78fb      	ldrb	r3, [r7, #3]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d002      	beq.n	801bc38 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	d005      	beq.n	801bc42 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bc36:	e00a      	b.n	801bc4e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bc38:	4b07      	ldr	r3, [pc, #28]	; (801bc58 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	2080      	movs	r0, #128	; 0x80
 801bc3e:	4798      	blx	r3
            break;
 801bc40:	e005      	b.n	801bc4e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bc42:	4b05      	ldr	r3, [pc, #20]	; (801bc58 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bc4a:	4798      	blx	r3
            break;
 801bc4c:	bf00      	nop
    }
}
 801bc4e:	bf00      	nop
 801bc50:	3708      	adds	r7, #8
 801bc52:	46bd      	mov	sp, r7
 801bc54:	bd80      	pop	{r7, pc}
 801bc56:	bf00      	nop
 801bc58:	20001894 	.word	0x20001894

0801bc5c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b082      	sub	sp, #8
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bc64:	4b04      	ldr	r3, [pc, #16]	; (801bc78 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bc6c:	4798      	blx	r3
}
 801bc6e:	bf00      	nop
 801bc70:	3708      	adds	r7, #8
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	bf00      	nop
 801bc78:	20001894 	.word	0x20001894

0801bc7c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bc84:	4b03      	ldr	r3, [pc, #12]	; (801bc94 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	2020      	movs	r0, #32
 801bc8a:	4798      	blx	r3
}
 801bc8c:	bf00      	nop
 801bc8e:	3708      	adds	r7, #8
 801bc90:	46bd      	mov	sp, r7
 801bc92:	bd80      	pop	{r7, pc}
 801bc94:	20001894 	.word	0x20001894

0801bc98 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b082      	sub	sp, #8
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bca0:	4b03      	ldr	r3, [pc, #12]	; (801bcb0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	2004      	movs	r0, #4
 801bca6:	4798      	blx	r3
}
 801bca8:	bf00      	nop
 801bcaa:	3708      	adds	r7, #8
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	20001894 	.word	0x20001894

0801bcb4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bcbc:	4b03      	ldr	r3, [pc, #12]	; (801bccc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	2008      	movs	r0, #8
 801bcc2:	4798      	blx	r3
}
 801bcc4:	bf00      	nop
 801bcc6:	3708      	adds	r7, #8
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	20001894 	.word	0x20001894

0801bcd0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bcd8:	4b03      	ldr	r3, [pc, #12]	; (801bce8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	2010      	movs	r0, #16
 801bcde:	4798      	blx	r3
}
 801bce0:	bf00      	nop
 801bce2:	3708      	adds	r7, #8
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	20001894 	.word	0x20001894

0801bcec <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b082      	sub	sp, #8
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801bcf4:	4b04      	ldr	r3, [pc, #16]	; (801bd08 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801bcfc:	4798      	blx	r3
}
 801bcfe:	bf00      	nop
 801bd00:	3708      	adds	r7, #8
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}
 801bd06:	bf00      	nop
 801bd08:	20001894 	.word	0x20001894

0801bd0c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b084      	sub	sp, #16
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	4603      	mov	r3, r0
 801bd14:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801bd16:	f7f0 fe28 	bl	800c96a <RBI_IsDCDC>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	2b01      	cmp	r3, #1
 801bd1e:	d112      	bne.n	801bd46 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801bd20:	f640 1023 	movw	r0, #2339	; 0x923
 801bd24:	f7ff fe0e 	bl	801b944 <SUBGRF_ReadRegister>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801bd2c:	7bfb      	ldrb	r3, [r7, #15]
 801bd2e:	f023 0306 	bic.w	r3, r3, #6
 801bd32:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801bd34:	7bfa      	ldrb	r2, [r7, #15]
 801bd36:	79fb      	ldrb	r3, [r7, #7]
 801bd38:	4313      	orrs	r3, r2
 801bd3a:	b2db      	uxtb	r3, r3
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	f640 1023 	movw	r0, #2339	; 0x923
 801bd42:	f7ff fdeb 	bl	801b91c <SUBGRF_WriteRegister>
  }
}
 801bd46:	bf00      	nop
 801bd48:	3710      	adds	r7, #16
 801bd4a:	46bd      	mov	sp, r7
 801bd4c:	bd80      	pop	{r7, pc}
	...

0801bd50 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801bd50:	b480      	push	{r7}
 801bd52:	b085      	sub	sp, #20
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d101      	bne.n	801bd62 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801bd5e:	231f      	movs	r3, #31
 801bd60:	e016      	b.n	801bd90 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801bd62:	2300      	movs	r3, #0
 801bd64:	73fb      	strb	r3, [r7, #15]
 801bd66:	e00f      	b.n	801bd88 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801bd68:	7bfb      	ldrb	r3, [r7, #15]
 801bd6a:	4a0c      	ldr	r2, [pc, #48]	; (801bd9c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801bd6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801bd70:	687a      	ldr	r2, [r7, #4]
 801bd72:	429a      	cmp	r2, r3
 801bd74:	d205      	bcs.n	801bd82 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801bd76:	7bfb      	ldrb	r3, [r7, #15]
 801bd78:	4a08      	ldr	r2, [pc, #32]	; (801bd9c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801bd7a:	00db      	lsls	r3, r3, #3
 801bd7c:	4413      	add	r3, r2
 801bd7e:	791b      	ldrb	r3, [r3, #4]
 801bd80:	e006      	b.n	801bd90 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801bd82:	7bfb      	ldrb	r3, [r7, #15]
 801bd84:	3301      	adds	r3, #1
 801bd86:	73fb      	strb	r3, [r7, #15]
 801bd88:	7bfb      	ldrb	r3, [r7, #15]
 801bd8a:	2b15      	cmp	r3, #21
 801bd8c:	d9ec      	bls.n	801bd68 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801bd8e:	e7fe      	b.n	801bd8e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	3714      	adds	r7, #20
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bc80      	pop	{r7}
 801bd98:	4770      	bx	lr
 801bd9a:	bf00      	nop
 801bd9c:	0801e694 	.word	0x0801e694

0801bda0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b08a      	sub	sp, #40	; 0x28
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	6078      	str	r0, [r7, #4]
 801bda8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801bdaa:	4b35      	ldr	r3, [pc, #212]	; (801be80 <SUBGRF_GetCFO+0xe0>)
 801bdac:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801bdae:	f640 0007 	movw	r0, #2055	; 0x807
 801bdb2:	f7ff fdc7 	bl	801b944 <SUBGRF_ReadRegister>
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801bdba:	7ffb      	ldrb	r3, [r7, #31]
 801bdbc:	08db      	lsrs	r3, r3, #3
 801bdbe:	b2db      	uxtb	r3, r3
 801bdc0:	f003 0303 	and.w	r3, r3, #3
 801bdc4:	3328      	adds	r3, #40	; 0x28
 801bdc6:	443b      	add	r3, r7
 801bdc8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801bdcc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801bdce:	7ffb      	ldrb	r3, [r7, #31]
 801bdd0:	f003 0307 	and.w	r3, r3, #7
 801bdd4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801bdd6:	7fba      	ldrb	r2, [r7, #30]
 801bdd8:	7f7b      	ldrb	r3, [r7, #29]
 801bdda:	3301      	adds	r3, #1
 801bddc:	fa02 f303 	lsl.w	r3, r2, r3
 801bde0:	461a      	mov	r2, r3
 801bde2:	4b28      	ldr	r3, [pc, #160]	; (801be84 <SUBGRF_GetCFO+0xe4>)
 801bde4:	fbb3 f3f2 	udiv	r3, r3, r2
 801bde8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801bdea:	69ba      	ldr	r2, [r7, #24]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdf2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801bdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bdfe:	697a      	ldr	r2, [r7, #20]
 801be00:	fb02 f303 	mul.w	r3, r2, r3
 801be04:	2b07      	cmp	r3, #7
 801be06:	d802      	bhi.n	801be0e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801be08:	2302      	movs	r3, #2
 801be0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801be0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be12:	697a      	ldr	r2, [r7, #20]
 801be14:	fb02 f303 	mul.w	r3, r2, r3
 801be18:	2b03      	cmp	r3, #3
 801be1a:	d802      	bhi.n	801be22 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801be1c:	2304      	movs	r3, #4
 801be1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801be22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801be26:	69bb      	ldr	r3, [r7, #24]
 801be28:	fb02 f303 	mul.w	r3, r2, r3
 801be2c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801be2e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801be32:	f7ff fd87 	bl	801b944 <SUBGRF_ReadRegister>
 801be36:	4603      	mov	r3, r0
 801be38:	021b      	lsls	r3, r3, #8
 801be3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801be3e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801be40:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801be44:	f7ff fd7e 	bl	801b944 <SUBGRF_ReadRegister>
 801be48:	4603      	mov	r3, r0
 801be4a:	461a      	mov	r2, r3
 801be4c:	6a3b      	ldr	r3, [r7, #32]
 801be4e:	4313      	orrs	r3, r2
 801be50:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801be52:	6a3b      	ldr	r3, [r7, #32]
 801be54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d005      	beq.n	801be68 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801be5c:	6a3b      	ldr	r3, [r7, #32]
 801be5e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801be62:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801be66:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801be68:	693b      	ldr	r3, [r7, #16]
 801be6a:	095b      	lsrs	r3, r3, #5
 801be6c:	6a3a      	ldr	r2, [r7, #32]
 801be6e:	fb02 f303 	mul.w	r3, r2, r3
 801be72:	11da      	asrs	r2, r3, #7
 801be74:	683b      	ldr	r3, [r7, #0]
 801be76:	601a      	str	r2, [r3, #0]
}
 801be78:	bf00      	nop
 801be7a:	3728      	adds	r7, #40	; 0x28
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	0c0a0804 	.word	0x0c0a0804
 801be84:	01e84800 	.word	0x01e84800

0801be88 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801be88:	b480      	push	{r7}
 801be8a:	b087      	sub	sp, #28
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	4603      	mov	r3, r0
 801be90:	60b9      	str	r1, [r7, #8]
 801be92:	607a      	str	r2, [r7, #4]
 801be94:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801be96:	2300      	movs	r3, #0
 801be98:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801be9a:	f04f 33ff 	mov.w	r3, #4294967295
 801be9e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bea0:	697b      	ldr	r3, [r7, #20]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	371c      	adds	r7, #28
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bc80      	pop	{r7}
 801beaa:	4770      	bx	lr

0801beac <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801beac:	b480      	push	{r7}
 801beae:	b087      	sub	sp, #28
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	4603      	mov	r3, r0
 801beb4:	60b9      	str	r1, [r7, #8]
 801beb6:	607a      	str	r2, [r7, #4]
 801beb8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801beba:	2300      	movs	r3, #0
 801bebc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801bebe:	f04f 33ff 	mov.w	r3, #4294967295
 801bec2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bec4:	697b      	ldr	r3, [r7, #20]
}
 801bec6:	4618      	mov	r0, r3
 801bec8:	371c      	adds	r7, #28
 801beca:	46bd      	mov	sp, r7
 801becc:	bc80      	pop	{r7}
 801bece:	4770      	bx	lr

0801bed0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801bed0:	b480      	push	{r7}
 801bed2:	b085      	sub	sp, #20
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	60b9      	str	r1, [r7, #8]
 801beda:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801bedc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801bee0:	4618      	mov	r0, r3
 801bee2:	3714      	adds	r7, #20
 801bee4:	46bd      	mov	sp, r7
 801bee6:	bc80      	pop	{r7}
 801bee8:	4770      	bx	lr

0801beea <RFW_DeInit>:

void RFW_DeInit( void )
{
 801beea:	b480      	push	{r7}
 801beec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801beee:	bf00      	nop
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bc80      	pop	{r7}
 801bef4:	4770      	bx	lr

0801bef6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801bef6:	b480      	push	{r7}
 801bef8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801befa:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801befc:	4618      	mov	r0, r3
 801befe:	46bd      	mov	sp, r7
 801bf00:	bc80      	pop	{r7}
 801bf02:	4770      	bx	lr

0801bf04 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801bf04:	b480      	push	{r7}
 801bf06:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801bf08:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bc80      	pop	{r7}
 801bf10:	4770      	bx	lr

0801bf12 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801bf12:	b480      	push	{r7}
 801bf14:	b083      	sub	sp, #12
 801bf16:	af00      	add	r7, sp, #0
 801bf18:	4603      	mov	r3, r0
 801bf1a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801bf1c:	bf00      	nop
 801bf1e:	370c      	adds	r7, #12
 801bf20:	46bd      	mov	sp, r7
 801bf22:	bc80      	pop	{r7}
 801bf24:	4770      	bx	lr

0801bf26 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801bf26:	b480      	push	{r7}
 801bf28:	b087      	sub	sp, #28
 801bf2a:	af00      	add	r7, sp, #0
 801bf2c:	60f8      	str	r0, [r7, #12]
 801bf2e:	460b      	mov	r3, r1
 801bf30:	607a      	str	r2, [r7, #4]
 801bf32:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801bf34:	f04f 33ff 	mov.w	r3, #4294967295
 801bf38:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801bf3a:	697b      	ldr	r3, [r7, #20]
}
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	371c      	adds	r7, #28
 801bf40:	46bd      	mov	sp, r7
 801bf42:	bc80      	pop	{r7}
 801bf44:	4770      	bx	lr

0801bf46 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801bf46:	b480      	push	{r7}
 801bf48:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801bf4a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801bf4e:	4618      	mov	r0, r3
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bc80      	pop	{r7}
 801bf54:	4770      	bx	lr

0801bf56 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801bf56:	b480      	push	{r7}
 801bf58:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801bf5a:	bf00      	nop
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bc80      	pop	{r7}
 801bf60:	4770      	bx	lr

0801bf62 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801bf62:	b480      	push	{r7}
 801bf64:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801bf66:	bf00      	nop
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bc80      	pop	{r7}
 801bf6c:	4770      	bx	lr

0801bf6e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801bf6e:	b480      	push	{r7}
 801bf70:	b083      	sub	sp, #12
 801bf72:	af00      	add	r7, sp, #0
 801bf74:	4603      	mov	r3, r0
 801bf76:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801bf78:	bf00      	nop
 801bf7a:	370c      	adds	r7, #12
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bc80      	pop	{r7}
 801bf80:	4770      	bx	lr
	...

0801bf84 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801bf84:	b480      	push	{r7}
 801bf86:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801bf88:	4b04      	ldr	r3, [pc, #16]	; (801bf9c <UTIL_LPM_Init+0x18>)
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801bf8e:	4b04      	ldr	r3, [pc, #16]	; (801bfa0 <UTIL_LPM_Init+0x1c>)
 801bf90:	2200      	movs	r2, #0
 801bf92:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801bf94:	bf00      	nop
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bc80      	pop	{r7}
 801bf9a:	4770      	bx	lr
 801bf9c:	20001898 	.word	0x20001898
 801bfa0:	2000189c 	.word	0x2000189c

0801bfa4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bfa4:	b480      	push	{r7}
 801bfa6:	b087      	sub	sp, #28
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
 801bfac:	460b      	mov	r3, r1
 801bfae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfb0:	f3ef 8310 	mrs	r3, PRIMASK
 801bfb4:	613b      	str	r3, [r7, #16]
  return(result);
 801bfb6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bfb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfba:	b672      	cpsid	i
}
 801bfbc:	bf00      	nop
  
  switch( state )
 801bfbe:	78fb      	ldrb	r3, [r7, #3]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d008      	beq.n	801bfd6 <UTIL_LPM_SetStopMode+0x32>
 801bfc4:	2b01      	cmp	r3, #1
 801bfc6:	d10e      	bne.n	801bfe6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801bfc8:	4b0d      	ldr	r3, [pc, #52]	; (801c000 <UTIL_LPM_SetStopMode+0x5c>)
 801bfca:	681a      	ldr	r2, [r3, #0]
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	4313      	orrs	r3, r2
 801bfd0:	4a0b      	ldr	r2, [pc, #44]	; (801c000 <UTIL_LPM_SetStopMode+0x5c>)
 801bfd2:	6013      	str	r3, [r2, #0]
      break;
 801bfd4:	e008      	b.n	801bfe8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	43da      	mvns	r2, r3
 801bfda:	4b09      	ldr	r3, [pc, #36]	; (801c000 <UTIL_LPM_SetStopMode+0x5c>)
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	4013      	ands	r3, r2
 801bfe0:	4a07      	ldr	r2, [pc, #28]	; (801c000 <UTIL_LPM_SetStopMode+0x5c>)
 801bfe2:	6013      	str	r3, [r2, #0]
      break;
 801bfe4:	e000      	b.n	801bfe8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801bfe6:	bf00      	nop
 801bfe8:	697b      	ldr	r3, [r7, #20]
 801bfea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	f383 8810 	msr	PRIMASK, r3
}
 801bff2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bff4:	bf00      	nop
 801bff6:	371c      	adds	r7, #28
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bc80      	pop	{r7}
 801bffc:	4770      	bx	lr
 801bffe:	bf00      	nop
 801c000:	20001898 	.word	0x20001898

0801c004 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c004:	b480      	push	{r7}
 801c006:	b087      	sub	sp, #28
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
 801c00c:	460b      	mov	r3, r1
 801c00e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c010:	f3ef 8310 	mrs	r3, PRIMASK
 801c014:	613b      	str	r3, [r7, #16]
  return(result);
 801c016:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c01a:	b672      	cpsid	i
}
 801c01c:	bf00      	nop
  
  switch(state)
 801c01e:	78fb      	ldrb	r3, [r7, #3]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d008      	beq.n	801c036 <UTIL_LPM_SetOffMode+0x32>
 801c024:	2b01      	cmp	r3, #1
 801c026:	d10e      	bne.n	801c046 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c028:	4b0d      	ldr	r3, [pc, #52]	; (801c060 <UTIL_LPM_SetOffMode+0x5c>)
 801c02a:	681a      	ldr	r2, [r3, #0]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	4313      	orrs	r3, r2
 801c030:	4a0b      	ldr	r2, [pc, #44]	; (801c060 <UTIL_LPM_SetOffMode+0x5c>)
 801c032:	6013      	str	r3, [r2, #0]
      break;
 801c034:	e008      	b.n	801c048 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	43da      	mvns	r2, r3
 801c03a:	4b09      	ldr	r3, [pc, #36]	; (801c060 <UTIL_LPM_SetOffMode+0x5c>)
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	4013      	ands	r3, r2
 801c040:	4a07      	ldr	r2, [pc, #28]	; (801c060 <UTIL_LPM_SetOffMode+0x5c>)
 801c042:	6013      	str	r3, [r2, #0]
      break;
 801c044:	e000      	b.n	801c048 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c046:	bf00      	nop
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	f383 8810 	msr	PRIMASK, r3
}
 801c052:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c054:	bf00      	nop
 801c056:	371c      	adds	r7, #28
 801c058:	46bd      	mov	sp, r7
 801c05a:	bc80      	pop	{r7}
 801c05c:	4770      	bx	lr
 801c05e:	bf00      	nop
 801c060:	2000189c 	.word	0x2000189c

0801c064 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b084      	sub	sp, #16
 801c068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c06a:	f3ef 8310 	mrs	r3, PRIMASK
 801c06e:	60bb      	str	r3, [r7, #8]
  return(result);
 801c070:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c072:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c074:	b672      	cpsid	i
}
 801c076:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c078:	4b12      	ldr	r3, [pc, #72]	; (801c0c4 <UTIL_LPM_EnterLowPower+0x60>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d006      	beq.n	801c08e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c080:	4b11      	ldr	r3, [pc, #68]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c086:	4b10      	ldr	r3, [pc, #64]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	4798      	blx	r3
 801c08c:	e010      	b.n	801c0b0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c08e:	4b0f      	ldr	r3, [pc, #60]	; (801c0cc <UTIL_LPM_EnterLowPower+0x68>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d006      	beq.n	801c0a4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c096:	4b0c      	ldr	r3, [pc, #48]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c098:	689b      	ldr	r3, [r3, #8]
 801c09a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c09c:	4b0a      	ldr	r3, [pc, #40]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c09e:	68db      	ldr	r3, [r3, #12]
 801c0a0:	4798      	blx	r3
 801c0a2:	e005      	b.n	801c0b0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c0a4:	4b08      	ldr	r3, [pc, #32]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c0a6:	691b      	ldr	r3, [r3, #16]
 801c0a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c0aa:	4b07      	ldr	r3, [pc, #28]	; (801c0c8 <UTIL_LPM_EnterLowPower+0x64>)
 801c0ac:	695b      	ldr	r3, [r3, #20]
 801c0ae:	4798      	blx	r3
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	f383 8810 	msr	PRIMASK, r3
}
 801c0ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c0bc:	bf00      	nop
 801c0be:	3710      	adds	r7, #16
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}
 801c0c4:	20001898 	.word	0x20001898
 801c0c8:	0801e108 	.word	0x0801e108
 801c0cc:	2000189c 	.word	0x2000189c

0801c0d0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c0d0:	b480      	push	{r7}
 801c0d2:	b087      	sub	sp, #28
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	60f8      	str	r0, [r7, #12]
 801c0d8:	60b9      	str	r1, [r7, #8]
 801c0da:	4613      	mov	r3, r2
 801c0dc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c0e6:	e007      	b.n	801c0f8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c0e8:	693a      	ldr	r2, [r7, #16]
 801c0ea:	1c53      	adds	r3, r2, #1
 801c0ec:	613b      	str	r3, [r7, #16]
 801c0ee:	697b      	ldr	r3, [r7, #20]
 801c0f0:	1c59      	adds	r1, r3, #1
 801c0f2:	6179      	str	r1, [r7, #20]
 801c0f4:	7812      	ldrb	r2, [r2, #0]
 801c0f6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c0f8:	88fb      	ldrh	r3, [r7, #6]
 801c0fa:	1e5a      	subs	r2, r3, #1
 801c0fc:	80fa      	strh	r2, [r7, #6]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d1f2      	bne.n	801c0e8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c102:	bf00      	nop
 801c104:	bf00      	nop
 801c106:	371c      	adds	r7, #28
 801c108:	46bd      	mov	sp, r7
 801c10a:	bc80      	pop	{r7}
 801c10c:	4770      	bx	lr

0801c10e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c10e:	b480      	push	{r7}
 801c110:	b085      	sub	sp, #20
 801c112:	af00      	add	r7, sp, #0
 801c114:	6078      	str	r0, [r7, #4]
 801c116:	460b      	mov	r3, r1
 801c118:	70fb      	strb	r3, [r7, #3]
 801c11a:	4613      	mov	r3, r2
 801c11c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c122:	e004      	b.n	801c12e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	1c5a      	adds	r2, r3, #1
 801c128:	60fa      	str	r2, [r7, #12]
 801c12a:	78fa      	ldrb	r2, [r7, #3]
 801c12c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c12e:	883b      	ldrh	r3, [r7, #0]
 801c130:	1e5a      	subs	r2, r3, #1
 801c132:	803a      	strh	r2, [r7, #0]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d1f5      	bne.n	801c124 <UTIL_MEM_set_8+0x16>
  }
}
 801c138:	bf00      	nop
 801c13a:	bf00      	nop
 801c13c:	3714      	adds	r7, #20
 801c13e:	46bd      	mov	sp, r7
 801c140:	bc80      	pop	{r7}
 801c142:	4770      	bx	lr

0801c144 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c144:	b082      	sub	sp, #8
 801c146:	b480      	push	{r7}
 801c148:	b087      	sub	sp, #28
 801c14a:	af00      	add	r7, sp, #0
 801c14c:	60f8      	str	r0, [r7, #12]
 801c14e:	1d38      	adds	r0, r7, #4
 801c150:	e880 0006 	stmia.w	r0, {r1, r2}
 801c154:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c156:	2300      	movs	r3, #0
 801c158:	613b      	str	r3, [r7, #16]
 801c15a:	2300      	movs	r3, #0
 801c15c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c15e:	687a      	ldr	r2, [r7, #4]
 801c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c162:	4413      	add	r3, r2
 801c164:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c166:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c16a:	b29a      	uxth	r2, r3
 801c16c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c170:	b29b      	uxth	r3, r3
 801c172:	4413      	add	r3, r2
 801c174:	b29b      	uxth	r3, r3
 801c176:	b21b      	sxth	r3, r3
 801c178:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c17a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c17e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c182:	db0a      	blt.n	801c19a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c184:	693b      	ldr	r3, [r7, #16]
 801c186:	3301      	adds	r3, #1
 801c188:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c18a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c18e:	b29b      	uxth	r3, r3
 801c190:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c194:	b29b      	uxth	r3, r3
 801c196:	b21b      	sxth	r3, r3
 801c198:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	461a      	mov	r2, r3
 801c19e:	f107 0310 	add.w	r3, r7, #16
 801c1a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c1a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c1aa:	68f8      	ldr	r0, [r7, #12]
 801c1ac:	371c      	adds	r7, #28
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bc80      	pop	{r7}
 801c1b2:	b002      	add	sp, #8
 801c1b4:	4770      	bx	lr

0801c1b6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c1b6:	b082      	sub	sp, #8
 801c1b8:	b480      	push	{r7}
 801c1ba:	b087      	sub	sp, #28
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	60f8      	str	r0, [r7, #12]
 801c1c0:	1d38      	adds	r0, r7, #4
 801c1c2:	e880 0006 	stmia.w	r0, {r1, r2}
 801c1c6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	613b      	str	r3, [r7, #16]
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c1d0:	687a      	ldr	r2, [r7, #4]
 801c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d4:	1ad3      	subs	r3, r2, r3
 801c1d6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c1d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c1dc:	b29a      	uxth	r2, r3
 801c1de:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c1e2:	b29b      	uxth	r3, r3
 801c1e4:	1ad3      	subs	r3, r2, r3
 801c1e6:	b29b      	uxth	r3, r3
 801c1e8:	b21b      	sxth	r3, r3
 801c1ea:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c1ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	da0a      	bge.n	801c20a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c1f4:	693b      	ldr	r3, [r7, #16]
 801c1f6:	3b01      	subs	r3, #1
 801c1f8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c1fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c1fe:	b29b      	uxth	r3, r3
 801c200:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c204:	b29b      	uxth	r3, r3
 801c206:	b21b      	sxth	r3, r3
 801c208:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	461a      	mov	r2, r3
 801c20e:	f107 0310 	add.w	r3, r7, #16
 801c212:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c216:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c21a:	68f8      	ldr	r0, [r7, #12]
 801c21c:	371c      	adds	r7, #28
 801c21e:	46bd      	mov	sp, r7
 801c220:	bc80      	pop	{r7}
 801c222:	b002      	add	sp, #8
 801c224:	4770      	bx	lr
	...

0801c228 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b088      	sub	sp, #32
 801c22c:	af02      	add	r7, sp, #8
 801c22e:	463b      	mov	r3, r7
 801c230:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c234:	2300      	movs	r3, #0
 801c236:	60bb      	str	r3, [r7, #8]
 801c238:	2300      	movs	r3, #0
 801c23a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c23c:	4b10      	ldr	r3, [pc, #64]	; (801c280 <SysTimeSet+0x58>)
 801c23e:	691b      	ldr	r3, [r3, #16]
 801c240:	f107 0208 	add.w	r2, r7, #8
 801c244:	3204      	adds	r2, #4
 801c246:	4610      	mov	r0, r2
 801c248:	4798      	blx	r3
 801c24a:	4603      	mov	r3, r0
 801c24c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c24e:	f107 0010 	add.w	r0, r7, #16
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	9300      	str	r3, [sp, #0]
 801c256:	68bb      	ldr	r3, [r7, #8]
 801c258:	463a      	mov	r2, r7
 801c25a:	ca06      	ldmia	r2, {r1, r2}
 801c25c:	f7ff ffab 	bl	801c1b6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c260:	4b07      	ldr	r3, [pc, #28]	; (801c280 <SysTimeSet+0x58>)
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	693a      	ldr	r2, [r7, #16]
 801c266:	4610      	mov	r0, r2
 801c268:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c26a:	4b05      	ldr	r3, [pc, #20]	; (801c280 <SysTimeSet+0x58>)
 801c26c:	689b      	ldr	r3, [r3, #8]
 801c26e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c272:	4610      	mov	r0, r2
 801c274:	4798      	blx	r3
}
 801c276:	bf00      	nop
 801c278:	3718      	adds	r7, #24
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}
 801c27e:	bf00      	nop
 801c280:	0801e1ec 	.word	0x0801e1ec

0801c284 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b08a      	sub	sp, #40	; 0x28
 801c288:	af02      	add	r7, sp, #8
 801c28a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c28c:	2300      	movs	r3, #0
 801c28e:	61bb      	str	r3, [r7, #24]
 801c290:	2300      	movs	r3, #0
 801c292:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c294:	2300      	movs	r3, #0
 801c296:	613b      	str	r3, [r7, #16]
 801c298:	2300      	movs	r3, #0
 801c29a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c29c:	4b14      	ldr	r3, [pc, #80]	; (801c2f0 <SysTimeGet+0x6c>)
 801c29e:	691b      	ldr	r3, [r3, #16]
 801c2a0:	f107 0218 	add.w	r2, r7, #24
 801c2a4:	3204      	adds	r2, #4
 801c2a6:	4610      	mov	r0, r2
 801c2a8:	4798      	blx	r3
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c2ae:	4b10      	ldr	r3, [pc, #64]	; (801c2f0 <SysTimeGet+0x6c>)
 801c2b0:	68db      	ldr	r3, [r3, #12]
 801c2b2:	4798      	blx	r3
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	b21b      	sxth	r3, r3
 801c2b8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c2ba:	4b0d      	ldr	r3, [pc, #52]	; (801c2f0 <SysTimeGet+0x6c>)
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	4798      	blx	r3
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c2c4:	f107 0010 	add.w	r0, r7, #16
 801c2c8:	69fb      	ldr	r3, [r7, #28]
 801c2ca:	9300      	str	r3, [sp, #0]
 801c2cc:	69bb      	ldr	r3, [r7, #24]
 801c2ce:	f107 0208 	add.w	r2, r7, #8
 801c2d2:	ca06      	ldmia	r2, {r1, r2}
 801c2d4:	f7ff ff36 	bl	801c144 <SysTimeAdd>

  return sysTime;
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	461a      	mov	r2, r3
 801c2dc:	f107 0310 	add.w	r3, r7, #16
 801c2e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c2e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c2e8:	6878      	ldr	r0, [r7, #4]
 801c2ea:	3720      	adds	r7, #32
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}
 801c2f0:	0801e1ec 	.word	0x0801e1ec

0801c2f4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b084      	sub	sp, #16
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	60bb      	str	r3, [r7, #8]
 801c300:	2300      	movs	r3, #0
 801c302:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c304:	4b0a      	ldr	r3, [pc, #40]	; (801c330 <SysTimeGetMcuTime+0x3c>)
 801c306:	691b      	ldr	r3, [r3, #16]
 801c308:	f107 0208 	add.w	r2, r7, #8
 801c30c:	3204      	adds	r2, #4
 801c30e:	4610      	mov	r0, r2
 801c310:	4798      	blx	r3
 801c312:	4603      	mov	r3, r0
 801c314:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	461a      	mov	r2, r3
 801c31a:	f107 0308 	add.w	r3, r7, #8
 801c31e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c322:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c326:	6878      	ldr	r0, [r7, #4]
 801c328:	3710      	adds	r7, #16
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}
 801c32e:	bf00      	nop
 801c330:	0801e1ec 	.word	0x0801e1ec

0801c334 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b088      	sub	sp, #32
 801c338:	af02      	add	r7, sp, #8
 801c33a:	463b      	mov	r3, r7
 801c33c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c340:	4b0f      	ldr	r3, [pc, #60]	; (801c380 <SysTimeToMs+0x4c>)
 801c342:	68db      	ldr	r3, [r3, #12]
 801c344:	4798      	blx	r3
 801c346:	4603      	mov	r3, r0
 801c348:	b21b      	sxth	r3, r3
 801c34a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c34c:	4b0c      	ldr	r3, [pc, #48]	; (801c380 <SysTimeToMs+0x4c>)
 801c34e:	685b      	ldr	r3, [r3, #4]
 801c350:	4798      	blx	r3
 801c352:	4603      	mov	r3, r0
 801c354:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c356:	f107 0008 	add.w	r0, r7, #8
 801c35a:	697b      	ldr	r3, [r7, #20]
 801c35c:	9300      	str	r3, [sp, #0]
 801c35e:	693b      	ldr	r3, [r7, #16]
 801c360:	463a      	mov	r2, r7
 801c362:	ca06      	ldmia	r2, {r1, r2}
 801c364:	f7ff ff27 	bl	801c1b6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c36e:	fb02 f303 	mul.w	r3, r2, r3
 801c372:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c376:	4413      	add	r3, r2
}
 801c378:	4618      	mov	r0, r3
 801c37a:	3718      	adds	r7, #24
 801c37c:	46bd      	mov	sp, r7
 801c37e:	bd80      	pop	{r7, pc}
 801c380:	0801e1ec 	.word	0x0801e1ec

0801c384 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b08a      	sub	sp, #40	; 0x28
 801c388:	af02      	add	r7, sp, #8
 801c38a:	6078      	str	r0, [r7, #4]
 801c38c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	4a19      	ldr	r2, [pc, #100]	; (801c3f8 <SysTimeFromMs+0x74>)
 801c392:	fba2 2303 	umull	r2, r3, r2, r3
 801c396:	099b      	lsrs	r3, r3, #6
 801c398:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	617b      	str	r3, [r7, #20]
 801c39e:	683b      	ldr	r3, [r7, #0]
 801c3a0:	b29a      	uxth	r2, r3
 801c3a2:	69fb      	ldr	r3, [r7, #28]
 801c3a4:	b29b      	uxth	r3, r3
 801c3a6:	4619      	mov	r1, r3
 801c3a8:	0149      	lsls	r1, r1, #5
 801c3aa:	1ac9      	subs	r1, r1, r3
 801c3ac:	0089      	lsls	r1, r1, #2
 801c3ae:	440b      	add	r3, r1
 801c3b0:	00db      	lsls	r3, r3, #3
 801c3b2:	b29b      	uxth	r3, r3
 801c3b4:	1ad3      	subs	r3, r2, r3
 801c3b6:	b29b      	uxth	r3, r3
 801c3b8:	b21b      	sxth	r3, r3
 801c3ba:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c3bc:	f107 030c 	add.w	r3, r7, #12
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	601a      	str	r2, [r3, #0]
 801c3c4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c3c6:	4b0d      	ldr	r3, [pc, #52]	; (801c3fc <SysTimeFromMs+0x78>)
 801c3c8:	68db      	ldr	r3, [r3, #12]
 801c3ca:	4798      	blx	r3
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	b21b      	sxth	r3, r3
 801c3d0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c3d2:	4b0a      	ldr	r3, [pc, #40]	; (801c3fc <SysTimeFromMs+0x78>)
 801c3d4:	685b      	ldr	r3, [r3, #4]
 801c3d6:	4798      	blx	r3
 801c3d8:	4603      	mov	r3, r0
 801c3da:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c3dc:	6878      	ldr	r0, [r7, #4]
 801c3de:	693b      	ldr	r3, [r7, #16]
 801c3e0:	9300      	str	r3, [sp, #0]
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	f107 0214 	add.w	r2, r7, #20
 801c3e8:	ca06      	ldmia	r2, {r1, r2}
 801c3ea:	f7ff feab 	bl	801c144 <SysTimeAdd>
}
 801c3ee:	6878      	ldr	r0, [r7, #4]
 801c3f0:	3720      	adds	r7, #32
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd80      	pop	{r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	10624dd3 	.word	0x10624dd3
 801c3fc:	0801e1ec 	.word	0x0801e1ec

0801c400 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c400:	b480      	push	{r7}
 801c402:	b085      	sub	sp, #20
 801c404:	af00      	add	r7, sp, #0
 801c406:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c408:	2300      	movs	r3, #0
 801c40a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c40c:	e00e      	b.n	801c42c <ee_skip_atoi+0x2c>
 801c40e:	68fa      	ldr	r2, [r7, #12]
 801c410:	4613      	mov	r3, r2
 801c412:	009b      	lsls	r3, r3, #2
 801c414:	4413      	add	r3, r2
 801c416:	005b      	lsls	r3, r3, #1
 801c418:	4618      	mov	r0, r3
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	1c59      	adds	r1, r3, #1
 801c420:	687a      	ldr	r2, [r7, #4]
 801c422:	6011      	str	r1, [r2, #0]
 801c424:	781b      	ldrb	r3, [r3, #0]
 801c426:	4403      	add	r3, r0
 801c428:	3b30      	subs	r3, #48	; 0x30
 801c42a:	60fb      	str	r3, [r7, #12]
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	781b      	ldrb	r3, [r3, #0]
 801c432:	2b2f      	cmp	r3, #47	; 0x2f
 801c434:	d904      	bls.n	801c440 <ee_skip_atoi+0x40>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	781b      	ldrb	r3, [r3, #0]
 801c43c:	2b39      	cmp	r3, #57	; 0x39
 801c43e:	d9e6      	bls.n	801c40e <ee_skip_atoi+0xe>
  return i;
 801c440:	68fb      	ldr	r3, [r7, #12]
}
 801c442:	4618      	mov	r0, r3
 801c444:	3714      	adds	r7, #20
 801c446:	46bd      	mov	sp, r7
 801c448:	bc80      	pop	{r7}
 801c44a:	4770      	bx	lr

0801c44c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c44c:	b480      	push	{r7}
 801c44e:	b099      	sub	sp, #100	; 0x64
 801c450:	af00      	add	r7, sp, #0
 801c452:	60f8      	str	r0, [r7, #12]
 801c454:	60b9      	str	r1, [r7, #8]
 801c456:	607a      	str	r2, [r7, #4]
 801c458:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c45a:	4b71      	ldr	r3, [pc, #452]	; (801c620 <ee_number+0x1d4>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c466:	2b00      	cmp	r3, #0
 801c468:	d002      	beq.n	801c470 <ee_number+0x24>
 801c46a:	4b6e      	ldr	r3, [pc, #440]	; (801c624 <ee_number+0x1d8>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	2b01      	cmp	r3, #1
 801c474:	dd02      	ble.n	801c47c <ee_number+0x30>
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	2b24      	cmp	r3, #36	; 0x24
 801c47a:	dd01      	ble.n	801c480 <ee_number+0x34>
 801c47c:	2300      	movs	r3, #0
 801c47e:	e0ca      	b.n	801c616 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c482:	f003 0301 	and.w	r3, r3, #1
 801c486:	2b00      	cmp	r3, #0
 801c488:	d001      	beq.n	801c48e <ee_number+0x42>
 801c48a:	2330      	movs	r3, #48	; 0x30
 801c48c:	e000      	b.n	801c490 <ee_number+0x44>
 801c48e:	2320      	movs	r3, #32
 801c490:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c494:	2300      	movs	r3, #0
 801c496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c49a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c49c:	f003 0302 	and.w	r3, r3, #2
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d00b      	beq.n	801c4bc <ee_number+0x70>
  {
    if (num < 0)
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	da08      	bge.n	801c4bc <ee_number+0x70>
    {
      sign = '-';
 801c4aa:	232d      	movs	r3, #45	; 0x2d
 801c4ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	425b      	negs	r3, r3
 801c4b4:	607b      	str	r3, [r7, #4]
      size--;
 801c4b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c4b8:	3b01      	subs	r3, #1
 801c4ba:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d11e      	bne.n	801c504 <ee_number+0xb8>
    tmp[i++] = '0';
 801c4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4c8:	1c5a      	adds	r2, r3, #1
 801c4ca:	657a      	str	r2, [r7, #84]	; 0x54
 801c4cc:	3360      	adds	r3, #96	; 0x60
 801c4ce:	443b      	add	r3, r7
 801c4d0:	2230      	movs	r2, #48	; 0x30
 801c4d2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c4d6:	e018      	b.n	801c50a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	683a      	ldr	r2, [r7, #0]
 801c4dc:	fbb3 f1f2 	udiv	r1, r3, r2
 801c4e0:	fb01 f202 	mul.w	r2, r1, r2
 801c4e4:	1a9b      	subs	r3, r3, r2
 801c4e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c4e8:	441a      	add	r2, r3
 801c4ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4ec:	1c59      	adds	r1, r3, #1
 801c4ee:	6579      	str	r1, [r7, #84]	; 0x54
 801c4f0:	7812      	ldrb	r2, [r2, #0]
 801c4f2:	3360      	adds	r3, #96	; 0x60
 801c4f4:	443b      	add	r3, r7
 801c4f6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c4fa:	687a      	ldr	r2, [r7, #4]
 801c4fc:	683b      	ldr	r3, [r7, #0]
 801c4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 801c502:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d1e6      	bne.n	801c4d8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c50a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c50e:	429a      	cmp	r2, r3
 801c510:	dd01      	ble.n	801c516 <ee_number+0xca>
 801c512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c514:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c51a:	1ad3      	subs	r3, r2, r3
 801c51c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c51e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c520:	f003 0301 	and.w	r3, r3, #1
 801c524:	2b00      	cmp	r3, #0
 801c526:	d112      	bne.n	801c54e <ee_number+0x102>
 801c528:	e00c      	b.n	801c544 <ee_number+0xf8>
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	1c5a      	adds	r2, r3, #1
 801c52e:	60fa      	str	r2, [r7, #12]
 801c530:	2220      	movs	r2, #32
 801c532:	701a      	strb	r2, [r3, #0]
 801c534:	68bb      	ldr	r3, [r7, #8]
 801c536:	3b01      	subs	r3, #1
 801c538:	60bb      	str	r3, [r7, #8]
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d101      	bne.n	801c544 <ee_number+0xf8>
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	e068      	b.n	801c616 <ee_number+0x1ca>
 801c544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c546:	1e5a      	subs	r2, r3, #1
 801c548:	66ba      	str	r2, [r7, #104]	; 0x68
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	dced      	bgt.n	801c52a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c54e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c552:	2b00      	cmp	r3, #0
 801c554:	d01b      	beq.n	801c58e <ee_number+0x142>
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	1c5a      	adds	r2, r3, #1
 801c55a:	60fa      	str	r2, [r7, #12]
 801c55c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c560:	701a      	strb	r2, [r3, #0]
 801c562:	68bb      	ldr	r3, [r7, #8]
 801c564:	3b01      	subs	r3, #1
 801c566:	60bb      	str	r3, [r7, #8]
 801c568:	68bb      	ldr	r3, [r7, #8]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d10f      	bne.n	801c58e <ee_number+0x142>
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	e051      	b.n	801c616 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	1c5a      	adds	r2, r3, #1
 801c576:	60fa      	str	r2, [r7, #12]
 801c578:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c57c:	701a      	strb	r2, [r3, #0]
 801c57e:	68bb      	ldr	r3, [r7, #8]
 801c580:	3b01      	subs	r3, #1
 801c582:	60bb      	str	r3, [r7, #8]
 801c584:	68bb      	ldr	r3, [r7, #8]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d101      	bne.n	801c58e <ee_number+0x142>
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	e043      	b.n	801c616 <ee_number+0x1ca>
 801c58e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c590:	1e5a      	subs	r2, r3, #1
 801c592:	66ba      	str	r2, [r7, #104]	; 0x68
 801c594:	2b00      	cmp	r3, #0
 801c596:	dcec      	bgt.n	801c572 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c598:	e00c      	b.n	801c5b4 <ee_number+0x168>
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	1c5a      	adds	r2, r3, #1
 801c59e:	60fa      	str	r2, [r7, #12]
 801c5a0:	2230      	movs	r2, #48	; 0x30
 801c5a2:	701a      	strb	r2, [r3, #0]
 801c5a4:	68bb      	ldr	r3, [r7, #8]
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	60bb      	str	r3, [r7, #8]
 801c5aa:	68bb      	ldr	r3, [r7, #8]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d101      	bne.n	801c5b4 <ee_number+0x168>
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	e030      	b.n	801c616 <ee_number+0x1ca>
 801c5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5b6:	1e5a      	subs	r2, r3, #1
 801c5b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c5ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c5bc:	429a      	cmp	r2, r3
 801c5be:	dbec      	blt.n	801c59a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c5c0:	e010      	b.n	801c5e4 <ee_number+0x198>
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	1c5a      	adds	r2, r3, #1
 801c5c6:	60fa      	str	r2, [r7, #12]
 801c5c8:	f107 0110 	add.w	r1, r7, #16
 801c5cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c5ce:	440a      	add	r2, r1
 801c5d0:	7812      	ldrb	r2, [r2, #0]
 801c5d2:	701a      	strb	r2, [r3, #0]
 801c5d4:	68bb      	ldr	r3, [r7, #8]
 801c5d6:	3b01      	subs	r3, #1
 801c5d8:	60bb      	str	r3, [r7, #8]
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d101      	bne.n	801c5e4 <ee_number+0x198>
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	e018      	b.n	801c616 <ee_number+0x1ca>
 801c5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c5e6:	1e5a      	subs	r2, r3, #1
 801c5e8:	657a      	str	r2, [r7, #84]	; 0x54
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	dce9      	bgt.n	801c5c2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c5ee:	e00c      	b.n	801c60a <ee_number+0x1be>
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	1c5a      	adds	r2, r3, #1
 801c5f4:	60fa      	str	r2, [r7, #12]
 801c5f6:	2220      	movs	r2, #32
 801c5f8:	701a      	strb	r2, [r3, #0]
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	3b01      	subs	r3, #1
 801c5fe:	60bb      	str	r3, [r7, #8]
 801c600:	68bb      	ldr	r3, [r7, #8]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d101      	bne.n	801c60a <ee_number+0x1be>
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	e005      	b.n	801c616 <ee_number+0x1ca>
 801c60a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c60c:	1e5a      	subs	r2, r3, #1
 801c60e:	66ba      	str	r2, [r7, #104]	; 0x68
 801c610:	2b00      	cmp	r3, #0
 801c612:	dced      	bgt.n	801c5f0 <ee_number+0x1a4>

  return str;
 801c614:	68fb      	ldr	r3, [r7, #12]
}
 801c616:	4618      	mov	r0, r3
 801c618:	3764      	adds	r7, #100	; 0x64
 801c61a:	46bd      	mov	sp, r7
 801c61c:	bc80      	pop	{r7}
 801c61e:	4770      	bx	lr
 801c620:	20000150 	.word	0x20000150
 801c624:	20000154 	.word	0x20000154

0801c628 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b092      	sub	sp, #72	; 0x48
 801c62c:	af04      	add	r7, sp, #16
 801c62e:	60f8      	str	r0, [r7, #12]
 801c630:	60b9      	str	r1, [r7, #8]
 801c632:	607a      	str	r2, [r7, #4]
 801c634:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	dc01      	bgt.n	801c640 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c63c:	2300      	movs	r3, #0
 801c63e:	e13e      	b.n	801c8be <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c644:	e128      	b.n	801c898 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	1ad2      	subs	r2, r2, r3
 801c64c:	68bb      	ldr	r3, [r7, #8]
 801c64e:	3b01      	subs	r3, #1
 801c650:	429a      	cmp	r2, r3
 801c652:	f280 812e 	bge.w	801c8b2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	781b      	ldrb	r3, [r3, #0]
 801c65a:	2b25      	cmp	r3, #37	; 0x25
 801c65c:	d006      	beq.n	801c66c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c662:	1c59      	adds	r1, r3, #1
 801c664:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c666:	7812      	ldrb	r2, [r2, #0]
 801c668:	701a      	strb	r2, [r3, #0]
      continue;
 801c66a:	e112      	b.n	801c892 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801c66c:	2300      	movs	r3, #0
 801c66e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	3301      	adds	r3, #1
 801c674:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	2b30      	cmp	r3, #48	; 0x30
 801c67c:	d103      	bne.n	801c686 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c67e:	6a3b      	ldr	r3, [r7, #32]
 801c680:	f043 0301 	orr.w	r3, r3, #1
 801c684:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c686:	f04f 33ff 	mov.w	r3, #4294967295
 801c68a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	781b      	ldrb	r3, [r3, #0]
 801c690:	2b2f      	cmp	r3, #47	; 0x2f
 801c692:	d908      	bls.n	801c6a6 <tiny_vsnprintf_like+0x7e>
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	781b      	ldrb	r3, [r3, #0]
 801c698:	2b39      	cmp	r3, #57	; 0x39
 801c69a:	d804      	bhi.n	801c6a6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c69c:	1d3b      	adds	r3, r7, #4
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7ff feae 	bl	801c400 <ee_skip_atoi>
 801c6a4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c6a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c6aa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c6b2:	230a      	movs	r3, #10
 801c6b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	3b58      	subs	r3, #88	; 0x58
 801c6bc:	2b20      	cmp	r3, #32
 801c6be:	f200 8094 	bhi.w	801c7ea <tiny_vsnprintf_like+0x1c2>
 801c6c2:	a201      	add	r2, pc, #4	; (adr r2, 801c6c8 <tiny_vsnprintf_like+0xa0>)
 801c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6c8:	0801c7d3 	.word	0x0801c7d3
 801c6cc:	0801c7eb 	.word	0x0801c7eb
 801c6d0:	0801c7eb 	.word	0x0801c7eb
 801c6d4:	0801c7eb 	.word	0x0801c7eb
 801c6d8:	0801c7eb 	.word	0x0801c7eb
 801c6dc:	0801c7eb 	.word	0x0801c7eb
 801c6e0:	0801c7eb 	.word	0x0801c7eb
 801c6e4:	0801c7eb 	.word	0x0801c7eb
 801c6e8:	0801c7eb 	.word	0x0801c7eb
 801c6ec:	0801c7eb 	.word	0x0801c7eb
 801c6f0:	0801c7eb 	.word	0x0801c7eb
 801c6f4:	0801c757 	.word	0x0801c757
 801c6f8:	0801c7e1 	.word	0x0801c7e1
 801c6fc:	0801c7eb 	.word	0x0801c7eb
 801c700:	0801c7eb 	.word	0x0801c7eb
 801c704:	0801c7eb 	.word	0x0801c7eb
 801c708:	0801c7eb 	.word	0x0801c7eb
 801c70c:	0801c7e1 	.word	0x0801c7e1
 801c710:	0801c7eb 	.word	0x0801c7eb
 801c714:	0801c7eb 	.word	0x0801c7eb
 801c718:	0801c7eb 	.word	0x0801c7eb
 801c71c:	0801c7eb 	.word	0x0801c7eb
 801c720:	0801c7eb 	.word	0x0801c7eb
 801c724:	0801c7eb 	.word	0x0801c7eb
 801c728:	0801c7eb 	.word	0x0801c7eb
 801c72c:	0801c7eb 	.word	0x0801c7eb
 801c730:	0801c7eb 	.word	0x0801c7eb
 801c734:	0801c777 	.word	0x0801c777
 801c738:	0801c7eb 	.word	0x0801c7eb
 801c73c:	0801c837 	.word	0x0801c837
 801c740:	0801c7eb 	.word	0x0801c7eb
 801c744:	0801c7eb 	.word	0x0801c7eb
 801c748:	0801c7db 	.word	0x0801c7db
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c74e:	1c5a      	adds	r2, r3, #1
 801c750:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c752:	2220      	movs	r2, #32
 801c754:	701a      	strb	r2, [r3, #0]
 801c756:	69fb      	ldr	r3, [r7, #28]
 801c758:	3b01      	subs	r3, #1
 801c75a:	61fb      	str	r3, [r7, #28]
 801c75c:	69fb      	ldr	r3, [r7, #28]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	dcf4      	bgt.n	801c74c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c762:	683b      	ldr	r3, [r7, #0]
 801c764:	1d1a      	adds	r2, r3, #4
 801c766:	603a      	str	r2, [r7, #0]
 801c768:	6819      	ldr	r1, [r3, #0]
 801c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76c:	1c5a      	adds	r2, r3, #1
 801c76e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c770:	b2ca      	uxtb	r2, r1
 801c772:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c774:	e08d      	b.n	801c892 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	1d1a      	adds	r2, r3, #4
 801c77a:	603a      	str	r2, [r7, #0]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c782:	2b00      	cmp	r3, #0
 801c784:	d101      	bne.n	801c78a <tiny_vsnprintf_like+0x162>
 801c786:	4b50      	ldr	r3, [pc, #320]	; (801c8c8 <tiny_vsnprintf_like+0x2a0>)
 801c788:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c78a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c78c:	f7e3 fcf4 	bl	8000178 <strlen>
 801c790:	4603      	mov	r3, r0
 801c792:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c794:	e004      	b.n	801c7a0 <tiny_vsnprintf_like+0x178>
 801c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c798:	1c5a      	adds	r2, r3, #1
 801c79a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c79c:	2220      	movs	r2, #32
 801c79e:	701a      	strb	r2, [r3, #0]
 801c7a0:	69fb      	ldr	r3, [r7, #28]
 801c7a2:	1e5a      	subs	r2, r3, #1
 801c7a4:	61fa      	str	r2, [r7, #28]
 801c7a6:	693a      	ldr	r2, [r7, #16]
 801c7a8:	429a      	cmp	r2, r3
 801c7aa:	dbf4      	blt.n	801c796 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801c7b0:	e00a      	b.n	801c7c8 <tiny_vsnprintf_like+0x1a0>
 801c7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7b4:	1c53      	adds	r3, r2, #1
 801c7b6:	627b      	str	r3, [r7, #36]	; 0x24
 801c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ba:	1c59      	adds	r1, r3, #1
 801c7bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c7be:	7812      	ldrb	r2, [r2, #0]
 801c7c0:	701a      	strb	r2, [r3, #0]
 801c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7c4:	3301      	adds	r3, #1
 801c7c6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7ca:	693b      	ldr	r3, [r7, #16]
 801c7cc:	429a      	cmp	r2, r3
 801c7ce:	dbf0      	blt.n	801c7b2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c7d0:	e05f      	b.n	801c892 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c7d2:	6a3b      	ldr	r3, [r7, #32]
 801c7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c7d8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c7da:	2310      	movs	r3, #16
 801c7dc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801c7de:	e02b      	b.n	801c838 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c7e0:	6a3b      	ldr	r3, [r7, #32]
 801c7e2:	f043 0302 	orr.w	r3, r3, #2
 801c7e6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c7e8:	e025      	b.n	801c836 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	781b      	ldrb	r3, [r3, #0]
 801c7ee:	2b25      	cmp	r3, #37	; 0x25
 801c7f0:	d004      	beq.n	801c7fc <tiny_vsnprintf_like+0x1d4>
 801c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7f4:	1c5a      	adds	r2, r3, #1
 801c7f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c7f8:	2225      	movs	r2, #37	; 0x25
 801c7fa:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	1ad2      	subs	r2, r2, r3
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	3b01      	subs	r3, #1
 801c806:	429a      	cmp	r2, r3
 801c808:	da16      	bge.n	801c838 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	781b      	ldrb	r3, [r3, #0]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d006      	beq.n	801c820 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c812:	687a      	ldr	r2, [r7, #4]
 801c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c816:	1c59      	adds	r1, r3, #1
 801c818:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c81a:	7812      	ldrb	r2, [r2, #0]
 801c81c:	701a      	strb	r2, [r3, #0]
 801c81e:	e002      	b.n	801c826 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	3b01      	subs	r3, #1
 801c824:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	1ad2      	subs	r2, r2, r3
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	3b01      	subs	r3, #1
 801c830:	429a      	cmp	r2, r3
 801c832:	db2d      	blt.n	801c890 <tiny_vsnprintf_like+0x268>
 801c834:	e000      	b.n	801c838 <tiny_vsnprintf_like+0x210>
        break;
 801c836:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c838:	697b      	ldr	r3, [r7, #20]
 801c83a:	2b6c      	cmp	r3, #108	; 0x6c
 801c83c:	d105      	bne.n	801c84a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801c83e:	683b      	ldr	r3, [r7, #0]
 801c840:	1d1a      	adds	r2, r3, #4
 801c842:	603a      	str	r2, [r7, #0]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	637b      	str	r3, [r7, #52]	; 0x34
 801c848:	e00f      	b.n	801c86a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801c84a:	6a3b      	ldr	r3, [r7, #32]
 801c84c:	f003 0302 	and.w	r3, r3, #2
 801c850:	2b00      	cmp	r3, #0
 801c852:	d005      	beq.n	801c860 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	1d1a      	adds	r2, r3, #4
 801c858:	603a      	str	r2, [r7, #0]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	637b      	str	r3, [r7, #52]	; 0x34
 801c85e:	e004      	b.n	801c86a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801c860:	683b      	ldr	r3, [r7, #0]
 801c862:	1d1a      	adds	r2, r3, #4
 801c864:	603a      	str	r2, [r7, #0]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c86a:	68bb      	ldr	r3, [r7, #8]
 801c86c:	1e5a      	subs	r2, r3, #1
 801c86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	1acb      	subs	r3, r1, r3
 801c874:	1ad1      	subs	r1, r2, r3
 801c876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c878:	6a3b      	ldr	r3, [r7, #32]
 801c87a:	9302      	str	r3, [sp, #8]
 801c87c:	69bb      	ldr	r3, [r7, #24]
 801c87e:	9301      	str	r3, [sp, #4]
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	9300      	str	r3, [sp, #0]
 801c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c888:	f7ff fde0 	bl	801c44c <ee_number>
 801c88c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c88e:	e000      	b.n	801c892 <tiny_vsnprintf_like+0x26a>
        continue;
 801c890:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	3301      	adds	r3, #1
 801c896:	607b      	str	r3, [r7, #4]
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	781b      	ldrb	r3, [r3, #0]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	f47f aed2 	bne.w	801c646 <tiny_vsnprintf_like+0x1e>
 801c8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	1ad2      	subs	r2, r2, r3
 801c8a8:	68bb      	ldr	r3, [r7, #8]
 801c8aa:	3b01      	subs	r3, #1
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	f6bf aeca 	bge.w	801c646 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	1ad3      	subs	r3, r2, r3
}
 801c8be:	4618      	mov	r0, r3
 801c8c0:	3738      	adds	r7, #56	; 0x38
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bd80      	pop	{r7, pc}
 801c8c6:	bf00      	nop
 801c8c8:	0801e100 	.word	0x0801e100

0801c8cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b090      	sub	sp, #64	; 0x40
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c8d4:	4b73      	ldr	r3, [pc, #460]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c8da:	4b72      	ldr	r3, [pc, #456]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801c8dc:	681a      	ldr	r2, [r3, #0]
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	4013      	ands	r3, r2
 801c8e2:	4a70      	ldr	r2, [pc, #448]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801c8e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c8e6:	4b70      	ldr	r3, [pc, #448]	; (801caa8 <UTIL_SEQ_Run+0x1dc>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c8ec:	4b6f      	ldr	r3, [pc, #444]	; (801caac <UTIL_SEQ_Run+0x1e0>)
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c8f2:	4b6f      	ldr	r3, [pc, #444]	; (801cab0 <UTIL_SEQ_Run+0x1e4>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c8f8:	4b6e      	ldr	r3, [pc, #440]	; (801cab4 <UTIL_SEQ_Run+0x1e8>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c8fe:	e08d      	b.n	801ca1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c900:	2300      	movs	r3, #0
 801c902:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c904:	e002      	b.n	801c90c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c908:	3301      	adds	r3, #1
 801c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c90c:	4a6a      	ldr	r2, [pc, #424]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c910:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c916:	401a      	ands	r2, r3
 801c918:	4b62      	ldr	r3, [pc, #392]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	4013      	ands	r3, r2
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d0f1      	beq.n	801c906 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c922:	4a65      	ldr	r2, [pc, #404]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c926:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c92c:	401a      	ands	r2, r3
 801c92e:	4b5d      	ldr	r3, [pc, #372]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	4013      	ands	r3, r2
 801c934:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c936:	4a60      	ldr	r2, [pc, #384]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c93a:	00db      	lsls	r3, r3, #3
 801c93c:	4413      	add	r3, r2
 801c93e:	685a      	ldr	r2, [r3, #4]
 801c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c942:	4013      	ands	r3, r2
 801c944:	2b00      	cmp	r3, #0
 801c946:	d106      	bne.n	801c956 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c948:	4a5b      	ldr	r2, [pc, #364]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c94c:	00db      	lsls	r3, r3, #3
 801c94e:	4413      	add	r3, r2
 801c950:	f04f 32ff 	mov.w	r2, #4294967295
 801c954:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c956:	4a58      	ldr	r2, [pc, #352]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c95a:	00db      	lsls	r3, r3, #3
 801c95c:	4413      	add	r3, r2
 801c95e:	685a      	ldr	r2, [r3, #4]
 801c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c962:	4013      	ands	r3, r2
 801c964:	4618      	mov	r0, r3
 801c966:	f000 f907 	bl	801cb78 <SEQ_BitPosition>
 801c96a:	4603      	mov	r3, r0
 801c96c:	461a      	mov	r2, r3
 801c96e:	4b53      	ldr	r3, [pc, #332]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801c970:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c972:	4a51      	ldr	r2, [pc, #324]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c976:	00db      	lsls	r3, r3, #3
 801c978:	4413      	add	r3, r2
 801c97a:	685a      	ldr	r2, [r3, #4]
 801c97c:	4b4f      	ldr	r3, [pc, #316]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	2101      	movs	r1, #1
 801c982:	fa01 f303 	lsl.w	r3, r1, r3
 801c986:	43db      	mvns	r3, r3
 801c988:	401a      	ands	r2, r3
 801c98a:	494b      	ldr	r1, [pc, #300]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c98e:	00db      	lsls	r3, r3, #3
 801c990:	440b      	add	r3, r1
 801c992:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c994:	f3ef 8310 	mrs	r3, PRIMASK
 801c998:	61bb      	str	r3, [r7, #24]
  return(result);
 801c99a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c99c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c99e:	b672      	cpsid	i
}
 801c9a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c9a2:	4b46      	ldr	r3, [pc, #280]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	2201      	movs	r2, #1
 801c9a8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9ac:	43da      	mvns	r2, r3
 801c9ae:	4b3e      	ldr	r3, [pc, #248]	; (801caa8 <UTIL_SEQ_Run+0x1dc>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	4013      	ands	r3, r2
 801c9b4:	4a3c      	ldr	r2, [pc, #240]	; (801caa8 <UTIL_SEQ_Run+0x1dc>)
 801c9b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c9b8:	2301      	movs	r3, #1
 801c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9bc:	e013      	b.n	801c9e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9c0:	3b01      	subs	r3, #1
 801c9c2:	4a3d      	ldr	r2, [pc, #244]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c9c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c9c8:	4b3c      	ldr	r3, [pc, #240]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	2201      	movs	r2, #1
 801c9ce:	fa02 f303 	lsl.w	r3, r2, r3
 801c9d2:	43da      	mvns	r2, r3
 801c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9d6:	3b01      	subs	r3, #1
 801c9d8:	400a      	ands	r2, r1
 801c9da:	4937      	ldr	r1, [pc, #220]	; (801cab8 <UTIL_SEQ_Run+0x1ec>)
 801c9dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9e2:	3b01      	subs	r3, #1
 801c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d1e8      	bne.n	801c9be <UTIL_SEQ_Run+0xf2>
 801c9ec:	6a3b      	ldr	r3, [r7, #32]
 801c9ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	f383 8810 	msr	PRIMASK, r3
}
 801c9f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c9f8:	4b30      	ldr	r3, [pc, #192]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4a30      	ldr	r2, [pc, #192]	; (801cac0 <UTIL_SEQ_Run+0x1f4>)
 801c9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca02:	4798      	blx	r3

    local_taskset = TaskSet;
 801ca04:	4b28      	ldr	r3, [pc, #160]	; (801caa8 <UTIL_SEQ_Run+0x1dc>)
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ca0a:	4b28      	ldr	r3, [pc, #160]	; (801caac <UTIL_SEQ_Run+0x1e0>)
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ca10:	4b27      	ldr	r3, [pc, #156]	; (801cab0 <UTIL_SEQ_Run+0x1e4>)
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ca16:	4b27      	ldr	r3, [pc, #156]	; (801cab4 <UTIL_SEQ_Run+0x1e8>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ca1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca20:	401a      	ands	r2, r3
 801ca22:	4b20      	ldr	r3, [pc, #128]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	4013      	ands	r3, r2
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d005      	beq.n	801ca38 <UTIL_SEQ_Run+0x16c>
 801ca2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca30:	4013      	ands	r3, r2
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	f43f af64 	beq.w	801c900 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ca38:	4b20      	ldr	r3, [pc, #128]	; (801cabc <UTIL_SEQ_Run+0x1f0>)
 801ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ca40:	f000 f88e 	bl	801cb60 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca44:	f3ef 8310 	mrs	r3, PRIMASK
 801ca48:	613b      	str	r3, [r7, #16]
  return(result);
 801ca4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ca4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca4e:	b672      	cpsid	i
}
 801ca50:	bf00      	nop
  local_taskset = TaskSet;
 801ca52:	4b15      	ldr	r3, [pc, #84]	; (801caa8 <UTIL_SEQ_Run+0x1dc>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ca58:	4b14      	ldr	r3, [pc, #80]	; (801caac <UTIL_SEQ_Run+0x1e0>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ca5e:	4b14      	ldr	r3, [pc, #80]	; (801cab0 <UTIL_SEQ_Run+0x1e4>)
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801ca64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca68:	401a      	ands	r2, r3
 801ca6a:	4b0e      	ldr	r3, [pc, #56]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	4013      	ands	r3, r2
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d107      	bne.n	801ca84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ca74:	4b0f      	ldr	r3, [pc, #60]	; (801cab4 <UTIL_SEQ_Run+0x1e8>)
 801ca76:	681a      	ldr	r2, [r3, #0]
 801ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca7a:	4013      	ands	r3, r2
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d101      	bne.n	801ca84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ca80:	f7e5 fd78 	bl	8002574 <UTIL_SEQ_Idle>
 801ca84:	69fb      	ldr	r3, [r7, #28]
 801ca86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	f383 8810 	msr	PRIMASK, r3
}
 801ca8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801ca90:	f000 f86c 	bl	801cb6c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801ca94:	4a03      	ldr	r2, [pc, #12]	; (801caa4 <UTIL_SEQ_Run+0x1d8>)
 801ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca98:	6013      	str	r3, [r2, #0]

  return;
 801ca9a:	bf00      	nop
}
 801ca9c:	3740      	adds	r7, #64	; 0x40
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	bd80      	pop	{r7, pc}
 801caa2:	bf00      	nop
 801caa4:	2000015c 	.word	0x2000015c
 801caa8:	200018a0 	.word	0x200018a0
 801caac:	200018a4 	.word	0x200018a4
 801cab0:	20000158 	.word	0x20000158
 801cab4:	200018a8 	.word	0x200018a8
 801cab8:	200018c0 	.word	0x200018c0
 801cabc:	200018ac 	.word	0x200018ac
 801cac0:	200018b0 	.word	0x200018b0

0801cac4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b088      	sub	sp, #32
 801cac8:	af00      	add	r7, sp, #0
 801caca:	60f8      	str	r0, [r7, #12]
 801cacc:	60b9      	str	r1, [r7, #8]
 801cace:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cad0:	f3ef 8310 	mrs	r3, PRIMASK
 801cad4:	617b      	str	r3, [r7, #20]
  return(result);
 801cad6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cada:	b672      	cpsid	i
}
 801cadc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cade:	68f8      	ldr	r0, [r7, #12]
 801cae0:	f000 f84a 	bl	801cb78 <SEQ_BitPosition>
 801cae4:	4603      	mov	r3, r0
 801cae6:	4619      	mov	r1, r3
 801cae8:	4a06      	ldr	r2, [pc, #24]	; (801cb04 <UTIL_SEQ_RegTask+0x40>)
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801caf0:	69fb      	ldr	r3, [r7, #28]
 801caf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801caf4:	69bb      	ldr	r3, [r7, #24]
 801caf6:	f383 8810 	msr	PRIMASK, r3
}
 801cafa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cafc:	bf00      	nop
}
 801cafe:	3720      	adds	r7, #32
 801cb00:	46bd      	mov	sp, r7
 801cb02:	bd80      	pop	{r7, pc}
 801cb04:	200018b0 	.word	0x200018b0

0801cb08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cb08:	b480      	push	{r7}
 801cb0a:	b087      	sub	sp, #28
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
 801cb10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb12:	f3ef 8310 	mrs	r3, PRIMASK
 801cb16:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cb1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb1c:	b672      	cpsid	i
}
 801cb1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cb20:	4b0d      	ldr	r3, [pc, #52]	; (801cb58 <UTIL_SEQ_SetTask+0x50>)
 801cb22:	681a      	ldr	r2, [r3, #0]
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	4313      	orrs	r3, r2
 801cb28:	4a0b      	ldr	r2, [pc, #44]	; (801cb58 <UTIL_SEQ_SetTask+0x50>)
 801cb2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cb2c:	4a0b      	ldr	r2, [pc, #44]	; (801cb5c <UTIL_SEQ_SetTask+0x54>)
 801cb2e:	683b      	ldr	r3, [r7, #0]
 801cb30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	431a      	orrs	r2, r3
 801cb38:	4908      	ldr	r1, [pc, #32]	; (801cb5c <UTIL_SEQ_SetTask+0x54>)
 801cb3a:	683b      	ldr	r3, [r7, #0]
 801cb3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb44:	693b      	ldr	r3, [r7, #16]
 801cb46:	f383 8810 	msr	PRIMASK, r3
}
 801cb4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cb4c:	bf00      	nop
}
 801cb4e:	371c      	adds	r7, #28
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bc80      	pop	{r7}
 801cb54:	4770      	bx	lr
 801cb56:	bf00      	nop
 801cb58:	200018a0 	.word	0x200018a0
 801cb5c:	200018c0 	.word	0x200018c0

0801cb60 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801cb60:	b480      	push	{r7}
 801cb62:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cb64:	bf00      	nop
}
 801cb66:	46bd      	mov	sp, r7
 801cb68:	bc80      	pop	{r7}
 801cb6a:	4770      	bx	lr

0801cb6c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801cb6c:	b480      	push	{r7}
 801cb6e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cb70:	bf00      	nop
}
 801cb72:	46bd      	mov	sp, r7
 801cb74:	bc80      	pop	{r7}
 801cb76:	4770      	bx	lr

0801cb78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cb78:	b480      	push	{r7}
 801cb7a:	b085      	sub	sp, #20
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cb80:	2300      	movs	r3, #0
 801cb82:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801cb88:	68bb      	ldr	r3, [r7, #8]
 801cb8a:	0c1b      	lsrs	r3, r3, #16
 801cb8c:	041b      	lsls	r3, r3, #16
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d104      	bne.n	801cb9c <SEQ_BitPosition+0x24>
 801cb92:	2310      	movs	r3, #16
 801cb94:	73fb      	strb	r3, [r7, #15]
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	041b      	lsls	r3, r3, #16
 801cb9a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801cb9c:	68bb      	ldr	r3, [r7, #8]
 801cb9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d105      	bne.n	801cbb2 <SEQ_BitPosition+0x3a>
 801cba6:	7bfb      	ldrb	r3, [r7, #15]
 801cba8:	3308      	adds	r3, #8
 801cbaa:	73fb      	strb	r3, [r7, #15]
 801cbac:	68bb      	ldr	r3, [r7, #8]
 801cbae:	021b      	lsls	r3, r3, #8
 801cbb0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801cbb2:	68bb      	ldr	r3, [r7, #8]
 801cbb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d105      	bne.n	801cbc8 <SEQ_BitPosition+0x50>
 801cbbc:	7bfb      	ldrb	r3, [r7, #15]
 801cbbe:	3304      	adds	r3, #4
 801cbc0:	73fb      	strb	r3, [r7, #15]
 801cbc2:	68bb      	ldr	r3, [r7, #8]
 801cbc4:	011b      	lsls	r3, r3, #4
 801cbc6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	0f1b      	lsrs	r3, r3, #28
 801cbcc:	4a06      	ldr	r2, [pc, #24]	; (801cbe8 <SEQ_BitPosition+0x70>)
 801cbce:	5cd2      	ldrb	r2, [r2, r3]
 801cbd0:	7bfb      	ldrb	r3, [r7, #15]
 801cbd2:	4413      	add	r3, r2
 801cbd4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cbd6:	7bfb      	ldrb	r3, [r7, #15]
 801cbd8:	f1c3 031f 	rsb	r3, r3, #31
 801cbdc:	b2db      	uxtb	r3, r3
}
 801cbde:	4618      	mov	r0, r3
 801cbe0:	3714      	adds	r7, #20
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	bc80      	pop	{r7}
 801cbe6:	4770      	bx	lr
 801cbe8:	0801e744 	.word	0x0801e744

0801cbec <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cbf0:	4b04      	ldr	r3, [pc, #16]	; (801cc04 <UTIL_TIMER_Init+0x18>)
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cbf6:	4b04      	ldr	r3, [pc, #16]	; (801cc08 <UTIL_TIMER_Init+0x1c>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	4798      	blx	r3
 801cbfc:	4603      	mov	r3, r0
}
 801cbfe:	4618      	mov	r0, r3
 801cc00:	bd80      	pop	{r7, pc}
 801cc02:	bf00      	nop
 801cc04:	200018c8 	.word	0x200018c8
 801cc08:	0801e1c0 	.word	0x0801e1c0

0801cc0c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	60f8      	str	r0, [r7, #12]
 801cc14:	60b9      	str	r1, [r7, #8]
 801cc16:	603b      	str	r3, [r7, #0]
 801cc18:	4613      	mov	r3, r2
 801cc1a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d023      	beq.n	801cc6a <UTIL_TIMER_Create+0x5e>
 801cc22:	683b      	ldr	r3, [r7, #0]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d020      	beq.n	801cc6a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cc2e:	4b11      	ldr	r3, [pc, #68]	; (801cc74 <UTIL_TIMER_Create+0x68>)
 801cc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc32:	68b8      	ldr	r0, [r7, #8]
 801cc34:	4798      	blx	r3
 801cc36:	4602      	mov	r2, r0
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	2200      	movs	r2, #0
 801cc46:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	683a      	ldr	r2, [r7, #0]
 801cc52:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	69ba      	ldr	r2, [r7, #24]
 801cc58:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	79fa      	ldrb	r2, [r7, #7]
 801cc5e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	2200      	movs	r2, #0
 801cc64:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cc66:	2300      	movs	r3, #0
 801cc68:	e000      	b.n	801cc6c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cc6a:	2301      	movs	r3, #1
  }
}
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	3710      	adds	r7, #16
 801cc70:	46bd      	mov	sp, r7
 801cc72:	bd80      	pop	{r7, pc}
 801cc74:	0801e1c0 	.word	0x0801e1c0

0801cc78 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b08a      	sub	sp, #40	; 0x28
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cc80:	2300      	movs	r3, #0
 801cc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d056      	beq.n	801cd3a <UTIL_TIMER_Start+0xc2>
 801cc8c:	6878      	ldr	r0, [r7, #4]
 801cc8e:	f000 f9a9 	bl	801cfe4 <TimerExists>
 801cc92:	4603      	mov	r3, r0
 801cc94:	f083 0301 	eor.w	r3, r3, #1
 801cc98:	b2db      	uxtb	r3, r3
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d04d      	beq.n	801cd3a <UTIL_TIMER_Start+0xc2>
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	7a5b      	ldrb	r3, [r3, #9]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d149      	bne.n	801cd3a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cca6:	f3ef 8310 	mrs	r3, PRIMASK
 801ccaa:	613b      	str	r3, [r7, #16]
  return(result);
 801ccac:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ccae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccb0:	b672      	cpsid	i
}
 801ccb2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	685b      	ldr	r3, [r3, #4]
 801ccb8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ccba:	4b24      	ldr	r3, [pc, #144]	; (801cd4c <UTIL_TIMER_Start+0xd4>)
 801ccbc:	6a1b      	ldr	r3, [r3, #32]
 801ccbe:	4798      	blx	r3
 801ccc0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ccc2:	6a3a      	ldr	r2, [r7, #32]
 801ccc4:	69bb      	ldr	r3, [r7, #24]
 801ccc6:	429a      	cmp	r2, r3
 801ccc8:	d201      	bcs.n	801ccce <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ccca:	69bb      	ldr	r3, [r7, #24]
 801cccc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	6a3a      	ldr	r2, [r7, #32]
 801ccd2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	2201      	movs	r2, #1
 801ccde:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	2200      	movs	r2, #0
 801cce4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cce6:	4b1a      	ldr	r3, [pc, #104]	; (801cd50 <UTIL_TIMER_Start+0xd8>)
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d106      	bne.n	801ccfc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ccee:	4b17      	ldr	r3, [pc, #92]	; (801cd4c <UTIL_TIMER_Start+0xd4>)
 801ccf0:	691b      	ldr	r3, [r3, #16]
 801ccf2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ccf4:	6878      	ldr	r0, [r7, #4]
 801ccf6:	f000 f9eb 	bl	801d0d0 <TimerInsertNewHeadTimer>
 801ccfa:	e017      	b.n	801cd2c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ccfc:	4b13      	ldr	r3, [pc, #76]	; (801cd4c <UTIL_TIMER_Start+0xd4>)
 801ccfe:	699b      	ldr	r3, [r3, #24]
 801cd00:	4798      	blx	r3
 801cd02:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681a      	ldr	r2, [r3, #0]
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	441a      	add	r2, r3
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681a      	ldr	r2, [r3, #0]
 801cd14:	4b0e      	ldr	r3, [pc, #56]	; (801cd50 <UTIL_TIMER_Start+0xd8>)
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d203      	bcs.n	801cd26 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cd1e:	6878      	ldr	r0, [r7, #4]
 801cd20:	f000 f9d6 	bl	801d0d0 <TimerInsertNewHeadTimer>
 801cd24:	e002      	b.n	801cd2c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f000 f9a2 	bl	801d070 <TimerInsertTimer>
 801cd2c:	69fb      	ldr	r3, [r7, #28]
 801cd2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	f383 8810 	msr	PRIMASK, r3
}
 801cd36:	bf00      	nop
  {
 801cd38:	e002      	b.n	801cd40 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cd3a:	2301      	movs	r3, #1
 801cd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	3728      	adds	r7, #40	; 0x28
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}
 801cd4c:	0801e1c0 	.word	0x0801e1c0
 801cd50:	200018c8 	.word	0x200018c8

0801cd54 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cd54:	b580      	push	{r7, lr}
 801cd56:	b088      	sub	sp, #32
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d05b      	beq.n	801ce1e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd66:	f3ef 8310 	mrs	r3, PRIMASK
 801cd6a:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd6c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cd6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd70:	b672      	cpsid	i
}
 801cd72:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cd74:	4b2d      	ldr	r3, [pc, #180]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd7a:	4b2c      	ldr	r3, [pc, #176]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	2201      	movs	r2, #1
 801cd84:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cd86:	4b29      	ldr	r3, [pc, #164]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d041      	beq.n	801ce12 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	2200      	movs	r2, #0
 801cd92:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cd94:	4b25      	ldr	r3, [pc, #148]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	687a      	ldr	r2, [r7, #4]
 801cd9a:	429a      	cmp	r2, r3
 801cd9c:	d134      	bne.n	801ce08 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801cd9e:	4b23      	ldr	r3, [pc, #140]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	2200      	movs	r2, #0
 801cda4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cda6:	4b21      	ldr	r3, [pc, #132]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	695b      	ldr	r3, [r3, #20]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d00a      	beq.n	801cdc6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801cdb0:	4b1e      	ldr	r3, [pc, #120]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	695b      	ldr	r3, [r3, #20]
 801cdb6:	4a1d      	ldr	r2, [pc, #116]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cdb8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801cdba:	4b1c      	ldr	r3, [pc, #112]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f000 f92c 	bl	801d01c <TimerSetTimeout>
 801cdc4:	e023      	b.n	801ce0e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cdc6:	4b1a      	ldr	r3, [pc, #104]	; (801ce30 <UTIL_TIMER_Stop+0xdc>)
 801cdc8:	68db      	ldr	r3, [r3, #12]
 801cdca:	4798      	blx	r3
            TimerListHead = NULL;
 801cdcc:	4b17      	ldr	r3, [pc, #92]	; (801ce2c <UTIL_TIMER_Stop+0xd8>)
 801cdce:	2200      	movs	r2, #0
 801cdd0:	601a      	str	r2, [r3, #0]
 801cdd2:	e01c      	b.n	801ce0e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cdd4:	697a      	ldr	r2, [r7, #20]
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d110      	bne.n	801cdfe <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	695b      	ldr	r3, [r3, #20]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d006      	beq.n	801cdf2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801cde4:	697b      	ldr	r3, [r7, #20]
 801cde6:	695b      	ldr	r3, [r3, #20]
 801cde8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cdea:	69bb      	ldr	r3, [r7, #24]
 801cdec:	697a      	ldr	r2, [r7, #20]
 801cdee:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cdf0:	e00d      	b.n	801ce0e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cdf6:	69bb      	ldr	r3, [r7, #24]
 801cdf8:	697a      	ldr	r2, [r7, #20]
 801cdfa:	615a      	str	r2, [r3, #20]
            break;
 801cdfc:	e007      	b.n	801ce0e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	695b      	ldr	r3, [r3, #20]
 801ce06:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ce08:	697b      	ldr	r3, [r7, #20]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d1e2      	bne.n	801cdd4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ce0e:	2300      	movs	r3, #0
 801ce10:	77fb      	strb	r3, [r7, #31]
 801ce12:	693b      	ldr	r3, [r7, #16]
 801ce14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce16:	68bb      	ldr	r3, [r7, #8]
 801ce18:	f383 8810 	msr	PRIMASK, r3
}
 801ce1c:	e001      	b.n	801ce22 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ce1e:	2301      	movs	r3, #1
 801ce20:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ce22:	7ffb      	ldrb	r3, [r7, #31]
}
 801ce24:	4618      	mov	r0, r3
 801ce26:	3720      	adds	r7, #32
 801ce28:	46bd      	mov	sp, r7
 801ce2a:	bd80      	pop	{r7, pc}
 801ce2c:	200018c8 	.word	0x200018c8
 801ce30:	0801e1c0 	.word	0x0801e1c0

0801ce34 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b084      	sub	sp, #16
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
 801ce3c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ce3e:	2300      	movs	r3, #0
 801ce40:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d102      	bne.n	801ce4e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ce48:	2301      	movs	r3, #1
 801ce4a:	73fb      	strb	r3, [r7, #15]
 801ce4c:	e014      	b.n	801ce78 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ce4e:	4b0d      	ldr	r3, [pc, #52]	; (801ce84 <UTIL_TIMER_SetPeriod+0x50>)
 801ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce52:	6838      	ldr	r0, [r7, #0]
 801ce54:	4798      	blx	r3
 801ce56:	4602      	mov	r2, r0
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ce5c:	6878      	ldr	r0, [r7, #4]
 801ce5e:	f000 f8c1 	bl	801cfe4 <TimerExists>
 801ce62:	4603      	mov	r3, r0
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d007      	beq.n	801ce78 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ce68:	6878      	ldr	r0, [r7, #4]
 801ce6a:	f7ff ff73 	bl	801cd54 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f7ff ff02 	bl	801cc78 <UTIL_TIMER_Start>
 801ce74:	4603      	mov	r3, r0
 801ce76:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ce78:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	3710      	adds	r7, #16
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	bf00      	nop
 801ce84:	0801e1c0 	.word	0x0801e1c0

0801ce88 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ce88:	b590      	push	{r4, r7, lr}
 801ce8a:	b089      	sub	sp, #36	; 0x24
 801ce8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ce92:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce94:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ce96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce98:	b672      	cpsid	i
}
 801ce9a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ce9c:	4b38      	ldr	r3, [pc, #224]	; (801cf80 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ce9e:	695b      	ldr	r3, [r3, #20]
 801cea0:	4798      	blx	r3
 801cea2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cea4:	4b36      	ldr	r3, [pc, #216]	; (801cf80 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cea6:	691b      	ldr	r3, [r3, #16]
 801cea8:	4798      	blx	r3
 801ceaa:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ceac:	693a      	ldr	r2, [r7, #16]
 801ceae:	697b      	ldr	r3, [r7, #20]
 801ceb0:	1ad3      	subs	r3, r2, r3
 801ceb2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ceb4:	4b33      	ldr	r3, [pc, #204]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d037      	beq.n	801cf2c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801cebc:	4b31      	ldr	r3, [pc, #196]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cec2:	69fb      	ldr	r3, [r7, #28]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	68fa      	ldr	r2, [r7, #12]
 801cec8:	429a      	cmp	r2, r3
 801ceca:	d206      	bcs.n	801ceda <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801cecc:	69fb      	ldr	r3, [r7, #28]
 801cece:	681a      	ldr	r2, [r3, #0]
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	1ad2      	subs	r2, r2, r3
 801ced4:	69fb      	ldr	r3, [r7, #28]
 801ced6:	601a      	str	r2, [r3, #0]
 801ced8:	e002      	b.n	801cee0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ceda:	69fb      	ldr	r3, [r7, #28]
 801cedc:	2200      	movs	r2, #0
 801cede:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cee0:	69fb      	ldr	r3, [r7, #28]
 801cee2:	695b      	ldr	r3, [r3, #20]
 801cee4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cee6:	69fb      	ldr	r3, [r7, #28]
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d1ea      	bne.n	801cec2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ceec:	e01e      	b.n	801cf2c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ceee:	4b25      	ldr	r3, [pc, #148]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cef4:	4b23      	ldr	r3, [pc, #140]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	695b      	ldr	r3, [r3, #20]
 801cefa:	4a22      	ldr	r2, [pc, #136]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cefc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801cefe:	69fb      	ldr	r3, [r7, #28]
 801cf00:	2200      	movs	r2, #0
 801cf02:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cf04:	69fb      	ldr	r3, [r7, #28]
 801cf06:	2200      	movs	r2, #0
 801cf08:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cf0a:	69fb      	ldr	r3, [r7, #28]
 801cf0c:	68db      	ldr	r3, [r3, #12]
 801cf0e:	69fa      	ldr	r2, [r7, #28]
 801cf10:	6912      	ldr	r2, [r2, #16]
 801cf12:	4610      	mov	r0, r2
 801cf14:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cf16:	69fb      	ldr	r3, [r7, #28]
 801cf18:	7adb      	ldrb	r3, [r3, #11]
 801cf1a:	2b01      	cmp	r3, #1
 801cf1c:	d106      	bne.n	801cf2c <UTIL_TIMER_IRQ_Handler+0xa4>
 801cf1e:	69fb      	ldr	r3, [r7, #28]
 801cf20:	7a9b      	ldrb	r3, [r3, #10]
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d102      	bne.n	801cf2c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801cf26:	69f8      	ldr	r0, [r7, #28]
 801cf28:	f7ff fea6 	bl	801cc78 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf2c:	4b15      	ldr	r3, [pc, #84]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d00d      	beq.n	801cf50 <UTIL_TIMER_IRQ_Handler+0xc8>
 801cf34:	4b13      	ldr	r3, [pc, #76]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d0d7      	beq.n	801ceee <UTIL_TIMER_IRQ_Handler+0x66>
 801cf3e:	4b11      	ldr	r3, [pc, #68]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	681c      	ldr	r4, [r3, #0]
 801cf44:	4b0e      	ldr	r3, [pc, #56]	; (801cf80 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cf46:	699b      	ldr	r3, [r3, #24]
 801cf48:	4798      	blx	r3
 801cf4a:	4603      	mov	r3, r0
 801cf4c:	429c      	cmp	r4, r3
 801cf4e:	d3ce      	bcc.n	801ceee <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cf50:	4b0c      	ldr	r3, [pc, #48]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d009      	beq.n	801cf6c <UTIL_TIMER_IRQ_Handler+0xe4>
 801cf58:	4b0a      	ldr	r3, [pc, #40]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	7a1b      	ldrb	r3, [r3, #8]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d104      	bne.n	801cf6c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cf62:	4b08      	ldr	r3, [pc, #32]	; (801cf84 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	4618      	mov	r0, r3
 801cf68:	f000 f858 	bl	801d01c <TimerSetTimeout>
 801cf6c:	69bb      	ldr	r3, [r7, #24]
 801cf6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	f383 8810 	msr	PRIMASK, r3
}
 801cf76:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cf78:	bf00      	nop
 801cf7a:	3724      	adds	r7, #36	; 0x24
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	bd90      	pop	{r4, r7, pc}
 801cf80:	0801e1c0 	.word	0x0801e1c0
 801cf84:	200018c8 	.word	0x200018c8

0801cf88 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b082      	sub	sp, #8
 801cf8c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cf8e:	4b06      	ldr	r3, [pc, #24]	; (801cfa8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cf90:	69db      	ldr	r3, [r3, #28]
 801cf92:	4798      	blx	r3
 801cf94:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cf96:	4b04      	ldr	r3, [pc, #16]	; (801cfa8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf9a:	6878      	ldr	r0, [r7, #4]
 801cf9c:	4798      	blx	r3
 801cf9e:	4603      	mov	r3, r0
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	3708      	adds	r7, #8
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}
 801cfa8:	0801e1c0 	.word	0x0801e1c0

0801cfac <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b084      	sub	sp, #16
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cfb4:	4b0a      	ldr	r3, [pc, #40]	; (801cfe0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfb6:	69db      	ldr	r3, [r3, #28]
 801cfb8:	4798      	blx	r3
 801cfba:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cfbc:	4b08      	ldr	r3, [pc, #32]	; (801cfe0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	4798      	blx	r3
 801cfc4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cfc6:	4b06      	ldr	r3, [pc, #24]	; (801cfe0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfca:	68f9      	ldr	r1, [r7, #12]
 801cfcc:	68ba      	ldr	r2, [r7, #8]
 801cfce:	1a8a      	subs	r2, r1, r2
 801cfd0:	4610      	mov	r0, r2
 801cfd2:	4798      	blx	r3
 801cfd4:	4603      	mov	r3, r0
}
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	3710      	adds	r7, #16
 801cfda:	46bd      	mov	sp, r7
 801cfdc:	bd80      	pop	{r7, pc}
 801cfde:	bf00      	nop
 801cfe0:	0801e1c0 	.word	0x0801e1c0

0801cfe4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cfe4:	b480      	push	{r7}
 801cfe6:	b085      	sub	sp, #20
 801cfe8:	af00      	add	r7, sp, #0
 801cfea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cfec:	4b0a      	ldr	r3, [pc, #40]	; (801d018 <TimerExists+0x34>)
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cff2:	e008      	b.n	801d006 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cff4:	68fa      	ldr	r2, [r7, #12]
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d101      	bne.n	801d000 <TimerExists+0x1c>
    {
      return true;
 801cffc:	2301      	movs	r3, #1
 801cffe:	e006      	b.n	801d00e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	695b      	ldr	r3, [r3, #20]
 801d004:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d1f3      	bne.n	801cff4 <TimerExists+0x10>
  }
  return false;
 801d00c:	2300      	movs	r3, #0
}
 801d00e:	4618      	mov	r0, r3
 801d010:	3714      	adds	r7, #20
 801d012:	46bd      	mov	sp, r7
 801d014:	bc80      	pop	{r7}
 801d016:	4770      	bx	lr
 801d018:	200018c8 	.word	0x200018c8

0801d01c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d01c:	b590      	push	{r4, r7, lr}
 801d01e:	b085      	sub	sp, #20
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d024:	4b11      	ldr	r3, [pc, #68]	; (801d06c <TimerSetTimeout+0x50>)
 801d026:	6a1b      	ldr	r3, [r3, #32]
 801d028:	4798      	blx	r3
 801d02a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	2201      	movs	r2, #1
 801d030:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	681c      	ldr	r4, [r3, #0]
 801d036:	4b0d      	ldr	r3, [pc, #52]	; (801d06c <TimerSetTimeout+0x50>)
 801d038:	699b      	ldr	r3, [r3, #24]
 801d03a:	4798      	blx	r3
 801d03c:	4602      	mov	r2, r0
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	4413      	add	r3, r2
 801d042:	429c      	cmp	r4, r3
 801d044:	d207      	bcs.n	801d056 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d046:	4b09      	ldr	r3, [pc, #36]	; (801d06c <TimerSetTimeout+0x50>)
 801d048:	699b      	ldr	r3, [r3, #24]
 801d04a:	4798      	blx	r3
 801d04c:	4602      	mov	r2, r0
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	441a      	add	r2, r3
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d056:	4b05      	ldr	r3, [pc, #20]	; (801d06c <TimerSetTimeout+0x50>)
 801d058:	689b      	ldr	r3, [r3, #8]
 801d05a:	687a      	ldr	r2, [r7, #4]
 801d05c:	6812      	ldr	r2, [r2, #0]
 801d05e:	4610      	mov	r0, r2
 801d060:	4798      	blx	r3
}
 801d062:	bf00      	nop
 801d064:	3714      	adds	r7, #20
 801d066:	46bd      	mov	sp, r7
 801d068:	bd90      	pop	{r4, r7, pc}
 801d06a:	bf00      	nop
 801d06c:	0801e1c0 	.word	0x0801e1c0

0801d070 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d070:	b480      	push	{r7}
 801d072:	b085      	sub	sp, #20
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d078:	4b14      	ldr	r3, [pc, #80]	; (801d0cc <TimerInsertTimer+0x5c>)
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d07e:	4b13      	ldr	r3, [pc, #76]	; (801d0cc <TimerInsertTimer+0x5c>)
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	695b      	ldr	r3, [r3, #20]
 801d084:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d086:	e012      	b.n	801d0ae <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681a      	ldr	r2, [r3, #0]
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	429a      	cmp	r2, r3
 801d092:	d905      	bls.n	801d0a0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d098:	68bb      	ldr	r3, [r7, #8]
 801d09a:	695b      	ldr	r3, [r3, #20]
 801d09c:	60bb      	str	r3, [r7, #8]
 801d09e:	e006      	b.n	801d0ae <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	687a      	ldr	r2, [r7, #4]
 801d0a4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	68ba      	ldr	r2, [r7, #8]
 801d0aa:	615a      	str	r2, [r3, #20]
        return;
 801d0ac:	e009      	b.n	801d0c2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	695b      	ldr	r3, [r3, #20]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d1e8      	bne.n	801d088 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	687a      	ldr	r2, [r7, #4]
 801d0ba:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	2200      	movs	r2, #0
 801d0c0:	615a      	str	r2, [r3, #20]
}
 801d0c2:	3714      	adds	r7, #20
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	bc80      	pop	{r7}
 801d0c8:	4770      	bx	lr
 801d0ca:	bf00      	nop
 801d0cc:	200018c8 	.word	0x200018c8

0801d0d0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b084      	sub	sp, #16
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d0d8:	4b0b      	ldr	r3, [pc, #44]	; (801d108 <TimerInsertNewHeadTimer+0x38>)
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d002      	beq.n	801d0ea <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	68fa      	ldr	r2, [r7, #12]
 801d0ee:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d0f0:	4a05      	ldr	r2, [pc, #20]	; (801d108 <TimerInsertNewHeadTimer+0x38>)
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d0f6:	4b04      	ldr	r3, [pc, #16]	; (801d108 <TimerInsertNewHeadTimer+0x38>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7ff ff8e 	bl	801d01c <TimerSetTimeout>
}
 801d100:	bf00      	nop
 801d102:	3710      	adds	r7, #16
 801d104:	46bd      	mov	sp, r7
 801d106:	bd80      	pop	{r7, pc}
 801d108:	200018c8 	.word	0x200018c8

0801d10c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d110:	2218      	movs	r2, #24
 801d112:	2100      	movs	r1, #0
 801d114:	4807      	ldr	r0, [pc, #28]	; (801d134 <UTIL_ADV_TRACE_Init+0x28>)
 801d116:	f7fe fffa 	bl	801c10e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d11a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d11e:	2100      	movs	r1, #0
 801d120:	4805      	ldr	r0, [pc, #20]	; (801d138 <UTIL_ADV_TRACE_Init+0x2c>)
 801d122:	f7fe fff4 	bl	801c10e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d126:	4b05      	ldr	r3, [pc, #20]	; (801d13c <UTIL_ADV_TRACE_Init+0x30>)
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	4805      	ldr	r0, [pc, #20]	; (801d140 <UTIL_ADV_TRACE_Init+0x34>)
 801d12c:	4798      	blx	r3
 801d12e:	4603      	mov	r3, r0
}
 801d130:	4618      	mov	r0, r3
 801d132:	bd80      	pop	{r7, pc}
 801d134:	200018cc 	.word	0x200018cc
 801d138:	200018e4 	.word	0x200018e4
 801d13c:	0801e200 	.word	0x0801e200
 801d140:	0801d3ad 	.word	0x0801d3ad

0801d144 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d144:	b480      	push	{r7}
 801d146:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d148:	4b06      	ldr	r3, [pc, #24]	; (801d164 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d14a:	8a5a      	ldrh	r2, [r3, #18]
 801d14c:	4b05      	ldr	r3, [pc, #20]	; (801d164 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d14e:	8a1b      	ldrh	r3, [r3, #16]
 801d150:	429a      	cmp	r2, r3
 801d152:	d101      	bne.n	801d158 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d154:	2301      	movs	r3, #1
 801d156:	e000      	b.n	801d15a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d158:	2300      	movs	r3, #0
}
 801d15a:	4618      	mov	r0, r3
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bc80      	pop	{r7}
 801d160:	4770      	bx	lr
 801d162:	bf00      	nop
 801d164:	200018cc 	.word	0x200018cc

0801d168 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d168:	b408      	push	{r3}
 801d16a:	b580      	push	{r7, lr}
 801d16c:	b08d      	sub	sp, #52	; 0x34
 801d16e:	af00      	add	r7, sp, #0
 801d170:	60f8      	str	r0, [r7, #12]
 801d172:	60b9      	str	r1, [r7, #8]
 801d174:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d176:	2300      	movs	r3, #0
 801d178:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d17a:	2300      	movs	r3, #0
 801d17c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d17e:	4b37      	ldr	r3, [pc, #220]	; (801d25c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d180:	7a1b      	ldrb	r3, [r3, #8]
 801d182:	461a      	mov	r2, r3
 801d184:	68fb      	ldr	r3, [r7, #12]
 801d186:	4293      	cmp	r3, r2
 801d188:	d902      	bls.n	801d190 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d18a:	f06f 0304 	mvn.w	r3, #4
 801d18e:	e05e      	b.n	801d24e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d190:	4b32      	ldr	r3, [pc, #200]	; (801d25c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d192:	68da      	ldr	r2, [r3, #12]
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	4013      	ands	r3, r2
 801d198:	68ba      	ldr	r2, [r7, #8]
 801d19a:	429a      	cmp	r2, r3
 801d19c:	d002      	beq.n	801d1a4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d19e:	f06f 0305 	mvn.w	r3, #5
 801d1a2:	e054      	b.n	801d24e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d1a4:	4b2d      	ldr	r3, [pc, #180]	; (801d25c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1a6:	685b      	ldr	r3, [r3, #4]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d00a      	beq.n	801d1c2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d007      	beq.n	801d1c2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d1b2:	4b2a      	ldr	r3, [pc, #168]	; (801d25c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1b4:	685b      	ldr	r3, [r3, #4]
 801d1b6:	f107 0116 	add.w	r1, r7, #22
 801d1ba:	f107 0218 	add.w	r2, r7, #24
 801d1be:	4610      	mov	r0, r2
 801d1c0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d1c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d1cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d1d0:	4823      	ldr	r0, [pc, #140]	; (801d260 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d1d2:	f7ff fa29 	bl	801c628 <tiny_vsnprintf_like>
 801d1d6:	4603      	mov	r3, r0
 801d1d8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d1da:	f000 f9f1 	bl	801d5c0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d1de:	8afa      	ldrh	r2, [r7, #22]
 801d1e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d1e2:	4413      	add	r3, r2
 801d1e4:	b29b      	uxth	r3, r3
 801d1e6:	f107 0214 	add.w	r2, r7, #20
 801d1ea:	4611      	mov	r1, r2
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	f000 f969 	bl	801d4c4 <TRACE_AllocateBufer>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1f8:	d025      	beq.n	801d246 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d1fe:	e00e      	b.n	801d21e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d200:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d202:	8aba      	ldrh	r2, [r7, #20]
 801d204:	3330      	adds	r3, #48	; 0x30
 801d206:	443b      	add	r3, r7
 801d208:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d20c:	4b15      	ldr	r3, [pc, #84]	; (801d264 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d20e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d210:	8abb      	ldrh	r3, [r7, #20]
 801d212:	3301      	adds	r3, #1
 801d214:	b29b      	uxth	r3, r3
 801d216:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d218:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d21a:	3301      	adds	r3, #1
 801d21c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d21e:	8afb      	ldrh	r3, [r7, #22]
 801d220:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d222:	429a      	cmp	r2, r3
 801d224:	d3ec      	bcc.n	801d200 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d226:	8abb      	ldrh	r3, [r7, #20]
 801d228:	461a      	mov	r2, r3
 801d22a:	4b0e      	ldr	r3, [pc, #56]	; (801d264 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d22c:	18d0      	adds	r0, r2, r3
 801d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d232:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d236:	f7ff f9f7 	bl	801c628 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d23a:	f000 f9df 	bl	801d5fc <TRACE_UnLock>

    return TRACE_Send();
 801d23e:	f000 f831 	bl	801d2a4 <TRACE_Send>
 801d242:	4603      	mov	r3, r0
 801d244:	e003      	b.n	801d24e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d246:	f000 f9d9 	bl	801d5fc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d24a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d24e:	4618      	mov	r0, r3
 801d250:	3734      	adds	r7, #52	; 0x34
 801d252:	46bd      	mov	sp, r7
 801d254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d258:	b001      	add	sp, #4
 801d25a:	4770      	bx	lr
 801d25c:	200018cc 	.word	0x200018cc
 801d260:	20001ce4 	.word	0x20001ce4
 801d264:	200018e4 	.word	0x200018e4

0801d268 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d268:	b480      	push	{r7}
 801d26a:	b083      	sub	sp, #12
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d270:	4a03      	ldr	r2, [pc, #12]	; (801d280 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6053      	str	r3, [r2, #4]
}
 801d276:	bf00      	nop
 801d278:	370c      	adds	r7, #12
 801d27a:	46bd      	mov	sp, r7
 801d27c:	bc80      	pop	{r7}
 801d27e:	4770      	bx	lr
 801d280:	200018cc 	.word	0x200018cc

0801d284 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d284:	b480      	push	{r7}
 801d286:	b083      	sub	sp, #12
 801d288:	af00      	add	r7, sp, #0
 801d28a:	4603      	mov	r3, r0
 801d28c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d28e:	4a04      	ldr	r2, [pc, #16]	; (801d2a0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d290:	79fb      	ldrb	r3, [r7, #7]
 801d292:	7213      	strb	r3, [r2, #8]
}
 801d294:	bf00      	nop
 801d296:	370c      	adds	r7, #12
 801d298:	46bd      	mov	sp, r7
 801d29a:	bc80      	pop	{r7}
 801d29c:	4770      	bx	lr
 801d29e:	bf00      	nop
 801d2a0:	200018cc 	.word	0x200018cc

0801d2a4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b088      	sub	sp, #32
 801d2a8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801d2b6:	613b      	str	r3, [r7, #16]
  return(result);
 801d2b8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d2ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d2bc:	b672      	cpsid	i
}
 801d2be:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d2c0:	f000 f9ba 	bl	801d638 <TRACE_IsLocked>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d15d      	bne.n	801d386 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d2ca:	f000 f979 	bl	801d5c0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d2ce:	4b34      	ldr	r3, [pc, #208]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2d0:	8a1a      	ldrh	r2, [r3, #16]
 801d2d2:	4b33      	ldr	r3, [pc, #204]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2d4:	8a5b      	ldrh	r3, [r3, #18]
 801d2d6:	429a      	cmp	r2, r3
 801d2d8:	d04d      	beq.n	801d376 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d2da:	4b31      	ldr	r3, [pc, #196]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2dc:	789b      	ldrb	r3, [r3, #2]
 801d2de:	2b01      	cmp	r3, #1
 801d2e0:	d117      	bne.n	801d312 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d2e2:	4b2f      	ldr	r3, [pc, #188]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2e4:	881a      	ldrh	r2, [r3, #0]
 801d2e6:	4b2e      	ldr	r3, [pc, #184]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2e8:	8a1b      	ldrh	r3, [r3, #16]
 801d2ea:	1ad3      	subs	r3, r2, r3
 801d2ec:	b29a      	uxth	r2, r3
 801d2ee:	4b2c      	ldr	r3, [pc, #176]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2f0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d2f2:	4b2b      	ldr	r3, [pc, #172]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2f4:	2202      	movs	r2, #2
 801d2f6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d2f8:	4b29      	ldr	r3, [pc, #164]	; (801d3a0 <TRACE_Send+0xfc>)
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d2fe:	4b28      	ldr	r3, [pc, #160]	; (801d3a0 <TRACE_Send+0xfc>)
 801d300:	8a9b      	ldrh	r3, [r3, #20]
 801d302:	2b00      	cmp	r3, #0
 801d304:	d105      	bne.n	801d312 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d306:	4b26      	ldr	r3, [pc, #152]	; (801d3a0 <TRACE_Send+0xfc>)
 801d308:	2200      	movs	r2, #0
 801d30a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d30c:	4b24      	ldr	r3, [pc, #144]	; (801d3a0 <TRACE_Send+0xfc>)
 801d30e:	2200      	movs	r2, #0
 801d310:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d312:	4b23      	ldr	r3, [pc, #140]	; (801d3a0 <TRACE_Send+0xfc>)
 801d314:	789b      	ldrb	r3, [r3, #2]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d115      	bne.n	801d346 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d31a:	4b21      	ldr	r3, [pc, #132]	; (801d3a0 <TRACE_Send+0xfc>)
 801d31c:	8a5a      	ldrh	r2, [r3, #18]
 801d31e:	4b20      	ldr	r3, [pc, #128]	; (801d3a0 <TRACE_Send+0xfc>)
 801d320:	8a1b      	ldrh	r3, [r3, #16]
 801d322:	429a      	cmp	r2, r3
 801d324:	d908      	bls.n	801d338 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d326:	4b1e      	ldr	r3, [pc, #120]	; (801d3a0 <TRACE_Send+0xfc>)
 801d328:	8a5a      	ldrh	r2, [r3, #18]
 801d32a:	4b1d      	ldr	r3, [pc, #116]	; (801d3a0 <TRACE_Send+0xfc>)
 801d32c:	8a1b      	ldrh	r3, [r3, #16]
 801d32e:	1ad3      	subs	r3, r2, r3
 801d330:	b29a      	uxth	r2, r3
 801d332:	4b1b      	ldr	r3, [pc, #108]	; (801d3a0 <TRACE_Send+0xfc>)
 801d334:	829a      	strh	r2, [r3, #20]
 801d336:	e006      	b.n	801d346 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d338:	4b19      	ldr	r3, [pc, #100]	; (801d3a0 <TRACE_Send+0xfc>)
 801d33a:	8a1b      	ldrh	r3, [r3, #16]
 801d33c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d340:	b29a      	uxth	r2, r3
 801d342:	4b17      	ldr	r3, [pc, #92]	; (801d3a0 <TRACE_Send+0xfc>)
 801d344:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d346:	4b16      	ldr	r3, [pc, #88]	; (801d3a0 <TRACE_Send+0xfc>)
 801d348:	8a1b      	ldrh	r3, [r3, #16]
 801d34a:	461a      	mov	r2, r3
 801d34c:	4b15      	ldr	r3, [pc, #84]	; (801d3a4 <TRACE_Send+0x100>)
 801d34e:	4413      	add	r3, r2
 801d350:	61bb      	str	r3, [r7, #24]
 801d352:	697b      	ldr	r3, [r7, #20]
 801d354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	f383 8810 	msr	PRIMASK, r3
}
 801d35c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d35e:	f7e5 fa0f 	bl	8002780 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d362:	4b11      	ldr	r3, [pc, #68]	; (801d3a8 <TRACE_Send+0x104>)
 801d364:	68db      	ldr	r3, [r3, #12]
 801d366:	4a0e      	ldr	r2, [pc, #56]	; (801d3a0 <TRACE_Send+0xfc>)
 801d368:	8a92      	ldrh	r2, [r2, #20]
 801d36a:	4611      	mov	r1, r2
 801d36c:	69b8      	ldr	r0, [r7, #24]
 801d36e:	4798      	blx	r3
 801d370:	4603      	mov	r3, r0
 801d372:	77fb      	strb	r3, [r7, #31]
 801d374:	e00d      	b.n	801d392 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d376:	f000 f941 	bl	801d5fc <TRACE_UnLock>
 801d37a:	697b      	ldr	r3, [r7, #20]
 801d37c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d37e:	68bb      	ldr	r3, [r7, #8]
 801d380:	f383 8810 	msr	PRIMASK, r3
}
 801d384:	e005      	b.n	801d392 <TRACE_Send+0xee>
 801d386:	697b      	ldr	r3, [r7, #20]
 801d388:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	f383 8810 	msr	PRIMASK, r3
}
 801d390:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d392:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d396:	4618      	mov	r0, r3
 801d398:	3720      	adds	r7, #32
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	200018cc 	.word	0x200018cc
 801d3a4:	200018e4 	.word	0x200018e4
 801d3a8:	0801e200 	.word	0x0801e200

0801d3ac <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b088      	sub	sp, #32
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3b8:	f3ef 8310 	mrs	r3, PRIMASK
 801d3bc:	617b      	str	r3, [r7, #20]
  return(result);
 801d3be:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d3c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3c2:	b672      	cpsid	i
}
 801d3c4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d3c6:	4b3c      	ldr	r3, [pc, #240]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3c8:	789b      	ldrb	r3, [r3, #2]
 801d3ca:	2b02      	cmp	r3, #2
 801d3cc:	d106      	bne.n	801d3dc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d3ce:	4b3a      	ldr	r3, [pc, #232]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d3d4:	4b38      	ldr	r3, [pc, #224]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	821a      	strh	r2, [r3, #16]
 801d3da:	e00a      	b.n	801d3f2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d3dc:	4b36      	ldr	r3, [pc, #216]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3de:	8a1a      	ldrh	r2, [r3, #16]
 801d3e0:	4b35      	ldr	r3, [pc, #212]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3e2:	8a9b      	ldrh	r3, [r3, #20]
 801d3e4:	4413      	add	r3, r2
 801d3e6:	b29b      	uxth	r3, r3
 801d3e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d3ec:	b29a      	uxth	r2, r3
 801d3ee:	4b32      	ldr	r3, [pc, #200]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3f0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d3f2:	4b31      	ldr	r3, [pc, #196]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3f4:	8a1a      	ldrh	r2, [r3, #16]
 801d3f6:	4b30      	ldr	r3, [pc, #192]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d3f8:	8a5b      	ldrh	r3, [r3, #18]
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	d04d      	beq.n	801d49a <TRACE_TxCpltCallback+0xee>
 801d3fe:	4b2e      	ldr	r3, [pc, #184]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d400:	8adb      	ldrh	r3, [r3, #22]
 801d402:	2b01      	cmp	r3, #1
 801d404:	d149      	bne.n	801d49a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d406:	4b2c      	ldr	r3, [pc, #176]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d408:	789b      	ldrb	r3, [r3, #2]
 801d40a:	2b01      	cmp	r3, #1
 801d40c:	d117      	bne.n	801d43e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d40e:	4b2a      	ldr	r3, [pc, #168]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d410:	881a      	ldrh	r2, [r3, #0]
 801d412:	4b29      	ldr	r3, [pc, #164]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d414:	8a1b      	ldrh	r3, [r3, #16]
 801d416:	1ad3      	subs	r3, r2, r3
 801d418:	b29a      	uxth	r2, r3
 801d41a:	4b27      	ldr	r3, [pc, #156]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d41c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d41e:	4b26      	ldr	r3, [pc, #152]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d420:	2202      	movs	r2, #2
 801d422:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d424:	4b24      	ldr	r3, [pc, #144]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d426:	2200      	movs	r2, #0
 801d428:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d42a:	4b23      	ldr	r3, [pc, #140]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d42c:	8a9b      	ldrh	r3, [r3, #20]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d105      	bne.n	801d43e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d432:	4b21      	ldr	r3, [pc, #132]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d434:	2200      	movs	r2, #0
 801d436:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d438:	4b1f      	ldr	r3, [pc, #124]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d43a:	2200      	movs	r2, #0
 801d43c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d43e:	4b1e      	ldr	r3, [pc, #120]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d440:	789b      	ldrb	r3, [r3, #2]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d115      	bne.n	801d472 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d446:	4b1c      	ldr	r3, [pc, #112]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d448:	8a5a      	ldrh	r2, [r3, #18]
 801d44a:	4b1b      	ldr	r3, [pc, #108]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d44c:	8a1b      	ldrh	r3, [r3, #16]
 801d44e:	429a      	cmp	r2, r3
 801d450:	d908      	bls.n	801d464 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d452:	4b19      	ldr	r3, [pc, #100]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d454:	8a5a      	ldrh	r2, [r3, #18]
 801d456:	4b18      	ldr	r3, [pc, #96]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d458:	8a1b      	ldrh	r3, [r3, #16]
 801d45a:	1ad3      	subs	r3, r2, r3
 801d45c:	b29a      	uxth	r2, r3
 801d45e:	4b16      	ldr	r3, [pc, #88]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d460:	829a      	strh	r2, [r3, #20]
 801d462:	e006      	b.n	801d472 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d464:	4b14      	ldr	r3, [pc, #80]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d466:	8a1b      	ldrh	r3, [r3, #16]
 801d468:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d46c:	b29a      	uxth	r2, r3
 801d46e:	4b12      	ldr	r3, [pc, #72]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d470:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d472:	4b11      	ldr	r3, [pc, #68]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d474:	8a1b      	ldrh	r3, [r3, #16]
 801d476:	461a      	mov	r2, r3
 801d478:	4b10      	ldr	r3, [pc, #64]	; (801d4bc <TRACE_TxCpltCallback+0x110>)
 801d47a:	4413      	add	r3, r2
 801d47c:	61fb      	str	r3, [r7, #28]
 801d47e:	69bb      	ldr	r3, [r7, #24]
 801d480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d482:	693b      	ldr	r3, [r7, #16]
 801d484:	f383 8810 	msr	PRIMASK, r3
}
 801d488:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d48a:	4b0d      	ldr	r3, [pc, #52]	; (801d4c0 <TRACE_TxCpltCallback+0x114>)
 801d48c:	68db      	ldr	r3, [r3, #12]
 801d48e:	4a0a      	ldr	r2, [pc, #40]	; (801d4b8 <TRACE_TxCpltCallback+0x10c>)
 801d490:	8a92      	ldrh	r2, [r2, #20]
 801d492:	4611      	mov	r1, r2
 801d494:	69f8      	ldr	r0, [r7, #28]
 801d496:	4798      	blx	r3
 801d498:	e00a      	b.n	801d4b0 <TRACE_TxCpltCallback+0x104>
 801d49a:	69bb      	ldr	r3, [r7, #24]
 801d49c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	f383 8810 	msr	PRIMASK, r3
}
 801d4a4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d4a6:	f7e5 f973 	bl	8002790 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d4aa:	f000 f8a7 	bl	801d5fc <TRACE_UnLock>
  }
}
 801d4ae:	bf00      	nop
 801d4b0:	bf00      	nop
 801d4b2:	3720      	adds	r7, #32
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}
 801d4b8:	200018cc 	.word	0x200018cc
 801d4bc:	200018e4 	.word	0x200018e4
 801d4c0:	0801e200 	.word	0x0801e200

0801d4c4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d4c4:	b480      	push	{r7}
 801d4c6:	b087      	sub	sp, #28
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	4603      	mov	r3, r0
 801d4cc:	6039      	str	r1, [r7, #0]
 801d4ce:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d4d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d4d4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4d6:	f3ef 8310 	mrs	r3, PRIMASK
 801d4da:	60fb      	str	r3, [r7, #12]
  return(result);
 801d4dc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d4de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d4e0:	b672      	cpsid	i
}
 801d4e2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d4e4:	4b35      	ldr	r3, [pc, #212]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d4e6:	8a5a      	ldrh	r2, [r3, #18]
 801d4e8:	4b34      	ldr	r3, [pc, #208]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d4ea:	8a1b      	ldrh	r3, [r3, #16]
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	d11b      	bne.n	801d528 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d4f0:	4b32      	ldr	r3, [pc, #200]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d4f2:	8a5b      	ldrh	r3, [r3, #18]
 801d4f4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d4f8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d4fa:	88fa      	ldrh	r2, [r7, #6]
 801d4fc:	8afb      	ldrh	r3, [r7, #22]
 801d4fe:	429a      	cmp	r2, r3
 801d500:	d33a      	bcc.n	801d578 <TRACE_AllocateBufer+0xb4>
 801d502:	4b2e      	ldr	r3, [pc, #184]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d504:	8a1b      	ldrh	r3, [r3, #16]
 801d506:	88fa      	ldrh	r2, [r7, #6]
 801d508:	429a      	cmp	r2, r3
 801d50a:	d235      	bcs.n	801d578 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d50c:	4b2b      	ldr	r3, [pc, #172]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d50e:	2201      	movs	r2, #1
 801d510:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d512:	4b2a      	ldr	r3, [pc, #168]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d514:	8a5a      	ldrh	r2, [r3, #18]
 801d516:	4b29      	ldr	r3, [pc, #164]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d518:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d51a:	4b28      	ldr	r3, [pc, #160]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d51c:	8a1b      	ldrh	r3, [r3, #16]
 801d51e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d520:	4b26      	ldr	r3, [pc, #152]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d522:	2200      	movs	r2, #0
 801d524:	825a      	strh	r2, [r3, #18]
 801d526:	e027      	b.n	801d578 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d528:	4b24      	ldr	r3, [pc, #144]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d52a:	8a5a      	ldrh	r2, [r3, #18]
 801d52c:	4b23      	ldr	r3, [pc, #140]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d52e:	8a1b      	ldrh	r3, [r3, #16]
 801d530:	429a      	cmp	r2, r3
 801d532:	d91b      	bls.n	801d56c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d534:	4b21      	ldr	r3, [pc, #132]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d536:	8a5b      	ldrh	r3, [r3, #18]
 801d538:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d53c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d53e:	88fa      	ldrh	r2, [r7, #6]
 801d540:	8afb      	ldrh	r3, [r7, #22]
 801d542:	429a      	cmp	r2, r3
 801d544:	d318      	bcc.n	801d578 <TRACE_AllocateBufer+0xb4>
 801d546:	4b1d      	ldr	r3, [pc, #116]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d548:	8a1b      	ldrh	r3, [r3, #16]
 801d54a:	88fa      	ldrh	r2, [r7, #6]
 801d54c:	429a      	cmp	r2, r3
 801d54e:	d213      	bcs.n	801d578 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d550:	4b1a      	ldr	r3, [pc, #104]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d552:	2201      	movs	r2, #1
 801d554:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d556:	4b19      	ldr	r3, [pc, #100]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d558:	8a5a      	ldrh	r2, [r3, #18]
 801d55a:	4b18      	ldr	r3, [pc, #96]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d55c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d55e:	4b17      	ldr	r3, [pc, #92]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d560:	8a1b      	ldrh	r3, [r3, #16]
 801d562:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d564:	4b15      	ldr	r3, [pc, #84]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d566:	2200      	movs	r2, #0
 801d568:	825a      	strh	r2, [r3, #18]
 801d56a:	e005      	b.n	801d578 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d56c:	4b13      	ldr	r3, [pc, #76]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d56e:	8a1a      	ldrh	r2, [r3, #16]
 801d570:	4b12      	ldr	r3, [pc, #72]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d572:	8a5b      	ldrh	r3, [r3, #18]
 801d574:	1ad3      	subs	r3, r2, r3
 801d576:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d578:	8afa      	ldrh	r2, [r7, #22]
 801d57a:	88fb      	ldrh	r3, [r7, #6]
 801d57c:	429a      	cmp	r2, r3
 801d57e:	d90f      	bls.n	801d5a0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d580:	4b0e      	ldr	r3, [pc, #56]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d582:	8a5a      	ldrh	r2, [r3, #18]
 801d584:	683b      	ldr	r3, [r7, #0]
 801d586:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d588:	4b0c      	ldr	r3, [pc, #48]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d58a:	8a5a      	ldrh	r2, [r3, #18]
 801d58c:	88fb      	ldrh	r3, [r7, #6]
 801d58e:	4413      	add	r3, r2
 801d590:	b29b      	uxth	r3, r3
 801d592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d596:	b29a      	uxth	r2, r3
 801d598:	4b08      	ldr	r3, [pc, #32]	; (801d5bc <TRACE_AllocateBufer+0xf8>)
 801d59a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d59c:	2300      	movs	r3, #0
 801d59e:	82bb      	strh	r3, [r7, #20]
 801d5a0:	693b      	ldr	r3, [r7, #16]
 801d5a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	f383 8810 	msr	PRIMASK, r3
}
 801d5aa:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d5ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d5b0:	4618      	mov	r0, r3
 801d5b2:	371c      	adds	r7, #28
 801d5b4:	46bd      	mov	sp, r7
 801d5b6:	bc80      	pop	{r7}
 801d5b8:	4770      	bx	lr
 801d5ba:	bf00      	nop
 801d5bc:	200018cc 	.word	0x200018cc

0801d5c0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d5c0:	b480      	push	{r7}
 801d5c2:	b085      	sub	sp, #20
 801d5c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5c6:	f3ef 8310 	mrs	r3, PRIMASK
 801d5ca:	607b      	str	r3, [r7, #4]
  return(result);
 801d5cc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d5ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d5d0:	b672      	cpsid	i
}
 801d5d2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d5d4:	4b08      	ldr	r3, [pc, #32]	; (801d5f8 <TRACE_Lock+0x38>)
 801d5d6:	8adb      	ldrh	r3, [r3, #22]
 801d5d8:	3301      	adds	r3, #1
 801d5da:	b29a      	uxth	r2, r3
 801d5dc:	4b06      	ldr	r3, [pc, #24]	; (801d5f8 <TRACE_Lock+0x38>)
 801d5de:	82da      	strh	r2, [r3, #22]
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5e4:	68bb      	ldr	r3, [r7, #8]
 801d5e6:	f383 8810 	msr	PRIMASK, r3
}
 801d5ea:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d5ec:	bf00      	nop
 801d5ee:	3714      	adds	r7, #20
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bc80      	pop	{r7}
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop
 801d5f8:	200018cc 	.word	0x200018cc

0801d5fc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d5fc:	b480      	push	{r7}
 801d5fe:	b085      	sub	sp, #20
 801d600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d602:	f3ef 8310 	mrs	r3, PRIMASK
 801d606:	607b      	str	r3, [r7, #4]
  return(result);
 801d608:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d60a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d60c:	b672      	cpsid	i
}
 801d60e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d610:	4b08      	ldr	r3, [pc, #32]	; (801d634 <TRACE_UnLock+0x38>)
 801d612:	8adb      	ldrh	r3, [r3, #22]
 801d614:	3b01      	subs	r3, #1
 801d616:	b29a      	uxth	r2, r3
 801d618:	4b06      	ldr	r3, [pc, #24]	; (801d634 <TRACE_UnLock+0x38>)
 801d61a:	82da      	strh	r2, [r3, #22]
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d620:	68bb      	ldr	r3, [r7, #8]
 801d622:	f383 8810 	msr	PRIMASK, r3
}
 801d626:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d628:	bf00      	nop
 801d62a:	3714      	adds	r7, #20
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bc80      	pop	{r7}
 801d630:	4770      	bx	lr
 801d632:	bf00      	nop
 801d634:	200018cc 	.word	0x200018cc

0801d638 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d638:	b480      	push	{r7}
 801d63a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d63c:	4b05      	ldr	r3, [pc, #20]	; (801d654 <TRACE_IsLocked+0x1c>)
 801d63e:	8adb      	ldrh	r3, [r3, #22]
 801d640:	2b00      	cmp	r3, #0
 801d642:	bf14      	ite	ne
 801d644:	2301      	movne	r3, #1
 801d646:	2300      	moveq	r3, #0
 801d648:	b2db      	uxtb	r3, r3
}
 801d64a:	4618      	mov	r0, r3
 801d64c:	46bd      	mov	sp, r7
 801d64e:	bc80      	pop	{r7}
 801d650:	4770      	bx	lr
 801d652:	bf00      	nop
 801d654:	200018cc 	.word	0x200018cc

0801d658 <memset>:
 801d658:	4402      	add	r2, r0
 801d65a:	4603      	mov	r3, r0
 801d65c:	4293      	cmp	r3, r2
 801d65e:	d100      	bne.n	801d662 <memset+0xa>
 801d660:	4770      	bx	lr
 801d662:	f803 1b01 	strb.w	r1, [r3], #1
 801d666:	e7f9      	b.n	801d65c <memset+0x4>

0801d668 <__libc_init_array>:
 801d668:	b570      	push	{r4, r5, r6, lr}
 801d66a:	4d0d      	ldr	r5, [pc, #52]	; (801d6a0 <__libc_init_array+0x38>)
 801d66c:	4c0d      	ldr	r4, [pc, #52]	; (801d6a4 <__libc_init_array+0x3c>)
 801d66e:	1b64      	subs	r4, r4, r5
 801d670:	10a4      	asrs	r4, r4, #2
 801d672:	2600      	movs	r6, #0
 801d674:	42a6      	cmp	r6, r4
 801d676:	d109      	bne.n	801d68c <__libc_init_array+0x24>
 801d678:	4d0b      	ldr	r5, [pc, #44]	; (801d6a8 <__libc_init_array+0x40>)
 801d67a:	4c0c      	ldr	r4, [pc, #48]	; (801d6ac <__libc_init_array+0x44>)
 801d67c:	f000 f900 	bl	801d880 <_init>
 801d680:	1b64      	subs	r4, r4, r5
 801d682:	10a4      	asrs	r4, r4, #2
 801d684:	2600      	movs	r6, #0
 801d686:	42a6      	cmp	r6, r4
 801d688:	d105      	bne.n	801d696 <__libc_init_array+0x2e>
 801d68a:	bd70      	pop	{r4, r5, r6, pc}
 801d68c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d690:	4798      	blx	r3
 801d692:	3601      	adds	r6, #1
 801d694:	e7ee      	b.n	801d674 <__libc_init_array+0xc>
 801d696:	f855 3b04 	ldr.w	r3, [r5], #4
 801d69a:	4798      	blx	r3
 801d69c:	3601      	adds	r6, #1
 801d69e:	e7f2      	b.n	801d686 <__libc_init_array+0x1e>
 801d6a0:	0801e834 	.word	0x0801e834
 801d6a4:	0801e834 	.word	0x0801e834
 801d6a8:	0801e834 	.word	0x0801e834
 801d6ac:	0801e83c 	.word	0x0801e83c

0801d6b0 <__retarget_lock_acquire_recursive>:
 801d6b0:	4770      	bx	lr

0801d6b2 <__retarget_lock_release_recursive>:
 801d6b2:	4770      	bx	lr

0801d6b4 <register_fini>:
 801d6b4:	4b02      	ldr	r3, [pc, #8]	; (801d6c0 <register_fini+0xc>)
 801d6b6:	b113      	cbz	r3, 801d6be <register_fini+0xa>
 801d6b8:	4802      	ldr	r0, [pc, #8]	; (801d6c4 <register_fini+0x10>)
 801d6ba:	f000 b805 	b.w	801d6c8 <atexit>
 801d6be:	4770      	bx	lr
 801d6c0:	00000000 	.word	0x00000000
 801d6c4:	0801d6d5 	.word	0x0801d6d5

0801d6c8 <atexit>:
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	4601      	mov	r1, r0
 801d6cc:	461a      	mov	r2, r3
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f000 b814 	b.w	801d6fc <__register_exitproc>

0801d6d4 <__libc_fini_array>:
 801d6d4:	b538      	push	{r3, r4, r5, lr}
 801d6d6:	4d07      	ldr	r5, [pc, #28]	; (801d6f4 <__libc_fini_array+0x20>)
 801d6d8:	4c07      	ldr	r4, [pc, #28]	; (801d6f8 <__libc_fini_array+0x24>)
 801d6da:	1b64      	subs	r4, r4, r5
 801d6dc:	10a4      	asrs	r4, r4, #2
 801d6de:	b91c      	cbnz	r4, 801d6e8 <__libc_fini_array+0x14>
 801d6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6e4:	f000 b8d2 	b.w	801d88c <_fini>
 801d6e8:	3c01      	subs	r4, #1
 801d6ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d6ee:	4798      	blx	r3
 801d6f0:	e7f5      	b.n	801d6de <__libc_fini_array+0xa>
 801d6f2:	bf00      	nop
 801d6f4:	0801e83c 	.word	0x0801e83c
 801d6f8:	0801e840 	.word	0x0801e840

0801d6fc <__register_exitproc>:
 801d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d700:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801d770 <__register_exitproc+0x74>
 801d704:	4606      	mov	r6, r0
 801d706:	f8da 0000 	ldr.w	r0, [sl]
 801d70a:	4698      	mov	r8, r3
 801d70c:	460f      	mov	r7, r1
 801d70e:	4691      	mov	r9, r2
 801d710:	f7ff ffce 	bl	801d6b0 <__retarget_lock_acquire_recursive>
 801d714:	4b17      	ldr	r3, [pc, #92]	; (801d774 <__register_exitproc+0x78>)
 801d716:	681c      	ldr	r4, [r3, #0]
 801d718:	b90c      	cbnz	r4, 801d71e <__register_exitproc+0x22>
 801d71a:	4c17      	ldr	r4, [pc, #92]	; (801d778 <__register_exitproc+0x7c>)
 801d71c:	601c      	str	r4, [r3, #0]
 801d71e:	6865      	ldr	r5, [r4, #4]
 801d720:	f8da 0000 	ldr.w	r0, [sl]
 801d724:	2d1f      	cmp	r5, #31
 801d726:	dd05      	ble.n	801d734 <__register_exitproc+0x38>
 801d728:	f7ff ffc3 	bl	801d6b2 <__retarget_lock_release_recursive>
 801d72c:	f04f 30ff 	mov.w	r0, #4294967295
 801d730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d734:	b19e      	cbz	r6, 801d75e <__register_exitproc+0x62>
 801d736:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801d73a:	2201      	movs	r2, #1
 801d73c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801d740:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801d744:	40aa      	lsls	r2, r5
 801d746:	4313      	orrs	r3, r2
 801d748:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801d74c:	2e02      	cmp	r6, #2
 801d74e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801d752:	bf02      	ittt	eq
 801d754:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801d758:	4313      	orreq	r3, r2
 801d75a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801d75e:	1c6b      	adds	r3, r5, #1
 801d760:	3502      	adds	r5, #2
 801d762:	6063      	str	r3, [r4, #4]
 801d764:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801d768:	f7ff ffa3 	bl	801d6b2 <__retarget_lock_release_recursive>
 801d76c:	2000      	movs	r0, #0
 801d76e:	e7df      	b.n	801d730 <__register_exitproc+0x34>
 801d770:	20000160 	.word	0x20000160
 801d774:	20001ee8 	.word	0x20001ee8
 801d778:	20001eec 	.word	0x20001eec
 801d77c:	00000000 	.word	0x00000000

0801d780 <floor>:
 801d780:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d788:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d78c:	2e13      	cmp	r6, #19
 801d78e:	460b      	mov	r3, r1
 801d790:	4607      	mov	r7, r0
 801d792:	460c      	mov	r4, r1
 801d794:	4605      	mov	r5, r0
 801d796:	dc32      	bgt.n	801d7fe <floor+0x7e>
 801d798:	2e00      	cmp	r6, #0
 801d79a:	da14      	bge.n	801d7c6 <floor+0x46>
 801d79c:	a334      	add	r3, pc, #208	; (adr r3, 801d870 <floor+0xf0>)
 801d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a2:	f7e2 fcf7 	bl	8000194 <__adddf3>
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	f7e3 f939 	bl	8000a20 <__aeabi_dcmpgt>
 801d7ae:	b138      	cbz	r0, 801d7c0 <floor+0x40>
 801d7b0:	2c00      	cmp	r4, #0
 801d7b2:	da56      	bge.n	801d862 <floor+0xe2>
 801d7b4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801d7b8:	4325      	orrs	r5, r4
 801d7ba:	d055      	beq.n	801d868 <floor+0xe8>
 801d7bc:	4c2e      	ldr	r4, [pc, #184]	; (801d878 <floor+0xf8>)
 801d7be:	2500      	movs	r5, #0
 801d7c0:	4623      	mov	r3, r4
 801d7c2:	462f      	mov	r7, r5
 801d7c4:	e025      	b.n	801d812 <floor+0x92>
 801d7c6:	4a2d      	ldr	r2, [pc, #180]	; (801d87c <floor+0xfc>)
 801d7c8:	fa42 f806 	asr.w	r8, r2, r6
 801d7cc:	ea01 0208 	and.w	r2, r1, r8
 801d7d0:	4302      	orrs	r2, r0
 801d7d2:	d01e      	beq.n	801d812 <floor+0x92>
 801d7d4:	a326      	add	r3, pc, #152	; (adr r3, 801d870 <floor+0xf0>)
 801d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7da:	f7e2 fcdb 	bl	8000194 <__adddf3>
 801d7de:	2200      	movs	r2, #0
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	f7e3 f91d 	bl	8000a20 <__aeabi_dcmpgt>
 801d7e6:	2800      	cmp	r0, #0
 801d7e8:	d0ea      	beq.n	801d7c0 <floor+0x40>
 801d7ea:	2c00      	cmp	r4, #0
 801d7ec:	bfbe      	ittt	lt
 801d7ee:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d7f2:	4133      	asrlt	r3, r6
 801d7f4:	18e4      	addlt	r4, r4, r3
 801d7f6:	ea24 0408 	bic.w	r4, r4, r8
 801d7fa:	2500      	movs	r5, #0
 801d7fc:	e7e0      	b.n	801d7c0 <floor+0x40>
 801d7fe:	2e33      	cmp	r6, #51	; 0x33
 801d800:	dd0b      	ble.n	801d81a <floor+0x9a>
 801d802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d806:	d104      	bne.n	801d812 <floor+0x92>
 801d808:	4602      	mov	r2, r0
 801d80a:	f7e2 fcc3 	bl	8000194 <__adddf3>
 801d80e:	4607      	mov	r7, r0
 801d810:	460b      	mov	r3, r1
 801d812:	4638      	mov	r0, r7
 801d814:	4619      	mov	r1, r3
 801d816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d81a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801d81e:	f04f 38ff 	mov.w	r8, #4294967295
 801d822:	fa28 f802 	lsr.w	r8, r8, r2
 801d826:	ea10 0f08 	tst.w	r0, r8
 801d82a:	d0f2      	beq.n	801d812 <floor+0x92>
 801d82c:	a310      	add	r3, pc, #64	; (adr r3, 801d870 <floor+0xf0>)
 801d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d832:	f7e2 fcaf 	bl	8000194 <__adddf3>
 801d836:	2200      	movs	r2, #0
 801d838:	2300      	movs	r3, #0
 801d83a:	f7e3 f8f1 	bl	8000a20 <__aeabi_dcmpgt>
 801d83e:	2800      	cmp	r0, #0
 801d840:	d0be      	beq.n	801d7c0 <floor+0x40>
 801d842:	2c00      	cmp	r4, #0
 801d844:	da0a      	bge.n	801d85c <floor+0xdc>
 801d846:	2e14      	cmp	r6, #20
 801d848:	d101      	bne.n	801d84e <floor+0xce>
 801d84a:	3401      	adds	r4, #1
 801d84c:	e006      	b.n	801d85c <floor+0xdc>
 801d84e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d852:	2301      	movs	r3, #1
 801d854:	40b3      	lsls	r3, r6
 801d856:	441d      	add	r5, r3
 801d858:	42af      	cmp	r7, r5
 801d85a:	d8f6      	bhi.n	801d84a <floor+0xca>
 801d85c:	ea25 0508 	bic.w	r5, r5, r8
 801d860:	e7ae      	b.n	801d7c0 <floor+0x40>
 801d862:	2500      	movs	r5, #0
 801d864:	462c      	mov	r4, r5
 801d866:	e7ab      	b.n	801d7c0 <floor+0x40>
 801d868:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d86c:	e7a8      	b.n	801d7c0 <floor+0x40>
 801d86e:	bf00      	nop
 801d870:	8800759c 	.word	0x8800759c
 801d874:	7e37e43c 	.word	0x7e37e43c
 801d878:	bff00000 	.word	0xbff00000
 801d87c:	000fffff 	.word	0x000fffff

0801d880 <_init>:
 801d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d882:	bf00      	nop
 801d884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d886:	bc08      	pop	{r3}
 801d888:	469e      	mov	lr, r3
 801d88a:	4770      	bx	lr

0801d88c <_fini>:
 801d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d88e:	bf00      	nop
 801d890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d892:	bc08      	pop	{r3}
 801d894:	469e      	mov	lr, r3
 801d896:	4770      	bx	lr
